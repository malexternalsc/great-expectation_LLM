user_prompt,reference,hypothesis,rouge1_fmeasure,rouge2_fmeasure,rougeL_fmeasure,granular_bleu_score
For field 'policy_renewal_date': Ensure the format of datetime strings is consistent with '%Y-%m-%d'. Validate that no renewal dates are before the policy start date.,"expect_column_values_to_match_strftime_format(column=""policy_renewal_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""policy_renewal_date"", column_B=""policy_start_date"")","expect_column_values_to_match_strftime_format(column=""policy_renewal_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_greater_than(column=""policy_renewal_date"", value=""policy_start_date"")",0.8955223880597015,0.7384615384615385,0.8955223880597015,78.38980450011162
Ensure the `SKU` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""SKU""),expect_column_values_to_not_be_null(column=""SKU"")","expect_column_to_exist(column=""SKU""),expect_column_values_to_not_be_null(column=""SKU""),expect_column_values_to_be_unique(column=""SKU"")",0.85,0.8421052631578948,0.7,71.41300691065217
"For the `agent_id` field: Confirm that it has unique values, matches the type 'integer', and does not allow null entries.","expect_column_values_to_be_unique(column=""agent_id""),expect_column_values_to_be_of_type(column=""agent_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""agent_id"")","expect_column_values_to_be_unique(column=""agent_id""),expect_column_values_to_be_of_type(column=""agent_id"", type_=""int""),expect_column_values_to_not_be_null(column=""agent_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
Check that the `salary` column contains values greater than zero and is of type 'numeric'.,"expect_column_values_to_be_greater_than(column=""salary"", value=0),expect_column_values_to_be_of_type(column=""salary"", type_=""numeric"")","expect_column_values_to_be_between(column=""salary"", min_value=0),expect_column_values_to_be_of_type(column=""salary"", type_=""numeric"")ЎыџNЎыџN",0.8695652173913043,0.7727272727272727,0.8695652173913043,86.61821352954148
Ensure the number of rows in the `routes` table is equal to the number of entries in the `trucks` table.,"expect_table_row_count_to_equal_other_table(table=""routes"", other_table=""trucks"")","expect_table_row_count_to_be_between(table=""routes"", min_value=0, max_value=trucks_row_count)",0.5333333333333333,0.35714285714285715,0.5333333333333333,43.22131067610315
Check that the `peak_demand` values have a mean of `2000` kWh and a maximum value not exceeding `5000` kWh.,"expect_column_mean_to_be_between(column=""peak_demand"", min_value=2000, max_value=2000),expect_column_max_to_be_between(column=""peak_demand"", max_value=5000)","expect_column_mean_to_be_between(column=""peak_demand"", min_value=2000, max_value=5000),expect_column_max_to_be_between(column=""peak_demand"", max_value=5000)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.59112197162901
"Ensure the `tariff_type` column values are within the set `['Residential', 'Commercial', 'Industrial']`.","expect_column_values_to_be_in_set(column=""tariff_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""tariff_type"", value_set=['Residential', 'Commercial', 'Industrial'])",1.0,1.0,1.0,100.00000000000004
For the `word_count` field: Validate that all entries are integers within the range of 100 to 5000.,"expect_column_values_to_be_of_type(column=""word_count"", type_=""int""),expect_column_values_to_be_between(column=""word_count"", min_value=100, max_value=5000)","expect_column_values_to_be_of_type(column=""word_count"", type_=""int""),expect_column_values_to_be_between(column=""word_count"", min_value=100, max_value=5000)",1.0,1.0,1.0,100.00000000000004
Ensure the `json_metadata` column contains valid JSON objects and adheres to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""json_metadata""),expect_column_values_to_match_json_schema(column=""json_metadata"", schema=""your_json_schema_here"")","expect_column_values_to_be_json_parseable(column=""json_metadata""),expect_column_values_to_match_json_schema(column=""json_metadata"", schema={""type"": ""object""})",0.8749999999999999,0.8695652173913043,0.8749999999999999,83.25176000164102
"For field 'meta_tags': Validate that the entries are valid JSON arrays, ensuring all tags are strings and follow the specified naming conventions.","expect_column_values_to_be_json_parseable(column=""meta_tags""),expect_column_values_to_match_json_schema(column=""meta_tags"", schema={""type"": ""array"", ""items"": {""type"": ""string""}})","expect_column_values_to_be_json_parseable(column=""meta_tags""),expect_column_values_to_match_json_schema(column=""meta_tags"", schema={""type"": ""array"", ""items"": {""type"": ""string"", ""pattern"": ""^meta-\\d+$""}}),expect_column_values_to_be_unique(column=""meta_tags"")",0.8125000000000001,0.8064516129032258,0.8125000000000001,65.76743089889747
For field 'email_address': Ensure the field matches the type 'text'. Validate that all values in (email_address) conform to the regex pattern for valid email formats. Ensure this field exists.,"expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9850746268656716,0.9846153846153847,0.9850746268656716,94.39502475945417
"In the `usage_type` column, check that the values are limited to `['Residential', 'Commercial', 'Industrial']` and that no invalid entries exist.","expect_column_values_to_be_in_set(column=""usage_type"", value_set=[""Residential"", ""Commercial"", ""Industrial""]),expect_column_values_to_not_be_in_set(column=""usage_type"", value_set=[""InvalidEntry1"", ""InvalidEntry2"", ""InvalidEntry3""])","expect_column_values_to_be_in_set(column=""usage_type"", value_set=['Residential', 'Commercial', 'Industrial'])",0.6521739130434783,0.6363636363636364,0.6521739130434783,19.39536943157399
"For field 'measurement_value': Validate that the values in (measurement_value) fall within the range of 0.0 to 100.0, inclusive. Ensure this field exists.","expect_column_to_exist(column=""measurement_value""),expect_column_values_to_be_between(column=""measurement_value"", min_value=0.0, max_value=100.0)","expect_column_to_exist(column=""measurement_value""),expect_column_values_to_be_between(column=""measurement_value"", min_value=0, max_value=100)",0.9565217391304348,0.9545454545454545,0.9565217391304348,90.91628937646658
Verify that the `precipitation` column includes values that are greater than or equal to 0 and less than or equal to 500 mm.,"expect_column_values_to_be_between(column=""precipitation"", min_value=0, max_value=500)","expect_column_values_to_be_between(column=""precipitation"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
Check that the `temperature` column values are within the range of -50 to 50 degrees Celsius. Ensure uniqueness of entries.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_be_unique(column=""temperature"")","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_be_unique(column=""temperature"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `contract_duration` column values are in months and between 12 and 36.,"expect_column_values_to_be_between(column=""contract_duration"", min_value=12, max_value=36)","expect_column_values_to_be_of_type(column=""contract_duration"", type_=""int""),expect_column_values_to_be_between(column=""contract_duration"", min_value=12, max_value=36)",0.7142857142857143,0.7000000000000001,0.7142857142857143,50.38793199614183
"For the `coverage_start_date`, confirm that all values are less than or equal to the `coverage_end_date`.","expect_column_pair_values_A_to_be_less_than_B(column_A=""coverage_start_date"", column_B=""coverage_end_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""coverage_start_date"", column_B=""coverage_end_date"")",0.9500000000000001,0.8947368421052632,0.9500000000000001,94.0028651976138
"In the `billing_cycle` column: Ensure values match the set `['Monthly', 'Quarterly', 'Yearly']` and that there are no duplicates.","expect_column_values_to_be_in_set(column=""billing_cycle"", value_set=['Monthly', 'Quarterly', 'Yearly']),expect_column_values_to_be_unique(column=""billing_cycle"")","expect_column_values_to_be_in_set(column=""billing_cycle"", value_set=['Monthly', 'Quarterly', 'Yearly']),expect_column_values_to_be_unique(column=""billing_cycle"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `interest_rate` column values are within the range of 0.01 to 0.20, inclusive.","expect_column_values_to_be_between(column=""interest_rate"", min_value=0.01, max_value=0.20)","expect_column_values_to_be_between(column=""interest_rate"", min_value=0.01, max_value=0.20)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `forecast_accuracy` column contains values that are either 'High', 'Medium', or 'Low'.","expect_column_values_to_be_in_set(column=""forecast_accuracy"", value_set=[""High"", ""Medium"", ""Low""])","expect_column_values_to_be_in_set(column=""forecast_accuracy"", value_set=[""High"", ""Medium"", ""Low""])",1.0,1.0,1.0,100.00000000000004
Confirm that the `wallet_balance` column has values that are always greater than or equal to zero.,"expect_column_values_to_be_between(column=""wallet_balance"", min_value=0)","expect_column_values_to_be_greater_than_or_equal_to(column=""wallet_balance"", value=0)",0.7407407407407408,0.56,0.7407407407407408,60.317983955216874
"For `patient_age`, validate that all values are integers within the range of 0 to 120.","expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120),expect_column_values_to_be_of_type(column=""patient_age"", type_=""int"")","expect_column_values_to_be_of_type(column=""patient_age"", type_=""int""),expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
For the `pickup_date`: Ensure all entries conform to the 'MM/DD/YYYY' format and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""pickup_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""pickup_date"")","expect_column_values_to_match_strftime_format(column=""pickup_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""pickup_date"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `test_results` column contains valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""test_results"", schema=...)","expect_column_values_to_match_json_schema(column=""test_results"")",0.9523809523809523,0.9473684210526316,0.9523809523809523,73.25197744024094
For field 'meter_reading_date': Ensure the field matches the type 'date'. Validate that values in (meter_reading_date) are unique and occur within the last 30 days.,"expect_column_values_to_be_of_type(column=""meter_reading_date"", type_=""date""),expect_column_values_to_be_unique(column=""meter_reading_date""),expect_column_values_to_be_between(column=""meter_reading_date"", min_value=(current_date - timedelta(days=30)), max_value=current_date)","expect_column_values_to_be_of_type(column=""meter_reading_date"", type_=""date""),expect_select_column_values_to_be_unique(column=""meter_reading_date""),expect_column_values_to_be_between(column=""meter_reading_date"", min_value=(datetime.datetime.now() - datetime.timedelta(days=30)).strftime('%Y-%m-%d'), max_value=(datetime.datetime.now() - datetime.timedelta(days=0)).strftime('%Y-%m-%d')",0.7692307692307692,0.7058823529411764,0.7692307692307692,62.3699696992481
"For field `rating`: Ensure the field is of type 'float' and that all values are within the range [0.0, 10.0].","expect_column_values_to_be_of_type(column=""rating"", type_=""float""),expect_column_values_to_be_between(column=""rating"", min_value=0.0, max_value=10.0)","expect_column_values_to_be_of_type(column=""rating"", type_=""float""),expect_column_values_to_be_between(column=""rating"", min_value=0.0, max_value=10.0)",1.0,1.0,1.0,100.00000000000004
For fields `start_time` and `end_time`: Ensure that `end_time` is always greater than `start_time` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_time"", column_B=""start_time"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_time"", column_B=""start_time"")",1.0,1.0,1.0,100.00000000000004
For fields 'transaction_date' and 'transaction_amount': Ensure that the sum of transaction amounts for each account matches the expected total for the month.,"expect_multicolumn_sum_to_equal(column_list=[""transaction_date"", ""transaction_amount""], value=expected_total)","expect_multicolumn_sum_to_equal(column_list=[""transaction_amount""], expected_sum=expected_total_for_the_month)",0.7333333333333334,0.6428571428571429,0.7333333333333334,67.62614585942505
Ensure the `customer_id` column has unique values matching the pattern `E-xxxx`.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_match_regex(column=""customer_id"", regex=r""^E-\d{4}$"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_match_regex(column=""customer_id"", regex=""E-.*"")",0.9302325581395349,0.8780487804878049,0.9302325581395349,79.49693274938934
Check that the `date_collected` column contains valid dates and has no missing values.,"expect_column_to_exist(column=""date_collected""),expect_column_values_to_be_dateutil_parseable(column=""date_collected""),expect_column_values_to_not_be_null(column=""date_collected"")","expect_column_to_exist(column=""date_collected""),expect_column_values_to_be_dateutil_parseable(column=""date_collected""),expect_column_values_to_not_be_null(column=""date_collected"")",1.0,1.0,1.0,100.00000000000004
For fields 'first_name' and 'last_name': Ensure both fields are of type 'text'. Validate that the lengths of values in (first_name) and (last_name) do not exceed 50 characters.,"expect_column_values_to_be_of_type(column=""first_name"", type_=""text""),expect_column_values_to_be_of_type(column=""last_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""first_name"", min_value=0, max_value=50),expect_column_value_lengths_to_be_between(column=""last_name"", min_value=0, max_value=50)","expect_column_values_to_be_of_type(column=""first_name"", type_=""text""),expect_column_values_to_be_of_type(column=""last_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""first_name"", min_value=0, max_value=50),expect_column_value_lengths_to_be_between(column=""last_name"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
Confirm that the `meter_id` column contains only distinct values matching the predefined set of meter IDs for the service area.,"expect_column_values_to_be_in_set(column=""meter_id"", value_set=predefined_meter_id_set),expect_column_values_to_be_unique(column=""meter_id"")","expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_in_set(column=""meter_id"", value_set=""set_of_meter_ids_for_the_service_area"")",0.851851851851852,0.7307692307692307,0.5925925925925927,73.75446811120955
For field 'sensor_id': Ensure the field matches the type 'text'. Validate that all values in (sensor_id) conform to the pattern 'SENSOR-XXXXXX' where 'XXXXXX' is a 6-digit alphanumeric code.,"expect_column_values_to_be_of_type(column=""sensor_id"", type_=""text""),expect_column_values_to_match_regex(column=""sensor_id"", regex=r""^SENSOR-\w{6}$"")","expect_column_values_to_be_of_type(column=""sensor_id"", type_=""text""),expect_column_values_to_match_regex(column=""sensor_id"", regex=r""^SENSOR-\d{6}$"")",0.9615384615384616,0.92,0.9615384615384616,95.94863506034301
Ensure the Kullback-Leibler divergence between the `transaction_fee` distribution and the expected fee distribution is below 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""transaction_fee"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""transaction_fee"", threshold=0.1)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `grade` column contains values between 0 and 100, with a standard deviation not exceeding 15.","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""grade"", min_value=0, max_value=15)","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""grade"", min_value=None, max_value=15)",0.9642857142857143,0.9259259259259259,0.9642857142857143,95.7414465780703
For fields `hours_worked` and `overtime_hours`: Ensure the total of `hours_worked` plus `overtime_hours` does not exceed 80 hours per week.,"expect_multicolumn_sum_to_equal(column_list=[""hours_worked"", ""overtime_hours""], target_value=80)","expect_multicolumn_sum_to_be_between(column_list=[""hours_worked"", ""overtime_hours""], max_value=80)",0.8275862068965518,0.6666666666666666,0.8275862068965518,79.15373991305087
Verify that the `age` column values are within the range of 0 to 120 years.,"expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)","expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)",1.0,1.0,1.0,100.00000000000004
Validate that `quantity_shipped` is a positive integer and that the sum of `quantity_ordered` equals the sum of `quantity_shipped`.,"expect_column_values_to_be_between(column=""quantity_shipped"", min_value=1, max_value=None),expect_multicolumn_sum_to_equal(column_a=""quantity_ordered"", column_b=""quantity_shipped"")","expect_column_values_to_be_between(column=""quantity_shipped"", min_value=1, max_value=None),expect_column_pair_values_to_be_equal(column_A=""quantity_ordered"", column_B=""quantity_shipped"")",0.896551724137931,0.8214285714285715,0.896551724137931,78.17099047586316
Check that the `meter_reading` column contains no negative values and is in increasing order for time-series data.,"expect_column_values_to_be_between(column=""meter_reading"", min_value=0),expect_column_values_to_be_increasing(column=""meter_reading"")","expect_column_values_to_be_greater_than(column=""meter_reading"", threshold=0),expect_column_values_to_be_increasing(column=""meter_reading"")",0.8571428571428571,0.75,0.8571428571428571,84.80434560605691
"Check that the `square_footage` values have a mean above 800 and do not exceed 10,000.","expect_column_mean_to_be_between(column=""square_footage"", min_value=800, max_value=10000)","expect_column_mean_to_be_between(column=""square_footage"", min_value=800, max_value=None)  # Since there is no maximum value, use None for max_value.",0.6829268292682926,0.6666666666666666,0.6829268292682926,63.123366382967156
Check that the `delivery_date` column contains dates that are in the future and not null.,"expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=datetime.utcnow(), max_value=None)","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""2023-10-15"", max_value=None)  # Adjusting min_value depending on the specific case",0.6153846153846155,0.5789473684210527,0.6153846153846155,47.18210418291331
"For the `voting_method` and `voter_id`: Ensure that the `voting_method` is one of the specified set: ['In-Person', 'Mail-In', 'Early Voting'].","expect_column_values_to_be_in_set(column=""voting_method"", value_set=['In-Person', 'Mail-In', 'Early Voting'])","expect_column_values_to_be_in_set(column=""voting_method"", value_set=['In-Person', 'Mail-In', 'Early Voting'])",1.0,1.0,1.0,100.00000000000004
For field 'user_agent': Ensure the field matches the type 'text'. Validate that all values in (user_agent) do not match any patterns from a list of known malicious user agents.,"expect_column_values_to_be_of_type(column=""user_agent"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""user_agent"", regex_list=[r""malicious_pattern_1"", r""malicious_pattern_2"", r""malicious_pattern_3""])","expect_column_values_to_be_of_type(column=""user_agent"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""user_agent"", regex_list=[r""user_agent_pattern_1"", r""user_agent_pattern_2"", r""user_agent_pattern_3""])  # replace with actual known malicious user agents",0.8333333333333334,0.7317073170731708,0.8095238095238095,78.49971668676939
Verify that the `patient_id` column contains values that are strictly numeric and of length 10.,"expect_column_values_to_match_regex(column=""patient_id"", regex=r""^\d{10}$"")","expect_column_values_to_match_regex(column=""patient_id"", regex=r""^\d{10}$""),expect_column_lengths_to_equal(column=""patient_id"", length=10)",0.7222222222222222,0.7058823529411764,0.7222222222222222,57.77389266087588
For field 'sensor_location': Ensure the field exists. Validate that the length of (sensor_location) is between 5 and 100 characters and does not match the pattern 'unknown|undefined'.,"expect_column_to_exist(column=""sensor_location""),expect_column_value_lengths_to_be_between(column=""sensor_location"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""sensor_location"", regex=""unknown|undefined"")","expect_column_to_exist(column=""sensor_location""),expect_column_value_lengths_to_be_between(column=""sensor_location"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""sensor_location"", regex=r""^unknown$|^undefined$"")",0.9863013698630138,0.9577464788732395,0.9863013698630138,89.09770698992358
Ensure the `shipment_date` column contains dates formatted as `MM/DD/YYYY`.,"expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%m/%d/%Y"")","expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%m/%d/%Y"")",1.0,1.0,1.0,100.00000000000004
For the `inventory_level` column: Confirm that all values are greater than or equal to 0 and less than or equal to 1000.,"expect_column_values_to_be_between(column=""inventory_level"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""inventory_level"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field `user_id`: Ensure that `user_id` values exist in the `user_accounts` table to maintain referential integrity.,"expect_select_column_values_to_be_unique_within_record(column=""user_id""),expect_column_pair_values_to_be_in_set(column_A=""user_id"", column_B=""user_accounts"")","expect_column_values_to_be_in_set(column=""user_id"", value_set=user_accounts_table_user_ids)  # Assuming user_accounts_table_user_ids is the set of all user_ids in the `user_accounts` table.",0.4444444444444445,0.3278688524590164,0.41269841269841273,38.77583400518874
For field `supplier_info`: Ensure all values are valid JSON objects that match the specified schema for supplier data.,"expect_column_values_to_match_json_schema(column=""supplier_info"", schema={""type"": ""object"", ""properties"": { /* specify your schema properties here */ }})","expect_column_values_to_be_json_parseable(column=""supplier_info""),expect_column_values_to_match_json_schema(column=""supplier_info"", schema=""specified schema for supplier data"")",0.5777777777777778,0.46511627906976744,0.5777777777777778,44.78926758469401
For field 'registration_date': Ensure the expect column to exist; Ensure this field matches the type 'date' and contains values less than or equal to the current date.,"expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than_or_equal_to(column=""registration_date"", value=current_date)","expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_between(column=""registration_date"", min_value=None, max_value=""current_date"")",0.8571428571428571,0.7941176470588235,0.8571428571428571,80.73890273177689
For the 'clients' table: Confirm that the 'social_security_number' column matches the pattern of a valid SSN (###-##-####) and that it does not contain any duplicates.,"expect_column_values_to_match_regex(column=""social_security_number"", regex=r""^\d{3}-\d{2}-\d{4}$""),expect_column_values_to_be_unique(column=""social_security_number"")","expect_column_to_exist(column=""social_security_number""),expect_column_values_to_match_regex(column=""social_security_number"", regex=r""^[0-9]{3}-[0-9]{2}-[0-9]{4}$""),expect_column_values_to_be_unique(column=""social_security_number"")",0.746268656716418,0.6461538461538462,0.746268656716418,59.92837293349475
Check that the number of rows in the `prescriptions` table equals the number of rows in the `patients` table.,"expect_table_row_count_to_equal_other_table(table=""prescriptions"", other_table=""patients"")","expect_table_row_count_to_equal_other_table(table_name=""prescriptions"", other_table_name=""patients"")",0.9285714285714286,0.7692307692307692,0.9285714285714286,77.82206607249452
Ensure that the `author_email` field matches a valid email pattern and does not contain any SQL-like patterns such as `'%` or `';`.,"expect_column_values_to_match_regex(column=""author_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_match_regex(column=""author_email"", regex=r""[%';]"")","expect_column_values_to_match_regex(column=""author_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_not_match_regex(column=""author_email"", regex=r""%""),expect_column_values_to_not_match_regex(column=""author_email"", regex=r"";"")ávající",0.7761194029850745,0.7384615384615384,0.7761194029850745,65.91957104526935
For the `tags` multi-column: Validate that the combined values are unique within each record and match existing tags in the `tags` table.,"expect_compound_columns_to_be_unique(columns=[""tags""]),expect_column_values_to_be_in_set(column=""tags"", value_set=existing_tags_set)","expect_compound_columns_to_be_unique(column_A=""tags"", column_B=""tags""),expect_column_values_to_match_list_of_values(column=""tags"", value_list=existing_tags)",0.7083333333333333,0.5652173913043478,0.7083333333333333,53.78130593989271
For field 'student_id': Ensure the field exists and matches the type 'integer'. Confirm that all values in (student_id) are unique and not null.,"expect_column_to_exist(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_unique(column=""student_id"")","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_unique(column=""student_id"")",0.9736842105263158,0.9459459459459459,0.9736842105263158,97.15003449158377
Confirm that the `hours_worked` column contains only integer values between 0 and 80.,"expect_column_values_to_be_between(column=""hours_worked"", min_value=0, max_value=80),expect_column_values_to_be_of_type(column=""hours_worked"", type_=""int"")","expect_column_values_to_be_between(column=""hours_worked"", min_value=0, max_value=80),expect_column_values_to_be_of_type(column=""hours_worked"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Check that the `weather_condition` field contains distinct values from the set `['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']`.","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'])","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'])",1.0,1.0,1.0,100.00000000000004
In the `service_request_date` column: Validate that all dates are in the past and conform to the 'YYYY-MM-DD' format.,"expect_column_values_to_be_dateutil_parseable(column=""service_request_date""),expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""service_request_date"", value_set=[date for date in pd.date_range(start='1900-01-01', end=pd.Timestamp.now())])","expect_column_values_to_be_dateutil_parseable(column=""service_request_date""),expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""service_request_date"")  # Assuming date values are increasing over time, adjust this accordingly if this isn't always the case.",0.6972477064220184,0.6542056074766356,0.6788990825688074,66.39970378804142
"For field 'tags': Ensure the field matches the type 'JSON'. Validate that the tags must be a valid JSON array of strings, with each string having a maximum length of 30 characters. Ensure this field exists.","expect_column_to_exist(column=""tags""),expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema={""type"": ""array"", ""items"": {""type"": ""string"", ""maxLength"": 30}})","expect_column_to_exist(column=""tags""),expect_column_values_to_be_of_type(column=""tags"", type_=""JSON""),expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema={""type"": ""array"", ""item"": {""type"": ""string"", ""maxLength"": 30}}), # For max length, you can check ""expected_column_value_lengths_to_be_between(column=""tags"", min_value=0, max_value=30) """,0.6666666666666666,0.6595744680851063,0.6666666666666666,53.31577259113932
Verify that the distribution of `player_scores` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""player_scores"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""player_scores"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For table 'network_usage': Ensure the number of rows matches the number of active users today. Ensure the column 'data_usage' exists and is in megabytes.,"expect_table_row_count_to_equal(column=""active_users_today""),expect_column_to_exist(column=""data_usage""),expect_column_values_to_be_of_type(column=""data_usage"", type_=""float"")  # Assuming data_usage is stored as a float for megabytes.","expect_table_row_count_to_equal(active_users_today),expect_column_to_exist(column=""data_usage""),expect_column_values_to_be_of_type(column=""data_usage"", type_=""int""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=None)",0.7317073170731708,0.6500000000000001,0.7073170731707318,64.74008261005952
For field 'registration_date': Ensure the expect column values to be unique; Ensure this field matches the type 'date' and contains values less than or equal to the current date.,"expect_column_values_to_be_unique(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_between(column=""registration_date"", min_value=None, max_value=""current_date"")","expect_column_values_to_be_unique(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than(column=""registration_date"", value=""current_date"")",0.9014084507042254,0.8405797101449276,0.9014084507042254,86.04454628380924
For field 'temperature': Ensure the values are within the range of -50 to 150 degrees Celsius. Validate the data type as 'float'.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=150),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=150),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `payment_status` column only contains values from the set `['Pending', 'Completed', 'Failed']`.","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Pending', 'Completed', 'Failed'])","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Pending', 'Completed', 'Failed'])",1.0,1.0,1.0,100.00000000000004
Ensure the `recipient_email` column contains valid email formats and that there are no duplicate entries.,"expect_column_values_to_match_regex(column=""recipient_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""recipient_email"")","expect_column_values_to_match_regex(column=""recipient_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""recipient_email"")",1.0,1.0,1.0,100.00000000000004
For field 'enrollment_date': Ensure this field is required (not null). Ensure the field matches the type 'date'. Ensure no duplicate dates exist for the same student.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_select_column_values_to_be_unique_within_record(column=""enrollment_date"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_compound_columns_to_be_unique(column_A=""enrollment_date"", column_B=""student_id"")",0.8809523809523809,0.7804878048780488,0.8809523809523809,81.59556609768707
Ensure that the `last_updated` column has values that can be parsed to datetime and are not null.,"expect_column_to_exist(column=""last_updated""),expect_column_values_to_be_dateutil_parseable(column=""last_updated""),expect_column_values_to_not_be_null(column=""last_updated"")","expect_column_values_to_not_be_null(column=""last_updated""),expect_column_values_to_be_of_type(column=""last_updated"", type_=""datetime"")",0.7346938775510203,0.6808510638297872,0.6530612244897959,65.2936046107023
"For the `attachment_type` field: Ensure values match the specified set of allowed types: `['image/jpeg', 'application/pdf', 'text/plain']`.","expect_column_values_to_be_in_set(column=""attachment_type"", value_set=['image/jpeg', 'application/pdf', 'text/plain'])","expect_column_values_to_be_in_set(column=""attachment_type"", value_set=['image/jpeg', 'application/pdf', 'text/plain'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `product_description` string lengths do not exceed 500 characters and include at least one bullet point.,"expect_column_value_lengths_to_be_between(column=""product_description"", min_value=0, max_value=500),expect_column_values_to_match_regex(column=""product_description"", regex=r""\bullet"")","expect_column_value_lengths_to_be_between(column=""product_description"", min_value=1, max_value=500),expect_column_values_to_match_regex(column=""product_description"", regex=r""^\.\.\.\*\.*\.*"")  # Adding a regular expression for the bullet points.",0.8571428571428572,0.7868852459016393,0.8571428571428572,66.42739526243393
For field 'experiment_date': Ensure the field matches the type 'date'. Validate that all entries in (experiment_date) are in the format 'YYYY-MM-DD'. Ensure this field exists.,"expect_column_to_exist(column=""experiment_date""),expect_column_values_to_be_of_type(column=""experiment_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""experiment_date""),expect_column_values_to_be_of_type(column=""experiment_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Check that the `last_updated` datetime values are not older than 30 days from the current date.,"expect_column_values_to_be_dateutil_parseable(column=""last_updated""),expect_column_values_to_be_between(column=""last_updated"", min_value=""2023-09-28"", max_value=""2023-10-28"")","expect_column_values_to_be_between(column=""last_updated"", min_value=""2023-07-25 00:00:00"", max_value=""2023-08-25 00:00:00"")",0.5555555555555556,0.5,0.5555555555555556,50.990192861935235
Ensure that the `vehicle_id` column contains values that match the defined set of active vehicle IDs.,"expect_column_values_to_be_in_set(column=""vehicle_id"", value_set=active_vehicle_ids)","expect_column_values_to_be_in_set(column=""vehicle_id"", value_set=active_vehicles)",0.9655172413793104,0.962962962962963,0.9655172413793104,87.74160051033415
Validate that the `comment_count` column values reflect a distribution with a p-value greater than 0.05 in the Kolmogorov-Smirnov test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""comment_count"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""comment_count"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `last_updated` column does not contain future dates.,"expect_column_values_to_be_less_than(column=""last_updated"", value=""CURRENT_TIMESTAMP"")","expect_column_values_to_be_in_set(column=""last_updated"", value_set=[date for date in last_updated if date <= datetime.datetime.now()])",0.5,0.4117647058823529,0.5,38.77508167878377
Verify that the `results` column contains valid JSON objects conforming to the specified JSON schema.,"expect_column_values_to_match_json_schema(column=""results"", json_schema=your_json_schema_here)","expect_column_values_to_match_json_schema(column=""results"")",0.7499999999999999,0.7272727272727273,0.7499999999999999,52.57325980511512
For field 'salary': Ensure the field matches the type 'decimal'. Ensure values in (salary) are greater than zero. Ensure this field exists.,"expect_column_to_exist(column=""salary""),expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""salary"", threshold=0)","expect_column_to_exist(column=""salary""),expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""salary"", value=0)",0.9642857142857143,0.9259259259259259,0.9642857142857143,96.13658593861551
Ensure the `account_number` column contains only unique values and cannot be null.,"expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")","expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")",1.0,1.0,1.0,100.00000000000004
For field 'game_location': Ensure the field matches the type 'text'. Ensure the field does not exceed 100 characters. Ensure this field exists.,"expect_column_to_exist(column=""game_location""),expect_column_value_lengths_to_be_between(column=""game_location"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""game_location"", type_=""text"")","expect_column_to_exist(column=""game_location""),expect_column_values_to_be_of_type(column=""game_location"", type_=""text""),expect_column_value_lengths_to_be_between(column=""game_location"", min_value=0, max_value=100),  # Note: This assumes there is only one game location per row. If there can be multiple game locations, replace ""1"" with ""n"" (where n = the max # of game locations)  #expect_column_values_to_match_json_schema(column=""game_location"")  # Note: This assumes there is a custom schema for the ""game_location"" field. If there isn't one, replace it with the above statement, which just validates that the ""game_location"" column values are of type ""text"" and have a length between 0 and 100 characters.",0.45161290322580644,0.4313725490196078,0.4129032258064516,38.93725636885474
Ensure the `order_id` column contains unique values. No duplicates should exist across records.,"expect_column_values_to_be_unique(column=""order_id"")","expect_column_values_to_be_unique(column=""order_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `username` field values are strings that are 3 to 15 characters long and match the regex pattern `^[a-zA-Z0-9_]+$`.,"expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15),expect_column_values_to_match_regex(column=""username"", regex=""^[a-zA-Z0-9_]+$"")","expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",0.6818181818181818,0.5238095238095238,0.5909090909090908,33.31696792384896
For field `billing_date`: Validate that the date format is 'YYYY-MM-DD' and check that the date is not in the future.,"expect_column_values_to_match_strftime_format(column=""billing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""billing_date"", value_set=[date for date in date_range if date <= current_date]) ","expect_column_values_to_match_strftime_format(column=""billing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""billing_date"")  # This assumes ""billing_date"" is a column with date values and that they're parsed correctly.  # Check this assumption if needed.",0.6506024096385542,0.5432098765432098,0.6265060240963856,62.952365134264355
Verify that the `coverage_start_date` column contains valid dates and all entries are in the past.,"expect_column_values_to_be_dateutil_parseable(column=""coverage_start_date""),expect_column_values_to_be_less_than(column=""coverage_start_date"", value=""now"")","expect_column_to_exist(column=""coverage_start_date""),expect_column_values_to_be_of_type(column=""coverage_start_date"", type_=""datetime""),expect_column_values_to_be_decreasing(column=""coverage_start_date"")",0.6545454545454547,0.5660377358490566,0.6545454545454547,56.108488126601145
Check that the count of unique `transaction_id` values matches the total number of rows in the `transactions` table.,"expect_column_unique_value_count_to_be_equal(column=""transaction_id"", value=""total_rows"")","expect_column_unique_value_count_to_be_equal_to_table_row_count(column=""transaction_id"")",0.8275862068965518,0.6666666666666666,0.7586206896551724,67.35712962812117
Ensure the `student_id` column contains string values matching the pattern `^[A-Z]{3}-[0-9]{4}$` and that all values are unique.,"expect_column_values_to_match_regex(column=""student_id"", regex=r""^[A-Z]{3}-[0-9]{4}$""),expect_column_values_to_be_unique(column=""student_id"")","expect_column_values_to_match_regex(column=""student_id"", regex=r""^[A-Z]{3}-[0-9]{4}$""),expect_column_values_to_be_unique(column=""student_id"")lásil",0.962962962962963,0.9615384615384615,0.962962962962963,98.42470450179327
Verify that the `transaction_id` column contains only unique values and does not have null entries.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
"In the `team_id` column: Ensure values must be one of the set `['TeamA', 'TeamB', 'TeamC']`.","expect_column_values_to_be_in_set(column=""team_id"", value_set=['TeamA', 'TeamB', 'TeamC'])","expect_column_values_to_be_in_set(column=""team_id"", value_set=['TeamA', 'TeamB', 'TeamC'])",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_id` column contains only unique values and is of type 'integer'.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""integer"")",0.9523809523809523,0.9500000000000001,0.9523809523809523,95.30451753349615
For the `last_restocked` field: Ensure all entries follow the datetime format `%m/%d/%Y` and are valid dates.,"expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""last_restocked"")","expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""last_restocked"")",1.0,1.0,1.0,100.00000000000004
Ensure the `response_time` field is formatted as a duration and does not exceed 60 minutes.,"expect_column_values_to_match_regex(column=""response_time"", regex=r""^(?:(?:[0-5]?[0-9]:)?[0-5]?[0-9]:[0-5]?[0-9]|[0-5]?[0-9]m|[0-5]?[0-9]s)$""),expect_column_values_to_be_between(column=""response_time"", min_value=""00:00:00"", max_value=""01:00:00"")","expect_column_values_to_be_of_type(column=""response_time"", type_=""duration""),expect_column_values_to_be_between(column=""response_time"", min_value=""00:00:00"", max_value=""01:00:00"")",0.6265060240963854,0.5679012345679013,0.6265060240963854,32.62587844471791
"Ensure that the `debit` and `credit` columns are mutually exclusive per transaction, meaning both cannot be greater than 0 at the same time.","expect_column_pair_values_A_to_be_less_than_B(column_A=""debit"", column_B=""credit"")","expect_column_sum_to_be_between(column=""debit"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""credit"", min_value=0, max_value=None),expect_multicolumn_sum_to_be_between(column_list=[""debit"", ""credit""], min_value=0, max_value=0)",0.3,0.06896551724137931,0.26666666666666666,13.516973766592805
Verify that the `employee_id` column contains only distinct values and matches the pattern 'EMP-\\d{4}'.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""^EMP-\d{4}$"")","expect_column_distinct_values_to_be_unique(column=""employee_id""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""EMP-\d{4}"")",0.9787234042553191,0.9333333333333332,0.9787234042553191,89.45592785483497
"For the `order_quantity` field, confirm that all entries are of type `integer` and non-null, ensuring values are greater than zero.","expect_column_values_to_not_be_null(column=""order_quantity""),expect_column_values_to_be_of_type(column=""order_quantity"", type_=""int""),expect_column_values_to_be_greater_than(column=""order_quantity"", value=0)","expect_column_values_to_be_of_type(column=""order_quantity"", type_=""integer""),expect_column_values_to_not_be_null(column=""order_quantity""),expect_column_values_to_be_greater_than(column=""order_quantity"", value=0)",0.9705882352941176,0.9393939393939394,0.8235294117647058,96.74122890261673
"Validate that the `transaction_amount` is within the range of 0.01 to 1,000,000.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=1000000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
"Validate that the combination of `first_name`, `last_name`, and `email` fields is unique across all employee records to prevent duplicates.","expect_compound_columns_to_be_unique(column_A=""first_name"", column_B=""last_name"", column_C=""email"")","expect_compound_columns_to_be_unique(columns=[""first_name"", ""last_name"", ""email""])",0.8275862068965517,0.5925925925925926,0.8275862068965517,53.35330433740482
"Ensure that the `team_name` field contains values from the set `['Team A', 'Team B', 'Team C', 'Team D']`.","expect_column_values_to_be_in_set(column=""team_name"", value_set=['Team A', 'Team B', 'Team C', 'Team D'])","expect_column_values_to_be_in_set(column=""team_name"", value_set=['Team A', 'Team B', 'Team C', 'Team D'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `customer_phone` column values match the regex pattern `^\+?[0-9]{10,15}$`.","expect_column_values_to_match_regex(column=""customer_phone"", regex=r""^\+?[0-9]{10,15}$"")","expect_column_values_to_match_regex(column=""customer_phone"", regex=r""^\+?[0-9]{10,15}$"")",1.0,1.0,1.0,100.00000000000004
For the `malware_detection_rate`: Ensure the standard deviation is less than 0.1 and the mean is above 0.75.,"expect_column_stdev_to_be_between(column=""malware_detection_rate"", min_value=0, max_value=0.1),expect_column_mean_to_be_between(column=""malware_detection_rate"", min_value=0.75, max_value=None)","expect_column_stdev_to_be_between(column=""malware_detection_rate"", min_value=0, max_value=0.1),expect_column_mean_to_be_between(column=""malware_detection_rate"", min_value=0.75)",0.9538461538461539,0.9523809523809523,0.9538461538461539,89.79531976006626
"Ensure that the `alert_level` column values are one of the following: `['low', 'medium', 'high']`.","expect_column_values_to_be_in_set(column=""alert_level"", value_set=['low', 'medium', 'high'])","expect_column_values_to_be_in_set(column=""alert_level"", value_set=['low','medium', 'high'])",1.0,1.0,1.0,100.00000000000004
Validate that the `filing_date` values are within the range of `01-01-2000` to `12-31-2023`.,"expect_column_values_to_be_between(column=""filing_date"", min_value=""2000-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""filing_date"", min_value=""2000-01-01"", max_value=""2023-12-31"")илакти",1.0,1.0,1.0,97.69961126936086
For field 'election_date': Ensure this field is required (not null). Ensure the field matches the type 'date'. Ensure dates are in the future.,"expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_increasing(column=""election_date"")","expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_greater_than(column=""election_date"", value=datetime.datetime.now())",0.8955223880597015,0.8615384615384616,0.8955223880597015,81.68548603830345
"For the `payment_method` column: Ensure values are from the set `['Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer']`. Validate that no null entries exist.","expect_column_values_to_be_in_set(column=""payment_method"", value_set=['Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer']),expect_column_values_to_not_be_null(column=""payment_method"")","expect_column_values_to_be_in_set(column=""payment_method"", value_set=['Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer']),expect_column_values_to_not_be_null(column=""payment_method"")",1.0,1.0,1.0,100.00000000000004
For the `email` field: Validate that all entries match the regex pattern '^[^@]+@[^@]+\.[^@]+$' for valid email format.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[^@]+@[^@]+\.[^@]+$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.[\w\.-]+$"")",0.8695652173913044,0.8571428571428571,0.8695652173913044,61.536732283788616
For the `match_date` field: Validate that all entries conform to the datetime format 'YYYY-MM-DD HH:MM' and are not in the past.,"expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d %H:%M""),expect_column_values_to_be_dateutil_parseable(column=""match_date"")  # This checks if the values can be parsed as datetime,# To check if the dates are not in the past, you would need a custom expectation, as the reference does not provide a built-in expectation for that.","expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format='%Y-%m-%d %H:%M'),expect_column_values_to_be_dateutil_parseable(column=""match_date""),expect_column_values_to_be_greater_than_or_equal_to(column=""match_date"", value=""current_date"")",0.5925925925925926,0.49056603773584906,0.5740740740740741,55.20860136774039
For field 'transaction_id': Ensure this field is required (not null). Validate that all IDs are unique and match the pattern 'TXN-\d{7}$'.,"expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^TXN-\d{7}$"")","expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""TXN-\d{7}$"")",1.0,1.0,1.0,96.71498886054289
For the `voter_age` column: Ensure all values are integers between 18 and 120.,"expect_column_values_to_be_between(column=""voter_age"", min_value=18, max_value=120),expect_column_values_to_be_of_type(column=""voter_age"", type_=""int"")","expect_column_values_to_be_between(column=""voter_age"", min_value=18, max_value=120)ávající",0.6818181818181819,0.6666666666666667,0.6818181818181819,40.20853853061944
Verify that the `employee_id` is unique across the dataset.,"expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the `meter_reading` column contains values that are non-negative integers and within the range of 0 to 10000.,"expect_column_values_to_be_between(column=""meter_reading"", min_value=0, max_value=10000),expect_column_values_to_be_of_type(column=""meter_reading"", type_=""int"")","expect_column_values_to_be_of_type(column=""meter_reading"", type_=""int""),expect_column_values_to_be_between(column=""meter_reading"", min_value=0, max_value=10000)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
"Ensure the `transaction_type` column contains only distinct values from the set `['Purchase', 'Refund', 'Transfer']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Purchase', 'Refund', 'Transfer'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Purchase', 'Refund', 'Transfer'])",1.0,1.0,1.0,100.00000000000004
For the `appointment_date` field: Verify that all entries are in the format 'YYYY-MM-DD' and can be parsed correctly. Ensure no missing values exist.,"expect_column_to_exist(column=""appointment_date""),expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date""),expect_column_values_to_not_be_null(column=""appointment_date"")","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date""),expect_column_values_to_not_be_null(column=""appointment_date"")",0.9090909090909091,0.9066666666666667,0.9090909090909091,81.06843242768656
"For the `product_metadata` JSON field: Validate that all entries contain valid JSON with keys 'category', 'supplier', and 'stock_level'.","expect_column_values_to_be_json_parseable(column=""product_metadata""),expect_column_values_to_match_json_schema(column=""product_metadata"", schema={""type"": ""object"", ""properties"": {""category"": {""type"": ""string""}, ""supplier"": {""type"": ""string""}, ""stock_level"": {""type"": ""integer""}}, ""required"": [""category"", ""supplier"", ""stock_level""]})","expect_column_values_to_be_json_parseable(column=""product_metadata""),expect_column_values_to_match_json_schema(column=""product_metadata"", schema={""type"": ""object"", ""properties"": {""category"": {}, ""supplier"": {}, ""stock_level"": {}}})",0.835820895522388,0.8307692307692308,0.835820895522388,57.931386459757896
For the `quantity` field: Ensure all values are greater than zero and that no entries are null. Validate that the sum of quantities does not exceed the maximum stock limit.,"expect_column_values_to_be_greater_than(column=""quantity"", value=0),expect_column_values_to_not_be_null(column=""quantity""),expect_column_sum_to_be_between(column=""quantity"", min_value=None, max_value=max_stock_limit)","expect_column_values_to_be_greater_than(column=""quantity"", threshold=0),expect_column_values_to_not_be_null(column=""quantity""),expect_column_sum_to_be_between(column=""quantity"", min_value=0, max_value=100)  # Maximum stock limit is 100, so we should check if the sum of quantities is greater than or equal to 0, but lesser than or equal to 100.",0.673469387755102,0.625,0.673469387755102,64.1956724114898
Check that the `claim_amount` column has no missing values and that its distribution fits a log-normal distribution with a p-value > 0.05.,"expect_column_values_to_not_be_null(column=""claim_amount""),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""claim_amount"", threshold=0.05)","expect_column_values_to_not_be_null(column=""claim_amount""),chi_square_test_column_parameter_estimation_p_value(column=""claim_amount"", null=True, param=0, alpha=0.05)",0.6785714285714286,0.48148148148148145,0.6428571428571429,61.84994442263688
Ensure the `enrollment_date` column contains datetime strings that can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")",0.7407407407407407,0.72,0.7407407407407407,54.60951078044391
Ensure the `unit_price` column values are greater than zero and sorted in decreasing order.,"expect_column_values_to_be_greater_than(column=""unit_price"", value=0),expect_column_values_to_be_decreasing(column=""unit_price"")","expect_column_values_to_be_greater_than(column=""unit_price"", value=0),expect_column_values_to_be_increasing(column=""unit_price"")",0.9523809523809523,0.9,0.9523809523809523,94.40602839389663
Verify that the `filing_date` matches the `YYYY-MM-DD` format and all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""filing_date"", value=""today"")","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""filing_date"", min_value=""1900-01-01"", max_value=""today"")",0.847457627118644,0.7719298245614036,0.847457627118644,76.02196135913141
For field 'billing_amount': Ensure the field matches the type 'decimal'. Validate that the maximum billing amount does not exceed $1000 and that the median billing amount is above $100.,"expect_column_values_to_be_of_type(column=""billing_amount"", type_=""decimal""),expect_column_max_to_be_between(column=""billing_amount"", max_value=1000),expect_column_median_to_be_between(column=""billing_amount"", min_value=100, max_value=None)","expect_column_values_to_be_of_type(column=""billing_amount"", type_=""decimal""),expect_column_max_to_be_between(column=""billing_amount"", max_value=1000),expect_column_median_to_be_greater_than(column=""billing_amount"", value=100)",0.9066666666666667,0.8493150684931505,0.9066666666666667,85.49059866811518
Ensure the `timestamp` column contains valid datetime values and that all timestamps are within the last 30 days.,"expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=""2023-09-24"", max_value=""2023-10-24"")","expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=datetime.now() - timedelta(days=30), max_value=datetime.now())",0.7636363636363638,0.7169811320754716,0.7636363636363638,70.40653912153402
Verify that the `json_data` column content matches the expected format with at least two key-value pairs related to weather conditions.,"expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""minProperties"": 2, ""properties"": {""weather_condition_1"": {""type"": ""string""}, ""weather_condition_2"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {  ""condition_type"": {""type"": ""string""},  ""condition_data"": {""type"": ""object"", ""properties"": {""temperature"": {""type"": ""number""}, ""humidity"": {""type"": ""number""}}}}})",0.6909090909090909,0.49056603773584906,0.6909090909090909,58.605337581466664
"For the `transaction_type` field: Ensure the field contains only values from the set `['Deposit', 'Withdrawal', 'Transfer']`. Validate that no values are null.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer']),expect_column_values_to_not_be_null(column=""transaction_type"")","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Deposit"", ""Withdrawal"", ""Transfer""]),expect_column_values_to_not_be_null(column=""transaction_type"")",1.0,1.0,1.0,80.3595280013572
"Check that the `feedback_score` column values are integers ranging from 1 to 5, with no missing entries.","expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""feedback_score""),expect_column_values_to_be_of_type(column=""feedback_score"", type_=""int"")","expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""feedback_score"")",0.8064516129032258,0.8,0.8064516129032258,57.95782787848098
For field 'last_update': Ensure all timestamps match the ISO 8601 format. Ensure this field exists.,"expect_column_to_exist(column=""last_update""),expect_column_values_to_match_strftime_format(column=""last_update"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_to_exist(column=""last_update""),expect_column_values_to_match_strftime_format(column=""last_update"", strftime_format=""%Y-%m-%dT%H:%M:%S%z""),expect_column_values_to_be_increasing(column=""last_update"")",0.7999999999999999,0.7931034482758621,0.7999999999999999,68.9849083266226
For the `publication_date` field: Ensure all entries are valid datetime formatted as `YYYY-MM-DD` and are not in the future.,"expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publication_date""),expect_column_values_to_be_between(column=""publication_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""publication_date"", value=""future_date"")  # Assuming future_date is some arbitrary date in the future, replace with your actual use case.",0.5977011494252873,0.4941176470588235,0.5977011494252873,56.60726879888991
Ensure the combination of `customer_id` and `subscription_id` is unique within the `subscriptions` table.,"expect_compound_columns_to_be_unique(column_A=""customer_id"", column_B=""subscription_id"")","expect_compound_columns_to_be_unique(column_list=[""customer_id"", ""subscription_id""])",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.7176346014632
For field 'sample_id': Ensure the field matches the type 'integer'. Ensure values in (sample_id) are unique and not null. Ensure this field exists.,"expect_column_to_exist(column=""sample_id""),expect_column_values_to_not_be_null(column=""sample_id""),expect_column_values_to_be_unique(column=""sample_id""),expect_column_values_to_be_of_type(column=""sample_id"", type_=""int"")","expect_column_to_exist(column=""sample_id""),expect_column_values_to_be_unique(column=""sample_id""),expect_column_values_to_not_be_null(column=""sample_id""),expect_column_values_to_be_of_type(column=""sample_id"", type_=""int"")",1.0,1.0,0.9210526315789473,100.00000000000004
"Confirm that the `status` column contains values only from the set `['online', 'offline', 'error']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['online', 'offline', 'error'])","expect_column_values_to_be_in_set(column=""status"", value_set=['online', 'offline', 'error'])",1.0,1.0,1.0,100.00000000000004
For the `email` column: Ensure all entries follow a valid email format and that they are unique.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")",1.0,1.0,1.0,100.00000000000004
Ensure the distribution of `blood_pressure` readings adheres to expected behavior with a p-value greater than 0.05 in the KS test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""blood_pressure"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""blood_pressure"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For the 'device_data' table: Check that the number of rows is equal to the number of active devices tracked. Ensure this table exists.,"expect_table_row_count_to_equal(other_table=""active_devices"", table=""device_data""),expect_table_to_exist(table=""device_data"")","expect_table_row_count_to_be_between(table=""device_data"", min_value=active_devices_tracked, max_value=active_devices_tracked)",0.55,0.3684210526315789,0.45,39.569065125110306
Check the `followers_count` field for non-negative integers and ensure that unique counts align with user growth metrics.,"expect_column_values_to_be_between(column=""followers_count"", min_value=0, max_value=None),expect_column_unique_value_count_to_be_between(column=""followers_count"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""followers_count"", min_value=0),expect_column_values_to_be_unique(column=""followers_count"")",0.7924528301886793,0.5882352941176471,0.7547169811320755,52.85444819799451
For field 'employee_id': Ensure the field matches the type 'integer'. Ensure values in (employee_id) are unique across records within the dataset.,"expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_be_unique(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
For field 'player_id': Ensure the field is required (not null). Ensure values are unique and of type 'text'.,"expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""text"")","expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""text""),expect_column_values_to_be_unique(column=""player_id"")",1.0,0.9666666666666667,0.8387096774193549,99.64092777538484
"For field 'genre': Ensure all values match the format of a valid genre from the set ['Action', 'Adventure', 'RPG', 'Strategy']. Ensure this field exists.","expect_column_to_exist(column=""genre""),expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG', 'Strategy'])","expect_column_to_exist(column=""genre""),expect_column_values_to_be_in_set(column=""genre"", value_set=[""Action"", ""Adventure"", ""RPG"", ""Strategy""])",1.0,1.0,1.0,71.88025737002374
Confirm that the combination of `voter_id` and `election_id` is unique across all records.,"expect_compound_columns_to_be_unique(column_names=[""voter_id"", ""election_id""])","expect_compound_columns_to_be_unique(column_A=""voter_id"", column_B=""election_id"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
"Ensure the `service_type` column contains only values from the set `['Electric', 'Gas', 'Water']`.","expect_column_values_to_be_in_set(column=""service_type"", value_set=['Electric', 'Gas', 'Water'])","expect_column_values_to_be_in_set(column=""service_type"", value_set=['Electric', 'Gas', 'Water'])",1.0,1.0,1.0,100.00000000000004
For the 'release_date' field: Ensure the field exists and matches the datetime format 'YYYY-MM-DD'. Validate that all release dates are not in the future.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""2000-01-01"", max_value=""today"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""1900-01-01"", max_value=""now"")",0.9591836734693877,0.9375,0.9591836734693877,95.81965031750468
"For the `case_status` field: Ensure it only includes values from ['Open', 'Closed', 'Pending'] and that there are no missing entries.","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_not_be_null(column=""case_status"")","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending', 'None']),expect_column_values_to_not_be_null(column=""case_status"")",0.7575757575757575,0.7499999999999999,0.7575757575757575,59.992205402960565
Ensure the proportion of unique values in the `study_type` column is at least 75%.,"expect_column_proportion_of_unique_values_to_be_between(column=""study_type"", min_value=0.75, max_value=1.0)","expect_column_unique_value_ratio_to_be_between(column=""study_type"", min_value=0.75)",0.8,0.6666666666666667,0.8,61.536859391721386
For the `product_code` column: Ensure all values conform to the regex pattern `^[A-Z]{3}-[0-9]{4}$` and are unique within the dataset.,"expect_column_values_to_match_regex(column=""product_code"", regex=r""^[A-Z]{3}-[0-9]{4}$""),expect_column_values_to_be_unique(column=""product_code"")","expect_column_values_to_match_regex(column=""product_code"", regex=r""^[A-Z]{3}-[0-9]{4}$""),expect_column_values_to_be_unique(column=""product_code"")",1.0,1.0,1.0,100.00000000000004
Validate that the `sample_size` field contains only positive integers greater than 0.,"expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""sample_size"", type_=""int"")","expect_column_values_to_be_greater_than(column=""sample_size"", value=0),expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=None)",0.8518518518518519,0.7692307692307693,0.6296296296296297,80.73322751031829
Ensure the `energy_consumption` column has a sum that falls within the range of 1000 to 5000 kWh for the reporting period.,"expect_column_sum_to_be_between(column=""energy_consumption"", min_value=1000, max_value=5000)","expect_column_sum_to_be_between(column=""energy_consumption"", min_value=1000, max_value=5000)",1.0,1.0,1.0,100.00000000000004
"For the `product_id` column, ensure all values are unique and not null.","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure that for each record, the `sender_address` and `receiver_address` columns are unique pairs.","expect_compound_columns_to_be_unique(columns=[""sender_address"", ""receiver_address""])","expect_compound_columns_to_be_unique(columns=[""sender_address"", ""receiver_address""])",1.0,1.0,1.0,100.00000000000004
For field 'consumption_kwh': Ensure the field matches the type 'float'. Validate that values in (consumption_kwh) are within the range of 0.0 to 10000.0 kWh.,"expect_column_values_to_be_of_type(column=""consumption_kwh"", type_=""float""),expect_column_values_to_be_between(column=""consumption_kwh"", min_value=0.0, max_value=10000.0)","expect_column_values_to_be_of_type(column=""consumption_kwh"", type_=""float""),expect_column_values_to_be_between(column=""consumption_kwh"", min_value=0.0, max_value=10000.0)",1.0,1.0,1.0,100.00000000000004
For the `policy_number` field: Ensure all entries are unique and do not contain any null values.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")",1.0,1.0,1.0,100.00000000000004
For field 'filing_date': Ensure the field is required (not null). Ensure that all values in 'filing_date' adhere to the format '%Y-%m-%d'.,"expect_column_values_to_not_be_null(column=""filing_date""),expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""filing_date""),expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Check that the `last_contact_date` column contains valid datetime strings and is not null.,"expect_column_to_exist(column=""last_contact_date""),expect_column_values_to_be_dateutil_parseable(column=""last_contact_date""),expect_column_values_to_not_be_null(column=""last_contact_date"")","expect_column_values_to_be_dateutil_parseable(column=""last_contact_date""),expect_column_values_to_not_be_null(column=""last_contact_date"")",0.846153846153846,0.8400000000000001,0.846153846153846,67.85785054080092
For field 'review_rating': Ensure the field matches the type 'decimal'. Ensure the field contains values between 1.0 and 5.0. Ensure this field exists.,"expect_column_to_exist(column=""review_rating""),expect_column_values_to_be_of_type(column=""review_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""review_rating"", min_value=1.0, max_value=5.0)","expect_column_to_exist(column=""review_rating""),expect_column_values_to_be_of_type(column=""review_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""review_rating"", min_value=1.0, max_value=5.0)",1.0,1.0,1.0,100.00000000000004
For field 'content_id': Ensure the field matches the type 'uuid'. Ensure values in (content_id) are unique and follow the UUID format.,"expect_column_values_to_be_of_type(column=""content_id"", type_=""uuid""),expect_column_values_to_be_unique(column=""content_id""),expect_column_values_to_match_regex(column=""content_id"", regex=r""^[{(]?[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}[)}]?$"")","expect_column_values_to_be_of_type(column=""content_id"", type_=""uuid""),expect_column_values_to_be_unique(column=""content_id""),expect_column_values_to_match_regex(column=""content_id"", regex=r""^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"")",0.9724770642201834,0.9532710280373832,0.9724770642201834,89.31160526249721
Ensure that the combination of `device_id` and `timestamp` is unique across all records in the IoT dataset.,"expect_compound_columns_to_be_unique(columns=[""device_id"", ""timestamp""])","expect_compound_columns_to_be_unique(columns=[""device_id"", ""timestamp""])",1.0,1.0,1.0,100.00000000000004
"For field 'meter_reading': Ensure this field matches the type 'integer'. Validate that all readings are non-negative and less than '100,000'.","expect_column_values_to_be_of_type(column=""meter_reading"", type_=""int""),expect_column_values_to_be_between(column=""meter_reading"", min_value=0, max_value=100000)","expect_column_values_to_be_of_type(column=""meter_reading"", type_=""int""),expect_column_values_to_be_between(column=""meter_reading"", min_value=0, max_value=100000)",1.0,1.0,1.0,100.00000000000004
For field `forecast_date`: Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure that all `forecast_date` values are in the future.,"expect_column_values_to_not_be_null(column=""forecast_date""),expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_be_greater_than(column=""forecast_date"", value=datetime.datetime.now())","expect_column_values_to_not_be_null(column=""forecast_date""),expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_be_increasing(column=""forecast_date"")",0.8955223880597015,0.8615384615384616,0.8955223880597015,80.93728396689892
"For the `wind_speed` field: Ensure values are of type 'float'. Ensure values lie within the range of [0, 150] km/h.","expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
Ensure the `view_count` column contains only non-negative integers.,"expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0)","expect_column_values_to_be_between(column=""view_count"", min_value=0)",0.6666666666666666,0.6470588235294118,0.6666666666666666,31.542127463894783
"For field 'outcome_measure': Ensure the field exists. Ensure values in (outcome_measure) do not exceed the specified set ['success', 'failure']. Ensure this field is not null.","expect_column_to_exist(column=""outcome_measure""),expect_column_values_to_be_in_set(column=""outcome_measure"", value_set=['success', 'failure']),expect_column_values_to_not_be_null(column=""outcome_measure"")","expect_column_to_exist(column=""outcome_measure""),expect_column_values_to_be_in_set(column=""outcome_measure"", value_set=['success', 'failure']),expect_column_values_to_not_be_null(column=""outcome_measure"")",1.0,1.0,1.0,100.00000000000004
For the combination of `device_id` and `timestamp`: Ensure this combination is unique across all records and that timestamps are of type 'datetime'.,"expect_compound_columns_to_be_unique(columns=[""device_id"", ""timestamp""]),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime"")","expect_compound_columns_to_be_unique(column_a=""device_id"", column_b=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime"")",0.9333333333333333,0.8372093023255814,0.9333333333333333,77.87119372649113
"Ensure the average `treatment_cost` in the `treatment_records` table is greater than $100 and less than $1,000.","expect_column_mean_to_be_between(column=""treatment_cost"", min_value=100, max_value=1000)","expect_column_mean_to_be_between(column=""treatment_cost"", min_value=100, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"Ensure the `currency_type` column contains only distinct values from the set `['BTC', 'ETH', 'LTC']`.","expect_column_values_to_be_in_set(column=""currency_type"", value_set=['BTC', 'ETH', 'LTC'])","expect_column_values_to_be_in_set(column=""currency_type"", value_set=['BTC', 'ETH', 'LTC'])",1.0,1.0,1.0,100.00000000000004
Ensure the `policy_number` column contains only distinct values and adheres to the format 'POL-YYYY-NNNN'.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^POL-\d{4}-\d{4}$"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^\s*POL-\s*\d{4}-\s*\d{4}-\d{4}$"")",0.9090909090909091,0.830188679245283,0.9090909090909091,77.10517895931542
For field 'game_id': Ensure the field is required (not null). Ensure all game IDs are unique and of type 'integer'.,"expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int"")","expect_column_to_exist(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int""),expect_column_values_to_be_unique(column=""game_id"")",0.898550724637681,0.8955223880597014,0.7536231884057972,80.78752923813731
Verify that the `quantity_ordered` and `quantity_shipped` columns sum to a value equal to the `total_quantity` for each order.,"expect_multicolumn_sum_to_equal(column_list=[""quantity_ordered"", ""quantity_shipped""], target_column=""total_quantity"")","expect_multicolumn_sum_to_equal(column_list=[""quantity_ordered"", ""quantity_shipped""], column_to_sum=""total_quantity"")",0.9032258064516129,0.7586206896551724,0.9032258064516129,84.10878495620229
In the `temperature` column: Ensure values are within the range of -50 to 50 degrees Celsius. Ensure there are no missing values.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_not_be_null(column=""temperature"")","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_not_be_null(column=""temperature"")",1.0,1.0,1.0,100.00000000000004
"For field 'order_status': Ensure the field exists. Validate that values in 'order_status' match one of the predefined statuses: 'Pending', 'Shipped', 'Delivered', 'Cancelled'.","expect_column_to_exist(column=""order_status""),expect_column_values_to_be_in_set(column=""order_status"", value_set=[""Pending"", ""Shipped"", ""Delivered"", ""Cancelled""])","expect_column_to_exist(column=""order_status""),expect_column_values_to_be_in_set(column=""order_status"", value_set=[""Pending"", ""Shipped"", ""Delivered"", ""Cancelled""])",1.0,1.0,1.0,100.00000000000004
For the `content` column: Ensure all entries do not exceed 5000 characters. Validate that this column exists and adheres to this limit.,"expect_column_to_exist(column=""content""),expect_column_value_lengths_to_be_between(column=""content"", min_value=0, max_value=5000)","expect_column_to_exist(column=""content"") and expect_column_value_lengths_to_be_between(column=""content"", min_value=0, max_value=5000)",0.9767441860465117,0.9268292682926829,0.9767441860465117,94.40602839389663
Ensure that the total row count in the `email_logs` table is equal to the expected count of sent emails in `sent_emails_count`.,"expect_table_row_count_to_equal_other_table(table_name=""email_logs"", other_table_name=""sent_emails_count"")",expect_table_row_count_to_equal(expected_table_row_count=sent_emails_count),0.6451612903225806,0.4827586206896552,0.6451612903225806,35.268241768830435
Ensure that the `total_price` is always greater than the `subtotal` for each transaction.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""total_price"", column_B=""subtotal"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""total_price"", column_B=""subtotal"")",1.0,1.0,1.0,100.00000000000004
For the 'evidence' field: Ensure that it matches the type 'text'. Ensure this field can accept null values if no evidence is present.,"expect_column_values_to_be_of_type(column=""evidence"", type_=""text""),expect_column_values_to_be_null(column=""evidence"")","expect_column_values_to_be_of_type(column=""evidence"", type_=""text""),expect_column_values_to_be_null(column=""evidence"")",1.0,1.0,1.0,100.00000000000004
Ensure that the combination of `player_id` and `game_id` is unique across all records in the dataset.,"expect_compound_columns_to_be_unique(column_A=""player_id"", column_B=""game_id"")","expect_compound_columns_to_be_unique(column_A=""player_id"", column_B=""game_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the 'shipments' table has a row count between 100 and 500 and that there are no duplicate 'shipment_id' values.,"expect_table_row_count_to_be_between(table=""shipments"", min_value=100, max_value=500),expect_column_values_to_be_unique(column=""shipment_id"")","expect_table_row_count_to_be_between(min_value=100, max_value=500),expect_column_values_to_be_unique(column=""shipment_id"")",0.9565217391304348,0.909090909090909,0.9565217391304348,85.02929970600178
Check that the `medication` column in the `prescriptions` table does not have any missing entries and adheres to a defined list of approved medications.,"expect_column_values_to_not_be_null(column=""medication""),expect_column_values_to_be_in_set(column=""medication"", value_set=approved_medications_list)","expect_column_values_to_not_be_null(column=""medication""),expect_column_values_to_be_in_set(column=""medication"", value_set=approved_medications)",0.9777777777777777,0.9767441860465117,0.9777777777777777,94.46403964042162
Ensure the `total_votes` column has a row count equal to the number of candidates recorded in the `candidates` table.,"expect_column_row_count_to_equal_other_table(column=""total_votes"", other_table=""candidates"")","expect_table_row_count_to_equal_other_table(table=""candidates"", other_table=""total_votes"")",0.8571428571428571,0.6153846153846154,0.6428571428571429,79.14210438790094
Ensure that the `order_amount` matches the sum of `product_price * quantity` for each order.,"expect_column_pair_values_to_be_equal(left_column=""order_amount"", right_column=""product_price * quantity"")","expect_column_pair_values_to_be_equal(column_A=""product_price"", column_B=""quantity""),expect_column_sum_to_be_between(column=""product_price * quantity"", min_value=1, max_value=None), # Assume it's always the same amount, but if there is a value that would exceed the max_value, that would be an unexpected value for the given scenario.",0.3466666666666666,0.24657534246575347,0.32,23.130634992496777
For field 'followers_count': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Verify that the followers count is a non-negative integer.,"expect_column_values_to_not_be_null(column=""followers_count""),expect_column_values_to_be_of_type(column=""followers_count"", type_=""numeric""),expect_column_values_to_be_between(column=""followers_count"", min_value=0, max_value=None)","expect_column_values_to_not_be_null(column=""followers_count""),expect_column_values_to_be_of_type(column=""followers_count"", type_=""numeric""),expect_column_values_to_be_of_type(column=""followers_count"", type_=""int""),expect_column_values_to_be_greater_than_or_equal_to(column=""followers_count"", value=0)",0.7674418604651163,0.6904761904761905,0.7441860465116279,63.056387727652634
Ensure that the `lead_time` column follows a normal distribution with a mean around 10 days and a standard deviation below 3 days.,"expect_column_mean_to_be_between(column=""lead_time"", min_value=8, max_value=12),expect_column_stdev_to_be_between(column=""lead_time"", min_value=0, max_value=3)","expect_column_mean_to_be_between(column=""lead_time"", min_value=10),expect_column_stdev_to_be_between(column=""lead_time"", max_value=3)",0.8518518518518519,0.7692307692307693,0.8518518518518519,74.57534927921587
"Validate that the `claim_status` column contains only values from the set `['Pending', 'Approved', 'Rejected']`.","expect_column_values_to_be_in_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Rejected'])","expect_column_values_to_be_in_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Rejected'])",1.0,1.0,1.0,100.00000000000004
For field 'patient_id': Ensure the field matches the type 'integer'. Ensure values in (patient_id) are unique and do not exceed 10 digits.,"expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_be_unique(column=""patient_id""),expect_column_value_lengths_to_be_between(column=""patient_id"", min_value=1, max_value=10)","expect_column_values_to_be_of_type(column=""patient_id"", type_=""integer""),expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_between(column=""patient_id"", min_value=1, max_value=10)",0.9589041095890412,0.9014084507042254,0.9589041095890412,91.55070234703135
"Ensure the `voter_id` column contains only unique values and is of type 'text', with no null entries.","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""text""),expect_column_values_to_not_be_null(column=""voter_id"")","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""text""),expect_column_values_to_not_be_null(column=""voter_id"")",1.0,1.0,1.0,100.00000000000004
Validate that the lengths of string values in the `device_type` column are exactly 10 characters long.,"expect_column_value_lengths_to_equal(column=""device_type"", length=10)","expect_column_value_lengths_to_equal(column=""device_type"", length=10)",1.0,1.0,1.0,100.00000000000004
For field 'classroom_number': Ensure the expect column values to be in set;,"expect_column_values_to_be_in_set(column=""classroom_number"", value_set=...)  # Specify the value_set as needed.","expect_column_values_to_be_in_set(column=""classroom_number"", value_set=[""1"", ""2"", ""3"", ""4""])",0.7058823529411765,0.6875,0.7058823529411765,58.15300251674754
Ensure the `listing_date` column contains dates in the format 'MM/DD/YYYY' and all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_increasing(column=""listing_date"")","expect_column_to_exist(column=""listing_date""),expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_increasing(column=""listing_date"")",0.8727272727272727,0.8679245283018869,0.8727272727272727,76.86458850312829
For the `vehicle_logs`: Ensure that `mileage` is greater than or equal to zero. Validate that `vehicle_id` and `driver_id` combinations are unique.,"expect_column_values_to_be_between(column=""mileage"", min_value=0),expect_column_pair_values_to_be_unique(column_A=""vehicle_id"", column_B=""driver_id"")","expect_column_values_to_be_greater_than(column=""mileage"", value=0),expect_compound_columns_to_be_unique(columns=[""vehicle_id"", ""driver_id""])",0.7916666666666666,0.5217391304347826,0.7916666666666666,57.3096750200937
Verify that the `bedrooms` and `bathrooms` columns have values such that `bathrooms` is not greater than `bedrooms`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""bathrooms"", column_B=""bedrooms"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")ávající",0.9411764705882353,0.7500000000000001,0.823529411764706,91.86643051868151
Check that the total number of claims in the `claims_count` column does not exceed `10` for any active policy.,"expect_column_max_to_be_between(column=""claims_count"", max_value=10)","expect_column_value_counts_to_be_between(column=""claims_count"", min_value=0, max_value=10)",0.7857142857142857,0.6153846153846153,0.7857142857142857,64.7381907850557
Ensure the 'transaction_date' column contains values that can be parsed using dateutil for all entries.,"expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
For field 'listing_price': Ensure the field exists. Ensure the field matches the type 'decimal'. Ensure values in (listing_price) are within the range of 10000 to 5000000.,"expect_column_to_exist(column=""listing_price""),expect_column_values_to_be_of_type(column=""listing_price"", type_=""decimal""),expect_column_values_to_be_between(column=""listing_price"", min_value=10000, max_value=5000000)","expect_column_to_exist(column=""listing_price""),expect_column_values_to_be_of_type(column=""listing_price"", type_=""decimal""),expect_column_values_to_be_between(column=""listing_price"", min_value=10000, max_value=5000000)",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_feedback` field is a valid JSON object that conforms to the specified schema.,"expect_column_values_to_match_json_schema(column=""customer_feedback"", schema=""your_schema_here"")","expect_column_values_to_match_json_schema(column=""customer_feedback"")",0.8333333333333333,0.8181818181818181,0.8333333333333333,61.82356500404117
"Validate that the `ip_address` field follows the regular expression pattern `^([0-9]{1,3}\.){3}[0-9]{1,3}$` for valid IPv4 addresses.","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^([0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^[0-9]{1,3}\.){3}[0-9]{1,3}$"")",1.0,1.0,1.0,94.9059089444439
For field 'total_hours_billed': Ensure the field matches the type 'numeric'. Validate that the sum of (total_hours_billed) does not exceed 1000 hours for any case. Ensure this field exists.,"expect_column_to_exist(column=""total_hours_billed""),expect_column_values_to_be_of_type(column=""total_hours_billed"", type_=""numeric""),expect_column_sum_to_be_between(column=""total_hours_billed"", min_value=0, max_value=1000)","expect_column_to_exist(column=""total_hours_billed""),expect_column_values_to_be_of_type(column=""total_hours_billed"", type_=""numeric""),expect_column_sum_to_be_between(column=""total_hours_billed"", min_value=None, max_value=1000)átky",0.9599999999999999,0.9315068493150684,0.9599999999999999,95.82983561855747
Ensure the `case_id` column exists and contains unique identifiers for each case without any null values.,"expect_column_to_exist(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_unique(column=""case_id"")","expect_column_to_exist(column=""case_id""),expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id"")",1.0,1.0,0.8846153846153846,100.00000000000004
"Validate that the `attendance_percentage` column values fall within the range of 0 to 100, with no null entries.","expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""attendance_percentage"")","expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""attendance_percentage"")",1.0,1.0,1.0,100.00000000000004
For field 'employee_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field exists.,"expect_column_to_exist(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int"")","expect_column_to_exist(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_code` column matches the predefined pattern of `^[A-Z]{3}-[0-9]{4}$`.,"expect_column_values_to_match_regex(column=""product_code"", regex=r""^[A-Z]{3}-[0-9]{4}$"")","expect_column_values_to_match_regex(column=""product_code"", regex=r""^[A-Z]{3}-[0-9]{4}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `billing_address` field contains non-empty strings that do not exceed 255 characters and follow the required format.,"expect_column_values_to_not_be_null(column=""billing_address""),expect_column_value_lengths_to_be_between(column=""billing_address"", min_value=1, max_value=255),expect_column_values_to_match_regex(column=""billing_address"", regex=r"".+"")","expect_column_value_lengths_to_be_between(column=""billing_address"", min_value=1, max_value=255),expect_column_values_to_not_be_null(column=""billing_address"")  # Ensure billing address is not null, but empty strings should still match this expectation.",0.7792207792207791,0.6933333333333334,0.5974025974025973,66.46936854226696
"Ensure the `status` column contains only the values `['draft', 'published', 'archived']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['draft', 'published', 'archived'])","expect_column_values_to_be_in_set(column=""status"", value_set=['draft', 'published', 'archived'])",1.0,1.0,1.0,100.00000000000004
"Ensure values in the `battery_level` column are within the range of 0 to 100, and the distribution is in decreasing order.","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""battery_level"")","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""battery_level"")",1.0,1.0,1.0,100.00000000000004
For the `amount` field: Ensure the data type is numeric. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""amount"", type_=""numeric""),expect_column_values_to_not_be_null(column=""amount"")","expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_not_be_null(column=""amount"")",0.9500000000000001,0.8947368421052632,0.9500000000000001,94.52861848260069
"Check that the `customer_id` column only contains values from the predefined set `['C001', 'C002', 'C003']`.","expect_column_values_to_be_in_set(column=""customer_id"", value_set=['C001', 'C002', 'C003'])","expect_column_values_to_be_in_set(column=""customer_id"", value_set=['C001', 'C002', 'C003']) CLIIIK",0.967741935483871,0.9655172413793104,0.967741935483871,97.01154303042087
"For the `views` column, ensure the average number of views per post is greater than or equal to 100 and less than or equal to 10,000.","expect_column_mean_to_be_between(column=""views"", min_value=100, max_value=10000)","expect_column_mean_to_be_between(column=""views"", min_value=100, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Ensure the `block_timestamp` column adheres to the ISO 8601 format for datetime values.,"expect_column_values_to_match_strftime_format(column=""block_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_column_values_to_match_strftime_format(column=""block_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",0.918918918918919,0.9142857142857143,0.918918918918919,88.13200229309496
Validate that the `video_upload_time` column matches the strftime format `%Y-%m-%dT%H:%M:%SZ`.,"expect_column_values_to_match_strftime_format(column=""video_upload_time"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_match_strftime_format(column=""video_upload_time"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,100.00000000000004
For field 'delivery_date': Ensure all entries match the datetime format 'YYYY-MM-DD' and are not earlier than 'order_date'.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_to_be_decreasing(column_A=""order_date"", column_B=""delivery_date"")",0.9206349206349207,0.7868852459016394,0.8571428571428572,86.62256048149976
Confirm that the `sales_volume` column passes the Chi-Square test for normality with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""sales_volume"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""sales_volume"", threshold=0.05)",0.8823529411764706,0.8125,0.8823529411764706,80.94220211349233
"For the `medication` and `dosage` columns, ensure that the sum of `dosage` is less than or equal to 1000 for each medication type.","expect_multicolumn_sum_to_equal(column_list=[""medication"", ""dosage""], value=1000)","expect_column_sum_to_be_between(column=""dosage"", min_value=0, max_value=1000)",0.56,0.17391304347826086,0.56,29.043650450040303
Ensure that the `customer_data` column contains valid JSON objects that conform to the specified JSON schema.,"expect_column_values_to_match_json_schema(column=""customer_data"", json_schema=specified_json_schema)","expect_column_values_to_match_json_schema(column=""customer_data"", schema=""your_schema_here"")",0.8275862068965518,0.6666666666666666,0.8275862068965518,72.97256882150657
"For field 'case_status': Ensure the field is required (not null). Ensure values in 'case_status' must exist in the set ('open', 'closed', 'pending').","expect_column_values_to_not_be_null(column=""case_status""),expect_column_values_to_be_in_set(column=""case_status"", value_set=[""open"", ""closed"", ""pending""])","expect_column_values_to_not_be_null(column=""case_status""),expect_column_values_to_be_in_set(column=""case_status"", value_set=[""open"", ""closed"", ""pending""])",1.0,1.0,1.0,100.00000000000004
"Ensure the `status` column only includes values from the set `['Pending', 'Shipped', 'Delivered', 'Returned']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered', 'Returned'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered', 'Returned'])",1.0,1.0,1.0,100.00000000000004
Ensure the `player_id` column exists and contains unique identifiers for each player.,"expect_column_to_exist(column=""player_id""),expect_column_values_to_be_unique(column=""player_id"")","expect_column_to_exist(column=""player_id""),expect_column_values_to_be_unique(column=""player_id"")",1.0,1.0,1.0,100.00000000000004
"For the `registration_date` column, validate that all dates are in the correct format and within the election year.","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2023-10-01"", max_value=""2024-01-01"")  # Assuming 2023 is the election year  # NOTE: Replace with your actual min and max values for the election year, if known. CLIIIK",0.5981308411214953,0.5523809523809524,0.5794392523364486,49.59135018706128
In the `likes` column: Ensure all values are non-null integers and that the average number of likes is greater than 100.,"expect_column_values_to_not_be_null(column=""likes""),expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_mean_to_be_between(column=""likes"", min_value=100)","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""likes"", min_value=100, max_value=None)",0.6440677966101694,0.5263157894736842,0.6440677966101694,53.59743783463052
For the `voter_id` column: Ensure all values are alphanumeric strings and comply with the specified format of 'VOTER-XXXX'.,"expect_column_values_to_match_regex(column=""voter_id"", regex=r""^VOTER-\d{4}$"")","expect_column_values_to_match_regex(column=""voter_id"", regex=r""^(VOTER-[0-9a-zA-Z]{7}$)"")",0.7741935483870968,0.7586206896551724,0.7741935483870968,67.4191515173314
Ensure that the `start_date` and `end_date` in the `billing_period` are in increasing order.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""start_date"", column_B=""end_date"")","expect_column_values_to_be_increasing(column=""start_date""),expect_column_values_to_be_increasing(column=""end_date"")",0.6111111111111112,0.23529411764705882,0.6111111111111112,45.65548562636216
"Ensure the `transaction_status` column contains values only from the set `['Pending', 'Completed', 'Failed']`.","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['Pending', 'Completed', 'Failed'])","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['Pending', 'Completed', 'Failed'])",1.0,1.0,1.0,100.00000000000004
For field 'vendor_rating': Ensure the field matches the type 'decimal'. Ensure the field contains values between 0.0 and 5.0. Ensure this field exists.,"expect_column_to_exist(column=""vendor_rating""),expect_column_values_to_be_of_type(column=""vendor_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""vendor_rating"", min_value=0.0, +B83max_value=5.0)","expect_column_to_exist(column=""vendor_rating""),expect_column_values_to_be_of_type(column=""vendor_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""vendor_rating"", min_value=0, max_value=5)",0.9428571428571428,0.9117647058823529,0.9428571428571428,91.02996148800057
Verify that the `activation_date` field contains datetime strings formatted as '%Y-%m-%d' and can be parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""activation_date"")","expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""activation_date"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `performance_rating` column contains values from 1 to 5, where the proportion of each rating is consistent with prior years' data.","expect_column_values_to_be_between(column=""performance_rating"", min_value=1, max_value=5),expect_column_proportion_of_unique_values_to_be_between(column=""performance_rating"", min_value=0.1, max_value=0.3)  # Adjust proportion values as necessary based on prior years' data.","expect_column_values_to_be_between(column=""performance_rating"", min_value=1, max_value=5),expect_column_values_to_equal_ratio(column=""performance_rating"", ratio=1/4, other_ratio=1/4, other_ratio_2=1/4, other_ratio_3=1/4, other_ratio_4=1/4)  # Assuming that the other_ratio_* columns correspond to the other ratings 1/4, 1/4, 1/4, and 1/4, respectively.",0.4285714285714285,0.34545454545454546,0.4285714285714285,37.80148068071837
For the `stock_quantity` column: Ensure that all values are integers and no values are negative.,"expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
"Verify that the `grade` column contains values within the range of 0 to 100, reflecting valid scores.","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For field 'category': Ensure the field matches the type 'text'. Ensure values in (category) must exist in the set ['blog', 'news', 'tutorial', 'review']. Ensure this field exists.","expect_column_to_exist(column=""category""),expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=['blog', 'news', 'tutorial', 'review'])","expect_column_to_exist(column=""category""),expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=['blog', 'news', 'tutorial','review'])",1.0,1.0,1.0,100.00000000000004
Ensure the `device_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
For the `attendance` JSON field: Validate that it conforms to the specified JSON schema for attendance records. Ensure the field is not null.,"expect_column_values_to_be_json_parseable(column=""attendance""),expect_column_values_to_not_be_null(column=""attendance""),expect_column_values_to_match_json_schema(column=""attendance"", schema={""type"": ""object"", ""properties"": { /* JSON schema properties for attendance records */ }})","expect_column_values_to_match_json_schema(column=""attendance""),expect_column_values_to_not_be_null(column=""attendance"")",0.6545454545454547,0.6415094339622641,0.5818181818181818,29.537421677083955
Ensure the `price` column contains numeric values that are greater than or equal to 0.,"expect_column_values_to_be_between(column=""price"", min_value=0)","expect_column_values_to_be_between(column=""price"", min_value=0)",1.0,1.0,1.0,100.00000000000004
Ensure the `product_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
For field 'bio': Ensure the field matches the type 'text'. Ensure the length of values in (bio) is less than or equal to 160 characters. Ensure this field exists.,"expect_column_to_exist(column=""bio""),expect_column_value_lengths_to_be_between(column=""bio"", min_value=0, max_value=160),expect_column_values_to_be_of_type(column=""bio"", type_=""text"")","expect_column_to_exist(column=""bio""),expect_column_values_to_be_of_type(column=""bio"", type_=""text""),expect_column_value_lengths_to_be_between(column=""bio"", min_value=1, max_value=160)",0.96875,0.9032258064516129,0.625,95.49974802226
Ensure the `customer_age` column has a mean value between 25 and 50 years and a standard deviation not exceeding 10 years.,"expect_column_mean_to_be_between(column=""customer_age"", min_value=25, max_value=50),expect_column_stdev_to_be_between(column=""customer_age"", min_value=0, max_value=10)","expect_column_mean_to_be_between(column=""customer_age"", min_value=25, max_value=50),expect_column_stdev_to_be_between(column=""customer_age"", max_value=10)",0.9473684210526316,0.9090909090909091,0.9473684210526316,89.11774433337564
"Check that the `jurisdiction` column contains only values from the specified set `['Federal', 'State', 'Local']` and is not nullable.","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local']),expect_column_values_to_not_be_null(column=""jurisdiction"")","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local']),expect_column_values_to_not_be_null(column=""jurisdiction"")",1.0,1.0,1.0,100.00000000000004
For field 'account_balance': Ensure the expect column value lengths to be between;,"expect_column_value_lengths_to_be_between(column=""account_balance"", min_value=1, max_value=15)","expect_column_value_lengths_to_be_between(column=""account_balance"", min_value=10000, max_value=100000)",0.875,0.8000000000000002,0.875,86.61374260444664
For field 'duration': Ensure the field exists and contains only positive integer values representing minutes.,"expect_column_to_exist(column=""duration""),expect_column_values_to_be_of_type(column=""duration"", type_=""int""),expect_column_values_to_be_between(column=""duration"", min_value=1, max_value=None)","expect_column_to_exist(column=""duration""),expect_column_values_to_be_between(column=""duration"", min_value=1, max_value=99999)  # max_value = 59*60 because there are 60 minutes in an hour and there are no values greater than 60, hence 99999.",0.547945205479452,0.5070422535211268,0.5205479452054794,59.64590845650033
For the `image_url` field: Ensure it is of type 'string' and does not contain any missing values across records.,"expect_column_values_to_be_of_type(column=""image_url"", type_=""string""),expect_column_values_to_not_be_null(column=""image_url"")","expect_column_values_to_be_of_type(column=""image_url"", type_=""string""),expect_column_values_to_not_be_null(column=""image_url"")ávající",0.9565217391304348,0.9545454545454545,0.9565217391304348,98.0573274998265
Ensure the `hire_date` column values are all prior to the `termination_date` for active employees.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""hire_date"", column_B=""termination_date"")","expect_column_values_to_be_decreasing(column=""termination_date""),expect_column_pair_values_to_be_increasing(column_A=""hire_date"", column_B=""termination_date"")",0.6666666666666666,0.55,0.6666666666666666,55.58167660639897
Ensure that the `score` column contains integer values only and that they are greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0)","expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0)",1.0,1.0,1.0,100.00000000000004
"For the `sku` field: Validate that the string length is between 8 and 12 characters. Ensure the values match the pattern '^[A-Z0-9]{8,12}$'.","expect_column_value_lengths_to_be_between(column=""sku"", min_value=8, max_value=12),expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8,12}$"")","expect_column_value_lengths_to_be_between(column=""sku"", min_value=8, max_value=12),expect_column_values_to_match_regex(column=""sku"", regex=r""^[\p{Lu}\p{Ll}\p{Nd}0-9]{8,12}$"")",0.8615384615384616,0.8253968253968255,0.8615384615384616,78.21908385788964
For the `email_address` field: Ensure all entries are unique and valid according to email format standards. Confirm that this field does not contain null values.,"expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.9850746268656716,0.9846153846153847,0.9850746268656716,94.21887891738312
"For the `signal_strength` column: Ensure all values are between -120 and -30 dBm, confirming they fall within defined limits.","expect_column_values_to_be_between(column=""signal_strength"", min_value=-120, max_value=-30)","expect_column_values_to_be_between(column=""signal_strength"", min_value=-120, max_value=-30) CLIIIK",0.967741935483871,0.9655172413793104,0.967741935483871,96.82132340352993
For the `json_payload` field: Validate that it is a properly formatted JSON object and check that it conforms to the defined JSON schema.,"expect_column_values_to_be_json_parseable(column=""json_payload""),expect_column_values_to_match_json_schema(column=""json_payload"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""json_payload"")  # To ensure they can be parsed as JSON, #expect_column_values_to_match_json_schema(column=""json_payload"", json_schema=""defined_schema"")  # To check if they conform to the defined schema.",0.6562499999999999,0.5806451612903226,0.6562499999999999,57.07726479628327
For field `release_date`: Validate that all dates are in the format `YYYY-MM-DD` and are not in the future.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""release_date"", value=""today"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")  # to convert string to date, not dateutil.date,  # because dateutil.date expects the date to be in the same format as the Python datetime, which is `YYYY-MM-DD` (note the `Z`)  # but dateutil.date is different from datetime in that it doesn't care about time.  # with this expect_column_values_to_be_dateutil_parseable,  # you are basically saying the field must contain date objects that can be parsed using the datetime library, but in this case, we need the parseable object to contain a string that is formatted according to the strftime_format specified.  # If this expectation is not satisfied, an error will be raised.  # Date parsing: Assuming there's some data in a particular field called ""date"" which is in string format and we need to parse it into a date object.  # For example, if the field contains data in the format ""2023-10-05"", the output of the ""parse_date"" function should be the same date as the original string, which in this case would be",0.21621621621621623,0.19090909090909092,0.21621621621621623,19.440198429239807
Verify that the `date_of_birth` column has values that conform to the format `YYYY-MM-DD` and are in the past.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""date_of_birth"", value_set=[date for date in pd.date_range(start='1900-01-01', end=pd.Timestamp.now())])","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""date_of_birth"", value_set=dates_in_the_past)ávající",0.7848101265822784,0.7792207792207793,0.7848101265822784,66.17449104185215
For field 'user_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""text"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check that the `last_login` column contains datetime strings that comply with the format `'%Y-%m-%d'` and reflect logins within the last 30 days.,"expect_column_values_to_match_strftime_format(column=""last_login"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""last_login""),expect_column_values_to_be_between(column=""last_login"", min_value=(datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'), max_value=datetime.now().strftime('%Y-%m-%d'))","expect_column_values_to_match_strftime_format(column=""last_login"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""last_login"", strftime_format=""%Y-%m-%d %a"")  # This will match for each row with values of the format ""%Y-%m-%d"".  # However, it doesn't guarantee that the value of the last_login column represents a date within the past 30 days.  # This may happen if the value represents a future date, or if the date has not yet been recorded.  # In such cases, the record must be excluded.  # There are a few ways to tackle this issue. One possibility is to add another conditional statement inside the current expect_column_values_to_match_strftime_format() to ensure that the value is between the current date and today minus 30 days (i.e. yesterday).  # However, if the data contains values that do not meet the specified format (e.g. a timestamp, instead of a datetime string) and hence cannot be converted into datetime strings, then a more complex approach would be required.  # In such cases, it may be necessary to convert the value to datetime before checking if it meets the requirement.  # If you",0.36653386454183273,0.22489959839357432,0.24701195219123506,25.457101064240977
For field 'product_category': Ensure the field matches the type 'text'. Ensure values in (product_category) must exist in the predefined set of categories (category_list). Ensure this field exists.,"expect_column_to_exist(column=""product_category""),expect_column_values_to_be_of_type(column=""product_category"", type_=""text""),expect_column_values_to_be_in_set(column=""product_category"", value_set=category_list)","expect_column_to_exist(column=""product_category""),expect_column_values_to_be_of_type(column=""product_category"", type_=""text""),expect_column_values_to_be_in_set(column=""product_category"", value_set=category_list)",1.0,1.0,1.0,100.00000000000004
For field 'address': Validate that the length of the string in 'address' is between 10 and 100 characters. Ensure this field exists and is not null.,"expect_column_to_exist(column=""address""),expect_column_values_to_not_be_null(column=""address""),expect_column_value_lengths_to_be_between(column=""address"", min_value=10, max_value=100)","expect_column_to_exist(column=""address""),expect_column_value_lengths_to_be_between(column=""address"", min_value=10, max_value=100),expect_column_values_to_not_be_null(column=""address"")",1.0,0.9655172413793104,0.7,98.84373631740127
Ensure the `usage_date` column has all entries in ascending order and does not include any duplicates.,"expect_column_values_to_be_increasing(column=""usage_date""),expect_column_values_to_be_unique(column=""usage_date"")","expect_column_values_to_be_increasing(column=""usage_date""),expect_column_values_to_be_unique(column=""usage_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the maximum value in the `transaction_fee` column does not exceed 0.01 ETH for any transaction.,"expect_column_max_to_be_between(column=""transaction_fee"", max_value=0.01)","expect_column_max_to_be_between(column=""transaction_fee"", max_value=0.01)",1.0,1.0,1.0,100.00000000000004
Check that the `account_balance` column contains valid numeric values and that no balance is negative.,"expect_column_values_to_be_of_type(column=""account_balance"", type_=""float""),expect_column_values_to_be_between(column=""account_balance"", min_value=0)","expect_column_values_to_be_between(column=""account_balance"", min_value=0, max_value=None)lásil",0.6341463414634146,0.5641025641025642,0.5853658536585366,38.544563245582
Ensure the number of rows in the `customer_orders` table is equal to the number of entries in the `customers` table.,"expect_table_row_count_to_equal_other_table(table=""customer_orders"", other_table=""customers"")","expect_table_row_count_to_be_between(table=""customer_orders"", min_value=0, max_value=customers_table_row_count)",0.6060606060606061,0.3870967741935484,0.5454545454545454,45.16402471088488
For the `precipitation_mm` column: Ensure all values are non-negative integers. Ensure this field cannot be null.,"expect_column_values_to_be_between(column=""precipitation_mm"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""precipitation_mm"")","expect_column_values_to_be_between(column=""precipitation_mm"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""precipitation_mm""),expect_column_values_to_be_of_type(column=""precipitation_mm"", type_=""int"")",0.8064516129032258,0.8,0.8064516129032258,64.06360541049314
"Ensure that the `user_data` column in the file contains valid entries matching the regular expression `^[A-Za-z0-9_]{3,15}$`.","expect_column_values_to_match_regex(column=""user_data"", regex=""^[A-Za-z0-9_]{3,15}$"")","expect_column_values_to_match_regex(column=""user_data"", regex=r""^[A-Za-z0-9_]{3,15}$"")",0.9696969696969697,0.9032258064516129,0.9696969696969697,92.78982724420875
"For the `status` column: Ensure values match one of the predefined states ['Open', 'Closed', 'Pending']. Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,76.74541314887128
Check that the `hire_date` column contains dates that do not exceed five years in the past and all entries are valid.,"expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_between(column=""hire_date"", min_value=""2018-10-01"", max_value=""now"")","expect_column_values_to_be_between(column=""hire_date"", min_value=""2018-10-01"", max_value=""2023-10-01"")ılmaktadır",0.6666666666666666,0.6521739130434783,0.6666666666666666,55.800719177594964
Check that the `timestamp` column contains valid timestamps that are not in the future.,"expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=""1970-01-01T00:00:00Z"", max_value=""now"")","expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_not_be_in_set(column=""timestamp"", value_set=[""future_timestamp""])",0.68,0.5416666666666667,0.68,57.52525204451667
For fields `max_temperature` and `min_temperature`: Ensure the value of `max_temperature` is always greater than `min_temperature`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""max_temperature"", column_B=""min_temperature"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""max_temperature"", column_B=""min_temperature"")",1.0,1.0,1.0,100.00000000000004
For the `court_date` column: Ensure it is of type 'datetime' and that all dates are within the range of the current year.,"expect_column_values_to_be_of_type(column=""court_date"", type_=""datetime""),expect_column_values_to_be_between(column=""court_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_dateutil_parseable(column=""court_date""),expect_column_values_to_be_between(column=""court_date"", min_value=""2023-10-01"", max_value=""2023-10-31"")",0.8333333333333334,0.689655172413793,0.8333333333333334,75.94852519347164
For field 'category': Ensure values match a predefined list of valid categories. Ensure no duplicates are present.,"expect_column_values_to_be_in_set(column=""category"", value_set=[""valid_category_1"", ""valid_category_2"", ""valid_category_3""]),expect_column_values_to_be_unique(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=[""category_1"", ""category_2"", ""category_3"", ""category_4"",...]),expect_column_values_to_be_unique(column=""category"")",0.9090909090909091,0.7547169811320754,0.9090909090909091,77.54045272039923
Verify that the `user_id` column contains unique values and no null entries.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
"For the 'email' column, ensure all values match the pattern 'user@domain.com' and that all entries are unique.","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^(\w|\.)+[A-Z|a-z|0-9]+\@\[[0-9a-z\.-]+\][\A-Za-z\.]""),expect_column_values_to_be_unique(column=""email"")",0.7169811320754716,0.6666666666666666,0.7169811320754716,60.50320333282876
"For field 'case_type': Ensure the field is required (not null). Validate that values in 'case_type' match at least one from the predefined list ('criminal', 'civil', 'family').","expect_column_values_to_not_be_null(column=""case_type""),expect_column_values_to_be_in_set(column=""case_type"", value_set=[""criminal"", ""civil"", ""family""])","expect_column_values_to_not_be_null(column=""case_type""),expect_column_values_to_be_in_set(column=""case_type"", value_set=['criminal', 'civil', 'family'])",1.0,1.0,1.0,80.58527146550718
For field 'order_id': Ensure the field is required (not null). Ensure the field has unique values. This field should be treated as a primary key. Ensue this field exist,"expect_column_to_exist(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_be_unique(column=""order_id"")","expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""text"")  # For numeric values, replace text with type_=""numeric""",0.7692307692307693,0.6984126984126985,0.676923076923077,63.90932143570094
"For field 'status_code': Ensure the field is required (not null). Ensure values in 'status_code' must exist in the set ('active', 'inactive', 'suspended').","expect_column_values_to_not_be_null(column=""status_code""),expect_column_values_to_be_in_set(column=""status_code"", value_set=[""active"", ""inactive"", ""suspended""])","expect_column_values_to_not_be_null(column=""status_code""),expect_column_values_to_be_in_set(column=""status_code"", value_set=[""active"", ""inactive"", ""suspended""])",1.0,1.0,1.0,100.00000000000004
For field 'image_url': Ensure the field matches the type 'text'. Ensure the field matches the format 'URL'. Ensure this field exists.,"expect_column_to_exist(column=""image_url""),expect_column_values_to_be_of_type(column=""image_url"", type_=""text""),expect_column_values_to_match_regex(column=""image_url"", regex=r""^(http|https)://[^\s/$.?#].[^\s]*$"")","expect_column_to_exist(column=""image_url""),expect_column_values_to_be_of_type(column=""image_url"", type_=""text""),expect_column_values_to_match_regex(column=""image_url"", regex=r""^https?\:\/\/"")",0.9538461538461539,0.9523809523809523,0.9538461538461539,72.66984587087047
Check that the `collaboration_score` in Research and Data Analysis is positively correlated with the `number_of_publications` in the same dataset.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""collaboration_score"", column_B=""number_of_publications"")","expect_column_pair_correlation_to_be_significantly_higher_than_zero(column_A=""collaboration_score"", column_B=""number_of_publications"")",0.7894736842105263,0.6111111111111112,0.7894736842105263,76.27275778360342
Ensure the `result_summary` column has values matching the regex pattern `^([A-Z].+?\\.)$`.,"expect_column_values_to_match_regex(column=""result_summary"", regex=r""^([A-Z].+?\\.)$"")","expect_column_values_to_match_regex(column=""result_summary"", regex=r""^[A-Z].+?\.$"")",1.0,1.0,1.0,82.08520540843708
Verify that the values in the `order_date` column are within the range of `2021-01-01` to `2023-12-31`.,"expect_column_values_to_be_between(column=""order_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""order_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
Verify that the mean `delivery_time` does not exceed 48 hours and the standard deviation is below 12 hours.,"expect_column_mean_to_be_between(column=""delivery_time"", min_value=0, max_value=48),expect_column_stdev_to_be_between(column=""delivery_time"", min_value=0, max_value=12)","expect_column_mean_to_be_between(column=""delivery_time"", min_value=0, max_value=48),expect_column_stdev_to_be_between(column=""delivery_time"", min_value=0, max_value=12)",1.0,1.0,1.0,100.00000000000004
For the `amount` column: Validate that all numeric values are greater than zero. Ensure that this column exists and contains no negative values.,"expect_column_to_exist(column=""amount""),expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=None)","expect_column_to_exist(column=""amount""),expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=None),expect_column_values_to_be_greater_than(column=""amount"", value=0)",0.7843137254901961,0.7755102040816326,0.7843137254901961,63.491125015859794
Ensure the `location_id` column contains only unique values. Ensure this field is required (not null) and matches the type 'text'.,"expect_column_values_to_be_unique(column=""location_id""),expect_column_values_to_not_be_null(column=""location_id""),expect_column_values_to_be_of_type(column=""location_id"", type_=""text"")","expect_column_values_to_be_unique(column=""location_id""),expect_column_values_to_not_be_null(column=""location_id""),expect_column_values_to_be_of_type(column=""location_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `subscription_type` field has only values from the set `['Free', 'Basic', 'Premium']`.","expect_column_values_to_be_in_set(column=""subscription_type"", value_set=['Free', 'Basic', 'Premium'])","expect_column_values_to_be_in_set(column=""subscription_type"", value_set=['Free', 'Basic', 'Premium'])",1.0,1.0,1.0,100.00000000000004
Verify that the `item_code` column contains valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""item_code"")","expect_column_values_to_match_json_schema(column=""item_code"")",1.0,1.0,1.0,100.00000000000004
For the `medication_dosage` column: Ensure values fall within the range of 1 to 500 mg. Confirm that all entries are of type 'integer'.,"expect_column_values_to_be_between(column=""medication_dosage"", min_value=1, max_value=500),expect_column_values_to_be_of_type(column=""medication_dosage"", type_=""int"")","expect_column_values_to_be_between(column=""medication_dosage"", min_value=1, max_value=500),expect_column_values_to_be_of_type(column=""medication_dosage"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `username` column values match the regex pattern `^[a-zA-Z0-9_]{3,15}$` to maintain valid username formats.","expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")","expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",1.0,1.0,1.0,100.00000000000004
For field 'order_date': Ensure the field matches the type 'date'. Validate that values in (order_date) are within the range of '2021-01-01' to '2023-12-31'.,"expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_be_between(column=""order_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_be_between(column=""order_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
For the `listing_date` field: Validate that all entries are formatted as 'YYYY-MM-DD' and check for any missing values.,"expect_column_to_exist(column=""listing_date""),expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""listing_date"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""listing_date""),expect_column_values_to_not_be_null(column=""listing_date"")",0.9253731343283582,0.8615384615384616,0.7462686567164178,88.29073569360281
Confirm that the sum of `home_score` and `away_score` matches the total `match_score` for each record.,"expect_multicolumn_sum_to_equal(column_list=[""home_score"", ""away_score""], sum_column=""match_score"")","expect_column_pair_values_to_be_equal(column_A=""home_score"", column_B=""match_score""),expect_column_pair_values_to_be_equal(column_A=""away_score"", column_B=""match_score"")",0.4888888888888889,0.18604651162790697,0.4888888888888889,28.109520355114785
In the `feedback` column: Ensure all entries do not match any SQL-like patterns from the specified list of forbidden phrases.,"expect_column_values_to_not_match_regex_list(column=""feedback"", regex_list=[""SELECT"", ""INSERT"", ""UPDATE"", ""DELETE"", ""DROP"", ""CREATE"", ""ALTER""])","expect_column_values_to_not_match_regex_list(column=""feedback"", regex_list=[r""^CREATE TABLE.*$"", r""^INSERT INTO.*$"", r""^SELECT.*$"", r""^DELETE FROM.*$""])",0.761904761904762,0.55,0.6666666666666666,46.379036566881226
For the `contact_number` column in the `lawyers` table: Ensure values match the regex pattern for valid phone numbers and are unique.,"expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+?[1-9]\d{1,14}$""),expect_column_values_to_be_unique(column=""contact_number"")","expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+\d{1,}$""),expect_column_values_to_be_unique(column=""contact_number"")",0.9361702127659575,0.8444444444444444,0.9361702127659575,83.55750823129117
For fields `sales_price` and `cost_price`: Ensure the sum of `sales_price` minus `cost_price` is always positive.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""sales_price"", column_B=""cost_price"")","expect_multicolumn_sum_to_equal(column_list=[""sales_price"", ""cost_price""], target_column=""sum"")",0.5,0.13333333333333333,0.43750000000000006,30.517894547493942
Check that the `word_count` column has a mean value greater than 300 and a maximum value of 5000.,"expect_column_mean_to_be_between(column=""word_count"", min_value=300),expect_column_max_to_be_between(column=""word_count"", max_value=5000)","expect_column_mean_to_be_between(column=""word_count"", min_value=300, max_value=5000)",0.7692307692307693,0.7027027027027025,0.7692307692307693,49.213830386852074
"For column 'customer_segment': Ensure values are within the set ['VIP', 'Regular', 'New']. Confirm that this field is not null.","expect_column_values_to_be_in_set(column=""customer_segment"", value_set=['VIP', 'Regular', 'New']),expect_column_values_to_not_be_null(column=""customer_segment"")","expect_column_values_to_be_in_set(column=""customer_segment"", value_set=['VIP', 'Regular', 'New']),expect_column_values_to_not_be_null(column=""customer_segment"")",1.0,1.0,1.0,100.00000000000004
Validate that the lengths of string values in the `product_code` column do not exceed 12 characters.,"expect_column_value_lengths_to_be_between(column=""product_code"", min_value=0, max_value=12)","expect_column_value_lengths_to_be_between(column=""product_code"", min_value=1, max_value=12)",0.9375,0.8666666666666667,0.9375,92.10500207490826
Check that the `registration_date` is formatted as `YYYY-MM-DD` and that all dates fall before the current date.,"expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value=""1900-01-01"", max_value=datetime.datetime.now().strftime(""%Y-%m-%d""))","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_be_less_than(column=""registration_date"", value=""current_date"")",0.7906976744186046,0.7380952380952381,0.7906976744186046,66.22390762545561
Check that the `transaction_date` column contains dates in the last 30 days and is in ascending order.,"expect_column_values_to_be_increasing(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-09-21"", max_value=""2023-10-21"")","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-10-10"", max_value=""2023-11-10""),expect_column_values_to_be_increasing(column=""transaction_date"")",0.7575757575757577,0.7187499999999999,0.7272727272727273,65.78619001504546
"Ensure `team_position` values fall within the set `['1st', '2nd', '3rd', '4th', '5th', '6th']`.","expect_column_values_to_be_in_set(column=""team_position"", value_set=['1st', '2nd', '3rd', '4th', '5th', '6th'])","expect_column_values_to_be_in_set(column=""team_position"", value_set=['1st', '2nd', '3rd', '4th', '5th', '6th'])",1.0,1.0,1.0,100.00000000000004
For field 'featured_image': Ensure this field matches the type 'text' and that it contains valid image URLs.,"expect_column_values_to_be_of_type(column=""featured_image"", type_=""text""),expect_column_values_to_match_regex(column=""featured_image"", regex=r""^(http|https):\/\/.*\.(jpeg|jpg|gif|png)$"")","expect_column_values_to_be_of_type(column=""featured_image"", type_=""text""),expect_column_values_to_match_regex(column=""featured_image"", regex=r""^https://.*\.jpg$"")",0.9259259259259259,0.8846153846153847,0.9259259259259259,73.48480553569989
Ensure that the combination of `product_id` and `warehouse_id` is unique across all records to maintain inventory integrity.,"expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")","expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")",1.0,1.0,1.0,100.00000000000004
For multi-column validation: Ensure that the `purchase_amount` is greater than or equal to `discount_amount` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""purchase_amount"", column_B=""discount_amount"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""purchase_amount"", column_B=""discount_amount"")",1.0,1.0,1.0,100.00000000000004
For the `recipient_address` column: Ensure the values do not match any SQL-like patterns. Validate that this column exists and is populated.,"expect_column_to_exist(column=""recipient_address""),expect_column_values_to_not_match_regex(column=""recipient_address"", regex=r"".*\b(SELECT|INSERT|UPDATE|DELETE|WHERE|FROM|JOIN|CREATE|DROP|ALTER)\b.*"")","expect_column_to_exist(column=""recipient_address""),expect_column_values_to_not_match_regex(column=""recipient_address"", regex=r"".*SQL-like.*"")",0.7307692307692307,0.7200000000000001,0.7307692307692307,58.634885389621175
"For the `assists` and `rebounds` columns, ensure that the total number of assists is not greater than the total number of rebounds for each player.","expect_column_pair_values_A_to_be_less_than_B(column_A=""assists"", column_B=""rebounds"")","expect_column_sum_to_equal(column=""assists"", value=""rebounds"")",0.56,0.08695652173913045,0.4800000000000001,27.042567898113248
Verify that the 'order_details' column contains valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""order_details"")","expect_column_values_to_match_json_schema(column=""order_details"")",1.0,1.0,1.0,100.00000000000004
For field `case_id`: Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure each `case_id` is unique.,"expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text""),expect_column_values_to_be_unique(column=""case_id"")","expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text""),expect_column_values_to_be_unique(column=""case_id"")",1.0,1.0,1.0,100.00000000000004
Confirm that the number of rows in the `employees` table is between 50 and 500.,"expect_table_row_count_to_be_between(min_value=50, max_value=500)","expect_table_row_count_to_be_between(table=""employees"", min_value=50, max_value=500)",0.9285714285714286,0.8461538461538461,0.9285714285714286,75.10201430702313
For the `alert_threshold`: Ensure values in this column are greater than the respective `sensor_reading` values. Ensure this field is required (not null).,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""alert_threshold"", column_B=""sensor_reading""),expect_column_values_to_not_be_null(column=""alert_threshold"")","expect_column_values_to_be_greater_than(column=""alert_threshold"", threshold=""sensor_reading""),expect_column_values_to_not_be_null(column=""alert_threshold"")",0.8627450980392156,0.6530612244897959,0.8627450980392156,71.37180748632385
For the `birthdate` field: Ensure the values are valid dates and that all entries are older than 18 years from today's date.,"expect_column_values_to_be_dateutil_parseable(column=""birthdate""),expect_column_values_to_be_between(column=""birthdate"", max_value=""2005-10-03"", min_value=None)","expect_column_values_to_be_dateutil_parseable(column=""birthdate""),expect_column_values_to_be_between(column=""birthdate"", min_value=None, max_value=""today - 730 days"")",0.88,0.7916666666666666,0.8000000000000002,85.38380478327882
For field 'user_id': Ensure the field is required (not null). Ensure there are no duplicate values in this column.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_not_be_null(column=""user_id""),expect_select_column_values_to_be_unique(column=""user_id"")",0.9743589743589743,0.918918918918919,0.9743589743589743,93.60404127121653
"For the `amenities` column: Ensure it contains at least one entry from the set `['WiFi', 'Pool', 'Gym', 'Breakfast']`.","expect_column_values_to_contain_set(column=""amenities"", value_set=['WiFi', 'Pool', 'Gym', 'Breakfast'])","expect_column_values_to_be_in_set(column=""amenities"", value_set=[""WiFi"", ""Pool"", ""Gym"", ""Breakfast""])",0.896551724137931,0.8148148148148148,0.896551724137931,49.65402405500959
Validate that the `citizen_id` column is of type 'string' and does not contain null values.,"expect_column_values_to_be_of_type(column=""citizen_id"", type_=""string""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_of_type(column=""citizen_id"", type_=""string""),expect_column_values_to_not_be_null(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `data_usage` column exhibits a Chi-Square test p-value greater than 0.05, confirming it aligns with expected usage patterns.","expect_column_chisquare_test_p_value_to_be_greater_than(column=""data_usage"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""data_usage"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"For the `score` column, validate that all values are numeric and fall within the range of `0` to `100`.","expect_column_values_to_be_of_type(column=""score"", type_=""numeric""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""score"", type_=""float""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=100)",0.96,0.9166666666666666,0.96,95.51190479308646
"Verify that the `course_code` values match the specified set of known course codes: ['CS101', 'MATH202', 'ENG303'].","expect_column_values_to_be_in_set(column=""course_code"", value_set=['CS101', 'MATH202', 'ENG303'])","expect_column_values_to_be_in_set(column=""course_code"", value_set=['CS101', 'MATH202', 'ENG303'])",1.0,1.0,1.0,100.00000000000004
For field 'patient_id': Ensure the field is required (not null). Ensure the field contains only unique values.,"expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")","expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
For the `service_start_date` field: Validate that all dates are in the format 'YYYY-MM-DD' and are prior to the current date.,"expect_column_values_to_match_strftime_format(column=""service_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""service_start_date""),expect_column_values_to_be_in_set(column=""service_start_date"", value_set=[date for date in pd.date_range(start=""1900-01-01"", end=datetime.now().date(), freq='D')])","expect_column_values_to_match_strftime_format(column=""service_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""service_start_date"", value=datetime.datetime.now())",0.6363636363636364,0.5813953488372092,0.6363636363636364,39.18766644337802
For field 'property_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values are unique.,"expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""int""),expect_column_values_to_be_unique(column=""property_id"")","expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""integer""),expect_column_values_to_be_unique(column=""property_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
For field 'price': Confirm that this field exists. Ensure that all price values are greater than zero and formatted as floating-point numbers.,"expect_column_to_exist(column=""price""),expect_column_values_to_be_greater_than(column=""price"", value=0),expect_column_values_to_be_of_type(column=""price"", type_=""float"")","expect_column_to_exist(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=1e6)",0.6530612244897959,0.5106382978723405,0.6530612244897959,43.19882550022538
For the `feedback_submitted_at` field in `customer_feedback`: Ensure that all datetime entries are in ISO 8601 format and that there are no entries in the future.,"expect_column_values_to_match_strftime_format(column=""feedback_submitted_at"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""feedback_submitted_at""),expect_column_values_to_be_decreasing(column=""feedback_submitted_at"")","expect_column_values_to_match_strftime_format(column=""feedback_submitted_at"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_between(column=""feedback_submitted_at"", min_value=""1970-01-01T00:00:00.000Z"", max_value=datetime.datetime.now().strftime(""%Y-%m-%dT%H:%M:%S.%fZ""))",0.6521739130434783,0.6000000000000001,0.6521739130434783,56.863167480369626
"For the `feedback` column, ensure that each entry does not exceed 500 characters and contains no special characters other than periods, commas, or spaces.","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=0, max_value=500),expect_column_values_to_match_regex(column=""feedback"", regex=r""^[a-zA-Z0-9., ]*$"")","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=0, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""[^\.,!?\s]"")",0.8928571428571429,0.8518518518518519,0.8928571428571429,81.2164646417956
Check that the `comments` column contains valid JSON objects that conform to the specified schema.,"expect_column_values_to_match_json_schema(column=""comments"", schema={""type"": ""object""})","expect_column_values_to_match_json_schema(column=""comments"", schema={""type"": ""object""})",1.0,1.0,1.0,100.00000000000004
Ensure the `fee` values in the `transactions` table are within the range of 0.0001 to 0.1.,"expect_column_values_to_be_between(column=""fee"", min_value=0.0001, max_value=0.1)","expect_column_values_to_be_between(column=""fee"", min_value=0.0001, max_value=0.1)",1.0,1.0,1.0,100.00000000000004
"Ensure the `viewing_duration` column contains only values between 0 and 300 minutes, with a standard deviation not exceeding 50 minutes.","expect_column_values_to_be_between(column=""viewing_duration"", min_value=0, max_value=300),expect_column_stdev_to_be_between(column=""viewing_duration"", min_value=0, max_value=50)","expect_column_values_to_be_between(column=""viewing_duration"", min_value=0, max_value=300),expect_column_stdev_to_be_between(column=""viewing_duration"", min_value=None, max_value=50)",0.9666666666666667,0.9310344827586207,0.9666666666666667,96.0132862288073
Check that the `last_performance_review` column values are dates in the past and follow the format `'%Y-%m-%d'`.,"expect_column_values_to_be_dateutil_parseable(column=""last_performance_review""),expect_column_values_to_match_strftime_format(column=""last_performance_review"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_increasing(column=""last_performance_review"")","expect_column_values_to_match_strftime_format(column=""last_performance_review"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""last_performance_review""),expect_column_values_to_be_decreasing(column=""last_performance_review"")  # Ensure last_performance_review values are chronological.",0.8888888888888891,0.8607594936708861,0.617283950617284,79.2292443043758
"For the 'height' column, validate that the values fall within the range of 30 to 90 inches and that no entries are null.","expect_column_values_to_be_between(column=""height"", min_value=30, max_value=90),expect_column_values_to_not_be_null(column=""height"")","expect_column_values_to_be_between(column=""height"", min_value=30, max_value=90),expect_column_values_to_not_be_null(column=""height"")",1.0,1.0,1.0,100.00000000000004
For field `department_code`: Ensure values exist in the reference table `departments` and follow the pattern `^[A-Z]{3}$`.,"expect_column_values_to_match_regex(column=""department_code"", regex=r""^[A-Z]{3}$""),expect_column_values_to_be_in_set(column=""department_code"", value_set=departments)","expect_column_values_to_be_in_set(column=""department_code"", value_set=departments),expect_column_values_to_match_regex(column=""department_code"", regex=r""^[A-Z]{3}$"")",1.0,0.9615384615384616,0.5185185185185185,98.74714308534077
"Ensure that the `user_id` in the `users` table is unique and not nullable, representing valid user accounts.","expect_column_to_exist(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,0.8846153846153846,100.00000000000004
For field 'registration_date': Ensure the field matches the type 'date'. Ensure the field contains values less than or equal to the '2024-12-12'. Ensure this field exists.,"expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_between(column=""registration_date"", min_value=None, max_value=""2024-12-12"")","expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than(column=""registration_date"", value=""2024-12-12"")",0.8985507246376813,0.8358208955223881,0.8985507246376813,85.70491195760474
In the `citizen_feedback` column: Ensure all entries are valid JSON objects that conform to the specified schema for feedback submissions.,"expect_column_values_to_match_json_schema(column=""citizen_feedback"", schema=""your_schema_here"")","expect_column_values_to_match_json_schema(column=""citizen_feedback"", schema={""type"": ""object"", ""properties"": {""type"": ""feedback"", ""properties"": {""comment"": {""type"": ""string""}, ""rating"": {""type"": ""number""}}}, ""required"": [""comment"", ""rating""]})",0.55,0.5263157894736842,0.55,24.49243610851496
For field 'court_date': Ensure values in (court_date) match the format 'YYYY-MM-DD'. Ensure the date is in the future. Ensure this field exists.,"expect_column_to_exist(column=""court_date""),expect_column_values_to_match_strftime_format(column=""court_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""court_date"")","expect_column_to_exist(column=""court_date""),expect_column_values_to_match_strftime_format(column=""court_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""court_date""),expect_column_values_to_be_between(column=""court_date"", min_value=""2023-10-01"", max_value=None)",0.75,0.7179487179487181,0.75,61.304135448787925
Check that the total count of `claims` in the `claims_history` table is equal to the number of records in the `policy_holders` table.,"expect_table_row_count_to_equal_other_table(table=""claims_history"", other_table=""policy_holders"")","expect_table_row_count_to_be_between(table=""claims_history"", min_value=0, max_value=policy_holders_table_record_count)",0.6285714285714286,0.4242424242424242,0.5714285714285715,45.63240981124504
For field 'date_of_birth': Ensure the field is required (not null). Validate that all dates are in the format 'YYYY-MM-DD'. Ensure there are no future dates.,"expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""current_date"")  # Replace ""current_date"" with the actual today's date.",0.8288288288288289,0.7889908256880734,0.8108108108108109,79.52894844582252
Ensure the `citizen_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `last_restocked` column contains valid datetime values formatted as 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""last_restocked"")","expect_column_values_to_be_of_type(column=""last_restocked"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format=""%Y-%m-%d"")",0.8846153846153846,0.8,0.576923076923077,80.94248758535652
"Verify that the `plan_type` column contains only values from the set `['Prepaid', 'Postpaid', 'Family', 'Corporate']`.","expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Prepaid', 'Postpaid', 'Family', 'Corporate'])","expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Prepaid', 'Postpaid', 'Family', 'Corporate'])",1.0,1.0,1.0,100.00000000000004
For field 'transaction_type': Ensure the field matches the type 'text'. Validate that 'transaction_type' is either 'Transfer' or 'Exchange'. Ensure this field exists.,"expect_column_to_exist(column=""transaction_type""),expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Transfer"", ""Exchange""])","expect_column_to_exist(column=""transaction_type""),expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Transfer"", ""Exchange""])",1.0,1.0,1.0,100.00000000000004
Verify that the `email` column contains valid email formats and is unique across records.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")",0.7058823529411764,0.6530612244897959,0.7058823529411764,70.6883366511716
For field 'loyalty_points': Ensure this field matches the type 'integer' and contains values greater than or equal to 0.,"expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0)","expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0)",1.0,1.0,1.0,100.00000000000004
For field 'date_of_birth': Ensure all entries follow the format 'YYYY-MM-DD'. Ensure the field is required (not null). Verify that 'date_of_birth' values represent dates before the current date.,"expect_column_to_exist(column=""date_of_birth""),expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""date_of_birth"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")  # For ensuring null values are converted to None, use ""expect_column_values_to_be_of_type(column=""date_of_birth"", type_=""date"")  # type_ can be ""datetime"", ""date"", or ""datetime.datetime""  # This assumes the actual type is either of those types. In reality, you'll need to do further testing to verify the values are valid.",0.6231884057971014,0.5588235294117647,0.5072463768115942,53.45146706062796
For field 'researcher_name': Ensure the field exists and that it contains text data types only. Validate that there are no duplicates.,"expect_column_to_exist(column=""researcher_name""),expect_column_values_to_be_of_type(column=""researcher_name"", type_=""text""),expect_column_values_to_be_unique(column=""researcher_name"")","expect_column_to_exist(column=""researcher_name""),expect_column_values_to_be_of_type(column=""researcher_name"", type_=""text""),expect_column_values_to_be_unique(column=""researcher_name"")",1.0,1.0,1.0,100.00000000000004
Ensure that the file 'supplier_list.xml' adheres to the specified schema and contains no duplicate supplier entries.,"expect_file_to_exist(file_path=""supplier_list.xml""),expect_file_to_have_valid_table_header(file_path=""supplier_list.xml""),expect_column_values_to_be_unique(column=""supplier_name"")  # Assuming 'supplier_name' is the column with supplier entries.","expect_file_to_exist(file=""supplier_list.xml""),expect_file_to_be_valid_xml(file=""supplier_list.xml""),expect_file_to_have_no_duplicate_entries(file=""supplier_list.xml""),expect_file_to_validate_against_schema(file=""supplier_list.xml"", schema=""custom_schema_location"")  # Replace with actual custom schema file path if needed.",0.5494505494505495,0.3370786516853933,0.46153846153846156,42.10806539191522
"For the `last_login` column, ensure that all timestamps are in the past and that they follow the ISO 8601 format.","expect_column_values_to_be_dateutil_parseable(column=""last_login""),expect_column_values_to_match_strftime_format(column=""last_login"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_increasing(column=""last_login"")","expect_column_values_to_be_of_type(column=""last_login"", type_=""timestamp""),expect_column_values_to_be_decreasing(column=""last_login"")  # To ensure last_logins are decreasing, not increasing # This assumes that the column represents chronological information and not just time since the previous login.",0.5060240963855421,0.3209876543209877,0.4578313253012048,41.90511971542087
For table 'subscriptions': Ensure the row count is equal to the row count in table 'active_users'.,"expect_table_row_count_to_equal_other_table(table=""active_users"")","expect_table_row_count_to_equal_other_table(table_name=""subscriptions"", other_table_name=""active_users"")",0.8148148148148148,0.7200000000000001,0.8148148148148148,60.55405839506422
Ensure the `attendance_record` column contains only valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""attendance_record"", schema=specified_schema)","expect_column_values_to_match_json_schema(column=""attendance_record"", schema=specified_schema)",1.0,1.0,1.0,100.00000000000004
"For the `course_category` column: Validate that all entries are distinct and belong to the list `['Science', 'Arts', 'Technology']`.","expect_column_values_to_be_unique(column=""course_category""),expect_column_values_to_be_in_set(column=""course_category"", value_set=['Science', 'Arts', 'Technology'])","expect_column_values_to_be_unique(column=""course_category""),expect_column_values_to_be_in_set(column=""course_category"", value_set=['Science', 'Arts', 'Technology'])",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_age` column contains only values within the range of 0 to 120.,"expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)","expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)",1.0,1.0,1.0,100.00000000000004
For fields `amount_paid` and `total_cost`: Ensure that `amount_paid` is greater than or equal to `total_cost`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""amount_paid"", column_B=""total_cost"")","expect_column_pair_values_A_to_be_greater_than_or_equal_to_B(column_A=""amount_paid"", column_B=""total_cost"")",0.923076923076923,0.8648648648648648,0.923076923076923,84.74727103919123
For the `timestamp` column: Conduct a Kolmogorov-Smirnov test to ensure the distribution of timestamps follows a normal distribution with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""timestamp"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""timestamp"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure that the `email_address` in both `users` and `patients` tables are unique across the datasets.,"expect_column_pair_values_to_be_unique(column_a=""users.email_address"", column_b=""patients.email_address"")","expect_column_values_to_be_unique(column=""email_address"")",0.6923076923076924,0.5,0.6923076923076924,31.923777692335875
For the `block_data`: Ensure this field is required (not null) and contains valid JSON objects with necessary fields.,"expect_column_values_to_not_be_null(column=""block_data""),expect_column_values_to_be_json_parseable(column=""block_data""),expect_column_values_to_match_json_schema(column=""block_data"", schema={""type"": ""object"", ""required"": [""necessary_field1"", ""necessary_field2""]})","expect_column_values_to_not_be_null(column=""block_data""),expect_column_values_to_match_json_schema(column=""block_data"", schema=""YOUR JSON schema here"")",0.6984126984126985,0.6557377049180328,0.6666666666666667,39.38118161907377
"Ensure that the `service_status` column contains only values from the set `['Active', 'Inactive', 'Pending']`.","expect_column_values_to_be_in_set(column=""service_status"", value_set=['Active', 'Inactive', 'Pending'])","expect_column_values_to_be_in_set(column=""service_status"", value_set=['Active', 'Inactive', 'Pending'])",1.0,1.0,1.0,100.00000000000004
"For the 'comments' table: Confirm that the number of rows is between 0 and 1000. Ensure columns exist: 'comment_id', 'post_id', and 'author_name'.","expect_table_row_count_to_be_between(min_value=0, max_value=1000),expect_column_to_exist(column=""comment_id""),expect_column_to_exist(column=""post_id""),expect_column_to_exist(column=""author_name"")","expect_table_row_count_to_be_between(min_value=0, max_value=1000),expect_table_columns_to_match_set(column_set={""comment_id"", ""post_id"", ""author_name""})",0.7540983606557378,0.576271186440678,0.7540983606557378,53.81890848944825
For field 'match_date': Ensure the values in (match_date) are in the format 'YYYY-MM-DD' and do not exceed today's date.,"expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""match_date"")","expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""match_date""),expect_column_values_to_be_less_than(column=""match_date"", value=""today"")",0.7540983606557377,0.7118644067796611,0.7540983606557377,60.76761966659414
Ensure that the `transaction_amount` in the cryptocurrency dataset is greater than the `premium_amount` in the insurance dataset for corresponding IDs.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""transaction_amount"", column_B=""premium_amount"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""transaction_amount"", column_B=""premium_amount"")",1.0,1.0,1.0,100.00000000000004
Check that the `product_id` column is of type `string` and contains no missing or duplicate values. Each entry must be unique.,"expect_column_values_to_be_of_type(column=""product_id"", type_=""string""),expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_be_of_type(column=""product_id"", type_=""string""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_unique(column=""product_id"")",0.8732394366197184,0.8695652173913044,0.8732394366197184,77.2934924225902
Validate that the sum of `total_amount` and `discount` columns equals the `final_price` column for each record.,"expect_column_pair_values_to_be_equal(column_A=""total_amount"", column_B=""final_price"", condition=""total_amount + discount"")","expect_multicolumn_sum_to_equal(column_list=[""total_amount"", ""discount""], sum_column=""final_price"")",0.6060606060606061,0.2580645161290323,0.5454545454545454,35.975338208190976
For field 'user_bio': Ensure the field exists and matches the type 'text'. Validate that the length of all entries in (user_bio) does not exceed 160 characters.,"expect_column_to_exist(column=""user_bio""),expect_column_values_to_be_of_type(column=""user_bio"", type_=""text""),expect_column_value_lengths_to_be_between(column=""user_bio"", min_value=0, max_value=160)","expect_column_to_exist(column=""user_bio""),expect_column_values_to_be_of_type(column=""user_bio"", type_=""text""),expect_column_value_lengths_to_be_between(column=""user_bio"", min_value=0, max_value=160)",1.0,1.0,1.0,100.00000000000004
"For the `likes` column, ensure values are greater than or equal to 0 and less than or equal to 1000.","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'policy_number': Ensure this field exists. Validate that all values match the pattern '^[A-Z]{3}-[0-9]{6}$'.,"expect_column_to_exist(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[A-Z]{3}-[0-9]{6}$"")","expect_column_to_exist(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[A-Z]{3}-[0-9]{6}$"")",1.0,1.0,1.0,100.00000000000004
For the `player_age` column: Ensure values are greater than or equal to 18. Check for non-null values.,"expect_column_values_to_be_between(column=""player_age"", min_value=18),expect_column_values_to_not_be_null(column=""player_age"")","expect_column_values_to_be_greater_than(column=""player_age"", value=18),expect_column_values_to_not_be_null(column=""player_age"")",0.9090909090909091,0.8095238095238095,0.9090909090909091,87.57572785115993
For field `player_stats`: Ensure all entries are valid JSON objects that conform to the specified JSON schema for player performance metrics.,"expect_column_values_to_be_json_parseable(column=""player_stats""),expect_column_values_to_match_json_schema(column=""player_stats"", schema=your_json_schema_here)","expect_column_values_to_be_json_parseable(column=""player_stats""),expect_column_values_to_match_json_schema(column=""player_stats"", schema={""type"": ""object"", ""properties"": {}})  # Replace with your custom schema for player performance metrics.",0.793103448275862,0.7142857142857143,0.793103448275862,62.85808872637109
"Ensure that the `department` column only contains values from the set `['Sales', 'Marketing', 'Engineering']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Marketing', 'Engineering'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Marketing', 'Engineering'])",1.0,1.0,1.0,100.00000000000004
For field 'product_name': Ensure the field matches the type 'text'. Ensure string lengths in (product_name) are between 1 and 255 characters. Ensure this field exists.,"expect_column_to_exist(column=""product_name""),expect_column_values_to_be_of_type(column=""product_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""product_name"", min_value=1, max_value=255)","expect_column_to_exist(column=""product_name""),expect_column_values_to_be_of_type(column=""product_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""product_name"", min_value=1, max_value=255),  # Assume ""255"" represents an upper bound, since ""255"" is the maximum character length for a string.",0.813953488372093,0.8095238095238095,0.813953488372093,76.80847920778216
Check that the `amenities` column contains valid JSON objects and adheres to the defined JSON schema for property features.,"expect_column_values_to_be_json_parseable(column=""amenities""),expect_column_values_to_match_json_schema(column=""amenities"", schema=""defined_json_schema_for_property_features"")","expect_column_values_to_be_json_parseable(column=""amenities""),expect_column_values_to_match_json_schema(column=""amenities"", schema={""type"": ""array""})  # Replace ""type"": ""array"" with the actual JSON schema for property features.",0.8421052631578947,0.7999999999999999,0.8421052631578947,61.992219789484125
For field 'price': Ensure the field matches the type 'decimal'. Ensure the value is greater than 0. Ensure this field exists.,"expect_column_to_exist(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""price"", value=0)","expect_column_to_exist(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""price"", value=0)",1.0,1.0,1.0,100.00000000000004
"For the 'platform' field: Ensure the field exists and matches the type 'text'. Validate that values must match one of the patterns in the list: 'PC', 'Xbox', 'PlayStation', 'Switch'.","expect_column_to_exist(column=""platform""),expect_column_values_to_be_of_type(column=""platform"", type_=""text""),expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Xbox"", ""PlayStation"", ""Switch""])","expect_column_to_exist(column=""platform""),expect_column_values_to_be_of_type(column=""platform"", type_=""text""),expect_column_values_to_match_regex_list(column=""platform"", regex_list=['PC', 'Xbox', 'PlayStation', 'Switch'])",0.84375,0.7741935483870968,0.84375,68.8751682353716
"Verify that the `blood_pressure` column contains values in the format `systolic/diastolic` and conforms to the pattern `^\d{2,3}/\d{2,3}$`.","expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{2,3}/\d{2,3}$"")","expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{2,3}/\d{2,3}$"")",1.0,1.0,1.0,100.00000000000004
For `salary`: Ensure that all entries are of type 'float' and fall within the range of 30000 to 200000. No missing values are permitted.,"expect_column_values_to_be_of_type(column=""salary"", type_=""float""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000),expect_column_values_to_not_be_null(column=""salary"")","expect_column_values_to_be_of_type(column=""salary"", type_=""float""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000),expect_column_values_to_not_be_null(column=""salary"")",1.0,1.0,1.0,100.00000000000004
"Validate the `contract_length` column to ensure it contains only values from the set `['1 Year', '2 Years', 'No Contract']`. Check for any null values.","expect_column_values_to_be_in_set(column=""contract_length"", value_set=['1 Year', '2 Years', 'No Contract']),expect_column_values_to_not_be_null(column=""contract_length"")","expect_column_values_to_be_in_set(column=""contract_length"", value_set=[""1 Year"", ""2 Years"", ""No Contract""]),expect_column_values_to_not_be_null(column=""contract_length"")",1.0,1.0,1.0,76.62072453322665
For the `inspection_date` field: Ensure values adhere to the datetime format and that they do not precede the `listing_date`. Ensure this field exists.,"expect_column_to_exist(column=""inspection_date""),expect_column_values_to_match_strftime_format(column=""inspection_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""inspection_date"", column_B=""listing_date"")","expect_column_to_exist(column=""inspection_date""),expect_column_values_to_match_strftime_format(column=""inspection_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_decreasing(column=""inspection_date""),expect_column_pair_values_to_be_greater_than(column_A=""inspection_date"", column_B=""listing_date"")",0.8444444444444444,0.7727272727272728,0.8444444444444444,72.2031508469392
Ensure the `customer_id` column exists and contains unique values formatted as 'CUST-####'.,"expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_match_regex(column=""customer_id"", regex=r""^CUST-\d{4}$"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_match_regex(column=""customer_id"", regex=r""^CUST-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `email` column contains valid email formats and is unique across all entries.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")",0.7058823529411764,0.6530612244897959,0.7058823529411764,70.6883366511716
Verify that the `premium_amount` values are within the range of $100 to $5000.,"expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=5000)","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=5000)",1.0,1.0,1.0,100.00000000000004
"For field 'weather_condition': Ensure the field matches the type 'text'. Validate that (weather_condition) matches one of the predefined conditions in the list: ['sunny', 'rainy', 'cloudy', 'stormy'].","expect_column_values_to_be_of_type(column=""weather_condition"", type_=""text""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['sunny', 'rainy', 'cloudy', 'stormy'])","expect_column_values_to_be_of_type(column=""weather_condition"", type_=""text""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=[""sunny"", ""rainy"", ""cloudy"", ""stormy""])",1.0,1.0,1.0,78.5180295768227
Check that all `expiration_dates` in the `products` table are in the format `YYYY-MM-DD` and are in the future.,"expect_column_values_to_match_strftime_format(column=""expiration_dates"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""expiration_dates"")","expect_column_values_to_match_strftime_format(column=""expiration_dates"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""expiration_dates""),expect_column_values_to_be_increasing(column=""expiration_dates"")",0.8275862068965517,0.8214285714285715,0.8275862068965517,70.31509755247782
Check that the proportion of unique values in the `research_conclusion` column meets or exceeds 70% in the Research and Data Analysis dataset.,"expect_column_proportion_of_unique_values_to_be_between(column=""research_conclusion"", min_value=0.7, max_value=1.0)","expect_column_unique_value_count_to_be_between(column=""research_conclusion"", min_value=0.7 * max(column=""research_conclusion"", key=""total_value_count""), max_value=None)",0.6956521739130435,0.5909090909090909,0.6956521739130435,46.85594631628332
For field 'case_notes': Ensure the field matches the type 'text'. Validate that all entries are less than 2000 characters and do not contain prohibited language.,"expect_column_values_to_be_of_type(column=""case_notes"", type_=""text""),expect_column_value_lengths_to_be_between(column=""case_notes"", min_value=0, max_value=2000),expect_column_values_to_not_match_regex(column=""case_notes"", regex=""prohibited_language_pattern"")","expect_column_values_to_be_of_type(column=""case_notes"", type_=""text""),expect_column_value_lengths_to_be_between(column=""case_notes"", min_value=1, max_value=2000),expect_column_values_to_not_match_regex(column=""case_notes"", regex=r""\b(?:\d{1,3}|[a-zA-Z]+)\b|fuck|shit|ass|hustle|nigga|shit"")",0.7916666666666667,0.7659574468085106,0.7916666666666667,70.73030913595987
"For field 'platforms_supported': Ensure the values are valid JSON objects and conform to the specified schema, including fields 'platform_name' and 'release_year'.","expect_column_values_to_be_json_parseable(column=""platforms_supported""),expect_column_values_to_match_json_schema(column=""platforms_supported"", schema={""type"": ""object"", ""properties"": {""platform_name"": {""type"": ""string""}, ""release_year"": {""type"": ""integer""}}})","expect_column_values_to_be_json_parseable(column=""platforms_supported""),expect_column_values_to_match_json_schema(column=""platforms_supported"", schema={""type"": ""object"", ""properties"": {""platform_name"": {""type"": ""string""}, ""release_year"": {""type"": ""number""}}, ""required"": [""platform_name"", ""release_year""]})",0.8985507246376812,0.8955223880597015,0.8985507246376812,80.45157668672168
Validate that the `property_address` field contains valid JSON objects and adheres to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""property_address""),expect_column_values_to_match_json_schema(column=""property_address"", schema=your_json_schema)","expect_column_values_to_be_json_parseable(column=""property_address""),expect_column_values_to_match_json_schema(column=""property_address"", schema=""specified schema"")",0.9361702127659574,0.888888888888889,0.9361702127659574,89.30341308763134
Ensure the `attachment_size` column values do not exceed 25 MB and validate that the average size is below 10 MB.,"expect_column_max_to_be_between(column=""attachment_size"", max_value=25 * 1024 * 1024),expect_column_mean_to_be_between(column=""attachment_size"", min_value=None, max_value=10 * 1024 * 1024)","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25 * 1024 * 1024)  # Assuming 25MB, note: max_value = (25 * 1024 * 1024), max_value = max_file_size_in_kb * 1024 # File sizes in MB  # Note: This assumes 1024 KB = 1 MB, which is not necessarily true depending on the unit of measurement # If desired, the max_file_size_in_kb can be adjusted to reflect actual file sizes in MB, such as 10 MB * 1024  #expect_column_mean_to_be_between(column=""attachment_size"", min_value=0, max_value=(10 * 1024 * 1024))  # Assuming average file size of 10MB  #expect_column_stdev_to_be_between(column=""attachment_size"", min_value=None, max_value=(10 * 1024 * 1024))  # Assuming standard deviation of 10MB  #expect_column_stdev_to_be_between(column=""attachment_size"", min_value=0, max_value=10 * 1024 * 1024)  # Assuming standard deviation between 0 and 10 MB  #expect_column_stdev",0.34065934065934067,0.3,0.3296703296703297,22.74714230596702
"For the `battery_level`: Ensure the field matches the type 'integer'. Validate that all values fall within the range of [0, 100].","expect_column_values_to_be_of_type(column=""battery_level"", type_=""int""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""battery_level"", type_=""integer""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.81282631934458
Check that the sum of the `energy_consumed` column matches the expected value of 500000 kWh for the reporting period.,"expect_column_sum_to_be_between(column=""energy_consumed"", min_value=500000, max_value=500000)","expect_multicolumn_sum_to_be_between(column_list=[""energy_consumed""], min_value=None, max_value=None)",0.7741935483870969,0.5517241379310344,0.7741935483870969,56.82489951080359
Ensure the `booking_date` column contains date strings formatted as `'%Y-%m-%d'` and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""booking_date"")","expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""booking_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `supplier_id` column contains distinct values that match the set of existing supplier IDs in the `suppliers` table.,"expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_supplier_ids)","expect_column_values_to_be_in_set(column=""supplier_id"", value_set=existing_supplier_ids)",0.9032258064516129,0.8275862068965518,0.9032258064516129,86.02302883775145
"Check that the `precipitation` column contains values that conform to the pattern '^\d+(\.\d{1,2})?$', ensuring valid rainfall measurements.","expect_column_values_to_match_regex(column=""precipitation"", regex=r""^\d+(\.\d{1,2})?$"")","expect_column_values_to_match_regex(column=""precipitation"", regex=r""^\d+(\.\d{1,2})?$"")",1.0,1.0,1.0,100.00000000000004
For field `policy_number`: Ensure values are unique and not null. Ensure the field matches the type 'string'.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number""),expect_column_values_to_be_of_type(column=""policy_number"", type_=""string"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number""),expect_column_values_to_be_of_type(column=""policy_number"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `treatment_type` field values belong to the set `['Surgery', 'Medication', 'Therapy']` and are consistently formatted.","expect_column_values_to_be_in_set(column=""treatment_type"", value_set=['Surgery', 'Medication', 'Therapy']),expect_column_values_to_match_regex(column=""treatment_type"", regex=r""^(Surgery|Medication|Therapy)$"")","expect_column_values_to_be_in_set(column=""treatment_type"", value_set=['Surgery', 'Medication', 'Therapy'])  # Check if the values belong to the expected set.",0.679245283018868,0.5490196078431373,0.6415094339622641,43.47219628234975
For field 'age': Ensure the field matches the type 'integer'. Ensure values in (age) are within the range of 18 to 100. Ensure this field exists.,"expect_column_to_exist(column=""age""),expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100)","expect_column_to_exist(column=""age""),expect_column_values_to_be_of_type(column=""age"", type_=""integer""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100)",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
"For the `status` field: Ensure values are from the set `['Available', 'Under Contract', 'Sold']` and count of `Sold` properties does not exceed `50%` of total listings.","expect_column_values_to_be_in_set(column=""status"", value_set=['Available', 'Under Contract', 'Sold']),expect_column_proportion_of_unique_values_to_be_between(column=""status"", min_value=0, max_value=0.5)","expect_column_values_to_be_in_set(column=""status"", value_set=[""Available"", ""Under Contract"", ""Sold""]),expect_column_sum_to_be_between(column=""sold"", min_value=0, max_value=total_listings * 0.5)",0.8615384615384615,0.7619047619047619,0.8615384615384615,67.73622216741738
For field 'customer_id': Ensure this field is required (not null). Ensure the field matches the type 'integer'. Ensure values in 'customer_id' are unique.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""integer""),expect_column_values_to_be_unique(column=""customer_id"")","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_unique(column=""customer_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
For the `post_content` field: Validate that all entries do not exceed 280 characters and do not contain any prohibited words from the blacklist.,"expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_match_regex_list(column=""post_content"", regex_list=[""prohibited_word1"", ""prohibited_word2"", ""prohibited_word3""])","expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_match_regex(column=""post_content"", regex=r"".*blacklisted_word.*"")",0.8307692307692307,0.7936507936507937,0.8307692307692307,68.02898933216049
Check that the standard deviation of the `user_rating` column is below 1.5 to ensure consistent scoring.,"expect_column_stdev_to_be_between(column=""user_rating"", min_value=0, max_value=1.5)","expect_column_stdev_to_be_between(column=""user_rating"", min_value=None, max_value=1.5)",0.9375,0.8666666666666667,0.9375,91.57103753711765
"Ensure the `transaction_type` field contains only values from the set `['credit', 'debit']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['credit', 'debit'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['credit', 'debit'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `points_scored` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05, indicating a normal distribution.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""points_scored"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""points_scored"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column contains only values within the range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)",1.0,1.0,1.0,100.00000000000004
"In the 'salary' column, validate that the mean salary is above $50,000 and that no entries are null.","expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=None),expect_column_values_to_not_be_null(column=""salary"")","expect_column_mean_to_be_between(column=""salary"", min_value=50000),expect_column_values_to_not_be_null(column=""salary"")",0.9302325581395349,0.8780487804878049,0.9302325581395349,84.40743311550067
Ensure the `transaction_id` column contains only unique values that are not null and match the type 'string'.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Confirm that the distribution of `delivery_times` in the `deliveries` table passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""delivery_times"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""delivery_times"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'case_status': Ensure the field exists. Ensure values in (case_status) must not include 'Closed'.,"expect_column_to_exist(column=""case_status""),expect_column_values_to_not_be_in_set(column=""case_status"", value_set=[""Closed""])","expect_column_to_exist(column=""case_status""),expect_column_values_to_not_be_null(column=""case_status""),expect_column_values_to_not_be_in_set(column=""case_status"", value_set={'Closed'})",0.8076923076923077,0.8,0.8076923076923077,62.69290886636967
"Ensure the `viewer_count` column has a minimum value of 0 and a maximum value of 1,000,000.","expect_column_min_to_be_between(column=""viewer_count"", min_value=0),expect_column_max_to_be_between(column=""viewer_count"", max_value=1000000)","expect_column_values_to_be_between(column=""viewer_count"", min_value=0, max_value=1000000)",0.7179487179487181,0.5945945945945946,0.7179487179487181,44.741147524778484
Check that the `booking_date` column follows the datetime string format `'%d-%m-%Y %H:%M'`.,"expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%d-%m-%Y %H:%M"")","expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format='%d-%m-%Y %H:%M')",1.0,1.0,1.0,86.20135756318858
For field 'user_id': Ensure the field matches the type 'integer'. Ensure values in (user_id) are unique across the dataset. Ensure this field exists.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the distinct values in the `utility_type` column match the allowed types: ['Electricity', 'Water', 'Gas'].","expect_column_distinct_values_to_equal_set(column=""utility_type"", value_set=['Electricity', 'Water', 'Gas'])","expect_column_values_to_be_in_set(column=""utility_type"", value_set=['Electricity', 'Water', 'Gas'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
Ensure the 'appointment_date' column adheres to the datetime format '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"Validate the `gender` field to ensure it only contains values from the set `['Male', 'Female', 'Other']`.","expect_column_values_to_be_in_set(column=""gender"", value_set=['Male', 'Female', 'Other'])","expect_column_values_to_be_in_set(column=""gender"", value_set=['Male', 'Female', 'Other'])",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column contains no null values and is of type 'float'.,"expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")","expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")",1.0,1.0,1.0,100.00000000000004
"Check the distribution of `shipping_costs` to ensure it aligns with the expected distribution parameters, with KL divergence below 0.1.","expect_column_kl_divergence_to_be_less_than(column=""shipping_costs"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""shipping_costs"", threshold=0.1)ıldığında",0.9333333333333333,0.9285714285714286,0.9333333333333333,96.35749534339605
"For the `research_topic` column, ensure the values are of type 'text' and correspond to predefined categories such as ['Health', 'Technology', 'Environment'].","expect_column_values_to_be_of_type(column=""research_topic"", type_=""text""),expect_column_values_to_be_in_set(column=""research_topic"", value_set=['Health', 'Technology', 'Environment'])","expect_column_values_to_be_of_type(column=""research_topic"", type_=""text""),expect_column_values_to_be_in_set(column=""research_topic"", value_set=['Health', 'Technology', 'Environment'])",1.0,1.0,1.0,100.00000000000004
Ensure the `match_date` column contains valid datetime strings formatted as `YYYY/MM/DD` that can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y/%m/%d""),expect_column_values_to_be_dateutil_parseable(column=""match_date"")","expect_column_values_to_be_dateutil_parseable(column=""match_date"")",0.5714285714285715,0.5454545454545454,0.5714285714285715,17.776857282813793
"Ensure the `location` column values are from the predefined set: `['Warehouse', 'Factory', 'Office']`.","expect_column_values_to_be_in_set(column=""location"", value_set=['Warehouse', 'Factory', 'Office'])","expect_column_values_to_be_in_set(column=""location"", value_set=['Warehouse', 'Factory', 'Office'])",1.0,1.0,1.0,100.00000000000004
"For the `age` field: Ensure values are integers and within the range of [0, 120]. Any anomalies should be reported.","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120),expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)  # To ensure values are within the specified range.",0.6944444444444444,0.6857142857142856,0.6944444444444444,57.94117952787016
For the `status` column in the `utility_requests` table: Ensure values match the regex pattern `^(Pending|Completed|Cancelled)$`.,"expect_column_values_to_match_regex(column=""status"", regex=r""^(Pending|Completed|Cancelled)$"")","expect_column_values_to_match_regex(column=""status"", regex=r""^(Pending|Completed|Cancelled)$"")",1.0,1.0,1.0,100.00000000000004
Validate the `feedback` field to ensure that all entries are strings and do not exceed 500 characters in length.,"expect_column_values_to_be_of_type(column=""feedback"", type_=""str""),expect_column_value_lengths_to_be_between(column=""feedback"", min_value=0, max_value=500)","expect_column_values_to_be_of_type(column=""feedback"", type_=""str""),expect_column_value_lengths_to_be_between(column=""feedback"", min_value=1, max_value=500)",0.9615384615384616,0.92,0.9615384615384616,95.66758893610279
Check if the `activation_date` column has dates that are not older than 5 years from the current date.,"expect_column_values_to_be_between(column=""activation_date"", min_value=""2018-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""activation_date""),expect_column_values_to_be_between(column=""activation_date"", min_value=""2022-10-31"", max_value=""today"")",0.6086956521739131,0.5,0.6086956521739131,50.37538999432698
For field 'signup_date': Ensure the field exists. Validate that all values in 'signup_date' conform to the format 'YYYY-MM-DD'. Check that the earliest signup date is not older than three years from the current date.,"expect_column_to_exist(column=""signup_date""),expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d""),expect_column_min_to_be_between(column=""signup_date"", min_value=(current_date - timedelta(days=3*365)).strftime(""%Y-%m-%d""), max_value=current_date.strftime(""%Y-%m-%d""))","expect_column_to_exist(column=""signup_date""),expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""signup_date""),expect_column_mean_to_be_between(column=""signup_date"", min_value=(current_date - datetime.timedelta(days=365*3)), max_value=current_date)",0.7999999999999999,0.6990291262135921,0.780952380952381,73.60196478023553
"For field 'usage_amount': Ensure this field matches the type 'decimal'. Validate that values are greater than or equal to zero and do not exceed '10,000' units.","expect_column_values_to_be_of_type(column=""usage_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""usage_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_of_type(column=""usage_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""usage_amount"", min_value=0.0, max_value=10000.0),expect_column_mean_to_be_between(column=""usage_amount"", min_value=0.0, max_value=10000.0)",0.7397260273972603,0.732394366197183,0.7397260273972603,60.10154102216204
Ensure the `policy_start_date` column values match the format 'YYYY-MM-DD' and are within the last ten years.,"expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""policy_start_date"", min_value=""2013-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""policy_start_date""),expect_column_values_to_be_between(column=""policy_start_date"", min_value=""2012-01-01"", max_value=""today"")",0.7901234567901234,0.759493670886076,0.7901234567901234,71.20026202999514
Ensure the `number_of_bedrooms` column values are greater than or equal to 1.,"expect_column_values_to_be_between(column=""number_of_bedrooms"", min_value=1, max_value=None)","expect_column_values_to_be_greater_than(column=""number_of_bedrooms"", value=1)",0.7586206896551724,0.5925925925925926,0.7586206896551724,59.73339657592431
Check that the `release_year` field contains years within the range of 2000 to 2023.,"expect_column_values_to_be_between(column=""release_year"", min_value=2000, max_value=2023)","expect_column_values_to_be_between(column=""release_year"", min_value=2000, max_value=2023)",1.0,1.0,1.0,100.00000000000004
"For the `grade` column, ensure values are within the range of `0` to `100` and are arranged in descending order across records.","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""grade"")","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""grade"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `price` field contains only numeric values within the range of $0 to $10,000,000 and is not nullable.","expect_column_values_to_not_be_null(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000000),expect_column_values_to_be_of_type(column=""price"", type_=""numeric"")","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000000),expect_column_values_to_not_be_null(column=""price"")",0.8070175438596492,0.8,0.7368421052631579,57.75157248131947
Check that the sum of the `attendance_days` and `absent_days` equals the `total_days` for each student record.,"expect_multicolumn_sum_to_equal(column_list=[""attendance_days"", ""absent_days""], target_column=""total_days"")","expect_column_pair_values_to_be_equal(column_A=""attendance_days"", column_B=""absent_days""),expect_column_sum_to_equal(column=""attendance_days"", value=total_days)",0.5853658536585367,0.30769230769230765,0.5365853658536585,35.738901780500036
Ensure the `service_start_date` column values follow the format 'MM/DD/YYYY' and are all valid dates.,"expect_column_values_to_match_strftime_format(column=""service_start_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""service_start_date"")","expect_column_values_to_match_strftime_format(column=""service_start_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""service_start_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `salary` values are within the range of 30000 to 200000.,"expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)","expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)",1.0,1.0,1.0,100.00000000000004
Validate that `completion_status` is either 'Completed' or 'Incomplete' for every record.,"expect_column_values_to_be_in_set(column=""completion_status"", value_set=[""Completed"", ""Incomplete""])","expect_column_values_to_be_in_set(column=""completion_status"", value_set=[""Completed"", ""Incomplete""])",1.0,1.0,1.0,100.00000000000004
Ensure that the `delivery_date` field contains valid dates formatted as `YYYY-MM-DD` and is not earlier than the current date.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_increasing(column=""delivery_date"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""delivery_date"")  # This ensures the dates are in order, as dates should be from most recent to oldest.",0.7027027027027027,0.5833333333333334,0.6486486486486486,67.91537023198755
For table 'inventory': Validate that the number of rows in 'inventory' is equal to the number of unique 'product_id' values. Ensure 'product_id' exists in 'products' table.,"expect_table_row_count_to_equal(column=""inventory"", value=expect_column_unique_value_count_to_be_equal(column=""product_id"")),expect_column_to_exist(column=""product_id"")","expect_table_row_count_to_equal_other_table(table_name=""inventory"", other_table=""products"")  # Assuming ""products"" table has unique ""product_id"" values.",0.4897959183673469,0.25531914893617025,0.40816326530612246,29.203251376282648
Verify that the `tracking_number` column has unique values and does not contain null entries.,"expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_not_be_null(column=""tracking_number"")","expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_not_be_null(column=""tracking_number"") CLIIIK",0.9743589743589743,0.972972972972973,0.9743589743589743,97.64540896763108
For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all patient IDs are unique.,"expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""text""),expect_column_values_to_be_unique(column=""patient_id"")","expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""text""),expect_column_values_to_be_unique(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `service_request_date` column adheres to the format 'YYYY-MM-DD' and that all requests are logged within the last year.,"expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""service_request_date"")  # Assuming there's a need to check if the dates are parseable,# Additional expectation for date range would require custom logic, not directly available in the reference","expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")",0.5555555555555555,0.5227272727272727,0.5555555555555555,61.85723033341144
For the `wind_speed` and `temperature` columns: Ensure that wind speed is always less than or equal to temperature in miles per hour.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""wind_speed"", column_B=""temperature"")","expect_column_pair_values_to_be_less_than(column_A=""temperature"", column_B=""wind_speed"")",0.9375,0.6000000000000001,0.7500000000000001,76.70671562713699
"Verify that the `fee` column values are within the range of 0.0001 to 100, ensuring valid transaction fees.","expect_column_values_to_be_between(column=""fee"", min_value=0.0001, max_value=100)","expect_column_values_to_be_between(column=""fee"", min_value=0.0001, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `product_name` column matches the type 'string' and that no entries exceed 100 characters in length.,"expect_column_values_to_be_of_type(column=""product_name"", type_=""string""),expect_column_value_lengths_to_be_between(column=""product_name"", min_value=0, max_value=100)","expect_column_to_exist(column=""product_name""),expect_column_values_to_be_of_type(column=""product_name"", type_=""string""),expect_column_value_lengths_to_be_between(column=""product_name"", min_value=0, max_value=100)",0.888888888888889,0.8852459016393442,0.888888888888889,78.61154594366788
For field 'phone_number': Ensure the expect column to exist; Ensure this field matches the format 'phone number' and is required (not null).,"expect_column_to_exist(column=""phone_number""),expect_column_values_to_not_be_null(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_to_exist(column=""phone_number""),expect_column_values_to_not_be_null(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?1?\d{10}$"")",0.9374999999999999,0.9032258064516129,0.9374999999999999,88.88246672844363
"In the `listing_price` column: Check that values are positive floats and fall within the range [10000.00, 5000000.00].","expect_column_values_to_be_between(column=""listing_price"", min_value=10000.00, max_value=5000000.00),expect_column_values_to_be_of_type(column=""listing_price"", type_=""float"")","expect_column_values_to_be_between(column=""listing_price"", min_value=10000.00, max_value=5000000.00),expect_column_values_to_be_of_type(column=""listing_price"", type_=""float""),expect_column_values_to_be_between(column=""listing_price"", min_value=10000.00, max_value=5000000.00)",0.7733333333333333,0.7671232876712328,0.7733333333333333,64.6994573180589
For field `team_name`: Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""team_name""),expect_column_values_to_not_be_null(column=""team_name""),expect_column_values_to_be_of_type(column=""team_name"", type_=""text"")","expect_column_to_exist(column=""team_name""),expect_column_values_to_not_be_null(column=""team_name""),expect_column_values_to_be_of_type(column=""team_name"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check that the `student_id` column contains only distinct values and the number of rows matches the total number of enrolled students.,"expect_column_values_to_be_unique(column=""student_id""),expect_table_row_count_to_equal(column=""student_id"")","expect_column_distinct_values_to_equal_set(column=""student_id"", value_set=total_number_of_students),expect_table_row_count_to_equal(expected_value=total_number_of_enrolled_students)",0.5957446808510638,0.39999999999999997,0.5957446808510638,42.30490819100531
Ensure that the `candidate_id` in the `votes` table must exist in the `candidates` table `candidate_id` column.,"expect_column_pair_values_to_be_in_set(column_A=""votes.candidate_id"", column_B=""candidates.candidate_id"")","expect_column_values_to_be_in_set(column=""votes"", value_set=candidates)",0.6666666666666667,0.42857142857142855,0.6666666666666667,36.18985936137854
Verify that the `last_login` column contains datetime values that can be parsed correctly and are within the last 12 months.,"expect_column_values_to_be_dateutil_parseable(column=""last_login""),expect_column_values_to_be_between(column=""last_login"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""last_login""),expect_column_values_to_be_between(column=""last_login"", min_value=""2022-08-01"", max_value=""2023-08-01"")",0.9310344827586207,0.8571428571428571,0.9310344827586207,92.23765517412046
For field 'performance_review': Ensure the field contains valid JSON objects and conforms to the specified JSON schema for review records.,"expect_column_values_to_be_json_parseable(column=""performance_review""),expect_column_values_to_match_json_schema(column=""performance_review"", schema={""type"": ""object"", ""properties"": {}})  # Replace with actual JSON schema as needed.","expect_column_values_to_be_json_parseable(column=""performance_review""),expect_column_values_to_match_json_schema(column=""performance_review"", schema={""type"": ""object""})  # assuming the specified JSON schema exists and can be accessed for validation.",0.7575757575757576,0.71875,0.7575757575757576,78.20566316946226
"For the `attachments` column: Validate that the number of items does not exceed 5 and that file types match the set `['.pdf', '.docx', '.jpg']`.","expect_column_value_lengths_to_be_between(column=""attachments"", min_value=0, max_value=5),expect_column_values_to_match_regex_list(column=""attachments"", regex_list=[r"".*\.pdf$"", r"".*\.docx$"", r"".*\.jpg$""])","expect_column_value_count_to_be_between(column=""attachments"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""attachments"", type_=["".pdf"", "".docx"", "".jpg""])",0.7333333333333334,0.5172413793103449,0.7333333333333334,52.333861548084116
"For field 'service_type': Ensure values in 'service_type' must exist in the set ('electricity', 'water', 'gas'). Ensure this field exists.","expect_column_to_exist(column=""service_type""),expect_column_values_to_be_in_set(column=""service_type"", value_set=['electricity', 'water', 'gas'])","expect_column_to_exist(column=""service_type""),expect_column_values_to_be_in_set(column=""service_type"", value_set=['electricity', 'water', 'gas'])",1.0,1.0,1.0,100.00000000000004
Ensure that all entries in the `address` column include valid formatting with both street and city specified.,"expect_column_values_to_match_regex(column=""address"", regex=r""^\d+\s[A-z]+\s[A-z]+,\s[A-z]+\s[A-z]+$"")","expect_column_to_exist(column=""address""),expect_column_values_to_match_regex(column=""address"", regex=r""^((?P<street>.+) (?P<city>\S+), (?P<state>\S+))$"")",0.5106382978723404,0.4,0.5106382978723404,33.724889688925686
Ensure that the `discount` column values are greater than or equal to the `original_price` column values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""discount"", column_B=""original_price"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""discount"", column_B=""original_price"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `performance_score` column does not contain values in the set `[0, -1]`.","expect_column_values_to_not_be_in_set(column=""performance_score"", value_set=[0, -1])","expect_column_values_to_not_be_in_set(column=""performance_score"", value_set=[0, -1])",1.0,1.0,1.0,100.00000000000004
For field 'price': Verify that the 'price' column contains only numeric values and is greater than 0. Ensure there are no missing values in this column.,"expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=None),expect_column_values_to_not_be_null(column=""price"")","expect_column_to_exist(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0)",0.8571428571428572,0.7540983606557378,0.6984126984126985,76.0886005300102
"For field 'case_status': Ensure the field matches the type 'text'. Validate that all values in (case_status) must match one of the predefined statuses: (Open, Closed, Pending, Archived). Ensure this field exists.","expect_column_to_exist(column=""case_status""),expect_column_values_to_be_of_type(column=""case_status"", type_=""text""),expect_column_values_to_be_in_set(column=""case_status"", value_set=[""Open"", ""Closed"", ""Pending"", ""Archived""])","expect_column_to_exist(column=""case_status""),expect_column_values_to_be_of_type(column=""case_status"", type_=""text""),expect_column_values_to_be_in_set(column=""case_status"", value_set=[ ""Open"", ""Closed"", ""Pending"", ""Archived"" ])",1.0,1.0,1.0,100.00000000000004
Check that the `defendant_names` column contains valid text entries and does not exceed 255 characters. Ensure non-null values.,"expect_column_values_to_not_be_null(column=""defendant_names""),expect_column_value_lengths_to_be_between(column=""defendant_names"", min_value=1, max_value=255),expect_column_values_to_be_of_type(column=""defendant_names"", type_=""text"")","expect_column_values_to_not_be_null(column=""defendant_names""),expect_column_value_lengths_to_be_between(column=""defendant_names"", min_value=0, max_value=255),expect_column_values_to_be_of_type(column=""defendant_names"", type_=""text"")",0.9736842105263158,0.9459459459459459,0.9736842105263158,97.04907832745397
"Verify that the `case_priority` column contains values either `High`, `Medium`, or `Low`, ensuring no other values are present.","expect_column_values_to_be_in_set(column=""case_priority"", value_set=[""High"", ""Medium"", ""Low""])","expect_column_values_to_be_in_set(column=""case_priority"", value_set=[""High"", ""Medium"", ""Low""])",1.0,1.0,1.0,100.00000000000004
For file 'inventory_data.csv': Ensure the file exists. Ensure the file size is between 1KB and 5MB. Validate the presence of valid CSV headers.,"expect_file_to_exist(file_path=""inventory_data.csv""),expect_file_size_to_be_between(file_path=""inventory_data.csv"", min_value=1024, max_value=5242880),expect_file_to_have_valid_table_header(file_path=""inventory_data.csv"")","expect_file_to_exist(file_path=""inventory_data.csv""),expect_file_size_to_be_between(min_value=1024, max_value=5*1024*1024), # 1MB - 5MB #,expect_column_names_to_match_set(column_names=[""sku"", ""item_name"", ""brand"", ""category"", ""price""]) # You may add validation for column names to match set of required headers.",0.5333333333333333,0.40909090909090917,0.5333333333333333,42.04501557562494
For field 'created_at': Ensure the field is required (not null). Validate that (created_at) is in the format 'YYYY-MM-DD HH:MM:SS' and is a valid timestamp.,"expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""created_at"")","expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""created_at"")",1.0,1.0,1.0,100.00000000000004
Ensure the number of rows in the `legal_cases` table is between 50 and 500.,"expect_table_row_count_to_be_between(min_value=50, max_value=500)","expect_table_row_count_to_be_between(min_value=50, max_value=500)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `performance_score` in HRMS is linked to the `loan_approval` status, where high scores correlate with approved loans.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""performance_score"", column_B=""loan_approval"")","expect_column_pair_values_to_be_in_set(column_A=""performance_score"", column_B=""loan_approval"", value_set={""approved""}),expect_column_mean_to_be_between(column=""performance_score"", min_value=80, max_value=100)",0.5384615384615384,0.44,0.5384615384615384,37.32443028884742
For the column combination of `election_id` and `voter_id`: Ensure the values are unique across records.,"expect_compound_columns_to_be_unique(column_A=""election_id"", column_B=""voter_id"")","expect_compound_columns_to_be_unique(column_list=[""election_id"", ""voter_id""])",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.7176346014632
For table 'review_scores': Ensure the column 'score' values are within the range of 0 to 100. Ensure this field exists.,"expect_column_to_exist(column=""score""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=100)","expect_column_to_exist(column=""score""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'developer': Ensure the field matches the type 'text'. Validate that the length of (developer) is between 3 and 50 characters. Ensure this field does not contain numeric characters.,"expect_column_values_to_be_of_type(column=""developer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""developer"", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=""developer"", regex=r""\d"")","expect_column_values_to_be_of_type(column=""developer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""developer"", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=""developer"", regex=r""\d"")",1.0,1.0,1.0,100.00000000000004
"For field 'payment_status': Ensure the field matches the type 'text'. Ensure values in (payment_status) must be one of ['paid', 'pending', 'failed'].","expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'pending', 'failed'])","expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=[""paid"", ""pending"", ""failed""])",1.0,1.0,1.0,82.76706852379537
"Validate that the `game_title` column contains string values with a length between 3 and 100 characters, ensuring no titles exceed this limit.","expect_column_value_lengths_to_be_between(column=""game_title"", min_value=3, max_value=100)","expect_column_values_to_be_of_type(column=""game_title"", type_=""str""),expect_column_values_to_be_between(column=""game_title"", min_value=3, max_value=100)",0.6976744186046512,0.6341463414634146,0.6976744186046512,46.50843658473056
"For the `delivery_date` field, ensure it is of type 'date'. Validate that all dates are in the future.","expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_values_to_be_increasing(column=""delivery_date"")","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_values_to_be_increasing(column=""delivery_date"")",0.8571428571428571,0.851063829787234,0.8571428571428571,74.03690879485882
"For the `quantity_ordered` column, ensure values are non-negative integers and do not exceed `1,000`.","expect_column_values_to_be_between(column=""quantity_ordered"", min_value=0, max_value=1000),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int"")","expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int""),expect_column_values_to_be_between(column=""quantity_ordered"", min_value=0, max_value=1000)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
Ensure the `price` column values are arranged in increasing order for better price comparison.,"expect_column_values_to_be_increasing(column=""price"")","expect_column_values_to_be_increasing(column=""price"")",1.0,1.0,1.0,100.00000000000004
For field 'file_upload': Ensure that files exist and match the specified hash value. Validate that the file size is within the range of 1KB to 5MB.,"expect_file_to_exist(file_name=""file_upload""),expect_file_hash_to_equal(file_name=""file_upload"", expected_hash_value=""your_expected_hash_value_here""),  # Replace with actual hash value,expect_file_size_to_be_between(file_name=""file_upload"", min_value=1024, max_value=5242880)","expect_file_to_exist(file_path=""file_upload""),expect_file_hash_to_equal(file_path=""file_upload"", expected_hash_value=""your_expected_hash_value""),expect_file_size_to_be_between(file_path=""file_upload"", min_value=1, max_value=5000000)  # Replace 5000000 with your desired maximum file size in bytes.",0.7708333333333333,0.6382978723404255,0.7291666666666667,74.60154752239555
For field 'billing_period': Ensure this field matches the type 'date'. Ensure the field is required (not null). Ensure this field exists.,"expect_column_to_exist(column=""billing_period""),expect_column_values_to_not_be_null(column=""billing_period""),expect_column_values_to_be_of_type(column=""billing_period"", type_=""date"")","expect_column_to_exist(column=""billing_period""),expect_column_values_to_be_of_type(column=""billing_period"", type_=""date""),expect_column_values_to_not_be_null(column=""billing_period"")",1.0,0.9642857142857143,0.7931034482758621,99.61904069492678
"Ensure the `employment_type` column contains only distinct values matching `['Full-time', 'Part-time', 'Contract']`.","expect_column_distinct_values_to_equal_set(column=""employment_type"", value_set=['Full-time', 'Part-time', 'Contract'])","expect_column_values_to_be_unique(column=""employment_type""),expect_column_values_to_match_set(column=""employment_type"", value_set=['Full-time', 'Part-time', 'Contract'])",0.7142857142857143,0.6,0.7142857142857143,53.00995574202672
Verify that the sum of the `claims` in the insurance dataset matches the total `transaction_amount` in the blockchain dataset for the same customer.,"expect_column_pair_values_to_be_equal(column_A=""claims"", column_B=""transaction_amount"")","expect_column_pair_values_to_be_equal(column_A=""claims"", column_B=""transaction_amount"")",1.0,1.0,1.0,100.00000000000004
Ensure the `player_count` column contains integer values that are greater than or equal to 1 and less than or equal to 100.,"expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=100)","expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
Check that the `cargo_weight` column contains positive numeric values and the total weight across shipments does not exceed 50000.,"expect_column_values_to_be_between(column=""cargo_weight"", min_value=0),expect_column_sum_to_be_between(column=""cargo_weight"", min_value=0, max_value=50000)","expect_column_values_to_be_between(column=""cargo_weight"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""total_cargo_weight"", min_value=None, max_value=50000)",0.896551724137931,0.8214285714285715,0.896551724137931,81.53038806438728
Ensure the `delivery_date` values are not in the past and follow the format `YYYY-MM-DD`.,"expect_column_values_to_be_increasing(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")",0.9387755102040817,0.851063829787234,0.9387755102040817,90.56558857812053
Ensure the total `monthly_charge` column equals the sum of `base_charge` and `usage_charge` for all records.,"expect_multicolumn_sum_to_equal(column_list=[""base_charge"", ""usage_charge""], sum_column=""monthly_charge"")","expect_column_values_to_equal(column=""monthly_charge"", sum_column_values=""base_charge + usage_charge"")",0.8000000000000002,0.6428571428571429,0.5333333333333333,53.58226466923698
For the `humidity` field: Ensure values are between 0% and 100%. Validate that the data type matches 'integer'.,"expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""humidity"", type_=""int"")","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""humidity"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"For the 'voting_method' field: Ensure all values are distinct and match the allowed set ['In-person', 'Mail-in', 'Early Voting'].","expect_column_values_to_be_unique(column=""voting_method""),expect_column_values_to_be_in_set(column=""voting_method"", value_set=['In-person', 'Mail-in', 'Early Voting'])","expect_column_values_to_be_unique(column=""voting_method""),expect_column_values_to_be_in_set(column=""voting_method"", value_set=['In-person', 'Mail-in', 'Early Voting'])",1.0,1.0,1.0,100.00000000000004
In the `ip_address` column: Ensure all entries are unique and conform to the IPv4 format. Validate that there are no missing entries.,"expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_not_be_null(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"")","expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_not_be_null(column=""ip_address"")",0.5619834710743802,0.5042016806722688,0.396694214876033,22.44195523272233
Confirm that the `sent_time` column contains timestamps that are not in the future.,"expect_column_values_to_be_between(column=""sent_time"", min_value=""1970-01-01T00:00:00Z"", max_value=""now()"")","expect_column_values_to_be_decreasing(column=""sent_time"")",0.5714285714285714,0.46153846153846156,0.5714285714285714,22.525211048569982
Check that the `email` column contains valid email formats and has no duplicate entries.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")ılmaktadır",0.9545454545454545,0.9523809523809523,0.9545454545454545,98.49581210109045
Ensure the `user_id` column exists and contains unique identifiers for each user.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
For field 'employee_id': Ensure the field matches the type 'text'. Validate that all values follow the pattern 'EMP-\\d{6}' and exist in the employee records.,"expect_column_values_to_be_of_type(column=""employee_id"", type_=""text""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""^EMP-\d{6}$"")","expect_column_values_to_be_of_type(column=""employee_id"", type_=""text""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""EMP-\d{6}""),expect_column_values_to_be_in_set(column=""employee_id"", value_set=employee_records)  # Assuming employee_records is a list of available employee_ids.",0.6842105263157895,0.6756756756756758,0.6842105263157895,54.667385206028996
Ensure the `sample_size` column contains values within the range of 1 to 1000.,"expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=1000)","expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=1000)",1.0,1.0,1.0,100.00000000000004
Check that the `appointment_date` field contains dates only in the future and matches the format 'YYYY-MM-DD'.,"expect_column_values_to_be_increasing(column=""appointment_date""),expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_between(column=""appointment_date"", min_value=""2023-11-26"", max_value=None),expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d"")átky",0.8070175438596493,0.7272727272727273,0.8070175438596493,68.56348770682108
"Validate that the `user_role` column contains only distinct values from the set `['Admin', 'Instructor', 'Student']`.","expect_column_values_to_be_in_set(column=""user_role"", value_set=['Admin', 'Instructor', 'Student'])","expect_column_values_to_be_in_set(column=""user_role"", value_set=['Admin', 'Instructor', 'Student'])",1.0,1.0,1.0,100.00000000000004
Ensure the `student_id` column contains only distinct values that are non-null and formatted as integers.,"expect_column_to_exist(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int"")",0.898550724637681,0.8955223880597014,0.8115942028985507,79.2251242314208
"Ensure the `transaction_type` column contains only distinct values matching `['Deposit', 'Withdrawal', 'Transfer']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])","expect_column_distinct_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])",0.967741935483871,0.896551724137931,0.967741935483871,91.90672413319132
For field 'tax_rate': Ensure the field matches the type 'decimal'. Ensure the field contains values between 0.0 and 1.0. Ensure this field exists.,"expect_column_to_exist(column=""tax_rate""),expect_column_values_to_be_of_type(column=""tax_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""tax_rate"", min_value=0.0, max_value=1.0)","expect_column_to_exist(column=""tax_rate""),expect_column_values_to_be_of_type(column=""tax_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""tax_rate"", min_value=0, max_value=1)",0.9714285714285714,0.9705882352941176,0.9714285714285714,94.4673521293269
For field 'customer_feedback': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 1000. Ensure this field exists.,"expect_column_to_exist(column=""customer_feedback""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=1000),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text"")","expect_column_to_exist(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=1, max_value=1000)",0.9714285714285714,0.9117647058823528,0.6571428571428571,95.84520980984135
For the `sensor_reading` field: Ensure values are within the expected range of 0 to 1000 units. Confirm this column is free from missing values.,"expect_column_values_to_be_between(column=""sensor_reading"", min_value=0, max_value=1000),expect_column_values_to_not_be_null(column=""sensor_reading"")","expect_column_values_to_be_between(column=""sensor_reading"", min_value=0, max_value=1000),expect_column_values_to_not_be_null(column=""sensor_reading"")",1.0,1.0,1.0,100.00000000000004
"For field 'plan_type': Ensure this field exists. Ensure values in 'plan_type' match the set ('Basic', 'Premium', 'Enterprise').","expect_column_to_exist(column=""plan_type""),expect_column_values_to_be_in_set(column=""plan_type"", value_set=[""Basic"", ""Premium"", ""Enterprise""])","expect_column_to_exist(column=""plan_type""),expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Basic', 'Premium', 'Enterprise'])",1.0,1.0,1.0,78.45017601424416
"Ensure that if the `status` column is 'Published', then the `publish_date` must not be null.","expect_column_pair_values_to_be_equal(column_A=""status"", column_B=""publish_date"")","expect_column_values_to_not_be_null(column=""publish_date""),expect_column_values_to_be_equal(column=""status"", value=""Published"")",0.6470588235294117,0.37499999999999994,0.5294117647058824,44.51448709432679
Validate that the `alert_timestamp` in the `security_alerts` table matches the format 'YYYY-MM-DDTHH:MM:SSZ' for all entries.,"expect_column_values_to_match_strftime_format(column=""alert_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_match_strftime_format(column=""alert_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,100.00000000000004
Ensure the `case_id` field contains unique identifiers and does not include null values.,"expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id"")","expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `property_type` column contains values from the specified set `['Apartment', 'House', 'Commercial']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Commercial'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Commercial'])",1.0,1.0,1.0,100.00000000000004
"For the `policy_start_date`, ensure values match the strftime format '%Y-%m-%d' and are parsed correctly.","expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""policy_start_date"")","expect_column_to_exist(column=""policy_start_date""),expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=""policy_start_date"")",0.870967741935484,0.8666666666666666,0.870967741935484,71.17948469333581
"Validate that the `district_code` column values belong to the set `['D1', 'D2', 'D3', 'D4']` and are unique.","expect_column_values_to_be_in_set(column=""district_code"", value_set=['D1', 'D2', 'D3', 'D4']),expect_column_values_to_be_unique(column=""district_code"")","expect_column_values_to_be_in_set(column=""district_code"", value_set=['D1', 'D2', 'D3', 'D4']),expect_column_values_to_be_unique(column=""district_code"")",1.0,1.0,1.0,100.00000000000004
Verify that the `release_date` values conform to the format 'YYYY-MM-DD' and are not in the future.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")  # This checks if dates are valid,# Additional check to ensure dates are not in the future would require custom logic, as it is not covered by the provided expectations.","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""1970-01-01"", max_value=datetime.date.today())lásil",0.5800000000000001,0.4897959183673469,0.54,56.041053133579766
Ensure that the sum of `deposits` and `withdrawals` columns equals the `account_balance` for each record.,"expect_multicolumn_sum_to_equal(column_list=[""deposits"", ""withdrawals""], sum_column=""account_balance"")","expect_multicolumn_sum_to_equal(column_list=[""deposits"", ""withdrawals""], column=""account_balance"")",0.9600000000000001,0.8695652173913043,0.9600000000000001,89.11473434354988
"For the `course_id` field, ensure it matches the type 'integer' and contains no duplicate values.","expect_column_values_to_be_of_type(column=""course_id"", type_=""int""),expect_column_values_to_be_unique(column=""course_id"")","expect_column_values_to_be_of_type(column=""course_id"", type_=""integer""),expect_column_values_to_be_unique(column=""course_id"")",0.9523809523809523,0.9,0.9523809523809523,94.75833735368086
For field 'resolution_time': Ensure the average resolution time is within the range of 30 to 180 days.,"expect_column_mean_to_be_between(column=""resolution_time"", min_value=30, max_value=180)","expect_column_mean_to_be_between(column=""resolution_time"", min_value=30, max_value=180)",1.0,1.0,1.0,100.00000000000004
For field 'game_duration': Ensure this field exists. Validate that the average 'game_duration' is between 30 and 120 minutes.,"expect_column_to_exist(column=""game_duration""),expect_column_mean_to_be_between(column=""game_duration"", min_value=30, max_value=120)","expect_column_to_exist(column=""game_duration""),expect_column_mean_to_be_between(column=""game_duration"", min_value=30, max_value=120)",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` column contains unique values and all entries are of type 'string'.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_id` column contains unique values and that all entries are non-null.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `content` field does not exceed 5000 characters and contains no null values.,"expect_column_value_lengths_to_be_between(column=""content"", min_value=0, max_value=5000),expect_column_values_to_not_be_null(column=""content"")","expect_column_value_lengths_to_be_between(column=""content"", min_value=1, max_value=5000),expect_column_values_to_not_be_null(column=""content"")",0.9583333333333334,0.9130434782608695,0.9583333333333334,95.06885335787993
For field 'stock_quantity': Ensure the minimum stock quantity is not less than 0. Ensure the average stock quantity is greater than 10.,"expect_column_min_to_be_between(column=""stock_quantity"", min_value=0),expect_column_mean_to_be_between(column=""stock_quantity"", min_value=10, max_value=None)","expect_column_min_to_be_between(column=""stock_quantity"", min_value=0),expect_column_mean_to_be_greater_than(column=""stock_quantity"", mean_value=10)",0.8461538461538461,0.76,0.8461538461538461,79.66002985285034
"Validate that the `phone_number` column in the `contacts` table matches the regex pattern '^\\+?[0-9]{10,15}$' and contains no letters.","expect_column_values_to_match_regex(column=""phone_number"", regex=r'^\+?[0-9]{10,15}$'),expect_column_values_to_not_match_regex(column=""phone_number"", regex=r'[a-zA-Z]')","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^(\\+?[0-9]{10,15}$)"", column_values_to_not_match_regex(column=""phone_number"", regex=r""[a-z0-9]"")",0.9152542372881356,0.8771929824561403,0.9152542372881356,73.73622828087468
Verify that the `student_id` column exists and contains unique identifiers for each student enrolled in the course.,"expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id"")","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id"")",1.0,1.0,1.0,100.00000000000004
For field 'rating': Ensure the average rating is between 1 and 5. Ensure there are no null values in this column.,"expect_column_mean_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")","expect_column_mean_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
"For the `platform` field, ensure all entries match the set of allowed values: `['PC', 'Xbox', 'PlayStation', 'Switch']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'Playstation', 'Switch'])",1.0,1.0,1.0,92.10500207490826
Verify that the `bio` column values do not exceed 160 characters in length.,"expect_column_value_lengths_to_be_between(column=""bio"", min_value=0, max_value=160)","expect_column_value_lengths_to_be_between(column=""bio"", min_value=1, max_value=160)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
Ensure the 'supplier_name' column contains only distinct values matching the expected supplier list.,"expect_column_values_to_be_in_set(column=""supplier_name"", value_set=expected_supplier_list)","expect_column_values_to_be_in_set(column=""supplier_name"", value_set=[supplier1, supplier2,...])",0.8275862068965518,0.8148148148148148,0.8275862068965518,71.6506050505695
For the `consumption` field: Ensure that values are greater than zero and exist for all entries in the `household_id` column.,"expect_column_values_to_be_between(column=""consumption"", min_value=0),expect_column_values_to_not_be_null(column=""consumption"")","expect_column_values_to_be_greater_than(column=""consumption"", value=0),expect_column_values_to_exist(column=""household_id"")",0.717948717948718,0.5405405405405405,0.717948717948718,65.92424852789793
Validate that the number of unique values in the `citizen_id` column is equal to the row count in the `service_requests` table.,"expect_column_unique_value_count_to_be_equal(column=""citizen_id"", value=expect_table_row_count())","expect_table_row_count_to_be_between(table=""service_requests"", min_value=1, max_value=total_unique_values_in_citizen_id_column),expect_column_unique_value_count_to_equal(column=""citizen_id"", unique_value_count=total_unique_values_in_citizen_id_column)",0.5517241379310345,0.4285714285714285,0.4137931034482759,32.40101679040282
Check that the `user_id` in the `transactions` table and the `users` table match in terms of existence and format.,"expect_column_pair_values_to_be_equal(column_A=""transactions.user_id"", column_B=""users.user_id""),expect_column_values_to_be_of_type(column=""transactions.user_id"", type_=""text""),expect_column_values_to_be_of_type(column=""users.user_id"", type_=""text"")","expect_table_row_to_match_json_schema(table=""transactions"", schema={""type"": ""object"", ""properties"": {""user_id"": {""type"": ""string"", ""format"": ""regex"", ""regex"": r""^[\dA-Za-z]{0,100}$""}}, ""required"": [""user_id""]}),expect_table_row_to_match_json_schema(table=""users"", schema={""type"": ""object"", ""properties"": {""user_id"": {""type"": ""string"", ""format"": ""regex"", ""regex"": r""^[\dA-Za-z]{0,100}$""}}, ""required"": [""user_id""]})",0.3564356435643564,0.1414141414141414,0.297029702970297,10.068390808948582
"Verify that the `grade` column contains only values from the set `['A', 'B', 'C', 'D', 'F']` and that it does not contain any null values.","expect_column_values_to_be_in_set(column=""grade"", value_set=['A', 'B', 'C', 'D', 'F']),expect_column_values_to_not_be_null(column=""grade"")","expect_column_values_to_be_in_set(column=""grade"", value_set=['A', 'B', 'C', 'D', 'F']),expect_column_values_to_not_be_null(column=""grade"")",1.0,1.0,1.0,100.00000000000004
Ensure that the combination of `case_id` and `client_id` is unique across all records.,"expect_compound_columns_to_be_unique(column_a=""case_id"", column_b=""client_id"")","expect_compound_columns_to_be_unique(column_A=""case_id"", column_B=""client_id"")",1.0,1.0,1.0,82.93181259810136
"For the `status` column: Ensure the values belong to the set `['Open', 'In Progress', 'Closed']`. Validate that there are no entries that do not conform to these statuses.","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'In Progress', 'Closed']),expect_column_values_to_not_be_in_set(column=""status"", value_set=['Open', 'In Progress', 'Closed'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'In Progress', 'Closed'])",0.6521739130434783,0.6363636363636364,0.6521739130434783,33.591098123916254
Ensure the `wind_speed` column values are not negative and are within the range of 0 to 150 km/h.,"expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `loan_type` column contains only values from the set `['Personal', 'Home', 'Auto']` and that all entries are non-null.","expect_column_values_to_be_in_set(column=""loan_type"", value_set=['Personal', 'Home', 'Auto']),expect_column_values_to_not_be_null(column=""loan_type"")","expect_column_values_to_be_in_set(column=""loan_type"", value_set=['Personal', 'Home', 'Auto']),expect_column_values_to_not_be_null(column=""loan_type"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `game_rating` column contains only valid JSON objects that conform to the specified schema, including fields like 'rating' and 'review_count'.","expect_column_values_to_match_json_schema(column=""game_rating"", schema={""type"": ""object"", ""properties"": {""rating"": {""type"": ""number""}, ""review_count"": {""type"": ""integer""}}})","expect_column_values_to_match_json_schema(column=""game_rating"", schema={""type"": ""object"", ""properties"": {""rating"": {""type"": ""number""}, ""review_count"": {""type"": ""number""}}})",0.9523809523809523,0.9500000000000001,0.9523809523809523,96.30786123683066
"For the `platform` column: Validate that values are from the specified set `['PC', 'Console', 'Mobile']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])",1.0,1.0,1.0,100.00000000000004
For the 'weather_forecast' table: Check that the number of rows is equal to 7. Ensure this table is present in the dataset.,"expect_table_row_count_to_equal(table=""weather_forecast"", value=7),expect_table_columns_to_match_set(table=""weather_forecast"")","expect_table_row_count_to_equal(expected_table_row_count=7)  # expected_table_row_count=7 represents the expected number of rows in the ""weather_forecast"" table.",0.553191489361702,0.35555555555555557,0.5106382978723405,38.49988923199081
"For the `research_type` field: Ensure values are from the set `['quantitative', 'qualitative', 'mixed']`.","expect_column_values_to_be_in_set(column=""research_type"", value_set=['quantitative', 'qualitative', 'mixed'])","expect_column_values_to_be_in_set(column=""research_type"", value_set=['quantitative', 'qualitative','mixed'])",1.0,1.0,1.0,100.00000000000004
"Validate that the `department` field contains non-empty strings and matches at least one value from the list `['Sales', 'HR', 'IT', 'Finance']`.","expect_column_values_to_not_be_null(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'HR', 'IT', 'Finance'])","expect_column_values_to_not_be_null(column=""department""),expect_column_values_to_match_regex_list(column=""department"", regex_list=['Sales', 'HR', 'IT', 'Finance'])",0.7916666666666666,0.6956521739130435,0.7916666666666666,80.44306655555783
"For the 'posts' table: Confirm that the number of rows is equal to the total number of active users. Ensure columns exist: 'post_id', 'user_id', and 'content'.","expect_table_row_count_to_equal(other_table=""active_users""),expect_column_to_exist(column=""post_id""),expect_column_to_exist(column=""user_id""),expect_column_to_exist(column=""content"")","expect_table_row_count_to_be_between(column=""posts"", min_value=total_active_users, max_value=total_active_users),expect_table_columns_to_match_set(column_set=[""post_id"", ""user_id"", ""content""])",0.5806451612903225,0.33333333333333337,0.5161290322580646,35.66067105491393
For the `title` field: Validate that all entries have a length between 10 and 100 characters and do not contain special characters.,"expect_column_value_lengths_to_be_between(column=""title"", min_value=10, max_value=100),expect_column_values_to_not_match_regex(column=""title"", regex=r""[^a-zA-Z0-9\s]"")","expect_column_values_to_match_regex(column=""title"", regex=r"".{10,100}$"")  # 10-100 characters, assuming 0 characters are valid, this should be adjusted as required.  # Regex matches the specified number of characters between 10 and 100.  # The ""$"" signifies the end of the string, which is used to ensure the match does not cross the boundaries of the string length.",0.37362637362637363,0.1797752808988764,0.21978021978021975,25.414016980782
For field 'request_details': Ensure that the length of the string is between 10 and 1000 characters.,"expect_column_value_lengths_to_be_between(column=""request_details"", min_value=10, max_value=1000)","expect_column_value_lengths_to_be_between(column=""request_details"", min_value=10, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"For the `complaint_type` column, ensure it is one of the predefined categories listed in `complaint_categories`.","expect_column_values_to_be_in_set(column=""complaint_type"", value_set=complaint_categories)","expect_column_values_to_be_in_set(column=""complaint_type"", value_set=complaint_categories)",1.0,1.0,1.0,100.00000000000004
Ensure the `delivery_date` column contains valid datetime values that are not in the past.,"expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_increasing(column=""delivery_date"")","expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_greater_than(column=""delivery_date"", value=datetime.datetime.now())илакти",0.679245283018868,0.6274509803921569,0.679245283018868,50.24494115349053
Ensure the `location` column contains only unique values and matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""location""),expect_column_values_to_be_unique(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text"")","expect_column_to_exist(column=""location""),expect_column_values_to_be_unique(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"In the `grades`: Ensure that `grade` is in the range [0, 100]. Validate that `student_id` exists in the `students` table.","expect_column_values_to_be_between(column=""grades.grade"", min_value=0, max_value=100),expect_column_pair_values_to_be_equal(column_A=""grades.student_id"", column_B=""students.student_id"")","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_in_set(column=""student_id"", value_set=students_table_ids)",0.7540983606557378,0.6101694915254238,0.7540983606557378,61.95882433894454
"For the `supplier_id` column, ensure all values exist in the predefined set of supplier IDs.","expect_column_values_to_be_in_set(column=""supplier_id"", value_set=predefined_supplier_ids)","expect_column_values_to_be_in_set(column=""supplier_id"", value_set=[list_of_predefined_supplier_ids])",0.9375,0.8666666666666666,0.9375,77.11235574485453
Verify that the sum of the `monthly_income` column falls between 20000 and 500000.,"expect_column_sum_to_be_between(column=""monthly_income"", min_value=20000, max_value=500000)","expect_column_sum_to_be_between(column=""monthly_income"", min_value=20000, max_value=500000)",1.0,1.0,1.0,100.00000000000004
Validate that the `tags` column contains valid JSON arrays and adheres to the defined JSON schema for tags.,"expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema='{""type"": ""array""}')","expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema={""type"": ""array""})",1.0,1.0,1.0,91.98519139123152
For fields `start_date` and `end_date`: Ensure that `end_date` is greater than `start_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")",1.0,1.0,1.0,100.00000000000004
"For the `transaction_value` column: Ensure the values are within the range of $0.01 to $1,000,000. Ensure the field matches the type 'float'.","expect_column_values_to_be_between(column=""transaction_value"", min_value=0.01, max_value=1000000),expect_column_values_to_be_of_type(column=""transaction_value"", type_=""float"")","expect_column_values_to_be_between(column=""transaction_value"", min_value=0.01, max_value=1000000),expect_column_values_to_be_of_type(column=""transaction_value"", type_=""float"")ávací",0.9824561403508771,0.9818181818181818,0.9824561403508771,98.37344161747833
For the `court_id` column: Ensure each value matches existing courts in the `courts` table. Ensure this field exists.,"expect_column_to_exist(column=""court_id""),expect_column_values_to_be_in_set(column=""court_id"", value_set=[/* list of existing court IDs from the courts table */])","expect_column_to_exist(column=""court_id""),expect_column_values_to_be_in_set(column=""court_id"", value_set=courts_table_value_set)  # replace courts_table_value_set with actual value of your courts table.",0.73015873015873,0.6229508196721312,0.6984126984126985,64.17151440797807
Ensure the `forecast_date` column adheres to the datetime format 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `price` column values are within the range of 0 to 1000.,"expect_column_values_to_be_between(column=""price"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For the 'visits' table: Ensure that the row count is equal to the number of unique patients in the 'patients' table.,"expect_table_row_count_to_equal_other_table(table=""visits"", other_table=""patients"", column=""patient_id"")","expect_table_row_count_to_equal_other_table(table=""visits"", other_table=""patients"", join_columns=[])",0.9032258064516129,0.8275862068965518,0.9032258064516129,80.00330861992286
"For field 'team_name': Ensure the field matches the type 'text'. Ensure values in (team_name) must exist in the predefined list ['Team A', 'Team B', 'Team C'].","expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_be_in_set(column=""team_name"", value_set=['Team A', 'Team B', 'Team C'])","expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_be_in_set(column=""team_name"", value_set=['Team A', 'Team B', 'Team C'])илакти",1.0,1.0,1.0,98.49581210109045
Check that the `game_release_date` column contains dates that do not exceed the current date.,"expect_column_values_to_be_between(column=""game_release_date"", min_value=None, max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""game_release_date""),expect_column_values_to_be_less_than(column=""game_release_date"", value=""today"")",0.5238095238095238,0.35,0.5238095238095238,38.412096327218514
For field 'publication_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure 'publication_date' is not a future date.,"expect_column_values_to_not_be_null(column=""publication_date""),expect_column_values_to_be_of_type(column=""publication_date"", type_=""date""),expect_column_values_to_be_between(column=""publication_date"", min_value=""2000-01-01"", max_value=""2023-10-01"")  # Assuming today's date is October 1, 2023. Adjust as necessary.","expect_column_values_to_not_be_null(column=""publication_date""),expect_column_values_to_be_of_type(column=""publication_date"", type_=""date""),expect_column_values_to_be_between(column=""publication_date"", min_value=""1970-01-01"", max_value=""2023-10-24"")  # Today Date  # Replace 2023-10-24 with current date for live date.",0.7999999999999999,0.7184466019417477,0.7999999999999999,81.91037274050947
Validate that the `course_completion_date` falls within the range of '2022-01-01' to '2023-12-31'.,"expect_column_values_to_be_between(column=""course_completion_date"", min_value=""2022-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""course_completion_date"", min_value=""2022-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
For the `sender_address` field: Validate that all entries match the regex pattern `^0x[a-fA-F0-9]{40}$` and do not contain duplicates.,"expect_column_values_to_match_regex(column=""sender_address"", regex=r""^0x[a-fA-F0-9]{40}$""),expect_column_values_to_be_unique(column=""sender_address"")","expect_column_values_to_match_regex(column=""sender_address"", regex=r""^0x[a-fA-F0-9]{40}$"")  # This will ensure each entry in the column matches the required regex pattern. expect_column_values_to_be_unique(column=""sender_address"")  # This will ensure there are no duplicates within the column.",0.6933333333333334,0.6575342465753424,0.6933333333333334,65.40438032585419
For field 'property_id': Ensure the field is required (not null). Ensure all property IDs are unique.,"expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id"")","expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `bedrooms` column contains only integers greater than or equal to 1.,"expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bedrooms"", min_value=1, max_value=None)","expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bedrooms"", min_value=1)",0.9361702127659575,0.9333333333333333,0.9361702127659575,87.76207108868465
"For the `performance_rating`: Ensure values are from the set `['Excellent', 'Good', 'Average', 'Poor']` and no missing values exist.","expect_column_values_to_be_in_set(column=""performance_rating"", value_set=['Excellent', 'Good', 'Average', 'Poor']),expect_column_values_to_not_be_null(column=""performance_rating"")","expect_column_values_to_be_in_set(column=""performance_rating"", value_set=['Excellent', 'Good', 'Average', 'Poor']),expect_column_values_to_not_be_null(column=""performance_rating"")",1.0,1.0,1.0,100.00000000000004
"For fields `group_a` and `group_b`: Ensure that the means of both groups fall within an expected range (e.g., 0 to 100).","expect_column_mean_to_be_between(column=""group_a"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""group_b"", min_value=0, max_value=100)","expect_column_mean_to_be_between(column=""group_a"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""group_b"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Check that the `service_request_id` column values are unique and not null.,"expect_column_values_to_be_unique(column=""service_request_id""),expect_column_values_to_not_be_null(column=""service_request_id"")","expect_column_values_to_be_unique(column=""service_request_id""),expect_column_values_to_not_be_null(column=""service_request_id"")",1.0,1.0,1.0,100.00000000000004
"Verify the distribution of `salary` values adheres to the expected parameters, with KL divergence below 0.1.","expect_column_kl_divergence_to_be_less_than(column=""salary"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""salary"", threshold=0.1)",1.0,1.0,1.0,100.00000000000004
"Ensure the `shipment_status` column contains only distinct values from the set `['Pending', 'In Transit', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""shipment_status"", value_set=['Pending', 'In Transit', 'Delivered', 'Cancelled'])","expect_column_distinct_values_to_equal_set(column=""shipment_status"", value_set=['Pending', 'In Transit', 'Delivered', 'Cancelled'])",0.8823529411764706,0.75,0.8823529411764706,85.4347485532598
For field 'zip_code': Ensure the field matches the type 'string'. Ensure all values in (zip_code) match the pattern '^[0-9]{5}$'. Ensure this field exists.,"expect_column_to_exist(column=""zip_code""),expect_column_values_to_be_of_type(column=""zip_code"", type_=""string""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^[0-9]{5}$"")","expect_column_to_exist(column=""zip_code""),expect_column_values_to_be_of_type(column=""zip_code"", type_=""string""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^[0-9]{5}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `purchase_order` table has at least 50 rows.,"expect_table_row_count_to_be_between(min_value=50, max_value=None)","expect_table_row_count_to_be_between(table=""purchase_order"", min_value=50)",0.7692307692307693,0.6666666666666666,0.7692307692307693,62.76160686442551
Ensure the `price` column values are sorted in decreasing order and all fall within the range of 0 to 10000.,"expect_column_values_to_be_decreasing(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)","expect_column_values_to_be_increasing(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000),expect_column_values_to_be_decreasing(column=""price"")",0.846153846153846,0.8400000000000001,0.8076923076923077,71.41887417998365
Ensure the `humidity` column contains only distinct values that are percentages ranging from 0 to 100.,"expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_proportion_of_unique_values_to_be_between(column=""humidity"", min_value=1.0, max_value=1.0)","expect_column_values_to_be_unique(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",0.8,0.6415094339622642,0.7272727272727273,62.71549767175144
For the `threat_details` field: Ensure it is a valid JSON object and contains properties such as 'severity' and 'description'. Validate that both properties exist.,"expect_column_values_to_be_json_parseable(column=""threat_details""),expect_column_values_to_match_json_schema(column=""threat_details"", schema={""type"": ""object"", ""properties"": {""severity"": {""type"": ""string""}, ""description"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""threat_details""),expect_column_values_to_match_json_schema(column=""threat_details"", schema={""type"": ""object"", ""properties"": {""severity"": {""type"": ""string""}, ""description"": {""type"": ""string""}}}),expect_column_values_to_not_be_null(column=""threat_details""),expect_column_values_to_match_regex(column=""threat_details"", regex=r"".*\w+\w+.\w*$"")  # Ensure it follows the naming convention of having three words with capitalized initial, separated by periods",0.6,0.5918367346938774,0.6,52.48970105276368
Verify that the `transaction_date` values follow the format 'YYYY-MM-DD' and are valid dates.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
For the `policy_start_date` field: Confirm all dates are in the format '%Y-%m-%d' and have no missing values. Check if they are earlier than `policy_end_date`.,"expect_column_to_exist(column=""policy_start_date""),expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""policy_start_date""),expect_column_pair_values_A_to_be_less_than_B(column_A=""policy_start_date"", column_B=""policy_end_date"")","expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""policy_start_date""),expect_column_pair_values_to_be_increasing(column_A=""policy_start_date"", column_B=""policy_end_date"")",0.8686868686868686,0.8247422680412371,0.8686868686868686,75.49011412433907
"For the `likes` field, confirm that all entries are non-negative integers that do not exceed `1000000`.","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=""likes"", type_=""int"")","expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000000)",1.0,0.9583333333333334,0.56,98.63293593592441
Ensure the `citizen_id` column is unique and matches the type 'text'. Values must not be null.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""text""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""text"")",1.0,0.9666666666666667,0.8064516129032258,99.64092777538484
Check the `data_entry_date` column to ensure all entries are in the format 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""data_entry_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""data_entry_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `post_id` column contains unique values for all blog posts.,"expect_column_values_to_be_unique(column=""post_id"")","expect_column_values_to_be_unique(column=""post_id"")",1.0,1.0,1.0,100.00000000000004
For field 'threat_score': Ensure the field matches the type 'integer'. Validate that values are non-negative and fall within the range of 0 to 100. Ensure this field exists.,"expect_column_to_exist(column=""threat_score""),expect_column_values_to_be_of_type(column=""threat_score"", type_=""int""),expect_column_values_to_be_between(column=""threat_score"", min_value=0, max_value=100)","expect_column_to_exist(column=""threat_score""),expect_column_values_to_be_of_type(column=""threat_score"", type_=""int""),expect_column_values_to_be_between(column=""threat_score"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Validate that the `result_value` column follows a uniform distribution with a p-value greater than 0.05 in the Chi-Square test.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""result_value"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""result_value"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For the `shipment_date` field: Ensure this field is of type 'date'. Verify that there are no missing values.,"expect_column_values_to_be_of_type(column=""shipment_date"", type_=""date""),expect_column_values_to_not_be_null(column=""shipment_date"")","expect_column_values_to_be_of_type(column=""shipment_date"", type_=""date""),expect_column_values_to_not_be_null(column=""shipment_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `humidity` column has standard deviation values that fall within the range of 5 to 15.,"expect_column_stdev_to_be_between(column=""humidity"", min_value=5, max_value=15)","expect_column_stdev_to_be_between(column=""humidity"", min_value=5, max_value=15)İTESİ",0.9333333333333333,0.9285714285714286,0.9333333333333333,96.60520303055019
Ensure the average `rating` in the `content_reviews` column is between 3.0 and 5.0.,"expect_column_mean_to_be_between(column=""content_reviews"", min_value=3.0, max_value=5.0)","expect_column_mean_to_be_between(column=""content_reviews"", min_value=3.0, max_value=5.0)",1.0,1.0,1.0,100.00000000000004
For table 'weather_alerts': Ensure the number of rows is equal to the number of alerts issued this month. Validate that 'alert_time' follows the format '%H:%M:%S'.,"expect_table_row_count_to_equal(value=<number_of_alerts_issued_this_month>),expect_column_values_to_match_strftime_format(column=""alert_time"", strftime_format=""%H:%M:%S"")","expect_table_row_count_to_be_between(table_name=""weather_alerts"", min_value=1, max_value=month_alerts),expect_column_values_to_match_strftime_format(column=""alert_time"", strftime_format=""%H:%M:%S"")",0.7540983606557378,0.6101694915254238,0.721311475409836,65.28672844027456
Check that the `last_restocked` column contains datetime strings formatted as `'%Y-%m-%d %H:%M:%S'`.,"expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format='%Y-%m-%d %H:%M:%S')","expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,87.16066325886729
Verify that the `likes_count` column contains only non-negative integers.,"expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""likes_count"", min_value=0)",0.6153846153846153,0.5945945945945945,0.6153846153846153,24.254361539140042
Check the `stock_quantity` field to confirm that all values are non-negative integers and that the maximum value does not exceed `1000`.,"expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int"")","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
"Ensure the `post_status` column contains only distinct values matching `['published', 'draft', 'pending']`.","expect_column_distinct_values_to_equal_set(column=""post_status"", value_set=['published', 'draft', 'pending'])","expect_column_values_to_be_in_set(column=""post_status"", value_set=['published', 'draft', 'pending'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For field 'case_id': Ensure all values are unique. Ensure the field matches the type 'text'. Ensure there are no missing values.,"expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text""),expect_column_values_to_not_be_null(column=""case_id"")","expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text""),expect_column_values_to_not_be_null(column=""case_id"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `transaction_type` in the banking dataset matches any of the types defined in the `allowed_transaction_types` JSON array.,"expect_column_values_to_be_in_set(column=""transaction_type"", value_set=allowed_transaction_types)","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=allowed_transaction_types)",1.0,1.0,1.0,100.00000000000004
For the `claim_date` field: Ensure it exists and is of type 'date'. Validate that all dates are not in the future.,"expect_column_to_exist(column=""claim_date""),expect_column_values_to_be_of_type(column=""claim_date"", type_=""date""),expect_column_values_to_be_between(column=""claim_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_to_exist(column=""claim_date""),expect_column_values_to_be_of_type(column=""claim_date"", type_=""date""),expect_column_values_to_be_less_than(column=""claim_date"", value=""today"")",0.823529411764706,0.7575757575757577,0.823529411764706,73.77672735275944
For fields `author_id` and `post_id`: Ensure the combination of these columns is unique across the dataset.,"expect_compound_columns_to_be_unique(column_A=""author_id"", column_B=""post_id"")","expect_compound_columns_to_be_unique(column_A=""author_id"", column_B=""post_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `post_category` column contains only distinct values matching `['News', 'Entertainment', 'Education']`.","expect_column_distinct_values_to_equal_set(column=""post_category"", value_set=[""News"", ""Entertainment"", ""Education""])","expect_column_distinct_values_to_equal_set(column=""post_category"", value_set=['News', 'Entertainment', 'Education'])",1.0,1.0,1.0,68.69938387430254
Validate that the `source_ip` field contains valid IP addresses and that the `destination_ip` field adheres to the same validation rules.,"expect_column_values_to_match_regex(column=""source_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_match_regex(column=""destination_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_match_regex(column=""source_ip"", regex=r""^(?:\d{1,3}\.){3}\d{1,3}$""),expect_column_values_to_match_regex(column=""destination_ip"", regex=r""^(?:\d{1,3}\.){3}\d{1,3}$"")",0.8421052631578948,0.7297297297297296,0.8421052631578948,74.75672592803814
"For field `email`: Ensure the field matches the type 'text'. Ensure all email addresses are valid and unique, with no missing values.","expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_be_unique(column=""email""),expect_column_values_to_not_be_null(column=""email"")",0.8115942028985507,0.8059701492537313,0.7246376811594203,48.12620842420293
"Verify that the `transaction_amount` values are above 0 and below 1,000,000 for all records.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=1000000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `order_status` column contains only values from the list ['pending', 'shipped', 'delivered', 'canceled'].","expect_column_values_to_be_in_set(column=""order_status"", value_set=['pending', 'shipped', 'delivered', 'canceled'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['pending','shipped', 'delivered', 'canceled'])",1.0,1.0,1.0,100.00000000000004
Ensure the `amount` column values are positive and less than or equal to the `balance` column for all users.,"expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=None),expect_column_pair_values_A_to_be_less_than_B(column_A=""amount"", column_B=""balance"")","expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=balance),expect_column_values_to_be_decreasing(column=""amount"")",0.8076923076923077,0.56,0.7692307692307692,56.81767675541581
Ensure the `email` column contains unique entries and follows the standard email format with no null values.,"expect_column_values_to_be_unique(column=""email""),expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_null(column=""email"")",0.9836065573770492,0.9491525423728815,0.6885245901639343,93.53868180003116
"For field 'email': Ensure this field is required (not null). Ensure the field matches the type 'text'. Ensure values conform to the pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.","expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
Validate that the `listing_date` column values are formatted as 'YYYY-MM-DD' and fall within the last five years.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""listing_date"", min_value=""2018-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""listing_date"", min_value=""2022-10-01"", max_value=""2024-01-01"")",0.8823529411764706,0.8484848484848486,0.8529411764705882,89.37284762436462
Ensure the `incident_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")","expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")",1.0,1.0,1.0,100.00000000000004
For field `citizen_id`: Ensure the field is required (not null). Ensure values in `citizen_id` are unique across the dataset.,"expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id"")","expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id"")ávající",0.9500000000000001,0.9473684210526316,0.9500000000000001,97.64540896763108
For the `match_date` field: Ensure it is of type 'date'. Verify that values are not in the past.,"expect_column_values_to_be_of_type(column=""match_date"", type_=""date""),expect_column_values_to_be_in_set(column=""match_date"", value_set=[date.today()])","expect_column_values_to_be_of_type(column=""match_date"", type_=""date""),expect_column_values_to_be_in_set(column=""match_date"", value_set=[value for value in values if value > datetime.now()])",0.8135593220338984,0.8070175438596492,0.8135593220338984,82.55356214653528
For the `player_id` column: Ensure values are unique and required (not null). Validate the field matches the type 'integer'.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""int"")","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Verify that the sum of `deductibles` and `co-pays` does not exceed the `maximum_out_of_pocket` limit for each record.,"expect_multicolumn_sum_to_equal(column_list=[""deductibles"", ""co-pays""], target_column=""maximum_out_of_pocket"")","expect_column_values_to_be_less_than(column=""sum_of_deductibles_and_co_pays"", value=maximum_out_of_pocket)",0.6857142857142857,0.2424242424242424,0.5714285714285714,26.995126114817776
Check the `game_date` column to confirm all dates fall within the current season's schedule and are formatted as YYYY-MM-DD.,"expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""game_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date"")  # Note: Expect column values to be in YYYY-MM-DD format, which is not the actual parsing format expected by the dateutil package, so this will only ensure that the column values are in the expected format, but it will not perform any additional parsing of the values.",0.4672897196261682,0.4,0.4672897196261682,48.03658190665096
Check that the `weather_station_id` column contains unique identifiers for each weather station.,"expect_column_values_to_be_unique(column=""weather_station_id"")","expect_column_values_to_be_unique(column=""weather_station_id"")",1.0,1.0,1.0,100.00000000000004
For the `listing_price` field: Ensure the field is required (not null). Ensure all prices are greater than zero and within the range of 50000 to 10000000.,"expect_column_values_to_not_be_null(column=""listing_price""),expect_column_values_to_be_between(column=""listing_price"", min_value=50000, max_value=10000000)","expect_column_values_to_not_be_null(column=""listing_price""),expect_column_values_to_be_between(column=""listing_price"", min_value=50000, max_value=10000000)",1.0,1.0,1.0,100.00000000000004
Validate that all entries in the `sent_at` column of the `emails` table are valid datetime strings matching the format '%Y-%m-%d %H:%M:%S'.,"expect_column_to_exist(column=""sent_at""),expect_column_values_to_match_strftime_format(column=""sent_at"", strftime_format='%Y-%m-%d %H:%M:%S')","expect_column_values_to_match_strftime_format(column=""sent_at"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.8372093023255813,0.8292682926829268,0.8372093023255813,61.62197666002015
Confirm that the sum of `item_price` and `shipping_fee` equals the `total_amount` in each record of the ERP dataset.,"expect_multicolumn_sum_to_equal(column_list=[""item_price"", ""shipping_fee""], target_column=""total_amount"")","expect_multicolumn_sum_to_equal(column_A=""item_price"", column_B=""shipping_fee"", target_sum=""total_amount"")",0.8749999999999999,0.6000000000000001,0.8125,65.58116456624258
"Ensure the `status` column only contains values from the set `['Pending', 'Completed', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Completed', 'Cancelled'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Completed', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
Ensure the 'products' table has at least 50 rows and that no rows are duplicated based on 'product_id'.,"expect_table_row_count_to_be_between(table=""products"", min_value=50),expect_column_values_to_be_unique(column=""product_id"")","expect_table_row_count_to_be_between(table=""products"", min_value=50)  # Replace min_value with the desired threshold #expect_column_values_to_be_unique(column=""product_id"")  # Replace column=""product_id"" with the actual column name if it differs from ""product_id"".",0.65625,0.6129032258064516,0.65625,54.708441864563646
Verify that the `email` column contains unique values and complies with standard email formatting rules.,"expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",0.7058823529411764,0.6938775510204082,0.7058823529411764,70.6883366511716
For the `employee_id` field: Ensure all values are unique and match the type 'integer'. Validate that this field is required (not null).,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_not_be_null(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_not_be_null(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `release_date` field follows the format '%Y-%m-%d' and contains only valid dates.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")",1.0,1.0,1.0,100.00000000000004
Check that the `energy_consumed` column values are within the range of 0 to 10000 kWh.,"expect_column_values_to_be_between(column=""energy_consumed"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""energy_consumed"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Verify that the `attachment_size` column contains numeric values that do not exceed 25MB.,"expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25 * 1024 * 1024)","expect_column_values_to_be_of_type(column=""attachment_size"", type_=""float""),expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25*1024*1024)  # 25 megabytes",0.7083333333333333,0.6956521739130436,0.7083333333333333,51.09126609510123
In the `treatment_start_date` and `treatment_end_date` columns: Ensure that `treatment_end_date` is greater than `treatment_start_date`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""treatment_end_date"", column_B=""treatment_start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""treatment_end_date"", column_B=""treatment_start_date"")",1.0,1.0,1.0,100.00000000000004
For field 'candidate_name': Ensure the field matches the type 'text'. Validate that all values in (candidate_name) have a length between 5 and 50 characters. Ensure this field exists.,"expect_column_to_exist(column=""candidate_name""),expect_column_value_lengths_to_be_between(column=""candidate_name"", min_value=5, max_value=50),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text"")","expect_column_to_exist(column=""candidate_name""),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""candidate_name"", min_value=5, max_value=50)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
For the `wind_speed` and `temperature` columns: Confirm that the average wind speed is less than the temperature value for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""temperature"", column_B=""wind_speed"")","expect_column_pair_averages_to_be_greater(column_A=""wind_speed"", column_B=""temperature"")",0.8387096774193549,0.4827586206896552,0.6451612903225806,65.65021823194859
"Ensure the `game_id` column contains unique identifiers and does not allow null values, with the type 'string'.","expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""string"")","expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
For the `district_number`: Ensure values are integers and within the range of 1 to 100.,"expect_column_values_to_be_of_type(column=""district_number"", type_=""int""),expect_column_values_to_be_between(column=""district_number"", min_value=1, max_value=100)","expect_column_values_to_be_of_type(column=""district_number"", type_=""int""),expect_column_values_to_be_between(column=""district_number"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'consumption_value': Ensure the field matches the type 'decimal'. Validate that 'consumption_value' values are greater than or equal to 0.,"expect_column_values_to_be_of_type(column=""consumption_value"", type_=""decimal""),expect_column_values_to_be_between(column=""consumption_value"", min_value=0)","expect_column_values_to_be_of_type(column=""consumption_value"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""consumption_value"", value=0)",0.9166666666666666,0.8260869565217391,0.9166666666666666,89.21204364132208
For field 'timestamp': Ensure all entries conform to the format 'YYYY-MM-DD HH:MM:SS'. Ensure this field is parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Ensure the `enrollment_count` column contains values that are greater than or equal to the `minimum_enrollment` column for each course.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""enrollment_count"", column_B=""minimum_enrollment"")","expect_column_pair_values_A_to_be_greater_than_or_equal_to_B(column_A=""enrollment_count"", column_B=""minimum_enrollment"")",0.923076923076923,0.8648648648648648,0.923076923076923,84.74727103919123
Verify that the `feedback` column exists and contains text entries that are not null. Ensure that feedback is relevant to the associated `course_code`.,"expect_column_to_exist(column=""feedback""),expect_column_values_to_not_be_null(column=""feedback""),expect_column_values_to_be_of_type(column=""feedback"", type_=""text"")","expect_column_to_exist(column=""feedback""),expect_column_values_to_not_be_null(column=""feedback""),expect_column_values_to_match_regex(column=""feedback"", regex=r"".*"")  # This assumes the feedback contains some text, you can adapt the regex as needed.",0.676923076923077,0.6031746031746031,0.676923076923077,63.94142416541969
"For the `post_content` column, validate that no entries exceed 280 characters and that no posts are empty.","expect_column_value_lengths_to_be_between(column=""post_content"", min_value=1, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")","expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")",0.9615384615384616,0.92,0.9615384615384616,95.42978616972013
For `battery_level`: Ensure values are within the range of 0 to 100%. Validate that there are no missing values in this column.,"expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""battery_level"")","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""battery_level"")",1.0,1.0,1.0,100.00000000000004
In the `user_feedback` column: Validate that all entries are valid JSON objects adhering to the defined schema. Ensure no null values exist.,"expect_column_values_to_be_json_parseable(column=""user_feedback""),expect_column_values_to_not_be_null(column=""user_feedback"")","expect_column_values_to_be_json_parseable(column=""user_feedback""),expect_column_values_to_match_json_schema(column=""user_feedback""),expect_column_values_to_not_be_null(column=""user_feedback"")",0.8,0.7916666666666666,0.8,65.40116464173457
For file 'users.json': Ensure the file exists. Ensure the JSON structure has valid table headers and contains no more than 1000 entries.,"expect_file_to_exist(file_path=""users.json""),expect_file_to_have_valid_table_header(file_path=""users.json""),expect_file_line_regex_match_count_to_be_between(file_path=""users.json"", min_value=0, max_value=1000)","expect_file_to_exist(file=""users.json""),expect_table_row_count_to_be_between(1, 1001),expect_table_header_to_match_json_schema(file=""users.json"")",0.6562500000000001,0.3548387096774193,0.5,41.624367994687155
For the `date_of_birth` field: Ensure all entries are of type 'date' and that there are no missing values. Validate that all dates are before the current date.,"expect_column_values_to_be_of_type(column=""date_of_birth"", type_=""date""),expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_be_before(column=""date_of_birth"", reference_date=""current_date"")","expect_column_values_to_be_of_type(column=""date_of_birth"", type_=""date""),expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_be_less_than(column=""date_of_birth"", value=""today"")илася",0.88,0.8493150684931507,0.88,87.60305220269737
Verify that the `block_height` value is always greater than the `previous_block_height` for each transaction record.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""block_height"", column_B=""previous_block_height"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""block_height"", column_B=""previous_block_height"")",1.0,1.0,1.0,100.00000000000004
Confirm that the number of rows in the `device_logs` table is equal to the number of rows in the `devices` table.,"expect_table_row_count_to_equal_other_table(table_name=""device_logs"", other_table_name=""devices"")","expect_table_row_count_to_be_between(table=""device_logs"", min_value=devices_table_row_count)",0.625,0.3333333333333333,0.5625,48.45236139033546
Ensure the `user_id` column contains unique values and is not null.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
"For the `article_title` column, ensure that string lengths are between 10 and 150 characters, and entries do not contain any special characters.","expect_column_value_lengths_to_be_between(column=""article_title"", min_value=10, max_value=150),expect_column_values_to_not_match_regex(column=""article_title"", regex=r""[!@#$%^&*(),.?\"":{}|<>]"")","expect_column_value_lengths_to_be_between(column=""article_title"", min_value=10, max_value=150),expect_column_values_to_not_match_regex(column=""article_title"", regex=r""[^\s\w]"")",0.9655172413793104,0.9642857142857143,0.9655172413793104,72.5269272375917
For any JSON array in 'transactions': Ensure all entries are valid JSON objects and conform to the specified schema for transactions.,"expect_column_values_to_be_json_parseable(column=""transactions""),expect_column_values_to_match_json_schema(column=""transactions"", schema={""type"": ""array"", ""items"": {""type"": ""object"", ""properties"": { ... }}})  # Replace ... with the actual schema properties.","expect_column_values_to_be_json_parseable(column=""transactions""),expect_column_values_to_match_json_schema(column=""transactions"", schema={... })  # Replace '...' with your actual schema for transactions.",0.8070175438596492,0.7272727272727272,0.8070175438596492,55.20228221681236
Confirm that the `forecast_date` column contains dates formatted as 'YYYY-MM-DD' and validates against the current date for future predictions.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""forecast_date"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""forecast_date"", value_set=[today])  # Replace today with the current date if needed.",0.7666666666666666,0.7241379310344828,0.7666666666666666,68.71269141920531
"Check that the `price` column values have a mean greater than 10 and less than 500, ensuring a reasonable distribution.","expect_column_mean_to_be_between(column=""price"", min_value=10, max_value=500)","expect_column_mean_to_be_between(column=""price"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
For the `booking_date` field: Ensure all datetime strings are formatted as `%Y-%m-%d` and represent a valid date.,"expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""booking_date"")","expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""booking_date"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_date': Ensure this field exists and matches the format '%Y-%m-%d'. Validate that all dates in (transaction_date) are not more than 30 days in the past.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-09-22"", max_value=""2023-10-22"")  # Assuming today is 2023-10-22","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""transaction_date"", value_set=[(str(datetime.now() - timedelta(days=30))), (str(datetime.now())[:-7])]  # Assuming there are no transaction dates within the past 30 days.",0.627450980392157,0.5599999999999999,0.627450980392157,57.42875795650682
For field 'precipitation_mm': Ensure this field matches the type 'float'. Ensure values are within the range of 0.0 to 500.0 mm. Ensure this field exists.,"expect_column_to_exist(column=""precipitation_mm""),expect_column_values_to_be_of_type(column=""precipitation_mm"", type_=""float""),expect_column_values_to_be_between(column=""precipitation_mm"", min_value=0.0, max_value=500.0)","expect_column_to_exist(column=""precipitation_mm""),expect_column_values_to_be_of_type(column=""precipitation_mm"", type_=""float""),expect_column_values_to_be_between(column=""precipitation_mm"", min_value=0.0, max_value=500.0)",1.0,1.0,1.0,100.00000000000004
Confirm that the `sale_date` column adheres to the format `YYYY-MM-DD` and contains no invalid dates.,"expect_column_values_to_match_strftime_format(column=""sale_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""sale_date"")","expect_column_values_to_match_strftime_format(column=""sale_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""sale_date"")",1.0,1.0,1.0,100.00000000000004
Check that the `rating` column values fall within the range of 1 to 10 and ensure no null values are present.,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")ılmaktadır",0.9583333333333334,0.9565217391304348,0.9583333333333334,98.01882078613905
For field 'game_title': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values are unique and do not exceed 150 characters.,"expect_column_values_to_not_be_null(column=""game_title""),expect_column_values_to_be_of_type(column=""game_title"", type_=""text""),expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=150)","expect_column_values_to_not_be_null(column=""game_title""),expect_column_values_to_be_of_type(column=""game_title"", type_=""text""),expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=0, max_value=150)",0.9787234042553191,0.9565217391304348,0.9787234042553191,97.63538529329718
"Verify that the `property_type` column contains only values from the set ['Apartment', 'House', 'Condo', 'Townhouse']. Ensure this field exists.","expect_column_to_exist(column=""property_type""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo', 'Townhouse'])","expect_column_to_exist(column=""property_type""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo', 'Townhouse'])",1.0,1.0,1.0,100.00000000000004
"For the `test_results` column, ensure that the Kullback-Leibler divergence from expected distributions is below 0.05.","expect_column_kl_divergence_to_be_less_than(column=""test_results"", threshold=0.05)","expect_column_kl_divergence_to_be_less_than(column=""test_results"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `forecast_accuracy` column contains values representing percentages between 0 and 100.,"expect_column_values_to_be_between(column=""forecast_accuracy"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""forecast_accuracy"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For the `quantity_ordered` and `inventory_available` fields, ensure that `quantity_ordered` is less than or equal to `inventory_available`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""quantity_ordered"", column_B=""inventory_available"")","expect_column_pair_values_A_to_be_greater_than_or_equal_to_B(column_A=""quantity_ordered"", column_B=""inventory_available"")",0.923076923076923,0.8648648648648648,0.923076923076923,84.74727103919123
"For field 'product_code': Ensure the field matches the type 'text'. Validate that values in (product_code) do not match any patterns from the list ['^TEST.*$', '^DEMO.*$']. Ensure this field exists.","expect_column_to_exist(column=""product_code""),expect_column_values_to_be_of_type(column=""product_code"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""product_code"", regex_list=['^TEST.*$', '^DEMO.*$'])","expect_column_to_exist(column=""product_code""),expect_column_values_to_be_of_type(column=""product_code"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""product_code"", regex_list=['^TEST.*$', '^DEMO.*$'])",1.0,1.0,1.0,100.00000000000004
For field 'total_amount': Ensure the field matches the type 'float'. Validate that all values in (total_amount) are greater than zero.,"expect_column_values_to_be_of_type(column=""total_amount"", type_=""float""),expect_column_values_to_be_greater_than(column=""total_amount"", value=0)","expect_column_values_to_be_of_type(column=""total_amount"", type_=""float""),expect_column_values_to_be_between(column=""total_amount"", min_value=0, max_value=None)",0.8627450980392156,0.7755102040816326,0.8627450980392156,79.07202028669319
For the `discount` column: Ensure that values do not exceed 100% and are of type 'decimal'. Check for any missing values.,"expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""discount"", type_=""decimal""),expect_column_values_to_not_be_null(column=""discount"")","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""discount"", type_=""decimal""),expect_column_values_to_not_be_null(column=""discount"")",1.0,1.0,1.0,100.00000000000004
"For the `cryptocurrency` column, ensure all entries belong to the set `['Bitcoin', 'Ethereum', 'Litecoin']`.","expect_column_values_to_be_in_set(column=""cryptocurrency"", value_set=['Bitcoin', 'Ethereum', 'Litecoin'])","expect_column_values_to_be_in_set(column=""cryptocurrency"", value_set=['Bitcoin', 'Ethereum', 'Litecoin'])",1.0,1.0,1.0,100.00000000000004
Validate that the `agent_id` field contains distinct values that correspond to existing agents in the `agents` table.,"expect_column_values_to_be_in_set(column=""agent_id"", value_set=agents_table_distinct_ids)","expect_column_values_to_be_unique(column=""agent_id""),expect_select_column_values_to_match_set(column=""agent_id"", value_set=existing_agents_table_ids)  # Replace existing_agents_table_ids with the actual existing ids for the agent table.",0.509090909090909,0.3773584905660377,0.509090909090909,35.32652798180479
Validate that the `location_data` column contains valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""location_data"", schema={})","expect_column_values_to_be_json_parseable(column=""location_data"")  # Validate that the column values can be parsed as JSON.",0.5161290322580645,0.3448275862068966,0.5161290322580645,43.96906195472232
Check that the `quantity_ordered` column has no missing values and is of type 'integer' greater than zero.,"expect_column_values_to_not_be_null(column=""quantity_ordered""),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int""),expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=None)","expect_column_values_to_not_be_null(column=""quantity_ordered""),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""integer""),expect_column_values_to_be_greater_than(column=""quantity_ordered"", value=0)",0.8450704225352113,0.7536231884057971,0.8450704225352113,80.828209077464
Verify that the `json_data` column contains no more than 100 characters per entry to maintain consistency in data size.,"expect_column_value_lengths_to_be_between(column=""json_data"", min_value=0, max_value=100)","expect_column_value_lengths_to_be_between(column=""json_data"", max_value=100)",0.896551724137931,0.8148148148148148,0.896551724137931,78.2754402172411
Check that the `customer_rating` column contains integer values between 1 and 5.,"expect_column_values_to_be_between(column=""customer_rating"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""customer_rating"", type_=""int"")","expect_column_values_to_be_between(column=""customer_rating"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""customer_rating"", type_=""int"")ávající",0.9642857142857143,0.962962962962963,0.9642857142857143,98.37344161747833
Verify the `billing_date` column matches the `'%d-%m-%Y'` format and contains no future dates.,"expect_column_values_to_match_strftime_format(column=""billing_date"", strftime_format='%d-%m-%Y'),expect_column_values_to_be_between(column=""billing_date"", min_value=""2000-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""billing_date"", strftime_format='%d-%m-%Y'),expect_column_values_to_be_in_set(column=""billing_date"", value_set=['future_dates'])  # Replace this with the expected future date if you require  ##",0.676056338028169,0.6086956521739131,0.676056338028169,66.3652978265255
Verify that the `installation_date` values are not null and fall within the range of '2000-01-01' to '2023-12-31'.,"expect_column_values_to_not_be_null(column=""installation_date""),expect_column_values_to_be_between(column=""installation_date"", min_value='2000-01-01', max_value='2023-12-31')","expect_column_values_to_not_be_null(column=""installation_date""),expect_column_values_to_be_between(column=""installation_date"", min_value=""2000-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,79.4447832804048
For field 'forecast_date': Ensure the field is required (not null). Ensure the field matches the type 'date'.,"expect_column_values_to_not_be_null(column=""forecast_date""),expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date"")","expect_column_values_to_not_be_null(column=""forecast_date""),expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date"")",1.0,1.0,1.0,100.00000000000004
For field 'timestamp': Ensure the field is of type 'datetime'. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_not_be_null(column=""timestamp"")","expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_not_be_null(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Ensure the `meter_id` column exists and contains unique identifiers for each utility meter.,"expect_column_to_exist(column=""meter_id""),expect_column_values_to_be_unique(column=""meter_id"")","expect_column_to_exist(column=""meter_id""),expect_column_values_to_be_unique(column=""meter_id"")",1.0,1.0,1.0,100.00000000000004
For field 'gas_fee': Validate that the field is a numeric type. Ensure values in (gas_fee) are greater than 0 and less than 10. Ensure this field exists.,"expect_column_to_exist(column=""gas_fee""),expect_column_values_to_be_of_type(column=""gas_fee"", type_=""float""),expect_column_values_to_be_between(column=""gas_fee"", min_value=0, max_value=10)","expect_column_to_exist(column=""gas_fee""),expect_column_values_to_be_of_type(column=""gas_fee"", type_=""float""),expect_column_values_to_be_between(column=""gas_fee"", min_value=1, max_value=10),expect_column_mean_to_be_between(column=""gas_fee"", min_value=1, max_value=10)ыџN",0.7857142857142857,0.7560975609756098,0.7857142857142857,67.23804388026704
Check that the `fraud_score` field is numeric and falls within the range of 0 to 100.,"expect_column_values_to_be_of_type(column=""fraud_score"", type_=""numeric""),expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""fraud_score"", type_=""float""),expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.81282631934458
"Verify that the `order_status` column contains valid entries from the set `['pending', 'shipped', 'delivered', 'returned']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=['pending', 'shipped', 'delivered', 'returned'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['pending','shipped', 'delivered','returned'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `shipment_data.xlsx` file exists and validates each line against the defined schema requirements.,"expect_file_to_exist(file_path=""shipment_data.xlsx""),expect_file_to_have_valid_table_header(file_path=""shipment_data.xlsx""),expect_file_to_be_valid_json(file_path=""shipment_data.xlsx"")  # Note: Adjust for actual schema validation as needed.","expect_file_to_exist(file_path=""shipment_data.xlsx""),expect_file_line_regex_match_count_to_equal(file_path=""shipment_data.xlsx"", regex=r"".*"")  # To validate all lines, expect a regular expression with the pattern "".*""  # That would match any character, assuming a newline character \n is being used as line separator.",0.4835164835164835,0.3146067415730337,0.4395604395604396,42.10477920907475
"For fields `start_time`, `end_time`, and `duration`: Ensure that `duration` equals the difference between `end_time` and `start_time`.","expect_column_pair_values_to_be_equal(column_A=""duration"", column_B=""end_time"", column_B2=""start_time"")","expect_column_pair_values_to_be_equal(column_A=""duration"", column_B=""end_time"" - ""start_time"")",0.9411764705882353,0.8749999999999999,0.9411764705882353,83.70129464312784
"Check that the `request_status` field contains only values from the set ['Pending', 'Approved', 'Rejected'] and that `review_date` is always after `request_date`.","expect_column_values_to_be_in_set(column=""request_status"", value_set=[""Pending"", ""Approved"", ""Rejected""]),expect_column_pair_values_A_to_be_greater_than_B(column_A=""review_date"", column_B=""request_date"")","expect_column_values_to_be_in_set(column=""request_status"", value_set=['Pending', 'Approved', 'Rejected']),expect_column_pair_values_A_to_be_greater_than_B(column_A=""review_date"", column_B=""request_date"")",1.0,1.0,1.0,84.7053197504175
"Ensure that the `alert_type` values are not part of the set `['Info', 'Debug']`. Ensure this field is required (not null).","expect_column_values_to_not_be_in_set(column=""alert_type"", value_set=[""Info"", ""Debug""]),expect_column_values_to_not_be_null(column=""alert_type"")","expect_column_values_to_not_be_in_set(column=""alert_type"", value_set=['Info', 'Debug']),expect_column_values_to_not_be_null(column=""alert_type"")",1.0,1.0,1.0,85.99291677993469
Verify that the `product_price` values are non-negative and fall within the range of 0.00 to 5000.00.,"expect_column_values_to_be_between(column=""product_price"", min_value=0.00, max_value=5000.00)","expect_column_values_to_be_between(column=""product_price"", min_value=0.0, max_value=5000.0)",0.8823529411764706,0.8125,0.8823529411764706,85.70980059247852
"For the `contact_number` column, validate that all values are numeric and exactly `10` digits long.","expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\d{10}$"")","expect_column_values_to_be_of_type(column=""contact_number"", type_=""int""),expect_column_value_lengths_to_equal(column=""contact_number"", length=10)",0.4444444444444444,0.29411764705882354,0.4444444444444444,28.855936708430715
Check that the `fouls` column contains integer values that do not exceed `50`.,"expect_column_values_to_be_of_type(column=""fouls"", type_=""int""),expect_column_values_to_be_between(column=""fouls"", min_value=0, max_value=50)","expect_column_values_to_be_of_type(column=""fouls"", type_=""int""),expect_column_values_to_be_between(column=""fouls"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
"For the `prescription` field, ensure that the length of string values does not exceed 255 characters.","expect_column_value_lengths_to_be_between(column=""prescription"", min_value=0, max_value=255)","expect_column_value_lengths_to_be_between(column=""prescription"", min_value=1, max_value=255)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
For field 'medication_dosage': Ensure the values adhere to the specified range of dosages (0-1000 mg). Ensure this field exists.,"expect_column_to_exist(column=""medication_dosage""),expect_column_values_to_be_between(column=""medication_dosage"", min_value=0, max_value=1000)","expect_column_to_exist(column=""medication_dosage""),expect_column_values_to_be_between(column=""medication_dosage"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"In the `email` field, ensure that all entries are valid email addresses and do not exceed 255 characters in length.","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=255)","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=255)",0.7692307692307693,0.7301587301587301,0.7692307692307693,75.49492022686553
"Validate that the `order_id` column is unique, non-null, and of type `string`. Ensure each entry is properly formatted.","expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""string""),expect_column_values_to_match_regex(column=""order_id"", regex=r""^[A-Za-z0-9_-]+$"")","expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""string"")",0.8051948051948052,0.8,0.8051948051948052,60.23905348209647
Ensure that the `driver_license` column contains only string values of length 15 that match the regex pattern `^[A-Z0-9]*$`.,"expect_column_values_to_be_of_type(column=""driver_license"", type_=""str""),expect_column_value_lengths_to_equal(column=""driver_license"", length=15),expect_column_values_to_match_regex(column=""driver_license"", regex=r""^[A-Z0-9]*$"")","expect_column_values_to_be_of_type(column=""driver_license"", type_=""text""),expect_column_value_lengths_to_equal(column=""driver_license"", length=15),expect_column_values_to_match_regex(column=""driver_license"", regex=r""^[A-Z0-9]*$"")",0.972972972972973,0.9444444444444444,0.972972972972973,97.11715909771402
For the `election_date` column: Ensure all dates are within the range of '2020-01-01' to '2024-12-31'. Ensure this field exists.,"expect_column_to_exist(column=""election_date""),expect_column_values_to_be_between(column=""election_date"", min_value=""2020-01-01"", max_value=""2024-12-31"")","expect_column_to_exist(column=""election_date""),expect_column_values_to_be_between(column=""election_date"", min_value=""2020-01-01"", max_value=""2024-12-31"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `incident_id` is unique and consists of alphanumeric characters only, matching the regex pattern `^[a-zA-Z0-9]+$`.","expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_match_regex(column=""incident_id"", regex=r""^[a-zA-Z0-9]+$"")","expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_match_regex(column=""incident_id"", regex=r""^[a-zA-Z0-9]+$"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `supplier_info` column contains valid JSON objects that match the defined JSON schema.,"expect_column_values_to_match_json_schema(column=""supplier_info"")","expect_column_values_to_be_json_parseable(column=""supplier_info""),expect_column_values_to_match_json_schema(column=""supplier_info"", schema={...})  # replace with your defined JSON schema",0.5405405405405406,0.5142857142857142,0.5405405405405406,34.996923261511874
"Verify that the `order_status` field contains only distinct values from the set `['Pending', 'Shipped', 'Delivered']`.","expect_column_distinct_values_to_equal_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For table `sales`: Ensure the number of rows is equal to the total number of sales transactions recorded.,"expect_table_row_count_to_equal(column=""sales"", value=<total_number_of_sales_transactions>)","expect_table_row_count_to_equal(table=""sales"", row_count=total_sales_transctions_recorded)",0.6428571428571429,0.38461538461538464,0.6428571428571429,53.29912522024028
For the 'quantity' field: Ensure the field exists and matches the type 'integer'. Validate that all values are greater than zero and do not exceed 1000.,"expect_column_to_exist(column=""quantity""),expect_column_values_to_be_of_type(column=""quantity"", type_=""integer""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)","expect_column_to_exist(column=""quantity""),expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=0, max_value=1000)",0.9354838709677419,0.8666666666666667,0.9354838709677419,92.89987733901376
"For the `vehicle` table, ensure the `vehicle_id` column exists and all values are unique.","expect_column_to_exist(column=""vehicle_id""),expect_column_values_to_be_unique(column=""vehicle_id"")","expect_column_to_exist(column=""vehicle_id""),expect_column_values_to_be_unique(column=""vehicle_id"")",1.0,1.0,1.0,100.00000000000004
For field 'origin_location': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""origin_location""),expect_column_values_to_not_be_null(column=""origin_location""),expect_column_values_to_be_of_type(column=""origin_location"", type_=""text"")","expect_column_to_exist(column=""origin_location""),expect_column_values_to_not_be_null(column=""origin_location""),expect_column_values_to_be_of_type(column=""origin_location"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Ensure the `price` column contains values that are greater than or equal to 0.,"expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
For field 'customer_email': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that all email addresses conform to the standard email format.,"expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",0.8148148148148148,0.810126582278481,0.8148148148148148,80.50960762727031
Validate that the `appointment_date` column adheres to the format 'YYYY-MM-DD'. Ensure all values can be parsed into valid datetime objects.,"expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date"")","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `sensor_reading_timestamp` column matches the strftime format '%Y-%m-%d %H:%M:%S' and all values can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""sensor_reading_timestamp"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""sensor_reading_timestamp"")","expect_column_values_to_match_strftime_format(column=""sensor_reading_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sensor_reading_timestamp"")",1.0,1.0,1.0,91.12141177075955
Verify that the `wind_speed` field contains no null values and is represented as positive numeric values.,"expect_column_values_to_not_be_null(column=""wind_speed""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0)","expect_column_values_to_not_be_null(column=""wind_speed""),expect_column_values_to_be_greater_than(column=""wind_speed"", value=0)",0.9090909090909091,0.8095238095238095,0.9090909090909091,87.57572785115993
"Ensure that the combined values of `length`, `width`, and `height` columns result in unique product identifiers across records.","expect_compound_columns_to_be_unique(column_list=[""length"", ""width"", ""height""])","expect_compound_columns_to_be_unique(columns=['length', 'width', 'height'])",0.9523809523809523,0.8421052631578948,0.9523809523809523,40.9103252718704
For field 'customer_id': Ensure this field exists. Validate that the length of string values is exactly 10 characters.,"expect_column_to_exist(column=""customer_id""),expect_column_value_lengths_to_equal(column=""customer_id"", length=10)","expect_column_to_exist(column=""customer_id""),expect_column_value_lengths_to_equal(column=""customer_id"", value=10)",0.9444444444444444,0.8823529411764706,0.9444444444444444,93.53695731020622
"Verify that `property_id` in Real Estate Management corresponds to a unique entry in the `transactions` dataset, ensuring data integrity.","expect_column_values_to_be_unique(column=""property_id"")","expect_column_values_to_be_in_set(column=""property_id"", value_set=transactions_data)",0.6956521739130435,0.5714285714285714,0.6956521739130435,52.78802993496619
Check that all `sent_time` values in the `email_logs` column match the datetime format '%Y-%m-%d %H:%M:%S' and are valid.,"expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `sku` column values do not contain any special characters and are exactly 8 characters long.,"expect_column_value_lengths_to_equal(column=""sku"", value=8),expect_column_values_to_not_match_regex(column=""sku"", regex=r""[^a-zA-Z0-9]"")","expect_column_value_lengths_to_equal(column=""sku"", value=8),expect_column_values_to_match_regex(column=""sku"", regex=r""[a-zA-Z0-9]+$"")",0.9795918367346939,0.9361702127659574,0.9795918367346939,87.61168424153479
Ensure the `shipment_id` column contains unique string values that conform to the pattern `^[A-Z0-9]{10}$`.,"expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_match_regex(column=""shipment_id"", regex=r""^[A-Z0-9]{10}$"")","expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_match_regex(column=""shipment_id"", regex=r""^[A-Z0-9]{10}$"")",1.0,1.0,1.0,100.00000000000004
Validate that the `user_email` column in the `users` table contains only unique values and matches the standard email format.,"expect_column_values_to_be_unique(column=""user_email""),expect_column_values_to_match_regex(column=""user_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_unique(column=""user_email""),expect_column_values_to_match_regex(column=""user_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `humidity` values have a mean greater than 30% and less than 90%.,"expect_column_mean_to_be_between(column=""humidity"", min_value=30, max_value=90)","expect_column_mean_to_be_between(column=""humidity"", min_value=30, max_value=90)",1.0,1.0,1.0,100.00000000000004
For the `delivery_date` field: Validate that all entries conform to the datetime format 'YYYY-MM-DD' and are not in the future.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""delivery_date"", value_set=[date for date in [delivery_date] if date <= datetime.now().date()])",0.6500000000000001,0.5641025641025641,0.6500000000000001,56.19463388865522
"Verify that the `transaction_type` column contains only values from the set `['Deposit', 'Withdrawal', 'Transfer']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])",1.0,1.0,1.0,100.00000000000004
"For field 'status_code': Ensure the field contains only distinct values matching the set ['Success', 'Failure']. Ensure this field exists.","expect_column_to_exist(column=""status_code""),expect_column_distinct_values_to_equal_set(column=""status_code"", value_set=[""Success"", ""Failure""])","expect_column_to_exist(column=""status_code""),expect_column_values_to_be_in_set(column=""status_code"", value_set=[""Success"", ""Failure""])",0.9047619047619048,0.8000000000000002,0.9047619047619048,90.07690507972515
For the `employee_id` field: Ensure all values are unique and not null. Ensure this field matches the type 'integer'.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""integer"")",1.0,1.0,1.0,100.00000000000004
"For table 'transactions': Ensure the columns match the specified set {'transaction_id', 'user_id', 'amount', 'date'} in that order.","expect_table_columns_to_match_ordered_list(column_list=[""transaction_id"", ""user_id"", ""amount"", ""date""])","expect_table_columns_to_match_ordered_list_of_set(column_set=({'transaction_id', 'user_id', 'amount', 'date'}, 1), ordered=True)",0.8,0.6666666666666667,0.8,33.000514406469804
For field 'restock_date': Ensure the field matches the type 'datetime'. Validate that all values match the format 'YYYY-MM-DD' and are in the future. Ensure this field exists.,"expect_column_to_exist(column=""restock_date""),expect_column_values_to_be_of_type(column=""restock_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""restock_date"")","expect_column_to_exist(column=""restock_date""),expect_column_values_to_be_of_type(column=""restock_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_greater_than(column=""restock_date"", value=""1900-01-01"")",0.923076923076923,0.898876404494382,0.923076923076923,86.7559137594175
"For field 'priority_level': Ensure values are from the specified set ['Low', 'Medium', 'High']. Ensure this field exists.","expect_column_to_exist(column=""priority_level""),expect_column_values_to_be_in_set(column=""priority_level"", value_set=['Low', 'Medium', 'High'])","expect_column_to_exist(column=""priority_level""),expect_column_values_to_be_in_set(column=""priority_level"", value_set=[""Low"", ""Medium"", ""High""])",1.0,1.0,1.0,78.70039865008152
"Verify that the `room_type` column contains only values from the set `['Single', 'Double', 'Suite']`.","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `student_id` column contains unique identifiers, with no duplicates or missing values.","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")",1.0,1.0,1.0,100.00000000000004
"Confirm that the `reservation_status` column contains only the values from the set `['Confirmed', 'Cancelled', 'Pending']`.","expect_column_values_to_be_in_set(column=""reservation_status"", value_set=['Confirmed', 'Cancelled', 'Pending'])","expect_column_values_to_be_in_set(column=""reservation_status"", value_set=['Confirmed', 'Cancelled', 'Pending'])",1.0,1.0,1.0,100.00000000000004
For field `product_id`: Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure each `product_id` is unique.,"expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_be_unique(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'phone_number': Ensure this field is required (not null). Ensure the field matches the type 'text'. Ensure values conform to the pattern '^\\+?[0-9]{10,15}$'.","expect_column_values_to_not_be_null(column=""phone_number""),expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r'^\+?[0-9]{10,15}$')","expect_column_values_to_not_be_null(column=""phone_number""),expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\\+?[0-9]{10,15}$"")",1.0,1.0,1.0,92.57084389606158
For field 'feedback_comments': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 500. Ensure this field exists.,"expect_column_to_exist(column=""feedback_comments""),expect_column_value_lengths_to_be_between(column=""feedback_comments"", min_value=0, max_value=500),expect_column_values_to_be_of_type(column=""feedback_comments"", type_=""text"")","expect_column_to_exist(column=""feedback_comments""),expect_column_values_to_be_of_type(column=""feedback_comments"", type_=""text""),expect_column_value_lengths_to_be_between(column=""feedback_comments"", min_value=0, max_value=500)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
"Verify that the `inventory_report.csv` file exists, matches the specified hash value, and does not exceed a size of 5MB.","expect_file_to_exist(file_path=""inventory_report.csv""),expect_file_hash_to_equal(file_path=""inventory_report.csv"", hash_value=""SPECIFIED_HASH_VALUE""),expect_file_size_to_be_between(file_path=""inventory_report.csv"", min_value=0, max_value=5 * 1024 * 1024)","expect_file_to_exist(file_path=""inventory_report.csv""),expect_file_hash_to_match(hash_value=""file_hash_value""),expect_file_size_to_be_between(min_value=0, max_value=5 * 1024 * 1024)  # Maximum size of 5 MB",0.7901234567901234,0.6835443037974683,0.765432098765432,62.23160859183247
Ensure the `room_price` column has a median value between $50 and $300 and that no prices exceed $1000.,"expect_column_median_to_be_between(column=""room_price"", min_value=50, max_value=300),expect_column_max_to_be_between(column=""room_price"", max_value=1000)","expect_column_mean_to_be_between(column=""room_price"", min_value=50, max_value=300),expect_column_max_to_be_between(column=""room_price"", max_value=1000),expect_column_median_to_be_between(column=""room_price"", min_value=50, max_value=300)",0.782608695652174,0.7761194029850745,0.7536231884057971,63.52874675973832
"Validate that the `course_level` column contains only values from the set `['Beginner', 'Intermediate', 'Advanced']`. Ensure this field exists.","expect_column_to_exist(column=""course_level""),expect_column_values_to_be_in_set(column=""course_level"", value_set=['Beginner', 'Intermediate', 'Advanced'])","expect_column_to_exist(column=""course_level""),expect_column_values_to_be_in_set(column=""course_level"", value_set=['Beginner', 'Intermediate', 'Advanced'])",1.0,1.0,1.0,100.00000000000004
Validate that the `stock_quantity` column has a minimum value of 0 and maximum of 1000.,"expect_column_min_to_be_between(column=""stock_quantity"", min_value=0),expect_column_max_to_be_between(column=""stock_quantity"", max_value=1000)","expect_column_min_to_be_between(column=""stock_quantity"", min_value=0),expect_column_max_to_be_between(column=""stock_quantity"", max_value=1000)",1.0,1.0,1.0,100.00000000000004
For the `property_id` field: Ensure that all entries are unique and formatted as 'PROP-XXXX' where 'XXXX' is a four-digit number.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP-\d{4}$"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `enrollment_date` column entries match the format `YYYY-MM-DD` and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `performance_score` column values are between 1 and 5 and follow a normal distribution with a p-value greater than 0.05 in the KS test.,"expect_column_values_to_be_between(column=""performance_score"", min_value=1, max_value=5),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""performance_score"", threshold=0.05)","expect_column_values_to_be_between(column=""performance_score"", min_value=1, max_value=5),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""performance_score"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `status` column contains only values from the set `['Active', 'Inactive', 'Pending']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Pending'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Pending'])İTESİ",0.9333333333333333,0.9285714285714286,0.9333333333333333,96.82132340352993
"For the table 'surveys': Ensure the total row count is equal to 200. Validate that the columns ['survey_id', 'response_date', 'participant_id'] exist.","expect_table_row_count_to_equal(table=""surveys"", value=200),expect_table_columns_to_match_set(table=""surveys"", column_set=[""survey_id"", ""response_date"", ""participant_id""])","expect_table_row_count_to_equal_other_table(table=""surveys"", other_table_id=""other_table_id"", other_column_count=200)  # Other_table_id can be any unique table that stores the actual count of survey responses, or a static value, such as 200. expect_select_column_to_exist(column=""survey_id""),expect_select_column_to_exist(column=""response_date""),expect_select_column_to_exist(column=""participant_id"")",0.49462365591397855,0.24175824175824176,0.43010752688172044,26.713790030402514
"For table 'loan_applications': Ensure the columns 'application_id', 'customer_id', and 'loan_amount' exist and are in that order. Validate that the total number of rows is equal to the number of applications processed this month.","expect_table_columns_to_match_ordered_list(column_list=[""application_id"", ""customer_id"", ""loan_amount""]),expect_table_row_count_to_equal(other_table=""applications_processed_this_month"")","expect_table_columns_to_match_ordered_list(column_list=[""application_id"", ""customer_id"", ""loan_amount""]),expect_table_row_count_to_equal(expected_value=processed_applications_this_month)",0.9259259259259259,0.8076923076923077,0.8888888888888888,84.77625695404613
For the `published_date` column: Ensure all entries are in the format 'YYYY-MM-DD'. Validate the presence of this column and that all entries conform to the format.,"expect_column_to_exist(column=""published_date""),expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""published_date""),expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""published_date"")",0.8148148148148148,0.8076923076923077,0.8148148148148148,68.6985888302537
Ensure the `quantity` column values are within the range of 1 to 1000.,"expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)","expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'vehicle_id': Ensure values in 'vehicle_id' are unique and are of type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""vehicle_id""),expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_be_of_type(column=""vehicle_id"", type_=""text"")","expect_column_to_exist(column=""vehicle_id""),expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_be_of_type(column=""vehicle_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Ensure the `agent_id` column values exist in the `agents` dataset and are formatted as integers.,"expect_column_values_to_be_in_set(column=""agent_id"", value_set=agents), ,expect_column_values_to_be_of_type(column=""agent_id"", type_=""int"")","expect_column_values_to_be_in_set(column=""agent_id"", value_set=agents),expect_column_values_to_be_of_type(column=""agent_id"", type_=""int"")",1.0,1.0,1.0,96.94694425137602
For field 'notes': Ensure the field matches the type 'text'. Ensure string lengths in (notes) do not exceed 500 characters. Ensure this field exists.,"expect_column_to_exist(column=""notes""),expect_column_values_to_be_of_type(column=""notes"", type_=""text""),expect_column_value_lengths_to_be_between(column=""notes"", max_value=500)","expect_column_to_exist(column=""notes""),expect_column_values_to_be_of_type(column=""notes"", type_=""text""),expect_column_value_lengths_to_be_between(column=""notes"", min_value=0, max_value=500)",0.9508196721311475,0.9152542372881356,0.9508196721311475,90.78903360624652
For the `customer_score` column: Ensure that values fall within the range of 0 to 100 and the average score is above 70.,"expect_column_values_to_be_between(column=""customer_score"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""customer_score"", min_value=70, max_value=100)","expect_column_values_to_be_between(column=""customer_score"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""customer_score"", min_value=70)",0.9473684210526316,0.9454545454545454,0.9473684210526316,89.13907712828069
For table 'suspicious_activity': Ensure the 'activity_description' column exists. Ensure that the length of 'activity_description' does not exceed 500 characters.,"expect_column_to_exist(column=""activity_description""),expect_column_value_lengths_to_be_between(column=""activity_description"", min_value=0, max_value=500)","expect_column_to_exist(column=""activity_description""),expect_column_value_lengths_to_be_between(column=""activity_description"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
For field 'case_number': Ensure the field matches the type 'text'. Ensure the length of 'case_number' is exactly 10 characters. Ensure this field exists.,"expect_column_to_exist(column=""case_number""),expect_column_value_lengths_to_equal(column=""case_number"", length=10),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")","expect_column_to_exist(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""case_number"", length=10)",1.0,0.9655172413793104,0.7,98.89485799795925
Ensure the `quantity` column in the `orders` table is an integer greater than zero and does not exceed the `stock_level` in the `inventory` table.,"expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=None),expect_column_pair_values_A_to_be_less_than_B(column_A=""quantity"", column_B=""stock_level"")","expect_column_values_to_be_greater_than(column=""quantity"", value=1),expect_column_values_to_be_less_than(column=""quantity"", value=stock_level)",0.6461538461538461,0.4444444444444445,0.6153846153846153,29.807288966845746
For field 'transaction_amount': Ensure the field matches the type 'decimal'. Validate that values are greater than zero and not null.,"expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0)","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01)",0.9275362318840579,0.8656716417910447,0.9275362318840579,90.52628420986468
Verify that the `data_collection_time` is earlier than the `last_maintenance_time` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""data_collection_time"", column_B=""last_maintenance_time"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""last_maintenance_time"", column_B=""data_collection_time"")",1.0,0.8947368421052632,0.8000000000000002,98.7575227715182
Confirm that the `claim_date` is always earlier than or equal to the `policy_end_date`.,"expect_column_pair_values_A_to_be_less_than_or_equal_to_B(column_A=""claim_date"", column_B=""policy_end_date"")","expect_column_pair_values_A_to_be_greater_than_or_equal_to_B(column_A=""claim_date"", column_B=""policy_end_date"")",0.9545454545454546,0.9047619047619048,0.9545454545454546,94.52861848260069
"Validate that the `price` column contains numeric values within the range of 0 to 10,000, with no missing values.","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000),expect_column_values_to_not_be_null(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""float"")  # Assuming price is a float; adjust as necessary.","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000),expect_column_values_to_not_be_null(column=""price"")",0.7076923076923077,0.6984126984126985,0.7076923076923077,46.54708140240619
For field 'employee_id': Ensure the field is required (not null). Ensure all values are unique integers.,"expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Check that the `weather_conditions` column contains only values from the predefined set: ['Sunny', 'Rainy', 'Cloudy', 'Snowy'].","expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=[""Sunny"", ""Rainy"", ""Cloudy"", ""Snowy""])","expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",1.0,1.0,1.0,62.31111359606062
Ensure the `employee_id` column has distinct values and all fall within the range of 1 to 5000.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_between(column=""employee_id"", min_value=1, max_value=5000)","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_between(column=""employee_id"", min_value=1, max_value=5000)",1.0,1.0,1.0,100.00000000000004
For field `client_id`: Ensure the field matches the type 'text'. Ensure that `client_id` values must exist in the `clients` table.,"expect_column_values_to_be_of_type(column=""client_id"", type_=""text""),expect_column_values_to_be_in_set(column=""client_id"", value_set=clients_table_client_ids)","expect_column_values_to_be_of_type(column=""client_id"", type_=""text""),expect_column_values_to_be_unique(column=""client_id""),expect_column_values_to_be_in_set(column=""client_id"", value_set=clients_table_values)",0.8437499999999999,0.8064516129032259,0.8125000000000001,72.95951269222044
Validate that the `final_grade` column contains values between 0 and 100 for all records.,"expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For the `case_number` column, ensure that all entries follow the format `YYYY-XXXX` where `YYYY` is the year and `XXXX` is a four-digit number.","expect_column_values_to_match_regex(column=""case_number"", regex=r""^\d{4}-\d{4}$"")","expect_column_values_to_match_regex(column=""case_number"", regex=r""^\d{4}-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `keywords` column does not contain any SQL-like injection patterns such as `'; DROP TABLE`.,"expect_column_values_to_not_match_regex(column=""keywords"", regex=r"";\s*DROP\s*TABLE"")","expect_column_values_to_not_match_regex(column=""keywords"", regex=r""; DROP TABLE"")",0.9285714285714286,0.7692307692307692,0.9285714285714286,74.33168897580758
"Ensure the `department` column exists and its values are consistent with the predefined list `['Sales', 'HR', 'Finance', 'IT']`.","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'HR', 'Finance', 'IT'])","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'HR', 'Finance', 'IT'])",1.0,1.0,1.0,100.00000000000004
Ensure the `username` field contains only alphanumeric characters and is between `3` and `15` characters in length.,"expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9]+$"")","expect_column_values_to_match_regex(column=""username"", regex=r""^[\w]{3,15}$""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15)",0.8771929824561403,0.8727272727272727,0.5263157894736843,87.45537604367905
"Ensure the `ballot_type` field contains only values from the set ['Mail-in', 'In-person', 'Provisional']. No missing values allowed.","expect_column_values_to_be_in_set(column=""ballot_type"", value_set=['Mail-in', 'In-person', 'Provisional']),expect_column_values_to_not_be_null(column=""ballot_type"")","expect_column_values_to_be_in_set(column=""ballot_type"", value_set=['Mail-in', 'In-person', 'Provisional']),expect_column_values_to_not_be_null(column=""ballot_type"")",1.0,1.0,1.0,100.00000000000004
For columns `votes_cast` and `total_votes`: Ensure that `votes_cast` is not greater than `total_votes`.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""votes_cast"", column_B=""total_votes"")","expect_column_pair_values_A_to_be_less_than_B(column_A=""votes_cast"", column_B=""total_votes"")",1.0,1.0,1.0,100.00000000000004
For the `salary` column: Ensure it contains only numeric values. Verify that there are no missing entries and that all values are greater than zero.,"expect_column_values_to_be_of_type(column=""salary"", type_=""number""),expect_column_values_to_not_be_null(column=""salary""),expect_column_values_to_be_greater_than(column=""salary"", value=0)","expect_column_values_to_be_of_type(column=""salary"", type_=""numeric""),expect_column_values_to_not_be_null(column=""salary""),expect_column_values_to_be_greater_than(column=""salary"", value=0)",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
For field 'case_notes': Ensure this field matches the type 'text'. Ensure the field can accept null values if no notes are available.,"expect_column_values_to_be_of_type(column=""case_notes"", type_=""text""),expect_column_values_to_be_null(column=""case_notes"")","expect_column_values_to_be_of_type(column=""case_notes"", type_=""text""),expect_column_values_to_be_null(column=""case_notes"")",1.0,1.0,1.0,100.00000000000004
Ensure the `branch_code` column contains only distinct values and matches the type 'text'.,"expect_column_values_to_be_unique(column=""branch_code""),expect_column_values_to_be_of_type(column=""branch_code"", type_=""text"")","expect_column_distinct_values_to_be_equal_to_set(column=""branch_code""),expect_column_values_to_be_of_type(column=""branch_code"", type_=""text"")",0.888888888888889,0.7906976744186046,0.888888888888889,82.85668073040223
"For the `project_id` column, ensure that all values are distinct and exist in the `projects` table.","expect_column_values_to_be_unique(column=""project_id""),expect_column_values_to_be_in_set(column=""project_id"", value_set=projects_table_values)","expect_column_values_to_be_unique(column=""project_id""),expect_column_values_to_be_in_set(column=""project_id"", value_set=projects_table_project_ids)",0.9387755102040817,0.9361702127659574,0.9387755102040817,92.97019689158859
"Confirm the `sender_id` column exists in the `users` table and that all values are valid, matching existing user IDs.","expect_column_to_exist(column=""sender_id""),expect_column_values_to_be_in_set(column=""sender_id"", value_set=existing_user_ids)","expect_column_to_exist(column=""sender_id""),expect_column_values_to_be_unique(column=""sender_id""),expect_column_values_to_not_be_null(column=""sender_id"")  # To avoid invalid IDs, expect_column_values_to_not_match_regex(column=""sender_id"", regex=""^\d{8,}$""),expect_column_values_to_be_between(column=""sender_id"", min_value=""1"", max_value=""99999"")  # If it is a multi-select column, you would also want to match all values together, not each separately.",0.3434343434343434,0.2680412371134021,0.3434343434343434,21.71631786333706
"For field `energy_consumption`, ensure that values are non-null and strictly of type `float`. Verify that all entries are unique.","expect_column_values_to_not_be_null(column=""energy_consumption""),expect_column_values_to_be_of_type(column=""energy_consumption"", type_=""float""),expect_column_values_to_be_unique(column=""energy_consumption"")","expect_column_values_to_not_be_null(column=""energy_consumption""),expect_column_values_to_be_of_type(column=""energy_consumption"", type_=""float""),expect_column_values_to_be_unique(column=""energy_consumption"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `zip_code` field is of the type 'string' and matches the format `XXXXX`, where X is a digit.","expect_column_values_to_be_of_type(column=""zip_code"", type_=""string""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$"")","expect_column_values_to_be_of_type(column=""zip_code"", type_=""string""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^.{5}$"")",0.9795918367346939,0.9361702127659574,0.9795918367346939,94.27985406523739
"Ensure that the `user_age` field has a mean value greater than or equal to 18 and less than 100, with no null entries.","expect_column_mean_to_be_between(column=""user_age"", min_value=18, max_value=100),expect_column_values_to_not_be_null(column=""user_age"")","expect_column_mean_to_be_between(column=""user_age"", min_value=18, max_value=100),expect_column_values_to_not_be_null(column=""user_age"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `sensor_type` column values are from the set `['Temperature', 'Humidity', 'Pressure']`.","expect_column_values_to_be_in_set(column=""sensor_type"", value_set=['Temperature', 'Humidity', 'Pressure'])","expect_column_values_to_be_in_set(column=""sensor_type"", value_set=['Temperature', 'Humidity', 'Pressure'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `weather_condition` column values match the list `['Sunny', 'Cloudy', 'Rainy', 'Snowy']`.","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rainy', 'Snowy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rainy', 'Snowy'])",1.0,1.0,1.0,100.00000000000004
"For the `enrollment_date` field, validate that all dates conform to the format `YYYY-MM-DD` and that they fall within the range of `2010-01-01` to `2023-12-31`.","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2010-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2010-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
For the `supplier_id` field: Ensure this field is required (not null) and that all values are unique. Confirm it matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_of_type(column=""supplier_id"", type_=""integer"")","expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_of_type(column=""supplier_id"", type_=""integer"")",1.0,1.0,1.0,100.00000000000004
For field 'invoice_number': Ensure the field matches the type 'text'. Ensure values in (invoice_number) are unique across records. Ensure this field cannot be null.,"expect_column_values_to_be_of_type(column=""invoice_number"", type_=""text""),expect_column_values_to_be_unique(column=""invoice_number""),expect_column_values_to_not_be_null(column=""invoice_number"")","expect_column_values_to_be_of_type(column=""invoice_number"", type_=""text""),expect_column_values_to_be_unique(column=""invoice_number""),expect_column_values_to_not_be_null(column=""invoice_number"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `department` column contains only values from the set `['HR', 'Finance', 'IT', 'Marketing']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Marketing'])","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Marketing'])",1.0,1.0,1.0,100.00000000000004
Ensure the `alert_id` column contains only unique values and is of type 'integer'.,"expect_column_values_to_be_unique(column=""alert_id""),expect_column_values_to_be_of_type(column=""alert_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""alert_id""),expect_column_values_to_be_of_type(column=""alert_id"", type_=""int"")",0.9523809523809523,0.9500000000000001,0.9523809523809523,95.30451753349615
Validate that the `order_date` is always earlier than the `delivery_date` for all entries in the orders table.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_less_than_B(column_A=""order_date"", column_B=""delivery_date"")",0.9444444444444444,0.7647058823529412,0.8333333333333334,91.9171473512929
Verify that the `timestamp` column contains datetime strings formatted as '%Y-%m-%d %H:%M:%S' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_id` column contains only distinct values that exist in the `customers` table.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_in_set(column=""customer_id"", value_set=customers_table_customer_ids)","expect_column_distinct_values_to_match_set(column=""customer_id"", value_set=customers_table_customers)",0.65,0.5263157894736842,0.65,37.516445297036995
Ensure the `transaction_id` column contains only distinct alphanumeric values that match a specific hashing pattern.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[a-zA-Z0-9]+$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[\w]+$"")",0.888888888888889,0.8837209302325583,0.888888888888889,91.54609559890832
Check that the `team_name` column contains only distinct values matching the predefined list of active team names.,"expect_column_values_to_be_in_set(column=""team_name"", value_set=[""list_of_active_team_names""])","expect_column_values_to_be_in_set(column=""team_name"", value_set=active_team_names)",0.9375,0.8666666666666666,0.9375,71.88389242564742
"For the `department` column: Verify that all values exist within the set ['Sales', 'Marketing', 'Engineering', 'HR'].","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Marketing', 'Engineering', 'HR'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Marketing', 'Engineering', 'HR'])",1.0,1.0,1.0,100.00000000000004
Check that the `trade_volume` column has a mean value greater than `1000` and no entries greater than `1000000` to maintain realistic trading data.,"expect_column_mean_to_be_greater_than(column=""trade_volume"", threshold=1000),expect_column_max_to_be_between(column=""trade_volume"", max_value=1000000)","expect_column_mean_to_be_between(column=""trade_volume"", min_value=1000),expect_column_max_to_be_between(column=""trade_volume"", max_value=1000000)lásil",0.8400000000000001,0.7499999999999999,0.8400000000000001,84.96758672043421
Ensure that the `data_timestamp` column contains timestamps that are within the last 30 days.,"expect_column_values_to_be_between(column=""data_timestamp"", min_value=""2023-09-21"", max_value=""2023-10-21"")","expect_column_values_to_be_between(column=""data_timestamp"", min_value=(datetime.now() - timedelta(days=30)).timestamp(), max_value=datetime.now().timestamp())",0.6341463414634148,0.5641025641025642,0.6341463414634148,47.46718670996849
Check that the `discount_percentage` column values fall within the range of `0%` to `100%` and are expressed as integers.,"expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""discount_percentage"", type_=""int"")","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
Check that the `email_address` column matches the format of a valid email and does not include common educational institution domains.,"expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_match_regex_list(column=""email_address"", regex_list=['.*\.edu$', '.*\.ac\.uk$', '.*\.edu\.au$'])","expect_column_values_to_match_regex(column=""email_address"", regex=r"".*@(\w+)*\.\w+\.\w+"")  # Assuming the regex to check the format of the email, it expects all values in the email_address column to be email addresses with a valid top-level domain, followed by a period (.).  # The specific pattern used to check the domain names may need to be adjusted as per the requirements, e.g., removing certain domains may be necessary.",0.39999999999999997,0.27184466019417475,0.3619047619047619,30.17788272910252
"For field 'loan_status': Ensure the field matches the type 'text'. Ensure values in (loan_status) must exist in the set (Approved, Pending, Denied).","expect_column_values_to_be_of_type(column=""loan_status"", type_=""text""),expect_column_values_to_be_in_set(column=""loan_status"", value_set=[""Approved"", ""Pending"", ""Denied""])","expect_column_to_exist(column=""loan_status""),expect_column_values_to_be_of_type(column=""loan_status"", type_=""text""),expect_column_values_to_be_in_set(column=""loan_status"", value_set=[Approved, Pending, Denied])",0.8852459016393442,0.8813559322033898,0.8852459016393442,72.73101278032642
"For the `reservation_file`: Ensure that the file exists, matches the specified hash value, and contains less than 1000 lines.","expect_file_to_exist(file_path=""reservation_file""),expect_file_hash_to_equal(file_path=""reservation_file"", hash_value=""SPECIFIED_HASH_VALUE""),expect_file_line_regex_match_count_to_be_between(file_path=""reservation_file"", min_value=0, max_value=999)","expect_file_to_exist(file=""reservation_file""),expect_file_to_have_hash_match(file=""reservation_file"", hash_value=""some_hash_value""),expect_file_line_regex_match_count_to_be_between(file=""reservation_file"", min_value=1, max_value=1000)",0.8500000000000001,0.6410256410256411,0.8250000000000001,72.28974739489146
Confirm that the `created_at` field contains valid date values that are not null.,"expect_column_to_exist(column=""created_at""),expect_column_values_to_be_dateutil_parseable(column=""created_at""),expect_column_values_to_not_be_null(column=""created_at"")","expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_be_dateutil_parseable(column=""created_at""),expect_column_values_to_be_in_set(column=""created_at"", value_set=[datetime.datetime.now()])  # This assumes datetime.now() returns valid dates.",0.7536231884057971,0.6865671641791045,0.6956521739130435,60.977688859971124
"For field 'service_status': Ensure the field matches the type 'text'. Validate that values in (service_status) must be one of the following: 'active', 'inactive', 'pending'.","expect_column_values_to_be_of_type(column=""service_status"", type_=""text""),expect_column_values_to_be_in_set(column=""service_status"", value_set=[""active"", ""inactive"", ""pending""])","expect_column_values_to_be_of_type(column=""service_status"", type_=""text""),expect_column_values_to_be_in_set(column=""service_status"", value_set=[""active"", ""inactive"", ""pending""])",1.0,1.0,1.0,100.00000000000004
Ensure the `enrollment_date` column contains valid date formats and no missing values.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_not_be_null(column=""enrollment_date"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_column_values_to_not_be_null(column=""enrollment_date"")",0.8928571428571429,0.8518518518518519,0.8928571428571429,82.86170196260694
"Check that the `customer_age` column contains values in the range of 18 to 100, inclusive.","expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=100)","expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=100)",1.0,1.0,1.0,100.00000000000004
For the `user_rating`: Validate that the mean rating is above 3.5 and that the count of unique ratings matches the expected value.,"expect_column_mean_to_be_between(column=""user_rating"", min_value=3.5),expect_column_unique_value_count_to_be_between(column=""user_rating"", min_value=expected_unique_count, max_value=expected_unique_count)","expect_column_mean_to_be_between(column=""user_rating"", min_value=3.5, max_value=None),expect_column_unique_value_count_to_equal(column=""user_rating"", expected_value=expected_unique_rating_count)",0.8787878787878787,0.6875,0.8181818181818182,77.71263205597893
Verify that the `course_code` column only includes values that match the regex `^[A-Z]{3}-[0-9]{3}$` and that all values are of length 7.,"expect_column_values_to_match_regex(column=""course_code"", regex=""^[A-Z]{3}-[0-9]{3}$""),expect_column_value_lengths_to_equal(column=""course_code"", length=7)","expect_column_values_to_match_regex(column=""course_code"", regex=""^[A-Z]{3}-[0-9]{3}$""),expect_column_values_to_equal_fixed_length(column=""course_code"", length=7)",0.9818181818181818,0.8679245283018868,0.9454545454545454,88.36174487102333
For field 'sender_email': Ensure the field matches the type 'text'. Validate that all entries in (sender_email) conform to standard email format using a regular expression. Ensure this field exists.,"expect_column_to_exist(column=""sender_email""),expect_column_values_to_be_of_type(column=""sender_email"", type_=""text""),expect_column_values_to_match_regex(column=""sender_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_to_exist(column=""sender_email""),expect_column_values_to_be_of_type(column=""sender_email"", type_=""text""),expect_column_values_to_match_regex(column=""sender_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9850746268656716,0.9846153846153847,0.9850746268656716,94.39502475945417
For field 'transaction_timestamp': Ensure the field matches the type 'datetime'. Validate that (transaction_timestamp) conforms to the format 'YYYY-MM-DDTHH:MM:SSZ' and is in UTC.,"expect_column_values_to_be_of_type(column=""transaction_timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""transaction_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_be_of_type(column=""transaction_timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""transaction_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_in_set(column=""transaction_timestamp"", value_set=[tzutc.localize(datetime.datetime.utcfromtimestamp(t)) for t in range(int(time.time()), 1000)])  # assume only 10 mins of data from now will be considered # NOTE: Assuming the data will not change once written, if you expect the data to change over time, you can use a range of (current timestamp - max seconds possible to read the data, current timestamp), as the current timestamp is only available within the scope of a single function call.",0.4081632653061224,0.4,0.4081632653061224,35.304862813756536
Verify that the `treatment_plan` column contains valid JSON objects that match the specified treatment schema.,"expect_column_values_to_match_json_schema(column=""treatment_plan"", json_schema=specified_treatment_schema)","expect_column_values_to_match_json_schema(column=""treatment_plan"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""description"": {""type"": ""string""}, ""instructions"": {""type"": ""string""}}})",0.5789473684210527,0.5000000000000001,0.5789473684210527,26.563334069506446
"For field 'energy_type': Ensure that the column values match at least one pattern from the list ['Electricity', 'Gas', 'Water']. Ensure this field exists.","expect_column_to_exist(column=""energy_type""),expect_column_values_to_be_in_set(column=""energy_type"", value_set=['Electricity', 'Gas', 'Water'])","expect_column_to_exist(column=""energy_type""),expect_column_values_to_be_in_set(column=""energy_type"", value_set=['Electricity', 'Gas', 'Water'])",1.0,1.0,1.0,100.00000000000004
For field 'discount_code': Ensure the field matches the type 'text'. Validate that 'discount_code' matches the pattern of seven uppercase alphanumeric characters. Ensure this field exists.,"expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z0-9]{7}$"")","expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z0-9]{7}$"")",1.0,1.0,1.0,100.00000000000004
Validate that the `application_date` column follows the `MM/DD/YYYY` format and contains no incorrect date entries.,"expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""application_date"")","expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""application_date"")",1.0,1.0,1.0,100.00000000000004
"In the `vote_count` field: Ensure that all counts are non-negative integers and fall within the range of `0` to `10,000`.","expect_column_values_to_be_between(column=""vote_count"", min_value=0, max_value=10000),expect_column_values_to_be_of_type(column=""vote_count"", type_=""int"")","expect_column_values_to_be_between(column=""vote_count"", min_value=0, max_value=10000)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
For field `json_data`: Ensure values in `json_data` are valid JSON objects and conform to the specified schema.,"expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=specified_schema)","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={})  # Specify your schema here.",0.9583333333333334,0.9130434782608695,0.9583333333333334,84.35283610953348
"Check that the `research_topic` field only contains values from the set `['health', 'technology', 'environment', 'education']`.","expect_column_values_to_be_in_set(column=""research_topic"", value_set=['health', 'technology', 'environment', 'education'])","expect_column_values_to_be_in_set(column=""research_topic"", value_set=['health', 'technology', 'environment', 'education'])",1.0,1.0,1.0,100.00000000000004
For the field `timestamp`: Validate that all entries are of type `datetime` and follow the format 'YYYY-MM-DD HH:MM:SS'.,"expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", format=""%Y-%m-%d %H:%M:%S"")",0.9818181818181818,0.9433962264150944,0.9818181818181818,94.7922003430736
Validate that the `amount` column has a mean value between 50 and 5000 and does not include any negative values.,"expect_column_mean_to_be_between(column=""amount"", min_value=50, max_value=5000),expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=None)","expect_column_mean_to_be_between(column=""amount"", min_value=50, max_value=5000),expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=5000)",0.9642857142857143,0.9629629629629629,0.9642857142857143,97.04435078646127
For field 'warehouse_location': Ensure the field matches the type 'text'. Validate that (warehouse_location) does not contain any SQL-like patterns from a predefined disallowed list.,"expect_column_values_to_be_of_type(column=""warehouse_location"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""warehouse_location"", regex_list=[""SELECT"", ""INSERT"", ""UPDATE"", ""DELETE"", ""--"", "";""])","expect_column_to_exist(column=""warehouse_location""),expect_column_values_to_be_of_type(column=""warehouse_location"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""warehouse_location"")  # Replace the predefined disallowed list with your actual one if needed.",0.6857142857142856,0.6470588235294117,0.6857142857142856,64.3812836027125
"For the `appointment_date` field, ensure all values match the format 'YYYY-MM-DD' and are not in the past.","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date"")  # This will ensure they are parseable dates,# Additional logic would be needed to check if dates are in the past, which is not covered by the current set of expectations.","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""2023-10-01"", max_value=None),expect_column_values_to_be_in_set(column=""appointment_date"", value_set=range(""2023-10-01"", datetime.datetime.now().strftime(""%Y-%m-%d"")))",0.5272727272727272,0.3888888888888889,0.4727272727272727,40.77203072581744
For the `customer_email` column: Verify that each entry matches the standard email format and is unique across the dataset.,"expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""customer_email"")","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")",0.7272727272727273,0.679245283018868,0.7272727272727273,72.05688351768802
Ensure the `course_id` column exists and contains values that match the set of defined course identifiers.,"expect_column_to_exist(column=""course_id""),expect_column_values_to_be_in_set(column=""course_id"", value_set=defined_course_identifiers)","expect_column_to_exist(column=""course_id""),expect_column_values_to_be_in_set(column=""course_id"", value_set=defined_course_ids)",0.9545454545454546,0.9523809523809523,0.9545454545454546,96.29257778548396
"For the `email` column, ensure that all values match the pattern `^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$`.","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^\S+@\S+\.\S+$"")",0.7142857142857142,0.6923076923076924,0.7142857142857142,49.990101158361924
Check that the `response_time` values in the `customer_service` data are within the range of `0` to `300` seconds and follow a normal distribution.,"expect_column_values_to_be_between(column=""response_time"", min_value=0, max_value=300),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""response_time"", threshold=0.05)","expect_column_values_to_be_between(column=""customer_service.response_time"", min_value=0, max_value=300),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""customer_service.response_time"", threshold=0.05)",0.9428571428571428,0.8823529411764706,0.9428571428571428,85.32413248674985
Check that the 'order_date' field matches the format '%Y-%m-%d' and is not later than the 'delivery_date'.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_less_than_B(column_A=""order_date"", column_B=""delivery_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""order_date"", column_B=""delivery_date"")",0.9696969696969697,0.9375,0.9696969696969697,96.60854289024725
"For field 'device_id': Confirm that values in (device_id) must match the pattern '^[A-Z0-9]{36}$', ensuring unique entries.","expect_column_values_to_match_regex(column=""device_id"", regex=r""^[A-Z0-9]{36}$""),expect_column_values_to_be_unique(column=""device_id"")","expect_column_values_to_match_regex(column=""device_id"", regex=r""^[A-Z0-9]{36}$""),expect_column_values_to_be_unique(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
For field `player_statistics`: Ensure values in `player_statistics` are valid JSON objects and conform to the specified schema.,"expect_column_values_to_be_json_parseable(column=""player_statistics""),expect_column_values_to_match_json_schema(column=""player_statistics"", schema=""your_schema_here"")","expect_column_values_to_match_json_schema(column=""player_statistics"", schema=""your_schema"")İTESİ",0.6666666666666667,0.6486486486486486,0.6666666666666667,42.51678629962787
"Verify that the `job_title` column contains only distinct entries from the set `['Manager', 'Developer', 'Analyst']`.","expect_column_distinct_values_to_equal_set(column=""job_title"", value_set=['Manager', 'Developer', 'Analyst'])","expect_column_distinct_values_to_equal_set(column=""job_title"", value_set=['Manager', 'Developer', 'Analyst'])",1.0,1.0,1.0,100.00000000000004
"Check that the `precipitation` column passes the Chi-Square test with a p-value greater than 0.05, confirming expected distribution patterns.","expect_column_chisquare_test_p_value_to_be_greater_than(column=""precipitation"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""precipitation"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"Ensure the `post_type` column only includes distinct values from the set `['text', 'image', 'video']`.","expect_column_values_to_be_in_set(column=""post_type"", value_set=['text', 'image', 'video'])","expect_column_values_to_be_in_set(column=""post_type"", value_set=['text', 'image', 'video'])",1.0,1.0,1.0,100.00000000000004
"For field 'case_status': Ensure values are drawn from the valid statuses ['Open', 'Closed', 'Pending']. Ensure all entries are unique.","expect_column_values_to_be_in_set(column=""case_status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_be_unique(column=""case_status"")","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_be_unique(column=""case_status"")",1.0,1.0,1.0,79.47440347019332
Validate that the `product_code` column contains strings with a length of exactly 10 characters.,"expect_column_value_lengths_to_equal(column=""product_code"", length=10)","expect_column_value_lengths_to_equal(column=""product_code"", length=10)",1.0,1.0,1.0,100.00000000000004
Ensure that the standard deviation of the `customer_ratings` column is below 1.5.,"expect_column_stdev_to_be_between(column=""customer_ratings"", min_value=None, max_value=1.5)","expect_column_stdev_to_be_between(column=""customer_ratings"", min_value=None, max_value=1.5)",1.0,1.0,1.0,100.00000000000004
For field 'sales_date': Ensure the expect column to exist; Ensure this field matches the type 'date' and contains values in chronological order.,"expect_column_to_exist(column=""sales_date""),expect_column_values_to_be_of_type(column=""sales_date"", type_=""date""),expect_column_values_to_be_increasing(column=""sales_date"")","expect_column_to_exist(column=""sales_date""),expect_column_values_to_be_of_type(column=""sales_date"", type_=""date""),expect_column_values_to_be_increasing(column=""sales_date"")",1.0,1.0,1.0,100.00000000000004
"In the `humidity` column: Validate that all entries are integers between 0 and 100, representing percentage values.","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""humidity"", type_=""int"")","expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,0.9583333333333334,0.56,98.63293593592441
Check that the `hire_date` column adheres to the format 'YYYY-MM-DD' and is a valid date.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `renewable_percentage` column values are within the range of 0 to 100.,"expect_column_values_to_be_between(column=""renewable_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""renewable_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For the `case_number` field, ensure all entries are unique and not null.","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_not_be_null(column=""case_number"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_not_be_null(column=""case_number"")",1.0,1.0,1.0,100.00000000000004
Ensure that the sum of the `weight` and `volume` columns does not exceed the `capacity` column.,"expect_multicolumn_sum_to_equal(column_list=[""weight"", ""volume""], sum_value=""capacity"")","expect_multicolumn_sum_to_equal(column_list=[""weight"", ""volume""], sum_column=""capacity"")",0.9166666666666666,0.8181818181818182,0.9166666666666666,91.57103753711765
"Ensure the `view_count` column has a sum greater than 100,000 and that the minimum value is not less than 0.","expect_column_sum_to_be_between(column=""view_count"", min_value=100001),expect_column_min_to_be_between(column=""view_count"", min_value=0, max_value=None)","expect_column_sum_to_be_between(column=""view_count"", min_value=100001),expect_column_min_to_be_between(column=""view_count"", min_value=0)",0.9411764705882353,0.9387755102040816,0.9411764705882353,87.97975961961338
Ensure the `vehicle_id` column contains only distinct values and matches the pattern `^V[0-9]{4}$`.,"expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_match_regex(column=""vehicle_id"", regex=r""^V[0-9]{4}$"")","expect_column_distinct_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_match_regex(column=""vehicle_id"", regex=r""^V[0-9]{4}$"")",0.9795918367346939,0.9361702127659574,0.9795918367346939,95.25961551041776
Ensure that the `purchase_date` column contains only dates within the last 30 days and that all entries are unique.,"expect_column_values_to_be_between(column=""purchase_date"", min_value=""2023-09-24"", max_value=""2023-10-24""),expect_column_values_to_be_unique(column=""purchase_date"")","expect_column_values_to_be_unique(column=""purchase_date""),expect_column_values_to_be_between(column=""purchase_date"", min_value=""2023-11-01"", max_value=""2023-11-30"")",0.8571428571428571,0.7777777777777778,0.5714285714285714,86.39419087333484
For field 'diagnosis_code': Ensure the column contains unique entries. Verify that all values conform to the ICD-10 code format.,"expect_column_values_to_be_unique(column=""diagnosis_code""),expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-TV-Z][0-9]{1,7}$"")","expect_column_values_to_be_unique(column=""diagnosis_code""),expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-Z]{4}[A-Z]{2}[0-9]{2}[0-9]{1}$"")",0.847457627118644,0.7719298245614036,0.847457627118644,69.70420311947429
"Ensure that the `lawyer_id` column contains values that exist in the `lawyers` table, maintaining referential integrity.","expect_column_values_to_be_in_set(column=""lawyer_id"", value_set=lawyers_table_lawyer_ids)","expect_column_values_to_be_in_set(column=""lawyer_id"", value_set=lawsyer_ids),expect_column_values_to_be_unique(column=""lawyer_id"")  # Assuming there is no duplicate values for lawyer_ids.ávající",0.6,0.5000000000000001,0.6,43.29540299508292
Check that the combination of `voter_id` and `election_id` is unique across all records.,"expect_compound_columns_to_be_unique(column_A=""voter_id"", column_B=""election_id"")","expect_compound_columns_to_be_unique(column_list=[""voter_id"", ""election_id""])",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.7176346014632
For fields `balance` and `overdraft_limit`: Ensure that `balance` is greater than or equal to `overdraft_limit`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""balance"", column_B=""overdraft_limit"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""balance"", column_B=""overdraft_limit"")",1.0,1.0,1.0,100.00000000000004
For the `message_length`: Ensure values are within the range of 1 to 5000 characters. Check for any null or empty entries.,"expect_column_values_to_be_between(column=""message_length"", min_value=1, max_value=5000),expect_column_values_to_not_be_null(column=""message_length""),expect_column_values_to_not_match_regex(column=""message_length"", regex=r""^$"")","expect_column_value_lengths_to_be_between(column=""message_length"", min_value=1, max_value=5000),expect_column_values_to_not_be_null(column=""message_length""),expect_column_values_to_not_be_empty(column=""message_length"")",0.9041095890410958,0.8450704225352113,0.9041095890410958,81.70448737588895
For the `location_coordinates`: Ensure this field can accept null values. Validate that the format is correct for latitude and longitude pairs.,"expect_column_values_to_be_null(column=""location_coordinates""),expect_column_values_to_match_regex(column=""location_coordinates"", regex=r""^\(\s*-?\d{1,3}\.\d+,\s*-?\d{1,3}\.\d+\s*\)$"")","expect_column_values_to_be_null(column=""location_coordinates""),expect_column_values_to_match_json_schema(column=""location_coordinates"", json_schema={""type"": ""object"", ""properties"": {""lat"": {""type"": ""number""}, ""long"": {""type"": ""number""}}}),expect_column_values_to_be_in_set(column=""location_coordinates"", value_set={""lat"": lat_value, ""long"": long_value})  # Where lat_value and long_value are latitude and longitude values.",0.37777777777777777,0.34090909090909094,0.37777777777777777,26.379286335389015
"Verify that the `usage_type` column contains only distinct values matching ['Electricity', 'Water', 'Gas'].","expect_column_distinct_values_to_equal_set(column=""usage_type"", value_set=['Electricity', 'Water', 'Gas'])","expect_column_distinct_values_to_equal_set(column=""usage_type"", value_set=['Electricity', 'Water', 'Gas'])",1.0,1.0,1.0,100.00000000000004
"For the `phone_number` field, ensure all values match the format `(XXX) XXX-XXXX` and are 14 characters long.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_value_lengths_to_equal(column=""phone_number"", length=14)","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_value_lengths_to_equal(column=""phone_number"", length=14)",1.0,1.0,1.0,100.00000000000004
Validate that the `check_in_date` values are less than the corresponding `check_out_date` values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")","expect_column_pair_values_to_be_less_than(column_A=""check_in_date"", column_B=""check_out_date"")",0.8947368421052632,0.7222222222222222,0.8947368421052632,79.43681868558478
Validate that the average score in the `exam_scores` column follows a normal distribution with a mean between 70 and 85.,"expect_column_mean_to_be_between(column=""exam_scores"", min_value=70, max_value=85)","expect_column_mean_to_be_between(column=""exam_scores"", min_value=70, max_value=85),expect_column_proportion_to_be_between(column=""exam_scores"", min_value=70, max_value=85)  # assuming 85 is the cut-off value, we can add a custom value for the minimum value as well.",0.46874999999999994,0.45161290322580644,0.46874999999999994,36.073563205215805
Verify that the `price_per_square_foot` column follows a normal distribution with a mean between $150 and $300.,"expect_column_mean_to_be_between(column=""price_per_square_foot"", min_value=150, max_value=300)","expect_column_mean_to_be_between(column=""price_per_square_foot"", min_value=150, max_value=300),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""price_per_square_foot"", threshold=0.05)",0.6296296296296297,0.6153846153846153,0.6296296296296297,45.676364013391286
Ensure the combination of `owner_id` and `property_id` is unique across all records.,"expect_compound_columns_to_be_unique(column_A=""owner_id"", column_B=""property_id"")","expect_compound_columns_to_be_unique(columns=[""owner_id"", ""property_id""])",0.88,0.6956521739130435,0.88,60.81152344671197
Check that the `weather_conditions` column contains valid JSON objects representing weather statuses.,"expect_column_values_to_be_json_parseable(column=""weather_conditions"")","expect_column_values_to_match_json_schema(column=""weather_conditions"", schema={""type"": ""object"", ""properties"": {}}}  # Note: You'll need to add additional validation based on the actual JSON Schema used for the expected weather condition.",0.3636363636363636,0.2380952380952381,0.3636363636363636,22.929833589011615
In the `transaction_id` column: Verify that all entries are unique and are of type 'string'. Ensure there are no missing values.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `student_email` column contains valid email formats by confirming values match the regex pattern `^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$`.","expect_column_values_to_match_regex(column=""student_email"", regex=r""^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"")","expect_column_values_to_match_regex(column=""student_email"", regex=r""^[^@]+@[^@]+\.[a-zA-Z]{2,}$"")",0.7741935483870969,0.689655172413793,0.7741935483870969,61.45876463221526
"For the `discount_percentage` column, confirm that all values fall within the range of `0%` to `100%`, with negative or excessive values flagged as errors.","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_be_between(column=""discount_percentage"", max_value=-100) # Note: The min_value and max_value values may not be used for the final implementation.ЎыџN",0.5084745762711864,0.49122807017543857,0.5084745762711864,38.342776337422976
Validate the `sent_date` column to confirm all entries adhere to the `YYYY-MM-DD` format and are not null.,"expect_column_to_exist(column=""sent_date""),expect_column_values_to_match_strftime_format(column=""sent_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""sent_date"")","expect_column_to_exist(column=""sent_date""),expect_column_values_to_match_strftime_format(column=""sent_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""sent_date"")",1.0,1.0,1.0,100.00000000000004
For field 'voter_age': Ensure the field matches the type 'integer'. Validate that all values in (voter_age) are greater than or equal to 18 and less than or equal to 120. Ensure this field exists.,"expect_column_to_exist(column=""voter_age""),expect_column_values_to_be_of_type(column=""voter_age"", type_=""int""),expect_column_values_to_be_between(column=""voter_age"", min_value=18, max_value=120)","expect_column_to_exist(column=""voter_age""),expect_column_values_to_be_of_type(column=""voter_age"", type_=""integer""),expect_column_values_to_be_between(column=""voter_age"", min_value=18, max_value=120)",0.9705882352941176,0.9393939393939394,0.9705882352941176,96.74122890261673
"Verify that the `payment_status` field contains only values from the set ['Paid', 'Pending', 'Overdue'] with no duplicates.","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Overdue']),expect_column_values_to_be_unique(column=""payment_status"")","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Overdue']),expect_column_values_to_be_unique(column=""payment_status"")",1.0,1.0,1.0,100.00000000000004
Check that the `attachment_size` column values are within the range of 0 to 25 MB.,"expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25 * 1024 * 1024)","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25 * 1024 * 1024)",1.0,1.0,1.0,100.00000000000004
For field 'delivery_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure this field exists.,"expect_column_to_exist(column=""delivery_date""),expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date"")","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `billing_cycle` column contains values that match the pattern `^[0-9]{1,2} months$`.","expect_column_values_to_match_regex(column=""billing_cycle"", regex=r""^[0-9]{1,2} months$"")","expect_column_values_to_match_regex(column=""billing_cycle"", regex=r""^[0-9]{1,2} months$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `user_feedback` JSON column entries conform to a defined schema that includes `rating` and `comments`.,"expect_column_values_to_match_json_schema(column=""user_feedback"", schema={""type"": ""object"", ""properties"": {""rating"": {""type"": ""integer""}, ""comments"": {""type"": ""string""}}, ""required"": [""rating"", ""comments""]})","expect_column_values_to_match_json_schema(column=""user_feedback"", schema={""type"": ""object"", ""properties"": {""rating"": {""type"": ""number""}, ""comments"": {""type"": ""string""}}})",0.8837209302325583,0.8292682926829269,0.8837209302325583,76.7247238769083
"For the `subscription_tier` field: Ensure it matches the type 'text' and only includes values from the list `['Basic', 'Standard', 'Premium']`.","expect_column_values_to_be_of_type(column=""subscription_tier"", type_=""text""),expect_column_values_to_be_in_set(column=""subscription_tier"", value_set=['Basic', 'Standard', 'Premium'])","expect_column_values_to_be_of_type(column=""subscription_tier"", type_=""text""),expect_column_values_to_be_in_set(column=""subscription_tier"", value_set=['Basic', 'Standard', 'Premium'])",1.0,1.0,1.0,100.00000000000004
Verify that the `transaction_amount` column passes the Kolmogorov-Smirnov test with p-values greater than 0.05 across relevant datasets.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05) CLIIIK",0.972972972972973,0.9714285714285714,0.972972972972973,97.1802593947472
For field 'medication_dosage': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that dosage follows the format 'X mg'.,"expect_column_values_to_not_be_null(column=""medication_dosage""),expect_column_values_to_be_of_type(column=""medication_dosage"", type_=""text""),expect_column_values_to_match_regex(column=""medication_dosage"", regex=r""^\d+\s*mg$"")","expect_column_values_to_not_be_null(column=""medication_dosage""),expect_column_values_to_be_of_type(column=""medication_dosage"", type_=""text""),expect_column_values_to_match_regex(column=""medication_dosage"", regex=r""^[\d.,]+"")",0.9714285714285714,0.9705882352941176,0.9714285714285714,90.41159695544249
Verify that the sum of the `order_total` column matches the calculated total from individual item prices.,"expect_column_sum_to_be_between(column=""order_total"", min_value=calculated_total, max_value=calculated_total)","expect_multicolumn_sum_to_be_between(column_list=[""order_total"", ""item_price_1"", ""item_price_2"",...], target_column_sum=""sum_of_item_prices"")ыџN",0.4390243902439025,0.30769230769230765,0.39024390243902435,27.803468312430738
"Ensure the `listing_price` column contains values greater than $100,000 and less than $5,000,000.","expect_column_values_to_be_between(column=""listing_price"", min_value=100000, max_value=5000000)","expect_column_values_to_be_between(column=""listing_price"", min_value=100000, max_value=5000000)",1.0,1.0,1.0,100.00000000000004
"For the `download_size` field, validate that its maximum value does not exceed 50 GB and that the standard deviation is below 10 GB.","expect_column_max_to_be_between(column=""download_size"", max_value=50 * 1024 * 1024 * 1024),expect_column_stdev_to_be_between(column=""download_size"", min_value=0, max_value=10 * 1024 * 1024 * 1024)","expect_column_max_to_be_between(column=""download_size"", max_value=50*1024^3),expect_column_stdev_to_be_between(column=""download_size"", min_value=None, max_value=10*1024^3)",0.875,0.8064516129032259,0.875,81.4592454732135
"For the 'job_title' field, ensure values match the set ['Manager', 'Developer', 'Designer', 'Analyst']. Ensure this field is required (not null).","expect_column_values_to_be_in_set(column=""job_title"", value_set=['Manager', 'Developer', 'Designer', 'Analyst']),expect_column_values_to_not_be_null(column=""job_title"")","expect_column_values_to_be_in_set(column=""job_title"", value_set=[""Manager"", ""Developer"", ""Designer"", ""Analyst""]),expect_column_values_to_not_be_null(column=""job_title"")",1.0,1.0,1.0,75.79750729628563
For field 'email_address': Ensure the field is required (not null). Validate that all values in 'email_address' match the regex pattern for valid email formats.,"expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.9795918367346939,0.9787234042553191,0.9795918367346939,92.58064271362642
Validate that the `attendance` column has values that are either 'Present' or 'Absent' without any other entries.,"expect_column_values_to_be_in_set(column=""attendance"", value_set=[""Present"", ""Absent""])","expect_column_values_to_be_in_set(column=""attendance"", value_set=[""Present"", ""Absent""])",1.0,1.0,1.0,100.00000000000004
"Ensure the file size of the `customer_data.csv` falls within the range of 1KB to 5MB, and that it contains valid headers.","expect_file_size_to_be_between(file_path=""customer_data.csv"", min_value=1024, max_value=5242880),expect_file_to_have_valid_table_header(file_path=""customer_data.csv"")","expect_file_size_to_be_between(file=""customer_data.csv"", min_size=1000, max_size=5000000),expect_file_to_have_table_header(customer_data)",0.7547169811320755,0.5490196078431373,0.7547169811320755,57.09245665837661
For field 'product_sku': Ensure values in (product_sku) match the pattern '^[A-Z0-9]{8}$' to confirm a valid SKU format.,"expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[A-Z0-9]{8}$"")","expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[A-Z0-9]{8}$"")",1.0,1.0,1.0,100.00000000000004
For the `player_id` column: Ensure values are unique and exist in the `player` database.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_in_set(column=""player_id"", value_set=player_database_values)","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_in_set(column=""player_id"", value_set=player_database)",0.9787234042553191,0.9777777777777777,0.9787234042553191,94.67837759051271
"For the 'admission_date' field, validate that all entries are of type 'date' and that no entries are in the future.","expect_column_values_to_be_of_type(column=""admission_date"", type_=""date""),expect_column_values_to_be_between(column=""admission_date"", min_value=""2000-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""admission_date"", type_=""date""),expect_column_values_to_be_between(column=""admission_date"", min_value=""1900-01-01"", max_value=""today"")",0.9655172413793104,0.9285714285714286,0.9655172413793104,96.30786123683066
Ensure the standard deviation of the `engagement_rate` column is below 0.3. Validate that it follows a uniform distribution.,"expect_column_stdev_to_be_between(column=""engagement_rate"", min_value=0, max_value=0.3),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""engagement_rate"", threshold=0.05)","expect_column_stdev_to_be_between(column=""engagement_rate"", min_value=0, max_value=0.3),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""engagement_rate"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `tournament_id` column exists and contains unique values. Validate that it matches a predefined set of tournament IDs.,"expect_column_to_exist(column=""tournament_id""),expect_column_values_to_be_unique(column=""tournament_id""),expect_column_values_to_be_in_set(column=""tournament_id"", value_set=predefined_tournament_ids)","expect_column_to_exist(column=""tournament_id""),expect_column_values_to_be_unique(column=""tournament_id""),expect_column_values_to_match_regex(column=""tournament_id"", regex=r""^[0-9]+$"")  # Ensure that all values are integers",0.7272727272727272,0.65625,0.7272727272727272,67.93772925655941
Ensure that the `course_materials` field is a valid JSON object conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""course_materials"")","expect_column_values_to_be_json_parseable(column=""course_materials""),expect_column_values_to_match_json_schema(column=""course_materials"", schema={""type"": ""object"", ""properties"": {...}})  # Replace {...} with the actual schema.átky",0.5,0.4736842105263158,0.5,26.07839093865357
Check that the `detection_time` column is of type 'timestamp' and that all entries are from the last `365` days.,"expect_column_values_to_be_of_type(column=""detection_time"", type_=""timestamp""),expect_column_values_to_be_between(column=""detection_time"", min_value=""2022-10-04"", max_value=""2023-10-04"")","expect_column_values_to_be_of_type(column=""detection_time"", type_=""timestamp""),expect_column_values_to_be_between(column=""detection_time"", min_value=""1 year ago"", max_value=""now"")",0.8333333333333334,0.793103448275862,0.8333333333333334,82.16769500020509
For field 'shipping_country': Ensure the field matches the type 'text'. Ensure values in (shipping_country) must exist in the set of valid countries (country_list). Ensure this field exists.,"expect_column_to_exist(column=""shipping_country""),expect_column_values_to_be_of_type(column=""shipping_country"", type_=""text""),expect_column_values_to_be_in_set(column=""shipping_country"", value_set=country_list)","expect_column_to_exist(column=""shipping_country""),expect_column_values_to_be_of_type(column=""shipping_country"", type_=""text""),expect_column_values_to_be_in_set(column=""shipping_country"", value_set=country_list)",1.0,1.0,1.0,100.00000000000004
Validate that the distribution of employee `ages` follows a normal distribution with a mean age of 35 and a standard deviation of 5.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""ages"", threshold=0.05)","expect_column_mean_to_be_between(column=""ages"", min_value=30, max_value=40),expect_column_stdev_to_be_between(column=""ages"", min_value=5, max_value=10)",0.3111111111111111,0.13953488372093023,0.3111111111111111,21.03057991434223
"Confirm that the `medication_dosage` column contains values in the set `['5mg', '10mg', '20mg']`.","expect_column_values_to_be_in_set(column=""medication_dosage"", value_set=['5mg', '10mg', '20mg'])","expect_column_values_to_be_in_set(column=""medication_dosage"", value_set=['5mg', '10mg', '20mg'])",1.0,1.0,1.0,100.00000000000004
Ensure the `team_id` values in the `game_results` table are a subset of the `team_id` values in the `teams` table.,"expect_column_values_to_be_in_set(column=""team_id"", value_set=teams_table_team_id_values)","expect_column_values_to_be_in_set(column=""game_results.team_id"", value_set=teams_table.team_id)",0.9142857142857143,0.8484848484848485,0.9142857142857143,75.95485837350849
Ensure the `product_sku` column has unique values representing each product. Confirm that this column does not allow null entries.,"expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_not_be_null(column=""product_sku"")","expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_not_be_null(column=""product_sku"")",1.0,1.0,1.0,100.00000000000004
Verify that the average `salary` in the `employee_records` table falls within the range of 50000 to 100000.,"expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=100000)","expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=100000)",1.0,1.0,1.0,100.00000000000004
Ensure that `shipment_date` values match the 'YYYY-MM-DD' format and do not exceed the `estimated_arrival_date`.,"expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_less_than_B(column_A=""shipment_date"", column_B=""estimated_arrival_date"")","expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""shipment_date"", value=""estimated_arrival_date"")",0.888888888888889,0.721311475409836,0.888888888888889,77.21404429354828
For the `ballot_data` field: Validate that it is a valid JSON object and conforms to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""ballot_data""),expect_column_values_to_match_json_schema(column=""ballot_data"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""ballot_data""),expect_column_values_to_match_json_schema(column=""ballot_data"", schema={ ""type"": ""object"", ""properties"": { ""ballots"": { ""type"": ""array"", ""items"": { ""type"": ""object"", ""properties"": {... } } } }, ""required"": [""ballots""] })",0.8214285714285715,0.8148148148148148,0.8214285714285715,49.51510567504751
"For the `category` column, ensure that all entries match one of the predefined categories in the `categories` table. Validate that the number of unique categories matches the expected count.","expect_column_values_to_be_in_set(column=""category"", value_set=[""category1"", ""category2"", ""category3"", ...]),  # Replace with actual categories,expect_column_proportion_of_unique_values_to_be_between(column=""category"", min_value=expected_unique_count, max_value=expected_unique_count)  # Replace with actual expected count","expect_column_values_to_be_in_set(column=""category"", value_set=categories),expect_column_unique_value_count_to_equal(column=""category"", value=expected_unique_count)",0.6956521739130435,0.5074626865671642,0.6666666666666666,35.20965721607509
For the unique combination of 'case_id' and 'client_id': Ensure that each combination is unique across records in the dataset.,"expect_compound_columns_to_be_unique(columns=[""case_id"", ""client_id""])","expect_compound_columns_to_be_unique(column_A=""case_id"", column_B=""client_id"")",0.88,0.6956521739130435,0.88,60.93671089617578
"For field 'phone_number': Validate that all phone numbers match the pattern '^\+?[1-9]\d{1,14}$' and ensure this field exists.","expect_column_to_exist(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_to_exist(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r'^\+?[1-9]\d{1,14}$')",1.0,1.0,1.0,90.64008085681581
"For field 'data_frequency': Ensure that the values in 'data_frequency' match the pattern of integers representing seconds (e.g., 10, 30, 60). Confirm that this field exists.","expect_column_to_exist(column=""data_frequency""),expect_column_values_to_match_regex(column=""data_frequency"", regex=r""^\d+$"")","expect_column_to_exist(column=""data_frequency""),expect_column_values_to_match_regex(column=""data_frequency"", regex=r""^\d+$""), # match only digits, and $ to indicate the end of a regular expression, expecting the full value to match # the pattern of integers (no characters after the digits, like letters and other symbols).",0.5428571428571428,0.5294117647058824,0.5428571428571428,52.53137275515501
Ensure the `employee_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'currency_type': Ensure the field matches the type 'text'. Ensure values in (currency_type) must exist in the set (USD, EUR, GBP).","expect_column_values_to_be_of_type(column=""currency_type"", type_=""text""),expect_column_values_to_be_in_set(column=""currency_type"", value_set=[""USD"", ""EUR"", ""GBP""])","expect_column_values_to_be_of_type(column=""currency_type"", type_=""text""),expect_column_values_to_be_in_set(column=""currency_type"", value_set=['USD', 'EUR', 'GBP'])",1.0,1.0,1.0,82.59707449774302
"For the `price` column: Ensure all values are greater than zero and do not exceed 10,000.","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)","expect_column_values_to_be_greater_than(column=""price"", value=0),expect_column_values_to_be_less_than(column=""price"", value=10000)",0.6111111111111112,0.41176470588235287,0.6111111111111112,37.78770318297481
Ensure the `duration` column values are positive integers representing minutes.,"expect_column_values_to_be_of_type(column=""duration"", type_=""int""),expect_column_values_to_be_between(column=""duration"", min_value=1)","expect_column_values_to_be_of_type(column=""duration"", type_=""int""),expect_column_values_to_be_between(column=""duration"", min_value=1, max_value=None)",0.9361702127659575,0.9333333333333333,0.9361702127659575,88.03173774565059
Ensure the `patient_age` column values are within the range of 0 to 120 years.,"expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)","expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)",1.0,1.0,1.0,100.00000000000004
"Ensure the `result_summary` column contains string values between `50` and `1000` characters, and that it does not include any bias-related terms as defined in the provided list.","expect_column_value_lengths_to_be_between(column=""result_summary"", min_value=50, max_value=1000),expect_column_values_to_not_match_regex_list(column=""result_summary"", regex_list=[""bias_term_1"", ""bias_term_2"", ""bias_term_3""])","expect_column_value_lengths_to_be_between(column=""result_summary"", min_value=50, max_value=1000),expect_column_values_to_not_match_regex_list(column=""result_summary"", regex_list=defined_list)",0.8405797101449276,0.835820895522388,0.8405797101449276,68.14191860859735
For the `monthly_bill` column: Ensure all entries are greater than 0 and check that the average bill does not exceed $150.,"expect_column_values_to_be_greater_than(column=""monthly_bill"", value=0),expect_column_mean_to_be_between(column=""monthly_bill"", min_value=0, max_value=150)","expect_column_values_to_be_greater_than(column=""monthly_bill"", value=0),expect_column_mean_to_be_between(column=""monthly_bill"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
"For the `service_id`: Ensure it exists in the specified set of valid service IDs: ['SVC001', 'SVC002', 'SVC003'].","expect_column_values_to_be_in_set(column=""service_id"", value_set=['SVC001', 'SVC002', 'SVC003'])","expect_column_to_exist(column=""service_id""),expect_column_values_to_be_in_set(column=""service_id"", value_set=['SVC001', 'SVC002', 'SVC003'])",0.8108108108108109,0.8,0.8108108108108109,65.63443601936743
Check that the `likes_count` column has a mean value greater than or equal to 0 and does not contain any negative values.,"expect_column_mean_to_be_between(column=""likes_count"", min_value=0),expect_column_values_to_be_between(column=""likes_count"", min_value=0)","expect_column_mean_to_be_between(column=""likes_count"", min_value=0),expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=None)",0.9411764705882353,0.9387755102040816,0.9411764705882353,88.24036798284989
"For the `city` field, ensure that all values have a minimum length of 3 characters and do not match any SQL-like patterns.","expect_column_value_lengths_to_be_between(column=""city"", min_value=3, max_value=None),expect_column_values_to_not_match_regex(column=""city"", regex=r"".*(['\"";]+|\\0).*"")","expect_column_values_to_be_of_min_length(column=""city"", min_value=3),expect_column_values_to_not_match_regex(column=""city"", regex=r"".*"")",0.8627450980392156,0.693877551020408,0.823529411764706,58.00117405874381
For the `claims` table: Ensure that the number of rows is equal to the number of active policies in the `policy` table.,"expect_table_row_count_to_equal_other_table(table_name=""claims"", other_table_name=""policy"", condition=""active policies"")","expect_table_row_count_to_equal_other_table(table=""claims"", other_table=""policy"", column=""active"")",0.8484848484848485,0.6451612903225806,0.8484848484848485,68.77452856393705
"In the `contacts` table: Validate that the `phone_number` column matches the pattern `^\+\d{1,3}[- ]?\d{1,4}[- ]?\d{4,10}$`.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+\d{1,3}[- ]?\d{1,4}[- ]?\d{4,10}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\\+\\d{1,3}[- ]?\\d{1,4}[- ]?\\d{4,10}$"")",1.0,1.0,1.0,87.0365679342908
"In the `listings` dataset, ensure the `price` field holds values within the range of `$100,000` to `$10,000,000`.","expect_column_values_to_be_between(column=""price"", min_value=100000, max_value=10000000)","expect_column_values_to_be_between(column=""price"", min_value=100000, max_value=10000000)",1.0,1.0,1.0,100.00000000000004
Verify that the `admission_date` and `discharge_date` fields contain valid dates and the admission date is before the discharge date.,"expect_column_values_to_be_dateutil_parseable(column=""admission_date""),expect_column_values_to_be_dateutil_parseable(column=""discharge_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""admission_date"", column_B=""discharge_date"")","expect_column_values_to_be_dateutil_parseable(column=""admission_date""),expect_column_values_to_be_dateutil_parseable(column=""discharge_date""),expect_column_pair_values_A_to_be_less_than_B(column_A=""admission_date"", column_B=""discharge_date"")",0.9736842105263158,0.9459459459459459,0.9736842105263158,97.01381722705914
Ensure the `client_age` values are within the range of `18` to `100`.,"expect_column_values_to_be_between(column=""client_age"", min_value=18, max_value=100)","expect_column_values_to_be_between(column=""client_age"", min_value=18, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure the `transaction_data` column contains valid JSON objects conforming to the schema `{ 'amount': 'number', 'location': 'string' }`.","expect_column_values_to_match_json_schema(column=""transaction_data"", schema={""type"": ""object"", ""properties"": {""amount"": {""type"": ""number""}, ""location"": {""type"": ""string""}}, ""required"": [""amount"", ""location""]})","expect_column_values_to_match_json_schema(column=""transaction_data"", schema='{""type"": ""object"", ""properties"": {""amount"": {""type"": ""number""}, ""location"": {""type"": ""string""}}, ""required"": [""amount"", ""location""]}')",1.0,1.0,1.0,94.80563919055643
Check that the total number of employees in the `employees` table equals the total in the `active_employees` table.,"expect_table_row_count_to_equal_other_table(table=""employees"", other_table=""active_employees"")","expect_table_row_count_to_be_between(table=""active_employees"", min_value=0, max_value=None),expect_table_row_count_to_be_between(table=""employees"", min_value=None, max_value=0)",0.48888888888888893,0.32558139534883723,0.4,31.10771371666454
For the `location` field: Verify that it is of type 'text' and contains no missing values.,"expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_not_be_null(column=""location"")","expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_not_be_null(column=""location"")",1.0,1.0,1.0,100.00000000000004
For the `cc_recipients` column: Ensure values are unique within the record and contain valid email formats. Validate that this field can accept null values.,"expect_select_column_values_to_be_unique_within_record(column=""cc_recipients""),expect_column_values_to_match_regex(column=""cc_recipients"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_null(column=""cc_recipients"")","expect_column_values_to_be_unique_within_record(column=""cc_recipients""),expect_column_values_to_match_regex(column=""cc_recipients"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_null(column=""cc_recipients"")",0.9855072463768115,0.955223880597015,0.9855072463768115,97.41306130996061
"Validate that the `guest_count` column contains only integers within the range of 1 to 10, inclusive.","expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10),expect_column_values_to_be_of_type(column=""guest_count"", type_=""int"")","expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10)ыџN",0.9818181818181818,0.9433962264150944,0.5818181818181818,97.12002082821778
"Verify that the `final_grade` column values are between 0 and 100, indicating valid grading.","expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'submission_date': Ensure this field matches the type 'date'. Ensure it falls within a specified range of '2020-01-01' to '2023-12-31'.,"expect_column_values_to_be_of_type(column=""submission_date"", type_=""date""),expect_column_values_to_be_between(column=""submission_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_of_type(column=""submission_date"", type_=""date""),expect_column_values_to_be_between(column=""submission_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
Verify that the `last_purchase_date` is within the past year for all active customers.,"expect_column_values_to_be_between(column=""last_purchase_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_between(column=""last_purchase_date"", min_value=""2019-10-01"", max_value=""2020-10-01"")",0.9,0.7894736842105263,0.9,88.47064105457828
Ensure the `product_id` column contains only distinct values that are 10 characters long and conform to the pattern `^[A-Z0-9]{10}$`.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_value_lengths_to_equal(column=""product_id"", length=10),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Z0-9]{10}$"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_value_lengths_to_equal(column=""product_id"", value=10),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Z0-9]{10}$"")ЎыџNЎыџN",0.9444444444444445,0.9142857142857143,0.9444444444444445,95.67517979328868
"Ensure the `email_address` column matches the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.","expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
Ensure the `SKU` column contains only unique values. Ensure this field is required (not null).,"expect_column_values_to_be_unique(column=""SKU""),expect_column_values_to_not_be_null(column=""SKU"")","expect_column_to_exist(column=""SKU""),expect_column_values_to_be_unique(column=""SKU""),expect_column_values_to_not_be_null(column=""SKU"")",0.85,0.8421052631578948,0.85,71.41300691065217
Validate that the `block_timestamp` values conform to the Unix time format.,"expect_column_values_to_match_regex(column=""block_timestamp"", regex=r""^\d{10}$"")","expect_column_values_to_match_strftime_format(column=""block_timestamp"", strftime_format=""%s""),expect_column_values_to_be_between(column=""block_timestamp"", min_value=1, max_value=10 * 1000 * 60 * 60 * 24 * 7)  # Assuming timestamp values between 1 min to 7 days before the current timestamp (e.g., block_timestamp_values > time.time() - (7 days * 24 * 60 * 60) and block_timestamp_values < time.time() # Assuming the timestamp format is ""time.time()"" as specified in the original post.",0.19999999999999998,0.13636363636363635,0.19999999999999998,11.629327805328249
"Verify that the `jurisdiction` field aligns with the specified set `['Federal', 'State', 'Local']`. Ensure non-null entries.","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local']),expect_column_values_to_not_be_null(column=""jurisdiction"")","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local']),expect_column_values_to_not_be_null(column=""jurisdiction"")",1.0,1.0,1.0,100.00000000000004
Check that the `follower_count` column passes a KS test for a normal distribution with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""follower_count"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""follower_count"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
In the `watch_history` table: Ensure the `watch_time` column passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""watch_time"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""watch_time"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For fields `quantity` and `sold`: Ensure the sum of `quantity` and `sold` equals `inventory_count`.,"expect_multicolumn_sum_to_equal(column_list=[""quantity"", ""sold""], target_column=""inventory_count"")","expect_multicolumn_sum_to_equal(column_list=[""quantity"", ""sold""], sum_column=""inventory_count"")",0.9230769230769231,0.8333333333333334,0.9230769230769231,92.10500207490826
"Verify that the distinct values in the `state` column match the set `['CA', 'TX', 'NY', 'FL']`.","expect_column_distinct_values_to_equal_set(column=""state"", value_set=['CA', 'TX', 'NY', 'FL'])","expect_column_distinct_values_to_match_set(column=""state"", value_set=[""CA"", ""TX"", ""NY"", ""FL""])",0.9333333333333333,0.8571428571428571,0.9333333333333333,54.67863286212664
"Ensure the `category` column contains only distinct values matching `['Electronics', 'Clothing', 'Home & Garden']`.","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home & Garden'])","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home & Garden'])",1.0,1.0,1.0,100.00000000000004
Confirm that the combination of `show_id` and `season_number` is unique across all records in the dataset.,"expect_compound_columns_to_be_unique(column_A=""show_id"", column_B=""season_number"")","expect_compound_columns_to_be_unique(column_list=[""show_id"", ""season_number""])",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.7176346014632
For field 'supplier_id': Ensure this field is required (not null). Ensure values in (supplier_id) must exist in the suppliers table. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_ids)  # Note: suppliers_table_ids should be defined based on the actual supplier IDs from the suppliers table.","expect_column_to_exist(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_ids),expect_column_values_to_be_unique(column=""supplier_id"")",0.7608695652173912,0.7333333333333334,0.6739130434782609,77.90635733390361
"For the `consumption` column, validate that the maximum value does not exceed 10000.","expect_column_max_to_be_between(column=""consumption"", max_value=10000)","expect_column_max_to_be_between(column=""consumption"", min_value=None, max_value=10000)",0.88,0.7826086956521738,0.88,76.07075582109388
Ensure the `release_date` column contains dates that are not in the future.,"expect_column_values_to_be_between(column=""release_date"", min_value=None, max_value=""current_date"")","expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_in_set(column=""release_date"", value_set=[datetime.now() for datetime in date_range(start=datetime.date.today, end=datetime.date(2030, 1, 1))])",0.4,0.22641509433962267,0.4,23.56849427171067
Ensure that the distribution of `guest_satisfaction_scores` passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""guest_satisfaction_scores"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""guest_satisfaction_scores"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'temperature': Ensure the field is required (not null). Ensure all values in 'temperature' are of type 'float'. Validate that values are within the realistic temperature range (-50 to 50 degrees Celsius).,"expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_to_exist(column=""temperature""),expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",0.9189189189189189,0.9166666666666666,0.9189189189189189,83.78118474521665
Ensure that there are no missing values in the `resident_name` column and that every name follows the type 'text'.,"expect_column_values_to_not_be_null(column=""resident_name""),expect_column_values_to_be_of_type(column=""resident_name"", type_=""text"")","expect_column_values_to_not_be_null(column=""resident_name""),expect_column_values_to_be_of_type(column=""resident_name"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Verify that the number of rows in the `daily_weather` table is equal to 365.,"expect_table_row_count_to_equal(table=""daily_weather"", value=365)",expect_table_row_count_to_equal(365),0.7777777777777778,0.625,0.7777777777777778,43.60299025004959
For field 'created_at': Ensure the field matches the type 'date'. Validate that all dates in (created_at) are not in the future. Ensure this field exists.,"expect_column_to_exist(column=""created_at""),expect_column_values_to_be_of_type(column=""created_at"", type_=""date""),expect_column_values_to_be_between(column=""created_at"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_to_exist(column=""created_at""),expect_column_values_to_be_of_type(column=""created_at"", type_=""date""),expect_column_values_to_be_decreasing(column=""created_at"")",0.8307692307692307,0.7936507936507936,0.8307692307692307,68.65849249708975
For the `tariff_rate` field: Validate that all entries are positive decimal numbers. Ensure that the column has no missing values.,"expect_column_values_to_be_between(column=""tariff_rate"", min_value=0.01),expect_column_values_to_not_be_null(column=""tariff_rate"")","expect_column_values_to_be_between(column=""tariff_rate"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""tariff_rate"")",0.9166666666666666,0.8695652173913043,0.9166666666666666,84.02651341260783
Ensure the `release_date` column contains dates formatted as 'YYYY-MM-DD' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")",1.0,1.0,1.0,100.00000000000004
In the `patient_id` column: Ensure all values are unique and match the type 'integer'. Ensure this field is required.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_not_be_null(column=""patient_id"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_not_be_null(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'username': Ensure all values in (username) match the pattern '^[a-zA-Z0-9_]{3,15}$'. Ensure this field exists.","expect_column_to_exist(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")","expect_column_to_exist(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",1.0,1.0,1.0,100.00000000000004
For field 'platforms': Ensure values in 'platforms' adhere to a valid JSON format and match the specified schema defining valid platforms.,"expect_column_values_to_be_json_parseable(column=""platforms""),expect_column_values_to_match_json_schema(column=""platforms"", schema={""type"": ""array"", ""items"": {""type"": ""string"", ""enum"": [""platform1"", ""platform2"", ""platform3""]}})","expect_column_values_to_match_json_schema(column=""platforms"", schema={  ""type"": ""object"",  ""properties"": {    ""platforms"": {      ""type"": ""array""    },    ""version"": {      ""type"": ""string"",      ""minLength"": 4,      ""maxLength"": 20    }  },  ""required"": [""platforms""]  })",0.5660377358490566,0.47058823529411764,0.5283018867924528,55.50624192742808
"Ensure the `call_duration` values are within the range of 0 to 3600 seconds, indicating durations in hours.","expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)","expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)",1.0,1.0,1.0,100.00000000000004
"Ensure the `games_played` column values are within the range of 0 to 82, inclusive.","expect_column_values_to_be_between(column=""games_played"", min_value=0, max_value=82)","expect_column_values_to_be_between(column=""games_played"", min_value=0, max_value=82)",1.0,1.0,1.0,100.00000000000004
Ensure the `email_subject` field exists and contains a maximum of 255 characters without any null values.,"expect_column_to_exist(column=""email_subject""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=0, max_value=255),expect_column_values_to_not_be_null(column=""email_subject"")","expect_column_to_exist(column=""email_subject""),expect_column_max_value_to_be_between(column=""email_subject"", min_value=1, max_value=255),expect_column_values_to_not_be_null(column=""email_subject"")",0.9393939393939394,0.84375,0.9393939393939394,91.90091564511407
For field 'watch_time': Validate that the sum of all watch times in the column does not exceed 500 hours.,"expect_column_sum_to_be_between(column=""watch_time"", min_value=0, max_value=1800000)","expect_column_sum_to_be_between(column=""watch_time"", min_value=None, max_value=500)",0.8666666666666667,0.7857142857142857,0.8666666666666667,85.70980059247852
"Verify that the `transaction_amount` column contains only values within the range of $1 to $10,000.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=1, max_value=10000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=1, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For field 'insurance_policy_number': Ensure the field matches the type 'text'. Ensure values in (insurance_policy_number) are unique. Ensure this field exists.,"expect_column_to_exist(column=""insurance_policy_number""),expect_column_values_to_be_of_type(column=""insurance_policy_number"", type_=""text""),expect_column_values_to_be_unique(column=""insurance_policy_number"")","expect_column_to_exist(column=""insurance_policy_number""),expect_column_values_to_be_of_type(column=""insurance_policy_number"", type_=""text""),expect_column_values_to_be_unique(column=""insurance_policy_number"")",1.0,1.0,1.0,100.00000000000004
For field 'settlement_amount': Ensure this field exists. Validate that the average 'settlement_amount' across cases is above a specified minimum value.,"expect_column_to_exist(column=""settlement_amount""),expect_column_mean_to_be_between(column=""settlement_amount"", min_value=specified_minimum_value, max_value=None)","expect_column_to_exist(column=""settlement_amount""),expect_column_mean_to_be_between(column=""settlement_amount"", min_value=specified_min_value)",0.888888888888889,0.8372093023255814,0.888888888888889,82.11934280838774
Ensure the `delivery_date` column contains valid date formats and falls within the range of the current fiscal year.,"expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""2023-10-01"", max_value=""2023-10-31"")",0.9310344827586207,0.8571428571428571,0.9310344827586207,92.23765517412046
For field `enrollment_date`: Ensure the field matches the type 'datetime' and that it is not earlier than the course start date.,"expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""datetime""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""enrollment_date"", column_B=""course_start_date"")","expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""datetime""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=course_start_date)",0.8070175438596492,0.6181818181818183,0.8070175438596492,65.82715895099548
Ensure the `meter_id` field is unique and matches the type 'string'. Confirm that this field does not contain null values.,"expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string""),expect_column_values_to_not_be_null(column=""meter_id"")","expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string""),expect_column_values_to_not_be_null(column=""meter_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `content_length` column has a mean value of at least 100 characters and does not contain any negative values.,"expect_column_mean_to_be_between(column=""content_length"", min_value=100),expect_column_values_to_be_between(column=""content_length"", min_value=0, max_value=None)","expect_column_mean_to_be_between(column=""content_length"", min_value=100, max_value=None),expect_column_values_to_be_between(column=""content_length"", min_value=0, max_value=1000)",0.9473684210526316,0.9090909090909091,0.912280701754386,88.13227160952752
"For field 'malware_signature': Ensure the field matches the type 'text'. Validate that the length of each signature string is between 10 and 100 characters and conforms to the regex pattern '^[a-fA-F0-9]{10,100}$'.","expect_column_values_to_be_of_type(column=""malware_signature"", type_=""text""),expect_column_value_lengths_to_be_between(column=""malware_signature"", min_value=10, max_value=100),expect_column_values_to_match_regex(column=""malware_signature"", regex=r""^[a-fA-F0-9]{10,100}$"")","expect_column_values_to_be_of_type(column=""malware_signature"", type_=""text""),expect_column_value_lengths_to_be_between(column=""malware_signature"", min_value=10, max_value=100),expect_column_values_to_match_regex(column=""malware_signature"", regex=""^[a-fA-F0-9]{10,100}$"")",0.9887640449438202,0.9655172413793104,0.9887640449438202,97.47765987505922
For field 'email_address': Ensure the expect column to exist; Ensure this field matches the format 'email' and is required (not null).,"expect_column_to_exist(column=""email_address""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""email_address""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.8055555555555555,0.7714285714285716,0.8055555555555555,81.77032961392565
For 'post_content': Ensure that the length of each entry does not exceed 280 characters and that no null entries exist.,"expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")","expect_column_value_lengths_to_be_between(column=""post_content"", min_value=1, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")",0.9615384615384616,0.92,0.9615384615384616,95.42978616972013
"For field 'email_address': Ensure the field matches the type 'text'. Validate that all values in (email_address) conform to the standard email format using the regex pattern '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}' and are not null.","expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}')","expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'),expect_column_values_to_not_be_null(column=""email_address"")",1.0,0.9772727272727273,0.7777777777777778,94.82268283293062
For field 'meter_id': Ensure the field is required (not null). Ensure the field matches the type 'string'. Ensure this field exists.,"expect_column_to_exist(column=""meter_id""),expect_column_values_to_not_be_null(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string"")","expect_column_to_exist(column=""meter_id""),expect_column_values_to_not_be_null(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Ensure the `rating` column values fall within the range of 1 to 10.,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
Check that the `delivery_time` column conforms to the expected distribution parameters with KL divergence below 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""delivery_time"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""delivery_time"", threshold=0.1)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `likes` column contains non-negative integers and the total number of likes across all posts does not exceed 1,000,000.","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""likes"", min_value=None, max_value=1000000)","expect_column_values_to_be_between(column=""likes"", min_value=0),expect_column_sum_to_be_between(column=""likes"", max_value=1000000)",0.88,0.7916666666666667,0.88,74.42203371744152
Verify that the `filing_date` column contains dates within the last 10 years and that the average difference between `filing_date` and `resolution_date` is less than 180 days.,"expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_between(column=""filing_date"", min_value=""2013-10-01"", max_value=""2023-10-01""),expect_column_mean_to_be_between(column=""filing_date"", mean_value=180)  # Note: This line assumes you can compute mean difference which may require additional logic not specified in the prompt.","expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_between(column=""filing_date"", min_value=""2013-10-01"", max_value=""today""),expect_column_mean_to_be_between(column=""resolution_date"", min_value=""180"", max_value=""180"")",0.7058823529411764,0.64,0.7058823529411764,68.63712689725679
Check that the sum of the `discount` column does not exceed 1000 across all transactions.,"expect_column_sum_to_be_between(column=""discount"", min_value=0, max_value=1000)","expect_column_sum_to_be_between(column=""discount"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'research_date': Ensure the field matches the type 'datetime'. Validate that all dates conform to 'YYYY-MM-DD' format.,"expect_column_values_to_be_of_type(column=""research_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""research_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_of_type(column=""research_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""research_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"Check that the `discount` column only accepts values from the set `['0%', '5%', '10%', '15%', '20%']`.","expect_column_values_to_be_in_set(column=""discount"", value_set=['0%', '5%', '10%', '15%', '20%'])","expect_column_values_to_be_in_set(column=""discount"", value_set=['0%', '5%', '10%', '15%', '20%'])",1.0,1.0,1.0,100.00000000000004
For field 'loading_time': Ensure this field exists and matches the format '%H:%M:%S'. Validate that all values in (loading_time) are within a 24-hour range.,"expect_column_to_exist(column=""loading_time""),expect_column_values_to_match_strftime_format(column=""loading_time"", strftime_format=""%H:%M:%S""),expect_column_values_to_be_between(column=""loading_time"", min_value=""00:00:00"", max_value=""23:59:59"")","expect_column_to_exist(column=""loading_time""),expect_column_values_to_match_strftime_format(column=""loading_time"", strftime_format=""%H:%M:%S""),expect_column_values_to_be_between(column=""loading_time"", min_value=""00:00:00"", max_value=""23:59:59"")",1.0,1.0,1.0,100.00000000000004
Ensure the `timestamp` column values adhere to the ISO 8601 datetime format.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S%Z"")",0.9444444444444444,0.9411764705882353,0.9444444444444444,90.51368793902999
For fields `doctor_id` and `patient_id`: Ensure combinations of these fields are unique. Ensure both fields exist and are not null.,"expect_compound_columns_to_be_unique(column_A=""doctor_id"", column_B=""patient_id""),expect_column_to_exist(column=""doctor_id""),expect_column_to_exist(column=""patient_id""),expect_column_values_to_not_be_null(column=""doctor_id""),expect_column_values_to_not_be_null(column=""patient_id"")","expect_column_values_to_be_unique(column=""doctor_id""),expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""doctor_id""),expect_column_values_to_not_be_null(column=""patient_id"")",0.7906976744186046,0.7142857142857143,0.7906976744186046,66.54066434334449
For the `case_number` field: Ensure all values are unique and of type 'string'. The field must not contain null entries.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""string""),expect_column_values_to_not_be_null(column=""case_number"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""string""),expect_column_values_to_not_be_null(column=""case_number"")",1.0,1.0,1.0,100.00000000000004
Check that the `hire_date` column contains only dates that are earlier than the current date.,"expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_in_set(column=""hire_date"", value_set=[date for date in hire_dates if date < datetime.now()])","expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"")",0.391304347826087,0.2727272727272727,0.391304347826087,19.171881433182662
For field 'ballot_status': Ensure the field exists. Validate that all values in 'ballot_status' match the pattern '^(cast|pending|rejected)$'.,"expect_column_to_exist(column=""ballot_status""),expect_column_values_to_match_regex(column=""ballot_status"", regex=r""^(cast|pending|rejected)$"")","expect_column_to_exist(column=""ballot_status""),expect_column_values_to_match_regex(column=""ballot_status"", regex=r""^cast|pending|rejected$"")",1.0,1.0,1.0,89.91414619566558
Ensure the `medical_history` column contains valid JSON objects with required keys such as `conditions` and `medications`.,"expect_column_values_to_match_json_schema(column=""medical_history"", schema={""type"": ""object"", ""required"": [""conditions"", ""medications""]})","expect_column_values_to_match_json_schema(column=""medical_history"", schema={""type"": ""object"", ""required"": [""conditions"", ""medications""], ""properties"": {""conditions"": {""type"": ""array""}, ""medications"": {""type"": ""array""}}})",0.8205128205128205,0.8108108108108109,0.8205128205128205,56.166332018047015
Confirm that the `diagnosis_code` column contains only values from the defined set of ICD-10 codes.,"expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=icd_10_codes)  # Replace icd_10_codes with the actual set of ICD-10 codes.","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=[""ICD-10 codes defined by law""])",0.6666666666666667,0.6511627906976744,0.6666666666666667,54.26698128381144
For table 'comments': Ensure the 'comment_text' column exists. Ensure that the number of rows does not exceed 1000.,"expect_column_to_exist(column=""comment_text""),expect_table_row_count_to_be_between(max_value=1000)","expect_table_columns_to_match_set(column_set=[""comment_text""]),expect_table_row_count_to_be_between(table=""comments"", min_value=0, max_value=1000)",0.7619047619047621,0.5499999999999999,0.7619047619047621,45.76318980860575
For the `temperature` column: Ensure values fall within the valid range of -40 to 125 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125)","expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125)",1.0,1.0,1.0,100.00000000000004
"For field 'category': Ensure this field contains only distinct values matching ['Electronics', 'Apparel', 'Home']. Ensure the field is required.","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home']),expect_column_values_to_be_unique(column=""category""),expect_column_values_to_not_be_null(column=""category"")",0.7777777777777777,0.6923076923076923,0.7777777777777777,65.79362428248005
Ensure that the `timestamp` column contains datetime strings that can be parsed using dateutil and are in the format 'YYYY-MM-DDTHH:MM:SSZ'.,"expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_be_in_set(column=""timestamp"", value_set=[date_string for date_string in timestamp_strings if parseable_date_time(date_string)], parseable_date_time=parse_date_time, date_format=""%Y-%m-%dT%H:%M:%SZ"")",0.5121951219512195,0.39999999999999997,0.48780487804878053,38.58048354014411
Ensure the `contract_start_date` is earlier than `contract_end_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""contract_start_date"", column_B=""contract_end_date"")","expect_column_pair_values_A_to_be_less_than_B(column_A=""contract_start_date"", column_B=""contract_end_date"")",0.9500000000000001,0.8947368421052632,0.9500000000000001,94.0028651976138
Ensure the `description` column does not exceed 500 characters and is not empty.,"expect_column_value_lengths_to_be_between(column=""description"", min_value=1, max_value=500),expect_column_values_to_not_be_null(column=""description"")","expect_column_value_lengths_to_be_between(column=""description"", min_value=1, max_value=500),expect_column_values_to_not_be_null(column=""description"")",1.0,1.0,1.0,100.00000000000004
For field 'phone_number': Ensure all phone numbers follow the format '(XXX) XXX-XXXX' and validate that no duplicate numbers exist.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_be_unique(column=""phone_number"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_be_unique(column=""phone_number"")илася",1.0,1.0,1.0,98.53975403131594
"Ensure the standard deviation of the `block_time` column is less than 2 minutes, indicating stability in block generation.","expect_column_stdev_to_be_between(column=""block_time"", min_value=0, max_value=120)","expect_column_stdev_to_be_between(column=""block_time"", min_value=0, max_value=2)",0.9333333333333333,0.9285714285714286,0.9333333333333333,94.20254600938034
Ensure the `goals_scored` column's median value is above 10 for the current season.,"expect_column_median_to_be_between(column=""goals_scored"", min_value=10)","expect_column_median_to_be_between(column=""goals_scored"", min_value=10)",1.0,1.0,1.0,100.00000000000004
"Verify that the `case_status` column contains only values from the set `['Open', 'Closed', 'Pending']`.","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
Verify that the `account_balance` column values are greater than or equal to the corresponding `minimum_balance` column for all accounts.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""account_balance"", column_B=""minimum_balance"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""account_balance"", column_B=""minimum_balance"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values are unique across all domains.,"expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""int""),expect_column_values_to_be_unique(column=""transaction_id"")","expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""int""),expect_column_values_to_be_unique(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
Validate the `like_count` column to ensure all values are non-negative integers.,"expect_column_values_to_be_of_type(column=""like_count"", type_=""int""),expect_column_values_to_be_between(column=""like_count"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""like_count"", type_=""int""),expect_column_values_to_be_between(column=""like_count"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""like_count"")",0.8437499999999999,0.8387096774193548,0.8437499999999999,72.44921054993004
For table `game_reviews`: Ensure the number of rows is equal to the number of games in the `games` table.,"expect_table_row_count_to_equal_other_table(table_name=""game_reviews"", other_table_name=""games"")","expect_table_row_count_to_be_between(min_value=0, max_value=10)",0.3448275862068966,0.2962962962962963,0.3448275862068966,27.14415412653877
"Ensure the `weather_condition` column contains only valid categories from `['Sunny', 'Rainy', 'Cloudy', 'Stormy']`.","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])",1.0,1.0,1.0,100.00000000000004
Ensure the `message_content` field is of type 'text' and does not contain null values. Validate that it meets a minimum length of 10 characters.,"expect_column_values_to_be_of_type(column=""message_content"", type_=""text""),expect_column_values_to_not_be_null(column=""message_content""),expect_column_value_lengths_to_be_between(column=""message_content"", min_value=10, max_value=None)","expect_column_values_to_not_be_null(column=""message_content""),expect_column_values_to_be_of_type(column=""message_content"", type_=""text""),expect_column_value_lengths_to_be_between(column=""message_content"", min_value=10)",0.958904109589041,0.9577464788732395,0.7945205479452055,91.97720813638108
For field `team_id`: Ensure the field is required (not null). Verify that values in `team_id` exist in the `teams` table.,"expect_column_values_to_not_be_null(column=""team_id""),expect_column_values_to_be_in_set(column=""team_id"", value_set=teams_table_values)  # Note: teams_table_values should be defined as the distinct values from the teams table.","expect_column_values_to_not_be_null(column=""team_id""),expect_column_values_to_be_in_set(column=""team_id"", value_set=teams_table_values)",0.7692307692307693,0.761904761904762,0.7692307692307693,69.51439283988792
"Validate that the `user_id` column exists and contains unique identifiers that are alphanumeric, following the format 'USER-XXXX'.","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^USER-\d{4}$"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^USER-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
Check that the `recipient_list` column contains valid JSON arrays and conforms to the specified JSON schema for email recipients.,"expect_column_values_to_be_json_parseable(column=""recipient_list""),expect_column_values_to_match_json_schema(column=""recipient_list"", schema={...})  # Replace {...} with the actual schema.","expect_column_values_to_be_json_parseable(column=""recipient_list""),expect_column_values_to_match_json_schema(column=""recipient_list"", schema={})  # Replace with the actual schema for email recipients.",0.9454545454545454,0.9433962264150945,0.9454545454545454,81.19642577574776
"For the `published_date` column, ensure values are in the format `'%Y-%m-%d %H:%M:%S'` and can be parsed correctly. Confirm that all values are valid.","expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""published_date"")","expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""published_date"")",1.0,1.0,1.0,90.5619259480469
For field 'viewing_history': Ensure the field contains valid JSON objects and conforms to the specified JSON schema for viewing records.,"expect_column_values_to_be_json_parseable(column=""viewing_history""),expect_column_values_to_match_json_schema(column=""viewing_history"", schema=""your_json_schema_here"")","expect_column_values_to_be_json_parseable(column=""viewing_history""),expect_column_values_to_match_json_schema(column=""viewing_history"")  # Replace with the actual schema, if available.",0.8076923076923077,0.76,0.8076923076923077,78.31491450084015
Check that the `billing_cycle` column is formatted correctly as `MM/YYYY` for all entries.,"expect_column_values_to_match_regex(column=""billing_cycle"", regex=r""^(0[1-9]|1[0-2])\/\d{4}$"")","expect_column_values_to_match_strftime_format(column=""billing_cycle"", strftime_format=""%m/%Y"")",0.48484848484848486,0.3870967741935484,0.48484848484848486,32.762692329693095
"Verify that the `district_code` values match the specified set of known district codes: ['D01', 'D02', 'D03'].","expect_column_values_to_be_in_set(column=""district_code"", value_set=['D01', 'D02', 'D03'])","expect_column_values_to_be_in_set(column=""district_code"", value_set=['D01', 'D02', 'D03'])",1.0,1.0,1.0,100.00000000000004
Ensure the `gas_price` column values are within the range of 0 to 100 Gwei.,"expect_column_values_to_be_between(column=""gas_price"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""gas_price"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `order_date` column follows the format `'%Y-%m-%d'` and is not older than one year from the current date.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""order_date"")  # Sort the dates in descending order to ensure the latest dates come first.",0.7419354838709677,0.7000000000000001,0.7419354838709677,65.88108062816086
Validate the `image_url` field to ensure all entries match the URL pattern and do not exceed 200 characters in length.,"expect_column_values_to_match_regex(column=""image_url"", regex=r""^(https?://[^\s]+)$""),expect_column_value_lengths_to_be_between(column=""image_url"", min_value=1, max_value=200)","expect_column_values_to_match_regex(column=""image_url"", regex=r""^https://.+\.jpg$""),expect_column_value_lengths_to_be_between(column=""image_url"", min_value=0, max_value=200)",0.9310344827586207,0.8571428571428571,0.9310344827586207,79.84273460174862
For field 'document_path': Ensure the field exists. Ensure the field matches the type 'text'. Ensure the file at (document_path) exists and is not empty.,"expect_column_to_exist(column=""document_path""),expect_column_values_to_be_of_type(column=""document_path"", type_=""text""),expect_file_to_exist(file_path=document_path), ,expect_file_size_to_be_between(file_path=document_path, min_value=1, max_value=None)","expect_column_to_exist(column=""document_path""),expect_column_values_to_be_of_type(column=""document_path"", type_=""text""),expect_file_to_exist(file_path=(document_path)),expect_file_size_to_not_be_zero(file_path=(document_path))",0.8888888888888888,0.8354430379746834,0.8888888888888888,77.52634840734362
Verify that the `medication_dosage` values are greater than zero and less than or equal to 500 mg.,"expect_column_values_to_be_between(column=""medication_dosage"", min_value=0, max_value=500)","expect_column_values_to_be_between(column=""medication_dosage"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
"Check that the `privacy_setting` column contains only values from the set `['Public', 'Private', 'Friends']`.","expect_column_values_to_be_in_set(column=""privacy_setting"", value_set=['Public', 'Private', 'Friends'])","expect_column_values_to_be_in_set(column=""privacy_setting"", value_set=['Public', 'Private', 'Friends'])",1.0,1.0,1.0,100.00000000000004
Check that the `user_engagement_score` column has a KL divergence below 0.05 from the expected engagement distribution across platforms.,"expect_column_kl_divergence_to_be_less_than(column=""user_engagement_score"", threshold=0.05)","expect_column_kl_divergence_to_be_less_than(column=""user_engagement_score"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"For the `transaction_status` field: Ensure values are from the set ['Pending', 'Confirmed', 'Failed'] with no null entries.","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['Pending', 'Confirmed', 'Failed']),expect_column_values_to_not_be_null(column=""transaction_status"")","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['Pending', 'Confirmed', 'Failed']),expect_column_values_to_not_be_null(column=""transaction_status"")",1.0,1.0,1.0,100.00000000000004
For field 'amenities': Validate that entries are valid JSON objects and conform to the specified JSON schema. Ensure this field exists.,"expect_column_to_exist(column=""amenities""),expect_column_values_to_be_json_parseable(column=""amenities""),expect_column_values_to_match_json_schema(column=""amenities"", schema=""your_json_schema_here"")","expect_column_to_exist(column=""amenities""),expect_column_values_to_match_json_schema(column=""amenities"", schema=""specified schema""),expect_column_values_to_be_json_parseable(column=""amenities"")",0.9285714285714286,0.8518518518518519,0.7142857142857143,87.41765745812822
For field 'data_collection_date': Ensure all entries conform to the format 'YYYY-MM-DD' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""data_collection_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""data_collection_date"")","expect_column_values_to_match_strftime_format(column=""data_collection_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""data_collection_date"")",1.0,1.0,1.0,100.00000000000004
For field 'case_status': Ensure the field matches the type 'text'. Validate that values do not exceed 50 characters and belong to the set of predefined statuses.,"expect_column_values_to_be_of_type(column=""case_status"", type_=""text""),expect_column_value_lengths_to_be_between(column=""case_status"", min_value=0, max_value=50),expect_column_values_to_be_in_set(column=""case_status"", value_set=[""status1"", ""status2"", ""status3"", ...])  # Replace ... with actual predefined statuses","expect_column_values_to_be_of_type(column=""case_status"", type_=""text""),expect_column_value_lengths_to_be_between(column=""case_status"", min_value=0, max_value=50),expect_column_values_to_be_in_set(column=""case_status"", value_set=[""Active"", ""Inactive"", ""Deleted""])",0.8791208791208791,0.8764044943820225,0.8791208791208791,81.44033272306243
For the `wind_speed` field: Ensure values are non-negative. Ensure this field matches the type 'float'.,"expect_column_values_to_be_between(column=""wind_speed"", min_value=0),expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float"")","expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float"")",0.9411764705882353,0.8979591836734695,0.9411764705882353,87.54021059663508
"For field 'delivery_cost': Ensure the sum of 'delivery_cost' across all entries is less than $10,000. Validate that the unique value count aligns with expected delivery types.","expect_column_sum_to_be_between(column=""delivery_cost"", min_value=None, max_value=10000),expect_column_unique_value_count_to_be_between(column=""delivery_cost"", min_value=1, max_value=expected_unique_count)","expect_column_sum_to_be_between(column=""delivery_cost"", min_value=None, max_value=10000),expect_column_unique_value_count_to_equal(column=""delivery_cost"", value=1) # Assuming there is only one delivery type.",0.7647058823529412,0.696969696969697,0.7647058823529412,73.53000949115729
For the field 'json_data': Validate that all entries are valid JSON objects and conform to the specified JSON schema. Ensure no entries are malformed.,"expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={})  # Specify schema as required.",0.8749999999999999,0.8695652173913043,0.8749999999999999,85.11087427738482
Confirm that the total number of rows in the `player_stats` table matches the number of entries in the `games` table.,"expect_table_row_count_to_equal_other_table(table=""player_stats"", other_table=""games"")","expect_table_row_count_to_equal_other_table(table=""player_stats"", other_table=""games"")",1.0,1.0,1.0,100.00000000000004
"For field 'email_verified': Ensure this field must contain only values from the set ['true', 'false']. Ensure this field is required (not null).","expect_column_values_to_be_in_set(column=""email_verified"", value_set=[""true"", ""false""]),expect_column_values_to_not_be_null(column=""email_verified"")","expect_column_values_to_be_in_set(column=""email_verified"", value_set=['true', 'false']),expect_column_values_to_not_be_null(column=""email_verified"")",1.0,1.0,1.0,85.50022682580251
Ensure the `device_id` column contains only unique identifiers that conform to the pattern `^[A-F0-9]{12}$`.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_match_regex(column=""device_id"", regex=r""^[A-F0-9]{12}$"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_match_regex(column=""device_id"", regex=r""^[A-F0-9]{12}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` column matches the type 'string' and contains no duplicate entries.,"expect_column_values_to_be_of_type(column=""user_id"", type_=""string""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_be_of_type(column=""user_id"", type_=""string""),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
For the `amount` column: Validate that all entries are positive numbers and the mean value exceeds $100.,"expect_column_values_to_be_between(column=""amount"", min_value=0),expect_column_mean_to_be_between(column=""amount"", lower_bound=100)","expect_column_values_to_be_between(column=""amount"", min_value=100),expect_column_mean_to_be_between(column=""amount"", min_value=100)",0.8636363636363636,0.7619047619047619,0.8636363636363636,85.4614595673399
"Check that the `age` column contains integer values within the range of 13 to 120, and verify no missing values are present.","expect_column_values_to_be_between(column=""age"", min_value=13, max_value=120),expect_column_values_to_not_be_null(column=""age"")","expect_column_values_to_be_between(column=""age"", min_value=13, max_value=120),expect_column_values_to_not_be_null(column=""age"")",1.0,1.0,1.0,100.00000000000004
"For the `registration_count` column, ensure the mean value is above the threshold of 1000 and the standard deviation does not exceed 200.","expect_column_mean_to_be_between(column=""registration_count"", min_value=1000),expect_column_stdev_to_be_between(column=""registration_count"", max_value=200)","expect_column_mean_to_be_between(column=""registration_count"", min_value=1000, max_value=None),expect_column_stdev_to_be_between(column=""registration_count"", min_value=0, max_value=200)",0.888888888888889,0.8076923076923076,0.888888888888889,77.42274353502884
Ensure the `payment_amount` is a positive numeric value and falls within the range of 0.01 to 10000.00.,"expect_column_values_to_be_between(column=""payment_amount"", min_value=0.01, max_value=10000.00),expect_column_values_to_be_of_type(column=""payment_amount"", type_=""float"")","expect_column_values_to_be_greater_than(column=""payment_amount"", value=0.01),expect_column_values_to_be_less_than(column=""payment_amount"", value=10000.01),expect_column_values_to_be_of_type(column=""payment_amount"", type_=""float"")",0.746268656716418,0.6153846153846154,0.746268656716418,59.01764210861503
Ensure the `performance_review` JSON data conforms to the specified schema and matches the expected structure.,"expect_column_values_to_match_json_schema(column=""performance_review"", schema=""your_schema_here"")","expect_column_values_to_match_json_schema(column=""performance_review""),expect_column_values_to_be_of_type(column=""performance_review"", type_=""dict""),expect_column_values_to_have_expected_keys(column=""performance_review"", key_list=[""name"", ""date"", ""rating"", ""comment""])",0.3846153846153846,0.36000000000000004,0.3846153846153846,23.291301617528287
"Validate that the `platform` column only contains values from the set `['PC', 'Console', 'Mobile']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])",1.0,1.0,1.0,100.00000000000004
"For the `status` column: Ensure it contains values from the set `['active', 'inactive', 'maintenance']` and does not contain null entries.","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'maintenance']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive"", ""maintenance""]),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,78.98083643452483
Ensure that the column `incident_reported` has no missing values and follows the format of 'Yes' or 'No'.,"expect_column_values_to_not_be_null(column=""incident_reported""),expect_column_values_to_match_set(column=""incident_reported"", value_set=[""Yes"", ""No""])","expect_column_values_to_not_be_null(column=""incident_reported""),expect_column_values_to_be_in_set(column=""incident_reported"", value_set=['Yes', 'No'])",0.9361702127659574,0.888888888888889,0.9361702127659574,80.89908224779329
"Validate that the `performance_score` column has a standard deviation of less than 1.5, indicating consistency in evaluations.","expect_column_stdev_to_be_between(column=""performance_score"", min_value=0, max_value=1.5)","expect_column_stdev_to_be_between(column=""performance_score"", min_value=0, max_value=1.5)",1.0,1.0,1.0,100.00000000000004
"For field 'customer_segment': Ensure that column values do not match any pattern from the list ['Inactive', 'Fraudulent']. Validate that all segments are within the predefined set of valid segments.","expect_column_values_to_not_match_regex_list(column=""customer_segment"", regex_list=[""Inactive"", ""Fraudulent""]),expect_column_values_to_be_in_set(column=""customer_segment"", value_set=[""ValidSegment1"", ""ValidSegment2"", ""ValidSegment3""])  # Replace with actual valid segments","expect_column_values_to_not_match_regex_list(column=""customer_segment"", regex_list=['Inactive', 'Fraudulent']),expect_column_values_to_be_in_set(column=""customer_segment"", value_set=valid_customer_segments)",0.8923076923076922,0.8253968253968255,0.8923076923076922,65.22139120780834
Ensure the `total_amount` column values are in an increasing order across the dataset.,"expect_column_values_to_be_increasing(column=""total_amount"")","expect_column_values_to_be_increasing(column=""total_amount"")",1.0,1.0,1.0,100.00000000000004
"For field 'product_price': Validate that the field is a numeric type. Ensure values in (product_price) are greater than 0 and less than 10,000. Ensure this field exists.","expect_column_to_exist(column=""product_price""),expect_column_values_to_be_of_type(column=""product_price"", type_=""float""),expect_column_values_to_be_between(column=""product_price"", min_value=0, max_value=10000)","expect_column_to_exist(column=""product_price""),expect_column_values_to_be_of_type(column=""product_price"", type_=""float""),expect_column_values_to_be_between(column=""product_price"", min_value=1, max_value=10000),expect_column_values_to_not_be_null(column=""product_price"")",0.846153846153846,0.8157894736842105,0.846153846153846,74.59829779776634
Ensure that the `humidity` percentage values are unique and fall within the range of 0 to 100.,"expect_column_values_to_be_unique(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_unique(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For the `check_in_date` and `check_out_date`, confirm that `check_out_date` must be after `check_in_date`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")",1.0,1.0,1.0,100.00000000000004
Validate that the `email` column adheres to the format of a valid email address and contains no duplicate values.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_to_exist(column=""email""),expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")",0.5294117647058824,0.48484848484848486,0.5294117647058824,44.36826877257012
"Verify that the `price` column has all numeric values within the range of $50,000 and $5,000,000.","expect_column_values_to_be_between(column=""price"", min_value=50000, max_value=5000000)","expect_column_values_to_be_between(column=""price"", min_value=50000, max_value=5000000)",1.0,1.0,1.0,100.00000000000004
For fields 'goals_scored' and 'assists': Ensure that the sum of (goals_scored) and (assists) equals the total contributions for each player.,"expect_multicolumn_sum_to_equal(column_list=[""goals_scored"", ""assists""], target_column=""total_contributions"")","expect_multicolumn_sum_to_equal(column_list=['goals_scored', 'assists'], value='total_contributions')",0.888888888888889,0.8,0.888888888888889,42.753011225863304
Ensure the `sample_size` field contains only positive integers greater than zero.,"expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""sample_size"", type_=""int"")","expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=float('inf'))",0.9454545454545454,0.9056603773584906,0.5818181818181818,91.28479730518225
"For the `category` column: Validate that values are from the set `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
"For table 'case_documents': Ensure the columns 'document_id', 'case_number', and 'submission_date' exist. Validate that 'submission_date' adheres to the format '%Y-%m-%d'.","expect_table_columns_to_match_set(column_set=[""document_id"", ""case_number"", ""submission_date""]),expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""document_id""),expect_column_to_exist(column=""case_number""),expect_column_to_exist(column=""submission_date""),expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%d"")",0.7692307692307692,0.603174603174603,0.7692307692307692,59.06044895570967
Validate that the `likes_count` column contains only non-negative integers.,"expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
"For the `claim_data` field, ensure it adheres to the defined JSON schema, ensuring all required fields are present.","expect_column_values_to_match_json_schema(column=""claim_data"", schema={""type"": ""object"", ""required"": [""field1"", ""field2"", ""field3""]})","expect_column_values_to_match_json_schema(column=""claim_data"")",0.7407407407407407,0.72,0.7407407407407407,24.606143619660315
"Ensure the `alert_type` column has a distinct set of values matching `['High Risk', 'Medium Risk', 'Low Risk']`.","expect_column_distinct_values_to_equal_set(column=""alert_type"", value_set=[""High Risk"", ""Medium Risk"", ""Low Risk""])","expect_column_distinct_values_to_equal_set(column=""alert_type"", value_set=['High Risk', 'Medium Risk', 'Low Risk'])",1.0,1.0,1.0,63.79406085374213
Ensure that the `download_count` column has values that are greater than or equal to zero.,"expect_column_values_to_be_between(column=""download_count"", min_value=0)","expect_column_values_to_be_between(column=""download_count"", min_value=0)",1.0,1.0,1.0,100.00000000000004
For the `rating` field: Validate that values are between 1 and 5 and ensure no null values are present.,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
"For field 'mortgage_status': Ensure the field exists. Confirm that values in 'mortgage_status' match one of the predefined statuses: ['paid', 'unpaid', 'pending']. Ensure this field is not null.","expect_column_to_exist(column=""mortgage_status""),expect_column_values_to_be_in_set(column=""mortgage_status"", value_set=['paid', 'unpaid', 'pending']),expect_column_values_to_not_be_null(column=""mortgage_status"")","expect_column_to_exist(column=""mortgage_status""),expect_column_values_to_be_in_set(column=""mortgage_status"", value_set=['paid', 'unpaid', 'pending']),expect_column_values_to_not_be_null(column=""mortgage_status"")",1.0,1.0,1.0,100.00000000000004
"For the `suspicion_level` field: Validate that values are from the set `['Low', 'Medium', 'High']`. This field must not contain null values.","expect_column_values_to_be_in_set(column=""suspicion_level"", value_set=['Low', 'Medium', 'High']),expect_column_values_to_not_be_null(column=""suspicion_level"")","expect_column_values_to_be_in_set(column=""suspicion_level"", value_set=['Low', 'Medium', 'High']),expect_column_values_to_not_be_null(column=""suspicion_level"")",1.0,1.0,1.0,100.00000000000004
Ensure the `SKU` column contains only unique values and does not permit null entries.,"expect_column_values_to_be_unique(column=""SKU""),expect_column_values_to_not_be_null(column=""SKU"")","expect_column_values_to_be_unique(column=""SKU""),expect_column_values_to_not_be_null(column=""SKU"")",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_id` column contains unique values and does not include any null entries.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
For field 'invoice_number': Ensure the field matches the type 'integer'. Ensure values in (invoice_number) are unique across the dataset. Ensure this field exists.,"expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""int""),expect_column_values_to_be_unique(column=""invoice_number"")","expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""int""),expect_column_values_to_be_unique(column=""invoice_number"")",1.0,1.0,1.0,100.00000000000004
Ensure the `match_date` column contains valid datetime strings conforming to the format 'YYYY-MM-DD HH:MM:SS'.,"expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
For field 'zipcode': Ensure the field is required (not null). Ensure the values in 'zipcode' are unique. Ensure this field matches the type 'text'.,"expect_column_values_to_not_be_null(column=""zipcode""),expect_column_values_to_be_unique(column=""zipcode""),expect_column_values_to_be_of_type(column=""zipcode"", type_=""text"")","expect_column_to_exist(column=""zipcode""),expect_column_values_to_not_be_null(column=""zipcode""),expect_column_values_to_be_unique(column=""zipcode""),expect_column_values_to_be_of_type(column=""zipcode"", type_=""text"")",0.9032258064516129,0.9,0.9032258064516129,81.36245227996086
For field 'subscriber_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values are unique.,"expect_column_values_to_not_be_null(column=""subscriber_id""),expect_column_values_to_be_of_type(column=""subscriber_id"", type_=""int""),expect_column_values_to_be_unique(column=""subscriber_id"")","expect_column_values_to_not_be_null(column=""subscriber_id""),expect_column_values_to_be_of_type(column=""subscriber_id"", type_=""int""),expect_column_values_to_be_unique(column=""subscriber_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `service_request_id` column contains only unique values and matches the type 'string'.,"expect_column_values_to_be_unique(column=""service_request_id""),expect_column_values_to_be_of_type(column=""service_request_id"", type_=""string"")","expect_column_values_to_be_unique(column=""service_request_id""),expect_column_values_to_be_of_type(column=""service_request_id"", type_=""string"")атися",1.0,1.0,1.0,98.13001645077493
For field 'delivery_date': Validate that all values conform to the datetime format 'YYYY-MM-DD'. Ensure that 'delivery_date' is always greater than 'order_date' and there are no missing values.,"expect_column_to_exist(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date""),expect_column_values_to_not_be_null(column=""delivery_date"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date""),expect_column_values_to_not_be_null(column=""delivery_date"")",0.924731182795699,0.923076923076923,0.924731182795699,84.22173423711304
For field `reorder_level`: Ensure the field matches the type 'integer'. Validate that the `reorder_level` is less than or equal to the `quantity_on_hand`.,"expect_column_values_to_be_of_type(column=""reorder_level"", type_=""int""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""reorder_level"", column_B=""quantity_on_hand"")","expect_column_values_to_be_of_type(column=""reorder_level"", type_=""int""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""reorder_level"", column_B=""quantity_on_hand"")",1.0,1.0,1.0,100.00000000000004
Ensure the `account_number` column contains only distinct values and is not null.,"expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")","expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")",1.0,1.0,1.0,100.00000000000004
Ensure the `policy_number` column contains only unique values across all records.,"expect_column_values_to_be_unique(column=""policy_number"")","expect_column_values_to_be_unique(column=""policy_number"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `department` column values are from the set `['Sales', 'HR', 'IT', 'Finance']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'HR', 'IT', 'Finance'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'HR', 'IT', 'Finance'])",1.0,1.0,1.0,100.00000000000004
For field 'team_name': Ensure the field matches the type 'text'. Validate that all values conform to the pattern of valid team names using regex.,"expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_match_regex(column=""team_name"", regex=r""^[A-Za-z0-9\s&-]+$"")","expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_match_regex(column=""team_name"", regex=r"".{2,50}"")",0.8679245283018867,0.8627450980392156,0.8679245283018867,79.62626921561771
For field 'department_code': Ensure the field matches the type 'text'. Validate that all entries in (department_code) match the regex pattern for valid department codes. Ensure this field cannot be null.,"expect_column_values_to_be_of_type(column=""department_code"", type_=""text""),expect_column_values_to_not_be_null(column=""department_code""),expect_column_values_to_match_regex(column=""department_code"", regex=r""^[A-Z]{2,5}$"")","expect_column_values_to_be_of_type(column=""department_code"", type_=""text""),expect_column_values_to_match_regex(column=""department_code"", regex=r""^[A-Za-z0-9-]+$""),expect_column_values_to_not_be_null(column=""department_code"")",0.918918918918919,0.8888888888888888,0.7027027027027027,91.27485694036251
"Ensure that the `genre` column contains only distinct values from the set `['Action', 'Drama', 'Comedy']`.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy'])",1.0,1.0,1.0,100.00000000000004
Ensure the `player_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_not_be_null(column=""player_id"")","expect_column_to_exist(column=""player_id""),expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_not_be_null(column=""player_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
"For the dataset file, verify that it contains no more than 1000 rows based on a specific regex pattern.","expect_file_line_regex_match_count_to_be_between(file_path=""your_file_path"", min_value=0, max_value=1000)","expect_file_row_count_to_be_less_than(pattern=r"".*\d{1,4}"", max_value=1000)",0.4444444444444445,0.29411764705882354,0.4444444444444445,34.52679587918808
"Ensure the `product_category` values are from the set `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
For field `launch_date`: Ensure all entries adhere to the datetime format 'YYYY-MM-DD'. Ensure this field is required (not null).,"expect_column_values_to_match_strftime_format(column=""launch_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""launch_date"")","expect_column_to_exist(column=""launch_date""),expect_column_values_to_be_dateutil_parseable(column=""launch_date""),expect_column_values_to_match_strftime_format(column=""launch_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""launch_date"")",0.7462686567164178,0.7384615384615384,0.7462686567164178,58.54168645930046
Ensure the `email` column values conform to a valid email format and are unique across all records.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")",1.0,1.0,1.0,100.00000000000004
For the `gas_price` column: Ensure all values are greater than 0 and fall within the expected range of 1 Gwei to 100 Gwei.,"expect_column_values_to_be_between(column=""gas_price"", min_value=1, max_value=100)","expect_column_values_to_be_greater_than(column=""gas_price"", value=0),expect_column_values_to_be_between(column=""gas_price"", min_value=1, max_value=100)",0.7142857142857143,0.7000000000000001,0.7142857142857143,53.0178374434078
For the `complaint_date` field: Ensure the field matches the type 'date' and contains no missing values.,"expect_column_values_to_be_of_type(column=""complaint_date"", type_=""date""),expect_column_values_to_not_be_null(column=""complaint_date"")","expect_column_values_to_be_of_type(column=""complaint_date"", type_=""date""),expect_column_values_to_not_be_null(column=""complaint_date"")",1.0,1.0,1.0,100.00000000000004
"For the `team_stats` table: Validate that the number of rows is between 10 and 50, representing valid teams for the season.","expect_table_row_count_to_be_between(min_value=10, max_value=50)","expect_table_row_count_to_be_between(min_value=10, max_value=50)",1.0,1.0,1.0,100.00000000000004
For field 'user_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure the values are unique across the dataset.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the `application_date` column values are formatted according to the `'%Y-%m-%d'` strftime format.,"expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format='%Y-%m-%d')","expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,84.02532817697069
For fields `city` and `date`: Ensure the combination is unique across all records.,"expect_compound_columns_to_be_unique(column_list=[""city"", ""date""])","expect_compound_columns_to_be_unique(columns=""city"", columns=""date"")",0.9,0.6666666666666666,0.9,59.18807116055935
For field 'policy_number': Ensure the field matches the type 'text'. Validate that all values conform to the pattern of a 10-digit numeric string.,"expect_column_values_to_be_of_type(column=""policy_number"", type_=""text""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^\d{10}$"")","expect_column_values_to_be_of_type(column=""policy_number"", type_=""text""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[\d]{10}$"")",1.0,1.0,1.0,92.4114838702706
For the `discount_percentage` column: Ensure values are between 0 and 100 and that there are no null values.,"expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""discount_percentage"")","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""discount_percentage"")",1.0,1.0,1.0,100.00000000000004
"For the `hashtags` field: Ensure all entries match the regex pattern '^#[A-Za-z0-9_]{1,30}$' and do not contain special characters.","expect_column_values_to_match_regex(column=""hashtags"", regex=r'^#[A-Za-z0-9_]{1,30}$')","expect_column_values_to_match_regex(column=""hashtags"", regex=r'^#[A-Za-z0-9_]{1,30}$'),expect_column_values_to_not_match_regex(column=""hashtags"", regex=r'.*[^\A-Za-z0-9_.]')  # Matches special characters.",0.6399999999999999,0.625,0.6399999999999999,44.350997780019924
For the `timestamp` column: Validate that all entries are in ISO 8601 format and fall within the range of '2020-01-01T00:00:00Z' to '2023-12-31T23:59:59Z'.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_between(column=""timestamp"", min_value=""2020-01-01T00:00:00Z"", max_value=""2023-12-31T23:59:59Z"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=""2020-01-01T00:00:00Z"", max_value=""2023-12-31T23:59:59Z"")",0.8636363636363635,0.8372093023255814,0.8636363636363635,76.83473773840151
For field 'date_added': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure values are in the past or today.,"expect_column_values_to_not_be_null(column=""date_added""),expect_column_values_to_be_of_type(column=""date_added"", type_=""date""),expect_column_values_to_be_between(column=""date_added"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_not_be_null(column=""date_added""),expect_column_values_to_be_of_type(column=""date_added"", type_=""date""),expect_column_values_to_be_between(column=""date_added"", min_value=""1970-01-01"", max_value=""current_date"")",0.9367088607594937,0.9090909090909091,0.9367088607594937,92.73095062444978
For field 'message_id': Ensure the field contains only distinct values. Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""message_id""),expect_column_values_to_be_unique(column=""message_id""),expect_column_values_to_be_of_type(column=""message_id"", type_=""text"")","expect_column_to_exist(column=""message_id""),expect_column_values_to_be_unique(column=""message_id""),expect_column_values_to_be_of_type(column=""message_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field 'file_size': Ensure the value is within the range of 1KB to 5MB for files in (document_path).,"expect_file_size_to_be_between(file_path=""document_path"", min_value=1024, max_value=5242880)","expect_file_size_to_be_between(file_size=""file_size"", min_value=1024, max_value=5242880)  # min_value is 1KB, max_value is 5MB",0.65,0.5789473684210527,0.65,57.95847846081764
"For field 'order_status': Ensure the field matches the type 'text'. Ensure values in (order_status) must exist in the set (['Pending', 'Shipped', 'Delivered', 'Cancelled']). Ensure this field exists.","expect_column_to_exist(column=""order_status""),expect_column_values_to_be_of_type(column=""order_status"", type_=""text""),expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_to_exist(column=""order_status""),expect_column_values_to_be_of_type(column=""order_status"", type_=""text""),expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
For field 'processing_time': Ensure the average processing time is within the range of 1 to 30 days.,"expect_column_mean_to_be_between(column=""processing_time"", min_value=1, max_value=30)","expect_column_mean_to_be_between(column=""processing_time"", min_value=1, max_value=30)",1.0,1.0,1.0,100.00000000000004
Ensure that the combination of `product_id` and `supplier_id` is unique across all records to prevent duplicate entries.,"expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""supplier_id"")","expect_compound_columns_to_be_unique(columns=[""product_id"", ""supplier_id""])",0.88,0.6956521739130435,0.88,60.81152344671197
Confirm that the `weight` column contains only positive float values and that the maximum weight does not exceed 1000 kg.,"expect_column_values_to_be_between(column=""weight"", min_value=0.0, max_value=1000.0),expect_column_max_to_be_between(column=""weight"", max_value=1000.0)","expect_column_values_to_be_between(column=""weight"", min_value=0.0, max_value=1000.0)",0.7272727272727273,0.7142857142857143,0.7272727272727273,43.45982085070784
"For field 'case_status': Ensure the field contains only values from the set ['open', 'closed', 'in_progress']. Validate no missing values.","expect_column_values_to_be_in_set(column=""case_status"", value_set=[""open"", ""closed"", ""in_progress""]),expect_column_values_to_not_be_null(column=""case_status"")","expect_column_values_to_be_in_set(column=""case_status"", value_set=['open', 'closed', 'in_progress']),expect_column_values_to_not_be_null(column=""case_status"")",1.0,1.0,1.0,77.99767877818952
"For the `currency_type` column: Ensure that all values fall within the allowed set: ['BTC', 'ETH', 'LTC', 'USDT'].","expect_column_values_to_be_in_set(column=""currency_type"", value_set=['BTC', 'ETH', 'LTC', 'USDT'])","expect_column_values_to_be_in_set(column=""currency_type"", value_set=[""BTC"", ""ETH"", ""LTC"", ""USDT""])",1.0,1.0,1.0,63.15789958317594
Ensure the `voter_id` column contains only unique values. This field must not contain null values and should be of type 'integer'.,"expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""int"")","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Validate that the `shipment_date` column contains dates that are not in the future.,"expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_values_to_be_between(column=""shipment_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_values_to_be_less_than(column=""shipment_date"", value=""today"")",0.8163265306122449,0.7234042553191489,0.8163265306122449,69.62245151920463
For field 'user_id': Ensure values are not null. Ensure all user IDs exist in the 'users' table.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_user_ids)  # users_table_user_ids should be replaced with the actual set of user IDs from the 'users' table.","expect_column_values_to_not_be_null(column=""user_id""),expect_select_column_values_to_be_unique_within_record(column=""user_id"")  # Note: The unique_within_record should be evaluated on the user_id column, since that is the only user ID column within a given record.",0.5274725274725275,0.38202247191011235,0.5274725274725275,51.66078150314065
Ensure the `diagnosis_code` column only contains values that match the specified ICD-10 code format.,"expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-Z]\d{1,2}(?:\.\d+)?$"")","expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^(?!10)[\w-]+$"")",0.7333333333333334,0.7142857142857143,0.7333333333333334,59.01970699031817
"In the `transaction_type` field: Ensure values match the set `['Deposit', 'Withdrawal', 'Transfer']`. Validate that this field is required (not null).","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Deposit"", ""Withdrawal"", ""Transfer""]),expect_column_values_to_not_be_null(column=""transaction_type"")","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer']),expect_column_values_to_not_be_null(column=""transaction_type"")",1.0,1.0,1.0,80.15316328584778
Ensure the `attachments` table contains a column named `file_size` with values greater than 0.,"expect_column_to_exist(column=""file_size""),expect_column_values_to_be_greater_than(column=""file_size"", value=0)","expect_column_values_to_be_between(column=""attachments.file_size"", min_value=0)",0.625,0.4,0.625,36.609656205454925
"For the `response_time` column, validate that all entries are positive integers representing milliseconds.","expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_values_to_be_between(column=""response_time"", min_value=1, max_value=None)","expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_values_to_be_greater_than(column=""response_time"", value=0),expect_column_values_to_be_between(column=""response_time"", min_value=1, max_value=None)",0.8181818181818181,0.8125000000000001,0.8181818181818181,69.13669280533436
"Ensure the 'genre' column contains only distinct values from the set ['action', 'adventure', 'puzzle'].","expect_column_values_to_be_in_set(column=""genre"", value_set=[""action"", ""adventure"", ""puzzle""])","expect_column_values_to_be_in_set(column=""genre"", value_set=[""action"", ""adventure"", ""puzzle""])",1.0,1.0,1.0,100.00000000000004
"Ensure the `price` column has values greater than zero, and that the average price is within the range of $20 to $200.","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""price"", min_value=20, max_value=200)","expect_column_values_to_be_between(column=""price"", min_value=1, max_value=None),expect_column_mean_to_be_between(column=""price"", min_value=20, max_value=200)",0.9642857142857143,0.9259259259259259,0.9642857142857143,95.7414465780703
"Ensure the `account_balance` column follows a normal distribution with a mean of $10,000 and a standard deviation of $1,500.","expect_column_mean_to_be_between(column=""account_balance"", min_value=9500, max_value=10500),expect_column_stdev_to_be_between(column=""account_balance"", min_value=1300, max_value=1700)","expect_column_mean_to_be_between(column=""account_balance"", min_value=10000, max_value=None),expect_column_stdev_to_be_between(column=""account_balance"", min_value=None, max_value=1500)илася",0.8666666666666667,0.7586206896551724,0.8666666666666667,83.79076526125338
"Ensure that the `genre` column contains only distinct values from the set `['Action', 'Drama', 'Comedy', 'Thriller']`.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy', 'Thriller'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy', 'Thriller'])",1.0,1.0,1.0,100.00000000000004
"For field 'consumption': Ensure the field is required (not null). Validate that the values are numeric and fall within the range of 0 to 10,000.","expect_column_values_to_not_be_null(column=""consumption""),expect_column_values_to_be_between(column=""consumption"", min_value=0, max_value=10000),expect_column_values_to_be_of_type(column=""consumption"", type_=""numeric"")","expect_column_to_exist(column=""consumption""),expect_column_values_to_not_be_null(column=""consumption""),expect_column_values_to_be_of_type(column=""consumption"", type_=""float""),expect_column_values_to_be_between(column=""consumption"", min_value=0, max_value=10000)",0.8918918918918919,0.8611111111111112,0.6216216216216216,80.49378428015167
"Ensure the number of unique values in the `ip_address` column is greater than 100, indicating a diverse range of users.","expect_column_unique_value_count_to_be_between(column=""ip_address"", min_value=101)","expect_column_unique_value_count_to_be_between(column=""ip_address"", min_value=100, max_value=100)",0.8387096774193549,0.8275862068965517,0.8387096774193549,77.46007785621339
Ensure that the `enrollment_date` follows the 'YYYY-MM-DD' format and is correctly parsed using dateutil. Ensure no dates are missing.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_not_be_null(column=""enrollment_date"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")  # Assuming there are no missing dates, but if there are, you could add a null check to the second expectation.ЎыџN",0.7160493827160495,0.6075949367088608,0.6419753086419753,70.19757574441796
Verify that the distribution of the `sales_region` column passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""sales_region"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""sales_region"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For the `data_limit_gb` and `monthly_charge` columns: Confirm that the sum of `monthly_charge` is correctly calculated based on `data_limit_gb` values.,"expect_multicolumn_sum_to_equal(column_list=[""monthly_charge""], sum_value=calculate_sum_based_on_data_limit(data_limit_gb))","expect_multicolumn_sum_to_equal(column_list=[""monthly_charge""], sum_column=""data_limit_gb"")",0.7647058823529412,0.6875,0.7647058823529412,58.67662895597387
Ensure that the `enrollment_date` values fall within the academic year specified by `academic_year`.,"expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-05-31"")","expect_column_values_to_be_between(column=""enrollment_date"", min_value=academic_year_from, max_value=academic_year_to)",0.6842105263157895,0.6111111111111112,0.6842105263157895,61.42303729027752
Confirm that the `appointment_date` values adhere to the format 'YYYY-MM-DD' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date"")","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the `listing_date` column contains valid datetime strings that can be parsed correctly.,"expect_column_values_to_be_dateutil_parseable(column=""listing_date"")","expect_column_to_exist(column=""listing_date""),expect_column_values_to_be_dateutil_parseable(column=""listing_date"")",0.7407407407407407,0.72,0.7407407407407407,54.60951078044391
"For the `research_topic` field, validate that values do not match the pattern `.*(confidential|sensitive).*` to ensure data security.","expect_column_values_to_not_match_regex(column=""research_topic"", regex=r"".*(confidential|sensitive).*"")","expect_column_values_to_not_match_regex(column=""research_topic"", regex=r"".*(confidential|sensitive).*"")ıldığı",0.9655172413793104,0.962962962962963,0.9655172413793104,97.25766308764152
For field 'sender_address': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""sender_address""),expect_column_values_to_be_of_type(column=""sender_address"", type_=""text""),expect_column_values_to_be_unique(column=""sender_address"")","expect_column_values_to_not_be_null(column=""sender_address""),expect_column_values_to_be_of_type(column=""sender_address"", type_=""text""),expect_column_values_to_be_unique(column=""sender_address"")",1.0,1.0,1.0,100.00000000000004
Ensure the `shipping_address` field contains valid JSON objects that conform to the defined schema for address details.,"expect_column_values_to_match_json_schema(column=""shipping_address"", schema={""type"": ""object"", ""properties"": {""street"": {""type"": ""string""}, ""city"": {""type"": ""string""}, ""state"": {""type"": ""string""}, ""postal_code"": {""type"": ""string""}, ""country"": {""type"": ""string""}}, ""required"": [""street"", ""city"", ""state"", ""postal_code"", ""country""]})","expect_column_values_to_match_json_schema(column=""shipping_address"", schema={""type"": ""object"", ""properties"": { ""address_line_1"": {""type"": ""string""}, ""address_line_2"": {""type"": ""string""}, ""city"": {""type"": ""string""}, ""state"": {""type"": ""string""}, ""country"": {""type"": ""string""}, ""postal_code"": {""type"": ""string""}}}, ""required"": [""address_line_1"", ""address_line_2"", ""city"", ""state"", ""country"", ""postal_code""]})",0.813953488372093,0.7142857142857143,0.7209302325581396,75.87592722928746
"Ensure the `transaction_amount` column values match the expected range of `0` to `10,000` for all transactions.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_feedback` column contains distinct values and check for missing entries.,"expect_column_values_to_be_unique(column=""customer_feedback""),expect_column_values_to_not_be_null(column=""customer_feedback"")","expect_column_values_to_be_unique(column=""customer_feedback""),expect_column_values_to_not_be_null(column=""customer_feedback"")",1.0,1.0,1.0,100.00000000000004
"For field 'payment_status': Ensure the field exists. Ensure values in (payment_status) must exist in the set ['paid', 'pending', 'failed']. Ensure this field is not null.","expect_column_to_exist(column=""payment_status""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'pending', 'failed']),expect_column_values_to_not_be_null(column=""payment_status"")","expect_column_to_exist(column=""payment_status""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'pending', 'failed']),expect_column_values_to_not_be_null(column=""payment_status"")",1.0,1.0,1.0,100.00000000000004
Verify that the `feedback` column does not exceed 300 characters and does not contain any inappropriate language.,"expect_column_value_lengths_to_be_between(column=""feedback"", min_value=0, max_value=300),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""(inappropriate_language_pattern)"")","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=1, max_value=300),expect_column_values_to_match_regex(column=""feedback"", regex=r""^[a-zA-Z0-9 ]+$"")",0.8275862068965517,0.75,0.8275862068965517,78.8799462715264
For field 'vote_date': Ensure all entries are valid datetime strings formatted as '%Y-%m-%d'. Ensure no vote dates are set in the future.,"expect_column_values_to_match_strftime_format(column=""vote_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""vote_date""),expect_column_values_to_be_between(column=""vote_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""vote_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""vote_date""),expect_column_values_to_be_less_than(column=""vote_date"", value=""2023-10-10"")  # Assuming 2023-10-10 is the cutoff date.",0.7640449438202246,0.7126436781609194,0.7640449438202246,76.6814175995652
"For the `user_rating`, ensure that values fall within the range of `1` to `5`.","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
Verify that the total number of rows in the `customer_interactions` table is equal to 500.,"expect_table_row_count_to_equal(table=""customer_interactions"", value=500)","expect_table_row_count_to_be_between(table=""customer_interactions"", min_value=500, max_value=500)",0.7407407407407406,0.56,0.7407407407407406,56.00251936785401
Validate that the median of `response_time` does not exceed 30 days.,"expect_column_median_to_be_between(column=""response_time"", min_value=None, max_value=30)","expect_column_mean_to_be_between(column=""response_time"", min_value=None, max_value=30)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
Validate the sum of `battery_level` and `signal_strength` columns equals 100 for each record.,"expect_multicolumn_sum_to_equal(column_list=[""battery_level"", ""signal_strength""], value=100)","expect_multicolumn_sum_to_equal(column_list=[""battery_level"", ""signal_strength""], sum=100)",0.9230769230769231,0.8333333333333334,0.9230769230769231,91.57103753711765
Ensure the `player_id` column has unique values and is of type 'integer'. There should be no null entries.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""int""),expect_column_values_to_not_be_null(column=""player_id"")","expect_column_to_exist(column=""player_id""),expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""int""),expect_column_values_to_not_be_null(column=""player_id"")",0.898550724637681,0.8955223880597014,0.898550724637681,80.78752923813731
Verify that the `transaction_date` column contains only datetime values formatted as '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_be_of_type(column=""transaction_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""transaction_date"", format=""%Y-%m-%d %H:%M:%S"")",0.7234042553191489,0.6666666666666667,0.7234042553191489,54.918329496799245
Ensure that the `attendance_percentage` value is greater than or equal to 0 and less than or equal to 100.,"expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For field 'route_status': Ensure the field matches the type 'text'. Validate that values in (route_status) must exist in the predefined list ['In Transit', 'Delivered', 'Delayed', 'Cancelled']. Ensure this field exists.","expect_column_to_exist(column=""route_status""),expect_column_values_to_be_of_type(column=""route_status"", type_=""text""),expect_column_values_to_be_in_set(column=""route_status"", value_set=['In Transit', 'Delivered', 'Delayed', 'Cancelled'])","expect_column_to_exist(column=""route_status""),expect_column_values_to_be_of_type(column=""route_status"", type_=""text""),expect_column_values_to_be_in_set(column=""route_status"", value_set=['In Transit', 'Delivered', 'Delayed', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
Ensure the `policy_number` column is unique across all records and follows the specified alphanumeric pattern.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[a-zA-Z0-9]+$"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[a-zA-Z0-9]+$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `upload_date` column contains valid datetime entries formatted as 'YYYY-MM-DDTHH:MM:SSZ'.,"expect_column_values_to_match_strftime_format(column=""upload_date"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_match_strftime_format(column=""upload_date"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,100.00000000000004
Ensure the `shipment_id` column has only unique values and is of type `string`. Ensure this field cannot contain null values.,"expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_not_be_null(column=""shipment_id""),expect_column_values_to_be_of_type(column=""shipment_id"", type_=""string"")","expect_column_to_exist(column=""shipment_id""),expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_be_of_type(column=""shipment_id"", type_=""string""),expect_column_values_to_not_be_null(column=""shipment_id"")",0.898550724637681,0.8955223880597014,0.7536231884057972,80.78752923813731
"Ensure that the `email_address` column matches the regular expression pattern '^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$' for valid email formats.","expect_column_values_to_match_regex(column=""email_address"", regex=r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$')","expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\\w-\\.]@\\w\\.(\\w){2,4}$"")",1.0,1.0,1.0,55.945986498145174
Ensure the total of `cost_price` and `shipping_cost` columns matches the `total_price` column for each product entry.,"expect_column_pair_values_to_be_equal(column_A=""cost_price"", column_B=""total_price""),expect_column_pair_values_to_be_equal(column_A=""shipping_cost"", column_B=""total_price"")","expect_multicolumn_sum_to_equal(column_A=""cost_price"", column_B=""shipping_cost"", target_column=""total_price"")",0.5957446808510638,0.35555555555555557,0.5957446808510638,36.852745373591915
Check that the `duration` column values are in increasing order and do not exceed 120 minutes.,"expect_column_values_to_be_increasing(column=""duration""),expect_column_values_to_be_between(column=""duration"", min_value=0, max_value=120)","expect_column_values_to_be_increasing(column=""duration""),expect_column_max_to_be_between(column=""duration"", max=120)",0.85,0.6842105263157895,0.85,72.98040951630053
"In the `precipitation` column: Validate that values fall within the set `['None', 'Light', 'Moderate', 'Heavy']`. Ensure this field is not null.","expect_column_values_to_be_in_set(column=""precipitation"", value_set=['None', 'Light', 'Moderate', 'Heavy']),expect_column_values_to_not_be_null(column=""precipitation"")","expect_column_values_to_be_in_set(column=""precipitation"", value_set=['None', 'Light', 'Moderate', 'Heavy']),expect_column_values_to_not_be_null(column=""precipitation"")",1.0,1.0,1.0,100.00000000000004
For the `release_date` field: Validate that all dates are in 'MM/DD/YYYY' format and can be parsed correctly. Check for any missing values.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_not_be_null(column=""release_date"")",0.7462686567164178,0.7384615384615384,0.7462686567164178,51.341711903259224
"For field 'email': Ensure the field matches the type 'text'. Validate that all values conform to the standard email format defined by the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.","expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')",1.0,1.0,1.0,93.5278492204548
"For field 'billing_cycle': Ensure the field matches the type 'text'. Ensure values in 'billing_cycle' must be one of the predefined options: ['monthly', 'bi-monthly', 'quarterly']. Ensure this field exists.","expect_column_to_exist(column=""billing_cycle""),expect_column_values_to_be_of_type(column=""billing_cycle"", type_=""text""),expect_column_values_to_be_in_set(column=""billing_cycle"", value_set=['monthly', 'bi-monthly', 'quarterly'])","expect_column_to_exist(column=""billing_cycle""),expect_column_values_to_be_of_type(column=""billing_cycle"", type_=""text""),expect_column_values_to_be_in_set(column=""billing_cycle"", value_set=['monthly', 'bi-monthly', 'quarterly'])",1.0,1.0,1.0,100.00000000000004
Ensure the `age` column contains values of type `integer`.,"expect_column_values_to_be_of_type(column=""age"", type_=""integer"")","expect_column_values_to_be_of_type(column=""age"", type_=""integer"")",1.0,1.0,1.0,100.00000000000004
"For the `insurance_policy_number`, ensure it matches the regex pattern `^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$` and is unique.","expect_column_values_to_match_regex(column=""insurance_policy_number"", regex=r""^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$""),expect_column_values_to_be_unique(column=""insurance_policy_number"")","expect_column_values_to_match_regex(column=""insurance_policy_number"", regex=r""^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$"")  # This regex ensures the format is 3 uppercase letters, dash, 4 digits, dash, 2 uppercase letters.  # Also, unique values in the column can be achieved with the below mentioned code.  #expect_column_values_to_be_unique(column=""insurance_policy_number"")",0.673913043478261,0.6444444444444445,0.673913043478261,63.294956257802134
"Ensure the `platform` column only contains values from the set `['PC', 'Xbox', 'PlayStation', 'Switch']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])",1.0,1.0,1.0,100.00000000000004
Ensure the `case_number` column is unique and matches the regex pattern `^[A-Z]{2}\d{4}-\d{3}$`.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_match_regex(column=""case_number"", regex=r""^[A-Z]{2}\d{4}-\d{3}$"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_match_regex(column=""case_number"", regex=r""^[A-Z]{2}\d{4}-\d{3}$"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `json_data` column values are valid JSON objects and conform to the specified schema for transaction details.,"expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {""transaction_id"": {""type"": ""string""}, ""amount"": {""type"": ""number""}, ""date"": {""type"": ""string"", ""format"": ""date-time""}}})","expect_column_values_to_match_json_schema(column=""json_data"", schema={})  # Replace {} with the actual JSON schema for transaction details.",0.456140350877193,0.36363636363636365,0.4210526315789474,9.890615336908546
"In the `hire_date` field, confirm that all entries are valid dates in the format 'YYYY-MM-DD' and are not in the future.","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # Check that all values can be parsed as dates, even if they are not yet valid.  #expect_column_values_to_be_decreasing(column=""hire_date"")  # This would assume the hiring order is chronological and is not yet available in the application.  # This would require further testing and analysis to determine the appropriate course of action.",0.5573770491803278,0.5,0.540983606557377,55.275186798138016
"For the `customer_feedback` column, validate that string lengths fall between 10 and 500 characters.","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500)","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
For field 'loyalty_points': Ensure the field matches the type 'integer'. Ensure the field contains values greater than or equal to 0. Ensure this field exists.,"expect_column_to_exist(column=""loyalty_points""),expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=None)","expect_column_to_exist(column=""loyalty_points""),expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""integer""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0)",0.923076923076923,0.888888888888889,0.923076923076923,87.87069541204936
For field 'inventory_count': Ensure the field matches the type 'integer'. Ensure all values are non-negative. Ensure this field exists.,"expect_column_to_exist(column=""inventory_count""),expect_column_values_to_be_of_type(column=""inventory_count"", type_=""int""),expect_column_values_to_be_between(column=""inventory_count"", min_value=0, max_value=None)","expect_column_to_exist(column=""inventory_count""),expect_column_values_to_be_of_type(column=""inventory_count"", type_=""integer""),expect_column_values_to_be_between(column=""inventory_count"", min_value=0, max_value=None)",0.9705882352941176,0.9393939393939394,0.9705882352941176,96.74122890261673
"For the `salary` field: Confirm that the mean salary does not exceed 100,000 and that all values are positive integers.","expect_column_mean_to_be_between(column=""salary"", min_value=0, max_value=100000),expect_column_values_to_be_of_type(column=""salary"", type_=""int""),expect_column_values_to_be_between(column=""salary"", min_value=1, max_value=None)","expect_column_mean_to_be_between(column=""salary"", min_value=0, max_value=100000),expect_column_values_to_be_of_type(column=""salary"", type_=""int"")",0.7812500000000001,0.7741935483870968,0.7812500000000001,58.59723008943416
Ensure the `article_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_not_be_null(column=""article_id"")","expect_column_to_exist(column=""article_id""),expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_not_be_null(column=""article_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
"For field 'file_hash': Validate that the file's hash matches the expected hash value to confirm data integrity, and ensure that the file format is correct.","expect_file_hash_to_equal(expected_hash_value=""expected_hash_value""),expect_file_to_have_valid_table_header()","expect_file_hash_to_be_equal(file_hash=""expected_hash_value""),expect_file_to_have_valid_format(file_hash)",0.7567567567567567,0.5714285714285715,0.7567567567567567,69.71765712212066
"Validate that the `budget` column is a numeric type and that the total budget across all entries matches the expected figure of $1,000,000.","expect_column_values_to_be_of_type(column=""budget"", type_=""numeric""),expect_column_sum_to_be_between(column=""budget"", min_value=1000000, max_value=1000000)","expect_column_values_to_be_of_type(column=""budget"", type_=""float""),expect_column_sum_to_be_between(column=""budget"", min_value=1000000, max_value=1000000)",0.96,0.9166666666666666,0.96,95.51190479308646
"For the `transaction_date` column, validate that all entries are of type `date` and within the last 30 days.","expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-09-21"", max_value=""2023-10-21"")","expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-09-01"", max_value=""2023-10-01"")",0.9354838709677419,0.9,0.9354838709677419,93.36627191673655
"Ensure the 'claim_status' column contains only distinct values from the set ['Open', 'Closed', 'In Review'].","expect_column_values_to_be_in_set(column=""claim_status"", value_set=[""Open"", ""Closed"", ""In Review""])","expect_column_values_to_be_in_set(column=""claim_status"", value_set=['Open', 'Closed', 'In Review'])",1.0,1.0,1.0,66.98321284153623
Validate that the `vote_date` column contains dates that match the format '%Y-%m-%d' and are on or after the election date.,"expect_column_values_to_match_strftime_format(column=""vote_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""vote_date"")  # Assuming the dates are parseable and we check the actual dates later in the pipeline.","expect_column_values_to_match_strftime_format(column=""vote_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""vote_date"", value_set=[election_date, election_date])  # Assuming election_date is available.",0.7105263157894738,0.5945945945945945,0.6578947368421053,67.61039985139476
For field 'experiment_id': Ensure the field exists. Ensure the field matches the type 'integer'. Ensure values in (experiment_id) are unique across the dataset.,"expect_column_to_exist(column=""experiment_id""),expect_column_values_to_be_of_type(column=""experiment_id"", type_=""int""),expect_column_values_to_be_unique(column=""experiment_id"")","expect_column_to_exist(column=""experiment_id""),expect_column_values_to_be_of_type(column=""experiment_id"", type_=""int""),expect_column_values_to_be_unique(column=""experiment_id"")",1.0,1.0,1.0,100.00000000000004
"In the `subscription_plan` field: Validate that all entries are from the set `['Free', 'Basic', 'Premium']`. Ensure no values are null.","expect_column_values_to_be_in_set(column=""subscription_plan"", value_set=['Free', 'Basic', 'Premium']),expect_column_values_to_not_be_null(column=""subscription_plan"")","expect_column_values_to_be_in_set(column=""subscription_plan"", value_set=['Free', 'Basic', 'Premium']),expect_column_values_to_not_be_null(column=""subscription_plan"")",1.0,1.0,1.0,100.00000000000004
For file 'property_listings.json': Ensure the file exists. Ensure the JSON structure is valid. Ensure the file size is less than 2 MB. Ensure that the JSON contains an array of valid listings.,"expect_file_to_exist(file_path=""property_listings.json""),expect_file_to_be_valid_json(file_path=""property_listings.json""),expect_file_size_to_be_between(file_path=""property_listings.json"", min_value=0, max_value=2 * 1024 * 1024),expect_column_values_to_be_json_parseable(column=""listings"")","expect_file_to_exist(file_path=""property_listings.json""),expect_file_to_be_valid_json(file_path=""property_listings.json""),expect_file_size_to_be_less_than(file_path=""property_listings.json"", size_in_bytes=2048 * 1024)  # 2 MB, assuming bytes=bytes #, assuming 1 KB=1,024 bytes.",0.6666666666666666,0.5957446808510638,0.6458333333333334,65.68770453612863
Ensure the `user_id` column contains only unique values and must not allow null entries.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")илакти",1.0,1.0,1.0,97.64540896763108
"For the JSON file `research_data.json`, validate that it is properly formatted and contains valid table headers.","expect_file_to_exist(filepath=""research_data.json""),expect_file_to_be_valid_json(filepath=""research_data.json""),expect_file_to_have_valid_table_header(filepath=""research_data.json"")","expect_file_to_exist(file_path=""research_data.json""),expect_column_headings_to_be_unique(column_names=""table_headings""),expect_file_to_be_json_valid(file_path=""research_data.json"")",0.6779661016949153,0.3859649122807017,0.576271186440678,58.08605230166965
For field `team_id`: Ensure all values in `team_id` exist in the reference `teams` table.,"expect_column_values_to_be_in_set(column=""team_id"", value_set=reference_teams)","expect_column_values_to_be_in_set(column=""team_id"", value_set=teams)",0.962962962962963,0.8799999999999999,0.962962962962963,88.53964815218333
"Ensure the `product_id` column contains unique identifiers, with no duplicates present.","expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature_reading` column values are within the range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature_reading"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature_reading"", min_value=-30, max_value=50)",1.0,1.0,1.0,100.00000000000004
"For field 'lead_status': Ensure the field matches the type 'text'. Validate that (lead_status) does not match any patterns from the list: (Inactive, Blacklisted). Ensure this field exists.","expect_column_to_exist(column=""lead_status""),expect_column_values_to_be_of_type(column=""lead_status"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""lead_status"", regex_list=[r""Inactive"", r""Blacklisted""])","expect_column_to_exist(column=""lead_status""),expect_column_values_to_be_of_type(column=""lead_status"", type_=""text""),expect_column_values_to_not_match_regex(column=""lead_status"", regex=""Inactive""),expect_column_values_to_not_match_regex(column=""lead_status"", regex=""Blacklisted"")",0.8101265822784809,0.7272727272727272,0.8101265822784809,69.49061640522278
Ensure the `salary` column contains only values greater than or equal to 30000 and less than or equal to 200000.,"expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)","expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)",1.0,1.0,1.0,100.00000000000004
Check that the average wind speed in the `wind_speed` column does not exceed 30 km/h.,"expect_column_mean_to_be_between(column=""wind_speed"", min_value=None, max_value=30)","expect_column_mean_to_be_between(column=""wind_speed"", min_value=0, max_value=30)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
"For the `category` column: Ensure values match the set `['Electronics', 'Clothing', 'Home']` and are of type 'text'.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_be_of_type(column=""category"", type_=""text"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_be_of_type(column=""category"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `salary` column adheres to a maximum value of 200,000 and a minimum value of 30,000.","expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)","expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)",1.0,1.0,1.0,100.00000000000004
Check that the `grades` column follows a normal distribution with a p-value greater than 0.05 in the Kolmogorov-Smirnov test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""grades"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""grades"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'departure_date': Ensure this field exists and matches the format '%Y-%m-%d'. Validate that all dates in (departure_date) are in the future.,"expect_column_to_exist(column=""departure_date""),expect_column_values_to_match_strftime_format(column=""departure_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""departure_date"")","expect_column_to_exist(column=""departure_date""),expect_column_values_to_match_strftime_format(column=""departure_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""departure_date""),expect_column_values_to_be_increasing(column=""departure_date"")",0.8611111111111112,0.8571428571428571,0.8611111111111112,75.65741980905523
For field 'transaction_amount': Ensure the field matches the type 'decimal'. Ensure the value is greater than 0. Ensure this field exists.,"expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0)","expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0)",1.0,1.0,1.0,100.00000000000004
Ensure the `connection_time` values conform to the datetime format 'YYYY-MM-DD HH:MM:SS' and are valid timestamps.,"expect_column_values_to_match_strftime_format(column=""connection_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""connection_time"")","expect_column_values_to_match_strftime_format(column=""connection_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""connection_time"")",1.0,1.0,1.0,100.00000000000004
"For the `property_type` field: Ensure the values belong to the set `['Residential', 'Commercial', 'Industrial']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=[""Residential"", ""Commercial"", ""Industrial""])",1.0,1.0,1.0,69.17381010255603
"For the `alert_timestamp` column, ensure that all entries are in chronological order and no dates are missing in the sequence.","expect_column_values_to_be_increasing(column=""alert_timestamp""),expect_column_values_to_not_be_null(column=""alert_timestamp"")","expect_column_values_to_be_increasing(column=""alert_timestamp""),expect_column_values_to_not_be_null(column=""alert_timestamp"")",1.0,1.0,1.0,100.00000000000004
"For field 'network_type': Ensure that values in 'network_type' are from the set ['2G', '3G', '4G', '5G']. Validate that this column does not contain any null values.","expect_column_values_to_be_in_set(column=""network_type"", value_set=['2G', '3G', '4G', '5G']),expect_column_values_to_not_be_null(column=""network_type"")","expect_column_values_to_be_in_set(column=""network_type"", value_set=['2G', '3G', '4G', '5G']),expect_column_values_to_not_be_null(column=""network_type"")",1.0,1.0,1.0,100.00000000000004
"In the `sent_time` column, ensure that all timestamps are in UTC format and are not null.","expect_column_values_to_be_dateutil_parseable(column=""sent_time""),expect_column_values_to_not_be_null(column=""sent_time""),expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_be_null(column=""sent_time""),expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.7692307692307692,0.7301587301587302,0.7692307692307692,62.44527435228553
For the `case_type` field: Ensure it contains unique values and matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""case_type""),expect_column_values_to_be_unique(column=""case_type""),expect_column_values_to_be_of_type(column=""case_type"", type_=""text"")","expect_column_to_exist(column=""case_type""),expect_column_values_to_be_unique(column=""case_type""),expect_column_values_to_be_of_type(column=""case_type"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_id` column contains only unique values and is of type 'string'. Validate that it does not contain any null values.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string""),expect_column_values_to_not_be_null(column=""transaction_id"")",0.9333333333333333,0.8620689655172413,0.9333333333333333,89.73574751095883
Ensure that the distribution of `price` values adheres to a normal distribution with a p-value greater than 0.05 in the KS test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""price"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""price"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `supplier_id` matches a valid set of IDs from the `suppliers` table.,"expect_column_values_to_be_in_set(column=""supplier_id"", value_set=supplier_ids_from_suppliers_table)","expect_column_values_to_be_in_set(column=""supplier_id"", value_set=supplier_ids_from_table)",0.9696969696969697,0.9032258064516129,0.9696969696969697,91.99522176589419
Ensure that all values in the `status` column are either `active` or `inactive`.,"expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive""])","expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive""])",1.0,1.0,1.0,100.00000000000004
"Check that the combination of `order_id` and `customer_id` is unique across records, preventing duplication in the dataset.","expect_compound_columns_to_be_unique(column_A=""order_id"", column_B=""customer_id"")","expect_compound_columns_to_be_unique(column_A=""order_id"", column_B=""customer_id"")lásil",0.9333333333333333,0.9285714285714286,0.9333333333333333,96.82132340352993
"For field `major`: Ensure values in `major` match the type 'text'. Validate that `major` does not contain any null values and exists in the list `['Math', 'Science', 'Literature']`.","expect_column_to_exist(column=""major""),expect_column_values_to_not_be_null(column=""major""),expect_column_values_to_be_of_type(column=""major"", type_=""text""),expect_column_values_to_be_in_set(column=""major"", value_set=['Math', 'Science', 'Literature'])","expect_column_values_to_be_of_type(column=""major"", type_=""text""),expect_column_values_to_not_be_null(column=""major""),expect_column_values_to_be_in_set(column=""major"", value_set=['Math', 'Science', 'Literature'])",0.9189189189189189,0.9166666666666666,0.7567567567567567,83.09503899012924
"Ensure the `post_type` column contains only distinct values matching `['Text', 'Image', 'Video']`.","expect_column_distinct_values_to_equal_set(column=""post_type"", value_set=[""Text"", ""Image"", ""Video""])","expect_column_distinct_values_to_equal_set(column=""post_type"", value_set=['Text', 'Image', 'Video'])",1.0,1.0,1.0,68.69938387430254
For the `order_date`: Ensure all entries follow the format 'YYYY-MM-DD' and are not in the future.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date""),expect_column_values_to_be_in_set(column=""order_date"", value_set=[date for date in range(datetime.date.today().year)])  # This line is a placeholder and needs to be adjusted to correctly ensure dates are not in the future.","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""order_date"", value_set=[x for x in order_date if x <= datetime.datetime.now().strftime(""%Y-%m-%d"")])",0.5981308411214953,0.5142857142857142,0.5607476635514019,53.27854870610225
Validate that the `submission_date` column contains dates that can be parsed according to ISO 8601 standards.,"expect_column_values_to_be_dateutil_parseable(column=""submission_date"")","expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""submission_date"")",0.5128205128205129,0.4864864864864865,0.5128205128205129,30.3292874790385
"Confirm that the average `loan_amount` in the `loans` table falls between $1,000 and $10,000.","expect_column_mean_to_be_between(column=""loan_amount"", min_value=1000, max_value=10000)","expect_column_mean_to_be_between(column=""loan_amount"", min_value=1000, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For the `course_id` column: Ensure each combination of `student_id` and `course_id` is unique.,"expect_compound_columns_to_be_unique(column_A=""student_id"", column_B=""course_id"")","expect_compound_columns_to_be_unique(column_list=[""student_id"", ""course_id""])",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.7176346014632
"For the 'platform' field, ensure that values match the set ['PC', 'Xbox', 'PlayStation', 'Nintendo']. Ensure this field is required (not null).","expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Xbox"", ""PlayStation"", ""Nintendo""]),expect_column_values_to_not_be_null(column=""platform"")","expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Xbox"", ""PlayStation"", ""Nintendo""]),expect_column_values_to_not_be_null(column=""platform"")",1.0,1.0,1.0,100.00000000000004
Check that the `price` column values are positive and that the standard deviation of listing prices is below a specified threshold.,"expect_column_values_to_be_between(column=""price"", min_value=0),expect_column_stdev","expect_column_values_to_be_greater_than(column=""price"", value=0),expect_column_stdev_to_be_between(column=""price"", min_value=None, max_value=threshold)",0.717948717948718,0.7027027027027027,0.6153846153846153,52.74165363808355
"Ensure the `transaction_type` column contains only values from the set ['purchase', 'refund', 'transfer'] and has no duplicates.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['purchase', 'refund', 'transfer']),expect_column_values_to_be_unique(column=""transaction_type"")","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['purchase','refund', 'transfer']),expect_column_values_to_be_unique(column=""transaction_type"")",1.0,1.0,1.0,100.00000000000004
For field 'release_date': Ensure the field matches the correct datetime format '%Y-%m-%d'. Ensure this field exists.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Verify that the combination of `user_id` and `incident_id` fields are unique to prevent duplicate incident reports.,"expect_compound_columns_to_be_unique(columns=[""user_id"", ""incident_id""])","expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""incident_id"")",0.88,0.6956521739130435,0.88,60.93671089617578
Ensure that the `prescription_json` field holds valid JSON objects that conform to the specified schema. Any malformed JSON should be identified.,"expect_column_values_to_be_json_parseable(column=""prescription_json""),expect_column_values_to_match_json_schema(column=""prescription_json"", schema=""specified_schema"")","expect_column_values_to_be_json_parseable(column=""prescription_json""),expect_column_values_to_match_json_schema(column=""prescription_json"")",0.9302325581395349,0.9268292682926829,0.9302325581395349,82.72198407977655
"For field 'department': Ensure values in (department) must exist in the set {'HR', 'Finance', 'Engineering', 'Sales'}. Ensure this field exists.","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set={'HR', 'Finance', 'Engineering', 'Sales'})","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set={""HR"", ""Finance"", ""Engineering"", ""Sales""})",1.0,1.0,1.0,71.88025737002374
"For field 'policy_type': Ensure the field matches the type 'text'. Validate that values in (policy_type) are within the set ['life', 'health', 'auto', 'home'].","expect_column_values_to_be_of_type(column=""policy_type"", type_=""text""),expect_column_values_to_be_in_set(column=""policy_type"", value_set=['life', 'health', 'auto', 'home'])","expect_column_values_to_be_of_type(column=""policy_type"", type_=""text""),expect_column_values_to_be_in_set(column=""policy_type"", value_set=[""life"", ""health"", ""auto"", ""home""])",1.0,1.0,1.0,78.5180295768227
For the `customer_id` column: Ensure values are unique and of type 'integer'.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")",0.9523809523809523,0.9500000000000001,0.9523809523809523,95.30451753349615
"For the `forecast_time` field, confirm that all timestamps are in the ISO 8601 format and within the next 7 days.","expect_column_values_to_match_strftime_format(column=""forecast_time"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_between(column=""forecast_time"", min_value=""current_timestamp"", max_value=""current_timestamp + interval '7 days'"")","expect_column_values_to_match_strftime_format(column=""forecast_time"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_between(column=""forecast_time"", min_value=""2023-10-15T00:00:00.000Z"", max_value=""2023-10-22T00:00:00.000Z"")",0.7710843373493976,0.7407407407407408,0.7710843373493976,78.6619805501699
"Ensure the `vehicle_type` column values match one of the patterns from the list: `['Truck', 'Van', 'Bicycle']`.","expect_column_values_to_be_in_set(column=""vehicle_type"", value_set=['Truck', 'Van', 'Bicycle'])","expect_column_values_to_be_in_set(column=""vehicle_type"", value_set=['Truck', 'Van', 'Bicycle'])",1.0,1.0,1.0,100.00000000000004
"For field 'customer_status': Ensure the field matches the type 'text'. Ensure values in (customer_status) must exist in the predefined status list ['Active', 'Inactive']. Ensure this field exists.","expect_column_to_exist(column=""customer_status""),expect_column_values_to_be_of_type(column=""customer_status"", type_=""text""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=[""Active"", ""Inactive""])","expect_column_to_exist(column=""customer_status""),expect_column_values_to_be_of_type(column=""customer_status"", type_=""text""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive'])",1.0,1.0,1.0,90.12229146407641
Ensure the `user_rating` column values fall within the range of `1` to `10`.,"expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=10)átky",0.967741935483871,0.9655172413793104,0.967741935483871,96.82132340352993
"For the `salary`: Ensure values are within the range of [30000, 200000] and that salaries are arranged in decreasing order.","expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000),expect_column_values_to_be_decreasing(column=""salary"")","expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000),expect_column_values_to_be_increasing(column=""salary"")",0.9545454545454546,0.9047619047619048,0.9545454545454546,94.64594399631754
Check that the `transaction_value` entries are greater than 0 and are of type 'float'.,"expect_column_values_to_be_greater_than(column=""transaction_value"", threshold=0),expect_column_values_to_be_of_type(column=""transaction_value"", type_=""float"")","expect_column_values_to_be_greater_than(column=""transaction_value"", value=0),expect_column_values_to_be_of_type(column=""transaction_value"", type_=""float"")илася",0.9583333333333334,0.9130434782608695,0.9583333333333334,93.62597875749384
"Ensure the `category` column exists and contains only values from the set `['Electronics', 'Clothing', 'Home']`.","expect_column_to_exist(column=""category""),expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_to_exist(column=""category""),expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
"For field 'image_url': Ensure the field matches the type 'text'. Validate that the URL follows a valid URL pattern and points to an image format (jpg, png, gif). Ensure this field exists.","expect_column_to_exist(column=""image_url""),expect_column_values_to_be_of_type(column=""image_url"", type_=""text""),expect_column_values_to_match_regex(column=""image_url"", regex=r""^https?://.*\.(jpg|jpeg|png|gif)$"")","expect_column_to_exist(column=""image_url""),expect_column_values_to_be_of_type(column=""image_url"", type_=""text""),expect_column_values_to_match_regex(column=""image_url"", regex=r""^https:\/\/[\w\.-]*\.(jpg|png|gif)$"")",0.9714285714285714,0.9117647058823528,0.9714285714285714,86.15434642774969
Validate that the `user_id` column contains unique values matching the pattern `^[0-9]{10}$` and that no null entries are present.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^[0-9]{10}$"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^[0-9]{10}$""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,0.96875,0.696969696969697,99.67373137744998
"Validate that the `methodology` field adheres to a predefined list of values: ['Qualitative', 'Quantitative', 'Mixed Methods'].","expect_column_values_to_be_in_set(column=""methodology"", value_set=['Qualitative', 'Quantitative', 'Mixed Methods'])","expect_column_values_to_be_in_set(column=""methodology"", value_set=['Qualitative', 'Quantitative', 'Mixed Methods'])",1.0,1.0,1.0,100.00000000000004
Ensure the `number_of_attacks` column has a minimum value of 0 and a maximum value of 500.,"expect_column_min_to_be_between(column=""number_of_attacks"", min_value=0),expect_column_max_to_be_between(column=""number_of_attacks"", max_value=500)","expect_column_values_to_be_between(column=""number_of_attacks"", min_value=0, max_value=500)",0.7142857142857143,0.6,0.7142857142857143,44.29849525334805
Verify that the `order_id` and `customer_id` are unique pairs across the `orders` dataset.,"expect_compound_columns_to_be_unique(column_A=""order_id"", column_B=""customer_id"")","expect_compound_columns_to_be_unique(columns=[""order_id"", ""customer_id""])",0.88,0.6956521739130435,0.88,60.81152344671197
Check the `tags` field to ensure it contains a JSON array of strings and adheres to the JSON schema for tags.,"expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema={""type"": ""array"", ""items"": {""type"": ""string""}})","expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema={""type"": ""array"", ""items"": {""type"": ""string""}})",1.0,1.0,1.0,100.00000000000004
Verify that entries in the `ip_address` column are valid IP addresses.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|^([0-9a-fA-F]{1,4}:){1,7}:|^([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|^([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|^([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|^([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|^([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|^[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6}|:)|^:((:[0-9a-fA-F]{1,4}){1,7}|:)|^fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|^::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?))|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)))|([0-9a-fA-F]{1,4}:){1,5}:((25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?))))$"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(\d{1,3}\.){3}\d{1,3}$"")",0.11510791366906475,0.09420289855072463,0.11510791366906475,0.00023323780308286054
For `player_count`: Ensure the field is required (not null) and contains only integer values. Ensure this field exists.,"expect_column_to_exist(column=""player_count""),expect_column_values_to_not_be_null(column=""player_count""),expect_column_values_to_be_of_type(column=""player_count"", type_=""int"")","expect_column_to_exist(column=""player_count""),expect_column_values_to_not_be_null(column=""player_count""),expect_column_values_to_be_of_type(column=""player_count"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Check that the distribution of `service_requests` passes the Chi-Square test with a p-value greater than 0.01.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""service_requests"", threshold=0.01)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""service_requests"", threshold=0.01)",1.0,1.0,1.0,100.00000000000004
For field 'user_email': Ensure this field matches the type 'text'. Ensure values are unique and required (not null). Validate format according to standard email regex.,"expect_column_values_to_be_of_type(column=""user_email"", type_=""text""),expect_column_values_to_not_be_null(column=""user_email""),expect_column_values_to_be_unique(column=""user_email""),expect_column_values_to_match_regex(column=""user_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""user_email""),expect_column_values_to_be_of_type(column=""user_email"", type_=""text""),expect_column_values_to_be_unique(column=""user_email""),expect_column_values_to_not_be_null(column=""user_email""),expect_column_values_to_match_regex(column=""user_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",0.9391304347826086,0.9380530973451328,0.8869565217391304,88.39518415762076
"For the `weather_event` field in Weather Forecasting: Ensure values are of type 'text'. Ensure values are not null and exist within the set `['Rain', 'Snow', 'Storm', 'Clear']`.","expect_column_values_to_be_of_type(column=""weather_event"", type_=""text""),expect_column_values_to_not_be_null(column=""weather_event""),expect_column_values_to_be_in_set(column=""weather_event"", value_set=['Rain', 'Snow', 'Storm', 'Clear'])","expect_column_values_to_be_of_type(column=""weather_event"", type_=""text""),expect_column_values_to_not_be_null(column=""weather_event""),expect_column_values_to_be_in_set(column=""weather_event"", value_set=['Rain', 'Snow', 'Storm', 'Clear'])",1.0,1.0,1.0,100.00000000000004
For field 'amount_involved': Ensure the field matches the type 'float'. Ensure values in 'amount_involved' are non-negative.,"expect_column_values_to_be_of_type(column=""amount_involved"", type_=""float""),expect_column_values_to_be_between(column=""amount_involved"", min_value=0)","expect_column_values_to_be_of_type(column=""amount_involved"", type_=""float""),expect_column_values_to_be_greater_than(column=""amount_involved"", threshold=0.0)",0.8571428571428572,0.7659574468085107,0.8571428571428572,85.58358137690418
"For the `event_data` field, ensure it conforms to the specified JSON schema for structured threat information.","expect_column_values_to_match_json_schema(column=""event_data"", json_schema=""your_json_schema_here"")","expect_column_values_to_match_json_schema(column=""event_data"", schema=THREAT_INFORMATION_SCHEMA)",0.7999999999999999,0.6428571428571429,0.7999999999999999,62.66475585690459
For field 'student_id': Ensure this field is required (not null). Ensure the field matches the type 'integer'. Ensure values are unique.,"expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int""),expect_column_values_to_be_unique(column=""student_id"")","expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""integer""),expect_column_values_to_be_unique(column=""student_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
"For the `claim_status`: Ensure it contains only distinct values from `['Pending', 'Approved', 'Denied']`.","expect_column_distinct_values_to_equal_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Denied'])","expect_column_distinct_values_to_equal_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Denied'])",1.0,1.0,1.0,100.00000000000004
Ensure that the combination of `citizen_id` and `request_type` is unique across all records.,"expect_compound_columns_to_be_unique(column_list=[""citizen_id"", ""request_type""])","expect_compound_columns_to_be_unique(column_A=""citizen_id"", column_B=""request_type"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
Ensure the `enrollment_date` field contains dates in the format `YYYY-MM-DD` and does not include any future dates.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""enrollment_date"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")  # This assumes your ""enrollment_date"" column contains dates in a parsable format, not necessarily dates in ISO format.",0.6865671641791045,0.6461538461538461,0.6865671641791045,64.5427129636333
Verify that the `transaction_date` entries are all in the past and follow the 'YYYY-MM-DD' format.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d"")  # assumes 'YYYY-MM-DD' format as expected; adjust as needed for other strftime formats, if needed.",0.6265060240963854,0.5925925925925926,0.4096385542168674,56.27050493991237
"For column 'claim_status': Validate that values must match one of the specified statuses (e.g., 'Pending', 'Approved', 'Denied'). Ensure this column exists.","expect_column_to_exist(column=""claim_status""),expect_column_values_to_be_in_set(column=""claim_status"", value_set=[""Pending"", ""Approved"", ""Denied""])","expect_column_to_exist(column=""claim_status""),expect_column_values_to_be_in_set(column=""claim_status"", value_set=[""Pending"", ""Approved"", ""Denied""])",1.0,1.0,1.0,100.00000000000004
Ensure that the combination of `shipment_id` and `destination` is unique across all records.,"expect_compound_columns_to_be_unique(column_A=""shipment_id"", column_B=""destination"")","expect_compound_columns_to_be_unique(columns=[""shipment_id"", ""destination""])",0.8695652173913044,0.6666666666666666,0.8695652173913044,57.881605281567445
For field 'check_in_date': Ensure values in 'check_in_date' are in the format 'YYYY-MM-DD' and are in the future.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""check_in_date"")","expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""check_in_date""),expect_column_values_to_be_increasing(column=""check_in_date"")",0.8253968253968255,0.819672131147541,0.8253968253968255,70.05336295241383
Check that the `open_rate` column passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""open_rate"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""open_rate"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"In the `user_activity_log`, ensure that the `event_type` field contains only distinct values from the set `['login', 'logout', 'comment', 'share']`. Confirm that there are no missing entries.","expect_column_distinct_values_to_equal_set(column=""event_type"", value_set=['login', 'logout', 'comment', 'share']),expect_column_values_to_not_be_null(column=""event_type"")","expect_column_distinct_values_to_equal_set(column=""event_type"", value_set=['login', 'logout', 'comment','share']),expect_column_values_to_not_be_null(column=""event_type"")",1.0,1.0,1.0,100.00000000000004
For field 'metadata': Ensure the field contains valid JSON objects and conforms to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""metadata""),expect_column_values_to_match_json_schema(column=""metadata"", json_schema=schema)","expect_column_values_to_be_json_parseable(column=""metadata""),expect_column_values_to_match_json_schema(column=""metadata"", schema=""YOUR_SCHEMA_HERE"")",0.9302325581395349,0.8292682926829269,0.9302325581395349,82.17065882813593
Check that the `home_team` and `away_team` columns contain distinct values and do not match each other for any record.,"expect_column_pair_values_to_be_unique(column_A=""home_team"", column_B=""away_team""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""home_team"", column_B=""away_team"")","expect_column_distinct_values_to_be_true(column=""home_team""),expect_column_values_to_be_unique(column=""home_team""),expect_column_distinct_values_to_be_unique(column=""away_team""),expect_column_values_to_not_be_null(column=""home_team""),expect_column_values_to_not_be_null(column=""away_team"")",0.5609756097560976,0.3,0.5609756097560976,38.9123306423648
Ensure the `date_collected` field exists and all entries are in the format 'YYYY-MM-DD' and fall within the last three years.,"expect_column_to_exist(column=""date_collected""),expect_column_values_to_match_strftime_format(column=""date_collected"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""date_collected"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""date_collected""),expect_column_values_to_match_strftime_format(column=""date_collected"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""date_collected"", min_value=""2021-10-01"", max_value=""2023-10-01"")",0.926829268292683,0.875,0.9024390243902439,91.78677546190737
"Ensure the `destination` column contains distinct values from the predefined set `['New York', 'Paris', 'Tokyo']`.","expect_column_values_to_be_in_set(column=""destination"", value_set=['New York', 'Paris', 'Tokyo'])","expect_column_values_to_be_in_set(column=""destination"", value_set=['New York', 'Paris', 'Tokyo'])",1.0,1.0,1.0,100.00000000000004
Ensure the `monthly_cost` field contains only positive decimal values.,"expect_column_values_to_be_between(column=""monthly_cost"", min_value=0.01)","expect_column_values_to_be_between(column=""monthly_cost"", min_value=0)",0.9600000000000001,0.9565217391304348,0.9600000000000001,92.76077030810347
"Ensure that the `bedrooms` column contains integers within the range of `1` to `10`, with values outside this range flagged.","expect_column_values_to_be_between(column=""bedrooms"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""bedrooms"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
Verify that the `loyalty_points` column contains only non-negative integers. Ensure uniqueness and non-null entries.,"expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""loyalty_points""),expect_column_values_to_be_unique(column=""loyalty_points"")","expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=None),expect_column_values_to_be_unique(column=""loyalty_points""),expect_column_values_to_not_be_null(column=""loyalty_points"")",0.85,0.846153846153846,0.775,67.38573467986404
For field 'citizen_id': Ensure this field exists and contains unique identifiers. Validate that all values match the format of a citizen ID number.,"expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_match_regex(column=""citizen_id"", regex=r""^[A-Z]{2}\d{6}$"")","expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_match_regex(column=""citizen_id"", regex=r""^[A-Z0-9]{10}$"")",0.8888888888888888,0.8852459016393444,0.8888888888888888,87.00480485137952
"For field 'state_code': Ensure the field matches the type 'text'. Ensure values in (state_code) must exist in the set ['CA', 'TX', 'NY', 'FL', 'IL']. Ensure this field exists.","expect_column_to_exist(column=""state_code""),expect_column_values_to_be_of_type(column=""state_code"", type_=""text""),expect_column_values_to_be_in_set(column=""state_code"", value_set=['CA', 'TX', 'NY', 'FL', 'IL'])","expect_column_to_exist(column=""state_code""),expect_column_values_to_be_of_type(column=""state_code"", type_=""text""),expect_column_values_to_be_in_set(column=""state_code"", value_set=['CA', 'TX', 'NY', 'FL', 'IL'])",1.0,1.0,1.0,100.00000000000004
"For table 'alert_notifications': Ensure the columns 'alert_id', 'alert_type', and 'timestamp' exist. Validate that 'timestamp' follows the ISO 8601 format.","expect_table_columns_to_match_set(column_set=[""alert_id"", ""alert_type"", ""timestamp""]),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_table_columns_to_match_set(column_set=[""alert_id"", ""alert_type"", ""timestamp""]),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")  # Note: Replace %f with the appropriate floating point representation for your implementation.",0.6373626373626373,0.6292134831460675,0.6373626373626373,52.14942277068896
Verify that the `alert_level` column in the Cybersecurity dataset has a maximum value of 5 and is represented as an integer type.,"expect_column_max_to_be_between(column=""alert_level"", max_value=5),expect_column_values_to_be_of_type(column=""alert_level"", type_=""int"")","expect_column_max_to_be_between(column=""alert_level"", max_value=5)  # Replace this with the actual expected maximum value for your context.",0.5957446808510638,0.4888888888888889,0.5957446808510638,42.224756170304694
For the `forecast_date` field: Ensure the field is of type 'date'. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_not_be_null(column=""forecast_date"")","expect_column_to_exist(column=""forecast_date""),expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_not_be_null(column=""forecast_date"")",0.8627450980392156,0.8571428571428571,0.8627450980392156,74.80673768313193
For the `employees` table: Ensure the `hire_date` values can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_be_dateutil_parseable(column=""hire_date"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `transaction_type` column contains only values from the set `['Deposit', 'Withdrawal', 'Transfer']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])",1.0,1.0,1.0,100.00000000000004
For the `price` column: Ensure all values are greater than 0 and less than or equal to 1000.,"expect_column_values_to_be_between(column=""price"", min_value=0, max_value=1000)","expect_column_values_to_be_greater_than(column=""price"", value=0),expect_column_values_to_be_less_than(column=""price"", value=1000)",0.6111111111111112,0.41176470588235287,0.6111111111111112,37.78770318297481
"Examine the `communication_type` column to ensure it contains values only from the set `['email', 'chat', 'call']`.","expect_column_values_to_be_in_set(column=""communication_type"", value_set=['email', 'chat', 'call'])","expect_column_values_to_be_in_set(column=""communication_type"", value_set=['email', 'chat', 'call'])",1.0,1.0,1.0,100.00000000000004
"For the `patient_id` field: Ensure the field matches the type 'integer'. Validate that all values are positive integers, with a maximum length of 10 digits.","expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_be_between(column=""patient_id"", min_value=1, max_value=9999999999),expect_column_value_lengths_to_be_between(column=""patient_id"", min_value=1, max_value=10)","expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_be_between(column=""patient_id"", min_value=0, max_value=9999999999)",0.7428571428571429,0.7058823529411765,0.7428571428571429,54.48254817442639
For field 'test_scores': Ensure the field matches the type 'float'. Validate that values in (test_scores) are within the range of 0.0 to 100.0. Ensure the column contains no null values and exists.,"expect_column_to_exist(column=""test_scores""),expect_column_values_to_not_be_null(column=""test_scores""),expect_column_values_to_be_of_type(column=""test_scores"", type_=""float""),expect_column_values_to_be_between(column=""test_scores"", min_value=0.0, max_value=100.0)","expect_column_to_exist(column=""test_scores""),expect_column_values_to_be_of_type(column=""test_scores"", type_=""float""),expect_column_values_to_be_between(column=""test_scores"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""test_scores"")",0.9777777777777777,0.9545454545454545,0.7555555555555555,94.97210413026635
Check that the `created_at` column is not null and follows the format 'YYYY-MM-DD HH:MM:SS'.,"expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"For the `product_category` column, ensure that all entries match the predefined list: ['Electronics', 'Furniture', 'Clothing'].","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing'])","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing'])",1.0,1.0,1.0,100.00000000000004
For field `vehicle_id`: Ensure all values in `vehicle_id` exist in the reference `vehicles` table.,"expect_column_values_to_be_in_set(column=""vehicle_id"", value_set=reference_vehicles_table)","expect_column_values_to_be_in_set(column=""vehicle_id"", value_set=vehicles)",0.9285714285714286,0.8461538461538461,0.9285714285714286,81.63162136997808
"Verify that the `course_id` values exist in the predefined set of course identifiers: `['CS101', 'MATH202', 'BIO303']`.","expect_column_values_to_be_in_set(column=""course_id"", value_set=['CS101', 'MATH202', 'BIO303'])","expect_column_values_to_be_in_set(column=""course_id"", value_set=['CS101', 'MATH202', 'BIO303'])",1.0,1.0,1.0,100.00000000000004
"For field 'status': Ensure the field contains only values from the set ['sent', 'failed', 'delivered']. Validate no missing values.","expect_column_values_to_be_in_set(column=""status"", value_set=['sent', 'failed', 'delivered']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=[""sent"", ""failed"", ""delivered""]),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,78.98083643452483
For field 'payment_date': Ensure this field exists and matches the format '%Y-%m-%d'. Validate that all values in (payment_date) are valid future dates.,"expect_column_to_exist(column=""payment_date""),expect_column_values_to_match_strftime_format(column=""payment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""payment_date"")  # Note: This validates general date parsing; specific future date validation is not available in the expectations.","expect_column_to_exist(column=""payment_date""),expect_column_values_to_match_strftime_format(column=""payment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""payment_date""),expect_column_values_to_be_between(column=""payment_date"", min_value=""1900-01-01"", max_value=""today"")",0.7010309278350516,0.6526315789473683,0.6804123711340205,64.40067006277887
Ensure the `service_requests` column contains valid JSON objects that conform to the specified service schema.,"expect_column_values_to_match_json_schema(column=""service_requests"", schema=""specified_service_schema"")","expect_column_values_to_be_json_parseable(column=""service_requests""),expect_column_values_to_match_json_schema(column=""service_requests"", schema=SERVICE_SCHEMA)",0.7027027027027025,0.6285714285714286,0.7027027027027025,49.509640188043754
For field 'jurisdiction': Ensure the field is required (not null). Ensure values in 'jurisdiction' must exist in the predefined list of jurisdictions.,"expect_column_values_to_not_be_null(column=""jurisdiction""),expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=[""jurisdiction1"", ""jurisdiction2"", ""jurisdiction3""])  # Replace with the actual list of jurisdictions","expect_column_values_to_not_be_null(column=""jurisdiction""),expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=predefined_set_of_jurisdictions)",0.8148148148148148,0.7692307692307693,0.8148148148148148,65.9065790075947
Ensure that the `hearing_date` column contains valid dates that are later than the `filing_date`.,"expect_column_values_to_be_dateutil_parseable(column=""hearing_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""hearing_date"", column_B=""filing_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""hearing_date"", column_B=""filing_date"")",0.782608695652174,0.7727272727272727,0.782608695652174,56.27048688069559
For field 'room_number': Ensure the field matches the type 'integer'. Ensure values in (room_number) are unique and cannot be null.,"expect_column_values_to_be_of_type(column=""room_number"", type_=""int""),expect_column_values_to_be_unique(column=""room_number""),expect_column_values_to_not_be_null(column=""room_number"")","expect_column_values_to_be_of_type(column=""room_number"", type_=""integer""),expect_column_values_to_not_be_null(column=""room_number""),expect_column_values_to_be_unique(column=""room_number"")",0.967741935483871,0.9333333333333333,0.8709677419354839,96.46458712936789
Ensure the `policy_number` column contains only unique values and matches the specified alphanumeric pattern.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[A-Za-z0-9]+$"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""[a-zA-Z0-9\_-]{3,50}"")",0.9600000000000001,0.9583333333333334,0.9600000000000001,80.31525581884611
For the `user_id` field: Ensure it is unique across records and corresponds to valid entries in the `users` table.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_user_ids)","expect_column_values_to_be_unique(column=""user_id""),expect_select_column_values_to_match_set(column=""users"", values=""user_id"", set_of_valid_users)",0.8399999999999999,0.5833333333333334,0.76,67.59410313739609
Verify that the `email` column matches the regular expression pattern for valid email addresses and does not contain duplicates.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")",0.7058823529411764,0.6530612244897959,0.7058823529411764,70.48262191085614
For field 'inventory_count': Ensure the field matches the type 'integer'. Ensure values in (inventory_count) are within the range of 0 to 10000.,"expect_column_values_to_be_of_type(column=""inventory_count"", type_=""int""),expect_column_values_to_be_between(column=""inventory_count"", min_value=0, max_value=10000)","expect_column_values_to_be_of_type(column=""inventory_count"", type_=""int""),expect_column_values_to_be_between(column=""inventory_count"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
"For field 'phone_number': Ensure the values in (phone_number) match the pattern '^\+?[1-9]\d{1,14}$', indicating a valid international phone number format.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\\+?[1-9]\\d{1,14}$"")",1.0,1.0,1.0,91.3567673659309
Ensure the `citizen_id` column contains only unique values and must not allow null entries.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
For field 'registration_date': Ensure all entries conform to the format 'YYYY-MM-DD'. Ensure this field is parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""registration_date"")","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d"")  # Ensure column values have the expected date format of YYYY-MM-DD.  # Note: Using ""strftime_format"" with ""%Y-%m-%d"" ensures that the column values match the expected date format even if the data entered by the users are in any other date formats such as mm/dd/yyyy, dd/mm/yyyy etc., as the datetime class can automatically parse those date formats into the desired YYYY-MM-DD format.  # Additional reference: https://strftime.org/  #expect_column_values_to_be_dateutil_parseable(column=""registration_date"")  # This will ensure that all column values are in fact parsable dates rather than just strings which appear to be dates, e.g. '2023-10-31' should parse as a date, whereas ""2023-10-31"" should raise an exception because it is not actually a parsable date.  # Assuming there are no other special requirements for how dates need to be validated, I'd suggest this approach, which covers both parsing and ensuring that dates are in the correct format.",0.2450980392156863,0.2277227722772277,0.2450980392156863,21.806561205080275
"For the `post_timestamp`, ensure all entries are in the format '%Y-%m-%d %H:%M:%S' and do not exceed the current date.","expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_less_than(column=""post_timestamp"", max_value=""current_date"")","expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_between(column=""post_timestamp"", min_value=""1970-01-01 00:00:00"", max_value=""2023-10-01 23:59:59"")  # current date  # assuming post_timestamp column has values in string format.",0.6976744186046512,0.6190476190476191,0.6976744186046512,59.490970024617475
"Ensure the `currency` column contains only values from the specified set: ['USD', 'EUR', 'GBP', 'JPY'].","expect_column_values_to_be_in_set(column=""currency"", value_set=['USD', 'EUR', 'GBP', 'JPY'])","expect_column_values_to_be_in_set(column=""currency"", value_set=[""USD"", ""EUR"", ""GBP"", ""JPY""])",1.0,1.0,1.0,61.307486149033124
For the `service_request_date` column: Ensure it matches the type 'date'. Check for missing values.,"expect_column_values_to_be_of_type(column=""service_request_date"", type_=""date""),expect_column_values_to_not_be_null(column=""service_request_date"")","expect_column_values_to_be_of_type(column=""service_request_date"", type_=""date""),expect_column_values_to_not_be_null(column=""service_request_date"")",1.0,1.0,1.0,100.00000000000004
For field `location`: Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure each `location` value is unique.,"expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_be_unique(column=""location"")","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_be_unique(column=""location"")",1.0,1.0,1.0,100.00000000000004
Verify that the `performance_score` has a standard deviation that does not exceed 1.5.,"expect_column_stdev_to_be_between(column=""performance_score"", max_value=1.5)","expect_column_stdev_to_be_between(column=""performance_score"", min_value=0, max_value=1.5)",0.896551724137931,0.8148148148148148,0.896551724137931,77.66178900310341
"For field 'discount_code': Ensure the field matches the type 'string'. Ensure all values in (discount_code) match the pattern '^[A-Z0-9]{5,10}$'. Ensure this field exists.","expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""string""),expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z0-9]{5,10}$"")","expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""string""),expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z0-9]{5,10}$"")",1.0,1.0,1.0,100.00000000000004
For the table 'lab_results': Ensure that the 'result_value' column contains numeric data types only. Check that no values are null.,"expect_table_columns_to_match_set(column_set=[""result_value""], exact_match=False),expect_column_values_to_be_of_type(column=""result_value"", type_=""float""),expect_column_values_to_not_be_null(column=""result_value"")","expect_column_values_to_be_of_type(column=""result_value"", type_=""numeric""),expect_column_values_to_not_be_null(column=""result_value"")",0.7368421052631579,0.6909090909090908,0.7368421052631579,52.32122820302883
"For the `attack_type` field, ensure that all entries are from the predefined set `['Phishing', 'Malware', 'DDoS']`.","expect_column_values_to_be_in_set(column=""attack_type"", value_set=['Phishing', 'Malware', 'DDoS'])","expect_column_values_to_be_in_set(column=""attack_type"", value_set=['Phishing', 'Malware', 'DDoS'])",1.0,1.0,1.0,100.00000000000004
Check that the `publish_date` column values are valid date entries formatted as 'MM/DD/YYYY' and that they are not in the future.,"expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""publish_date""),expect_column_values_to_be_between(column=""publish_date"", min_value=""01/01/1900"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_between(column=""publish_date"", min_value=""1/1/1900"", max_value=""today"")",0.8108108108108109,0.7777777777777778,0.8108108108108109,70.28857418921476
"Confirm that the `grades.csv` file has the necessary headers: `student_id`, `course_id`, `grade`.","expect_file_to_have_valid_table_header(file_path=""grades.csv"", expected_header_list=[""student_id"", ""course_id"", ""grade""])","expect_file_to_exist(file=""grades.csv""),expect_file_to_have_valid_table_header(file=""grades.csv"")  # This would require an assert file, but you can use it to create a valid file with a table header, and then check to ensure the file exists and its header matches the one provided.",0.36619718309859156,0.2608695652173913,0.30985915492957744,26.27634725919505
For the `employee_json` column: Confirm all entries are valid JSON objects representing employee information according to the defined schema.,"expect_column_values_to_be_json_parseable(column=""employee_json""),expect_column_values_to_match_json_schema(column=""employee_json"", schema=defined_schema)","expect_column_values_to_be_json_parseable(column=""employee_json""),expect_column_values_to_match_json_schema(column=""employee_json"", schema={""type"": ""object"", ""properties"": {""employee_name"": {""type"": ""string"", ""minLength"": 3, ""maxLength"": 50}, ""department"": {""type"": ""string"", ""minLength"": 3, ""maxLength"": 50}, ""salary"": {""type"": ""number""}}})",0.6461538461538461,0.6349206349206349,0.6461538461538461,35.49369340284915
"For table 'transactions': Ensure the number of rows is equal to the expected transaction count for the period. Ensure all required fields ('transaction_id', 'amount', 'timestamp') exist.","expect_table_row_count_to_equal(expected_value=expected_transaction_count),expect_column_to_exist(column=""transaction_id""),expect_column_to_exist(column=""amount""),expect_column_to_exist(column=""timestamp"")","expect_table_row_count_to_equal(table=""transactions"", expected_value=transaction_count),expect_select_column_values_to_be_in_set(column=""transaction_id"", value_set=required_fields)  # Replace ""required_fields"" with actual transaction required fields, as necessary.",0.47761194029850745,0.3076923076923077,0.47761194029850745,40.37535520501423
"Confirm that the `loan_amount` column values are within the range of $1,000 to $500,000.","expect_column_values_to_be_between(column=""loan_amount"", min_value=1000, max_value=500000)","expect_column_values_to_be_between(column=""loan_amount"", min_value=1000, max_value=500000)",1.0,1.0,1.0,100.00000000000004
Ensure the `subscriber_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""subscriber_id""),expect_column_values_to_not_be_null(column=""subscriber_id"")","expect_column_values_to_be_unique(column=""subscriber_id""),expect_column_values_to_not_be_null(column=""subscriber_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `check_in_date` column contains no missing values. Validate that all entries are of type 'date' and in the future.,"expect_column_values_to_not_be_null(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_in_set(column=""check_in_date"", value_set=[date for date in pd.date_range(start=datetime.now(), end=pd.Timestamp.max)])","expect_column_to_exist(column=""check_in_date""),expect_column_values_to_not_be_null(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_increasing(column=""check_in_date"")",0.7526881720430109,0.6813186813186813,0.7096774193548386,68.01780258977017
For table 'resource_allocations': Ensure the sum of 'allocated_funds' does not exceed the 'total_budget' specified in the table.,"expect_column_sum_to_be_between(column=""allocated_funds"", min_value=0, max_value=total_budget)","expect_column_sum_to_equal(column=""allocated_funds"", sum=""total_budget"")",0.6666666666666666,0.48,0.6666666666666666,46.53244801256028
For the field `sale_date`: Ensure all entries are valid dates that fall within the last `5 years`.,"expect_column_values_to_be_dateutil_parseable(column=""sale_date""),expect_column_values_to_be_between(column=""sale_date"", min_value=""2018-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_between(column=""sale_date"", min_value=""2019-10-01"", max_value=""2023-10-01"")",0.75,0.6956521739130435,0.75,55.73442448683321
For the `rating` column: Ensure values are within the range of 1 to 10. Ensure this field is required (not null).,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
Confirm that the total sum of `salary` in the `employees` table matches the total budget allocated in the `departments` table.,"expect_column_sum_to_be_between(column=""salary"", min_value=0),expect_multicolumn_sum_to_equal(column_A=""salary"", column_B=""allocated_budget"")","expect_column_sum_to_be_between(column=""salary"", min_value=department_budget)",0.6285714285714286,0.5454545454545455,0.6285714285714286,30.92611361980783
"Validate that the `status_code` column only contains values from the set `['Active', 'Inactive', 'Pending']` to prevent erroneous data.","expect_column_values_to_be_in_set(column=""status_code"", value_set=['Active', 'Inactive', 'Pending'])","expect_column_values_to_be_in_set(column=""status_code"", value_set=['Active', 'Inactive', 'Pending'])",1.0,1.0,1.0,100.00000000000004
"For `publish_date`, validate that all entries are in the 'YYYY-MM-DD' format and occur before the current date.","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""publish_date"", value_set=[date for date in date_range if date < current_date])","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publish_date""),expect_column_values_to_be_greater_than(column=""publish_date"", value=""2023-10-10"") # current date for example.",0.7000000000000001,0.6153846153846153,0.675,58.304586691787804
For the `threat_logs` file: Confirm that the file matches the specified hash value and falls within a size range of 100KB to 1MB.,"expect_file_hash_to_equal(file_path=""threat_logs"", expected_hash_value=""your_expected_hash_value""),expect_file_size_to_be_between(file_path=""threat_logs"", min_value=100 * 1024, max_value=1 * 1024 * 1024)","expect_file_to_exist(filename=""threat_logs""),expect_file_to_match_hash_value(filename=""threat_logs"", hash_value=""hash_value_here""),expect_file_size_to_be_between(filename=""threat_logs"", min_value=100_000, max_value=1_000_000)",0.7027027027027027,0.4444444444444444,0.6486486486486486,52.012791355869396
"Ensure that the `player_position` field only contains values from the set `['Forward', 'Midfielder', 'Defender', 'Goalkeeper']`.","expect_column_values_to_be_in_set(column=""player_position"", value_set=['Forward', 'Midfielder', 'Defender', 'Goalkeeper'])","expect_column_values_to_be_in_set(column=""player_position"", value_set=['Forward', 'Midfielder', 'Defender', 'Goalkeeper'])",1.0,1.0,1.0,100.00000000000004
Check that the `return_rate` for products is less than `10%`.,"expect_column_max_to_be_between(column=""return_rate"", max_value=0.1)","expect_column_mean_to_be_between(column=""return_rate"", min_value=0.0, max_value=0.1)",0.8000000000000002,0.6428571428571429,0.8000000000000002,68.98885852150292
For field 'user_reviews': Ensure the field matches the type 'text'. Validate that the length of strings in 'user_reviews' can be between 10 and 500 characters.,"expect_column_values_to_be_of_type(column=""user_reviews"", type_=""text""),expect_column_value_lengths_to_be_between(column=""user_reviews"", min_value=10, max_value=500)","expect_column_values_to_be_of_type(column=""user_reviews"", type_=""text""),expect_column_value_lengths_to_be_between(column=""user_reviews"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
"For the `customer_data` field, ensure it conforms to the specified JSON schema, including all mandatory fields.","expect_column_values_to_match_json_schema(column=""customer_data"", schema=""your_json_schema_here"")","expect_column_to_exist(column=""customer_data""),expect_column_values_to_match_json_schema(column=""customer_data"")  # Replace with actual JSON schema for this field.",0.6,0.5263157894736842,0.6,45.900694708088814
Validate that the `hire_date` column matches the format 'YYYY-MM-DD' and is a valid date.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_to_exist(column=""hire_date""),expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,76.86458850312829
"For the `delivery_date` field, ensure all entries conform to the format 'MM/DD/YYYY' and are valid dates.","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""delivery_date"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""delivery_date"")",1.0,1.0,1.0,100.00000000000004
Ensure that the combination of `user_id` and `order_id` remains unique across all records.,"expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""order_id"")","expect_compound_columns_to_be_unique(column_a=""user_id"", column_b=""order_id"")",1.0,1.0,1.0,82.93181259810136
"For the `alert_type` column, ensure values are either 'malware', 'phishing', or 'ransomware'. Confirm that the occurrences of each type maintain a proportional distribution not exceeding 40% for any category.","expect_column_values_to_be_in_set(column=""alert_type"", value_set=[""malware"", ""phishing"", ""ransomware""]),expect_column_proportion_of_unique_values_to_be_between(column=""alert_type"", max_value=0.4)","expect_column_values_to_be_in_set(column=""alert_type"", value_set=[""malware"", ""phishing"", ""ransomware""]),expect_column_proportion_to_be_between(column=""malware"", min_value=0.40, max_value=0.40),expect_column_proportion_to_be_between(column=""phishing"", min_value=0.40, max_value=0.40),expect_column_proportion_to_be_between(column=""ransomware"", min_value=0.40, max_value=0.40)",0.553191489361702,0.47826086956521735,0.553191489361702,44.69535925123416
For the `card_number` field: Ensure values match the pattern of a 16-digit number and are of type 'string'.,"expect_column_values_to_match_regex(column=""card_number"", regex=r""^\d{16}$""),expect_column_values_to_be_of_type(column=""card_number"", type_=""string"")","expect_column_values_to_match_regex(column=""card_number"", regex=r""^\d{16}$""),expect_column_values_to_be_of_type(column=""card_number"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
"For field 'property_type': Ensure the field matches the type 'text'. Validate that all values in 'property_type' are among the defined set: {apartment, house, commercial, land}.","expect_column_values_to_be_of_type(column=""property_type"", type_=""text""),expect_column_values_to_be_in_set(column=""property_type"", value_set={""apartment"", ""house"", ""commercial"", ""land""})","expect_column_values_to_be_of_type(column=""property_type"", type_=""text""),expect_column_values_to_be_in_set(column=""property_type"", value_set={'apartment', 'house', 'commercial', 'land'})",1.0,1.0,1.0,78.18429768538174
"Ensure the unique value count of the `vehicle_type` column matches `['Truck', 'Van', 'Bicycle']`.","expect_column_distinct_values_to_equal_set(column=""vehicle_type"", value_set=['Truck', 'Van', 'Bicycle'])","expect_column_value_counts_to_be_between(column=""vehicle_type"", min_value=1, max_value=3)",0.5161290322580646,0.20689655172413796,0.5161290322580646,37.723531767450325
Check that the `price` column values are arranged in increasing order across all rows.,"expect_column_values_to_be_increasing(column=""price"")","expect_column_values_to_be_increasing(column=""price"")",1.0,1.0,1.0,100.00000000000004
For the `transaction_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.,"expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""integer""),expect_column_values_to_be_unique(column=""transaction_id"")",0.967741935483871,0.9333333333333333,0.8387096774193549,96.46458712936789
Ensure that the number of rows in the `renewable_energy_sources` table is equal to the number of entries in the `energy_type` table.,"expect_table_row_count_to_equal(other_table=""energy_type"")","expect_table_row_count_to_equal(other_table=""energy_type"")",1.0,1.0,1.0,100.00000000000004
For field 'quantity': Ensure the values in 'quantity' are within the range of 1 to 1000. Ensure this field exists.,"expect_column_to_exist(column=""quantity""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)","expect_column_to_exist(column=""quantity""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'price': Ensure the average price is within the range of $5 to $500.,"expect_column_mean_to_be_between(column=""price"", min_value=5, max_value=500)","expect_column_mean_to_be_between(column=""price"", min_value=5, max_value=500)",1.0,1.0,1.0,100.00000000000004
Ensure the `case_number` column contains unique values and matches the type 'text'.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check that the `battery_level` column has values between 0 and 100.,"expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure the `course_type` column contains only distinct values matching `['Online', 'In-Person', 'Hybrid']`. Ensure this field exists.","expect_column_to_exist(column=""course_type""),expect_column_distinct_values_to_equal_set(column=""course_type"", set_=[""Online"", ""In-Person"", ""Hybrid""])","expect_column_to_exist(column=""course_type""),expect_column_distinct_values_to_equal_set(column=""course_type"", value_set=['Online', 'In-Person', 'Hybrid'])",0.9777777777777777,0.9302325581395349,0.9777777777777777,72.87746435129341
For field 'wallet_address': Validate that the field matches the type 'string'. Ensure values in (wallet_address) match the regex pattern '^(0x)?[0-9a-fA-F]{40}$'. Ensure this field exists.,"expect_column_to_exist(column=""wallet_address""),expect_column_values_to_be_of_type(column=""wallet_address"", type_=""string""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^(0x)?[0-9a-fA-F]{40}$"")","expect_column_to_exist(column=""wallet_address""),expect_column_values_to_be_of_type(column=""wallet_address"", type_=""string""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^(0x)?[0-9a-fA-F]{40}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `quantity` column values are between `1` and `100`.,"expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=100)","expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For the `payment_status` field: Ensure this field matches the type 'text'. Values must be from the set `['Paid', 'Pending', 'Cancelled']`.","expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Cancelled'])","expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
Ensure the `voter_id` column contains only unique values. Ensure this field is required (not null) and matches the type 'text'.,"expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""text"")","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `candidate_id` column contains only values from the set `['CAND1', 'CAND2', 'CAND3']`.","expect_column_values_to_be_in_set(column=""candidate_id"", value_set=['CAND1', 'CAND2', 'CAND3'])","expect_column_values_to_be_in_set(column=""candidate_id"", value_set=['CAND1', 'CAND2', 'CAND3'])",1.0,1.0,1.0,100.00000000000004
"Check that the `performance_metrics` field contains valid JSON objects conforming to the specified schema, including keys like 'points', 'assists', and 'rebounds'.","expect_column_values_to_match_json_schema(column=""performance_metrics"", schema={ ""type"": ""object"", ""properties"": { ""points"": { ""type"": ""number"" }, ""assists"": { ""type"": ""number"" }, ""rebounds"": { ""type"": ""number"" } }, ""required"": [""points"", ""assists"", ""rebounds""] })","expect_column_values_to_match_json_schema(column=""performance_metrics"", schema={""type"": ""object"", ""properties"": {""points"": {""type"": ""number""}, ""assists"": {""type"": ""number""}, ""rebounds"": {""type"": ""number""}}, ""required"": [""points"", ""assists"", ""rebounds""]})",1.0,1.0,1.0,100.00000000000004
For the `transaction_amount` column: Validate that all entries are positive numeric values and do not exceed 10000.,"expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""float""),expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0),expect_column_values_to_be_less_than(column=""transaction_amount"", value=10001)",0.43137254901960786,0.28571428571428575,0.43137254901960786,22.669717221272837
Verify that the `course_completion_rate` column remains above 75% for all courses offered in the last semester.,"expect_column_mean_to_be_between(column=""course_completion_rate"", min_value=0.75, max_value=1.0)","expect_column_mean_to_be_between(column=""course_completion_rate"", min_value=75, max_value=100)",0.8823529411764706,0.8125,0.8823529411764706,86.61374260444664
Confirm that the `sample_size` column contains only positive integers and that values are arranged in increasing order.,"expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=None),expect_column_values_to_be_increasing(column=""sample_size"")","expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_be_between(column=""sample_size"", min_value=1),expect_column_values_to_be_increasing(column=""sample_size"")",0.7719298245614035,0.6909090909090908,0.7368421052631579,59.116591033769815
Verify that the `supplier_id` column contains only unique values. Ensure this column is required (not null).,"expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")","expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `student_id` column contains unique values and is of type 'integer'. This field must not be null.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""student_id"")",0.967741935483871,0.9333333333333333,0.8064516129032258,96.46458712936789
Verify that the `email` column adheres to a valid email format and does not contain duplicates.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")",0.7058823529411764,0.6530612244897959,0.7058823529411764,70.48262191085614
For field 'sample_size': Ensure values are greater than 0 and of type 'integer'. Ensure no missing values.,"expect_column_values_to_be_greater_than(column=""sample_size"", value=0),expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_not_be_null(column=""sample_size"")","expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_be_greater_than(column=""sample_size"", value=0),expect_column_values_to_not_be_null(column=""sample_size"")",1.0,1.0,0.7647058823529412,100.00000000000004
For the `transaction_id` column: Ensure all values adhere to the regex pattern `^[0-9a-fA-F]{64}$` and are unique.,"expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[0-9a-fA-F]{64}$""),expect_column_values_to_be_unique(column=""transaction_id"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^([0-9a-fA-F]){64}$""),expect_column_values_to_be_unique(column=""transaction_id"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,70.33356780002548
For field 'supplier_email': Validate that the field matches the email pattern and is not null.,"expect_column_values_to_not_be_null(column=""supplier_email""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_not_be_null(column=""supplier_email""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.7586206896551725,0.7142857142857143,0.7586206896551725,77.76802641426434
Ensure that the total number of rows in the `inventory` table is between 50 and 500.,"expect_table_row_count_to_be_between(min_value=50, max_value=500)","expect_table_row_count_to_be_between(table=""inventory"", min_value=50, max_value=500)ЎыџNЎыџN",0.8666666666666666,0.7857142857142857,0.8666666666666666,72.71476415476808
"For the `player_age` column: Ensure all values are integers within the range of 18 to 40 years, and they should be arranged in increasing order.","expect_column_values_to_be_between(column=""player_age"", min_value=18, max_value=40),expect_column_values_to_be_increasing(column=""player_age"")","expect_column_values_to_be_between(column=""player_age"", min_value=18, max_value=40),expect_column_values_to_be_of_type(column=""player_age"", type_=""int""),expect_column_values_to_be_increasing(column=""player_age"")",0.8,0.7931034482758621,0.8,63.1812349968288
"For the `order_status` field: Ensure it includes only values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `property_type` column contains only distinct values from the set `['Residential', 'Commercial', 'Industrial']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_distinct_values_to_equal_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
"For field 'district_code': Ensure the field matches the type 'text'. Validate that values in (district_code) do not match any SQL-like patterns from the list: ('SELECT', 'DROP', 'INSERT'). Ensure this field exists.","expect_column_to_exist(column=""district_code""),expect_column_values_to_be_of_type(column=""district_code"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""district_code"", regex_list=[r""SELECT"", r""DROP"", r""INSERT""])","expect_column_to_exist(column=""district_code""),expect_column_values_to_be_of_type(column=""district_code"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""district_code"", regex_list=[r"".*select.*"", r"".*drop.*"", r"".*insert.*""])",1.0,1.0,1.0,80.86268201611264
For field 'signup_date': Ensure this date field contains no missing values and that all dates are in the format 'YYYY-MM-DD'.,"expect_column_values_to_not_be_null(column=""signup_date""),expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""signup_date""),expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `device_id` column contains only unique values, with no null entries allowed, confirming that each device is represented once in the dataset.","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'payment_method': Ensure values are from the set ['Credit Card', 'Debit Card', 'PayPal'] and are not null.","expect_column_values_to_be_in_set(column=""payment_method"", value_set=['Credit Card', 'Debit Card', 'PayPal']),expect_column_values_to_not_be_null(column=""payment_method"")","expect_column_values_to_be_in_set(column=""payment_method"", value_set=['Credit Card', 'Debit Card', 'PayPal']),expect_column_values_to_not_be_null(column=""payment_method"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `session_duration` column passes the KS test with p-values greater than 0.05, indicating a consistent user session duration.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""session_duration"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""session_duration"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"Ensure the `hotel_id` field contains unique values, with no missing entries across records.","expect_column_values_to_be_unique(column=""hotel_id""),expect_column_values_to_not_be_null(column=""hotel_id"")","expect_column_values_to_be_unique(column=""hotel_id""),expect_column_values_to_not_be_null(column=""hotel_id"")",1.0,1.0,1.0,100.00000000000004
Validate that the `performance_score` field is of type 'integer' and falls within the range of 1 to 10.,"expect_column_values_to_be_of_type(column=""performance_score"", type_=""int""),expect_column_values_to_be_between(column=""performance_score"", min_value=1, max_value=10)","expect_column_values_to_be_of_type(column=""performance_score"", type_=""int""),expect_column_values_to_be_between(column=""performance_score"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
"Validate that the `customer_status` column contains values from the set `['Active', 'Inactive', 'Prospect']`. Ensure this field exists and is not null.","expect_column_to_exist(column=""customer_status""),expect_column_values_to_not_be_null(column=""customer_status""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive', 'Prospect'])","expect_column_to_exist(column=""customer_status""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=[""Active"", ""Inactive"", ""Prospect""]),expect_column_values_to_not_be_null(column=""customer_status"")",1.0,0.967741935483871,0.71875,83.97511401948091
Ensure that the `sku` column contains unique values for each product.,"expect_column_values_to_be_unique(column=""sku"")","expect_column_values_to_be_unique(column=""sku"")",1.0,1.0,1.0,100.00000000000004
For field 'humidity': Ensure the field matches the type 'integer'. Ensure values in 'humidity' are within the range of 0 to 100 percent. Ensure this field exists.,"expect_column_to_exist(column=""humidity""),expect_column_values_to_be_of_type(column=""humidity"", type_=""integer""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_to_exist(column=""humidity""),expect_column_values_to_be_of_type(column=""humidity"", type_=""integer""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_id` column contains only unique values and matches the specified format of 10 alphanumeric characters.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_match_regex(column=""patient_id"", regex=r""^[a-zA-Z0-9]{10}$"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_value_lengths_to_equal(column=""patient_id"", length=10)ılmaktadır",0.7659574468085107,0.5777777777777778,0.7234042553191491,58.69751656699619
"For the `tags` field, ensure all entries are valid JSON arrays containing only strings from the specified set: ['news', 'technology', 'health', 'finance'].","expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema={""type"": ""array"", ""items"": {""type"": ""string"", ""enum"": [""news"", ""technology"", ""health"", ""finance""]}})","expect_column_values_to_be_json_parseable(column=""tags""),expect_column_values_to_match_regex(column=""tags"", regex=r""[\[\]{}]*['news', 'technology', 'health', 'finance']*['],[\s]*"")",0.7547169811320755,0.6666666666666666,0.7547169811320755,42.027599222105955
For the `allergy_information` field: Ensure it contains valid entries and does not exceed 200 characters.,"expect_column_values_to_match_regex(column=""allergy_information"", regex=r""^.{0,200}$"")","expect_column_values_to_be_of_type(column=""allergy_information"", type_=""text""),expect_column_value_lengths_to_be_between(column=""allergy_information"", min_value=0, max_value=200)",0.4390243902439025,0.2564102564102564,0.4390243902439025,23.969510400105865
For the `election_year` field: Ensure the values are within the range of 2000 to 2023 and are sorted in increasing order.,"expect_column_values_to_be_between(column=""election_year"", min_value=2000, max_value=2023),expect_column_values_to_be_increasing(column=""election_year"")","expect_column_values_to_be_between(column=""election_year"", min_value=2000, max_value=2023),expect_column_values_to_be_increasing(column=""election_year"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_date': Ensure this field exists. Ensure the field matches the type 'date'. Ensure values in 'transaction_date' are within the last 12 months.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2024-10-01"", max_value=""today"")# replace the max_value=""today"" with today's date and replace the min_value = (today-12months)","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2021-10-01"", max_value=""2022-10-01"")",0.7555555555555555,0.7272727272727273,0.7555555555555555,73.17650002043437
Confirm that the `location` column exists and contains only distinct entries from the defined set of valid locations.,"expect_column_to_exist(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=[""valid_location_1"", ""valid_location_2"", ""valid_location_3""])","expect_column_to_exist(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=valid_locations)",0.8444444444444443,0.8372093023255813,0.8444444444444443,55.541416971896666
Verify that the `test_results` column passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""test_results"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""test_results"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'filing_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure 'filing_date' is not in the future.,"expect_column_values_to_not_be_null(column=""filing_date""),expect_column_values_to_be_of_type(column=""filing_date"", type_=""date""),expect_column_values_to_be_between(column=""filing_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_not_be_null(column=""filing_date""),expect_column_values_to_be_of_type(column=""filing_date"", type_=""date""),expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_greater_than(column=""filing_date"", value=""2023-10-01"")  # Replace with actual end date if known.",0.7311827956989247,0.6153846153846153,0.7096774193548386,65.68020624026309
For field 'processed_timestamp': Ensure the field is required (not null). Ensure the field matches the type 'timestamp'. Ensue this field exist,"expect_column_to_exist(column=""processed_timestamp""),expect_column_values_to_not_be_null(column=""processed_timestamp""),expect_column_values_to_be_of_type(column=""processed_timestamp"", type_=""timestamp"")","expect_column_to_exist(column=""processed_timestamp""),expect_column_values_to_not_be_null(column=""processed_timestamp""),expect_column_values_to_be_of_type(column=""processed_timestamp"", type_=""timestamp"")",1.0,1.0,1.0,100.00000000000004
"For the `diagnosis` field, validate that all entries belong to the set of recognized ICD-10 codes and are not null.","expect_column_values_to_be_in_set(column=""diagnosis"", value_set=[/* list of recognized ICD-10 codes */]),expect_column_values_to_not_be_null(column=""diagnosis"")","expect_column_values_to_be_in_set(column=""diagnosis"", value_set=ICD_10_CODES),expect_column_values_to_not_be_null(column=""diagnosis"")",0.9387755102040816,0.8936170212765958,0.9387755102040816,77.14221497521366
Verify that the `quantity_ordered` column contains only positive integers.,"expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int"")","expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int""),expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1)",0.9411764705882353,0.8979591836734695,0.627450980392157,87.30761920477507
"Ensure the `amount_awarded` column values are within the range of 0 to 1,000,000.","expect_column_values_to_be_between(column=""amount_awarded"", min_value=0, max_value=1000000)","expect_column_values_to_be_between(column=""amount_awarded"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
"For the `timestamp` field, ensure all entries are formatted as 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
"For the `funding_amount` column, check that all values are within the range of $1,000 to $1,000,000 and that there are no missing values.","expect_column_values_to_be_between(column=""funding_amount"", min_value=1000, max_value=1000000),expect_column_values_to_not_be_null(column=""funding_amount"")","expect_column_values_to_be_between(column=""funding_amount"", min_value=1000, max_value=1000000),expect_column_values_to_not_be_null(column=""funding_amount"")",1.0,1.0,1.0,100.00000000000004
For field 'zip_code': Ensure values are unique and match the format 'XXXXX' or 'XXXXX-XXXX'. Ensure this field exists.,"expect_column_to_exist(column=""zip_code""),expect_column_values_to_be_unique(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}(-\d{4})?$"")","expect_column_to_exist(column=""zip_code""),expect_column_values_to_be_unique(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^(?:[\d]{5,}|[A-Za-z][A-Za-z\d]{5,})$"")",0.8823529411764706,0.8484848484848485,0.8823529411764706,74.47276331903107
"For the `user_email` column: Validate that all email addresses follow the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$` to ensure proper formatting.","expect_column_values_to_match_regex(column=""user_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""user_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
Validate that the `final_grade` column values are between 0 and 100.,"expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure the `residency_status` field contains valid JSON objects conforming to the defined schema of `{ 'status': 'string', 'verified': 'boolean' }`.","expect_column_values_to_match_json_schema(column=""residency_status"", schema=""{ 'status': 'string', 'verified': 'boolean' }"")","expect_column_values_to_match_json_schema(column=""residency_status"", schema='{""type"": ""object"", ""properties"": {""status"": {""type"": ""string""}, ""verified"": {""type"": ""boolean""}}}'),expect_column_values_to_match_json_schema(column=""residency_status"")илакти",0.6666666666666666,0.5116279069767441,0.6666666666666666,26.657718966084744
Confirm that the Kullback-Leibler divergence between `purchase_amounts` across different customer types is below 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""purchase_amounts"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""purchase_amounts"", other_column=""customer_type"", threshold=0.1)",0.8750000000000001,0.8000000000000002,0.8750000000000001,71.835253691757
For field 'price': Ensure the field matches the type 'float'. Validate that all values are greater than zero and formatted correctly with two decimal places.,"expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=None),expect_column_values_to_match_regex(column=""price"", regex=r""^\d+(\.\d{2})?$"")","expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0.01),expect_column_values_to_match_regex(column=""price"", regex=r""^\d+\.\d{2}$"")",0.9600000000000001,0.9315068493150684,0.9600000000000001,85.61624056597786
For field `performance_review_date`: Ensure the column values adhere to the format 'YYYY-MM-DD' and that all dates are in the past or today.,"expect_column_values_to_match_strftime_format(column=""performance_review_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""performance_review_date"")","expect_column_values_to_match_strftime_format(column=""performance_review_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""performance_review_date"")",0.9433962264150944,0.9019607843137256,0.9433962264150944,92.53123231329282
"Validate that the `application_status` follows the JSON schema and contains keys `id`, `status`, and `timestamp`.","expect_column_values_to_match_json_schema(column=""application_status"", schema={""type"": ""object"", ""properties"": {""id"": {""type"": ""string""}, ""status"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""application_status"", json_schema={""type"": ""object"", ""required"": [""id"", ""status"", ""timestamp""], ""properties"": {""id"": {""type"": ""string""}, ""status"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}}),expect_column_values_to_be_of_type(column=""application_status"", type_=""dict""),expect_column_values_to_have_all_required_columns(column=""application_status""),expect_column_values_to_match_json_schema(column=""application_status"", schema={""type"": ""object"", ""properties"": {""id"": {""type"": ""string""}, ""status"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}})",0.4742268041237113,0.4631578947368421,0.4742268041237113,33.74973568517372
Ensure the `game_date` column contains datetime values that match the strftime format '%Y-%m-%d'.,"expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_dateutil_parseable(column=""game_date""),expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format='%Y-%m-%d')",0.7499999999999999,0.7368421052631579,0.7499999999999999,52.33970408554727
Ensure the average `number_of_vulnerabilities` identified per report is between 1 and 50.,"expect_column_mean_to_be_between(column=""number_of_vulnerabilities"", min_value=1, max_value=50)","expect_column_mean_to_be_between(column=""number_of_vulnerabilities"", min_value=1, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure that all JSON columns across the tables conform to their respective JSON schemas without errors.,"expect_column_values_to_match_json_schema(column=""your_json_column_name"")  # Replace ""your_json_column_name"" with the actual column names as needed.","expect_column_values_to_match_json_schema(column=""table_name.column_name"")",0.611111111111111,0.4705882352941176,0.611111111111111,38.79768339797796
"For the `budget_amount` column: Confirm that the sum of values does not exceed the allocated budget of $1,000,000.","expect_column_sum_to_be_between(column=""budget_amount"", min_value=0, max_value=1000000)","expect_column_sum_to_be_between(column=""budget_amount"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
For the `energy_consumption` and `billing_amount` columns: Verify that the sum of `energy_consumption` is greater than the sum of `billing_amount` across the dataset.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""energy_consumption"", column_B=""billing_amount"")","expect_multicolumn_sum_to_be_greater_than(column_list=[""energy_consumption""], threshold_value=""billing_amount"")",0.6666666666666666,0.3225806451612903,0.606060606060606,45.64384180537125
Ensure the `age` column values are within the range of 18 to 100.,"expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100)","expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100)",1.0,1.0,1.0,100.00000000000004
Check `election_date`: Ensure the field exists. Validate that the date is in the format `YYYY-MM-DD` and falls within the range of the current year.,"expect_column_to_exist(column=""election_date""),expect_column_values_to_match_strftime_format(column=""election_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""election_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""election_date""),expect_column_values_to_match_strftime_format(column=""election_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""election_date"", min_value=""2022-10-20"", max_value=""2023-10-20"")",0.8780487804878049,0.85,0.8780487804878049,89.43113466038007
Verify that the `transaction_date` column matches the format 'MM/DD/YYYY' and is in the past relative to today's date.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")  # Assuming date parsing will implicitly check for past dates in a subsequent validation step.","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_less_than(column=""transaction_date"", value=datetime.date.today())",0.7058823529411765,0.6363636363636364,0.7058823529411765,72.19741310378136
For the `admission_date` column: Ensure all values conform to the datetime format 'YYYY-MM-DD' and are earlier than the current date.,"expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""admission_date""),expect_column_values_to_be_decreasing(column=""admission_date"")","expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""admission_date"", value=""current_date"")",0.806451612903226,0.7000000000000001,0.806451612903226,69.44763787328225
"Ensure the `sample_size` column has values within the range [30, 1000] and does not contain any missing values.","expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=1000),expect_column_values_to_not_be_null(column=""sample_size"")","expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=1000),expect_column_values_to_not_be_null(column=""sample_size"")",1.0,1.0,1.0,100.00000000000004
"For field 'sensor_type': Ensure the field matches the type 'text'. Ensure values in (sensor_type) must exist in the predefined list: ['temperature', 'humidity', 'pressure']. Ensure this field cannot be null.","expect_column_values_to_be_of_type(column=""sensor_type"", type_=""text""),expect_column_values_to_be_in_set(column=""sensor_type"", value_set=['temperature', 'humidity', 'pressure']),expect_column_values_to_not_be_null(column=""sensor_type"")","expect_column_values_to_be_of_type(column=""sensor_type"", type_=""text""),expect_column_values_to_be_in_set(column=""sensor_type"", value_set=[""temperature"", ""humidity"", ""pressure""]),expect_column_values_to_not_be_null(column=""sensor_type"")",1.0,1.0,1.0,86.83217861603632
Ensure the `json_data` column contains valid JSON objects that conform to the specified schema for all entries.,"expect_column_values_to_match_json_schema(column=""json_data"")","expect_column_values_to_match_json_schema(column=""json_data"", schema=schema_for_valid_json)",0.8,0.782608695652174,0.8,64.61925764014633
For the `block_timestamp` field: Validate that all timestamps are of type 'datetime' and fall within the range of the past 30 days.,"expect_column_values_to_be_of_type(column=""block_timestamp"", type_=""datetime""),expect_column_values_to_be_between(column=""block_timestamp"", max_value=""now"", min_value=""now - interval '30 days'"")","expect_column_values_to_be_of_type(column=""block_timestamp"", type_=""datetime""),expect_column_values_to_be_between(column=""block_timestamp"", min_value=""2023-08-28 12:00:00"", max_value=""2023-09-27 12:00:00"")",0.746268656716418,0.676923076923077,0.6865671641791045,72.29269352452029
Validate that the number of rows in the `cases` table is equal to the number of entries in the `clients` table.,"expect_table_row_count_to_equal_other_table(table=""cases"", other_table=""clients"")","expect_table_row_count_to_equal_other_table(table=""cases"", other_table=""clients"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `phone_number` column matches the pattern '^\+?[0-9]{10,15}$' to ensure proper formatting.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[0-9]{10,15}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[0-9]{10,15}$"")ávající",0.9375,0.9333333333333333,0.9375,97.40037464252967
"For field 'payment_status': Ensure that this field contains only values from the set ['Pending', 'Completed', 'Failed']. Validate there are no null values.","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Pending', 'Completed', 'Failed']),expect_column_values_to_not_be_null(column=""payment_status"")","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Pending', 'Completed', 'Failed']),expect_column_values_to_not_be_null(column=""payment_status"")",1.0,1.0,1.0,100.00000000000004
Ensure the `social_security_number` column follows a specific format and is unique across all records in the dataset.,"expect_column_values_to_match_regex(column=""social_security_number"", regex=r""^\d{3}-\d{2}-\d{4}$""),expect_column_values_to_be_unique(column=""social_security_number"")","expect_column_values_to_match_regex(column=""social_security_number"", regex=r""^[0-9]{3}-(?!.*\1)[0-9]{2}-(?!.*\1)[0-9]{2}-[0-9]{4}$""),expect_column_values_to_be_unique(column=""social_security_number"")",0.78125,0.6774193548387097,0.78125,56.85564774864237
For the `diagnosis_code` field: Ensure the field matches the type 'text'. Verify that each value is unique and exists within the defined set of valid codes.,"expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_unique(column=""diagnosis_code""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_codes_set)","expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_unique(column=""diagnosis_code""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_codes)",0.9859154929577464,0.9855072463768115,0.9859154929577464,96.63331183230802
"For the `comment_count`, ensure the values are within the range of 0 to 1,000, with no null values.","expect_column_values_to_be_between(column=""comment_count"", min_value=0, max_value=1000),expect_column_values_to_not_be_null(column=""comment_count"")","expect_column_values_to_be_between(column=""comment_count"", min_value=0, max_value=1000, exclusive_max=True),expect_column_values_to_not_be_null(column=""comment_count"")",0.9433962264150945,0.9019607843137256,0.9433962264150945,87.32949145753393
"For the `assist_count` and `goal_count` columns: Ensure that the sum of `assist_count` across all players is not less than 100. Validate that the relationship of assists to goals remains consistent (e.g., assists should be greater than or equal to goals).","expect_column_sum_to_be_between(column=""assist_count"", min_value=100),expect_column_pair_values_A_to_be_greater_than_B(column_A=""assist_count"", column_B=""goal_count"")","expect_column_sum_to_be_between(column=""assist_count"", min_value=100),expect_column_pair_values_to_be_greater_than(column_A=""assist_count"", column_B=""goal_count"")",0.9655172413793104,0.8928571428571429,0.9655172413793104,90.31038276721519
"For field 'vote_count': Ensure this field exists. Validate that 'vote_count' is a non-negative integer and does not exceed 1,000,000.","expect_column_to_exist(column=""vote_count""),expect_column_values_to_be_of_type(column=""vote_count"", type_=""int""),expect_column_values_to_be_between(column=""vote_count"", min_value=0, max_value=1000000)","expect_column_to_exist(column=""vote_count""),expect_column_values_to_be_of_type(column=""vote_count"", type_=""int""),expect_column_values_to_be_between(column=""vote_count"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column values are within the range of `-50` to `50` degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",1.0,1.0,1.0,100.00000000000004
For field 'account_balance': Ensure the field matches the type 'decimal'. Ensure values in (account_balance) cannot be null and are non-negative.,"expect_column_values_to_be_of_type(column=""account_balance"", type_=""decimal""),expect_column_values_to_not_be_null(column=""account_balance""),expect_column_values_to_be_between(column=""account_balance"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""account_balance"", type_=""decimal""),expect_column_values_to_not_be_null(column=""account_balance""),expect_column_values_to_be_between(column=""account_balance"", min_value=0)",0.9577464788732395,0.9565217391304348,0.9577464788732395,91.78194866101656
"Validate the `category` column to confirm it only contains values from the predefined set: `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
For table 'products': Ensure the column 'price' exists and contains positive numeric values. Validate that the total row count is greater than 100.,"expect_column_to_exist(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None),expect_table_row_count_to_be_greater_than(value=100)","expect_column_to_exist(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None),expect_table_row_count_to_be_greater_than(table=""products"", value=101)",0.9354838709677419,0.9,0.9354838709677419,87.18516284514726
Confirm that the `customer_score` values are within the range of 0 to 10 and sorted in descending order.,"expect_column_values_to_be_between(column=""customer_score"", min_value=0, max_value=10),expect_column_values_to_be_decreasing(column=""customer_score"")","expect_column_values_to_be_between(column=""customer_score"", min_value=0, max_value=10),expect_column_values_to_be_increasing(column=""customer_score"")",0.9583333333333334,0.9130434782608695,0.9583333333333334,95.06885335787993
For field 'enrollment_date': Ensure this column exists and contains dates. Validate that all entries are not in the future and are in chronological order.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_decreasing(column=""enrollment_date"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2022-01-01"", max_value=""2023-10-31""),  # Assuming this is the last date for enrollment in the current academic year.  # If this needs to be changed for future enrollments, a custom check can be created as necessary.  #expect_column_values_to_be_increasing(column=""enrollment_date"")  # This would check for chronological order.  # However, it's not strictly necessary since the data has already been cleaned up at this point.  #expect_column_values_to_be_less_than(column=""enrollment_date"", value=""2023-11-01"")  # To ensure that no enrollments will occur in the future.",0.33783783783783783,0.31506849315068497,0.33783783783783783,26.456784082695684
"Ensure all values in the `shipping_method` column exist in the predefined set `['Air', 'Sea', 'Land']`.","expect_column_values_to_be_in_set(column=""shipping_method"", value_set=['Air', 'Sea', 'Land'])","expect_column_values_to_be_in_set(column=""shipping_method"", value_set=['Air', 'Sea', 'Land'])",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_id` has distinct values and is not null across all records.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_distinct_values_to_be_greater_than(column=""customer_id"", value=0),expect_column_values_to_not_be_null(column=""customer_id"")",0.8571428571428571,0.7000000000000001,0.8571428571428571,73.78048987306343
"For the `department` column: Ensure values match at least one pattern from the list `['HR', 'Finance', 'IT', 'Marketing']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Marketing'])","expect_column_values_to_be_in_set(column=""department"", value_set=[""HR"", ""Finance"", ""IT"", ""Marketing""])",1.0,1.0,1.0,61.307486149033124
Ensure the `temperature_reading` values are within the range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature_reading"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature_reading"", min_value=-30, max_value=50)ılmaktadır",0.9375,0.9333333333333333,0.9375,96.82132340352993
"For field 'delivery_status': Ensure this field exists. Validate that 'delivery_status' only contains values from the predefined set ('pending', 'shipped', 'delivered', 'canceled').","expect_column_to_exist(column=""delivery_status""),expect_column_values_to_be_in_set(column=""delivery_status"", value_set=[""pending"", ""shipped"", ""delivered"", ""canceled""])","expect_column_to_exist(column=""delivery_status""),expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['pending','shipped', 'delivered', 'canceled'])",1.0,1.0,1.0,73.3097508350418
Check that the `stock_quantity` column follows a Poisson distribution with a mean of 20.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""stock_quantity"", threshold=0.05)","expect_column_mean_to_be_between(column=""stock_quantity"", min_value=20)",0.5333333333333333,0.2857142857142857,0.4666666666666666,38.83668539362839
"Check that the `service_type` column consists solely of values from the set `['Healthcare', 'Education', 'Transportation']`.","expect_column_values_to_be_in_set(column=""service_type"", value_set=['Healthcare', 'Education', 'Transportation'])","expect_column_values_to_be_in_set(column=""service_type"", value_set=['Healthcare', 'Education', 'Transportation'])",1.0,1.0,1.0,100.00000000000004
Ensure the `device_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
For field `subscription_start`: Ensure this field is of type 'date'. Ensure `subscription_start` is not null and is less than or equal to `subscription_end`.,"expect_column_values_to_be_of_type(column=""subscription_start"", type_=""date""),expect_column_values_to_not_be_null(column=""subscription_start""),expect_column_pair_values_A_to_be_less_than_B(column_A=""subscription_start"", column_B=""subscription_end"")","expect_column_values_to_be_of_type(column=""subscription_start"", type_=""date""),expect_column_values_to_not_be_null(column=""subscription_start""),expect_column_pair_values_to_be_between(column_A=""subscription_start"", column_B=""subscription_end"", min_value=""2000-01-01"", max_value=""today"")",0.8470588235294118,0.7951807228915662,0.8470588235294118,77.86774487020756
Check that the `author` column does not contain null values and is of type 'text'.,"expect_column_values_to_not_be_null(column=""author""),expect_column_values_to_be_of_type(column=""author"", type_=""text"")","expect_column_values_to_not_be_null(column=""author""),expect_column_values_to_be_of_type(column=""author"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check if the `author_id` is present in the `users` table to maintain referential integrity.,"expect_column_values_to_be_in_set(column=""author_id"", value_set=users_table_author_ids)","expect_column_values_to_be_in_set(column=""author_id"", value_set=users_table_author_ids)",1.0,1.0,1.0,100.00000000000004
Validate that the `vote_weight` in Voting Systems is always equal to or less than the `voter_weight` across all records to ensure valid vote calculations.,"expect_column_pair_values_A_to_be_less_than_equal_to_B(column_A=""vote_weight"", column_B=""voter_weight"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""vote_weight"", column_B=""voter_weight"")",0.8947368421052632,0.7777777777777778,0.8947368421052632,82.56952905294429
For fields 'variable_1' and 'variable_2': Ensure the combination of these fields is unique within each record.,"expect_select_column_values_to_be_unique_within_record(column_list=[""variable_1"", ""variable_2""])","expect_compound_columns_to_be_unique(column_A=""variable_1"", column_B=""variable_2"")",0.689655172413793,0.29629629629629634,0.689655172413793,42.55321073467561
Verify that the `penalty_minutes` column values are within the range of `0` to `60`.,"expect_column_values_to_be_between(column=""penalty_minutes"", min_value=0, max_value=60)","expect_column_values_to_be_between(column=""penalty_minutes"", min_value=0, max_value=60)ávací",0.967741935483871,0.9655172413793104,0.967741935483871,96.82132340352993
"For the `customer_id` field: Ensure that this field contains only distinct values, with no duplicates allowed. It must not be null.","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""text"")",0.76,0.7499999999999999,0.76,58.02798126835858
For field 'invoice_number': Ensure the field matches the type 'string'. Validate that (invoice_number) matches the pattern '^INV-\\d{4}-\\d{6}$'. Ensure this field exists.,"expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""string""),expect_column_values_to_match_regex(column=""invoice_number"", regex=r""^INV-\d{4}-\d{6}$"")","expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""string""),expect_column_values_to_match_regex(column=""invoice_number"", regex=r""^INV-\d{4}-\d{6}$"")",1.0,1.0,1.0,100.00000000000004
For field 'patient_age': Ensure that the mean age of patients falls within the range of 18 to 100. Check for any missing values in this field.,"expect_column_mean_to_be_between(column=""patient_age"", min_value=18, max_value=100),expect_column_values_to_not_be_null(column=""patient_age"")","expect_column_mean_to_be_between(column=""patient_age"", min_value=18, max_value=100),expect_column_values_to_not_be_null(column=""patient_age"")",1.0,1.0,1.0,100.00000000000004
Validate that the `contract_end_date` is always greater than the `contract_start_date`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""contract_end_date"", column_B=""contract_start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""contract_end_date"", column_B=""contract_start_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_id` column contains only unique values and matches the expected format of `PXXXX`.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^P\d{4}$"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""P[\d]{4}"")",1.0,1.0,1.0,87.05542755883022
For field `release_date`: Ensure the field matches the type 'date'. Ensure values in `release_date` are not null and are less than the current date.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=None, max_value=current_date)","expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_be_less_than(column=""release_date"", value=datetime.datetime.now().strftime(""%Y-%m-%d""))",0.7294117647058822,0.674698795180723,0.7294117647058822,69.47113390501076
In the `wind_speed` column: Verify that all values are non-negative and within the range of 0 to 150 km/h.,"expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `precipitation` column contains distinct values matching the set `['None', 'Light', 'Moderate', 'Heavy']`.","expect_column_distinct_values_to_equal_set(column=""precipitation"", value_set=['None', 'Light', 'Moderate', 'Heavy'])","expect_column_values_to_be_in_set(column=""precipitation"", value_set=['None', 'Light', 'Moderate', 'Heavy'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For field 'enrollment_date': Verify that the unique values in 'enrollment_date' reflect a range from the last semester. Ensure the mean enrollment date is not older than one year.,"expect_column_unique_value_count_to_be_between(column=""enrollment_date"", min_value=1, max_value=6),  # Assuming last semester has up to 6 unique values,expect_column_mean_to_be_between(column=""enrollment_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")  # Adjust the dates accordingly for your context","expect_column_mean_to_be_between(column=""enrollment_date"", min_value=""2020-01-01"", max_value=""2020-12-31""),expect_column_mean_to_be_between(column=""enrollment_date"", min_value=""2020-12-01"", max_value=""2020-12-31"")  # Note the ""min_value=""2020-12-01"", as this ensures that the mean enrollment date is not older than one year.",0.5405405405405405,0.38532110091743116,0.5225225225225225,50.35148364972927
For the `post_time` field: Ensure all datetime entries match the format `%Y-%m-%d %H:%M:%S` and are timestamps from the past.,"expect_column_values_to_match_strftime_format(column=""post_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""post_time""),expect_column_values_to_be_in_set(column=""post_time"", value_set=[timestamp for timestamp in pd.date_range(start='1900-01-01', end=pd.Timestamp.now())])","expect_column_values_to_match_strftime_format(column=""post_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_between(column=""post_time"", min_value=""1970-01-01 00:00:00"", max_value=""current_date"")",0.6595744680851063,0.5434782608695652,0.6170212765957446,50.01231942291809
For field 'release_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure that the date is not in the future.,"expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_be_between(column=""release_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_be_less_than(column=""release_date"", value=""current_date"")",0.7654320987654322,0.7088607594936709,0.7654320987654322,73.83588053519799
For field 'game_title': Ensure the field is required (not null). Validate that the length of the title does not exceed 100 characters.,"expect_column_values_to_not_be_null(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100)","expect_column_values_to_not_be_null(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `citizen_id` column exists and contains unique values that conform to the format 'A1234567'.,"expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_match_regex(column=""citizen_id"", regex=r""^[A-Za-z]\d{7}$"")","expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_match_regex(column=""citizen_id"", regex=r""^A\d{7}$"")",0.967741935483871,0.9333333333333333,0.967741935483871,93.7725379038352
"Ensure the dataset includes exactly 100 rows, and that the `experiment_date` column has no missing values.","expect_table_row_count_to_equal(expected_value=100),expect_column_values_to_not_be_null(column=""experiment_date"")","expect_table_row_count_to_be_between(start_value=1, end_value=100),expect_column_to_exist(column=""experiment_date""),expect_column_values_to_not_be_null(column=""experiment_date"")",0.7346938775510204,0.6382978723404256,0.6938775510204083,54.513560300312506
"Ensure the `category` field contains values that match the predefined list `['Technology', 'Health', 'Lifestyle']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Technology', 'Health', 'Lifestyle'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Technology', 'Health', 'Lifestyle'])",1.0,1.0,1.0,100.00000000000004
"For field 'income_level': Ensure this field exists. Validate that the values are in the set ('Low', 'Medium', 'High').","expect_column_to_exist(column=""income_level""),expect_column_values_to_be_in_set(column=""income_level"", value_set=[""Low"", ""Medium"", ""High""])","expect_column_to_exist(column=""income_level""),expect_column_values_to_be_in_set(column=""income_level"", value_set=['Low', 'Medium', 'High'])",1.0,1.0,1.0,78.45017601424416
Verify that the `origin` and `destination` fields contain only valid city names from the predefined list of cities.,"expect_column_values_to_be_in_set(column=""origin"", value_set=predefined_city_names),expect_column_values_to_be_in_set(column=""destination"", value_set=predefined_city_names)","expect_column_values_to_be_in_set(column=""origin"", value_set=valid_city_names),expect_column_values_to_be_in_set(column=""destination"", value_set=valid_city_names)",0.9285714285714286,0.8518518518518519,0.9285714285714286,91.4389447605936
For field `publication_date`: Ensure this field exists and contains dates in the format 'YYYY-MM-DD'. Ensure all dates are in the past.,"expect_column_to_exist(column=""publication_date""),expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publication_date""),expect_column_values_to_be_between(column=""publication_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_to_exist(column=""publication_date""),expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""publication_date"", value=""today"")",0.7710843373493975,0.7160493827160493,0.7710843373493975,60.149940356115614
"Ensure the `supplier_id` in the `suppliers` table is unique and not null, representing valid suppliers.","expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")","expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,67.34450755684337
Ensure the `patient_age` column contains values between 0 and 120 with no outliers.,"expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)","expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120),expect_column_outlier_count_to_be_less_than(column=""patient_age"", threshold=1)",0.6976744186046512,0.6829268292682926,0.6976744186046512,51.23508470473843
For field 'crypto_address': Ensure the field is required (not null). Ensure the field matches the type 'string' and conforms to the regex pattern '^0x[a-fA-F0-9]{40}$'.,"expect_column_values_to_not_be_null(column=""crypto_address""),expect_column_values_to_be_of_type(column=""crypto_address"", type_=""string""),expect_column_values_to_match_regex(column=""crypto_address"", regex=r""^0x[a-fA-F0-9]{40}$"")","expect_column_values_to_not_be_null(column=""crypto_address""),expect_column_values_to_be_of_type(column=""crypto_address"", type_=""string""),expect_column_values_to_match_regex(column=""crypto_address"", regex=r""^0x[a-fA-F0-9]{40}$"")",1.0,1.0,1.0,100.00000000000004
For field 'delivery_date': Ensure the field matches the type 'date'. Ensure values in 'delivery_date' are greater than '2023-01-01'.,"expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""2023-01-01"", max_value=None)","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_values_to_be_greater_than(column=""delivery_date"", value=""2023-01-01"")",0.7741935483870968,0.7,0.7741935483870968,70.34272085285676
Verify that the `temperature` readings are consistent with the expected values from the weather model in the `expected_temperature` column.,"expect_column_pair_values_to_be_equal(column_A=""temperature"", column_B=""expected_temperature"")","expect_column_values_to_equal_other_column(column=""temperature"", other_column=""expected_temperature"")",0.7407407407407408,0.24000000000000002,0.7407407407407408,51.41769209177029
Ensure the `forecast_timestamp` column matches the strftime format '%Y-%m-%d %H:%M:%S' and all values can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""forecast_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""forecast_timestamp"")","expect_column_values_to_match_strftime_format(column=""forecast_timestamp"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""forecast_timestamp"")",1.0,1.0,1.0,90.58415926238055
"Validate the `insurance_provider` column contains values from the set `['Medicare', 'Medicaid', 'Private']`.","expect_column_values_to_be_in_set(column=""insurance_provider"", value_set=['Medicare', 'Medicaid', 'Private'])","expect_column_values_to_be_in_set(column=""insurance_provider"", value_set=['Medicare', 'Medicaid', 'Private'])",1.0,1.0,1.0,100.00000000000004
Verify that the `candidate_id` field only contains values that exist in the `candidates` table. Ensure that there are no missing values.,"expect_column_values_to_be_in_set(column=""candidate_id"", value_set=candidates_table_values),expect_column_values_to_not_be_null(column=""candidate_id"")","expect_column_values_to_be_in_set(column=""candidate_id"", value_set=candidates_ids),expect_column_values_to_not_be_null(column=""candidate_id"")",0.9387755102040817,0.8936170212765957,0.9387755102040817,91.54819475168922
Check that the `configuration` JSON object adheres to the defined JSON schema and does not contain any null values.,"expect_column_values_to_match_json_schema(column=""configuration"", schema=""your_schema_here""),expect_column_values_to_not_be_null(column=""configuration"")","expect_file_to_have_valid_json_schema(file_path=""configuration""),expect_column_values_to_not_be_null(column=""configuration"")",0.6829268292682926,0.4615384615384615,0.6829268292682926,58.99523316193958
"For the `platform` column: Ensure values can only be from the set `['PC', 'Console', 'Mobile']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])",1.0,1.0,1.0,100.00000000000004
Verify that the `claim_date` column adheres to the format 'YYYY-MM-DD' and all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""claim_date"")","expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""claim_date"")",1.0,1.0,1.0,100.00000000000004
For the `enrollment_date` field: Verify that all entries match the format '%Y-%m-%d' and are not later than today's date.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""1970-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""1900-01-01"", max_value=""2023-10-10"")  # Assuming today's date as October 10, 2023.ávající",0.7209302325581396,0.6666666666666666,0.7209302325581396,61.9447714762619
"For `outage_start_time`, check that all entries adhere to the format `%Y-%m-%d %H:%M:%S` and do not contain missing values.","expect_column_to_exist(column=""outage_start_time""),expect_column_values_to_match_strftime_format(column=""outage_start_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""outage_start_time"")","expect_column_values_to_match_strftime_format(column=""outage_start_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""outage_start_time"")",0.8823529411764706,0.8787878787878788,0.8823529411764706,76.22897307899541
For field 'discount_code': Ensure the field matches the type 'text'. Ensure the field has unique values. Ensure this field exists.,"expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_values_to_be_unique(column=""discount_code"")","expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_values_to_be_unique(column=""discount_code""),expect_column_values_to_not_be_null(column=""discount_code"")",0.8484848484848484,0.8437499999999999,0.8484848484848484,74.00642186197871
Check that the `premium_amount` column contains values between 100 and 10000.,"expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000)","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Assess whether the `submission_date` values are all in the past relative to the `review_date` column.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""submission_date"", column_B=""review_date"")","expect_column_pair_values_to_be_greater(column_A=""submission_date"", column_B=""review_date"")",0.8484848484848485,0.7096774193548386,0.8484848484848485,75.07184397266934
Ensure the `email_subject` column has a length between 5 and 100 characters and does not contain any special characters.,"expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""email_subject"", regex=r""[^a-zA-Z0-9\s]"")","expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""email_subject"", regex=r""[!\""\\#\$\\%\\&\\*\\+\\,-\\./\\:\\;\\<\\=\\?\\@\\^\\_\\[\\]\\{\\|\\}\\~]"")",0.9180327868852458,0.9152542372881356,0.9180327868852458,46.939860268160544
"Validate that the `genre` column contains values only from the list `['Drama', 'Comedy', 'Action', 'Documentary']`.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Drama', 'Comedy', 'Action', 'Documentary'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Drama', 'Comedy', 'Action', 'Documentary'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `phone_number` field in HRMS and E-commerce datasets matches the regex pattern `^\+?[1-9]\d{1,14}$`.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")",1.0,1.0,1.0,100.00000000000004
For the 'sensor_data' table: Validate that the 'timestamp' column exists and that all timestamps are in increasing order.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_increasing(column=""timestamp"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_increasing(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Verify that the `forecast_date` column contains valid dates and adheres to the format 'DD-MM-YYYY'.,"expect_column_values_to_be_dateutil_parseable(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%d-%m-%Y"")","expect_column_values_to_be_dateutil_parseable(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%d-%m-%Y"")",1.0,1.0,1.0,100.00000000000004
For field 'wind_speed': Ensure the field matches the type 'float'. Ensure values in 'wind_speed' are non-negative and do not exceed 150 km/h.,"expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
Verify that the `customer_feedback` column does not contain any null values and is of string type.,"expect_column_values_to_not_be_null(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""string"")","expect_column_values_to_not_be_null(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
For the 'transactions' table: Ensure the 'transaction_date' column is in the format YYYY-MM-DD and that all dates correspond to the current fiscal year.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")  # Additional expectation to verify date format,# Note: The fiscal year check would typically require custom logic outside of standard expectations.","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-10-01"", max_value=""2023-10-31"")  # Assuming fiscal year starts from 1 October to 31 October.",0.606060606060606,0.5154639175257733,0.606060606060606,51.88310259799496
"Verify that the `response_code` column contains only distinct values from the set `['200', '404', '500']`, confirming valid HTTP responses.","expect_column_values_to_be_in_set(column=""response_code"", value_set=['200', '404', '500'])","expect_column_distinct_values_to_equal_set(column=""response_code"", value_set=[""200"", ""404"", ""500""])",0.8666666666666667,0.7142857142857143,0.8666666666666667,55.140712637789264
"Validate that the values in the `route_data` column are valid JSON objects, conforming to the specified schema, including keys for `start_location` and `end_location`.","expect_column_values_to_be_json_parseable(column=""route_data""),expect_column_values_to_match_json_schema(column=""route_data"", schema={""type"": ""object"", ""properties"": {""start_location"": {""type"": ""string""}, ""end_location"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""route_data""),expect_column_values_to_match_json_schema(column=""route_data"", schema={""type"": ""object"", ""properties"": { ""start_location"": {}, ""end_location"": {}}})",0.9333333333333333,0.896551724137931,0.9333333333333333,80.8827533198166
Verify that the `enrollment_date` values in the `student_records` table have valid dates within the current academic year.,"expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-05-31"")","expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-08-31"")",0.75,0.6956521739130435,0.75,55.73442448683321
Check that the `stock_quantity` column contains only integers and has no missing values.,"expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_not_be_null(column=""stock_quantity"")","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_not_be_null(column=""stock_quantity"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `incident_severity` column values are categorized as 'low', 'medium', 'high', or 'critical'. Validate that the distribution of severities does not exceed a 30% threshold for any individual category.","expect_column_values_to_be_in_set(column=""incident_severity"", value_set=[""low"", ""medium"", ""high"", ""critical""]),expect_column_proportion_of_unique_values_to_be_between(column=""incident_severity"", min_value=0.0, max_value=0.3)","expect_column_values_to_be_in_set(column=""incident_severity"", value_set=[""low"", ""medium"", ""high"", ""critical""]),expect_column_mean_to_be_between(column=""incident_severity"", min_value=0.1, max_value=0.3),expect_column_proportion_of_unique_values_to_be_between(column=""incident_severity"", min_value=0.1, max_value=0.3)",0.8089887640449438,0.7586206896551724,0.7865168539325842,68.97127072390332
For field 'transaction_date': Ensure all values in 'transaction_date' adhere to the format '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `status` column only contains distinct values from the set ['Open', 'Closed', 'Pending'] and that 'Closed' cases have a valid `case_closed_date`.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_not_be_null(column=""case_closed_date"")  # This assumes that 'case_closed_date' should be checked for non-null only when 'status' is 'Closed'","expect_column_distinct_values_to_equal_set(column=""status"", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_not_be_null(column=""case_closed_date""),expect_column_values_to_be_dateutil_parseable(column=""case_closed_date""),expect_column_values_to_be_in_set(column=""case_closed_date"", value_set=case_closed_date_set)  # where case_closed_date_set is a list of valid dates",0.5849056603773585,0.5,0.5283018867924528,40.02808750269433
Check that the `discount_rate` column values are less than or equal to the `original_price` column values.,"expect_column_pair_values_A_to_be_less_than_or_equal_to_B(column_A=""discount_rate"", column_B=""original_price"")","expect_column_pair_values_to_be_increasing(column_A=""original_price"", column_B=""discount_rate"")",0.7777777777777778,0.47058823529411764,0.5555555555555556,58.420222498707425
"For the `vehicle_status` column: Ensure values are restricted to the set `['in_service', 'out_of_service', 'maintenance']`.","expect_column_values_to_be_in_set(column=""vehicle_status"", value_set=['in_service', 'out_of_service', 'maintenance'])","expect_column_values_to_be_in_set(column=""vehicle_status"", value_set=['in_service', 'out_of_service','maintenance'])",1.0,1.0,1.0,100.00000000000004
Verify that the `registration_date` column contains valid datetime entries and is not later than the current date.,"expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value=None, max_value=datetime.now())","expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value=None, max_value=datetime.datetime.now())",0.9811320754716981,0.9803921568627451,0.9811320754716981,96.20311067578434
Ensure the `team_name` column contains distinct values from the defined set of teams in the league.,"expect_column_distinct_values_to_contain_set(column=""team_name"", value_set=defined_set_of_teams)","expect_column_values_to_be_in_set(column=""team_name"", value_set=teams_in_league)",0.7096774193548386,0.4827586206896552,0.7096774193548386,61.52252285045057
Ensure the `post_id` column contains unique values and is formatted as a string with a maximum length of 30 characters.,"expect_column_values_to_be_unique(column=""post_id""),expect_column_value_lengths_to_be_between(column=""post_id"", min_value=1, max_value=30)","expect_column_values_to_be_unique(column=""post_id""),expect_column_value_lengths_to_be_between(column=""post_id"", min_value=1, max_value=30)",1.0,1.0,1.0,100.00000000000004
For field 'wind_speed': Ensure the field exists. Validate that (wind_speed) matches the pattern '^[0-9]+(\\.[0-9]+)?$' and is measured in km/h.,"expect_column_to_exist(column=""wind_speed""),expect_column_values_to_match_regex(column=""wind_speed"", regex=r""^[0-9]+(\.[0-9]+)?$"")","expect_column_to_exist(column=""wind_speed""),expect_column_values_to_match_regex(column=""wind_speed"", regex=r""^[0-9]+(\\.[0-9]+)?$""),expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=300)ЎыџNЎыџN",0.6027397260273972,0.5915492957746479,0.6027397260273972,47.58670198524481
"Ensure the `user_id` column contains only unique values, with no null entries allowed.","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")",0.8444444444444443,0.8372093023255813,0.7111111111111111,70.92737232948345
Check that the `enrollment_date` column values pass the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""enrollment_date"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""enrollment_date"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column contains values within the range of -30 to 50 degrees Celsius and has no missing entries.,"expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50),expect_column_values_to_not_be_null(column=""temperature"")","expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50),expect_column_values_to_not_be_null(column=""temperature"")",1.0,1.0,1.0,100.00000000000004
"Check that the distribution of `view_counts` passes the Chi-Square test with a p-value greater than 0.05, ensuring expected view patterns.","expect_column_chisquare_test_p_value_to_be_greater_than(column=""view_counts"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""view_counts"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column values are within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure the `employee_id` column contains distinct values that are not null and adhere to the pattern 'EMP-XXXX' where X is a digit.,"expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""^EMP-\d{4}$"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""^[Ee]MP-\d{4}$"")",0.955223880597015,0.923076923076923,0.8656716417910447,93.04844600065417
For field 'purchase_amount': Ensure this field matches the type 'float'. Validate that the sum of purchase amounts is greater than $1000.,"expect_column_values_to_be_of_type(column=""purchase_amount"", type_=""float""),expect_column_sum_to_be_between(column=""purchase_amount"", min_value=1000.01)","expect_column_values_to_be_of_type(column=""purchase_amount"", type_=""float""),expect_column_sum_to_be_between(column=""purchase_amount"", min_value=1001, max_value=None)",0.8846153846153846,0.8799999999999999,0.8846153846153846,87.17095884481957
"For the field `plan_type`: Validate that the values belong to the set `['Prepaid', 'Postpaid', 'Family', 'Corporate']` and are not null.","expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Prepaid', 'Postpaid', 'Family', 'Corporate']),expect_column_values_to_not_be_null(column=""plan_type"")","expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Prepaid', 'Postpaid', 'Family', 'Corporate']),expect_column_values_to_not_be_null(column=""plan_type"")",1.0,1.0,1.0,100.00000000000004
For `transaction_date`: Ensure the field matches the type 'date' and contains values within the last five years.,"expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2018-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-01-01"", max_value=""today"")",0.7692307692307693,0.6666666666666666,0.7076923076923077,70.83184038684121
For the 'payment_method' field: Ensure the field exists and matches the type 'text'. Validate that values conform to the regex pattern '^(Credit Card|PayPal|Bank Transfer)$'.,"expect_column_to_exist(column=""payment_method""),expect_column_values_to_be_of_type(column=""payment_method"", type_=""text""),expect_column_values_to_match_regex(column=""payment_method"", regex=r""^(Credit Card|PayPal|Bank Transfer)$"")","expect_column_to_exist(column=""payment_method""),expect_column_values_to_be_of_type(column=""payment_method"", type_=""text""),expect_column_values_to_match_regex(column=""payment_method"", regex=r""^(Credit Card|PayPal|Bank Transfer)$"")",1.0,1.0,1.0,100.00000000000004
Validate that the `shipping_cost` column does not exceed `$500` and is always a non-negative number.,"expect_column_max_to_be_between(column=""shipping_cost"", max_value=500),expect_column_min_to_be_between(column=""shipping_cost"", min_value=0)","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=None),expect_column_max_to_be_between(column=""shipping_cost"", max_value=500)",0.9019607843137256,0.8163265306122449,0.7450980392156864,82.41774081969274
Ensure that the `created_at` and `updated_at` columns maintain a relationship where `updated_at` is greater than `created_at`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""updated_at"", column_B=""created_at"")","expect_column_pair_values_to_be_increasing(column_a=""updated_at"", column_b=""created_at"")",0.8484848484848485,0.7096774193548386,0.8484848484848485,61.04258689404539
For field 'humidity_percentage': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure values are between 0 and 100.,"expect_column_values_to_not_be_null(column=""humidity_percentage""),expect_column_values_to_be_of_type(column=""humidity_percentage"", type_=""int""),expect_column_values_to_be_between(column=""humidity_percentage"", min_value=0, max_value=100)","expect_column_values_to_not_be_null(column=""humidity_percentage""),expect_column_values_to_be_of_type(column=""humidity_percentage"", type_=""integer""),expect_column_values_to_be_between(column=""humidity_percentage"", min_value=0, max_value=100)",0.972972972972973,0.9444444444444444,0.972972972972973,96.97770291819575
"Confirm that the `user_feedback` column contains values that match at least one of the specified categories: `['Positive', 'Negative', 'Neutral']`.","expect_column_values_to_be_in_set(column=""user_feedback"", value_set=[""Positive"", ""Negative"", ""Neutral""])","expect_column_values_to_be_in_set(column=""user_feedback"", value_set=['Positive', 'Negative', 'Neutral'])",1.0,1.0,1.0,68.69938387430254
"For the 'rating' column: Ensure values are in the range [1, 10] and that there are no missing entries.","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
"For the `post_category` field, ensure it contains only values from the predefined list `['News', 'Entertainment', 'Sports']`.","expect_column_values_to_be_in_set(column=""post_category"", value_set=['News', 'Entertainment', 'Sports'])","expect_column_values_to_be_in_set(column=""post_category"", value_set=['News', 'Entertainment', 'Sports'])",1.0,1.0,1.0,100.00000000000004
"For table 'subscription_plans': Ensure the columns 'plan_id', 'plan_name', and 'price' exist in that order. Ensure the number of rows is equal to 5.","expect_table_columns_to_match_ordered_list(column_list=[""plan_id"", ""plan_name"", ""price""]),expect_table_row_count_to_equal(value=5)","expect_table_columns_to_match_ordered_list(column_list=[""plan_id"", ""plan_name"", ""price""]),expect_table_row_count_to_be_between(min_value=5, max_value=5)",0.8571428571428572,0.8085106382978723,0.8571428571428572,78.35633561921532
Check that the number of rows in the `suppliers` table is equal to the number of unique entries in the `products` table.,"expect_table_row_count_to_equal_other_table(table_other=""products"", column=""suppliers"")","expect_table_row_count_to_equal_other_table(table=""suppliers"", other_table=""products"")",0.9230769230769231,0.6666666666666666,0.8461538461538461,75.3113519285252
For field `filing_date`: Ensure the format adheres to 'YYYY-MM-DD'. Ensure all entries can be parsed correctly using dateutil.,"expect_column_to_exist(column=""filing_date""),expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
"For the `publication_year`, ensure that all entries are between `2000` and `2023`.","expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023)","expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023)",1.0,1.0,1.0,100.00000000000004
Ensure that the `subject` column is of type 'text' and does not contain any null values.,"expect_column_values_to_be_of_type(column=""subject"", type_=""text""),expect_column_values_to_not_be_null(column=""subject"")","expect_column_values_to_be_of_type(column=""subject"", type_=""text""),expect_column_values_to_not_be_null(column=""subject"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `plan_type` column contains distinct values from the defined set `['Prepaid', 'Postpaid', 'Family']`.","expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Prepaid', 'Postpaid', 'Family'])","expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Prepaid', 'Postpaid', 'Family'])",1.0,1.0,1.0,100.00000000000004
Verify that the average `blood_pressure` readings fall within the range of 90 to 140 for systolic and 60 to 90 for diastolic.,"expect_column_mean_to_be_between(column=""blood_pressure_systolic"", min_value=90, max_value=140),expect_column_mean_to_be_between(column=""blood_pressure_diastolic"", min_value=60, max_value=90)","expect_column_mean_to_be_between(column=""blood_pressure_systolic"", min_value=90, max_value=140),expect_column_mean_to_be_between(column=""blood_pressure_diastolic"", min_value=60, max_value=90)",1.0,1.0,1.0,100.00000000000004
"For file-based data asset 'orders_data.xlsx': Confirm that the file exists, validate that it contains the required headers, and ensure that it does not exceed 2 MB in size.","expect_file_to_exist(file_path=""orders_data.xlsx""),expect_file_to_have_valid_table_header(file_path=""orders_data.xlsx""),expect_file_size_to_be_between(file_path=""orders_data.xlsx"", min_value=0, max_value=2097152)","expect_file_to_exist(file=""orders_data.xlsx""),expect_file_to_have_valid_headers(file=""orders_data.xlsx""),expect_file_size_to_be_less_than(file=""orders_data.xlsx"", file_size=2 * 1024 * 1024)  # Assuming 2 MB size in bytes.",0.6923076923076923,0.5526315789473685,0.6923076923076923,65.74649336530102
"Ensure the `category` column contains values from the specified set `['news', 'tutorial', 'blog']` and does not contain any duplicates.","expect_column_values_to_be_in_set(column=""category"", value_set=['news', 'tutorial', 'blog']),expect_column_values_to_be_unique(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=[""news"", ""tutorial"", ""blog""]),expect_column_values_to_be_unique(column=""category"")",1.0,1.0,1.0,78.21606550584724
Ensure that the `created_at` column contains datetime strings matching the format `%Y-%m-%d`.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `transaction_date` follows the 'YYYY-MM-DD' format and is always before the `settlement_date`.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_less_than_B(column_A=""transaction_date"", column_B=""settlement_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_to_be_increasing(column_A=""transaction_date"", column_B=""settlement_date"")",0.9206349206349207,0.8524590163934426,0.9206349206349207,87.34749866117822
For the `diagnosis_code` column: Ensure that the values match the standard ICD-10 format. Validate that entries do not exceed 7 characters in length and do not contain any special characters.,"expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-Z][0-9]{1,6}$""),expect_column_value_lengths_to_be_between(column=""diagnosis_code"", min_value=1, max_value=7),expect_column_values_to_not_match_regex(column=""diagnosis_code"", regex=r""[^A-Z0-9]"")","expect_column_values_to_match_regex(r""^ICD-[1-9][0-9]{0,6}\-[1-9][0-9]{0,4}$""),expect_column_value_lengths_to_be_between(column=""diagnosis_code"", min_value=0, max_value=7),expect_column_values_to_not_match_regex(column=""diagnosis_code"", regex=r""[!@#$%&*,()=?\""\<>;:./~-]"")",0.8333333333333334,0.6808510638297872,0.7708333333333333,62.4571646510103
"For field 'location': Ensure that values in 'location' match the regex pattern `^[A-Za-z0-9\\s,.-]+$`.","expect_column_values_to_match_regex(column=""location"", regex=r""^[A-Za-z0-9\s,.-]+$"")","expect_column_values_to_match_regex(column=""location"", regex=r""^[\w\W]{1,256}$"")",0.689655172413793,0.6666666666666666,0.689655172413793,68.62016166539688
"Ensure the 'weather_condition' column contains only distinct values from the set ['Sunny', 'Rainy', 'Cloudy', 'Snowy'].","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",0.875,0.7333333333333333,0.875,84.99508493439812
"Verify that the `class_participation` column contains values from the set `[0, 1, 2, 3]`, where each number corresponds to a participation level.","expect_column_values_to_be_in_set(column=""class_participation"", value_set=[0, 1, 2, 3])","expect_column_values_to_be_in_set(column=""class_participation"", value_set=[0, 1, 2, 3])",1.0,1.0,1.0,100.00000000000004
Ensure the `evidence_file` exists and matches the expected hash value `abc123xyz`.,"expect_file_to_exist(file_path=""evidence_file""),expect_file_hash_to_equal(file_path=""evidence_file"", hash_value=""abc123xyz"")","expect_file_to_exist(file_path=""evidence_file""),expect_file_hash_to_equal(file_path=""evidence_file"", hash_value= ""abc123xyz"")",1.0,1.0,1.0,100.00000000000004
For field `property_id`: Ensure this field is required (not null). Verify that it contains unique values across the dataset.,"expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id"")","expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_date` column adheres to the format `%Y-%m-%d` and can be parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,76.86458850312829
For the `loyalty_points` field: Validate that this field contains only non-negative integer values and exists in the dataset.,"expect_column_to_exist(column=""loyalty_points""),expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0)","expect_column_to_exist(column=""loyalty_points""),expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=None)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.27998962321676
Check that the `check_in_date` is earlier than the `check_out_date` across all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")",1.0,1.0,1.0,100.00000000000004
"For the `alert_type` column: Ensure it matches one of the predefined values from the list `['Malware', 'Phishing', 'DDoS']`.","expect_column_values_to_be_in_set(column=""alert_type"", value_set=['Malware', 'Phishing', 'DDoS'])","expect_column_values_to_be_in_set(column=""alert_type"", value_set=['Malware', 'Phishing', 'DDoS'])",1.0,1.0,1.0,100.00000000000004
For field 'visibility': Ensure values are represented in kilometers and are greater than 0. Ensure this field exists.,"expect_column_to_exist(column=""visibility""),expect_column_values_to_be_between(column=""visibility"", min_value=0, max_value=None)","expect_column_to_exist(column=""visibility""),expect_column_values_to_be_greater_than(column=""visibility"", value=0),expect_column_values_to_be_of_type(column=""visibility"", type_=""float""),expect_column_values_to_be_between(column=""visibility"", min_value=0.01, max_value=float(""infinity""))",0.59375,0.5483870967741935,0.59375,39.306214305801554
For columns 'listing_price' and 'market_value': Ensure that 'listing_price' is less than or equal to 'market_value'.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""listing_price"", column_B=""market_value"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""listing_price"", column_B=""market_value"")",0.9444444444444444,0.8823529411764706,0.9444444444444444,93.36510695862633
Ensure the `blood_pressure` values are recorded within the range of 80 to 180 for systolic and 40 to 120 for diastolic.,"expect_column_values_to_be_between(column=""blood_pressure_systolic"", min_value=80, max_value=180),expect_column_values_to_be_between(column=""blood_pressure_diastolic"", min_value=40, max_value=120)","expect_column_values_to_be_between(column=""systolic"", min_value=80, max_value=180),expect_column_values_to_be_between(column=""diastolic"", min_value=40, max_value=120)",0.9333333333333333,0.8620689655172414,0.9333333333333333,83.15417122351604
Ensure the `voter_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id"")","expect_column_to_exist(column=""voter_id""),expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id"")ЎыџNЎыџN",0.8085106382978724,0.8,0.8085106382978724,69.73489091113805
Verify that the `contract_expiry_date` is formatted as '%Y-%m-%d' and is always later than the `contract_start_date`.,"expect_column_values_to_match_strftime_format(column=""contract_expiry_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""contract_expiry_date"", column_B=""contract_start_date"")","expect_column_values_to_match_strftime_format(column=""contract_expiry_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""contract_expiry_date"", column_B=""contract_start_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the distribution of `view_count` passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'case_type': Ensure the field matches the type 'text'. Ensure the values in 'case_type' conform to the pattern '^[A-Z]{3}-[0-9]{3}$'. Ensure this field exists.,"expect_column_to_exist(column=""case_type""),expect_column_values_to_be_of_type(column=""case_type"", type_=""text""),expect_column_values_to_match_regex(column=""case_type"", regex=r""^[A-Z]{3}-[0-9]{3}$"")","expect_column_to_exist(column=""case_type""),expect_column_values_to_be_of_type(column=""case_type"", type_=""text""),expect_column_values_to_match_regex(column=""case_type"", regex=r""^[A-Z]{3}-[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
"For the `data_log` field: Ensure that the file exists, is less than 5 MB, and contains less than 1000 lines.","expect_file_to_exist(file_path=""data_log""),expect_file_size_to_be_between(file_path=""data_log"", min_value=0, max_value=5 * 1024 * 1024),expect_file_line_regex_match_count_to_be_less_than(file_path=""data_log"", regex=""^.*$"", max_value=1000)","expect_file_to_exist(file=""data_log""),expect_file_size_to_be_between(file=""data_log"", min_value=0, max_value=5 * 1024 * 1024), # 5 MB,expect_file_line_regex_match_count_to_be_between(file=""data_log"", max_value=1000) # 1000 lines",0.8735632183908046,0.7294117647058824,0.8735632183908046,75.29138165722324
Check that the `city_id` column has unique values across the dataset to prevent duplicate entries for cities.,"expect_column_values_to_be_unique(column=""city_id"")","expect_column_values_to_be_unique(column=""city_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the combination of `patient_id` and `visit_date` is unique across records.,"expect_compound_columns_to_be_unique(column_list=[""patient_id"", ""visit_date""])","expect_compound_columns_to_be_unique(column_A=""patient_id"", column_B=""visit_date"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
Confirm the `transaction_date` column values match the format `MM/DD/YYYY` and are properly parsed.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
"In the 'square_feet' column, validate that values are within the range of 500 to 15,000 square feet.","expect_column_values_to_be_between(column=""square_feet"", min_value=500, max_value=15000)","expect_column_values_to_be_between(column=""square_feet"", min_value=500, max_value=15000)",1.0,1.0,1.0,100.00000000000004
For field 'publish_date': Ensure all entries conform to the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""publish_date"")","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""publish_date"")",1.0,1.0,1.0,100.00000000000004
"Check that the `json_log` column contains properly formatted JSON objects and the total line count does not exceed 10,000.","expect_column_values_to_be_json_parseable(column=""json_log""),expect_file_line_count_to_be_between(min_value=0, max_value=10000)","expect_column_to_exist(column=""json_log""),expect_column_values_to_be_json_parseable(column=""json_log""),expect_column_values_to_match_json_schema(column=""json_log"")  # Replace with actual JSON schema here.",0.4642857142857143,0.3703703703703703,0.42857142857142855,39.238735662484075
For field 'post_id': Ensure the field is required (not null) and contains unique values. Verify that the field matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""post_id""),expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""post_id""),expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
For the `service_request_date` column: Validate that all values are of type 'date' and fall within the last two years.,"expect_column_values_to_be_of_type(column=""service_request_date"", type_=""date""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""2021-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_of_type(column=""service_request_date"", type_=""date""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""2018-01-01"", max_value=""2021-11-30"")",0.9090909090909091,0.84375,0.8484848484848486,89.71307800903574
For fields 'order_date' and 'shipping_date': Ensure (order_date) is before (shipping_date) in all records. Ensure both fields match the type 'datetime'.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""order_date"", column_B=""shipping_date""),expect_column_values_to_be_of_type(column=""order_date"", type_=""datetime""),expect_column_values_to_be_of_type(column=""shipping_date"", type_=""datetime"")","expect_column_pair_values_to_be_increasing(column_a=""order_date"", column_b=""shipping_date""),expect_column_values_to_be_of_type(column=""order_date"", type_=""datetime""),expect_column_values_to_be_of_type(column=""shipping_date"", type_=""datetime"")",0.9382716049382716,0.8860759493670887,0.9382716049382716,85.28749833156866
Verify that the `user_score` column contains numeric values ranging between 0 and 10.,"expect_column_values_to_be_between(column=""user_score"", min_value=0, max_value=10)","expect_column_values_to_be_between(column=""user_score"", min_value=0, max_value=10)",1.0,1.0,1.0,100.00000000000004
"Validate that the `transaction_type` field contains values that match one of the following patterns: `['transfer', 'stake', 'vote']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['transfer', 'stake', 'vote'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['transfer','stake', 'vote'])",1.0,1.0,1.0,100.00000000000004
"For field 'address': Ensure the field matches the type 'text'. Ensure that the address data conforms to a valid structure (street, city, zip).","expect_column_values_to_be_of_type(column=""address"", type_=""text""),expect_column_values_to_match_regex(column=""address"", regex=r""^\d+\s[A-z]+\s[A-z]+,\s[A-z]+\s\d{5}(-\d{4})?$"")","expect_column_values_to_be_of_type(column=""address"", type_=""text""),expect_column_values_to_match_regex(column=""address"", regex=r""^street, city, zip$"")",0.7000000000000001,0.689655172413793,0.7000000000000001,50.89183656525373
"Ensure the `customer_status` column only includes values from the set `['Active', 'Inactive', 'Prospect']`.","expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive', 'Prospect'])","expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive', 'Prospect'])",1.0,1.0,1.0,100.00000000000004
"For field 'status_code': Ensure the field matches the type 'text'. Validate that all entries in (status_code) are one of the predefined values: ['online', 'offline', 'error']. Ensure this field cannot be null.","expect_column_values_to_be_of_type(column=""status_code"", type_=""text""),expect_column_values_to_be_in_set(column=""status_code"", value_set=['online', 'offline', 'error']),expect_column_values_to_not_be_null(column=""status_code"")","expect_column_values_to_be_of_type(column=""status_code"", type_=""text""),expect_column_values_to_be_in_set(column=""status_code"", value_set=[""online"", ""offline"", ""error""]),expect_column_values_to_not_be_null(column=""status_code"")",1.0,1.0,1.0,86.83217861603632
For field 'image_urls': Ensure the field exists and matches the type 'text'. Validate that all entries in (image_urls) follow a valid URL format and do not exceed 255 characters.,"expect_column_to_exist(column=""image_urls""),expect_column_values_to_be_of_type(column=""image_urls"", type_=""text""),expect_column_values_to_match_regex(column=""image_urls"", regex=r""^(http|https)://[^\s/$.?#].[^\s]*$""),expect_column_value_lengths_to_be_between(column=""image_urls"", min_value=0, max_value=255)","expect_column_to_exist(column=""image_urls""),expect_column_values_to_be_of_type(column=""image_urls"", type_=""text""),expect_column_value_lengths_to_be_between(column=""image_urls"", min_value=0, max_value=255),expect_column_values_to_match_regex(column=""image_urls"", regex=r""^(https?:\/\/)?[a-zA-Z0-9\-]+\.[a-zA-Z0-9]{2,}$"")",0.8867924528301886,0.8653846153846154,0.6603773584905661,80.34355134981746
Ensure the `forecast_date` column contains valid datetime strings matching the format `%Y-%m-%d`.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Validate that the `player_id` column contains only unique values with no duplicates across the dataset.,"expect_column_values_to_be_unique(column=""player_id"")","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_not_be_duplicate(column=""player_id"")İTESİ",0.6,0.5714285714285715,0.6,43.46480003865788
For field 'student_id': Ensure the expect column values to be unique; Ensure this field is a primary key with unique values and is required (not null).,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_to_exist(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int"")",0.7575757575757575,0.6875,0.7575757575757575,59.64344157190796
For field 'delivery_time': Verify that values in 'delivery_time' are within the range of 0 to 72 hours. Ensure this field is of type 'integer'.,"expect_column_values_to_be_between(column=""delivery_time"", min_value=0, max_value=72),expect_column_values_to_be_of_type(column=""delivery_time"", type_=""integer"")","expect_column_values_to_be_between(column=""delivery_time"", min_value=0, max_value=72),expect_column_values_to_be_of_type(column=""delivery_time"", type_=""int"")",0.9629629629629629,0.9615384615384616,0.9629629629629629,96.2454008657948
Verify the `account_number` field contains only unique values and adheres to the pattern of 10 digits.,"expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^\d{10}$"")","expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^[0-9]{10}$"")",0.9333333333333332,0.8837209302325582,0.9333333333333332,88.21415355185661
For field 'review_rating': Ensure the field matches the type 'integer'. Ensure values in (review_rating) are within the range of 1 to 5. Ensure this field exists.,"expect_column_to_exist(column=""review_rating""),expect_column_values_to_be_of_type(column=""review_rating"", type_=""integer""),expect_column_values_to_be_between(column=""review_rating"", min_value=1, max_value=5)","expect_column_to_exist(column=""review_rating""),expect_column_values_to_be_of_type(column=""review_rating"", type_=""int""),expect_column_values_to_be_between(column=""review_rating"", min_value=1, max_value=5)",0.9705882352941176,0.9393939393939394,0.9705882352941176,96.74122890261673
Validate that the `publish_date` column entries are formatted as '%Y-%m-%d %H:%M:%S' and do not have future dates.,"expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""publish_date"")","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_in_set(column=""publish_date"", value_set=datediff_to_current_date(datediff=0))  # Assuming you want to exclude future dates, datediff_to_current_date(datediff=0) would set the value to the current date.  # You may also want to exclude values that are less than 1 day old, but the above condition should cover the most common cases.",0.48148148148148145,0.4528301886792453,0.48148148148148145,42.74067067662181
Check that the `subscription_start_date` field adheres to the format '%Y-%m-%d %H:%M:%S' and does not contain any null values.,"expect_column_to_exist(column=""subscription_start_date""),expect_column_values_to_match_strftime_format(column=""subscription_start_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""subscription_start_date"")","expect_column_values_to_match_strftime_format(column=""subscription_start_date"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_not_be_null(column=""subscription_start_date"")",0.8823529411764706,0.8787878787878788,0.8823529411764706,69.20325264740627
Check that the `data_timestamp` column values are in ascending order.,"expect_column_values_to_be_increasing(column=""data_timestamp"")","expect_column_values_to_be_increasing(column=""data_timestamp"")",1.0,1.0,1.0,100.00000000000004
In the `courses` table: Ensure that `course_id` is unique. Confirm that `start_date` is less than `end_date`.,"expect_column_values_to_be_unique(column=""course_id""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""start_date"", column_B=""end_date"")","expect_column_values_to_be_unique(column=""course_id""),expect_column_pair_values_to_be_decreasing(column_A=""start_date"", column_B=""end_date"")",0.9019607843137256,0.8163265306122449,0.9019607843137256,84.0816563319674
For field 'branch_code': Ensure the field matches the type 'text'. Ensure values in (branch_code) are unique and conform to the predefined branch code format.,"expect_column_values_to_be_of_type(column=""branch_code"", type_=""text""),expect_column_values_to_be_unique(column=""branch_code""),expect_column_values_to_match_regex(column=""branch_code"", regex=r""^[A-Z0-9]{3}$"")","expect_column_values_to_be_of_type(column=""branch_code"", type_=""text""),expect_column_values_to_be_unique(column=""branch_code""),expect_column_values_to_match_regex(column=""branch_code"", regex=r""^[A-Z0-9]{5}$"")",0.9722222222222222,0.9714285714285714,0.9722222222222222,97.04907832745397
"Check that the `status` column contains only the values `['Open', 'Closed', 'Pending']` and ensure this field cannot be null.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,100.00000000000004
For fields `total_cost` and `deposit`: Ensure the sum of `deposit` is less than or equal to `total_cost`.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""deposit"", column_B=""total_cost"")","expect_column_pair_values_to_be_less_than(column_A=""total_cost"", column_B=""deposit"", value=""total_cost"")",0.8571428571428571,0.5454545454545455,0.7999999999999999,72.6183752361082
For fields `quiz_score` and `assignment_score`: Ensure the sum of `quiz_score` and `assignment_score` equals `final_grade`. Ensure all fields are of type 'integer' and not null.,"expect_multicolumn_sum_to_equal(column_list=[""quiz_score"", ""assignment_score""], target_column=""final_grade""),expect_column_values_to_be_of_type(column=""quiz_score"", type_=""int""),expect_column_values_to_not_be_null(column=""quiz_score""),expect_column_values_to_be_of_type(column=""assignment_score"", type_=""int""),expect_column_values_to_not_be_null(column=""assignment_score""),expect_column_values_to_be_of_type(column=""final_grade"", type_=""int""),expect_column_values_to_not_be_null(column=""final_grade"")","expect_multicolumn_sum_to_be_equal(column_A=""quiz_score"", column_B=""assignment_score"", sum_column=""final_grade""),expect_column_values_to_not_be_null(column=""quiz_score"", column=""assignment_score"", sum_column=""final_grade""),expect_column_values_to_be_of_type(column=""quiz_score"", type_=""int""),expect_column_values_to_be_of_type(column=""assignment_score"", type_=""int""),expect_column_values_to_be_of_type(column=""final_grade"", type_=""int"")",0.8815789473684211,0.7599999999999999,0.7105263157894737,77.19648000835437
For the `email` column: Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all values are unique and follow a standard email format.,"expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9879518072289156,0.9629629629629629,0.7951807228915663,95.08511796172156
Validate that the `plaintiff_id` and `defendant_id` fields are of type integer and not null.,"expect_column_values_to_be_of_type(column=""plaintiff_id"", type_=""int""),expect_column_values_to_not_be_null(column=""plaintiff_id""),expect_column_values_to_be_of_type(column=""defendant_id"", type_=""int""),expect_column_values_to_not_be_null(column=""defendant_id"")","expect_column_values_to_be_of_type(column=""plaintiff_id"", type_=""int""),expect_column_values_to_be_of_type(column=""defendant_id"", type_=""int""),expect_column_values_to_not_be_null(column=""plaintiff_id""),expect_column_values_to_not_be_null(column=""defendant_id"")",1.0,1.0,0.8181818181818182,100.00000000000004
For the `date_of_birth` column: Ensure all values match the format 'YYYY-MM-DD'. Validate that no dates are in the future.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today"")",0.8607594936708861,0.8571428571428571,0.8607594936708861,75.84214245407665
"Ensure the Kullback-Leibler (KL) divergence between the `temperature` and `humidity` distributions is below 0.1, indicating similar data behavior.","expect_column_kl_divergence_to_be_less_than(column_a=""temperature"", column_b=""humidity"", threshold=0.1)","expect_column_kl_divergence_to_be_between(column=""temperature"", threshold=0.1),expect_column_kl_divergence_to_be_between(column=""humidity"", threshold=0.1)",0.6341463414634146,0.41025641025641024,0.6341463414634146,48.091572098069726
Confirm that the `inventory_count` column has a mean value greater than or equal to 5 and a maximum not exceeding 1000.,"expect_column_mean_to_be_between(column=""inventory_count"", min_value=5),expect_column_max_to_be_between(column=""inventory_count"", max_value=1000)","expect_column_mean_to_be_between(column=""inventory_count"", min_value=5, max_value=1000),expect_column_max_to_be_between(column=""inventory_count"", max_value=1000)",0.9411764705882353,0.8979591836734695,0.9411764705882353,86.88589397154924
"For field 'customer_id': Ensure the field matches the type 'string'. Ensure values in (customer_id) do not match any SQL-like pattern from the list ('%;', '--', '/*'). Ensure this field exists.","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""string""),expect_column_values_to_not_match_regex_list(column=""customer_id"", regex_list=[r""%;"", r""--"", r""/\*""])","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""string""),expect_column_values_to_not_match_regex(column=""customer_id"", regex=r""%""),expect_column_values_to_not_match_regex(column=""customer_id"", regex=r""--""),expect_column_values_to_not_match_regex(column=""customer_id"", regex=r""/\*"""")",0.7333333333333334,0.6363636363636364,0.7333333333333334,56.23448559276053
For field 'guest_count': Ensure this field matches the type 'integer'. Ensure values are greater than or equal to 1.,"expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=None)","expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=None)",1.0,1.0,1.0,100.00000000000004
"For the `location` field, ensure the string length is between 5 and 100 characters and does not contain any special characters.","expect_column_value_lengths_to_be_between(column=""location"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""location"", regex=r""[!@#$%^&*(),.?\"":{}|<>]"")","expect_column_value_lengths_to_be_between(column=""location"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""location"", regex=r""[^a-zA-Z0-9]"" )",0.9285714285714286,0.9259259259259259,0.9285714285714286,70.56335288500505
"For field 'grade': Ensure the field matches the type 'decimal'. Validate that grades are within the range [0, 100].","expect_column_values_to_be_of_type(column=""grade"", type_=""decimal""),expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""grade"", type_=""decimal""),expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Validate that the `post_timestamp` column contains valid datetime entries in the format 'YYYY-MM-DD HH:MM:SS' and check if all timestamps are in the future.,"expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""post_timestamp"")","expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""post_timestamp"")",1.0,1.0,1.0,100.00000000000004
"For the `square_feet` column: Confirm that all values are positive integers and do not exceed 10,000.","expect_column_values_to_be_between(column=""square_feet"", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=""square_feet"", type_=""int"")","expect_column_values_to_be_between(column=""square_feet"", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=""square_feet"", type_=""int""),expect_column_values_to_be_greater_than(column=""square_feet"", value=0)",0.8181818181818181,0.8125000000000001,0.8181818181818181,69.13669280533436
For the `game_date` field: Validate that all dates are in 'YYYY-MM-DD' format and can be parsed successfully. Confirm that there are no missing values.,"expect_column_to_exist(column=""game_date""),expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date""),expect_column_values_to_not_be_null(column=""game_date"")","expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date""),expect_column_values_to_not_be_null(column=""game_date"")",0.9090909090909091,0.9066666666666667,0.9090909090909091,81.06843242768656
For field 'property_id': Ensure this field exists. Validate that all values in (property_id) are unique and match the pattern 'PROP-[0-9]{4}'.,"expect_column_to_exist(column=""property_id""),expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP-[0-9]{4}$"")","expect_column_to_exist(column=""property_id""),expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""PROP-[0-9]{4}"")",1.0,1.0,1.0,93.47615705550344
Check that the `filing_date` column exists and all entries are valid dates within the last five years.,"expect_column_to_exist(column=""filing_date""),expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_between(column=""filing_date"", min_value=""2018-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""filing_date""),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")  # To ensure values can be parsed as dates, regardless of format.  # Cutting Knowledge Date: December 2023
Today Date: 26 July 2024

system

Cutting Knowledge Date: December 2023
Today Date: 26 July 2024

system

Cutting Knowledge Date: December 2023
Today Date: 26 July 2024

system

expect_column_to_exist(column=""filing_date""),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")  # To ensure values can be parsed as dates, regardless of format.  # Assuming column values are ISO-8601 compliant, this should also cover other date formats as well.  # Cuttings Knowledge Date: December 2023
Today Date: 26 July 2024

system

Cutting Knowledge Date: December 2023
Today Date: 26 July 2024

system

Cutting Knowledge Date: December 2023
Today Date: 26 July 2024

system",0.3218390804597701,0.26744186046511625,0.3218390804597701,28.382886916162242
For field 'email_subject': Ensure the lengths of string values in (email_subject) do not exceed 255 characters. Ensure this field exists.,"expect_column_to_exist(column=""email_subject""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=0, max_value=255)","expect_column_to_exist(column=""email_subject""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=1, max_value=255)",0.9565217391304348,0.9090909090909091,0.9565217391304348,94.86610352970624
For field 'loyalty_score': Ensure the field matches the type 'integer'. Validate that the minimum loyalty score must be at least 0 and the maximum score must not exceed 100.,"expect_column_values_to_be_of_type(column=""loyalty_score"", type_=""int""),expect_column_min_to_be_between(column=""loyalty_score"", min_value=0),expect_column_max_to_be_between(column=""loyalty_score"", max_value=100)","expect_column_values_to_be_of_type(column=""loyalty_score"", type_=""int""),expect_column_min_to_be_between(column=""loyalty_score"", min_value=0),expect_column_max_to_be_between(column=""loyalty_score"", max_value=100)",1.0,1.0,1.0,100.00000000000004
In the `price` column: Ensure there are no missing values. Validate that the values are of type 'float' and greater than or equal to zero.,"expect_column_values_to_not_be_null(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None)","expect_column_values_to_not_be_null(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
For field 'diagnosis_code': Ensure the field contains only distinct values matching the set of ICD-10 codes. Ensure this field exists.,"expect_column_to_exist(column=""diagnosis_code""),expect_column_distinct_values_to_equal_set(column=""diagnosis_code"", value_set=icd10_codes_set)","expect_column_to_exist(column=""diagnosis_code""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=distinct_ICD_codes)",0.8636363636363636,0.6666666666666666,0.8181818181818182,79.78765656912292
Validate that the `last_played` column contains datetime values that can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""last_played"")","expect_column_values_to_be_dateutil_parseable(column=""last_played"")",1.0,1.0,1.0,100.00000000000004
Check that the `medication_dosage` values are within the recommended ranges as per medical guidelines.,"expect_column_values_to_be_between(column=""medication_dosage"", min_value=<min_recommended_value>, max_value=<max_recommended_value>)","expect_column_values_to_be_between(column=""medication_dosage"", min_value=min_value, max_value=max_value)",0.9444444444444444,0.823529411764706,0.9444444444444444,65.72525419702504
"Ensure that the `supplier_id` references a valid entry in the `suppliers` table, and all values are not null.","expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_supplier_ids)","expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_values)",0.9411764705882353,0.9387755102040817,0.9411764705882353,93.25730884305308
Ensure the `claim_date` column contains valid datetime entries that can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""claim_date"")","expect_column_to_exist(column=""claim_date""),expect_column_values_to_be_dateutil_parseable(column=""claim_date"")",0.7407407407407407,0.72,0.7407407407407407,54.60951078044391
Ensure the `precipitation` column values are non-negative and sorted in increasing order.,"expect_column_values_to_be_between(column=""precipitation"", min_value=0),expect_column_values_to_be_increasing(column=""precipitation"")","expect_column_values_to_be_between(column=""precipitation"", min_value=0),expect_column_values_to_be_increasing(column=""precipitation"")",1.0,1.0,1.0,100.00000000000004
For the `last_restocked` column: Ensure all entries are in the valid datetime format '%d-%m-%Y'.,"expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format=""%d-%m-%Y"")","expect_column_values_to_match_strftime_format(column=""last_restocked"", strftime_format=""%d-%m-%Y"")",1.0,1.0,1.0,100.00000000000004
"For the `delivery_status` column: Validate that all values match the predefined set of statuses: ['Pending', 'Shipped', 'Delivered', 'Canceled'].","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Canceled'])","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=[""Pending"", ""Shipped"", ""Delivered"", ""Canceled""])",1.0,1.0,1.0,63.15789958317594
Ensure the `client_email` column matches the regex pattern for valid email addresses and contains no null values.,"expect_column_values_to_match_regex(column=""client_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_not_be_null(column=""client_email"")","expect_column_values_to_not_be_null(column=""client_email""),expect_column_values_to_match_regex(column=""client_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")ávací",0.7457627118644068,0.6666666666666667,0.4745762711864407,76.46270069926918
Verify that the `customer_id` and `transaction_id` combination is unique across records.,"expect_compound_columns_to_be_unique(column_A=""customer_id"", column_B=""transaction_id"")","expect_column_pair_values_to_be_unique(column_A=""customer_id"", column_B=""transaction_id"")",0.896551724137931,0.7407407407407408,0.896551724137931,81.28921601118654
"Ensure the `property_type` column contains only distinct values matching `['Residential', 'Commercial', 'Industrial']`.","expect_column_distinct_values_to_equal_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_distinct_values_to_equal_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])",1.0,1.0,1.0,100.00000000000004
For the `signup_date`: Ensure the datetime format adheres to '%Y-%m-%d'.,"expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""signup_date"")",0.7499999999999999,0.7368421052631579,0.7499999999999999,59.2706006567304
For `final_score`: Ensure the values are non-negative integers not exceeding 100 and that they follow a descending order across student records.,"expect_column_values_to_be_between(column=""final_score"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""final_score"")","expect_column_values_to_be_between(column=""final_score"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""final_score"")",1.0,1.0,1.0,100.00000000000004
Ensure that the total weight in the `total_weight` column is equal to the sum of the `individual_weights` from the related records.,"expect_column_pair_values_to_be_equal(column_A=""total_weight"", column_B=""individual_weights"")","expect_multicolumn_sum_to_equal(column_list=[""individual_weights""], target_sum=""total_weight"")",0.5714285714285715,0.23076923076923075,0.42857142857142855,41.454222824741926
"Ensure the `status` column contains only distinct values matching `['Open', 'Closed', 'Pending']`.","expect_column_distinct_values_to_equal_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""])","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])илакти",0.8571428571428571,0.6923076923076923,0.8571428571428571,52.32401880490302
Ensure the `developer_id` in the `games` table exists in the `developers` table to maintain data integrity.,"expect_column_pair_values_to_be_in_set(column_A=""games.developer_id"", column_B=""developers.developer_id"")","expect_column_values_to_be_unique(column=""games_developer_id""),expect_select_column_values_to_equal_other_table(table_name=""developers"", column=""developer_id"")",0.619047619047619,0.3,0.619047619047619,32.825979298121936
"Confirm that the `response_time` column has a standard deviation not exceeding 5 seconds, indicating stable response times.","expect_column_stdev_to_be_between(column=""response_time"", min_value=0, max_value=5)","expect_column_stdev_to_be_between(column=""response_time"", max_value=5)",0.888888888888889,0.8,0.888888888888889,76.78567559464844
"For field 'contact_number': Ensure this field exists. Validate that all values match the pattern '^\+?[0-9]{10,15}$'.","expect_column_to_exist(column=""contact_number""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+?[0-9]{10,15}$"")","expect_column_to_exist(column=""contact_number""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\\+?[0-9]{10,15}$"")",1.0,1.0,1.0,96.80423506117728
"In the `coverage_type` column: Ensure values match the set `['Comprehensive', 'Third Party', 'Collision']` with no duplicates.","expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Comprehensive', 'Third Party', 'Collision']),expect_column_values_to_be_unique(column=""coverage_type"")","expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Comprehensive', 'Third Party', 'Collision']),expect_column_values_to_be_unique(column=""coverage_type"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `user_email` entries match the regular expression pattern for a valid email format and do not contain disposable email domains.,"expect_column_values_to_match_regex(column=""user_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_not_match_regex_list(column=""user_email"", regex_list=[r""@(mailinator\.com|tempmail\.com|10minutemail\.com|disposable\.com)$""])","expect_column_values_to_match_regex(column=""user_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_match_regex(column=""user_email"", regex=r""^[0-9a-f]{16}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\z$"")  # Disposable email domains: https://www.digitalocean.com/company/blog/what-are-disposable-email-addresses.",0.4770642201834862,0.35514018691588783,0.45871559633027525,40.37191545627396
For the `product_launch_date`: Ensure all entries follow the format `%d-%m-%Y` and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""product_launch_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""product_launch_date"")","expect_column_to_exist(column=""product_launch_date""),expect_column_values_to_match_strftime_format(column=""product_launch_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""product_launch_date"")",0.870967741935484,0.8666666666666666,0.870967741935484,76.09515774602313
Ensure that the combination of `customer_id` and `service_start_date` is unique across records.,"expect_compound_columns_to_be_unique(column_A=""customer_id"", column_B=""service_start_date"")","expect_compound_columns_to_be_unique(column_list=[""customer_id"", ""service_start_date""])",0.8571428571428571,0.6923076923076924,0.8571428571428571,69.80300568586001
Check that the `performance_rating` column contains values in the range of 1 to 5 and that the average rating is computed accurately.,"expect_column_values_to_be_between(column=""performance_rating"", min_value=1, max_value=5),expect_column_mean_to_be_between(column=""performance_rating"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""performance_rating"", min_value=1, max_value=5),expect_column_mean_to_be_between(column=""performance_rating"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
Ensure the `player_id` column contains unique identifiers for each player in the dataset.,"expect_column_values_to_be_unique(column=""player_id"")","expect_column_values_to_be_unique(column=""player_id"")",1.0,1.0,1.0,100.00000000000004
Check that the `signup_date` field contains valid datetime entries formatted as `YYYY-MM-DDTHH:MM:SS`.,"expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%dT%H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%dT%H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
Ensure the `first_contact_date` column does not have null values and all dates are in the past.,"expect_column_values_to_not_be_null(column=""first_contact_date""),expect_column_values_to_be_dateutil_parseable(column=""first_contact_date""),expect_column_values_to_be_in_set(column=""first_contact_date"", set_=[date for date in all_dates if date < datetime.now()])","expect_column_values_to_not_be_null(column=""first_contact_date""),expect_column_values_to_be_in_set(column=""first_contact_date"", value_set=[date for date in past_dates])",0.7837837837837838,0.6944444444444445,0.7567567567567568,52.65836148776901
Verify that the `timestamp` column contains valid dates in ISO 8601 format and retains no duplicates.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_unique(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_unique(column=""timestamp"")",0.9411764705882353,0.8979591836734694,0.9411764705882353,91.00182556705992
"For the `billing_amount` field: Verify that the sum of values does not exceed $10,000 for the current billing cycle and the standard deviation is less than $150.","expect_column_sum_to_be_between(column=""billing_amount"", min_value=None, max_value=10000),expect_column_stdev_to_be_between(column=""billing_amount"", max_value=150)","expect_column_sum_to_be_between(column=""billing_amount"", min_value=0, max_value=10000)  # Check sum is within $10000  # TODO: Add check for standard deviation within $150  # expect_column_stdev_to_be_between(column=""billing_amount"", min_value=0, max_value=150)  # TODO: Complete the other expected checks as required, based on the application requirements, for the sum and standard deviation of `billing_amount` and the overall expectation from a customer's perspective, which includes both sum and standard deviation.",0.48148148148148145,0.41509433962264153,0.48148148148148145,40.63440555969003
For field 'final_grade': Ensure the average final grade is within the range of 0 to 100.,"expect_column_mean_to_be_between(column=""final_grade"", min_value=0, max_value=100)","expect_column_mean_to_be_between(column=""final_grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the 'age' column contains integer values within the range of 18 to 120. Ensure there are no missing values.,"expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120),expect_column_values_to_not_be_null(column=""age"")","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120),expect_column_values_to_not_be_null(column=""age"")",0.8070175438596492,0.8,0.8070175438596492,63.86131713694214
For field 'registration_date': Ensure the expect column values to be in set; Ensure this field matches the type 'date' and contains values less than or equal to the current date.,"expect_column_values_to_be_in_set(column=""registration_date"", value_set=[/* insert valid date values here */]),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_between(column=""registration_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_be_in_set(column=""registration_date"", set=your_set),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than(column=""registration_date"", value=None)  # If registration date is None, consider it to be equal to the current date.",0.7142857142857144,0.6041666666666666,0.6938775510204082,65.95899539706328
"For the `age` column, ensure values are integers greater than or equal to 0 and less than or equal to 120.","expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)",0.717948717948718,0.7027027027027027,0.717948717948718,50.41350242010639
"Ensure that the `court_type` column contains only text values and is restricted to the set `['Civil', 'Criminal', 'Family']`.","expect_column_values_to_be_of_type(column=""court_type"", type_=""text""),expect_column_values_to_be_in_set(column=""court_type"", value_set=['Civil', 'Criminal', 'Family'])","expect_column_values_to_be_of_type(column=""court_type"", type_=""text""),expect_column_values_to_be_in_set(column=""court_type"", value_set=['Civil', 'Criminal', 'Family'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `platform` field contains only values from the specified set ['PC', 'Console', 'Mobile']. Ensure this field exists.","expect_column_to_exist(column=""platform""),expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])","expect_column_to_exist(column=""platform""),expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Console"", ""Mobile""])",1.0,1.0,1.0,77.03172950871594
"For field 'funding_source': Ensure that values in (funding_source) do not match the pattern '^(?!Private).+$', confirming that they are sourced from public or government funding.","expect_column_values_to_match_regex(column=""funding_source"", regex=r""^(Private).*"")","expect_column_values_to_not_match_regex(column=""funding_source"", regex=r""^(?!Private).+$"")",0.9600000000000001,0.8695652173913043,0.9600000000000001,72.48109885114135
Ensure the `timestamp` column contains values within the last 24 hours.,"expect_column_values_to_be_between(column=""timestamp"", min_value=""2023-10-09T00:00:00"", max_value=""2023-10-09T23:59:59"")","expect_column_values_to_be_between(column=""timestamp"", min_value=""2023-11-17T00:00:00+00:00"", max_value=""2023-11-18T23:59:59+00:00"")",0.7500000000000001,0.6521739130434783,0.7500000000000001,68.06834235044333
Validate that the `product_price` column values are greater than 0 and less than or equal to 5000.,"expect_column_values_to_be_between(column=""product_price"", min_value=0, max_value=5000)","expect_column_values_to_be_between(column=""product_price"", min_value=0, max_value=5000)",1.0,1.0,1.0,100.00000000000004
Ensure the `player_rating` column has a mean value between `0` and `10` and each rating is a float within that range.,"expect_column_mean_to_be_between(column=""player_rating"", min_value=0, max_value=10),expect_column_values_to_be_between(column=""player_rating"", min_value=0.0, max_value=10.0)","expect_column_mean_to_be_between(column=""player_rating"", min_value=0, max_value=10),expect_column_values_to_be_of_type(column=""player_rating"", type_=""float"")",0.7796610169491525,0.7368421052631579,0.7796610169491525,78.54053031310262
For the `patient_id` field: Ensure the field is required (not null). Ensure each value is unique and matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""integer""),expect_column_values_to_be_unique(column=""patient_id"")",0.967741935483871,0.9333333333333333,0.8387096774193549,96.46458712936789
For field 'restock_date': Ensure the field matches the datetime format 'YYYY-MM-DD'. Ensure no past dates are included.,"expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_greater_than(column=""restock_date"", value=""2023-10-18"")  # Assuming today's date is October 18, 2023. Adjust accordingly.","expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""restock_date""),expect_column_values_to_be_between(column=""restock_date"", min_value=""1900-01-01"", max_value=""today"")",0.6419753086419754,0.5316455696202531,0.617283950617284,56.60426329607583
For field 'account_number': Ensure the field matches the type 'text'. Ensure the field has a fixed length of 10. Ensure this field exists.,"expect_column_to_exist(column=""account_number""),expect_column_values_to_be_of_type(column=""account_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""account_number"", length=10)","expect_column_to_exist(column=""account_number""),expect_column_values_to_be_of_type(column=""account_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""account_number"", length=10)",1.0,1.0,1.0,100.00000000000004
"For field 'status': Ensure the field matches the type 'text'. Validate that all entries in (status) are one of the predefined values: ['active', 'inactive', 'pending']. Ensure this field cannot be null.","expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive"", ""pending""]),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_not_be_null(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'pending'])",1.0,0.9696969696969697,0.735294117647059,85.18523069610283
Check that the `vote_count` column values are non-negative integers.,"expect_column_values_to_be_of_type(column=""vote_count"", type_=""int""),expect_column_values_to_be_between(column=""vote_count"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""vote_count"", min_value=0, max_value=None)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
Ensure that the `account_opened_date` column is earlier than the `last_transaction_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""account_opened_date"", column_B=""last_transaction_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""account_opened_date"", column_B=""last_transaction_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the number of rows in the `comments` table matches the row count in the `posts` table.,"expect_table_row_count_to_equal_other_table(table_name=""comments"", other_table_name=""posts"")","expect_table_row_count_to_equal_other_table(table=""comments"", other_table=""posts"")",0.9285714285714286,0.7692307692307692,0.9285714285714286,77.68062226971533
For field 'supplier_id': Ensure the field matches the type 'integer'. Ensure values in (supplier_id) are unique and not null. Ensure this field exists.,"expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_of_type(column=""supplier_id"", type_=""int""),expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_unique(column=""supplier_id"")","expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_of_type(column=""supplier_id"", type_=""integer""),expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")илакти",0.9736842105263158,0.9459459459459459,0.8947368421052632,96.0643888564407
For field 'tax_rate': Ensure the field matches the type 'decimal'. Ensure the field contains values between 0.0 and 1.0. Ensure this field exists.,"expect_column_to_exist(column=""tax_rate""),expect_column_values_to_be_of_type(column=""tax_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""tax_rate"", min_value=0.0, max_value=1.0)","expect_column_to_exist(column=""tax_rate""),expect_column_values_to_be_of_type(column=""tax_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""tax_rate"", min_value=0.0, max_value=1.0)",1.0,1.0,1.0,100.00000000000004
For the `transaction_date`: Ensure the date format is consistent with 'DD-MM-YYYY' and that all dates are within the last year.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""01-10-2023"", max_value=""31-10-2024"")",0.9411764705882353,0.7878787878787878,0.8823529411764706,87.90155189492559
Ensure the `check_in_date` and `check_out_date` are formatted as 'YYYY-MM-DD' and that all dates are valid.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""check_out_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""check_in_date""),expect_column_values_to_be_dateutil_parseable(column=""check_out_date"")","expect_column_to_exist(column=""check_in_date""),expect_column_to_exist(column=""check_out_date""),expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""check_out_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""check_in_date""),expect_column_values_to_be_dateutil_parseable(column=""check_out_date"")",0.870967741935484,0.8688524590163935,0.870967741935484,76.46928696805085
Ensure that the sum of `transaction_amount` and `fees` equals the `total_amount` for each record.,"expect_column_pair_values_to_be_equal(column_A=""transaction_amount"", column_B=""total_amount""),expect_column_pair_values_to_be_equal(column_A=""fees"", column_B=""total_amount"")","expect_multicolumn_sum_to_equal(column_A=""transaction_amount"", column_B=""fees"", sum_column=""total_amount"")",0.5777777777777777,0.32558139534883723,0.5777777777777777,34.81872962480553
Validate that the `plaintiff_count` is a non-negative integer and within the range of 1 to 5. Ensure uniqueness.,"expect_column_values_to_be_between(column=""plaintiff_count"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""plaintiff_count"", type_=""int""),expect_column_values_to_be_unique(column=""plaintiff_count"")","expect_column_values_to_be_between(column=""plaintiff_count"", min_value=1, max_value=5),expect_column_values_to_be_unique(column=""plaintiff_count"")",0.8,0.7931034482758621,0.8,56.77706449845393
For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'string'. Ensure this field exists.,"expect_column_to_exist(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Ensure the data file exists and matches the specified hash value `abc1234567890`.,"expect_file_to_exist(),expect_file_hash_to_equal(expected_hash=""abc1234567890"")","expect_file_to_exist(file=""data_file"")  # File exists",0.4761904761904762,0.3157894736842105,0.4761904761904762,28.7041791081685
For field 'meter_id': Ensure this field is required (not null) and contains unique values. Verify that it matches the type 'string'.,"expect_column_values_to_not_be_null(column=""meter_id""),expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string"")","expect_column_values_to_not_be_null(column=""meter_id""),expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Ensure the `timestamp` column follows the ISO 8601 format: `'%Y-%m-%dT%H:%M:%S'`.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"Check that the `weather_condition` column only includes values from the list `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",1.0,1.0,1.0,100.00000000000004
"Ensure that the `user_role` column contains only values from the set `['Admin', 'User', 'Guest']`.","expect_column_values_to_be_in_set(column=""user_role"", value_set=['Admin', 'User', 'Guest'])","expect_column_values_to_be_in_set(column=""user_role"", value_set=['Admin', 'User', 'Guest'])",1.0,1.0,1.0,100.00000000000004
For field 'match_date': Ensure this field exists. Ensure the field matches the type 'date'. Ensure values in 'match_date' are within the range of '2020-01-01' to '2023-12-31'.,"expect_column_to_exist(column=""match_date""),expect_column_values_to_be_of_type(column=""match_date"", type_=""date""),expect_column_values_to_be_between(column=""match_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""match_date""),expect_column_values_to_be_of_type(column=""match_date"", type_=""date""),expect_column_values_to_be_between(column=""match_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
Check that the combination of `experiment_id` and `subject_id` fields are unique across records to maintain data integrity.,"expect_compound_columns_to_be_unique(column_A=""experiment_id"", column_B=""subject_id"")","expect_compound_columns_to_be_unique(column_a=""experiment_id"", column_b=""subject_id"")",1.0,1.0,1.0,82.93181259810136
Ensure the `email` column contains valid email formats and is not null for any entry.,"expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_not_be_null(column=""email"")",1.0,0.9545454545454546,0.6086956521739131,99.63569522040954
"Ensure the `weather_condition` column contains only distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Stormy']`.","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])",1.0,1.0,1.0,100.00000000000004
"For field 'room_type': Ensure values are from the set ['Single', 'Double', 'Suite'] and this field is not null.","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=""room_type"")","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=""room_type"")",1.0,1.0,1.0,100.00000000000004
For field 'case_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text"")","expect_column_to_exist(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For field 'sensor_type': Ensure the field matches the type 'text'. Ensure values in (sensor_type) must exist in types (['Temperature', 'Humidity', 'Pressure']).","expect_column_values_to_be_of_type(column=""sensor_type"", type_=""text""),expect_column_values_to_be_in_set(column=""sensor_type"", value_set=['Temperature', 'Humidity', 'Pressure'])","expect_column_values_to_be_of_type(column=""sensor_type"", type_=""text""),expect_column_values_to_be_in_set(column=""sensor_type"", value_set=['Temperature', 'Humidity', 'Pressure'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `student_id` column contains unique string values following the pattern `^STU-[0-9]{5}$`.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^STU-[0-9]{5}$"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^STU-[0-9]{5}$"")",1.0,1.0,1.0,100.00000000000004
For field 'candidate_name': Ensure this field is required (not null). Ensure the field matches the type 'text'. Ensure values do not exceed 100 characters.,"expect_column_values_to_not_be_null(column=""candidate_name""),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""candidate_name"", min_value=1, max_value=100)","expect_column_to_exist(column=""candidate_name""),expect_column_values_to_not_be_null(column=""candidate_name""),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""candidate_name"", min_value=0, max_value=100)",0.891566265060241,0.8641975308641975,0.891566265060241,80.95102772740957
"For the `judgment_amount`, ensure the sum of values across all records matches the expected total amount for the current year.","expect_column_sum_to_be_between(column=""judgment_amount"", min_value=expected_min_value, max_value=expected_max_value)","expect_multicolumn_sum_to_equal(column_list=[""judgment_amount""], sum_expected=expected_total_judgment_amount)",0.47058823529411764,0.125,0.47058823529411764,25.205424329811308
For field 'wind_speed': Ensure the field matches the type 'float'. Validate that all values in 'wind_speed' represent realistic wind speeds (0 to 150 km/h).,"expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
Check that the `purchase_history` column contains records with a non-empty list of products.,"expect_column_values_to_not_be_null(column=""purchase_history""),expect_column_values_to_match_json_schema(column=""purchase_history"")","expect_column_values_to_not_be_null(column=""purchase_history""),expect_column_values_to_be_of_type(column=""purchase_history"", type_=""list""),expect_column_values_to_match_regex(column=""purchase_history"", regex=r""^(?!.*)\[(?!.*)\]\s*$"")  # This regex will check if the list contains a single empty list.",0.5454545454545454,0.5,0.5454545454545454,34.34143824341971
Validate that the `score` column contains only integer values within the range of `0` to `300`.,"expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300)","expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300)",1.0,1.0,1.0,100.00000000000004
For fields `timestamp` and `device_id`: Ensure the timestamp is in chronological order corresponding to each device ID.,"expect_column_pair_values_to_be_in_set(column_A=""device_id"", column_B=""timestamp"")","expect_column_values_to_be_decreasing(column=""timestamp""),expect_column_pair_values_to_be_increasing(column_A=""timestamp"", column_B=""device_id"")",0.7027027027027029,0.4571428571428571,0.5405405405405405,53.91266251161352
"For the `transaction_type` field: Ensure it matches the type 'text' and only includes values from the set `['Debit', 'Credit']`.","expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Debit', 'Credit'])","expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Debit', 'Credit'])",1.0,1.0,1.0,100.00000000000004
For the `watch_time` column: Ensure all values are non-negative integers and do not contain any missing values.,"expect_column_values_to_not_be_null(column=""watch_time""),expect_column_values_to_be_of_type(column=""watch_time"", type_=""int""),expect_column_values_to_be_between(column=""watch_time"", min_value=0)","expect_column_values_to_be_of_type(column=""watch_time"", type_=""int""),expect_column_values_to_be_between(column=""watch_time"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""watch_time"")",0.9577464788732395,0.927536231884058,0.676056338028169,90.98670670132002
Ensure the `publish_date` column adheres to the datetime format 'YYYY-MM-DD' and can be parsed by dateutil.,"expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publish_date"")","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publish_date"")",1.0,1.0,1.0,100.00000000000004
"For field 'claim_amount': Ensure the column contains numeric values only. Validate that the average claim amount falls within the range of $100 to $10,000.","expect_column_values_to_be_of_type(column=""claim_amount"", type_=""float""),expect_column_mean_to_be_between(column=""claim_amount"", min_value=100, max_value=10000)","expect_column_values_to_be_of_type(column=""claim_amount"", type_=""float""),expect_column_mean_to_be_between(column=""claim_amount"", min_value=100, max_value=10000)",1.0,1.0,1.0,100.00000000000004
"For the `price` column: Ensure all values are numeric and greater than zero, and no null values are allowed.","expect_column_values_to_be_of_type(column=""price"", type_=""numeric""),expect_column_values_to_be_greater_than(column=""price"", value=0),expect_column_values_to_not_be_null(column=""price"")","expect_column_values_to_be_between(column=""price"", min_value=0),expect_column_values_to_not_be_null(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""float"")",0.9032258064516129,0.8000000000000002,0.6774193548387096,88.21675642952059
Validate that the `timestamp` field contains valid datetime strings formatted as 'YYYY-MM-DDTHH:MM:SSZ'.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,100.00000000000004
Ensure the `date_of_hire` column contains valid date entries and does not include future dates.,"expect_column_values_to_be_dateutil_parseable(column=""date_of_hire""),expect_column_values_to_be_between(column=""date_of_hire"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_dateutil_parseable(column=""date_of_hire""),expect_column_values_to_be_between(column=""date_of_hire"", min_value=""1900-01-01"", max_value=""current_date"")",0.9491525423728815,0.9473684210526316,0.9491525423728815,93.67359180946393
Ensure the `forecast_date` column contains datetime values formatted as '%Y-%m-%d' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""forecast_date"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=""forecast_date"")",1.0,1.0,1.0,89.2289847859807
For the `price` column: Ensure the field matches the type 'float'. Ensure all values are greater than zero and within the range of 1.0 to 5000.0.,"expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=1.0, max_value=5000.0),expect_column_values_to_be_greater_than(column=""price"", value=0)","expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=1.0, max_value=5000.0)",0.8307692307692308,0.8253968253968255,0.8307692307692308,64.98365022331483
"Check that the `delivery_date` is greater than the `order_date` for each record, ensuring logical order processing.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the Cramér's Phi between `transaction_type` and `fraud_indicator` is below 0.1.,"expect_column_pair_cramers_phi_value_to_be_less_than(column_a=""transaction_type"", column_b=""fraud_indicator"", threshold=0.1)","expect_column_pair_cramer_v_test_p_value_to_be_greater_than(column_a=""transaction_type"", column_b=""fraud_indicator"", threshold=0.1)",0.8636363636363636,0.761904761904762,0.8636363636363636,76.49431989836047
"For the `resolution_date`, ensure that all dates are greater than or equal to the corresponding `filing_date`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""resolution_date"", column_B=""filing_date"")","expect_column_values_to_be_between(column=""resolution_date"", min_value=""filing_date"")",0.6451612903225806,0.27586206896551724,0.6451612903225806,45.24282229721269
For the 'game_id' field: Ensure it exists and matches the type 'integer'. Validate that all values are unique and greater than zero.,"expect_column_to_exist(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int""),expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_greater_than(column=""game_id"", value=0)","expect_column_to_exist(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""integer""),expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_greater_than(column=""game_id"", value=0)",0.975,0.9487179487179487,0.975,97.27436279095394
"For the `claim_status` column, ensure values are from the set `['Pending', 'Approved', 'Rejected']`.","expect_column_values_to_be_in_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Rejected'])","expect_column_values_to_be_in_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Rejected'])",1.0,1.0,1.0,100.00000000000004
Ensure the average `lead_time` for orders does not exceed 14 days.,"expect_column_mean_to_be_between(column=""lead_time"", min_value=None, max_value=14)","expect_column_mean_to_be_between(column=""lead_time"", min_value=14)",0.888888888888889,0.88,0.888888888888889,79.39226578179516
For the `bedrooms` and `bathrooms` columns: Ensure that the number of bedrooms is greater than or equal to the number of bathrooms for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")",1.0,1.0,1.0,100.00000000000004
"For the `location_coordinates` field: Ensure values match the pattern of latitude and longitude pairs (e.g. 'LAT,LNG'). Validate that no entries are null.","expect_column_values_to_match_regex(column=""location_coordinates"", regex=r""^-?\d{1,3}\.\d+,-?\d{1,3}\.\d+$""),expect_column_values_to_not_be_null(column=""location_coordinates"")","expect_column_values_to_match_regex(column=""location_coordinates"", regex=r""^(?:(?=\s+(?<!:)-{2}:\s+$)|{2}[+-]{2}\s+(?:[0-9]?\d{0,5}:\d{0,6}(?:.\d{1,7})?(?::[0-9]?\d{0,7}(?:\.\d{0,6})?\s+|$|),\s+)*$) # regular expression for matching valid latitude and longitude values, where each value is separated by a space if not followed by another valid latitude or longitude value.  # The regular expression also handles the special case of an empty value if followed by an optional closing curly brace, but not the other possible ending character sequences (i.e.,\s+,,\s*$,\s+).  # If additional ending character sequences were desired, they would need to be appended to the regular expression accordingly.  # Note: This assumes there aren't any leading zeroes (i.e. before the decimal point) unless otherwise specified.  # Example usage: expect_column_values_to_match_regex(column=""location_coordinates"", regex=r""^(?:(?=\s+(?<!",0.2824858757062147,0.18285714285714286,0.2598870056497175,16.03524783412477
For field 'user_age': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure the field contains values greater than 18. Ensure this field exists.,"expect_column_to_exist(column=""user_age""),expect_column_values_to_not_be_null(column=""user_age""),expect_column_values_to_be_of_type(column=""user_age"", type_=""int""),expect_column_values_to_be_between(column=""user_age"", min_value=18, max_value=None)","expect_column_to_exist(column=""user_age""),expect_column_values_to_not_be_null(column=""user_age""),expect_column_values_to_be_of_type(column=""user_age"", type_=""int""),expect_column_values_to_be_greater_than(column=""user_age"", value=18)",0.9176470588235294,0.8674698795180723,0.9176470588235294,87.39343018938135
"Check that the `department` column exists and contains distinct values from the predefined list `['HR', 'Finance', 'IT', 'Sales']`. Ensure this field is not null.","expect_column_to_exist(column=""department""),expect_column_values_to_not_be_null(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Sales'])","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Sales']),expect_column_values_to_not_be_null(column=""department"")",1.0,0.9655172413793104,0.7,98.87832730653388
For field 'experiment_date': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and adheres to the format '%Y-%m-%d'.,"expect_column_values_to_not_be_null(column=""experiment_date""),expect_column_values_to_be_of_type(column=""experiment_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""experiment_date""),expect_column_values_to_not_be_null(column=""experiment_date""),expect_column_values_to_be_of_type(column=""experiment_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format=""%Y-%m-%d"")",0.9135802469135803,0.9113924050632911,0.9135802469135803,83.5727737962322
"For field 'service_type': Ensure the field matches the type 'text'. Ensure values in (service_type) must exist in the set ('prepaid', 'postpaid'). Ensure this field exists.","expect_column_to_exist(column=""service_type""),expect_column_values_to_be_of_type(column=""service_type"", type_=""text""),expect_column_values_to_be_in_set(column=""service_type"", value_set=[""prepaid"", ""postpaid""])","expect_column_to_exist(column=""service_type""),expect_column_values_to_be_of_type(column=""service_type"", type_=""text""),expect_column_values_to_be_in_set(column=""service_type"", value_set=[""prepaid"", ""postpaid""])",1.0,1.0,1.0,100.00000000000004
For the `course_code`: Ensure the field is required (not null). Ensure all entries are unique and match the type 'text'.,"expect_column_values_to_not_be_null(column=""course_code""),expect_column_values_to_be_unique(column=""course_code""),expect_column_values_to_be_of_type(column=""course_code"", type_=""text"")","expect_column_values_to_not_be_null(column=""course_code""),expect_column_values_to_be_unique(column=""course_code""),expect_column_values_to_be_of_type(column=""course_code"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For the `forecast_date` field: Ensure all entries match the format 'YYYY-MM-DD' and are future dates.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""forecast_date"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""forecast_date"")",1.0,1.0,1.0,100.00000000000004
"For the `insured_item` column: Ensure it matches one of the allowed categories in `['Home', 'Auto', 'Health']`.","expect_column_values_to_be_in_set(column=""insured_item"", value_set=['Home', 'Auto', 'Health'])","expect_column_values_to_be_in_set(column=""insured_item"", value_set=['Home', 'Auto', 'Health'])",1.0,1.0,1.0,100.00000000000004
Ensure the `product_id` column contains only unique values. This column must not allow null entries.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_to_exist(column=""product_id""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
For the `currency_code` field: Ensure values match the regular expression pattern for ISO 4217 currency codes. Validate that this field cannot be null.,"expect_column_values_to_not_be_null(column=""currency_code""),expect_column_values_to_match_regex(column=""currency_code"", regex=r""^[A-Z]{3}$"")","expect_column_values_to_match_regex(column=""currency_code"", regex=r""^[A-Z]{3}$""),expect_column_values_to_not_be_null(column=""currency_code"")",1.0,0.9565217391304348,0.5833333333333334,99.53378683790139
Ensure the `email` column matches the regular expression pattern for valid email addresses and does not contain duplicates.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")",0.7058823529411764,0.6530612244897959,0.7058823529411764,70.6883366511716
Confirm that the average `read_time` in the `content_length` column does not exceed 15 minutes.,"expect_column_mean_to_be_between(column=""content_length"", min_value=0, max_value=15)","expect_column_mean_to_be_between(column=""content_length"", min_value=0, max_value=900)",0.9333333333333333,0.9285714285714286,0.9333333333333333,94.20254600938034
Validate that the `vehicle_id` column contains unique identifiers matching the pattern `VEH-###`.,"expect_column_values_to_match_regex(column=""vehicle_id"", regex=r""^VEH-\d{3}$""),expect_column_values_to_be_unique(column=""vehicle_id"")","expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_match_regex(column=""vehicle_id"", regex=r""VEH-\d{4}"")",0.9565217391304348,0.9090909090909091,0.6086956521739131,87.16322224877823
"For the `grade` column: Ensure values are within the set of allowable grades: ['A', 'B', 'C', 'D', 'F'].","expect_column_values_to_be_in_set(column=""grade"", value_set=['A', 'B', 'C', 'D', 'F'])","expect_column_values_to_be_in_set(column=""grade"", value_set=['A', 'B', 'C', 'D', 'F'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `temperature` column contains values within the range [-50, 50] degrees Celsius and has no missing values.","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_not_be_null(column=""temperature"")","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_not_be_null(column=""temperature"")",1.0,1.0,1.0,100.00000000000004
For the `monthly_bill` column: Ensure the distribution shows a median value within the expected range.,"expect_column_median_to_be_between(column=""monthly_bill"", min_value=expected_min, max_value=expected_max)","expect_column_mean_to_be_between(column=""monthly_bill"", min_value=None, max_value=None),expect_column_mode_to_be_between(column=""monthly_bill"", min_value=None, max_value=None)",0.6382978723404256,0.4,0.5957446808510638,38.16815482178926
Ensure the `email` field contains unique values and matches the email format. Ensure this field is required (not null).,"expect_column_values_to_be_unique(column=""email""),expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_null(column=""email"")",0.7826086956521738,0.746268656716418,0.5797101449275363,76.92319218536673
For field 'email': Ensure the field exists. Validate that all values in (email) conform to the email format and do not exceed 255 characters.,"expect_column_to_exist(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=255)","expect_column_to_exist(column=""email""),expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=255),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.9855072463768115,0.955223880597015,0.608695652173913,93.54465256164922
Check that the `sent_at` column contains datetime strings that can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""sent_at"")","expect_column_values_to_be_dateutil_parseable(column=""sent_at"")",1.0,1.0,1.0,100.00000000000004
For field 'invoice_number': Ensure values in 'invoice_number' are unique. Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_unique(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""text"")","expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_unique(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""text"")илакти",1.0,1.0,1.0,98.49581210109045
For the `user_id`: Ensure this field includes only unique identifiers that match the defined set of active user IDs.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=active_user_ids)","expect_column_values_to_be_unique(column=""user_id"")  # Ensures unique values across the entire column.",0.5499999999999999,0.4210526315789474,0.5499999999999999,30.083961122465745
Ensure the `user_id` column exists and contains only distinct values that correlate to entries in the `users` table.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_user_ids)","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_user_ids)",0.8363636363636363,0.8301886792452831,0.8363636363636363,66.24801353939264
For the `carrier_id` column: Ensure values are unique and not null. Verify that this ID exists in the `carriers` table.,"expect_column_values_to_be_unique(column=""carrier_id""),expect_column_values_to_not_be_null(column=""carrier_id""),expect_column_values_to_be_in_set(column=""carrier_id"", value_set=carriers_table_ids)  # Note: You would need to replace `carriers_table_ids` with the actual set of carrier IDs from the carriers table.","expect_column_values_to_be_unique(column=""carrier_id""),expect_column_values_to_not_be_null(column=""carrier_id""),expect_column_values_to_be_in_set(column=""carrier_id"", value_set=carrier_ids)  # where carrier_ids are the available IDs from the carriers table  # which can be obtained via a custom implementation from the available_carriers function.",0.7567567567567567,0.6605504587155964,0.7387387387387387,75.14720402333295
"For the `transaction_date` field, verify all datetime entries match the format 'DD/MM/YYYY' and are valid dates.","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%d/%m/%Y""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%d/%m/%Y""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
In the `guest_count` column: Verify that all values are integers and fall within the range of 1 to 10. Detect any missing values.,"expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10),expect_column_values_to_be_null(column=""guest_count"")","expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""guest_count"")",0.9863013698630138,0.9577464788732395,0.9863013698630138,96.68778128003592
Ensure the `battery_level` values are represented as percentages and range from 0 to 100.,"expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""battery_level"", type_=""float""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int"")",0.5555555555555556,0.5384615384615384,0.5555555555555556,33.681567686912246
Ensure the `event_date` column contains valid datetime entries that align with the format '%Y/%m/%d'.,"expect_column_values_to_match_strftime_format(column=""event_date"", strftime_format=""%Y/%m/%d"")","expect_column_to_exist(column=""event_date""),expect_column_values_to_match_strftime_format(column=""event_date"", strftime_format='%Y/%m/%d')",0.8108108108108109,0.8,0.8108108108108109,60.316995758512235
"For field 'device_status': Ensure the field exists and matches the type 'text'. Ensure values are from the predefined list: ['active', 'inactive', 'malfunctioning'].","expect_column_to_exist(column=""device_status""),expect_column_values_to_be_of_type(column=""device_status"", type_=""text""),expect_column_values_to_be_in_set(column=""device_status"", value_set=['active', 'inactive', 'malfunctioning'])","expect_column_to_exist(column=""device_status""),expect_column_values_to_be_of_type(column=""device_status"", type_=""text""),expect_column_values_to_be_in_set(column=""device_status"", value_set=[""active"", ""inactive"", ""malfunctioning""])",1.0,1.0,1.0,86.20854454554733
"For the `rating` field: Ensure the values are within the range [0, 10]. Ensure this field matches the type 'float' and cannot be null.","expect_column_values_to_be_between(column=""rating"", min_value=0, max_value=10),expect_column_values_to_be_of_type(column=""rating"", type_=""float""),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=0, max_value=10),expect_column_values_to_be_of_type(column=""rating"", type_=""float""),expect_column_values_to_not_be_null(column=""rating"")ЎыџNЎыџN",0.9714285714285714,0.9705882352941176,0.9714285714285714,98.72585449014339
"For the `attendance_percentage`, ensure all values are numeric and fall within the range of `0` to `100`.","expect_column_values_to_be_of_type(column=""attendance_percentage"", type_=""numeric""),expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""attendance_percentage"", type_=""numeric""),expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Check that the `total_amount` in the `orders` table has a mean value greater than $10.,"expect_column_mean_to_be_between(column=""total_amount"", min_value=10)","expect_column_mean_to_be_between(column=""total_amount"", min_value=10, max_value=None)",0.888888888888889,0.88,0.888888888888889,77.77249746516185
"Check that the `genre` column adheres to a predefined list of genres: `['Action', 'Adventure', 'RPG']` and has no duplicates.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG']),expect_column_values_to_be_unique(column=""genre"")","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG']) and expect_column_values_to_be_unique(column=""genre"")",0.9777777777777777,0.9302325581395349,0.9777777777777777,94.86610352970624
Validate that the `stock_quantity` field only contains non-negative integers.,"expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
Ensure the `product_id` column contains only distinct values that exist in the `products` table.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_in_set(column=""product_id"", value_set=products_table_values)","expect_column_values_to_be_unique(column=""product_id"")",0.5454545454545454,0.5161290322580645,0.5454545454545454,19.204990862075423
Check the `transaction_history` table to ensure it contains at least 50 rows and that the `transaction_amount` column exists.,"expect_table_row_count_to_be_between(min_value=50),expect_column_to_exist(column=""transaction_amount"")","expect_table_row_count_to_be_between(min_value=50, max_value=None)  # If we want a fixed minimum number of rows, we can specify min_value=50, for example.  # This line can be modified as per the business requirement.",0.3508771929824561,0.32727272727272727,0.3508771929824561,31.122386376236975
Confirm that the `delivery_date` column does not contain any null values and is after the `order_date` values.,"expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_pair_values_to_be_increasing(column_A=""order_date"", column_B=""delivery_date"")",0.9056603773584904,0.7450980392156864,0.830188679245283,83.71579523110053
For field 'author_id': Ensure the field matches the type 'integer'. Validate that 'author_id' values must exist in the 'users' table.,"expect_column_values_to_be_of_type(column=""author_id"", type_=""int""),expect_column_values_to_be_in_set(column=""author_id"", value_set=users_table_author_ids)","expect_column_to_exist(column=""author_id""),expect_column_values_to_be_of_type(column=""author_id"", type_=""integer""),expect_select_column_values_to_match_set(column=""author_id"", value_set=""users"")",0.7666666666666666,0.6551724137931035,0.7333333333333334,65.10476125821562
"Ensure the `property_type` column contains only values from the set `['Apartment', 'House', 'Condo']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo'])",1.0,1.0,1.0,100.00000000000004
"Ensure no missing values are present in the `ip_address` column, and all entries match a valid IP address format.","expect_column_values_to_not_be_null(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$"")","expect_column_values_to_not_be_null(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")",0.8219178082191781,0.8169014084507042,0.8219178082191781,71.72034700350193
"For the `release_date` field, ensure it matches the datetime format `'%Y-%m-%d'` and that all entries are valid and present.","expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=""release_date"")",0.8070175438596492,0.7272727272727272,0.8070175438596492,59.33921967342483
Ensure the `case_number` column contains unique identifiers for each case without duplicates.,"expect_column_values_to_be_unique(column=""case_number"")","expect_column_values_to_be_unique(column=""case_number"")",1.0,1.0,1.0,100.00000000000004
Ensure the sum of `deposits` and `withdrawals` columns equals the `account_balance` column for each account in the Banking table.,"expect_multicolumn_sum_to_equal(column_list=[""deposits"", ""withdrawals""], target_column=""account_balance"")","expect_column_sum_to_equal(column=""deposits"", target_sum=""account_balance""),expect_column_sum_to_equal(column=""withdrawals"", target_sum=""account_balance""),expect_multicolumn_sum_to_equal(column_list=[""deposits"", ""withdrawals""], target_column=""account_balance"")",0.5416666666666666,0.5217391304347826,0.5416666666666666,37.55314436777717
For the `timestamp`: Ensure all entries are in ISO 8601 format and are less than the current date and time.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_between(column=""timestamp"", min_value=None, max_value=""current_date_time"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S%z""),expect_column_values_to_be_less_than(column=""timestamp"", value=timestamp_now())",0.78125,0.6774193548387097,0.78125,70.0788904925219
For field 'humidity': Ensure this field matches the type 'integer'. Ensure values are within the range of 0 to 100 percent. Ensure this field exists.,"expect_column_to_exist(column=""humidity""),expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_to_exist(column=""humidity""),expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),  # This assumes that 0 is considered to be ""not humidity"", but if that is incorrect, this line can be adjusted.",0.7560975609756097,0.7499999999999999,0.7560975609756097,72.58463297954411
For field 'profile_picture_url': Ensure all values in (profile_picture_url) match the pattern '^(http|https)://.*\\.(jpg|jpeg|png|gif)$'. Ensure this field exists.,"expect_column_to_exist(column=""profile_picture_url""),expect_column_values_to_match_regex(column=""profile_picture_url"", regex=r""^(http|https)://.*\.(jpg|jpeg|png|gif)$"")","expect_column_to_exist(column=""profile_picture_url""),expect_column_values_to_match_regex(column=""profile_picture_url"", regex=r""^(http|https)://.*\.(jpg|jpeg|png|gif)$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `student_id` column contains unique string values that conform to the pattern `^[A-Z]{2}[0-9]{6}$`.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^[A-Z]{2}[0-9]{6}$"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^[A-Z]{2}[0-9]{6}$"")",1.0,1.0,1.0,100.00000000000004
For the `incident_time` field: Ensure that all datetime strings can be parsed using dateutil. Validate that `resolution_time` is always greater than `incident_time`.,"expect_column_values_to_be_dateutil_parseable(column=""incident_time""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""resolution_time"", column_B=""incident_time"")","expect_column_to_exist(column=""incident_time""),expect_column_values_to_be_dateutil_parseable(column=""incident_time""),expect_column_pair_values_to_be_greater_than(column_A=""incident_time"", column_B=""resolution_time"")",0.8524590163934426,0.711864406779661,0.7868852459016394,73.93350130021135
"For field `genre`: Ensure the field matches the type 'text' and values are from the set `['action', 'strategy', 'puzzle', 'role-playing']`.","expect_column_values_to_be_of_type(column=""genre"", type_=""text""),expect_column_values_to_be_in_set(column=""genre"", value_set=['action', 'strategy', 'puzzle', 'role-playing'])","expect_column_values_to_be_of_type(column=""genre"", type_=""text""),expect_column_values_to_be_in_set(column=""genre"", value_set=['action','strategy', 'puzzle', 'role-playing'])",1.0,1.0,1.0,100.00000000000004
For field 'consumption_date': Ensure the field matches the type 'date'. Validate that all consumption dates are formatted as 'YYYY-MM-DD' and that they fall within the last 12 months.,"expect_column_to_exist(column=""consumption_date""),expect_column_values_to_be_of_type(column=""consumption_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""consumption_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""consumption_date"", min_value=(datetime.now() - pd.DateOffset(months=12)).date(), max_value=datetime.now().date())","expect_column_values_to_be_of_type(column=""consumption_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""consumption_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""consumption_date"", min_value=""2022-08-01"", max_value=""2023-08-01"")",0.7766990291262136,0.7524752475247526,0.7766990291262136,64.37254177099155
Verify that the `expense_report` field contains valid JSON objects and adheres to the specified schema.,"expect_column_values_to_be_json_parseable(column=""expense_report""),expect_column_values_to_match_json_schema(column=""expense_report"", schema={""type"": ""object""})","expect_column_values_to_match_json_schema(column=""expense_report"", schema={})  # Replace with actual schema",0.5789473684210527,0.5555555555555556,0.5789473684210527,36.31309595411415
Confirm that the `branch_code` field contains exactly 5 digits and does not include any letters or symbols.,"expect_column_values_to_match_regex(column=""branch_code"", regex=r""^\d{5}$"")","expect_column_values_to_match_regex(column=""branch_code"", regex=r""^\d{5}$"")",1.0,1.0,1.0,100.00000000000004
In the `transaction_details` column: Validate that it is a valid JSON object conforming to the specified schema and must not be null.,"expect_column_values_to_be_json_parseable(column=""transaction_details""),expect_column_values_to_not_be_null(column=""transaction_details"")","expect_column_values_to_be_json_parseable(column=""transaction_details""),expect_column_values_to_match_json_schema(column=""transaction_details"", schema={""type"": ""object"", ""properties"": {}})  # Specify your schema for transaction details, for example: { ""type"": ""object"", ""properties"": { ""amount"": ""number"", ""currency"": ""string"", ""transaction_date"": ""string"", ""customer_id"": ""string"", ""transaction_id"": ""string"" } }  # Note: The actual schema must be customized based on the actual requirement.",0.45000000000000007,0.3846153846153846,0.425,24.628274951170834
For field 'product_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Check that all values are unique.,"expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""text""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""text""),expect_column_values_to_be_unique(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
For the `image_url` column: Validate that all URLs are formatted correctly and do not exceed 255 characters.,"expect_column_values_to_match_regex(column=""image_url"", regex=r""^(https?|ftp)://[^\s/$.?#].[^\s]*$""),expect_column_value_lengths_to_be_between(column=""image_url"", min_value=1, max_value=255)","expect_column_values_to_match_regex(column=""image_url"", regex=r""^https:\/\/(?:www\.|localhost|)[^.\/]+$""),expect_column_value_lengths_to_be_between(column=""image_url"", min_value=1, max_value=255)",0.9180327868852459,0.8813559322033899,0.9180327868852459,72.81450737837197
For field 'user_rating': Ensure the field matches the type 'decimal'. Validate that values fall within the range of 1.0 to 5.0. Ensure this field exists.,"expect_column_to_exist(column=""user_rating""),expect_column_values_to_be_of_type(column=""user_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""user_rating"", min_value=1.0, max_value=5.0)","expect_column_to_exist(column=""user_rating""),expect_column_values_to_be_of_type(column=""user_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=5)",0.9714285714285714,0.9411764705882354,0.9714285714285714,94.4673521293269
Verify that the `number_of_guests` column contains only integer values between 1 and 10.,"expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int""),expect_column_values_to_be_between(column=""number_of_guests"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""number_of_guests"", min_value=1, max_value=10),expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int"")",1.0,0.9642857142857143,0.6206896551724138,98.80694355602404
For field 'genre': Ensure the field matches the type 'text'. Validate that the length of string values does not exceed 30 characters.,"expect_column_values_to_be_of_type(column=""genre"", type_=""text""),expect_column_value_lengths_to_be_between(column=""genre"", min_value=0, max_value=30)","expect_column_values_to_be_of_type(column=""genre"", type_=""text""),expect_column_value_lengths_to_be_between(column=""genre"", min_value=1, max_value=30)",0.9615384615384616,0.92,0.9615384615384616,95.66758893610279
"Validate that the `case_value` field contains only positive decimal numbers, ensuring no missing values.","expect_column_values_to_not_be_null(column=""case_value""),expect_column_values_to_be_between(column=""case_value"", min_value=0, max_value=None),expect_column_values_to_match_regex(column=""case_value"", regex=r""^\d+(\.\d+)?$"")","expect_column_values_to_be_of_type(column=""case_value"", type_=""float""),expect_column_values_to_not_be_null(column=""case_value"")  # This is assuming the missing value is a floating-point value, but if your column values are not of type float, you may need to modify the expect_column_values_to_be_null() conditional.",0.5531914893617021,0.391304347826087,0.48936170212765956,51.49370207443047
Ensure the `temperature` column values are within the range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)",1.0,1.0,1.0,100.00000000000004
For columns `home_team_score` and `away_team_score`: Ensure the total of these columns in any record is equal to the final `match_score`.,"expect_multicolumn_sum_to_equal(column_list=[""home_team_score"", ""away_team_score""], target_column=""match_score"")","expect_multicolumn_sum_to_equal(column_list=[""home_team_score"", ""away_team_score""], sum_column=""match_score"")",0.9411764705882353,0.875,0.9411764705882353,93.70011451812971
"Validate the `user_preferences` JSON structure to ensure it adheres to the required schema, including fields like `notifications` and `privacy_settings`.","expect_column_values_to_match_json_schema(column=""user_preferences"", schema={""type"": ""object"", ""properties"": {""notifications"": {""type"": ""object""}, ""privacy_settings"": {""type"": ""object""}}})","expect_column_values_to_match_json_schema(column=""user_preferences"")",0.6451612903225806,0.6206896551724138,0.6451612903225806,10.857046695659843
"Ensure that the `status` column does not include any values outside the set `['Active', 'Inactive']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive'])",1.0,1.0,1.0,100.00000000000004
For field 'property_zip_code': Ensure the field matches the type 'text'. Validate that values conform to the pattern of a 5-digit US ZIP code (^[0-9]{5}$). Ensure this field exists.,"expect_column_to_exist(column=""property_zip_code""),expect_column_values_to_be_of_type(column=""property_zip_code"", type_=""text""),expect_column_values_to_match_regex(column=""property_zip_code"", regex=r""^[0-9]{5}$"")","expect_column_to_exist(column=""property_zip_code""),expect_column_values_to_be_of_type(column=""property_zip_code"", type_=""text""),expect_column_values_to_match_regex(column=""property_zip_code"", regex=r""^[0-9]{5}$"")",1.0,1.0,1.0,100.00000000000004
"For the `fraudulent` column: Verify that values are boolean and ensure that this field is required (not null). Validate that the distribution of values is consistent with expected behavior (e.g., p-value > 0.05 in a Chi-Square test).","expect_column_values_to_be_of_type(column=""fraudulent"", type_=""bool""),expect_column_values_to_not_be_null(column=""fraudulent""),expect_column_chisquare_test_p_value_to_be_greater_than(column=""fraudulent"", threshold=0.05)","expect_column_values_to_be_of_type(column=""fraudulent"", type_=""boolean""),expect_column_values_to_not_be_null(column=""fraudulent""),expect_column_parameterized_chisquare_test_p_value_to_be_greater_than(column=""fraudulent"", threshold=0.05)",0.9577464788732395,0.8985507246376812,0.9577464788732395,93.32717044791214
Ensure the `age` column contains only unique values that fall within the range of 18 to 100.,"expect_column_values_to_be_unique(column=""age""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100)","expect_column_values_to_be_unique(column=""age""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100)İTESİ",0.9565217391304348,0.9545454545454545,0.9565217391304348,97.93703613355592
"For field `square_footage`: Ensure values are greater than zero and that the maximum square footage does not exceed 10,000. Ensure this field exists.","expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_greater_than(column=""square_footage"", value=0),expect_column_max_to_be_between(column=""square_footage"", max_value=10000)","expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_greater_than(column=""square_footage"", value=0),expect_column_max_to_be_between(column=""square_footage"", min_value=None, max_value=10000)",0.9538461538461539,0.9206349206349207,0.9538461538461539,90.91309933780774
"For the `humidity` and `temperature` columns: Validate that humidity readings are consistent with temperature readings (e.g., humidity should not exceed 100%).","expect_column_pair_values_A_to_be_less_than_B(column_A=""humidity"", column_B=""temperature"")","expect_column_pair_values_to_be_between(column_A=""humidity"", column_B=""temperature"", min_value=None, max_value=100)",0.6857142857142857,0.5454545454545454,0.6857142857142857,60.95141355358056
Ensure that the `player_age` column has values that fall within the range of `18` to `40`.,"expect_column_values_to_be_between(column=""player_age"", min_value=18, max_value=40)","expect_column_values_to_be_between(column=""player_age"", min_value=18, max_value=40)",1.0,1.0,1.0,100.00000000000004
"Verify that the JSON structure in the `game_metadata` column adheres to the specified schema, ensuring all required fields are present and correctly typed.","expect_column_values_to_match_json_schema(column=""game_metadata"")","expect_column_values_to_match_json_schema(column=""game_metadata"", schema=""YOUR_JSON_SCHEMA_HERE"")",0.8,0.782608695652174,0.8,61.38197926013066
Check that the `p_value` in the `results` column is less than or equal to 0.05 for statistically significant findings.,"expect_column_values_to_be_between(column=""results"", min_value=None, max_value=0.05)","expect_column_values_to_be_between(column=""p_value"", min_value=0, max_value=0.05)",0.8387096774193549,0.689655172413793,0.8387096774193549,76.30637969873823
"Check that the `service_plan` column contains values exclusively from the set `['Basic', 'Standard', 'Premium']`.","expect_column_values_to_be_in_set(column=""service_plan"", value_set=['Basic', 'Standard', 'Premium'])","expect_column_values_to_be_in_set(column=""service_plan"", value_set=['Basic', 'Standard', 'Premium'])",1.0,1.0,1.0,100.00000000000004
For field 'reaction_count': Ensure this field must be of type 'integer'. Validate that all values are non-negative and can pass the Chi-Square test with p-value > 0.05.,"expect_column_values_to_be_of_type(column=""reaction_count"", type_=""int""),expect_column_values_to_be_between(column=""reaction_count"", min_value=0),expect_column_chisquare_test_p_value_to_be_greater_than(column=""reaction_count"", threshold=0.05)","expect_column_values_to_be_of_type(column=""reaction_count"", type_=""int""),expect_column_values_to_be_greater_than(column=""reaction_count"", value=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""reaction_count"", parameter=""chi_squared"", value=0.05)",0.8470588235294118,0.746987951807229,0.8470588235294118,76.91057280475486
For table 'leases': Ensure the number of rows is between 1 and 100. Ensure the column 'lease_start_date' exists and is formatted as 'YYYY-MM-DD'.,"expect_table_row_count_to_be_between(min_value=1, max_value=100),expect_column_to_exist(column=""lease_start_date""),expect_column_values_to_match_strftime_format(column=""lease_start_date"", strftime_format=""%Y-%m-%d"")","expect_table_row_count_to_be_between(min_value=1, max_value=100),expect_column_to_exist(column=""lease_start_date""),expect_column_values_to_match_strftime_format(column=""lease_start_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For the `temperature` field: Ensure values are within the range of -40 to 125 degrees Celsius and are arranged in increasing order.,"expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125),expect_column_values_to_be_increasing(column=""temperature"")","expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125),expect_column_values_to_be_increasing(column=""temperature"")",1.0,1.0,1.0,100.00000000000004
Ensure the `call_duration` column contains values that are greater than or equal to 0 seconds.,"expect_column_values_to_be_between(column=""call_duration"", min_value=0)","expect_column_values_to_be_greater_than(column=""call_duration"", value=0)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
"Ensure the mean of the `rating` column is greater than or equal to 4.0, indicating a generally positive customer feedback.","expect_column_mean_to_be_between(column=""rating"", min_value=4.0)","expect_column_mean_to_be_greater_than(column=""rating"", value=4.0)",0.8333333333333334,0.6363636363636364,0.8333333333333334,72.71042103011655
For `sent_date`: Ensure all values follow the ISO 8601 format (YYYY-MM-DDTHH:MM:SS) and are not from the future. Validate that this field is required.,"expect_column_to_exist(column=""sent_date""),expect_column_values_to_match_strftime_format(column=""sent_date"", strftime_format=""%Y-%m-%dT%H:%M:%S""),expect_column_values_to_not_be_null(column=""sent_date""),expect_column_values_to_be_dateutil_parseable(column=""sent_date"")","expect_column_values_to_match_strftime_format(column=""sent_date"", strftime_format=""%Y-%m-%dT%H:%M:%S""),expect_column_values_to_match_strftime_format(column=""sent_date"", strftime_format=""%Y-%m-%dT%H:%M:%S.%f""),expect_column_values_to_match_regex(column=""sent_date"", regex=r""^[0-9]{4}-[0-9]{2}-[0-9]{2}[T, ][0-9]{2}[:.][0-9]{2}[:.][0-9]{2}$""),expect_column_values_to_not_be_greater_than(column=""sent_date"", value=""now"")  # This ensures that values are not from the future.  # Note: Since the current time is 26 July 2024, we will replace the ""now"" with the current date/time for testing.  # In actual production, this should be replaced with the actual current date/time.",0.4880952380952381,0.3975903614457832,0.4642857142857143,34.00477163998702
For the `enrollment_date`: Validate that all dates conform to the format `YYYY-MM-DD` and are within the academic year range from `2020-09-01` to `2021-06-30`.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2020-09-01"", max_value=""2021-06-30"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2020-09-01"", max_value=""2021-06-30"")",0.9066666666666667,0.9041095890410958,0.9066666666666667,82.19624822169742
For field 'item_quantity': Ensure the field matches the type 'integer'. Ensure values in (item_quantity) are greater than or equal to 1. Ensure this field exists.,"expect_column_to_exist(column=""item_quantity""),expect_column_values_to_be_of_type(column=""item_quantity"", type_=""int""),expect_column_values_to_be_between(column=""item_quantity"", min_value=1, max_value=None)","expect_column_to_exist(column=""item_quantity""),expect_column_values_to_be_of_type(column=""item_quantity"", type_=""int""),expect_column_values_to_be_greater_than_or_equal_to(column=""item_quantity"", value=1)",0.8529411764705882,0.7878787878787878,0.8529411764705882,84.0108841007904
"For field `salary`: Verify that the median salary falls within the range of $30,000 to $150,000.","expect_column_median_to_be_between(column=""salary"", min_value=30000, max_value=150000)","expect_column_median_to_be_between(column=""salary"", min_value=30000, max_value=150000)",1.0,1.0,1.0,100.00000000000004
For the `wind_speed` column: Ensure all entries are positive values expressed in km/h and do not exceed 200 km/h.,"expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=200)","expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=200)",0.7142857142857143,0.7000000000000001,0.7142857142857143,50.38793199614183
Verify that the `enrollment_date` column contains datetime values matching the format '%d/%m/%Y'.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%d/%m/%Y"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%d/%m/%Y"")",1.0,1.0,1.0,100.00000000000004
"For the `sent_time` column, ensure all datetime strings match the format '%Y-%m-%d %H:%M:%S' and can be parsed correctly.","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")",1.0,1.0,1.0,90.5619259480469
For field `release_date`: Ensure all entries adhere to the datetime format 'YYYY-MM-DD'. Ensure this field is required (not null).,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,76.86458850312829
"For the `followers_count` column, confirm that all values are within the range [0, 1,000,000] and are in increasing order.","expect_column_values_to_be_between(column=""followers_count"", min_value=0, max_value=1000000),expect_column_values_to_be_increasing(column=""followers_count"")","expect_column_values_to_be_between(column=""followers_count"", min_value=0, max_value=1000000),expect_column_values_to_be_increasing(column=""followers_count"")",1.0,1.0,1.0,100.00000000000004
Ensure the `likes_count` field contains only non-negative integers. This field must not accept null values.,"expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_not_be_null(column=""likes_count""),expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""likes_count"", min_value=0),expect_column_values_to_not_be_null(column=""likes_count""),expect_column_values_to_be_of_type(column=""likes_count"", type_=""int"")",0.9577464788732395,0.927536231884058,0.7323943661971832,90.86248101118649
For the `balance` field: Ensure this field is required (not null). Ensure the field matches the type 'decimal'. Ensure values in `balance` are greater than or equal to `0`.,"expect_column_values_to_not_be_null(column=""balance""),expect_column_values_to_be_of_type(column=""balance"", type_=""decimal""),expect_column_values_to_be_between(column=""balance"", min_value=0, max_value=None)","expect_column_values_to_not_be_null(column=""balance""),expect_column_values_to_be_of_type(column=""balance"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""balance"", value=0)",0.8923076923076922,0.8253968253968254,0.8923076923076922,83.58438432503243
"For field 'application_status': Ensure this field exists. Validate that the values are in the set ('Pending', 'Approved', 'Denied').","expect_column_to_exist(column=""application_status""),expect_column_values_to_be_in_set(column=""application_status"", value_set=['Pending', 'Approved', 'Denied'])","expect_column_to_exist(column=""application_status""),expect_column_values_to_be_in_set(column=""application_status"", value_set=['Pending', 'Approved', 'Denied'])",1.0,1.0,1.0,100.00000000000004
Ensure that the number of rows in the `loan_applications` table is equal to the number of rows in the `approved_loans` table.,"expect_table_row_count_to_equal_other_table(table=""loan_applications"", other_table=""approved_loans"")","expect_table_row_count_to_equal_other_table(table_name=""loan_applications"", other_table_name=""approved_loans"")",0.9375,0.7999999999999999,0.9375,80.33331639285797
"For the `date_of_transaction` column, ensure all dates are within the last year and that they are sorted in increasing order.","expect_column_values_to_be_between(column=""date_of_transaction"", min_value=""2022-10-01"", max_value=""2023-10-01""),expect_column_values_to_be_increasing(column=""date_of_transaction"")","expect_column_values_to_be_between(column=""date_of_transaction"", min_value=""2023-03-16"", max_value=""2023-03-17""),expect_column_values_to_be_increasing(column=""date_of_transaction"")",0.8333333333333334,0.7586206896551724,0.8333333333333334,84.57642323615309
For field 'shipment_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure this field exists.,"expect_column_to_exist(column=""shipment_date""),expect_column_values_to_not_be_null(column=""shipment_date""),expect_column_values_to_be_of_type(column=""shipment_date"", type_=""date"")","expect_column_to_exist(column=""shipment_date""),expect_column_values_to_not_be_null(column=""shipment_date""),expect_column_values_to_be_of_type(column=""shipment_date"", type_=""date"")ávací",0.983050847457627,0.9824561403508771,0.983050847457627,98.53975403131594
For the `created_at` field: Ensure all entries follow the datetime format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""created_at"")","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""created_at"")",1.0,1.0,1.0,100.00000000000004
For field 'student_id': Ensure the expect field match count between 1000 and 3000; Ensure this field is a primary key with unique values and is required (not null).,"expect_column_unique_value_count_to_be_between(column=""student_id"", min_value=1000, max_value=3000),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_value_count_to_be_between(column=""student_id"", min_value=1000, max_value=3000),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_to_be_primary_key(column=""student_id"")",0.875,0.8461538461538461,0.875,77.92008642977433
Ensure that the `user_id` and `order_id` combination is unique across the dataset to prevent duplicate orders.,"expect_compound_columns_to_be_unique(column_list=[""user_id"", ""order_id""])","expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""order_id"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
"Ensure the unique values in the `weather_condition` column match the defined set: `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",0.875,0.7333333333333333,0.875,84.99508493439812
Verify that the `experiment_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""experiment_id""),expect_column_values_to_not_be_null(column=""experiment_id"")","expect_column_values_to_be_unique(column=""experiment_id""),expect_column_values_to_not_be_null(column=""experiment_id"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `forecast_date` column contains unique dates and matches the `YYYY-MM-DD` format.,"expect_column_values_to_be_unique(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_unique(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `case_number` column contains only unique values and is of type 'text'.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Verify that the `project_start_date` and `project_end_date` columns contain dates where `project_end_date` is always after `project_start_date`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""project_end_date"", column_B=""project_start_date"")","expect_column_values_A_to_be_greater_than_B(column_A=""project_end_date"", column_B=""project_start_date"")",0.9743589743589743,0.918918918918919,0.9743589743589743,93.50928657325045
For the `service_plan` field: Validate that all entries conform to the regex pattern `^(Basic|Standard|Premium)$`.,"expect_column_values_to_match_regex(column=""service_plan"", regex=r""^(Basic|Standard|Premium)$"")","expect_column_values_to_match_regex(column=""service_plan"", regex=r""^(Basic|Standard|Premium)$"")",1.0,1.0,1.0,100.00000000000004
"Validate that the 'file_upload' field points to existing files, with a content check ensuring that the number of lines does not exceed 1000.","expect_file_to_exist(column=""file_upload""),expect_file_line_regex_match_count_to_be_between(column=""file_upload"", min_value=0, max_value=1000)","expect_file_to_exist(file_path=""file_upload""),expect_column_line_count_to_be_between(column=""file_upload"", min_value=0, max_value=1000)",0.9387755102040817,0.723404255319149,0.8571428571428572,83.11706567843119
"For field 'user_score': Ensure values are between 0 and 10, inclusive. Ensure no missing values.","expect_column_values_to_be_between(column=""user_score"", min_value=0, max_value=10),expect_column_values_to_not_be_null(column=""user_score"")","expect_column_values_to_be_between(column=""user_score"", min_value=0, max_value=10),expect_column_values_to_not_be_null(column=""user_score"")",1.0,1.0,1.0,100.00000000000004
"For the `transaction_amount`, confirm that all entries are numeric and fall within the range of `0.01` to `1,000,000`.","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""float""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=1000000)","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""float""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=1_000_000)",0.9310344827586207,0.9285714285714286,0.9310344827586207,91.07029011351376
Ensure that the `supplier_details` column contains valid JSON objects and adheres to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""supplier_details""),expect_column_values_to_match_json_schema(column=""supplier_details"", schema=""specified_json_schema"")","expect_column_values_to_be_json_parseable(column=""supplier_details""),expect_column_values_to_match_json_schema(column=""supplier_details"", json_schema=""your_json_schema_here"")",0.9199999999999999,0.8333333333333333,0.9199999999999999,83.62031339563565
Verify that the `course_duration` field contains only positive integers representing weeks.,"expect_column_values_to_be_of_type(column=""course_duration"", type_=""int""),expect_column_values_to_be_between(column=""course_duration"", min_value=1, max_value=None)","expect_column_values_to_be_of_type(column=""course_duration"", type_=""int""),expect_column_values_to_be_greater_than(column=""course_duration"", value=0),expect_column_values_to_match_regex(column=""course_duration"", regex=r""^\d{1,}$"")",0.7187499999999999,0.5806451612903226,0.6875,53.876432563489196
"Validate that the `client_email` field conforms to the standard email format defined by the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.","expect_column_values_to_match_regex(column=""client_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""client_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.6315789473684211,0.5555555555555556,0.6315789473684211,68.34385242763129
"For field 'alert_level': Ensure the field matches the type 'text'. Validate that values in (alert_level) must be one of the predefined levels: 'low', 'medium', 'high', or 'critical'.","expect_column_values_to_be_of_type(column=""alert_level"", type_=""text""),expect_column_values_to_be_in_set(column=""alert_level"", value_set=[""low"", ""medium"", ""high"", ""critical""])","expect_column_values_to_be_of_type(column=""alert_level"", type_=""text""),expect_column_values_to_be_in_set(column=""alert_level"", value_set=['low','medium', 'high', 'critical'])",1.0,1.0,1.0,78.18429768538174
Check that the `order_id` column contains unique values and is not null across all records.,"expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id"")","expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
Verify that the `election_date` column values are in the format 'YYYY-MM-DD' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""election_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""election_date"")","expect_column_values_to_match_strftime_format(column=""election_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""election_date"")",1.0,1.0,1.0,100.00000000000004
For table 'sensor_data': Ensure the table contains at least 100 rows. Validate that the column 'timestamp' adheres to the ISO 8601 format.,"expect_table_row_count_to_be_between(min_value=100),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_table_row_count_to_be_between(table=""sensor_data"", min_value=100)  # Ensures the table has at least 100 rows.expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")  # Ensures the timestamp values match the ISO 8601 format.",0.6933333333333335,0.6301369863013698,0.6933333333333335,61.629149563218675
For the `discount_percentage`: Ensure values range from 0 to 100 and are arranged in decreasing order.,"expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""discount_percentage"")","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""discount_percentage"")",1.0,1.0,1.0,100.00000000000004
For field 'supplier_id': Ensure the expect column values to be unique;,"expect_column_values_to_be_unique(column=""supplier_id"")","expect_column_values_to_be_unique(column=""supplier_id"")",1.0,1.0,1.0,100.00000000000004
For the `stock_quantity` column: Verify that the sum of stock quantities is greater than `500` and that individual values are non-negative integers.,"expect_column_sum_to_be_between(column=""stock_quantity"", min_value=500),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)","expect_column_sum_to_be_between(column=""stock_quantity"", min_value=500),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)",0.7936507936507936,0.7540983606557377,0.761904761904762,59.56390849411797
Ensure that the distribution of the `customer_age` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""customer_age"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""customer_age"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'supplier_email': Ensure the field matches the type 'text'. Validate that all values conform to the standard email format using a regex pattern.,"expect_column_values_to_be_of_type(column=""supplier_email"", type_=""text""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_of_type(column=""supplier_email"", type_=""text""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",0.7741935483870968,0.7333333333333334,0.7741935483870968,79.63330732734485
For field 'message_content': Ensure the field matches the type 'text'. Ensure this field cannot be null.,"expect_column_values_to_not_be_null(column=""message_content""),expect_column_values_to_be_of_type(column=""message_content"", type_=""text"")","expect_column_values_to_be_of_type(column=""message_content"", type_=""text""),expect_column_values_to_not_be_null(column=""message_content"")",1.0,0.9523809523809523,0.7272727272727273,99.48584414934561
Check that the sum of the `amount_sent` and `amount_received` columns equals the value in the `total_balance` column.,"expect_multicolumn_sum_to_equal(column_list=[""amount_sent"", ""amount_received""], sum_value=""total_balance"")","expect_multicolumn_sum_to_equal(column_a=""amount_sent"", column_b=""amount_received"", column_sum=""total_balance"")",0.8125,0.5333333333333333,0.8125,63.206156621634825
"Check that the `location` JSON column adheres to the defined schema, containing fields: `city`, `country`, and `latitude`.","expect_column_values_to_match_json_schema(column=""location"", schema={""type"": ""object"", ""properties"": {""city"": {""type"": ""string""}, ""country"": {""type"": ""string""}, ""latitude"": {""type"": ""number""}}})","expect_column_values_to_match_json_schema(column=""location"", schema={""type"": ""object"", ""properties"": {""city"": {""type"": ""string""}, ""country"": {""type"": ""string""}, ""latitude"": {""type"": ""string""}}})",0.9545454545454546,0.9523809523809523,0.9545454545454546,96.78317907712602
In the `inventory_count` column: Validate that the mean value is greater than zero and all entries are integers.,"expect_column_mean_to_be_between(column=""inventory_count"", min_value=0.01),expect_column_values_to_be_of_type(column=""inventory_count"", type_=""int"")","expect_column_mean_to_be_greater_than(column=""inventory_count"", value=0),expect_column_values_to_be_of_type(column=""inventory_count"", type_=""int"")",0.8979591836734694,0.7659574468085107,0.8979591836734694,84.94412039940656
Ensure the `enrollment_count` column has values that are greater than or equal to 0 and the average enrollment count does not exceed 100.,"expect_column_values_to_be_between(column=""enrollment_count"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""enrollment_count"", min_value=None, max_value=100)","expect_column_values_to_be_between(column=""enrollment_count"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""enrollment_count"", min_value=None, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For field 'payment_status': Ensure values in 'payment_status' must exist in the set ('paid', 'unpaid', 'overdue'). Ensure this field exists.","expect_column_to_exist(column=""payment_status""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'unpaid', 'overdue'])","expect_column_to_exist(column=""payment_status""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=[""paid"", ""unpaid"", ""overdue""])",1.0,1.0,1.0,78.70039865008152
For the `last_active`: Ensure all datetime entries are in the format 'YYYY-MM-DD HH:MM:SS' and represent past dates.,"expect_column_values_to_match_strftime_format(column=""last_active"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""last_active""),expect_column_values_to_be_between(column=""last_active"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_match_strftime_format(column=""last_active"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_between(column=""last_active"", min_value=""1900-01-01 00:00:00"", max_value=""now"")",0.8095238095238095,0.7804878048780488,0.8095238095238095,71.83947596905868
"For the `sample_size` column, confirm that values are greater than or equal to `30`.","expect_column_values_to_be_greater_than(column=""sample_size"", value=30)","expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=None)",0.7407407407407408,0.56,0.7407407407407408,57.5770372037386
Check that the `delivery_date` column contains dates that are not in the past and are formatted as 'YYYY-MM-DD'.,"expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""delivery_date"", min_value=datetime.datetime.now().date(), max_value=datetime.datetime.max.date())","expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")",0.647887323943662,0.5797101449275363,0.647887323943662,37.76068966069367
For field 'temperature_reading': Ensure the field matches the type 'float'. Ensure values in (temperature_reading) are within the range of -40 to 125 degrees Celsius. Ensure this field exists.,"expect_column_to_exist(column=""temperature_reading""),expect_column_values_to_be_of_type(column=""temperature_reading"", type_=""float""),expect_column_values_to_be_between(column=""temperature_reading"", min_value=-40, max_value=125)","expect_column_to_exist(column=""temperature_reading""),expect_column_values_to_be_of_type(column=""temperature_reading"", type_=""float""),expect_column_values_to_be_between(column=""temperature_reading"", min_value=-40, max_value=125),  # Replace 125 with ""max_value=125"" if you wish to support larger temperatures.",0.8395061728395062,0.8354430379746834,0.8395061728395062,79.4841333801921
"Confirm that the `payment_status` column contains only distinct values from the set: ['Paid', 'Pending', 'Cancelled'].","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Cancelled'])","expect_column_distinct_values_to_equal_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Cancelled'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
Ensure the `voter_id` column contains only unique values. It must not allow null entries and should match the type 'integer'.,"expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""int"")","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""int"")lásil",0.96875,0.967741935483871,0.96875,98.62035921447831
"Validate that the `genre` column only contains values from the predefined set `['Action', 'Drama', 'Comedy', 'Documentary']`.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy', 'Documentary'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy', 'Documentary'])",1.0,1.0,1.0,100.00000000000004
For field 'barcode': Ensure the field matches the type 'text'. Ensure this field contains unique values and matches a specific pattern of 12 digits.,"expect_column_values_to_be_of_type(column=""barcode"", type_=""text""),expect_column_values_to_be_unique(column=""barcode""),expect_column_values_to_match_regex(column=""barcode"", regex=r""^\d{12}$"")","expect_column_values_to_be_of_type(column=""barcode"", type_=""text""),expect_column_values_to_be_unique(column=""barcode""),expect_column_values_to_match_regex(column=""barcode"", regex=r""^(\d{12}$)"")",1.0,1.0,1.0,93.87954997857277
Validate that the `course_code` field matches the predefined format `^[A-Z]{3}-[0-9]{3}$`.,"expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `last_activity` column contains valid JSON objects that adhere to the specified schema including `activity_type` and `timestamp`.,"expect_column_values_to_be_json_parseable(column=""last_activity""),expect_column_values_to_match_json_schema(column=""last_activity"", schema={""type"": ""object"", ""properties"": {""activity_type"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""last_activity"", schema={""type"": ""object"", ""properties"": {""activity_type"": {""type"": ""string"", ""required"": True}, ""timestamp"": {""type"": ""string"", ""format"": ""date-time""}}})",0.7368421052631579,0.6909090909090909,0.7368421052631579,72.83474275571801
"For the `candidate_id` column, verify that all values are present in the set of known candidate identifiers.","expect_column_values_to_be_in_set(column=""candidate_id"", value_set=known_candidate_identifiers)","expect_column_values_to_be_in_set(column=""candidate_id"", value_set=known_candidate_identifiers)",1.0,1.0,1.0,100.00000000000004
"For field 'status': Ensure this field exists. Ensure values in 'status' must match the set ('Sent', 'Draft', 'Failed').","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Sent"", ""Draft"", ""Failed""])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Sent', 'Draft', 'Failed'])",1.0,1.0,1.0,76.74541314887128
For the `salary` field: Ensure the minimum value is greater than 0. Ensure this field matches the type 'float'.,"expect_column_min_to_be_between(column=""salary"", min_value=0.01),expect_column_values_to_be_of_type(column=""salary"", type_=""float"")","expect_column_min_to_be_between(column=""salary"", min_value=0),expect_column_values_to_be_of_type(column=""salary"", type_=""float"")",0.9777777777777777,0.9302325581395349,0.9777777777777777,94.96952283401922
For field 'ip_address': Ensure this field exists. Validate that (ip_address) matches the regex pattern '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'.,"expect_column_to_exist(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"")","expect_column_to_exist(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\.$|25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\.$|25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\.$|25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]$"")",1.0,1.0,1.0,89.41374292828063
For field 'diagnosis_code': Ensure the field matches the type 'text'. Ensure values in (diagnosis_code) must exist in the valid codes list. Ensure this field is distinct within the dataset.,"expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_codes_list),expect_column_values_to_be_unique(column=""diagnosis_code"")","expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_codes_list),expect_column_values_to_be_unique(column=""diagnosis_code"")",1.0,1.0,1.0,100.00000000000004
Check that the `usage_kwh` column contains values greater than or equal to zero.,"expect_column_values_to_be_between(column=""usage_kwh"", min_value=0)","expect_column_values_to_be_greater_than(column=""usage_kwh"", value=0)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
For field 'user_id': Ensure this field is required (not null) and matches the format of a unique identifier. Ensure values in (user_id) are unique.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""text"")",0.76,0.7499999999999999,0.76,58.02798126835858
For field 'transaction_date': Ensure the field matches the type 'date'. Ensure values in (transaction_date) are within the range of the last 5 years.,"expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2018-01-01"", max_value=""2023-01-01"")","expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2017-10-01"", max_value=""2022-10-01"")",0.8709677419354839,0.8000000000000002,0.8709677419354839,88.1104497789895
For the `weather_condition` field: Ensure the most common value occurs at least `30%` of the time within the dataset.,"expect_column_proportion_of_unique_values_to_be_between(column=""weather_condition"", min_value=0.3, max_value=1.0)","expect_column_mode_to_equal(column=""weather_condition"", value=""rain"")  # Change as needed based on your dataset.",0.37837837837837834,0.17142857142857143,0.37837837837837834,31.89010933681789
"For field 'severity_level': Ensure the field matches the type 'text' and contains values from the set `['Low', 'Medium', 'High']`.","expect_column_values_to_be_of_type(column=""severity_level"", type_=""text""),expect_column_values_to_be_in_set(column=""severity_level"", value_set=['Low', 'Medium', 'High'])","expect_column_values_to_be_of_type(column=""severity_level"", type_=""text""),expect_column_values_to_be_in_set(column=""severity_level"", value_set=['Low', 'Medium', 'High'])",1.0,1.0,1.0,100.00000000000004
"For the `listing_price` column: Verify that the minimum price is above $0 and that the average price does not exceed $500,000.","expect_column_min_to_be_between(column=""listing_price"", min_value=0.01),expect_column_mean_to_be_between(column=""listing_price"", min_value=0, max_value=500000)","expect_column_min_to_be_between(column=""listing_price"", min_value=0),expect_column_mean_to_be_between(column=""listing_price"", max_value=500000)",0.923076923076923,0.84,0.923076923076923,85.25202188303582
Confirm that the `monthly_fee` column has values that are greater than zero and correctly formatted as decimal numbers.,"expect_column_values_to_be_greater_than(column=""monthly_fee"", threshold=0),expect_column_values_to_match_regex(column=""monthly_fee"", regex=r""^\d+(\.\d{1,2})?$"")","expect_column_values_to_be_greater_than(column=""monthly_fee"", value=0),expect_column_values_to_be_of_type(column=""monthly_fee"", type_=""float"")",0.7058823529411765,0.6122448979591837,0.7058823529411765,58.756814712252066
Ensure the `timestamp` field is of type 'datetime' and contains no missing values.,"expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_not_be_null(column=""timestamp"")","expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_not_be_null(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
For the `email` field: Ensure it follows a valid email format and contains unique values. Confirm the field is required.,"expect_column_to_exist(column=""email""),expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_to_exist(column=""email""),expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_between(column=""email"", min_value=None, max_value="""")  # Optional: you can also check min and max values if needed.",0.8190476190476191,0.7766990291262135,0.8,77.10349975003358
Ensure that the `release_year` column only contains integer values between 2000 and the current year.,"expect_column_values_to_be_between(column=""release_year"", min_value=2000, max_value=2023)","expect_column_values_to_be_between(column=""release_year"", min_value=2000, max_value=2023),expect_column_values_to_be_of_type(column=""release_year"", type_=""int"")",0.7142857142857143,0.7000000000000001,0.7142857142857143,50.38793199614183
"Ensure that the `player_position` column values match at least one from the list `['Forward', 'Midfielder', 'Defender']`.","expect_column_values_to_be_in_set(column=""player_position"", value_set=['Forward', 'Midfielder', 'Defender'])","expect_column_values_to_be_in_set(column=""player_position"", value_set=['Forward', 'Midfielder', 'Defender'])",1.0,1.0,1.0,100.00000000000004
"For field 'candidate_votes': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure 'candidate_votes' is within the range of 0 to 1,000,000.","expect_column_values_to_not_be_null(column=""candidate_votes""),expect_column_values_to_be_of_type(column=""candidate_votes"", type_=""int""),expect_column_values_to_be_between(column=""candidate_votes"", min_value=0, max_value=1000000)","expect_column_values_to_not_be_null(column=""candidate_votes""),expect_column_values_to_be_of_type(column=""candidate_votes"", type_=""integer""),expect_column_values_to_be_between(column=""candidate_votes"", min_value=0, max_value=1000000)",0.972972972972973,0.9444444444444444,0.972972972972973,96.97770291819575
For field 'guest_count': Ensure the field matches the type 'numeric'. Ensure values in (guest_count) are within the range of 1 to 10. Ensure this field exists.,"expect_column_to_exist(column=""guest_count""),expect_column_values_to_be_of_type(column=""guest_count"", type_=""numeric""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10)","expect_column_to_exist(column=""guest_count""),expect_column_values_to_be_of_type(column=""guest_count"", type_=""numeric""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
Ensure the `order_timestamp` column is in the format 'YYYY-MM-DD HH:MM:SS' and all entries are valid datetime values.,"expect_column_values_to_match_strftime_format(column=""order_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""order_timestamp"")","expect_column_to_exist(column=""order_timestamp""),expect_column_values_to_be_of_type(column=""order_timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""order_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.7999999999999999,0.7301587301587301,0.5538461538461539,67.7218559575729
"For the `customer_email` field, validate that all entries conform to standard email formats and are unique across the dataset.","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")",1.0,1.0,1.0,100.00000000000004
Validate that the `subject_line` column does not exceed 78 characters in length for all entries.,"expect_column_value_lengths_to_be_between(column=""subject_line"", min_value=0, max_value=78)","expect_column_value_lengths_to_be_between(column=""subject_line"", min_value=0, max_value=78)",1.0,1.0,1.0,100.00000000000004
"For the `metadata` JSON column: Validate that it conforms to the required schema, ensuring it includes fields `type`, `timestamp`, and `details`.","expect_column_values_to_match_json_schema(column=""metadata"", schema={""type"": ""object"", ""properties"": {""type"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}, ""details"": {""type"": ""object""}}})","expect_column_values_to_match_json_schema(column=""metadata"", schema={""type"": ""object"", ""properties"": {""type"": ""string"", ""value"": ""metadata"", ""timestamp"": ""timestamp"", ""details"": ""details""} })",0.7906976744186046,0.6829268292682926,0.7906976744186046,67.66378357134047
Check that the `grade` column contains only numeric values between `0` and `100`.,"expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""grade"", type_=""numeric"")","expect_column_values_to_be_of_type(column=""grade"", type_=""float""),expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)",0.96,0.9166666666666666,0.56,94.5887163699136
For field 'claim_amount': Ensure the field is required (not null). Ensure the field matches the type 'decimal'. Ensure this field exists.,"expect_column_to_exist(column=""claim_amount""),expect_column_values_to_not_be_null(column=""claim_amount""),expect_column_values_to_be_of_type(column=""claim_amount"", type_=""decimal"")","expect_column_to_exist(column=""claim_amount""),expect_column_values_to_not_be_null(column=""claim_amount""),expect_column_values_to_be_of_type(column=""claim_amount"", type_=""decimal"")",1.0,1.0,1.0,100.00000000000004
"Check that the `platform` column only contains values from the set `['PC', 'Console', 'Mobile']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Console', 'Mobile'])",1.0,1.0,1.0,100.00000000000004
For field 'customer_email': Ensure the expect column value lengths to be between; Ensure this field matches the format 'email' and is required (not null).,"expect_column_value_lengths_to_be_between(column=""customer_email"", min_value=5, max_value=254),expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_value_lengths_to_be_between(column=""customer_email"", min_value=4, max_value=60),expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9382716049382716,0.8860759493670887,0.9382716049382716,90.32331315154943
Ensure the 'game_date' column follows the format 'YYYY-MM-DD'. Validate that all dates can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date"")","expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date"")",1.0,1.0,1.0,100.00000000000004
"For the `transaction_date` field, validate that all entries are formatted as `YYYY-MM-DD` and fall within the last 12 months.","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")  # This will ensure they are valid dates.,# Additional validation for the date range would typically require a custom expectation or logic outside the specified expectations. ","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")",0.5476190476190477,0.5121951219512195,0.5476190476190477,59.818489462133925
Ensure the `match_date` column contains only dates that are within the last two years.,"expect_column_values_to_be_between(column=""match_date"", min_value=""2021-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""match_date""),expect_column_values_to_be_between(column=""match_date"", min_value=""2019-01-01"", max_value=""2021-01-01"")",0.6666666666666666,0.5652173913043479,0.625,54.29733705714126
"In the `genre` column: Ensure that values exist within the set `['Drama', 'Comedy', 'Action', 'Horror']`. No other genres should be present.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Drama', 'Comedy', 'Action', 'Horror'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Drama', 'Comedy', 'Action', 'Horror']),expect_column_values_to_not_be_in_set(column=""genre"", value_set=['Horror', 'Action', 'Comedy'])",0.6666666666666666,0.6511627906976745,0.6666666666666666,48.12624158924925
Ensure the `total_price` field contains only positive decimal values. No null or negative values should be present.,"expect_column_values_to_be_between(column=""total_price"", min_value=0.01, max_value=None),expect_column_values_to_not_be_null(column=""total_price"")","expect_column_values_to_be_between(column=""total_price"", min_value=0, max_value=None)",0.7317073170731707,0.6666666666666666,0.7317073170731707,44.62815944987289
For the `release_date` field: Confirm that all dates are in the past and formatted as 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_increasing(column=""release_date"")","expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")",0.9295774647887325,0.8695652173913043,0.619718309859155,86.0656123850201
"For the field 'subscription_type': Ensure this field exists and matches the type 'text'. Validate that values must be one of ['Prepaid', 'Postpaid'].","expect_column_to_exist(column=""subscription_type""),expect_column_values_to_be_of_type(column=""subscription_type"", type_=""text""),expect_column_values_to_be_in_set(column=""subscription_type"", value_set=[""Prepaid"", ""Postpaid""])","expect_column_to_exist(column=""subscription_type""),expect_column_values_to_be_of_type(column=""subscription_type"", type_=""text""),expect_column_values_to_be_in_set(column=""subscription_type"", value_set=[""Prepaid"", ""Postpaid""])",1.0,1.0,1.0,100.00000000000004
Data quality requirements for field 'order_id': duplicate_count(order_id) = 0.,"expect_column_values_to_be_unique(column=""order_id"")","expect_column_values_to_be_unique(column=""order_id"")",1.0,1.0,1.0,100.00000000000004
For field `discount_percentage`: Ensure values are within the range of 0 to 100. Ensure this field does not contain null values.,"expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""discount_percentage"")","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""discount_percentage"")",1.0,1.0,1.0,100.00000000000004
"Check that the distribution of `player_age` follows a normal distribution with a mean between 20 and 30, p-value > 0.05.","expect_column_mean_to_be_between(column=""player_age"", min_value=20, max_value=30),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""player_age"", threshold=0.05)","expect_column_mean_to_be_between(column=""player_age"", min_value=20, max_value=30),expect_column_chisquare_test_p_value_to_be_greater_than(column=""player_age"", threshold=0.05)",0.9374999999999999,0.9032258064516129,0.9374999999999999,90.28290404921721
Ensure the `zipcode` column matches a valid US ZIP code format using the regular expression pattern `^\d{5}(-\d{4})?$`.,"expect_column_values_to_match_regex(column=""zipcode"", regex=r""^\d{5}(-\d{4})?$"")","expect_column_values_to_match_regex(column=""zipcode"", regex=r""^\\d{5}(-\\d{4})?$"")",1.0,1.0,1.0,91.13722974028045
Ensure the `transaction_amount` column passes the Chi-Square test with a p-value greater than 0.05 and that all values are positive.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=None)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
For field 'release_date': Ensure this field matches the type 'date'. Ensure all entries are not null and are before the current date.,"expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_be_less_than(column=""release_date"", value=current_date)","expect_column_to_exist(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_be_less_than(column=""release_date"", value=current_date())",0.9090909090909091,0.9066666666666667,0.9090909090909091,79.94036159353479
For the `csv_data` file: Validate that it contains a header row and that the number of lines does not exceed `1000`.,"expect_file_to_have_valid_table_header(file=""csv_data""),expect_file_line_regex_match_count_to_be_between(file=""csv_data"", min_value=1, max_value=1000)","expect_file_to_have_table_header(),expect_table_row_count_to_be_between(min_value=1, max_value=1000)",0.7234042553191489,0.5333333333333333,0.7234042553191489,46.080137699743204
"For field 'employment_status': Ensure the field matches the type 'text'. Ensure values in (employment_status) must exist in the set ('employed', 'unemployed', 'student', 'retired'). Ensure this field exists.","expect_column_to_exist(column=""employment_status""),expect_column_values_to_be_of_type(column=""employment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""employment_status"", value_set=[""employed"", ""unemployed"", ""student"", ""retired""])","expect_column_to_exist(column=""employment_status""),expect_column_values_to_be_of_type(column=""employment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""employment_status"", value_set=['employed', 'unemployed','student','retired'])",1.0,1.0,1.0,82.39217494528323
"Verify that the `status` column contains values exclusively from the set `['Active', 'Inactive', 'Pending']`.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Active"", ""Inactive"", ""Pending""])","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Pending'])",1.0,1.0,1.0,66.93976514189524
For the `customer_id` field: Ensure all entries are unique and of type integer. Validate that this field cannot be null.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
Check that the `attendance` column has a mean value greater than 1000 and a maximum value not exceeding 50000.,"expect_column_mean_to_be_between(column=""attendance"", min_value=1000),expect_column_max_to_be_between(column=""attendance"", max_value=50000)","expect_column_mean_to_be_between(column=""attendance"", min_value=1000),expect_column_max_to_be_between(column=""attendance"", max_value=50000)",1.0,1.0,1.0,100.00000000000004
"For the `category` column: Ensure values match one of the predefined categories `['Electronics', 'Apparel', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `battery_level` column values are between 0 and 100, and the standard deviation does not exceed 10.","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""battery_level"", min_value=0, max_value=10)","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""battery_level"", min_value=None, max_value=10)",0.9666666666666667,0.9310344827586207,0.9666666666666667,96.0132862288073
For field 'transaction_date': Ensure all dates are in the format 'YYYY-MM-DD' and fall within the last 12 months. No null values are allowed.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2022-10-01"", max_value=""today"")  # assuming today is 12 months from the current date",0.7843137254901961,0.72,0.7647058823529412,76.01554827620647
Check that the sum of `success_count` and `failure_count` columns equals the total `sample_size`.,"expect_multicolumn_sum_to_equal(column_list=[""success_count"", ""failure_count""], target_column=""sample_size"")","expect_multicolumn_sum_to_equal(column_list=[""success_count"", ""failure_count""], target_column=""total_sample_size"")",0.967741935483871,0.896551724137931,0.967741935483871,90.76141716697397
For column 'forecast_date': Ensure all datetime entries conform to the format 'YYYY-MM-DD'. Verify that this column exists in the dataset.,"expect_column_to_exist(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` column contains only unique values and is of type 'integer'.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int"")",0.9523809523809523,0.9500000000000001,0.9523809523809523,95.30451753349615
Check that the `hearing_date` values are arranged in increasing order and follow the 'YYYY-MM-DD' format. Ensure no dates are missing.,"expect_column_values_to_be_increasing(column=""hearing_date""),expect_column_values_to_match_strftime_format(column=""hearing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""hearing_date"")","expect_column_values_to_be_increasing(column=""hearing_date""),expect_column_values_to_match_strftime_format(column=""hearing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""hearing_date"")",1.0,1.0,1.0,100.00000000000004
For the `transaction_value` column: Validate that all values are greater than zero and the median value is at least $50.,"expect_column_values_to_be_greater_than(column=""transaction_value"", value=0),expect_column_median_to_be_between(column=""transaction_value"", min_value=50, max_value=None)","expect_column_values_to_be_between(column=""transaction_value"", min_value=0, max_value=None),expect_column_median_to_be_between(column=""transaction_value"", min_value=50)",0.9259259259259259,0.7692307692307693,0.8148148148148148,84.17070370178385
Validate that the `court_date` is always later than the `filing_date` for each case.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""court_date"", column_B=""filing_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""court_date"", column_B=""filing_date"")",1.0,1.0,1.0,100.00000000000004
For field 'square_footage': Ensure the field matches the type 'numeric'. Ensure values in (square_footage) are within the range of 500 to 50000. Ensure this field exists.,"expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_of_type(column=""square_footage"", type_=""numeric""),expect_column_values_to_be_between(column=""square_footage"", min_value=500, max_value=50000)","expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_of_type(column=""square_footage"", type_=""numeric""),expect_column_values_to_be_between(column=""square_footage"", min_value=500, max_value=50000)",1.0,1.0,1.0,100.00000000000004
Validate that the `customer_feedback` column strings are limited to 250 characters and contain no profanity as defined in the banned words list.,"expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=250),expect_column_values_to_not_match_regex_list(column=""customer_feedback"", regex_list=[r""\b(profane_word1|profane_word2|profane_word3)\b""])  # Replace with actual profane words from the banned words list.","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=1, max_value=250),expect_column_values_to_match_regex_list(column=""customer_feedback"", regex_list=banned_words_list)",0.759493670886076,0.6753246753246753,0.759493670886076,55.298614515900866
For the `bedrooms` column: Ensure all values are integers and within the range of 1 to 10. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bedrooms"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""bedrooms"")","expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bedrooms"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""bedrooms"")",1.0,1.0,1.0,100.00000000000004
"For the `properties` table, verify that the `date_listed` is within the current year and that no rows have a `date_sold` earlier than `date_listed`.","expect_column_values_to_be_between(column=""date_listed"", min_value=""2023-01-01"", max_value=""2023-12-31""),expect_column_pair_values_to_be_equal(column_A=""date_listed"", column_B=""date_sold"")","expect_column_values_to_be_dateutil_parseable(column=""date_listed""),expect_column_values_to_be_between(column=""date_listed"", min_value=""2023-01-01"", max_value=""current_date""),expect_column_pair_values_to_be_equal(column_A=""date_listed"", column_B=""date_sold"")",0.8051948051948051,0.7733333333333333,0.8051948051948051,72.05009222981033
"Ensure that the `status` column contains only the values `['active', 'inactive', 'suspended']`.","expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive"", ""suspended""])","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive','suspended'])",1.0,1.0,1.0,66.93976514189524
For field 'course_code': Ensure values in 'course_code' must exist in the predefined course catalog. Ensure this field exists.,"expect_column_to_exist(column=""course_code""),expect_column_values_to_be_in_set(column=""course_code"", value_set=predefined_course_catalog)","expect_column_to_exist(column=""course_code""),expect_column_values_to_be_in_set(column=""course_code"", value_set=predefined_course_catalog)",1.0,1.0,1.0,100.00000000000004
For field 'candidate_id': Ensure the field matches the type 'text'. Ensure values in (candidate_id) must exist in candidates (candidate_list).,"expect_column_values_to_be_of_type(column=""candidate_id"", type_=""text""),expect_column_values_to_be_in_set(column=""candidate_id"", value_set=candidate_list)","expect_column_values_to_be_of_type(column=""candidate_id"", type_=""text""),expect_column_values_to_be_in_set(column=""candidate_id"", value_set=candidates)",0.9803921568627451,0.9795918367346939,0.9803921568627451,93.60256079929357
Verify that the `purchase_date` column has no future dates and all entries are within the last 5 years.,"expect_column_values_to_be_between(column=""purchase_date"", min_value=""2018-10-01"", max_value=""2023-10-01""),expect_column_values_to_be_decreasing(column=""purchase_date"")","expect_column_values_to_be_dateutil_parseable(column=""purchase_date""),expect_column_values_to_be_between(column=""purchase_date"", min_value=""2017-10-01"", max_value=""2022-10-01"")  # assuming last purchase date is from 2017 to 2022.",0.7575757575757577,0.625,0.5757575757575758,72.60847826072595
Check that the `voluntary_exit` column contains only boolean values (True/False).,"expect_column_values_to_be_of_type(column=""voluntary_exit"", type_=""bool"")","expect_column_values_to_be_of_type(column=""voluntary_exit"", type_=""boolean"")",0.9166666666666666,0.9090909090909091,0.9166666666666666,91.63140145331569
Ensure the `diagnosis_code` column contains values from the specified set of valid codes.,"expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_codes_set)","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=[valid_code1, valid_code2,...])",0.8387096774193549,0.8275862068965518,0.8387096774193549,66.56270157957682
Check that the `age` column in the `participants` table contains values that are integers greater than 18 and less than 100.,"expect_column_values_to_be_between(column=""age"", min_value=19, max_value=99)","expect_column_values_to_be_between(column=""age"", min_value=18, max_value=99)",0.9285714285714286,0.8461538461538461,0.9285714285714286,90.9593063222022
Ensure the `check_in_date` and `check_out_date` columns follow the format 'YYYY-MM-DD' and that the `check_out_date` is after the `check_in_date`.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""check_out_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")","expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""check_out_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")",1.0,1.0,1.0,100.00000000000004
"For the field `assignment_submissions`, ensure that the JSON objects conform to the specified schema including fields for `submission_time` and `grade`.","expect_column_values_to_match_json_schema(column=""assignment_submissions"", schema={""type"": ""object"", ""properties"": {""submission_time"": {""type"": ""string"", ""format"": ""date-time""}, ""grade"": {""type"": ""number""}}})","expect_column_values_to_match_json_schema(column=""assignment_submissions"", schema={""type"": ""object"", ""properties"": {""submission_time"": {""type"": ""string""}, ""grade"": {""type"": ""number""}}})",0.9333333333333333,0.8837209302325583,0.9333333333333333,88.19977066878931
"For the `device_id` column, confirm that all entries exist in the `devices` reference table. Validate that the `last_seen` timestamp is always more recent than the `first_seen` timestamp.","expect_column_values_to_be_in_set(column=""device_id"", value_set=devices_reference_table),expect_column_pair_values_A_to_be_greater_than_B(column_A=""last_seen"", column_B=""first_seen"")","expect_column_values_to_be_in_set(column=""device_id"", value_set=devices),expect_column_pair_values_A_to_be_greater_than_B(column_A=""last_seen"", column_B=""first_seen"")",0.96875,0.9354838709677419,0.96875,92.23033216868352
For field 'ip_address': Ensure the field matches the type 'text'. Ensure the field matches the format 'IPv4'. Ensure this field exists.,"expect_column_to_exist(column=""ip_address""),expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){2}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"")","expect_column_to_exist(column=""ip_address""),expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(\d{1,3}\.){3}\d{1,3}$"")",0.5607476635514019,0.5523809523809524,0.5607476635514019,28.28290456607565
Ensure the `hire_date` column contains dates that are not in the future.,"expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_in_set(column=""hire_date"", value_set=[...])  # A comparison to the current date would be implemented in your data validation logic.","expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"", max_value=""current_date"")",0.6562499999999999,0.5483870967741936,0.6562499999999999,58.11529255243146
"For field `weather_conditions`: Ensure the field is required (not null). Validate that `weather_conditions` values are limited to ['Sunny', 'Rainy', 'Cloudy', 'Snowy'].","expect_column_values_to_not_be_null(column=""weather_conditions""),expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_values_to_not_be_null(column=""weather_conditions""),expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",1.0,1.0,1.0,100.00000000000004
"For the `energy_source` column, ensure that it only includes values from the list `['Solar', 'Wind', 'Hydro', 'Gas']`. Check for uniqueness and non-null entries.","expect_column_values_to_be_in_set(column=""energy_source"", value_set=['Solar', 'Wind', 'Hydro', 'Gas']),expect_column_values_to_not_be_null(column=""energy_source""),expect_column_values_to_be_unique(column=""energy_source"")","expect_column_values_to_be_in_set(column=""energy_source"", value_set=['Solar', 'Wind', 'Hydro', 'Gas']),expect_column_values_to_be_unique(column=""energy_source""),expect_column_values_to_not_be_null(column=""energy_source"")",1.0,1.0,0.9142857142857143,100.00000000000004
Ensure the `comment_count` column contains only non-negative integers and that the total across all posts is unique.,"expect_column_values_to_be_of_type(column=""comment_count"", type_=""int""),expect_column_values_to_be_between(column=""comment_count"", min_value=0, max_value=None),expect_column_unique_value_count_to_be_between(column=""comment_count"", min_value=1, max_value=None)","expect_column_values_to_be_between(column=""comment_count"", min_value=0, max_value=None),expect_column_unique_values_to_be_between(column=""comment_count"", min_value=1, max_value=None)",0.8266666666666667,0.8219178082191781,0.8266666666666667,61.29786566523946
"Check that the average `product_rating` falls within the range [1, 5] and follows a normal distribution.","expect_column_mean_to_be_between(column=""product_rating"", min_value=1, max_value=5),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""product_rating"", threshold=0.05)","expect_column_mean_to_be_between(column=""product_rating"", min_value=1, max_value=5),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""product_rating"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `start_date` column values are less than or equal to the `end_date` column values.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""start_date"", column_B=""end_date"")","expect_column_values_to_be_less_than(column=""start_date"", value=""end_date"")",0.7741935483870968,0.41379310344827586,0.7741935483870968,52.726606567984156
For the `user_id` column: Ensure that each value exists in the `users` table and is not duplicated within this dataset.,"expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_user_ids),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_users_ids),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,95.25618205602056
Ensure the `salary` field contains numeric values greater than or equal to 30000.,"expect_column_values_to_be_between(column=""salary"", min_value=30000)","expect_column_values_to_be_greater_than(column=""salary"", value=30000)",0.8181818181818182,0.6,0.8181818181818182,72.71042103011655
For the `guest_count` field: Ensure values are greater than 0. Ensure this field matches the type 'integer'.,"expect_column_values_to_be_greater_than(column=""guest_count"", value=0),expect_column_values_to_be_of_type(column=""guest_count"", type_=""int"")","expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""guest_count"", type_=""int"")",0.823529411764706,0.693877551020408,0.823529411764706,76.51687298610683
For field `claim_date`: Validate that the date format is 'YYYY-MM-DD' and that the claim date is not in the future.,"expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""claim_date""),expect_column_values_to_be_less_than(column=""claim_date"", value=""today"")","expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""claim_date"", value=""future_date"")",0.8307692307692307,0.7936507936507936,0.7999999999999999,69.89238755240426
For field 'timestamp': Ensure the field matches the type 'timestamp'. Validate that values in (timestamp) are within the last 24 hours.,"expect_column_values_to_be_of_type(column=""timestamp"", type_=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=(datetime.now() - timedelta(days=1)).timestamp(), max_value=datetime.now().timestamp())","expect_column_values_to_be_of_type(column=""timestamp"", type_=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=""2022-11-05T16:00:00+00:00"", max_value=""2022-11-06T16:00:00+00:00"")",0.6666666666666667,0.626865671641791,0.6666666666666667,62.03839541131825
Ensure the `player_count` column contains only integers within the range of 1 to 100.,"expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=100),expect_column_values_to_be_of_type(column=""player_count"", type_=""int"")","expect_column_values_to_be_of_type(column=""player_count"", type_=""int""),expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=100)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
Ensure the `policy_number` column contains only distinct values and does not allow nulls.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `response_time` values have a median less than or equal to 24 hours.,"expect_column_median_to_be_between(column=""response_time"", min_value=None, max_value=24*60*60)","expect_column_median_to_be_between(column=""response_time"", lower_bound=0, upper_bound=24 * 60 * 60)  # 24 hours in seconds",0.6315789473684211,0.5555555555555556,0.6315789473684211,62.64540126590716
"For the `property_type` column: Ensure values are from the set ['Apartment', 'Condo', 'House']. Confirm this field exists.","expect_column_to_exist(column=""property_type""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'Condo', 'House'])","expect_column_to_exist(column=""property_type""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'Condo', 'House'])",1.0,1.0,1.0,100.00000000000004
Verify that the `energy_consumption` values are within the range of 0 to 10000 kilowatt-hours and are not null.,"expect_column_values_to_be_between(column=""energy_consumption"", min_value=0, max_value=10000),expect_column_values_to_not_be_null(column=""energy_consumption"")","expect_column_values_to_be_between(column=""energy_consumption"", min_value=0, max_value=10000),expect_column_values_to_not_be_null(column=""energy_consumption"")",1.0,1.0,1.0,100.00000000000004
For the `block_number` field: Ensure that values are arranged in increasing order and are of type 'integer'.,"expect_column_values_to_be_increasing(column=""block_number""),expect_column_values_to_be_of_type(column=""block_number"", type_=""int"")","expect_column_values_to_be_increasing(column=""block_number""),expect_column_values_to_be_of_type(column=""block_number"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Verify that the distribution of `post_engagement` follows a normal distribution with a mean close to the expected value.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""post_engagement"", threshold=0.05),expect_column_mean_to_be_between(column=""post_engagement"", min_value=expected_mean - tolerance, max_value=expected_mean + tolerance)","expect_column_mean_to_be_between(column=""post_engagement"", min_value=expected_mean_value, max_value=expected_mean_value + threshold_value),expect_column_pearsonr_test_p_value_to_be_greater_than(column=""post_engagement"", threshold=threshold_value)  # Replace threshold_value with the actual threshold value.",0.7317073170731707,0.65,0.41463414634146345,68.6150304663692
For the `tracking_number` column: Ensure that all values are exactly `12` characters long and conform to the regular expression `^[0-9A-Z]{12}$`.,"expect_column_value_lengths_to_equal(column=""tracking_number"", length=12),expect_column_values_to_match_regex(column=""tracking_number"", regex=r""^[0-9A-Z]{12}$"")","expect_column_values_to_match_regex(column=""tracking_number"", regex=r""^[0-9A-Z]{12}$"")",0.7317073170731707,0.717948717948718,0.7317073170731707,49.93517885992764
"For field 'room_type': Ensure this field exists. Validate that values match at least one pattern from the list: ['single', 'double', 'suite'].","expect_column_to_exist(column=""room_type""),expect_column_values_to_match_like_pattern_list(column=""room_type"", pattern_list=['single', 'double', 'suite'])","expect_column_to_exist(column=""room_type""),expect_column_values_to_match_regex_list(column=""room_type"", regex_list=[""single"", ""double"", ""suite""])",0.888888888888889,0.7906976744186046,0.888888888888889,69.29529259924863
For field 'email_address': Ensure the expect column value lengths to be between; Ensure this field matches the format 'email' and is required (not null).,"expect_column_value_lengths_to_be_between(column=""email_address"", min_value=5, max_value=254),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_value_lengths_to_be_between(column=""email_address"", min_value=0, max_value=9999),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9382716049382716,0.8860759493670887,0.9382716049382716,90.32331315154943
For field `product_details`: Ensure all entries are valid JSON objects that conform to the specified JSON schema for product information.,"expect_column_values_to_match_json_schema(column=""product_details"", schema=""your_json_schema_here"")","expect_column_values_to_be_json_parseable(column=""product_details"")  # Ensure that column values are valid JSON, but do not enforce type checking or schema validation.  # Note: If specific schema validation is needed for product_details column, please specify the expected JSON schema instead of specifying type=""json"".",0.38095238095238093,0.1967213114754098,0.3492063492063492,23.226023749365243
For columns `login_time` and `logout_time`: Ensure the difference is positive and falls within the expected range of 0 to 24 hours.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""logout_time"", column_B=""login_time""),expect_column_values_to_be_between(column=""logout_time"", min_value=0, max_value=24)","expect_column_pair_values_to_be_greater_than(column_A=""login_time"", column_B=""logout_time""),expect_column_pair_values_to_be_between(column_A=""login_time"", column_B=""logout_time"", min_value=0, max_value=24)",0.9428571428571428,0.7058823529411765,0.8285714285714285,78.03188608773063
For field `supplier_name`: Validate that the length of each entry does not exceed 100 characters and matches the regex pattern for valid supplier names.,"expect_column_value_lengths_to_be_between(column=""supplier_name"", min_value=0, max_value=100),expect_column_values_to_match_regex(column=""supplier_name"", regex=r""^[a-zA-Z0-9\s&.,'-]*$"")","expect_column_value_lengths_to_be_between(column=""supplier_name"", min_value=1, max_value=100),expect_column_values_to_match_regex(column=""supplier_name"", regex=r""^[a-zA-Z\s]+$"")",0.9206349206349206,0.8524590163934426,0.9206349206349206,80.5891682562175
For field 'account_number': Ensure the field is required (not null). Validate that 'account_number' is a 10-digit numeric string. Ensure this field exists.,"expect_column_to_exist(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^\d{10}$"")","expect_column_to_exist(column=""account_number""),expect_column_values_to_be_of_type(column=""account_number"", type_=""int""),expect_column_values_to_not_be_null(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^\d{10}$"")",0.8333333333333333,0.8285714285714285,0.8333333333333333,70.43901004939876
"For the `shipping_cost`, validate that all values are non-negative and do not exceed $200.","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=200)","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=200)",1.0,1.0,1.0,100.00000000000004
Check that the `account_balance` column contains values greater than or equal to 0.,"expect_column_values_to_be_between(column=""account_balance"", min_value=0, max_value=None)","expect_column_values_to_be_greater_than(column=""account_balance"", value=0)",0.7407407407407408,0.56,0.7407407407407408,56.927502664799576
For field 'feedback_comment': Validate that the length of string values in 'feedback_comment' does not exceed 500 characters.,"expect_column_value_lengths_to_be_between(column=""feedback_comment"", min_value=0, max_value=500)","expect_column_value_lengths_to_be_between(column=""feedback_comment"", min_value=1, max_value=500)илася",0.9375,0.8666666666666667,0.9375,89.3524837210697
Verify that the `rating` column contains values within the range of 1 to 10 and does not allow null entries.,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `order_id` column has a one-to-many relationship with the `product_code`. Each `order_id` must relate to multiple `product_code` entries.,"expect_column_pair_values_to_be_equal(column_A=""order_id"", column_B=""product_code"")","expect_column_pair_values_to_be_in_set(column_A=""order_id"", column_B=""product_code"", value_set=[product_code_entry for product_code_entry in PRODUCT_CODES if product_code_entry[""product_code""] in order_id])",0.5384615384615385,0.48,0.5384615384615385,39.64647305196289
"For the `price_per_night` column: Confirm that the values are numeric and fall between $50 and $1,500.","expect_column_values_to_be_of_type(column=""price_per_night"", type_=""numeric""),expect_column_values_to_be_between(column=""price_per_night"", min_value=50, max_value=1500)","expect_column_values_to_be_of_type(column=""price_per_night"", type_=""float""),expect_column_values_to_be_between(column=""price_per_night"", min_value=50, max_value=1500)",0.9655172413793104,0.9285714285714286,0.9655172413793104,96.07590505097875
Ensure the sum of the `budget` and `expenses` columns equals the value in the `total_funding` column for each record.,"expect_multicolumn_sum_to_equal(column_list=[""budget"", ""expenses""], target_column=""total_funding"")","expect_multicolumn_sum_to_equal(column_list=[""budget"", ""expenses""], sum_column=""total_funding"")",0.9230769230769231,0.8333333333333334,0.9230769230769231,92.10500207490826
For field 'sensor_id': Ensure this field exists. Validate that values in (sensor_id) are unique and of type 'text'.,"expect_column_to_exist(column=""sensor_id""),expect_column_values_to_be_unique(column=""sensor_id""),expect_column_values_to_be_of_type(column=""sensor_id"", type_=""text"")","expect_column_to_exist(column=""sensor_id""),expect_column_values_to_be_of_type(column=""sensor_id"", type_=""text""),expect_column_values_to_be_unique(column=""sensor_id"")",1.0,0.9629629629629629,0.8214285714285714,99.60706509325644
Verify that the `interest_rate` column values are greater than 0 and less than or equal to 0.25.,"expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=0.25)","expect_column_values_to_be_between(column=""interest_rate"", min_value=0.01, max_value=0.25)",0.9696969696969697,0.9032258064516129,0.9696969696969697,91.57103753711765
Verify that the `course_duration` column has values that are greater than `0` and less than or equal to `52` weeks.,"expect_column_values_to_be_between(column=""course_duration"", min_value=0, max_value=52)","expect_column_values_to_be_between(column=""course_duration"", min_value=0, max_value=52)",1.0,1.0,1.0,100.00000000000004
Check that the `feedback_score` column has a standard deviation that does not exceed 1.5.,"expect_column_stdev_to_be_between(column=""feedback_score"", min_value=0, max_value=1.5)","expect_column_stdev_to_be_between(column=""feedback_score"", max_value=1.5)",0.896551724137931,0.8148148148148148,0.896551724137931,76.78567559464844
Verify that the `product_code` column matches the specific pattern `P\d{5}` and contains only unique values.,"expect_column_values_to_match_regex(column=""product_code"", regex=r""P\d{5}""),expect_column_values_to_be_unique(column=""product_code"")","expect_column_values_to_match_regex(column=""product_code"", regex=r""P\d{5}""),expect_column_values_to_be_unique(column=""product_code"")",1.0,1.0,1.0,100.00000000000004
For the `budget` column: Ensure values are of type 'decimal'. Ensure there are no negative values and check for missing entries.,"expect_column_values_to_be_of_type(column=""budget"", type_=""decimal""),expect_column_values_to_be_between(column=""budget"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""budget"")","expect_column_values_to_be_of_type(column=""budget"", type_=""decimal""),expect_column_values_to_not_be_less_than(column=""budget"", value=0),expect_column_values_to_not_be_null(column=""budget"")",0.8787878787878787,0.7500000000000001,0.8787878787878787,81.88401255592046
Ensure that the `transaction_amount` column has a median value greater than 20 and less than 1000.,"expect_column_median_to_be_between(column=""transaction_amount"", min_value=20, max_value=1000)","expect_column_mean_to_be_between(column=""transaction_amount"", min_value=20, max_value=1000)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
"Verify that the `follower_count` values are within the range of 0 to 1,000,000 and that they are arranged in increasing order across the dataset.","expect_column_values_to_be_between(column=""follower_count"", min_value=0, max_value=1000000),expect_column_values_to_be_increasing(column=""follower_count"")","expect_column_values_to_be_between(column=""follower_count"", min_value=0, max_value=1_000_000),expect_column_values_to_be_increasing(column=""follower_count"")",0.9199999999999999,0.8749999999999999,0.9199999999999999,88.21415355185661
For the `login_attempts` column: Validate that all values are integers greater than or equal to 0 and ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""login_attempts"", type_=""int""),expect_column_values_to_be_between(column=""login_attempts"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""login_attempts"")","expect_column_values_to_be_of_type(column=""login_attempts"", type_=""int""),expect_column_values_to_be_between(column=""login_attempts"", min_value=0),expect_column_values_to_not_be_null(column=""login_attempts"")",0.9577464788732395,0.927536231884058,0.9577464788732395,90.86248101118649
Check that the `registration_timestamp` column is in the ISO 8601 format and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""registration_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S%z""),expect_column_values_to_be_dateutil_parseable(column=""registration_timestamp"")","expect_column_values_to_be_of_type(column=""registration_timestamp"", type_=""str""),expect_column_values_to_match_strftime_format(column=""registration_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S.%f"")  # ISO 8601 format, %f for milliseconds",0.7575757575757576,0.6562499999999999,0.5151515151515151,66.73788514024575
Check that each entry in the `voting_record` array is a valid JSON object that includes keys 'voter_id' and 'timestamp' formatted as 'ISO 8601'.,"expect_column_values_to_be_json_parseable(column=""voting_record""),expect_column_values_to_match_json_schema(column=""voting_record"", json_schema={,    ""type"": ""array"",    ""items"": {,  ""type"": ""object"",  ""properties"": {,""voter_id"": {""type"": ""string""},""timestamp"": {""type"": ""string"", ""format"": ""date-time""},  },  ""required"": [""voter_id"", ""timestamp""],    },})","expect_column_values_to_match_json_schema(column=""voting_record"", schema={""type"": ""object"", ""properties"": {""voter_id"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}, ""required"": [""voter_id"", ""timestamp""]}),expect_column_values_to_match_regex(column=""voting_record"", regex=r""^voting_record\.id=.{20} & voting_record\.timestamp=(\\d{4}-\\d{2}-\\d{2}T\\d{2}(:\\d{2}){0,1}\\d{2}(\\.\\d+)?Z)$"")",0.6274509803921569,0.54,0.4901960784313726,49.18593589506276
"Ensure that the `humidity` column values conform to the expected distribution, with a p-value greater than `0.05` in the Chi-Square test.","expect_column_chisquare_test_p_value_to_be_greater_than(column=""humidity"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""humidity"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"Ensure the `price` column contains values that fall within the range of [0.01, 9999.99] and does not include null.","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=9999.99),expect_column_values_to_not_be_null(column=""price"")","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=9999.99),expect_column_values_to_not_be_null(column=""price"")",1.0,1.0,1.0,100.00000000000004
Check that the `data_usage` column has no missing values and all entries are non-negative.,"expect_column_values_to_not_be_null(column=""data_usage""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=None)","expect_column_values_to_not_be_null(column=""data_usage""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
Verify that the `transaction_amount` and `service_fee` columns sum to an expected total for each record.,"expect_multicolumn_sum_to_equal(column_list=[""transaction_amount"", ""service_fee""], target_value=expected_total)","expect_multicolumn_sum_to_equal(column_list=[""transaction_amount"", ""service_fee""], expected_sum=total)",0.896551724137931,0.7407407407407408,0.896551724137931,81.52362021285003
Ensure the `block_number` column contains only numeric values that are greater than `0` and does not exceed the current maximum block number.,"expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=current_max_block_number),expect_column_values_to_be_of_type(column=""block_number"", type_=""int"")","expect_column_values_to_be_of_type(column=""block_number"", type_=""int""),expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=None),expect_column_max_to_be_between(column=""block_number"", max_value=current_maximum_block_number)ЎыџNЎыџN",0.8108108108108109,0.7222222222222221,0.5675675675675677,67.88794444192916
"Check that the unique value count in the `plan_type` column matches the expected set of values `['prepaid', 'postpaid']`.","expect_column_distinct_values_to_equal_set(column=""plan_type"", value_set=['prepaid', 'postpaid'])","expect_column_distinct_values_to_equal_set(column=""plan_type"", value_set=['prepaid', 'postpaid'])",1.0,1.0,1.0,100.00000000000004
Check whether the `email_opened` column passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""email_opened"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""email_opened"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"Ensure the `warehouse_location` field contains values that match the set `['Warehouse 1', 'Warehouse 2', 'Warehouse 3']`.","expect_column_values_to_be_in_set(column=""warehouse_location"", value_set=['Warehouse 1', 'Warehouse 2', 'Warehouse 3'])","expect_column_values_to_be_in_set(column=""warehouse_location"", value_set=['Warehouse 1', 'Warehouse 2', 'Warehouse 3'])",1.0,1.0,1.0,100.00000000000004
Validate that the `subject` column contains string lengths between 5 and 100 characters.,"expect_column_value_lengths_to_be_between(column=""subject"", min_value=5, max_value=100)","expect_column_value_lengths_to_be_between(column=""subject"", min_value=5, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the Kullback-Leibler divergence between `listed_price` and `final_sale_price` is below 0.15.,"expect_column_kl_divergence_to_be_less_than(column_A=""listed_price"", column_B=""final_sale_price"", threshold=0.15)","expect_column_pair_ks_test_p_value_to_be_greater_than(column_A=""listed_price"", column_B=""final_sale_price"", threshold=0.15)",0.7906976744186046,0.6829268292682926,0.7906976744186046,72.16768874122229
"Ensure the `team_id` column values are not from the excluded set `['Team A', 'Team B']`.","expect_column_values_to_not_be_in_set(column=""team_id"", value_set=['Team A', 'Team B'])","expect_column_values_to_not_be_in_set(column=""team_id"", value_set=['Team A', 'Team B'])",1.0,1.0,1.0,100.00000000000004
"In the `feedback` table: Ensure the `ratings` column contains values between 1 and 5, inclusive.","expect_column_values_to_be_between(column=""ratings"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""ratings"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
Ensure the `created_at` column has valid datetime entries that can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""created_at"")","expect_column_values_to_be_dateutil_parseable(column=""created_at"")",1.0,1.0,1.0,100.00000000000004
Ensure the `signup_date` column values match the strftime format '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format='%Y-%m-%d %H:%M:%S')",1.0,1.0,1.0,87.21298351039782
Check that the average `student_scores` across all courses conforms to a normal distribution with a significance level of 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""student_scores"", threshold=0.05)","expect_column_mean_to_be_between(column=""student_scores"", min_value=mean_min_value, max_value=mean_max_value, significance_level=0.05)",0.4878048780487805,0.25641025641025644,0.4390243902439025,35.02928156056914
Check if the `reading_time` is always less than the `timestamp` for each record.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""timestamp"", column_B=""reading_time"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""timestamp"", column_B=""reading_time"")",1.0,1.0,1.0,100.00000000000004
For field 'humidity': Ensure all values are unique. Ensure there are no missing values. Humidity values should be between 0 and 100 percent.,"expect_column_values_to_be_unique(column=""humidity""),expect_column_values_to_not_be_null(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_unique(column=""humidity""),expect_column_values_to_not_be_null(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `employee_id` column contains unique identifiers matching the pattern `^E[0-9]{4}$`.,"expect_column_values_to_match_regex(column=""employee_id"", regex=r""^E[0-9]{4}$""),expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""^E[0-9]{4}$"")",1.0,0.9565217391304348,0.625,99.54232208531835
For field 'data_format': Ensure the field matches the type 'text'. Ensure values in 'data_format' match the pattern '^(CSV|JSON|XML)$'. Ensure this field exists.,"expect_column_to_exist(column=""data_format""),expect_column_values_to_be_of_type(column=""data_format"", type_=""text""),expect_column_values_to_match_regex(column=""data_format"", regex=r""^(CSV|JSON|XML)$"")","expect_column_to_exist(column=""data_format""),expect_column_values_to_be_of_type(column=""data_format"", type_=""text""),expect_column_values_to_match_regex(column=""data_format"", regex=r""^CSV|JSON|XML$"")",1.0,1.0,1.0,93.72052906220668
"Confirm that the `case_type` column contains only valid types from the set `['Civil', 'Criminal', 'Family']`.","expect_column_values_to_be_in_set(column=""case_type"", value_set=[""Civil"", ""Criminal"", ""Family""])","expect_column_values_to_be_in_set(column=""case_type"", value_set=['Civil', 'Criminal', 'Family'])",1.0,1.0,1.0,68.69938387430254
For field 'feedback': Ensure this field contains valid JSON objects according to the specified schema.,"expect_column_values_to_match_json_schema(column=""feedback"", schema=""specified_schema"")","expect_column_values_to_match_json_schema(column=""feedback"")",0.8571428571428571,0.8421052631578948,0.8571428571428571,65.08697335215544
"Check that the `discount_percentage` column maintains a mean value between 5% and 30%, ensuring adherence to expected promotional distributions.","expect_column_mean_to_be_between(column=""discount_percentage"", min_value=5, max_value=30)","expect_column_mean_to_be_between(column=""discount_percentage"", min_value=0.05, max_value=0.30)",0.8749999999999999,0.7333333333333334,0.8749999999999999,85.70980059247852
Verify that the `order_date` and `expected_delivery_date` columns do not have overlapping dates for the same `order_id`.,"expect_column_pair_values_to_be_equal(column_A=""order_date"", column_B=""expected_delivery_date"")","expect_column_pair_values_to_be_unique(column_A=""order_date"", column_B=""expected_delivery_date"")",0.9375,0.8666666666666667,0.9375,92.5751807101176
For the `shipping_cost` column: Ensure the values are non-negative and of type 'float'. No missing values allowed.,"expect_column_values_to_be_between(column=""shipping_cost"", min_value=0),expect_column_values_to_be_of_type(column=""shipping_cost"", type_=""float""),expect_column_values_to_not_be_null(column=""shipping_cost"")","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""shipping_cost"", type_=""float""),expect_column_values_to_not_be_null(column=""shipping_cost"")",0.9577464788732395,0.927536231884058,0.9577464788732395,90.98670670132002
"Ensure the `status` column contains only distinct values from the set `['sent', 'failed', 'pending']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['sent', 'failed', 'pending'])","expect_column_distinct_values_to_equal_set(column=""status"", value_set=['sent', 'failed', 'pending'])",0.8571428571428571,0.6923076923076923,0.8571428571428571,82.93181259810136
For field 'shipment_date': Ensure all values in 'shipment_date' adhere to the format '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
For table 'enrollments': Ensure the table contains no more than 1000 rows. Ensure that the 'enrollment_date' column has valid date formats.,"expect_table_row_count_to_be_between(max_value=1000),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")","expect_table_row_count_to_be_between(min_value=0, max_value=1000),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")",0.6896551724137931,0.6428571428571428,0.6896551724137931,47.83349583065789
"For the `supplier_rating` column, check that all values are integers within the range of 1 to 5.","expect_column_values_to_be_between(column=""supplier_rating"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""supplier_rating"", type_=""int"")","expect_column_values_to_be_of_type(column=""supplier_rating"", type_=""int""),expect_column_values_to_be_between(column=""supplier_rating"", min_value=1, max_value=5)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
For field 'result_score': Validate that the mean of (result_score) is greater than or equal to 70. Ensure this field exists.,"expect_column_mean_to_be_between(column=""result_score"", min_value=70),expect_column_to_exist(column=""result_score"")","expect_column_to_exist(column=""result_score""),expect_column_mean_to_be_between(column=""result_score"", min_value=70, max_value=float('inf'))",0.9047619047619047,0.85,0.5714285714285715,79.10332881922882
For field 'customer_feedback': Ensure the feedback length is between 10 and 500 characters and that it does not include any offensive language based on a predefined list.,"expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""customer_feedback"", regex=r""(offensive_word_1|offensive_word_2|offensive_word_3)"")","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""customer_feedback"", regex=r""[^A-Za-z0-9\s]"")  # Assuming the regex for offensive language has been provided.",0.7341772151898734,0.7012987012987012,0.7341772151898734,75.1092570543903
"For the `fuel_type` column: Ensure it contains values from the set `['Natural Gas', 'Electric', 'Solar']`. Validate that there are no duplicate entries.","expect_column_values_to_be_in_set(column=""fuel_type"", value_set=['Natural Gas', 'Electric', 'Solar']),expect_column_values_to_be_unique(column=""fuel_type"")","expect_column_values_to_be_in_set(column=""fuel_type"", value_set=['Natural Gas', 'Electric', 'Solar']),expect_column_values_to_be_unique(column=""fuel_type"")",1.0,1.0,1.0,100.00000000000004
Check that the `sample_size` column contains integer values greater than 0 and less than or equal to 5000.,"expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=5000),expect_column_values_to_be_of_type(column=""sample_size"", type_=""int"")","expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_be_between(column=""sample_size"", min_value=1, max_value=5000)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
"For the `battery_level` column, confirm that all values are less than or equal to 100% and greater than or equal to 0%.","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
In the `policy_number` column: Ensure all entries are unique and follow the pattern 'INS-XXXXXX'. Validate no missing values.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^INS-\d{6}$"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^INS-[^-]{8}$"")  # Match for INS, then one character '-', followed by 8 digits.",0.6461538461538462,0.634920634920635,0.6461538461538462,63.185856892593435
"Check that the `supplier_info` column contains valid JSON objects according to the specified schema: `{ 'supplier_name': 'string', 'contact': 'string' }`.","expect_column_values_to_match_json_schema(column=""supplier_info"", schema={""type"": ""object"", ""properties"": {""supplier_name"": {""type"": ""string""}, ""contact"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""supplier_info"", schema=""{'supplier_name':'string', 'contact':'string' }"")",0.8648648648648648,0.6857142857142857,0.8648648648648648,28.73494051604842
Check that the `customer_id` column does not contain any duplicates and matches the specified set of valid IDs.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_in_set(column=""customer_id"", value_set=valid_ids_set)","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_in_set(column=""customer_id"", value_set=valid_customer_ids)",0.9583333333333334,0.9130434782608695,0.9583333333333334,94.09334976907532
"Check that the `email_status` column contains only values from the set `['sent', 'failed', 'pending']`.","expect_column_values_to_be_in_set(column=""email_status"", value_set=['sent', 'failed', 'pending'])","expect_column_values_to_be_in_set(column=""email_status"", value_set=['sent', 'failed', 'pending'])",1.0,1.0,1.0,100.00000000000004
Validate that the `user_rating` column has a mean value between 1 and 5 and that the most common rating is `5`.,"expect_column_mean_to_be_between(column=""user_rating"", min_value=1, max_value=5),expect_column_most_common_value_to_be_in_set(column=""user_rating"", value_set=[5])","expect_column_mean_to_be_between(column=""user_rating"", min_value=1, max_value=5),expect_column_mode_to_equal(column=""user_rating"", value=5)",0.8363636363636363,0.7169811320754716,0.8363636363636363,69.2051620399755
Ensure the `price` field contains only positive numeric values and has no missing entries.,"expect_column_values_to_be_between(column=""price"", min_value=0),expect_column_values_to_not_be_null(column=""price"")","expect_column_values_to_not_be_null(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0)",1.0,0.9473684210526315,0.7,98.20823001871207
Ensure that the `reaction_count` column values are always greater than or equal to the `like_count` column.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""reaction_count"", column_B=""like_count"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""reaction_count"", column_B=""like_count"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `device_used` column does not match any SQL-like patterns from the list: ['%DROP%', '%SELECT%'].","expect_column_values_to_not_match_regex_list(column=""device_used"", regex_list=[r""%DROP%"", r""%SELECT%""])","expect_column_values_to_not_match_regex_list(column=""device_used"", regex_list=[""%DROP%"", ""%SELECT%""])",0.9375,0.7999999999999999,0.9375,87.96551680065389
Check that the `filing_date` column contains valid dates and is not missing any entries.,"expect_column_to_exist(column=""filing_date""),expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_not_be_null(column=""filing_date"")","expect_column_to_exist(column=""filing_date""),expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_not_be_null(column=""filing_date"")",1.0,1.0,1.0,100.00000000000004
"Validate that the CSV file `property_listings.csv` contains valid headers, and that the `price` column matches the expected numeric format.","expect_file_to_have_valid_table_header(file_path=""property_listings.csv""),expect_column_values_to_be_of_type(column=""price"", type_=""float"")","expect_file_to_exist(file_path=""property_listings.csv""),expect_file_to_have_valid_table_header(table_header=""property_listings""),expect_file_to_match_json_schema(file_path=""property_listings.csv"", schema={""type"": ""object"", ""properties"": {""price"": {""type"": ""number""}}})",0.5573770491803278,0.4067796610169491,0.49180327868852464,32.66548176673868
For field 'guest_count': Ensure the field matches the type 'integer'. Verify that guest counts are greater than zero.,"expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_greater_than(column=""guest_count"", value=0)","expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_greater_than(column=""guest_count"", value=0)",1.0,1.0,1.0,100.00000000000004
"Check that the `event_time` column contains datetime strings that match the `'%Y/%m/%d %H:%M'` format, ensuring correct logging of event occurrences.","expect_column_values_to_match_strftime_format(column=""event_time"", strftime_format=""%Y/%m/%d %H:%M"")","expect_column_values_to_match_strftime_format(column=""event_time"", strftime_format=""%Y/%m/%d %H:%M"")",1.0,1.0,1.0,100.00000000000004
Ensure the `data_points` field contains only numeric values within the specified range of 0 to 100.,"expect_column_values_to_be_between(column=""data_points"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""data_points"", type_=""float""),  # Assuming numeric values can be float,expect_column_values_to_be_of_type(column=""data_points"", type_=""int"")  # Assuming numeric values can also be int","expect_column_values_to_be_between(column=""data_points"", min_value=0, max_value=100)",0.44776119402985076,0.43076923076923085,0.44776119402985076,9.301448921066353
"Ensure the `humidity` column values are between 0 and 100, and the average humidity is not greater than 70%.","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""humidity"", min_value=None, max_value=70)","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""humidity"", min_value=0, max_value=70) CLIIIK",0.9473684210526316,0.9090909090909091,0.9473684210526316,94.15839804285298
For the `supplier_email`: Validate that it matches the standard email format and does not exceed 100 characters.,"expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_value_lengths_to_be_between(column=""supplier_email"", min_value=1, max_value=100)","expect_column_values_to_match_regex(r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_value_lengths_to_be_between(column=""supplier_email"", min_value=1, max_value=100)",0.7272727272727274,0.6875,0.7272727272727274,67.15302933308159
For field 'balance': Ensure the average balance for all accounts is at least $500. Verify that this field is not null.,"expect_column_mean_to_be_between(column=""balance"", min_value=500),expect_column_values_to_not_be_null(column=""balance"")","expect_column_mean_to_be_between(column=""balance"", min_value=500),expect_column_values_to_not_be_null(column=""balance"")",1.0,1.0,1.0,100.00000000000004
Ensure the `publication_date` column contains dates formatted as 'YYYY-MM-DD' and that all entries are within the last 10 years.,"expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publication_date"")  # To ensure the values are date parseable,# To ensure all entries are within the last 10 years, we can create a custom function for this expectation, as there is no direct built-in expectation for date ranges based on current date.,# However, if we were to use a similar expectation from the reference, we'd typically check against specific values. ,# Therefore, a direct translation using the provided expectations cannot fully capture the requirement to check for the last 10 years.","expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publication_date"")  # assuming ""publication_date"" column contains actual date objects, this will ensure they can be parsed by ""dateutil"" as well.",0.4161073825503356,0.326530612244898,0.389261744966443,32.698436630025256
Ensure the `incident_timestamp` column matches the format 'YYYY-MM-DD HH:MM:SS' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""incident_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""incident_timestamp"")","expect_column_values_to_match_strftime_format(column=""incident_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""incident_timestamp"")",1.0,1.0,1.0,100.00000000000004
Verify that the `supplier_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")","expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")",1.0,1.0,1.0,100.00000000000004
For field 'user_id': Ensure this field is required (not null). Verify that all user IDs are unique and match the type 'string'.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
For the `platform` column: Validate that all entries are unique and match the regex pattern '^(PC|Xbox|PlayStation|Switch)$'.,"expect_column_values_to_be_unique(column=""platform""),expect_column_values_to_match_regex(column=""platform"", regex=r""^(PC|Xbox|PlayStation|Switch)$"")","expect_column_values_to_be_unique(column=""platform""),expect_column_values_to_match_regex(column=""platform"", regex=r""^(PC|Xbox|PlayStation|Switch)$"")",1.0,1.0,1.0,100.00000000000004
For field 'block_height': Ensure this field contains only integer values. Validate that values are in increasing order without gaps.,"expect_column_values_to_be_of_type(column=""block_height"", type_=""int""),expect_column_values_to_be_increasing(column=""block_height"")","expect_column_values_to_be_of_type(column=""block_height"", type_=""int""),expect_column_values_to_be_increasing(column=""block_height""),expect_column_values_to_not_be_null(column=""block_height""),expect_column_pair_values_to_be_equal(column_A=""block_height"", column_B=""previous_block_height""),expect_column_values_to_match_regex(column=""block_height"", regex=r""^\d+$"")  # Assuming the values are in increasing order without gaps.",0.4719101123595506,0.45977011494252873,0.4719101123595506,32.00556428979687
"Ensure that the `supplier_rating` column contains values from the defined set `['A', 'B', 'C']`.","expect_column_values_to_be_in_set(column=""supplier_rating"", value_set=['A', 'B', 'C'])","expect_column_values_to_be_in_set(column=""supplier_rating"", value_set=['A', 'B', 'C'])",1.0,1.0,1.0,100.00000000000004
Ensure the `viewing_duration` in the Streaming Platforms domain is less than the `session_length` in the CRM domain.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""viewing_duration"", column_B=""session_length"")","expect_column_pair_values_A_to_be_less_than_B(column_A=""viewing_duration"", column_B=""session_length"")",0.9444444444444444,0.8823529411764706,0.9444444444444444,93.36510695862633
For field 'cargo_weight': Ensure the field matches the type 'float'. Validate that all values are greater than zero and formatted correctly with two decimal places.,"expect_column_values_to_be_of_type(column=""cargo_weight"", type_=""float""),expect_column_values_to_be_greater_than(column=""cargo_weight"", value=0),expect_column_values_to_match_regex(column=""cargo_weight"", regex=r""^\d+(\.\d{2})?$"")","expect_column_values_to_be_of_type(column=""cargo_weight"", type_=""float""),expect_column_values_to_be_between(column=""cargo_weight"", min_value=0.01, max_value=999999.99),expect_column_values_to_match_regex(column=""cargo_weight"", regex=r""^\d+(.\d{2})?$"")",0.8888888888888888,0.810126582278481,0.8888888888888888,84.55498849659628
Ensure the values in the `tariff_rate` column are arranged in decreasing order.,"expect_column_values_to_be_decreasing(column=""tariff_rate"")","expect_column_values_to_be_decreasing(column=""tariff_rate"")",1.0,1.0,1.0,100.00000000000004
"For field 'weather_condition': Ensure the field contains only distinct values matching `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",1.0,1.0,1.0,100.00000000000004
For field 'manager_id': Ensure the field matches the type 'text'. Ensure values in (manager_id) must exist in employees (employee_id). Ensure this field exists.,"expect_column_to_exist(column=""manager_id""),expect_column_values_to_be_of_type(column=""manager_id"", type_=""text""),expect_column_values_to_be_in_set(column=""manager_id"", value_set=employees[""employee_id""])","expect_column_to_exist(column=""manager_id""),expect_column_values_to_be_of_type(column=""manager_id"", type_=""text""),expect_column_values_to_be_in_set(column=""manager_id"", value_set=employees[""employee_id""])",1.0,1.0,1.0,100.00000000000004
For field 'forecast_date': Ensure the field is required (not null). Ensure the field follows the date format 'YYYY-MM-DD'. Ensure no duplicate dates exist in the dataset.,"expect_column_values_to_not_be_null(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_unique(column=""forecast_date"")","expect_column_values_to_not_be_null(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_unique(column=""forecast_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `watch_time` column values are greater than or equal to `0` and do not exceed `300` minutes.,"expect_column_values_to_be_between(column=""watch_time"", min_value=0, max_value=300)","expect_column_values_to_be_between(column=""watch_time"", min_value=0, max_value=300)",1.0,1.0,1.0,100.00000000000004
Ensure the `ip_address` field contains unique entries and adheres to the correct IP address formats (IPv4).,"expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){2}$"")","expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:\d{1,3}\.){3}\d{1,3}$"")",0.4597701149425288,0.44705882352941173,0.4597701149425288,17.722851981921607
Verify that the `purchase_date` field matches the datetime format 'YYYY-MM-DD' and contains no missing values.,"expect_column_to_exist(column=""purchase_date""),expect_column_values_to_match_strftime_format(column=""purchase_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""purchase_date"")","expect_column_to_exist(column=""purchase_date""),expect_column_values_to_match_strftime_format(column=""purchase_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""purchase_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the number of rows in the `medical_records` table equals the number of unique entries in the `patient_id` column.,"expect_table_row_count_to_equal(expectation_type=""expect_column_unique_value_count_to_equal"", column=""patient_id"")","expect_table_row_count_to_equal_other_table(table=""medical_records"", other_table=""patient_id"")илакти",0.4848484848484848,0.3870967741935484,0.4848484848484848,43.766477976863186
For fields 'product_price' and 'discount_price': Ensure both fields match the type 'decimal'. Validate that (discount_price) is less than (product_price) for all records. Ensure these fields exist.,"expect_column_to_exist(column=""product_price""),expect_column_to_exist(column=""discount_price""),expect_column_values_to_be_of_type(column=""product_price"", type_=""decimal""),expect_column_values_to_be_of_type(column=""discount_price"", type_=""decimal""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""product_price"", column_B=""discount_price"")","expect_column_to_exist(column=""product_price""),expect_column_to_exist(column=""discount_price""),expect_column_values_to_be_of_type(column=""product_price"", type_=""decimal""),expect_column_values_to_be_of_type(column=""discount_price"", type_=""decimal""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""discount_price"", column_B=""product_price"")",1.0,0.9636363636363636,0.9642857142857143,99.61611575575436
For the field 'feedback_score': Ensure it is numeric and between 1 and 5. Validate that 'feedback_score' is greater than or equal to 'customer_satisfaction'.,"expect_column_values_to_be_of_type(column=""feedback_score"", type_=""numeric""),expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=5),expect_column_pair_values_A_to_be_greater_than_B(column_A=""feedback_score"", column_B=""customer_satisfaction"")","expect_column_values_to_be_of_type(column=""feedback_score"", type_=""float""),expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=5),expect_column_pair_values_A_to_be_greater_than_B(column_A=""feedback_score"", column_B=""customer_satisfaction"")",0.9777777777777777,0.9545454545454546,0.9777777777777777,97.51797570884214
"Ensure that the `service_type` column only contains values from the set `['Repair', 'Inspection', 'Consultation']`. Validate that this column exists.","expect_column_to_exist(column=""service_type""),expect_column_values_to_be_in_set(column=""service_type"", value_set=['Repair', 'Inspection', 'Consultation'])","expect_column_to_exist(column=""service_type""),expect_column_values_to_be_in_set(column=""service_type"", value_set=['Repair', 'Inspection', 'Consultation'])",1.0,1.0,1.0,100.00000000000004
Ensure all `customer_email` addresses are unique and conform to the standard email format as defined by the regex pattern.,"expect_column_values_to_be_unique(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_be_unique(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",1.0,1.0,1.0,100.00000000000004
For the `status_code` field: Validate that all entries are valid JSON objects and conform to the specified schema for statuses.,"expect_column_values_to_be_json_parseable(column=""status_code""),expect_column_values_to_match_json_schema(column=""status_code"", schema=""your_schema_here"")","expect_column_values_to_match_json_schema(column=""status_code"")  # Assuming a ""statuses"" schema is in place.",0.5365853658536585,0.46153846153846156,0.5365853658536585,34.468259481889994
"For the `voter_id` column, ensure all entries are unique and conform to a specified pattern of 10 digits. Validate that there are no null values.","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_match_regex(column=""voter_id"", regex=r""^\d{10}$""),expect_column_values_to_not_be_null(column=""voter_id"")","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_match_regex(column=""voter_id"", regex=r""^[0-9]{10}$""),expect_column_values_to_not_be_null(column=""voter_id"")",0.9538461538461539,0.9206349206349206,0.9538461538461539,91.68478886314178
For field 'registration_date': Confirm this field exists. Ensure that all dates in 'registration_date' are not older than the election date.,"expect_column_to_exist(column=""registration_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""registration_date"", column_B=""election_date"")","expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value=""election_date""),expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_be_unique(column=""registration_date"")",0.5625,0.3548387096774194,0.53125,41.454083029649
Confirm that the `user_feedback` column contains strings that do not exceed 500 characters in length.,"expect_column_value_lengths_to_be_between(column=""user_feedback"", min_value=0, max_value=500)","expect_column_value_lengths_to_be_between(column=""user_feedback"", min_value=1, max_value=500)",0.9375,0.8666666666666667,0.9375,92.10500207490826
"Verify that the `bathrooms` field is an integer and contains no missing values, with values ranging from 0 to 5.","expect_column_values_to_be_of_type(column=""bathrooms"", type_=""int""),expect_column_values_to_not_be_null(column=""bathrooms""),expect_column_values_to_be_between(column=""bathrooms"", min_value=0, max_value=5)","expect_column_values_to_be_between(column=""bathrooms"", min_value=0, max_value=5),expect_column_values_to_be_of_type(column=""bathrooms"", type_=""int""),expect_column_values_to_not_be_null(column=""bathrooms"")",1.0,0.9696969696969697,0.6176470588235294,99.01141077297541
"For field 'wallet_address': Ensure the field matches the type 'text'. Validate that values conform to the expected address format (e.g., hex string for Ethereum). Ensure this field exists.","expect_column_to_exist(column=""wallet_address""),expect_column_values_to_be_of_type(column=""wallet_address"", type_=""text""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$"")","expect_column_to_exist(column=""wallet_address""),expect_column_values_to_be_of_type(column=""wallet_address"", type_=""text""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^[0-9A-Fa-f]{40}$"")",0.9014084507042254,0.8405797101449276,0.9014084507042254,92.68101164050631
"Validate that the `sent_time` and `received_time` columns maintain a logical order, where `sent_time` is always earlier than `received_time`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""sent_time"", column_B=""received_time"")","expect_column_values_to_be_greater_than(column=""sent_time"", other_column=""received_time"")",0.8125000000000001,0.4000000000000001,0.8125000000000001,54.44581248827759
For the `salary` field: Ensure values fall within the range of 30000 to 200000. Validate that this field cannot be null.,"expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000),expect_column_values_to_not_be_null(column=""salary"")","expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000),expect_column_values_to_not_be_null(column=""salary"")",1.0,1.0,1.0,100.00000000000004
For field 'like_count': Ensure values in (like_count) are within the range of 0 to 100000. Ensure this field exists.,"expect_column_to_exist(column=""like_count""),expect_column_values_to_be_between(column=""like_count"", min_value=0, max_value=100000)","expect_column_to_exist(column=""like_count""),expect_column_values_to_be_between(column=""like_count"", min_value=0, max_value=100000)",1.0,1.0,1.0,100.00000000000004
Confirm that the `team_score` column values are consistently greater than the `opponent_score` column for winning games.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""team_score"", column_B=""opponent_score"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""team_score"", column_B=""opponent_score"")",1.0,1.0,1.0,100.00000000000004
For field 'booking_id': Ensure this field exists and matches the type 'text'. Validate that the length of booking IDs is exactly 8 characters.,"expect_column_to_exist(column=""booking_id""),expect_column_values_to_be_of_type(column=""booking_id"", type_=""text""),expect_column_value_lengths_to_equal(column=""booking_id"", length=8)","expect_column_to_exist(column=""booking_id""),expect_column_values_to_be_of_type(column=""booking_id"", type_=""text""),expect_column_value_lengths_to_equal(column=""booking_id"", length=8)",1.0,1.0,1.0,100.00000000000004
"For field 'team_name': Confirm that values in (team_name) are string types and do not exceed 50 characters, ensuring no duplicates.","expect_column_values_to_be_of_type(column=""team_name"", type_=""str""),expect_column_value_lengths_to_be_between(column=""team_name"", min_value=1, max_value=50),expect_column_values_to_be_unique(column=""team_name"")","expect_column_values_to_be_of_type(column=""team_name"", type_=""string""),expect_column_value_lengths_to_be_between(column=""team_name"", min_value=1, max_value=50),expect_column_values_to_be_unique(column=""team_name"")",0.972972972972973,0.9444444444444444,0.972972972972973,96.97770291819575
Ensure the `grades` column has values that are numeric and fall within the range of 0 to 100.,"expect_column_values_to_be_of_type(column=""grades"", type_=""numeric""),expect_column_values_to_be_between(column=""grades"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""grades"", type_=""float""),expect_column_values_to_be_between(column=""grades"", min_value=0, max_value=100)",0.96,0.9166666666666666,0.96,95.51190479308646
"Ensure the `transaction_amount` values are positive and within a range of 0.01 to 10,000.00.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=10000.00),expect_column_values_to_be_greater_than(column=""transaction_amount"", threshold=0)","expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0.01),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=10000.00)",0.9491525423728815,0.8771929824561403,0.6779661016949153,92.51768748886323
For field `customer_feedback`: Ensure the field adheres to the defined JSON schema for feedback structure.,"expect_column_values_to_match_json_schema(column=""customer_feedback"", schema=""your_defined_json_schema_here"")","expect_column_values_to_match_json_schema(column=""customer_feedback"", schema=""defined JSON schema for feedback structure"")",0.8484848484848485,0.7741935483870969,0.8484848484848485,71.38452887982677
"For the `weather_condition` field: Ensure values are from the specified set `['Clear', 'Cloudy', 'Rain', 'Snow']`. Ensure this field exists.","expect_column_to_exist(column=""weather_condition""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Clear', 'Cloudy', 'Rain', 'Snow'])","expect_column_to_exist(column=""weather_condition""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Clear', 'Cloudy', 'Rain', 'Snow'])",1.0,1.0,1.0,100.00000000000004
For the `check_in_date` and `check_out_date`: Ensure check-out dates are always later than check-in dates.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")","expect_column_pair_values_to_be_increasing(column_A=""check_out_date"", column_B=""check_in_date"")",0.8648648648648648,0.742857142857143,0.8648648648648648,77.49838580322564
"For field 'status': Ensure the field contains only distinct values from the set ['Open', 'Closed', 'Pending']. Ensure this field is not null.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,78.74757509415676
Ensure the `product_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the 'inventory' table has at least 200 rows and that all 'product_id' values are unique.,"expect_table_row_count_to_be_between(min_value=200),expect_column_values_to_be_unique(column=""product_id"")","expect_table_row_count_to_be_between(table=""inventory"", min_value=200),expect_column_values_to_be_unique(column=""product_id"")",0.9500000000000001,0.8947368421052632,0.9500000000000001,83.39679065405737
"For the `delivery_status` column: Ensure that values are limited to the set `['Pending', 'Shipped', 'Delivered']`.","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'Shipped', 'Delivered'])","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'Shipped', 'Delivered'])",1.0,1.0,1.0,100.00000000000004
"In the 'medication' field, validate that the string length of each entry is between 1 and 50 characters.","expect_column_value_lengths_to_be_between(column=""medication"", min_value=1, max_value=50)","expect_column_value_lengths_to_be_between(column=""medication"", min_value=1, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure the `usage_kwh` column contains numeric values within the range of 0 to 50000.,"expect_column_values_to_be_between(column=""usage_kwh"", min_value=0, max_value=50000)","expect_column_values_to_be_between(column=""usage_kwh"", min_value=0, max_value=50000)",1.0,1.0,1.0,100.00000000000004
Ensure the `contract_start_date` and `contract_end_date` fields confirm that the end date is always greater than the start date.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""contract_end_date"", column_B=""contract_start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""contract_end_date"", column_B=""contract_start_date"")",1.0,1.0,1.0,100.00000000000004
For the `checkin_date` field: Validate that all dates are valid and occur before the `checkout_date`.,"expect_column_values_to_be_dateutil_parseable(column=""checkin_date""),expect_column_pair_values_A_to_be_less_than_B(column_A=""checkin_date"", column_B=""checkout_date"")","expect_column_values_to_be_dateutil_parseable(column=""checkin_date""),expect_column_values_to_be_in_set(column=""checkin_date"", value_set=[""YYYY-MM-DD"" for YYYY, MM, DD in dates_of_valid_date_from_to(""YYYY-MM-DD"", ""checkin_date"", ""checkout_date"")]),expect_column_pair_values_A_to_be_less_than_B(column_A=""checkin_date"", column_B=""checkout_date"")",0.6292134831460674,0.6206896551724138,0.6292134831460674,47.48426817948257
"For the `genre` column, ensure it matches the regex pattern `^(Action|Comedy|Drama|Documentary)$`.","expect_column_values_to_match_regex(column=""genre"", regex=r""^(Action|Comedy|Drama|Documentary)$"")","expect_column_values_to_match_regex(column=""genre"", regex=r""^((Action)|(Comedy)|(Drama)|(Documentary))$"")",1.0,1.0,1.0,64.65090387241835
Verify that the `profile_picture_url` column contains valid URL formats that match the pattern 'https?://.*'.,"expect_column_values_to_match_regex(column=""profile_picture_url"", regex=r""https?://.*"")","expect_column_values_to_match_regex(column=""profile_picture_url"", regex=r""^(https?://)?(www.)?((\w*|-).)+\.\w+$"")",0.896551724137931,0.888888888888889,0.896551724137931,50.47049288669766
"Check that the `usage_type` column only includes values from the list `['Residential', 'Commercial', 'Industrial']`.","expect_column_values_to_be_in_set(column=""usage_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""usage_type"", value_set=['Residential', 'Commercial', 'Industrial'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `interaction_score` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05, indicating a normal distribution.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""interaction_score"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""interaction_score"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Verify that the count of rows in the `citizen_complaints` table is between 50 and 200. Ensure this table exists.,"expect_table_row_count_to_be_between(table=""citizen_complaints"", min_value=50, max_value=200),expect_table_to_exist(table=""citizen_complaints"")","expect_table_row_count_to_be_between(table=""citizen_complaints"", min_value=50, max_value=200),expect_table_to_exist(table=""citizen_complaints"")",1.0,1.0,1.0,100.00000000000004
For field 'usage_amount': Ensure the field matches the type 'float'. Validate that there are no negative values present.,"expect_column_values_to_be_of_type(column=""usage_amount"", type_=""float""),expect_column_values_to_be_between(column=""usage_amount"", min_value=0)","expect_column_values_to_be_of_type(column=""usage_amount"", type_=""float""),expect_column_values_to_be_greater_than(column=""usage_amount"", value=0.0)",0.8979591836734694,0.8085106382978724,0.8979591836734694,86.44590645762783
Verify that the sum of `input_amount` and `fee` columns equals the `output_amount` for each transaction record.,"expect_column_pair_values_to_be_equal(column_A=""input_amount"", column_B=""output_amount""),expect_column_pair_values_to_be_equal(column_A=""fee"", column_B=""output_amount"")","expect_multicolumn_sum_to_equal(column_a=""input_amount"", column_b=""fee"", sum_column=""output_amount"")",0.5777777777777777,0.32558139534883723,0.5777777777777777,27.92981134137867
For the field 'check_in_time': Ensure this field matches the datetime format '%H:%M'. Validate that all entries are valid times.,"expect_column_values_to_match_strftime_format(column=""check_in_time"", strftime_format=""%H:%M""),expect_column_values_to_be_dateutil_parseable(column=""check_in_time"")","expect_column_values_to_match_strftime_format(column=""check_in_time"", strftime_format=""%H:%M""),expect_column_values_to_be_dateutil_parseable(column=""check_in_time"")",1.0,1.0,1.0,100.00000000000004
"For field 'transaction_amount': Ensure the values in 'transaction_amount' are within the range of 0 to 10,000. Ensure this field exists.","expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)","expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For field 'bio': Ensure the field matches the type 'text'. Ensure string lengths in (bio) do not exceed 160 characters. Ensure this field exists.,"expect_column_to_exist(column=""bio""),expect_column_value_lengths_to_be_between(column=""bio"", min_value=0, max_value=160),expect_column_values_to_be_of_type(column=""bio"", type_=""text"")","expect_column_to_exist(column=""bio""),expect_column_values_to_be_of_type(column=""bio"", type_=""text""),expect_column_value_lengths_to_be_between(column=""bio"", min_value=1, max_value=160),  # Ensure values are between 1 and 160 characters.",0.8611111111111113,0.8,0.5833333333333334,83.67882549590288
Confirm that the `lat_long` column entries are valid coordinates and fall within the specified geographical bounds.,"expect_column_values_to_be_between(column=""lat_long"", min_value=-90.0, max_value=90.0)","expect_column_values_to_be_between(column=""lat_long"", min_value=""37.7749"", max_value=""39.4779""),expect_column_values_to_be_between(column=""lat_long"", min_value=""-122.3946"", max_value=""-121.1732"")",0.5098039215686274,0.4489795918367347,0.5098039215686274,36.54140818155214
Validate that the `researcher_email` column matches the regex pattern for email addresses and contains no duplicates.,"expect_column_values_to_match_regex(column=""researcher_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""researcher_email"")","expect_column_values_to_match_regex(column=""researcher_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_be_unique(column=""researcher_email"")",0.9787234042553191,0.9333333333333332,0.9787234042553191,92.37327881761382
"Ensure the `weather_condition` column includes only the distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",0.875,0.7333333333333333,0.875,84.99508493439812
"Ensure that the minimum value in the `battery_level` column is greater than or equal to 20%, indicating functional devices.","expect_column_min_to_be_between(column=""battery_level"", min_value=20)","expect_column_min_to_be_between(column=""battery_level"", min_value=20, max_value=100)",0.888888888888889,0.88,0.888888888888889,77.77249746516185
For the `user_id` field: Ensure all entries are unique and not null. This field should match the type 'integer'.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
For field 'timestamp': Ensure that all string values match the ISO 8601 format.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S%z"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")",0.9444444444444444,0.9411764705882353,0.9444444444444444,90.46195324850122
For field `diagnosis_code`: Ensure the field matches the type 'text'. Ensure values in `diagnosis_code` must exist in the set of valid codes from `icd_codes`.,"expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=icd_codes)","expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=icd_codes)",1.0,1.0,1.0,100.00000000000004
Verify that the `date_added` column contains values within the range of '2020-01-01' to '2023-12-31' and is of type 'date'.,"expect_column_values_to_be_between(column=""date_added"", min_value=""2020-01-01"", max_value=""2023-12-31""),expect_column_values_to_be_of_type(column=""date_added"", type_=""date"")","expect_column_values_to_be_between(column=""date_added"", min_value=""2020-01-01"", max_value=""2023-12-31""),expect_column_values_to_be_of_type(column=""date_added"", type_=""date"")",1.0,1.0,1.0,100.00000000000004
"Check that the `threat_level` column has values that are either 'Low', 'Medium', or 'High', ensuring uniqueness.","expect_column_values_to_be_in_set(column=""threat_level"", value_set=[""Low"", ""Medium"", ""High""]),expect_column_values_to_be_unique(column=""threat_level"")","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High']),expect_column_values_to_be_unique(column=""threat_level"")",1.0,1.0,1.0,79.47440347019332
Check that the `wind_speed` column does not contain any null values and is within the range of `0` to `150` km/h.,"expect_column_values_to_not_be_null(column=""wind_speed""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_not_be_null(column=""wind_speed""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
For field 'price': Ensure the field matches the type 'decimal'. Validate that 'price' values are greater than 0 and less than 10000.,"expect_column_values_to_be_of_type(column=""price"", type_=""decimal""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)","expect_column_values_to_be_of_type(column=""price"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""price"", value=0),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)",0.819672131147541,0.8135593220338984,0.819672131147541,69.31810056278083
Check that the `bedrooms` column contains integer values that are greater than or equal to `1`.,"expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bedrooms"", min_value=1, max_value=None)","expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bedrooms"", min_value=1)",0.9361702127659575,0.9333333333333333,0.9361702127659575,87.76207108868465
"For field 'category_id': Ensure all values in 'category_id' are present in the predefined set ['electronics', 'clothing', 'home']. Validate no missing values.","expect_column_values_to_be_in_set(column=""category_id"", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=""category_id"")","expect_column_values_to_be_in_set(column=""category_id"", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=""category_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the average playtime in the `play_time` column falls within the range of 1 to 500 hours.,"expect_column_mean_to_be_between(column=""play_time"", min_value=1, max_value=500)","expect_column_mean_to_be_between(column=""play_time"", min_value=1, max_value=500)",1.0,1.0,1.0,100.00000000000004
Ensure the `sale_price` column contains values greater than or equal to `cost_price` across all products.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""sale_price"", column_B=""cost_price"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""sale_price"", column_B=""cost_price"")",1.0,1.0,1.0,100.00000000000004
For field 'poll_location': Ensure the field matches the type 'text'. Validate that values in (poll_location) do not contain any null entries and are unique. Ensure this field exists.,"expect_column_to_exist(column=""poll_location""),expect_column_values_to_not_be_null(column=""poll_location""),expect_column_values_to_be_unique(column=""poll_location""),expect_column_values_to_be_of_type(column=""poll_location"", type_=""text"")","expect_column_to_exist(column=""poll_location""),expect_column_values_to_be_of_type(column=""poll_location"", type_=""text""),expect_column_values_to_be_unique(column=""poll_location"")",0.8484848484848484,0.8125,0.7272727272727273,70.6649373792763
Check that the `product_code` column conforms to the pattern of alphanumeric characters and does not have duplicates.,"expect_column_values_to_match_regex(column=""product_code"", regex=r""^[a-zA-Z0-9]+$""),expect_column_values_to_be_unique(column=""product_code"")","expect_column_values_to_match_regex(column=""product_code"", regex=r""^[\w]+$""), expect_column_values_to_be_unique(column=""product_code"")",0.888888888888889,0.8372093023255814,0.888888888888889,91.54609559890832
Ensure the `temperature` column contains only numeric values and falls within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `quiz_scores` column follows a uniform distribution with a mean of 75 and a standard deviation of 5, verified via the KS test with a p-value threshold of 0.05.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""quiz_scores"", threshold=0.05)","expect_column_ks_test_p_value_to_be_greater_than(column=""quiz_scores"", threshold=0.05)",0.9411764705882353,0.8749999999999999,0.9411764705882353,85.95552893261161
Ensure that the sum of the `quantity` sold in the `sales` table equals the total in the `inventory` table for the corresponding products.,"expect_multicolumn_sum_to_equal(column_list=[""quantity""], table_name=""sales"", target_column_list=[""total_quantity""], target_table_name=""inventory"")","expect_table_sum_to_equal_other_table(sum_table=""sales"", other_table=""inventory"")",0.4848484848484849,0.12903225806451615,0.4848484848484849,22.34317036693578
Ensure the 'registration_date' column contains valid date entries. Ensure all dates are not null and are within the current election cycle.,"expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_not_be_null(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2023-01-01"", max_value=""2023-11-08"")","expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_not_be_null(column=""registration_date""),expect_column_values_to_be_increasing(column=""registration_date"")  # Ensure the column values are increasing from most recent to oldest (if a new date is submitted it must be after all previous dates)",0.6464646464646465,0.5360824742268041,0.5858585858585859,59.34563424943586
Check that the total number of properties listed in the `for_sale` table equals the count in the `sold` table.,"expect_table_row_count_to_equal_other_table(table=""sold"", column=""for_sale"")","expect_table_row_count_to_equal_other_table(table_name=""for_sale"", other_table_name=""sold"")",0.8275862068965517,0.6666666666666665,0.7586206896551724,67.00773465821739
Ensure the `polling_station` column contains distinct values from the predefined list of valid polling locations.,"expect_column_values_to_be_in_set(column=""polling_station"", value_set=valid_polling_locations)","expect_column_distinct_values_to_match_set(column=""polling_station"", value_set=valid_polling_locations)",0.8666666666666667,0.7142857142857143,0.8666666666666667,82.93181259810136
Verify that the `battery_level` column contains values that are not less than 0% and not greater than 100%.,"expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For the `project_budget` column: Ensure it contains only non-negative float values and has no missing entries.,"expect_column_values_to_not_be_null(column=""project_budget""),expect_column_values_to_be_between(column=""project_budget"", min_value=0, max_value=float('inf'))","expect_column_values_to_be_of_type(column=""project_budget"", type_=""float""),expect_column_values_to_be_between(column=""project_budget"", min_value=0, max_value=None)",0.8679245283018868,0.7058823529411765,0.830188679245283,76.0459775609755
Ensure that the `product_name` strings are between `3` and `50` characters long and do not contain any special characters.,"expect_column_value_lengths_to_be_between(column=""product_name"", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=""product_name"", regex=r""[^a-zA-Z0-9\s]"")","expect_column_values_to_match_regex(column=""product_name"", regex=r""^[a-zA-Z0-9]{3,50}$"")",0.6799999999999999,0.5416666666666666,0.6,26.63810369704723
"For the `status` column: Ensure it contains only distinct values matching `['Open', 'In Progress', 'Closed']`.","expect_column_distinct_values_to_equal_set(column=""status"", value_set=['Open', 'In Progress', 'Closed'])","expect_column_distinct_values_to_be_in_set(column=""status"", value_set=['Open', 'In Progress', 'Closed'])",0.9032258064516129,0.8275862068965518,0.9032258064516129,86.35707684233577
For the `fraud_score` field: Ensure the mean fraud score across all transactions does not exceed 0.5.,"expect_column_mean_to_be_between(column=""fraud_score"", min_value=None, max_value=0.5)","expect_column_mean_to_be_between(column=""fraud_score"", min_value=0, max_value=0.5)",0.9375,0.8666666666666667,0.9375,91.57103753711765
Verify that the `send_date` field adheres to the `YYYY-MM-DD` format and that all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""send_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""send_date"", value_set=[date for date in pd.date_range(start=""1900-01-01"", end=pd.Timestamp.now())])","expect_column_values_to_match_strftime_format(column=""send_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""send_date"", value_set=dates_in_the_past)",0.7945205479452055,0.7887323943661972,0.7945205479452055,62.52788367743686
"For field 'user_role': Ensure this field exists. Validate that values in (user_role) match at least one pattern from the list: 'admin', 'editor', 'viewer'.","expect_column_to_exist(column=""user_role""),expect_column_values_to_be_in_set(column=""user_role"", value_set=[""admin"", ""editor"", ""viewer""])","expect_column_to_exist(column=""user_role""),expect_column_values_to_be_in_set(column=""user_role"", value_set=[""admin"", ""editor"", ""viewer""])",1.0,1.0,1.0,100.00000000000004
"Ensure the `followers_count` column contains non-negative integers, verifying that the values are in increasing order per user ID.","expect_column_values_to_be_between(column=""followers_count"", min_value=0),expect_column_values_to_be_increasing(column=""followers_count"")","expect_column_values_to_be_of_type(column=""followers_count"", type_=""int""),expect_column_values_to_be_greater_than(column=""followers_count"", value=0),expect_column_values_to_be_increasing(column=""followers_count"")",0.7037037037037038,0.6153846153846154,0.7037037037037038,52.427925994431995
For the `temperature_reading`: Conduct a Chi-Square test to ensure the distribution of temperature readings aligns with expected behavior and p-value > 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""temperature_reading"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""temperature_reading"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"Ensure the `precipitation` column contains only values from the set `[0, 1, 2, 3, 4, 5]` representing millimeters of rain.","expect_column_values_to_be_in_set(column=""precipitation"", value_set=[0, 1, 2, 3, 4, 5])","expect_column_values_to_be_in_set(column=""precipitation"", value_set=[0, 1, 2, 3, 4, 5])",1.0,1.0,1.0,100.00000000000004
Verify that the `admission_date` column contains dates in the format `YYYY-MM-DD` and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""admission_date"")","expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""admission_date"")",1.0,1.0,1.0,100.00000000000004
For field 'employee_id': Ensure this field exists and matches the type 'text'. Validate that the length of employee IDs is exactly 6 characters.,"expect_column_to_exist(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""text""),expect_column_value_lengths_to_equal(column=""employee_id"", length=6)","expect_column_to_exist(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""text""),expect_column_value_lengths_to_equal(column=""employee_id"", length=6)",1.0,1.0,1.0,100.00000000000004
"For field 'account_status': Ensure the field matches the type 'text'. Validate that 'account_status' contains only values: 'Active', 'Inactive', 'Closed'. Ensure this field exists.","expect_column_to_exist(column=""account_status""),expect_column_values_to_be_of_type(column=""account_status"", type_=""text""),expect_column_values_to_be_in_set(column=""account_status"", value_set=[""Active"", ""Inactive"", ""Closed""])","expect_column_to_exist(column=""account_status""),expect_column_values_to_be_of_type(column=""account_status"", type_=""text""),expect_column_values_to_be_in_set(column=""account_status"", value_set=['Active', 'Inactive', 'Closed'])",1.0,1.0,1.0,86.09643229159829
For the JSON file `game_reviews.json`: Validate that it has the correct formatting and that the number of lines does not exceed 1000.,"expect_file_to_exist(file_path=""game_reviews.json""),expect_file_to_have_valid_table_header(file_path=""game_reviews.json""),expect_file_size_to_be_between(file_path=""game_reviews.json"", min_value=0, max_value=1000)","expect_file_to_have_valid_json_file_format(),expect_file_line_regex_match_count_to_be_between(min_value=0, max_value=1000)",0.5901639344262294,0.4067796610169491,0.5573770491803278,31.41729891537549
For field 'assignment_submission': Confirm that the field is required (not null). Ensure the format in (assignment_submission) meets the specified regular expression for valid file types.,"expect_column_values_to_not_be_null(column=""assignment_submission""),expect_column_values_to_match_regex(column=""assignment_submission"", regex=r""^.*\.(pdf|docx|txt|jpg|png)$"")","expect_column_values_to_not_be_null(column=""assignment_submission""),expect_column_values_to_match_regex(column=""assignment_submission"", regex=r"".(csv|txt|pdf|docx)($|\.|$)""",0.9411764705882353,0.8571428571428572,0.9019607843137256,78.79378044481106
In the `wallet_balance` column: Verify that the sum of all balances does not exceed the maximum supply of the cryptocurrency.,"expect_column_sum_to_be_between(column=""wallet_balance"", min_value=None, max_value=MAX_SUPPLY)","expect_column_sum_to_be_between(column=""wallet_balance"", min_value=0, max_value=maximum_supply)",0.875,0.7333333333333333,0.875,81.09091360656033
Ensure the `meter_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_not_be_null(column=""meter_id"")","expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_not_be_null(column=""meter_id"")",1.0,1.0,1.0,100.00000000000004
Validate that the `bio` column has a maximum length of 160 characters and contains no special characters.,"expect_column_value_lengths_to_be_between(column=""bio"", min_value=0, max_value=160),expect_column_values_to_not_match_regex(column=""bio"", regex=r""[^a-zA-Z0-9\s]"")","expect_column_max_value_to_be_between(column=""bio"", max_value=160),expect_column_values_to_not_match_regex(column=""bio"", regex=r""[^a-zA-Z0-9]"")",0.896551724137931,0.7857142857142856,0.896551724137931,78.61767407304903
Check that the `attendance_rate` column has a mean value of at least 75%.,"expect_column_mean_to_be_between(column=""attendance_rate"", min_value=75.0)","expect_column_mean_to_be_between(column=""attendance_rate"", min_value=75)",0.9600000000000001,0.9565217391304348,0.9600000000000001,92.76077030810347
"For the `quantity` column, ensure that values fall within the range of 1 to 1000 to avoid errors in inventory levels.","expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)","expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_email` column contains only valid email formats. All values must be non-null and unique.,"expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_be_unique(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_null_column_values_to_be_unique(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.9032258064516129,0.8666666666666665,0.9032258064516129,77.05971996717514
Ensure the average `rating` in the `reviews` column is between 1 and 5.,"expect_column_mean_to_be_between(column=""reviews"", min_value=1, max_value=5)","expect_column_mean_to_be_between(column=""rating"", min_value=1, max_value=5)",0.9285714285714286,0.8461538461538461,0.9285714285714286,90.9593063222022
"Ensure the `product_category` column contains only values from the set `['Electronics', 'Clothing', 'Home Goods']`.","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Clothing', 'Home Goods'])","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Clothing', 'Home Goods'])",1.0,1.0,1.0,100.00000000000004
For the `points_scored` column: Validate that all entries are integers and that they fall within the range of 0 to 100.,"expect_column_values_to_be_of_type(column=""points_scored"", type_=""int""),expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""points_scored"", type_=""int""),expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Check that the `source_ip` field does not match any patterns from the list of known malicious IP addresses.,"expect_column_values_to_not_match_regex_list(column=""source_ip"", regex_list=known_malicious_ip_regex_patterns)","expect_column_values_to_not_match_regex_list(column=""source_ip"", regex_list=[r"".*known_malicious_ip_pattern.*""])",0.9444444444444444,0.8235294117647058,0.9444444444444444,71.61905612860683
"Check that the `policy_start_date` and `policy_end_date` columns are valid dates, with `policy_end_date` being after `policy_start_date`.","expect_column_values_to_be_dateutil_parseable(column=""policy_start_date""),expect_column_values_to_be_dateutil_parseable(column=""policy_end_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""policy_end_date"", column_B=""policy_start_date"")","expect_column_values_to_be_dateutil_parseable(column=""policy_start_date""),expect_column_values_to_be_between(column=""policy_end_date"", min_value=""policy_start_date"", max_value=None)",0.676056338028169,0.5797101449275363,0.676056338028169,50.903827540484166
For fields `response_time` and `resolution_time`: Ensure `resolution_time` is always greater than `response_time`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""resolution_time"", column_B=""response_time"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""resolution_time"", column_B=""response_time"")",1.0,1.0,1.0,100.00000000000004
For the `hearing_date` field: Validate that all dates are of type 'date' and are not in the future.,"expect_column_values_to_be_of_type(column=""hearing_date"", type_=""date""),expect_column_values_to_be_between(column=""hearing_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""hearing_date"", type_=""date""),expect_column_values_to_be_between(column=""hearing_date"", min_value=""1900-01-01"", max_value=""current_date"")",0.9491525423728815,0.9473684210526316,0.9491525423728815,93.94416530026865
Check that the `game_name` field does not contain any special characters and that all values are at least 3 characters long.,"expect_column_values_to_not_match_regex(column=""game_name"", regex=r""[^a-zA-Z0-9 ]""),expect_column_value_lengths_to_be_between(column=""game_name"", min_value=3, max_value=None)","expect_column_values_to_not_match_regex(column=""game_name"", regex=r""[^a-zA-Z0-9]+""),expect_column_value_lengths_to_be_between(column=""game_name"", min_value=3)",0.9508196721311475,0.9491525423728813,0.9508196721311475,87.60667281421135
In the `medication_name` field: Validate that all entries are not empty and match at least one value from the provided list of approved medications.,"expect_column_values_to_not_be_null(column=""medication_name""),expect_column_values_to_be_in_set(column=""medication_name"", value_set=approved_medications)","expect_column_values_to_not_be_null(column=""medication_name""),expect_column_values_to_be_in_set(column=""medication_name"", value_set=approved_medications)",1.0,1.0,1.0,100.00000000000004
"For field `matches_played`: Ensure the mean is greater than 10, and values are of type 'integer' with no missing entries.","expect_column_mean_to_be_between(column=""matches_played"", min_value=10),expect_column_values_to_be_of_type(column=""matches_played"", type_=""integer""),expect_column_values_to_not_be_null(column=""matches_played"")","expect_column_mean_to_be_between(column=""matches_played"", min_value=10),expect_column_values_to_not_be_null(column=""matches_played""),expect_column_values_to_be_of_type(column=""matches_played"", type_=""int"")",0.9705882352941176,0.9393939393939394,0.8235294117647058,96.74122890261673
For the `sku` column: Ensure all entries match the regex pattern '^[A-Z0-9]{8}$' and are unique.,"expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8}$""),expect_column_values_to_be_unique(column=""sku"")","expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8}$""),expect_column_values_to_be_unique(column=""sku"")",1.0,1.0,1.0,100.00000000000004
For field 'hashtags': Ensure the field exists and matches the type 'text'. Validate that all entries in (hashtags) conform to the regex pattern for valid hashtags.,"expect_column_to_exist(column=""hashtags""),expect_column_values_to_be_of_type(column=""hashtags"", type_=""text""),expect_column_values_to_match_regex(column=""hashtags"", regex=r""^#\w+$"")","expect_column_to_exist(column=""hashtags""),expect_column_values_to_be_of_type(column=""hashtags"", type_=""text""),expect_column_values_to_match_regex(column=""hashtags"", regex=r""#[A-Za-z0-9]{1,20}"")илася",0.8852459016393442,0.8813559322033898,0.8852459016393442,85.38651765124675
Ensure the `product_id` column contains unique identifiers that match the regex pattern `^[A-Z0-9]{10}$`.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Z0-9]{10}$"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Z0-9]{10}$"")",1.0,1.0,1.0,100.00000000000004
"For field 'trading_volume': Ensure the field matches the type 'numeric'. Ensure values in (trading_volume) are within the range of 0 to 1,000,000,000. Ensure this field exists.","expect_column_to_exist(column=""trading_volume""),expect_column_values_to_be_of_type(column=""trading_volume"", type_=""numeric""),expect_column_values_to_be_between(column=""trading_volume"", min_value=0, max_value=1000000000)","expect_column_to_exist(column=""trading_volume""),expect_column_values_to_be_of_type(column=""trading_volume"", type_=""numeric""),expect_column_values_to_be_between(column=""trading_volume"", min_value=0, max_value=1000000000),  # This can be changed depending on the actual requirement.",0.8831168831168831,0.88,0.8831168831168831,86.5899238517634
"Ensure that the distribution of `case_types` adheres to expected proportions, with no type exceeding 30% of total cases.","expect_column_proportion_of_unique_values_to_be_between(column=""case_types"", min_value=0.0, max_value=0.3)","expect_column_proportion_to_be_between(column=""case_types"", min_value=0.0, max_value=0.3)",0.9189189189189189,0.8571428571428572,0.9189189189189189,80.747746700337
"For the `game_title` field, ensure that all titles are unique and contain between 3 and 50 characters.","expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=3, max_value=50)","expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=3, max_value=50)",1.0,1.0,1.0,100.00000000000004
For `quantity`: Ensure that all entries are of type 'integer' and fall within the range of 1 to 10000. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=10000),expect_column_values_to_not_be_null(column=""quantity"")","expect_column_values_to_be_of_type(column=""quantity"", type_=""integer""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=10000)  # Assuming max_value is set to 10000.  # This can be adjusted as per requirement.",0.7397260273972601,0.619718309859155,0.7397260273972601,70.53591348355593
Validate that the `temperature` column's values are within the range of -40 to 125 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125)","expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125)",1.0,1.0,1.0,100.00000000000004
In the `hire_date` column: Ensure each entry adheres to the `YYYY-MM-DD` format and is not a future date.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_less_than(column=""hire_date"", value=""2023-10-31"")  # Replace this date with the current date for your application",0.6756756756756758,0.6666666666666666,0.6756756756756758,56.211374688524785
"Check that the values in the `status` column are from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
For field 'study_id': Ensure the field is required (not null). Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""study_id""),expect_column_values_to_be_unique(column=""study_id"")","expect_column_values_to_not_be_null(column=""study_id""),expect_column_values_to_be_unique(column=""study_id"")",1.0,1.0,1.0,100.00000000000004
For table 'tags': Ensure the 'tag_name' column exists. Validate the 'tag_name' for uniqueness across all entries.,"expect_column_to_exist(column=""tag_name""),expect_column_values_to_be_unique(column=""tag_name"")","expect_column_to_exist(column=""tag_name""),expect_column_values_to_be_unique(column=""tag_name"")",1.0,1.0,1.0,100.00000000000004
For the `device_id` field: Ensure all values are unique and of type 'string'. No null entries are permitted.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""string"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""string""),expect_column_values_to_not_be_null(column=""device_id"")",1.0,0.9666666666666667,0.8064516129032258,99.64092777538484
"Confirm that the `insurance_provider` column contains values exclusively from the set `['Medicare', 'Medicaid', 'Private']`.","expect_column_values_to_be_in_set(column=""insurance_provider"", value_set=['Medicare', 'Medicaid', 'Private'])","expect_column_values_to_be_in_set(column=""insurance_provider"", value_set=['Medicare', 'Medicaid', 'Private'])",1.0,1.0,1.0,100.00000000000004
"For the `player_statistics` column, validate that all entries conform to a predefined JSON schema representing player metrics.","expect_column_values_to_match_json_schema(column=""player_statistics"", schema={""type"": ""object"", ""properties"": { ... }})  # Replace '...' with the actual schema properties.","expect_column_values_to_match_json_schema(column=""player_statistics"", schema=your_predefined_JSON_schema)",0.6857142857142857,0.6060606060606061,0.6857142857142857,34.4378075488996
Check that the `click_through_rate` column has a KL divergence of less than 0.1 compared to the previous quarter's data.,"expect_column_kl_divergence_to_be_less_than(column=""click_through_rate"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""click_through_rate"", threshold=0.1)",1.0,1.0,1.0,100.00000000000004
"Ensure the `department` column values are among the specified set: `['HR', 'Finance', 'IT', 'Sales']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Sales'])","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Sales'])",1.0,1.0,1.0,100.00000000000004
Ensure the `demographic_data` column values are valid JSON objects that conform to the specified schema.,"expect_column_values_to_match_json_schema(column=""demographic_data"", schema={""type"": ""object""})","expect_column_values_to_match_json_schema(column=""demographic_data"", schema={})  # Replace with the appropriate schema for the required validation.",0.6666666666666667,0.6451612903225806,0.6666666666666667,66.26353579931853
"For the `customer_feedback` column, ensure the sum of ratings falls between 0 and 500, and the median rating is at least 4.","expect_column_sum_to_be_between(column=""customer_feedback"", min_value=0, max_value=500),expect_column_median_to_be_between(column=""customer_feedback"", min_value=4, max_value=None)","expect_column_sum_to_be_between(column=""customer_feedback"", min_value=0, max_value=500),expect_column_median_to_be_between(column=""customer_feedback"", min_value=4, max_value=None)",1.0,1.0,1.0,100.00000000000004
"Evaluate the `reply_to` column to confirm it contains valid email addresses or is null, ensuring proper formatting.","expect_column_values_to_be_null(column=""reply_to""),expect_column_values_to_match_regex(column=""reply_to"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_be_in_set(column=""reply_to"", value_set=valid_email_regex),expect_column_values_to_be_null(column=""reply_to"")",0.6071428571428571,0.4814814814814815,0.5357142857142857,42.930466473010085
Check the `discount_code` column to ensure that it does not match any entries from the list of invalid codes.,"expect_column_values_to_not_match_regex_list(column=""discount_code"", regex_list=[r""invalid_code_1"", r""invalid_code_2"", r""invalid_code_3""])","expect_column_values_to_not_be_in_set(column=""discount_code"", value_set=invalid_codes)",0.5,0.3684210526315789,0.5,26.107772576867976
For the field 'account_number': Ensure it exists and matches the regular expression pattern `^[0-9]{10}$`. Validate that all account numbers are unique.,"expect_column_to_exist(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^[0-9]{10}$""),expect_column_values_to_be_unique(column=""account_number"")","expect_column_to_exist(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^[0-9]{10}$""),expect_column_values_to_be_unique(column=""account_number"")",1.0,1.0,1.0,100.00000000000004
For the `forecast_date` field: Ensure it is formatted correctly as YYYY-MM-DD and contains no null values.,"expect_column_to_exist(column=""forecast_date""),expect_column_values_to_not_be_null(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""forecast_date"")",0.8771929824561403,0.8363636363636364,0.5614035087719298,74.25309446013702
For field `precipitation`: Ensure this field matches the type 'decimal'. Confirm no negative values are present in this column.,"expect_column_values_to_be_of_type(column=""precipitation"", type_=""decimal""),expect_column_values_to_be_between(column=""precipitation"", min_value=0)","expect_column_to_exist(column=""precipitation""),expect_column_values_to_be_of_type(column=""precipitation"", type_=""decimal""),expect_column_values_to_be_between(column=""precipitation"", min_value=0.0, max_value=100)",0.8148148148148148,0.8076923076923077,0.8148148148148148,68.15903005714442
"Ensure that the `supplier_name` column values match at least one pattern from the predefined list: `['Supplier A', 'Supplier B', 'Supplier C']`.","expect_column_values_to_be_in_set(column=""supplier_name"", value_set=['Supplier A', 'Supplier B', 'Supplier C'])","expect_column_values_to_be_in_set(column=""supplier_name"", value_set=['Supplier A', 'Supplier B', 'Supplier C'])",1.0,1.0,1.0,100.00000000000004
Validate that the `participant_id` column in Research and Data Analysis contains no missing values and is of the string type.,"expect_column_values_to_not_be_null(column=""participant_id""),expect_column_values_to_be_of_type(column=""participant_id"", type_=""str"")","expect_column_values_to_not_be_null(column=""participant_id""),expect_column_values_to_be_of_type(column=""participant_id"", type_=""str"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `player_position` column contains only values from the set `['forward', 'midfielder', 'defender', 'goalkeeper']`.","expect_column_values_to_be_in_set(column=""player_position"", value_set=['forward', 'midfielder', 'defender', 'goalkeeper'])","expect_column_values_to_be_in_set(column=""player_position"", value_set=['forward','midfielder', 'defender', 'goalkeeper'])",1.0,1.0,1.0,100.00000000000004
For field 'device_id': Ensure the field exists. Validate that the length of (device_id) is exactly 12 characters and matches the pattern [A-Z0-9]{12}.,"expect_column_to_exist(column=""device_id""),expect_column_value_lengths_to_equal(column=""device_id"", length=12),expect_column_values_to_match_regex(column=""device_id"", regex=r""^[A-Z0-9]{12}$"")","expect_column_to_exist(column=""device_id""),expect_column_value_lengths_to_equal(column=""device_id"", value=12),expect_column_values_to_match_regex(column=""device_id"", regex=r""^([A-Z0-9]{12}$)",0.9696969696969697,0.9375,0.9696969696969697,92.36761561686856
For the `timestamp` column: Ensure all timestamps adhere to the format 'YYYY-MM-DD HH:MM:SS' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.8979591836734695,0.7659574468085107,0.693877551020408,83.8986476709745
Verify that the `delivery_date` column contains dates that are within 30 days of the `order_date` column.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"", threshold=30)","expect_column_pair_values_to_be_increasing(column_a=""delivery_date"", column_b=""order_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=(SELECT MIN(""order_date"") FROM orders), max_value=(SELECT MAX(""order_date"") FROM orders) - timedelta(days=30))  # Assuming delivery_date is an integer type, this could be modified for different data types as needed.",0.375,0.2820512820512821,0.375,21.66087094875888
Ensure the `citizen_id` column contains only unique values and all entries are not null.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
For field 'user_id': Ensure all user IDs are alphanumeric and exactly 8 characters long. Validate that no two users share the same ID.,"expect_column_values_to_match_regex(column=""user_id"", regex=r""^[a-zA-Z0-9]{8}$""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_match_regex(column=""user_id"", regex=r""^[a-zA-Z0-9]{8}$""),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `timestamp` column exists and contains only unique values representing valid dates.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_unique(column=""timestamp""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_unique(column=""timestamp""),expect_column_values_to_be_in_set(column=""timestamp"", value_set=valid_date_values)  # Replace valid_date_values with your list of valid date values, e.g., [2023-10-10, 2023-10-11,...]",0.6,0.5588235294117647,0.6,47.650571229404434
"For the `rating` column: Ensure the average rating is between 1 and 5, and that no ratings are null.","expect_column_mean_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")","expect_column_mean_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
"For field `currency`: Ensure the column values are distinct and only include currencies from the set ['BTC', 'ETH', 'LTC'].","expect_column_values_to_be_unique(column=""currency""),expect_column_values_to_be_in_set(column=""currency"", value_set=['BTC', 'ETH', 'LTC'])","expect_column_values_to_be_unique(column=""currency""),expect_column_values_to_be_in_set(column=""currency"", value_set=['BTC', 'ETH', 'LTC'])",1.0,1.0,1.0,100.00000000000004
"For field 'transaction_type': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in (transaction_type) must be one of 'debit', 'credit', or 'transfer'.","expect_column_values_to_not_be_null(column=""transaction_type""),expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""debit"", ""credit"", ""transfer""])","expect_column_values_to_not_be_null(column=""transaction_type""),expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['debit', 'credit', 'transfer'])",1.0,1.0,1.0,87.01784579512386
"For the `date_of_birth` field, validate that all entries conform to the format `YYYY-MM-DD` and are not in the future.","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""current_date"")",0.967032967032967,0.9662921348314608,0.967032967032967,95.95974961050355
For field 'json_content': Ensure this field is required (not null). Ensure that the JSON is properly formatted and contains valid keys. Ensure this field matches the type 'text'.,"expect_column_values_to_not_be_null(column=""json_content""),expect_column_values_to_be_json_parseable(column=""json_content""),expect_column_values_to_be_of_type(column=""json_content"", type_=""text"")","expect_column_values_to_not_be_null(column=""json_content""),expect_column_values_to_match_json_schema(column=""json_content"", schema={""type"": ""object""}),expect_column_values_to_match_json_schema(column=""json_content"", schema={""type"": ""text""})",0.823529411764706,0.6363636363636364,0.7941176470588235,61.6888065429887
Ensure the `game_title` column contains only distinct values and matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""game_title""),expect_column_values_to_be_unique(column=""game_title""),expect_column_values_to_be_of_type(column=""game_title"", type_=""text"")","expect_column_to_exist(column=""game_title""),expect_column_values_to_be_unique(column=""game_title""),expect_column_values_to_be_of_type(column=""game_title"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For table 'properties': Ensure the number of rows is equal to or greater than 1. Ensure the columns match the specified set: ['property_id', 'address', 'listing_price', 'agent_id', 'listing_date'].","expect_table_row_count_to_be_between(min_value=1, max_value=None),expect_table_columns_to_match_set(column_set=['property_id', 'address', 'listing_price', 'agent_id', 'listing_date'])","expect_table_row_count_to_be_between(table=""properties"", min_value=1),expect_table_columns_to_match_set(table=""properties"", column_set=['property_id', 'address', 'listing_price', 'agent_id', 'listing_date'])ыџN",0.870967741935484,0.7666666666666667,0.870967741935484,74.81719247702014
"For the `age_rating` field: Ensure that all entries are from the set `['E', 'T', 'M', 'AO']`.","expect_column_values_to_be_in_set(column=""age_rating"", value_set=['E', 'T', 'M', 'AO'])","expect_column_values_to_be_in_set(column=""age_rating"", value_set=['E', 'T', 'M', 'AO'])",1.0,1.0,1.0,100.00000000000004
For field 'invoice_number': Ensure this field exists. Ensure the field matches the type 'text'. Ensure values do not exceed 50 characters and are unique.,"expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""text""),expect_column_value_lengths_to_be_between(column=""invoice_number"", min_value=1, max_value=50),expect_column_values_to_be_unique(column=""invoice_number"")","expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_of_type(column=""invoice_number"", type_=""text""),expect_column_value_lengths_to_be_between(column=""invoice_number"", min_value=0, max_value=50),expect_column_values_to_be_unique(column=""invoice_number"")",0.9772727272727273,0.9534883720930233,0.9772727272727273,97.49308025055264
For the `test_results` table: Verify that the mean value of `cholesterol_level` is less than 200 mg/dL.,"expect_column_mean_to_be_between(column=""cholesterol_level"", min_value=None, max_value=200)","expect_column_mean_to_be_between(column=""cholesterol_level"", min_value=None, max_value=200)",1.0,1.0,1.0,100.00000000000004
Check that the `team_id` column values are distinct and match the set of valid team identifiers.,"expect_column_values_to_be_unique(column=""team_id""),expect_column_values_to_be_in_set(column=""team_id"", value_set=valid_team_identifiers)","expect_column_values_to_be_unique(column=""team_id""),expect_column_values_to_be_in_set(column=""team_id"", value_set=valid_team_identifier_set)",0.9795918367346939,0.9787234042553191,0.9795918367346939,92.97019689158859
Check that the number of rows in the `transactions` table is equal to the number of entries in the `accounts` table.,"expect_table_row_count_to_equal(other_table=""accounts"")","expect_table_row_count_to_equal_other_table(table_name=""transactions"", other_table_name=""accounts"")",0.7499999999999999,0.6363636363636364,0.7499999999999999,43.96906195472232
Ensure the `detection_time` column values are in increasing order and do not contain any missing values.,"expect_column_values_to_be_increasing(column=""detection_time""),expect_column_values_to_not_be_null(column=""detection_time"")","expect_column_values_to_be_increasing(column=""detection_time"") and expect_column_values_to_not_be_null(column=""detection_time"")",0.9743589743589743,0.918918918918919,0.9743589743589743,93.85522307631307
For field `feedback_json`: Ensure values in `feedback_json` are valid JSON objects and conform to the specified schema.,"expect_column_values_to_be_json_parseable(column=""feedback_json""),expect_column_values_to_match_json_schema(column=""feedback_json"", schema=""your_schema_here"")","expect_column_values_to_be_json_parseable(column=""feedback_json""),expect_column_values_to_match_json_schema(column=""feedback_json"", schema={""type"": ""object""})",0.8936170212765957,0.888888888888889,0.8936170212765957,83.25176000164102
Verify that the `delivery_time` column values are greater than the `pickup_time` column for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_time"", column_B=""pickup_time"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_time"", column_B=""pickup_time"")",1.0,1.0,1.0,100.00000000000004
"For field 'property_owner_email': Ensure the field matches the type 'text'. Validate that the email address must conform to a standard email format (^[\\w-\\.]+@[\\w-]+\\.[a-zA-Z]{2,4}$). Ensure this field exists.","expect_column_to_exist(column=""property_owner_email""),expect_column_values_to_be_of_type(column=""property_owner_email"", type_=""text""),expect_column_values_to_match_regex(column=""property_owner_email"", regex=r""^[\w\-.]+@[\w\-]+\.[a-zA-Z]{2,4}$"")","expect_column_to_exist(column=""property_owner_email""),expect_column_values_to_be_of_type(column=""property_owner_email"", type_=""text""),expect_column_values_to_match_regex(column=""property_owner_email"", regex=r""^[\\w-\\.]+@[\\w-]+\\.[a-zA-Z]{2,4}$"")",1.0,1.0,1.0,90.07916348908397
Ensure the unique count of entries in the `department` column is greater than or equal to 5.,"expect_column_unique_value_count_to_be_between(column=""department"", min_value=5)","expect_column_unique_value_count_to_be_between(column=""department"", min_value=5)",1.0,1.0,1.0,100.00000000000004
For field 'candidate_name': Ensure that this field exists. Validate that the length of each string in 'candidate_name' falls between 1 and 100 characters.,"expect_column_to_exist(column=""candidate_name""),expect_column_value_lengths_to_be_between(column=""candidate_name"", min_value=1, max_value=100)","expect_column_to_exist(column=""candidate_name""),expect_column_values_to_be_between(column=""candidate_name"", min_value=1, max_value=100)",0.9777777777777777,0.9302325581395349,0.9777777777777777,90.86062123206543
For field 'date_of_birth': Ensure values in this field are valid dates and not null. Ensure they fall within the reasonable range of birth years (1900-2023).,"expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""date_of_birth""),expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""2023-12-31"")",0.9382716049382716,0.8860759493670887,0.9382716049382716,90.06515803023419
Ensure the `billing_info` column contains valid JSON objects that conform to the specified schema for customer billing details.,"expect_column_values_to_match_json_schema(column=""billing_info"", schema={})  # Replace {} with the actual JSON schema for customer billing details","expect_column_values_to_match_json_schema(column=""billing_info"", schema={})  # Replace the schema with the appropriate value based on the actual requirements for billing details.",0.8085106382978723,0.6222222222222222,0.7659574468085107,70.02639301654568
For the `order_date`: Ensure all entries adhere to the format 'YYYY-MM-DD' and are not from future dates.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""order_date"", min_value=""1900-01-01"", max_value=""current_date"")",0.793103448275862,0.75,0.793103448275862,68.22483473078438
"For the field `price`: Verify that values are within the range of `$0.01` to `$10,000` and are in increasing order.","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000),expect_column_values_to_be_increasing(column=""price"")","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000),expect_column_values_to_be_increasing(column=""price"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `subscriber_count` column has values that are all integers and within the range of 1 to 1,000,000.","expect_column_values_to_be_of_type(column=""subscriber_count"", type_=""int""),expect_column_values_to_be_between(column=""subscriber_count"", min_value=1, max_value=1000000)","expect_column_values_to_be_of_type(column=""subscriber_count"", type_=""int""),expect_column_values_to_be_between(column=""subscriber_count"", min_value=1, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
Ensure that the `tracking_number` column contains unique values formatted as valid JSON strings.,"expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_be_json_parseable(column=""tracking_number"")","expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_be_json_parseable(column=""tracking_number""),expect_column_values_to_match_json_schema(column=""tracking_number"", schema={""type"": ""string"", ""pattern"": ""^[A-Za-z0-9_]+$"", ""minLength"": 10, ""maxLength"": 20})  # This assumes that tracking numbers consist of alphanumeric characters, underscore (_) only, and length should be between 10 to 20 chars, otherwise consider custom validation.",0.4523809523809524,0.43902439024390244,0.4523809523809524,30.392912229923017
For the `publication_date` field: Ensure all dates are in the format 'YYYY-MM-DD' and are not in the future.,"expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""publication_date"", value_set=some_past_dates)  # Replace some_past_dates with the actual logic to check for future dates.","expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""publication_date"", min_value=""1900-01-01"", max_value=""today"")",0.6399999999999999,0.5753424657534247,0.6399999999999999,63.31569457331279
For table 'case_records': Ensure the column 'case_id' exists and contains unique values. Verify that the total row count is greater than 50.,"expect_column_to_exist(column=""case_id""),expect_column_values_to_be_unique(column=""case_id""),expect_table_row_count_to_be_greater_than(50)","expect_column_to_exist(column=""case_id""),expect_column_values_to_be_unique(column=""case_id""),expect_table_row_count_to_be_between(min_value=50)",0.9019607843137256,0.8571428571428572,0.9019607843137256,87.94523696541728
For the `ip_address` field: Ensure it adheres to the correct format and does not contain any null values.,"expect_column_values_to_not_be_null(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){2}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"")","expect_column_to_exist(column=""ip_address""),expect_column_values_to_not_be_null(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:10\.|\d{1,3}\.){3}\d{1,3}$|127\.0\.0\.1|::1$"")",0.45098039215686275,0.4,0.45098039215686275,28.94460271287094
Check that `tracking_number` is unique across all records and adheres to the specified format of 10 alphanumeric characters.,"expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_match_regex(column=""tracking_number"", regex=r""^[a-zA-Z0-9]{10}$"")","expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_match_regex(column=""tracking_number"", regex=r""^\w{10}$"")",0.8936170212765958,0.8444444444444444,0.8936170212765958,88.21752023698005
Verify that the sum of the `property_tax` and `income_tax` columns equals the expected `total_tax` value for each record.,"expect_multicolumn_sum_to_equal(column_list=[""property_tax"", ""income_tax""], target_column=""total_tax"")","expect_multicolumn_sum_to_equal(column_A=""property_tax"", column_B=""income_tax"", target_column=""total_tax"")",0.8749999999999999,0.7333333333333334,0.8749999999999999,72.3383922572741
"Check that the `inventory_count` column does not contain negative values, ensuring valid stock levels.","expect_column_values_to_be_between(column=""inventory_count"", min_value=0)","expect_column_values_to_be_greater_than(column=""inventory_count"", value=0)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
For field 'transaction_details': Ensure that values in this column are valid JSON objects and conform to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""transaction_details""),expect_column_values_to_match_json_schema(column=""transaction_details"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""transaction_details""),expect_column_values_to_match_json_schema(column=""transaction_details"", schema={""type"": ""object"", ""required"": [""amount"", ""currency"", ""item_name"", ""transaction_date"", ""transaction_id""]})  # This is just an example, the actual schema may vary depending on your requirements.",0.6666666666666666,0.6567164179104478,0.6666666666666666,51.8845145309731
For field `product_id`: Ensure the field contains only unique values. Confirm it is of type 'integer' and has no missing values.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""product_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
"Check that the `grade_level` values are restricted to the set of integers: {9, 10, 11, 12}.","expect_column_values_to_be_in_set(column=""grade_level"", value_set={9, 10, 11, 12})","expect_column_values_to_be_in_set(column=""grade_level"", value_set=[9, 10, 11, 12])",1.0,1.0,1.0,87.40972275005228
Ensure the `booking_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""booking_id""),expect_column_values_to_not_be_null(column=""booking_id"")","expect_column_values_to_be_unique(column=""booking_id""),expect_column_values_to_not_be_null(column=""booking_id"")",1.0,1.0,1.0,100.00000000000004
For field `platform`: Ensure values are valid JSON objects that match the specified schema for gaming platforms.,"expect_column_values_to_match_json_schema(column=""platform"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""type"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""platform""),expect_column_values_to_match_json_schema(column=""platform"", schema={""type"": ""object""})  # Since type is an object, the schema will match any valid JSON object.",0.49056603773584906,0.43137254901960786,0.49056603773584906,45.214436006310756
In the `hotel_rating` column: Ensure that values are within the range of 1 to 5. Check for any null entries and confirm that the ratings are unique.,"expect_column_values_to_be_between(column=""hotel_rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""hotel_rating""),expect_column_values_to_be_unique(column=""hotel_rating"")","expect_column_values_to_be_between(column=""hotel_rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""hotel_rating""),expect_column_values_to_be_unique(column=""hotel_rating"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_id` column contains only unique values and does not exceed a length of 50 characters.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_value_lengths_to_be_between(column=""product_id"", min_value=0, max_value=50)","expect_column_values_to_be_unique(column=""product_id""),expect_column_value_lengths_to_be_between(column=""product_id"", min_value=1, max_value=50)",0.96,0.9166666666666666,0.96,95.25618205602056
For field 'customer_id': Ensure this field contains unique values. Ensure this field matches the type 'integer'. Ensure this field is required (not null).,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
"For field `shipment_details`: Validate that it is a valid JSON object containing keys ['tracking_number', 'carrier', 'status']. Ensure values are not null.","expect_column_values_to_be_json_parseable(column=""shipment_details""),expect_column_values_to_not_be_null(column=""shipment_details""),expect_column_values_to_match_json_schema(column=""shipment_details"", schema={""type"": ""object"", ""properties"": {""tracking_number"": {""type"": ""string""}, ""carrier"": {""type"": ""string""}, ""status"": {""type"": ""string""}}}})","expect_column_values_to_be_json_parseable(column=""shipment_details""),expect_column_values_to_match_json_schema(column=""shipment_details"", schema={""type"": ""object"", ""properties"": {""tracking_number"": {""type"": ""string"", ""minLength"": 10, ""maxLength"": 20}, ""carrier"": {""type"": ""string"", ""maxLength"": 50}, ""status"": {""type"": ""string"", ""maxLength"": 50}}})  # Note: Assuming tracking_number, carrier, and status are string values.",0.7291666666666666,0.6595744680851063,0.7083333333333333,70.1460694045496
Ensure the `user_score` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""user_score"", threshold=0.05)","expect_column_kst_test_p_value_to_be_greater_than(column=""user_score"", threshold=0.05)",0.8823529411764706,0.8125,0.8823529411764706,80.81115699296404
"For the `employee_count`: Ensure that the mean value of this column falls between 1 and 500, and check for any entries that are out of this range.","expect_column_mean_to_be_between(column=""employee_count"", min_value=1, max_value=500),expect_column_values_to_be_between(column=""employee_count"", min_value=1, max_value=500)","expect_column_mean_to_be_between(column=""employee_count"", min_value=1, max_value=500),expect_column_values_to_not_be_outside_range(column=""employee_count"", min_value=None, max_value=500)",0.9032258064516129,0.7999999999999999,0.9032258064516129,85.34471003715605
Check that the `enrollment_date` column contains valid dates and is not in the future.,"expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_less_than(column=""enrollment_date"", value=""now"")","expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2022-01-01"", max_value=""today"")",0.7755102040816326,0.6808510638297872,0.7755102040816326,67.09897239480333
"For field `status`: Ensure values in `status` must exist in the set `['Active', 'Inactive', 'Prospective']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Prospective'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Prospective'])",1.0,1.0,1.0,100.00000000000004
"For field 'case_type': Ensure the field is required (not null). Ensure values in 'case_type' must exist in the set ('civil', 'criminal', 'family', 'business').","expect_column_values_to_not_be_null(column=""case_type""),expect_column_values_to_be_in_set(column=""case_type"", value_set=['civil', 'criminal', 'family', 'business'])","expect_column_to_exist(column=""case_type""),expect_column_values_to_not_be_null(column=""case_type""),expect_column_values_to_be_in_set(column=""case_type"", value_set=['civil', 'criminal', 'family', 'business'])",0.8813559322033898,0.8771929824561403,0.8813559322033898,77.17530652516336
Validate the JSON structure of the `order_details` column against the defined schema. Ensure that all values are present and correctly formatted.,"expect_column_values_to_match_json_schema(column=""order_details"", schema={""type"": ""object"", ""properties"": {...}})  # Replace {...} with the actual schema definition.","expect_column_to_exist(column=""order_details""),expect_column_values_to_match_json_schema(column=""order_details"", schema={""type"": ""object"", ""properties"": {}})  # Replace {} with the actual schema for your defined schema.",0.7599999999999999,0.75,0.7599999999999999,64.17789563786359
"For the `subscription_type` column: Ensure it only contains values from the set `['Free', 'Basic', 'Premium']` and that each user has exactly one subscription type.","expect_column_values_to_be_in_set(column=""subscription_type"", value_set=['Free', 'Basic', 'Premium']),expect_column_values_to_be_unique(column=""subscription_type"")","expect_column_values_to_be_in_set(column=""subscription_type"", value_set=['Free', 'Basic', 'Premium']),expect_column_values_to_be_unique(column=""subscription_type""),expect_column_value_pair_distinct_values_to_be_between(column1=""user_id"", column2=""subscription_type"", min_value=1, max_value=1)",0.6956521739130436,0.6865671641791045,0.6956521739130436,53.22549763633355
"Ensure the `vehicle_type` column entries are from the set `['Truck', 'Van', 'Motorcycle']`.","expect_column_values_to_be_in_set(column=""vehicle_type"", value_set=['Truck', 'Van', 'Motorcycle'])","expect_column_values_to_be_in_set(column=""vehicle_type"", value_set=['Truck', 'Van', 'Motorcycle'])",1.0,1.0,1.0,100.00000000000004
Verify that the `goals_scored` column contains only non-negative values and conforms to the type 'integer'.,"expect_column_values_to_be_between(column=""goals_scored"", min_value=0),expect_column_values_to_be_of_type(column=""goals_scored"", type_=""int"")","expect_column_values_to_be_of_type(column=""goals_scored"", type_=""int""),expect_column_values_to_be_between(column=""goals_scored"", min_value=0)",1.0,0.9565217391304348,0.6666666666666666,98.58120083502484
"For fields `email_subject` and `email_body`: Ensure that for every record, both fields must not be null and `email_subject` must be unique within the same `user_id`.","expect_column_values_to_not_be_null(column=""email_subject""),expect_column_values_to_not_be_null(column=""email_body""),expect_select_column_values_to_be_unique_within_record(column_a=""email_subject"", column_b=""user_id"")","expect_column_values_to_not_be_null(column=""email_subject""),expect_column_values_to_be_unique_within_record(column=""email_subject"")",0.7241379310344828,0.7142857142857143,0.7241379310344828,44.73194616047284
"For the `hashtag` column: Verify that it contains valid hashtags, ensuring no entries exceed the defined character limit of `30`.","expect_column_values_to_match_regex(column=""hashtag"", regex=r""^#[A-Za-z0-9_]{1,30}$"")","expect_column_values_to_match_regex(column=""hashtag"", regex=r""#[a-zA-Z0-9_]{1,30}""),expect_column_value_lengths_to_be_between(column=""hashtag"", min_value=1, max_value=30)",0.6808510638297872,0.6666666666666666,0.6808510638297872,41.58789400341744
Confirm that the `birthdate` column has dates that are not in the future and formatted as `YYYY-MM-DD`.,"expect_column_values_to_be_dateutil_parseable(column=""birthdate""),expect_column_values_to_match_strftime_format(column=""birthdate"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""birthdate"")","expect_column_values_to_be_dateutil_parseable(column=""birthdate""),expect_column_values_to_match_strftime_format(column=""birthdate"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""birthdate"", value=""today"")  # Assuming the current date and time are already available.",0.810810810810811,0.7777777777777778,0.810810810810811,75.63786122442808
For the `score` column: Ensure the average score is greater than or equal to 50. Validate that no scores exceed 100.,"expect_column_mean_to_be_between(column=""score"", min_value=50, max_value=None),expect_column_max_to_be_between(column=""score"", max_value=100)","expect_column_mean_to_be_between(column=""score"", min_value=50, max_value=100),expect_column_max_to_be_between(column=""score"", max_value=100)",0.96,0.9166666666666666,0.96,95.25618205602056
Ensure the `invoice_number` column exists and contains only unique values.,"expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_unique(column=""invoice_number"")","expect_column_to_exist(column=""invoice_number""),expect_column_values_to_be_unique(column=""invoice_number"")",1.0,1.0,1.0,100.00000000000004
Ensure the `property_id` column contains unique values and is of type 'integer'.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""int"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""integer"")",0.9523809523809523,0.9500000000000001,0.9523809523809523,95.30451753349615
Verify that the `source_ip` column consists of valid IP addresses and does not contain duplicates.,"expect_column_values_to_be_unique(column=""source_ip""),expect_column_values_to_match_regex(column=""source_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_match_regex(column=""source_ip"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]$)"", expect_column_values_to_be_unique(column=""source_ip"")",0.4752475247524752,0.4040404040404041,0.297029702970297,26.46926974311476
"For field `property_type`: Ensure the field matches the type 'text' and values are from the set `['apartment', 'house', 'commercial']`.","expect_column_values_to_be_of_type(column=""property_type"", type_=""text""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['apartment', 'house', 'commercial'])","expect_column_values_to_be_of_type(column=""property_type"", type_=""text""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['apartment', 'house', 'commercial'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `forecast_data.csv` file contains at least one record for each day of the past year.,"expect_file_to_exist(file_path=""forecast_data.csv""),expect_file_line_regex_match_count_to_be_between(file_path=""forecast_data.csv"", regex=r""^\d{4}-\d{2}-\d{2}"", min_value=365)","expect_file_row_count_to_be_between(file_path=""forecast_data.csv"", min_value=365)",0.5714285714285713,0.4680851063829786,0.5714285714285713,19.60254763095236
"Validate the `json_response_code` column contains values that match the set of expected response codes: `[200, 400, 404, 500]`.","expect_column_values_to_be_in_set(column=""json_response_code"", value_set=[200, 400, 404, 500])","expect_column_values_to_be_in_set(column=""json_response_code"", value_set=[200, 400, 404, 500])",1.0,1.0,1.0,100.00000000000004
"Check that the `category` column values are from the specified set: `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
Ensure the `release_year` column values are within the range 2000 to 2023.,"expect_column_values_to_be_between(column=""release_year"", min_value=2000, max_value=2023)","expect_column_values_to_be_between(column=""release_year"", min_value=2000, max_value=2023)",1.0,1.0,1.0,100.00000000000004
For field 'attachment_type': Ensure the field matches the type 'text'. Validate that values in (attachment_type) conform to a list of acceptable file extensions using regex.,"expect_column_values_to_be_of_type(column=""attachment_type"", type_=""text""),expect_column_values_to_match_regex(column=""attachment_type"", regex=r""^(pdf|doc|docx|xls|xlsx|jpg|jpeg|png|gif)$"")","expect_column_values_to_be_of_type(column=""attachment_type"", type_=""text""),expect_column_values_to_match_regex_list(column=""attachment_type"", regex_list=[r"".png"", r"".jpeg"", r"".jpg"", r"".gif"", r"".pdf"", r"".txt"", r"".doc"", r"".docx"", r"".rtf"", r"".xls"", r"".xlsx"", r"".ppt"", r"".pptx"", r"".pptx"", r"".mp4"", r"".mp3"", r"".avi"", r"".flv"", r"".mov"", r"".webm"", r"".mkv"", r"".m4a""])",0.6399999999999999,0.4285714285714286,0.56,27.16406230644849
Validate that the `humidity` column's standard deviation is less than 15%.,"expect_column_stdev_to_be_between(column=""humidity"", min_value=0, max_value=15)","expect_column_stdev_to_be_between(column=""humidity"", min_value=None, max_value=15)",0.9285714285714286,0.8461538461538461,0.9285714285714286,90.9593063222022
Ensure the `score` column values are within the range of 0 to 300 for all matches.,"expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300)","expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300)",1.0,1.0,1.0,100.00000000000004
"For field 'customer_email': Validate that the field matches the type 'string'. Ensure values in (customer_email) match the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'. Ensure this field exists.","expect_column_to_exist(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""string""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""string""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `precipitation` column contains only non-negative values.,"expect_column_values_to_be_between(column=""precipitation"", min_value=0)","expect_column_values_to_be_between(column=""precipitation"", min_value=0, max_value=None)",0.88,0.8695652173913044,0.88,76.20097727769573
"Ensure the 'device_status' column contains only distinct values that match ['active', 'inactive', 'error'].","expect_column_distinct_values_to_equal_set(column=""device_status"", value_set=[""active"", ""inactive"", ""error""])","expect_column_values_to_be_unique(column=""device_status""),expect_column_values_to_be_in_set(column=""device_status"", value_set=[""active"", ""inactive"", ""error""])",0.6666666666666667,0.5405405405405405,0.6666666666666667,56.0285820498959
"For field 'transaction_type': Ensure the field exists. Validate that 'transaction_type' matches one of the specified values: (Deposit, Withdrawal, Transfer).","expect_column_to_exist(column=""transaction_type""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Deposit"", ""Withdrawal"", ""Transfer""])","expect_column_to_exist(column=""transaction_type""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Deposit"", ""Withdrawal"", ""Transfer""])",1.0,1.0,1.0,100.00000000000004
"For field `transaction_type`: Ensure the field contains only distinct values matching `['credit', 'debit', 'refund']`.","expect_column_distinct_values_to_equal_set(column=""transaction_type"", value_set=['credit', 'debit', 'refund'])","expect_column_distinct_values_to_equal_set(column=""transaction_type"", value_set=['credit', 'debit','refund'])",1.0,1.0,1.0,100.00000000000004
For field 'check_in_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure that the date is not in the past.,"expect_column_values_to_not_be_null(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_increasing(column=""check_in_date"")","expect_column_values_to_not_be_null(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_in_set(column=""check_in_date"", value_set=[datetime.datetime.now().date(), datetime.datetime.utcnow().date(), datetime.datetime.today().date(),...])  # Add the latest 30 dates as needed (assuming you only need to check the last 30 days of booking).",0.6470588235294118,0.62,0.6470588235294118,49.971239775563646
For field 'contact_date': Ensure the field matches the type 'datetime'. Confirm that values follow the 'YYYY-MM-DD' format and are within the last 12 months.,"expect_column_values_to_be_of_type(column=""contact_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""contact_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""contact_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_of_type(column=""contact_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""contact_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""contact_date"", min_value=""2022-01-01"", max_value=""2023-01-01"")ılmaktadır",0.9361702127659574,0.891304347826087,0.9361702127659574,94.47581039237411
"For the `battery_level` column: Validate that entries are integers within the range of [0, 100] and represent percentage values.","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int"")","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Verify that the `email` column contains valid email formats and no duplicate entries exist.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")",1.0,1.0,1.0,100.00000000000004
"In the `comment_count` column: Ensure that the mean is within the range of 0 to 100, with no missing values.","expect_column_mean_to_be_between(column=""comment_count"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""comment_count"")","expect_column_mean_to_be_between(column=""comment_count"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""comment_count"")",1.0,1.0,1.0,100.00000000000004
Verify that the `stock_quantity` values are between 0 and 1000.,"expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'location': Ensure the field is required (not null). Ensure this field exists and matches the type 'text'.,"expect_column_to_exist(column=""location""),expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text"")","expect_column_to_exist(column=""location""),expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field 'product_id': Ensure all product IDs are alphanumeric and exactly 12 characters long. Validate that no duplicates exist.,"expect_column_value_lengths_to_equal(column=""product_id"", length=12),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[a-zA-Z0-9]{12}$""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_match_regex(column=""product_id"", regex=r""^[a-zA-Z0-9]{12}$""),expect_column_values_to_be_unique(column=""product_id"")",0.819672131147541,0.8135593220338984,0.819672131147541,64.49409664697825
"For the column 'weight': Ensure the mean value is between 50 and 200, and that the standard deviation does not exceed 30.","expect_column_mean_to_be_between(column=""weight"", min_value=50, max_value=200),expect_column_stdev_to_be_between(column=""weight"", min_value=0, max_value=30)","expect_column_mean_to_be_between(column=""weight"", min_value=50, max_value=200),expect_column_stdev_to_be_between(column=""weight"", min_value=0, max_value=30)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column contains numeric values only and that all entries are within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_be_of_type(column=""temperature"", type_=""int""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",0.96,0.9166666666666666,0.96,95.51190479308646
For field 'delivery_address': Ensure the field exists. Validate that all values in 'delivery_address' are at least 10 characters long and do not exceed 200 characters.,"expect_column_to_exist(column=""delivery_address""),expect_column_value_lengths_to_be_between(column=""delivery_address"", min_value=10, max_value=200)","expect_column_to_exist(column=""delivery_address""),expect_column_values_to_be_between(column=""delivery_address"", min_value=10, max_value=200)",0.9777777777777777,0.9302325581395349,0.9777777777777777,90.86062123206543
Check that the `order_date` column contains valid datetime entries that can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_be_dateutil_parseable(column=""order_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `voter_email` column matches the regex for valid email addresses and contains no duplicates.,"expect_column_values_to_match_regex(column=""voter_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""voter_email"")","expect_column_values_to_match_regex(column=""voter_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""voter_email"")",0.7272727272727273,0.679245283018868,0.7272727272727273,72.24483321706488
Check that the `incident_id` column contains unique values across all rows in the dataset.,"expect_column_values_to_be_unique(column=""incident_id"")","expect_column_values_to_be_unique(column=""incident_id"")",1.0,1.0,1.0,100.00000000000004
For the `voter_id` column: Ensure all entries are unique and not null. Validate that they adhere to the specified alphanumeric format.,"expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_match_regex(column=""voter_id"", regex=r""^[a-zA-Z0-9]+$"")","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_match_regex(column=""voter_id"", regex=r""^([a-zA-Z0-9 ]+)?$"")",1.0,1.0,1.0,92.36558567091664
"For the `post_content` field, validate that the length does not exceed 280 characters and contains no invalid JSON objects.","expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_be_json_parseable(column=""post_content"")","expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_be_json_parseable(column=""post_content"")",0.9811320754716981,0.9411764705882353,0.9811320754716981,95.17640016712039
Verify that the total sum of `claim_amount` for each `policy_number` is equal to the specified expected values in the `expected_claims` table.,"expect_multicolumn_sum_to_equal(column_list=[""policy_number"", ""claim_amount""], expected_value=expected_claims)","expect_multicolumn_sum_to_be_between(column_list=[""claim_amount""], expected_column_sum=expected_claims)",0.7333333333333333,0.5,0.7333333333333333,65.47547973703342
For field `department_id`: Ensure the field matches the type 'integer'. Verify that values in `department_id` exist in the `departments` table.,"expect_column_values_to_be_of_type(column=""department_id"", type_=""int""),expect_column_values_to_be_in_set(column=""department_id"", value_set=[value from departments table])","expect_column_values_to_be_of_type(column=""department_id"", type_=""int""),expect_column_values_to_be_in_set(column=""department_id"", value_set=department_ids)  # Replace department_ids with actual IDs from the departments table.",0.8437499999999999,0.7741935483870968,0.8437499999999999,77.89315418131437
Ensure the `enrollment_count` follows a Poisson distribution with a mean of at least 10.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""enrollment_count"", threshold=0.05)","expect_column_mean_to_be_between(column=""enrollment_count"", min_value=10)",0.5333333333333333,0.2857142857142857,0.4666666666666666,38.83668539362839
For field 'tracking_url': Ensure the field matches the type 'text'. Ensure the field matches the format 'URL'. Ensure this field exists.,"expect_column_to_exist(column=""tracking_url""),expect_column_values_to_be_of_type(column=""tracking_url"", type_=""text""),expect_column_values_to_match_regex(column=""tracking_url"", regex=r""^(https?://[^\s/$.?#].[^\s]*)$"")","expect_column_to_exist(column=""tracking_url""),expect_column_values_to_be_of_type(column=""tracking_url"", type_=""text""),expect_column_values_to_match_regex(column=""tracking_url"", regex=r""^https?://.*$"")",0.96875,0.967741935483871,0.96875,76.63162115594847
Ensure the `case_number` column contains only unique values and is of type 'text'.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For the `product_category` field: Ensure all entries match the set `['Electronics', 'Furniture', 'Clothing']`.","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing'])","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing'])ЎыџN",0.967741935483871,0.9655172413793104,0.967741935483871,97.01154303042087
Ensure the `event_time` column contains values parsed correctly as datetime objects with timezone awareness.,"expect_column_values_to_be_dateutil_parseable(column=""event_time"")","expect_column_values_to_be_of_type(column=""event_time"", type_=""datetime""),expect_column_values_to_be_dateutil_parseable(column=""event_time""),expect_column_values_to_match_strftime_format(column=""event_time"", strftime_format=""%Y-%m-%dT%H:%M:%S%z"")  # Replace %z with UTC to ensure values are parsed as datetime objects with timezone.",0.3076923076923077,0.2857142857142857,0.3076923076923077,18.035641893156978
Ensure the 'amount' column contains numeric values only and does not contain any missing values.,"expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_not_be_null(column=""amount"")","expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_not_be_null(column=""amount"")",1.0,1.0,1.0,100.00000000000004
For the table 'smart_contracts': Ensure the number of rows is equal to the row count in 'active_contracts'. Ensure 'contract_address' is unique.,"expect_table_row_count_to_equal(other_table=""active_contracts""),expect_column_values_to_be_unique(column=""contract_address"")","expect_table_row_count_to_be_between(table=""smart_contracts"", min_value=active_contracts.row_count, max_value=active_contracts.row_count),expect_column_values_to_be_unique(column=""contract_address""),expect_column_values_to_be_in_set(column=""contract_address"", value_set=active_contracts.contract_address)",0.5151515151515151,0.40625,0.5151515151515151,33.20490376151702
Ensure the 'sender_id' column contains only unique values. Validate that this field exists and is not empty.,"expect_column_to_exist(column=""sender_id""),expect_column_values_to_not_be_null(column=""sender_id""),expect_column_values_to_be_unique(column=""sender_id"")","expect_column_to_exist(column=""sender_id""),expect_column_values_to_be_unique(column=""sender_id""),expect_column_values_to_not_be_null(column=""sender_id"")",1.0,1.0,0.8846153846153846,100.00000000000004
Check that the `quantity` column values are within the range of 1 to 1000 and are arranged in increasing order.,"expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000),expect_column_values_to_be_increasing(column=""quantity"")","expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000),expect_column_values_to_be_increasing(column=""quantity"")",1.0,1.0,1.0,100.00000000000004
For fields 'hire_date' and 'termination_date': Ensure both fields match the type 'date'. Validate that (termination_date) is greater than (hire_date) for all records. Ensure these fields exist.,"expect_column_to_exist(column=""hire_date""),expect_column_to_exist(column=""termination_date""),expect_column_values_to_be_of_type(column=""hire_date"", type_=""date""),expect_column_values_to_be_of_type(column=""termination_date"", type_=""date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""termination_date"", column_B=""hire_date"")","expect_column_to_exist(column=""hire_date""),expect_column_to_exist(column=""termination_date""),expect_column_values_to_be_of_type(column=""hire_date"", type_=""date""),expect_column_values_to_be_of_type(column=""termination_date"", type_=""date"")  # Assuming we're using PostgreSQL. If using other databases, modify the expected type to match the respective database.",0.7142857142857143,0.6727272727272727,0.7142857142857143,68.60815573582155
"For the `account_status` field, ensure it contains only distinct values from the set `['Active', 'Inactive', 'Closed']`.","expect_column_distinct_values_to_equal_set(column=""account_status"", value_set=['Active', 'Inactive', 'Closed'])","expect_column_distinct_values_to_equal_set(column=""account_status"", value_set=[""Active"", ""Inactive"", ""Closed""])",1.0,1.0,1.0,69.17381010255603
"Validate that the `tags` column contains at least one tag that matches the regex pattern `^[a-zA-Z0-9]+$` and does not include any invalid tags from the list `['spam', 'advertisement']`.","expect_column_values_to_match_regex(column=""tags"", regex=r""^[a-zA-Z0-9]+$""),expect_column_values_to_not_match_regex_list(column=""tags"", regex_list=[""spam"", ""advertisement""])","expect_column_values_to_not_be_null(column=""tags""),expect_column_values_to_match_regex(column=""tags"", regex=r""^[a-zA-Z0-9]+$""),expect_column_values_to_not_be_in_set(column=""tags"", value_set=['spam', 'advertisement'])",0.7076923076923075,0.634920634920635,0.7076923076923075,58.75086319848831
Verify that the `customer_email` column contains valid email addresses and is not null.,"expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')","expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.7586206896551725,0.7142857142857143,0.7586206896551725,72.18596437481183
Check that the `weight` column contains numeric values that do not exceed the maximum weight limit of 1000 kg.,"expect_column_values_to_be_between(column=""weight"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""weight"", min_value=None, max_value=1000)",0.9285714285714286,0.8461538461538461,0.9285714285714286,90.9593063222022
For the `policy_start_date` field: Validate that all dates are in the format 'YYYY-MM-DD' and fall between '2000-01-01' and today's date. Ensure this field exists.,"expect_column_to_exist(column=""policy_start_date""),expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""policy_start_date"", min_value=""2000-01-01"", max_value=""2023-10-01"")  # Replace with today's date as needed","expect_column_to_exist(column=""policy_start_date""),expect_column_values_to_match_strftime_format(column=""policy_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""policy_start_date"", min_value=""2000-01-01"", max_value=datetime.date.today())",0.9052631578947369,0.8602150537634408,0.8842105263157896,86.5142683707451
Check that the `meter_reading` column contains only non-negative integer values.,"expect_column_values_to_be_between(column=""meter_reading"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""meter_reading"", type_=""int"")","expect_column_values_to_be_between(column=""meter_reading"", min_value=0, max_value=None)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
Ensure the `wallet_address` column contains only unique values and adheres to the correct format.,"expect_column_values_to_be_unique(column=""wallet_address""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^(0x)?[0-9a-fA-F]{40}$"")","expect_column_values_to_be_unique(column=""wallet_address""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[A-Fa-f0-9]{40}$"")",0.8846153846153846,0.8000000000000002,0.8846153846153846,85.13068660975874
Validate that the `order_total` column is the sum of the individual item prices multiplied by their respective quantities and check for any discrepancies.,"expect_column_pair_values_to_be_equal(column_A=""order_total"", column_B=""item_price * quantity"")","expect_column_sum_to_equal_other_column(column=""order_total"", other_column=""order_item_total""),expect_column_values_to_be_between(column=""order_item_total"", min_value=0)",0.5,0.19047619047619047,0.40909090909090917,26.265625344305263
"Verify that the `email` column contains valid email addresses, ensuring no duplicate entries exist.","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9767441860465117,0.9268292682926829,0.6046511627906977,91.53963810129814
"For field 'crypto_symbol': Ensure the field matches the type 'string'. Ensure values in (crypto_symbol) must exist in the set of valid symbols (['BTC', 'ETH', 'LTC']). Ensure this field exists.","expect_column_to_exist(column=""crypto_symbol""),expect_column_values_to_be_of_type(column=""crypto_symbol"", type_=""string""),expect_column_values_to_be_in_set(column=""crypto_symbol"", value_set=['BTC', 'ETH', 'LTC'])","expect_column_to_exist(column=""crypto_symbol""),expect_column_values_to_be_of_type(column=""crypto_symbol"", type_=""string""),expect_column_values_to_be_in_set(column=""crypto_symbol"", value_set=['BTC', 'ETH', 'LTC'])",1.0,1.0,1.0,100.00000000000004
"In the `total_cost` column: Verify that all values are within the range of 0 to 1,000,000. Ensure no outliers exist.","expect_column_values_to_be_between(column=""total_cost"", min_value=0, max_value=1000000),expect_column_stdev_to_be_between(column=""total_cost"", min_value=0, max_value=100000)","expect_column_values_to_be_between(column=""total_cost"", min_value=0, max_value=1000000)  # Replace the min_value with the actual min value and max_value with the actual max value.",0.6129032258064516,0.5333333333333333,0.6129032258064516,51.619551851920065
"For the `performance_rating` column: Ensure it contains values that are within the range of 1 to 5, and that all entries are non-null and of type 'integer'.","expect_column_values_to_be_between(column=""performance_rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""performance_rating""),expect_column_values_to_be_of_type(column=""performance_rating"", type_=""int"")","expect_column_values_to_be_between(column=""performance_rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""performance_rating""),expect_column_values_to_be_of_type(column=""performance_rating"", type_=""integer"")",0.972972972972973,0.9722222222222222,0.972972972972973,97.28704561162816
For the 'developer' field: Ensure the field exists and matches the type 'text'. Validate that its length is between 3 and 50 characters and does not contain numeric values.,"expect_column_to_exist(column=""developer""),expect_column_values_to_be_of_type(column=""developer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""developer"", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=""developer"", regex=r""\d"")","expect_column_to_exist(column=""developer""),expect_column_values_to_be_of_type(column=""developer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""developer"", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=""developer"", regex=r""^[0-9]*$"")",0.9662921348314608,0.9655172413793104,0.9662921348314608,91.46244699636263
Validate that the `author_email` column contains valid email formats and does not allow duplicate values.,"expect_column_values_to_match_regex(column=""author_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""author_email"")","expect_column_values_to_match_regex(column=""author_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""author_email"")",0.7272727272727273,0.679245283018868,0.7272727272727273,72.24483321706488
Ensure the `origin` and `destination` columns exist and contain valid strings representing city names.,"expect_column_to_exist(column=""origin""),expect_column_to_exist(column=""destination""),expect_column_values_to_match_regex(column=""origin"", regex=r""^[a-zA-Z\s]+$""),expect_column_values_to_match_regex(column=""destination"", regex=r""^[a-zA-Z\s]+$"")","expect_column_to_exist(column=""origin""),expect_column_values_to_be_of_type(column=""origin"", type_=""text""),expect_column_values_to_be_of_type(column=""destination"", type_=""text"")",0.5294117647058824,0.42424242424242425,0.5294117647058824,45.420844029789116
For table 'community_events': Ensure the 'event_location' column exists. Ensure that all values in 'event_location' are non-empty strings.,"expect_column_to_exist(column=""event_location""),expect_column_values_to_not_be_null(column=""event_location""),expect_column_values_to_match_regex(column=""event_location"", regex=r""^.+$"")","expect_table_column_to_exist(column=""event_location""),expect_column_values_to_be_of_type(column=""event_location"", type_=""text""),expect_column_values_to_not_be_null(column=""event_location"")",0.8275862068965518,0.7142857142857143,0.7586206896551724,78.48129976772466
"For `network_type`, confirm that values belong to the set `['2G', '3G', '4G', '5G']` and do not contain any duplicates.","expect_column_values_to_be_in_set(column=""network_type"", value_set=['2G', '3G', '4G', '5G']),expect_column_values_to_be_unique(column=""network_type"")","expect_column_values_to_be_in_set(column=""network_type"", value_set=['2G', '3G', '4G', '5G']),expect_column_values_to_be_unique(column=""network_type"")",1.0,1.0,1.0,100.00000000000004
Ensure the `hire_date` column contains datetime entries that can be parsed and match the format `'%Y-%m-%d'`.,"expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format='%Y-%m-%d')","expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,90.61100081150309
For field `patient_age`: Ensure the values fall within the range of `0` to `120` and are arranged in increasing order.,"expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120),expect_column_values_to_be_increasing(column=""patient_age"")","expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120),expect_column_values_to_be_increasing(column=""patient_age"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_id` column contains unique values and matches the specified format of alphanumeric strings.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[a-zA-Z0-9]+$"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Za-z0-9]{3,}$"")",0.9795918367346939,0.9787234042553191,0.9795918367346939,85.65164546219137
Verify that the `area_code` column values match the regex pattern for US area codes: `^\d{3}$`.,"expect_column_values_to_match_regex(column=""area_code"", regex=r""^\d{3}$"")","expect_column_values_to_match_regex(column=""area_code"", regex=r""^\d{3}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `grade` column values are within the range of 0 to 100 and are in increasing order.,"expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_increasing(column=""grade"")","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_increasing(column=""grade"")",1.0,1.0,1.0,100.00000000000004
Check that the `user_rating` column contains numeric values within the range of `0` to `10`.,"expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10)","expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10)",1.0,1.0,1.0,100.00000000000004
"For the `salary` field: Validate that all values are of type 'decimal', and ensure no missing values are present.","expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_not_be_null(column=""salary"")","expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_not_be_null(column=""salary"")",1.0,1.0,1.0,100.00000000000004
Verify that the `user_id` in the `Legal Case Management` and `CRM` systems are unique and do not contain any null values.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `location` field contains valid JSON objects with keys `latitude` and `longitude`.,"expect_column_values_to_be_json_parseable(column=""location""),expect_column_values_to_match_json_schema(column=""location"", schema={""type"": ""object"", ""properties"": {""latitude"": {""type"": ""number""}, ""longitude"": {""type"": ""number""}}})","expect_column_values_to_match_json_schema(column=""location"", schema={""type"": ""object"", ""properties"": {""latitude"": {""type"": ""number""}, ""longitude"": {""type"": ""number""}}, ""required"": [""latitude"", ""longitude""]})",0.76,0.75,0.76,74.62103674523638
For the `submission_date` column: Verify that the mean submission date does not exceed 30 days from the current date. Ensure it contains no null entries.,"expect_column_mean_to_be_between(column=""submission_date"", min_value=None, max_value=current_date - timedelta(days=30)),expect_column_values_to_not_be_null(column=""submission_date"")","expect_column_mean_to_be_between(column=""submission_date"", min_value=current_date - timedelta(days=30), max_value=current_date),expect_column_values_to_not_be_null(column=""submission_date"")",0.9491525423728815,0.8771929824561403,0.8813559322033899,90.5619259480469
"Ensure the `property_type` column contains only distinct values matching `['Apartment', 'House', 'Condo']`.","expect_column_distinct_values_to_equal_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo'])","expect_column_distinct_values_to_match_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo'])",0.9333333333333333,0.8571428571428571,0.9333333333333333,92.10500207490826
For the field 'customer_name': Ensure this field matches the type 'text'. Validate that the length of each name is between 3 and 50 characters.,"expect_column_values_to_be_of_type(column=""customer_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_name"", min_value=3, max_value=50)","expect_column_values_to_be_of_type(column=""customer_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_name"", min_value=3, max_value=50)",1.0,1.0,1.0,100.00000000000004
For field 'age_of_voter': Ensure this field has a type of 'integer'. Validate that all values are greater than or equal to 18 and can pass KS test for uniform distribution.,"expect_column_values_to_be_of_type(column=""age_of_voter"", type_=""int""),expect_column_values_to_be_between(column=""age_of_voter"", min_value=18),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""age_of_voter"", threshold=0.05)","expect_column_values_to_be_of_type(column=""age_of_voter"", type_=""int""),expect_column_values_to_be_between(column=""age_of_voter"", min_value=18, max_value=None)  # assuming min_value=18 and max_value=None (there is no upper limit on the age of the voter)",0.6451612903225806,0.5714285714285714,0.6451612903225806,62.14443850597281
For field 'delivery_date': Ensure the field exists. Validate that 'delivery_date' follows the format 'MM/DD/YYYY' and is later than 'order_date'.,"expect_column_to_exist(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%m/%d/%Y""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%m/%d/%Y""),expect_column_pair_values_to_be_less_than(column_A=""delivery_date"", column_B=""order_date"")",0.9487179487179489,0.868421052631579,0.9487179487179489,90.80367965596008
Ensure the `shipping_cost` column matches the expected type 'numeric' and contains no missing values.,"expect_column_values_to_be_of_type(column=""shipping_cost"", type_=""numeric""),expect_column_values_to_not_be_null(column=""shipping_cost"")","expect_column_values_to_be_of_type(column=""shipping_cost"", type_=""numeric""),expect_column_values_to_not_be_null(column=""shipping_cost"")",1.0,1.0,1.0,100.00000000000004
In the `enrollment_date` column: Validate that all entries are in the format 'MM/DD/YYYY' and that no null values exist.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_not_be_null(column=""enrollment_date"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_not_be_null(column=""enrollment_date"")",1.0,1.0,1.0,100.00000000000004
"For field 'transaction_amount': Ensure the field is required (not null). Check that the mean transaction amount falls within the expected range of $10 to $10,000.","expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_mean_to_be_between(column=""transaction_amount"", min_value=10, max_value=10000)","expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_mean_to_be_between(column=""transaction_amount"", min_value=10, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Check that the values in the `total_loans` column are equal to the sum of `personal_loans` and `mortgage_loans`.,"expect_multicolumn_sum_to_equal(column_list=[""personal_loans"", ""mortgage_loans""], target_column=""total_loans"")","expect_column_values_to_equal_sum_of_other_columns(column_list=[""total_loans""], sum_column=""sum_of_personal_and_mortgage_loans"")",0.6666666666666666,0.23529411764705882,0.4444444444444444,44.29114515312698
"For the `sku` column: Ensure all entries are unique and match the specified set of valid SKUs: ['SKU001', 'SKU002', 'SKU003'].","expect_column_values_to_be_unique(column=""sku""),expect_column_values_to_be_in_set(column=""sku"", value_set=['SKU001', 'SKU002', 'SKU003'])","expect_column_values_to_be_unique(column=""sku""),expect_column_values_to_be_in_set(column=""sku"", value_set=['SKU001', 'SKU002', 'SKU003'])",1.0,1.0,1.0,100.00000000000004
"For field 'device_status': Validate that each entry is a valid JSON object, ensuring all required fields like 'device_id' and 'status' are present.","expect_column_values_to_be_json_parseable(column=""device_status""),expect_column_values_to_match_json_schema(column=""device_status"", schema={""type"": ""object"", ""required"": [""device_id"", ""status""]})","expect_column_values_to_be_json_parseable(column=""device_status""),expect_column_values_to_match_json_schema(column=""device_status"", schema={""type"": ""object"", ""properties"": {""device_id"": {""type"": ""string""}, ""status"": {""type"": ""string""}}})",0.896551724137931,0.8214285714285715,0.896551724137931,68.6468646553105
For the `course_code` column: Validate that all entries match the specific pattern `^[A-Z]{4}-[0-9]{3}$`.,"expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{4}-[0-9]{3}$"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{4}-[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `device_model` column does not contain any null values and each entry is a string.,"expect_column_values_to_not_be_null(column=""device_model""),expect_column_values_to_be_of_type(column=""device_model"", type_=""str"")","expect_column_values_to_not_be_null(column=""device_model""),expect_column_values_to_be_of_type(column=""device_model"", type_=""str"")",1.0,1.0,1.0,100.00000000000004
Verify that the `attendance_percentage` is a decimal number between 0.0 and 100.0.,"expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0.0, max_value=100.0)","expect_column_values_to_be_of_type(column=""attendance_percentage"", type_=""decimal""),expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)",0.6818181818181819,0.6666666666666667,0.6818181818181819,43.187396036566845
Check that the `product_name` column contains strings with a maximum length of 100 characters.,"expect_column_value_lengths_to_be_between(column=""product_name"", min_value=0, max_value=100)","expect_column_value_lengths_to_be_between(column=""product_name"", min_value=1, max_value=100)",0.9375,0.8666666666666667,0.9375,92.10500207490826
"Check the `data_usage` column for values that should fall within the range of 0 to 500 GB, and ensure they are in increasing order.","expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=500),expect_column_values_to_be_increasing(column=""data_usage"")","expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=500),expect_column_values_to_be_increasing(column=""data_usage"")",1.0,1.0,1.0,100.00000000000004
Verify that the `merchant_id` is of type 'text' and must not contain any null values. Ensure that all entries are valid.,"expect_column_values_to_be_of_type(column=""merchant_id"", type_=""text""),expect_column_values_to_not_be_null(column=""merchant_id"")","expect_column_values_to_be_of_type(column=""merchant_id"", type_=""text""),expect_column_values_to_not_be_null(column=""merchant_id"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `damages_claimed` column contains only numeric values and is greater than zero.,"expect_column_values_to_be_of_type(column=""damages_claimed"", type_=""numeric""),expect_column_values_to_be_greater_than(column=""damages_claimed"", value=0)","expect_column_values_to_be_of_type(column=""damages_claimed"", type_=""float""),expect_column_values_to_be_between(column=""damages_claimed"", min_value=0)",0.875,0.7391304347826085,0.875,84.42136252749053
"For the `smart_contract` file: Ensure the file exists, matches a specific hash value, and adheres to a maximum size of 2MB.","expect_file_to_exist(file_path=""smart_contract""),expect_file_hash_to_equal(file_path=""smart_contract"", hash_value=""SPECIFIC_HASH_VALUE""),expect_file_size_to_be_between(file_path=""smart_contract"", min_value=0, max_value=2097152)","expect_file_to_exist(file=""smart_contract""),expect_file_hash_to_equal(file=""smart_contract"", expected_hash=""specific_hash_value""),expect_file_size_to_be_between(file=""smart_contract"", min_value=0, max_value=2 * 1024 * 1024)  # maximum size of 2MB",0.8354430379746836,0.7012987012987014,0.8354430379746836,71.92812784987933
For the `supplier_id` field: Ensure all entries are unique and match the pattern `^SUP[0-9]{3}$`.,"expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_match_regex(column=""supplier_id"", regex=r""^SUP[0-9]{3}$"")","expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_match_regex(column=""supplier_id"", regex=r""^SUP[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
Check that the `transaction_id` column is unique and matches the pattern `^TX[0-9]{6}$` across all platforms.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^TX[0-9]{6}$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^TX[0-9]{6}$"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the sum of `usage_kwh` for each customer ID in the `customer_usage` table does not exceed 100,000 for any given year.","expect_column_sum_to_be_between(column=""usage_kwh"", min_value=0, max_value=100000)","expect_multicolumn_sum_to_equal(column_list=[""year_2022_customer_id_usage_kwh""], value=100_000)",0.45161290322580644,0.1379310344827586,0.45161290322580644,22.510534424743234
Verify that the `like_count` column in the `comments` table has a median value greater than 10.,"expect_column_median_to_be_between(column=""like_count"", min_value=10)","expect_column_median_to_be_greater_than(column=""like_count"", value=10)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
Ensure that the `game_session_start` and `game_session_end` columns contain datetime values that correctly represent the start and end of gaming sessions.,"expect_column_values_to_be_dateutil_parseable(column=""game_session_start""),expect_column_values_to_be_dateutil_parseable(column=""game_session_end""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""game_session_start"", column_B=""game_session_end"")","expect_column_to_exist(column=""game_session_start""),expect_column_to_exist(column=""game_session_end"")  # Replace with actual column names if required.",0.4615384615384615,0.28571428571428575,0.4615384615384615,22.77246330598319
"For `payment_status`, ensure the values are limited to the set `['Paid', 'Pending', 'Cancelled']`. All entries must be non-null.","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Cancelled']),expect_column_values_to_not_be_null(column=""payment_status"")","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Cancelled']),expect_column_values_to_not_be_null(column=""payment_status"")",1.0,1.0,1.0,100.00000000000004
Check that the `check_in_date` is earlier than the `check_out_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")",1.0,1.0,1.0,100.00000000000004
Check that the `order_quantity` for each product is listed in decreasing order.,"expect_column_values_to_be_decreasing(column=""order_quantity"")","expect_column_values_to_be_increasing(column=""order_quantity"")",0.8888888888888888,0.75,0.8888888888888888,85.78928092681438
Ensure the `email_subject` column includes only distinct subjects and does not exceed 255 characters.,"expect_column_values_to_be_unique(column=""email_subject""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=0, max_value=255)","expect_column_values_to_be_unique(column=""email_subject""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=1, max_value=255)",0.96,0.9166666666666666,0.96,95.25618205602056
Check that the `student_age` values are within the range of 18 to 65.,"expect_column_values_to_be_between(column=""student_age"", min_value=18, max_value=65)","expect_column_values_to_be_between(column=""student_age"", min_value=18, max_value=65)",1.0,1.0,1.0,100.00000000000004
"For the `listing_date`, confirm that all entries follow the 'YYYY-MM-DD' format and are not future dates.","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""listing_date""),expect_column_values_to_be_between(column=""listing_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""listing_date"", value=""9999-12-31"")  # assuming your application requires that the maximum date is the cutoff date  -->",0.6024096385542169,0.5185185185185186,0.6024096385542169,55.62956965680001
"For the `transaction_type` field in Fraud Detection, ensure values are from the set ['Purchase', 'Refund', 'Transfer'] and do not include nulls.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Purchase', 'Refund', 'Transfer']),expect_column_values_to_not_be_null(column=""transaction_type"")","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Purchase', 'Refund', 'Transfer']),expect_column_values_to_not_be_null(column=""transaction_type"")",1.0,1.0,1.0,100.00000000000004
Ensure the `wind_speed` column values are arranged in increasing order.,"expect_column_values_to_be_increasing(column=""wind_speed"")","expect_column_values_to_be_increasing(column=""wind_speed"")",1.0,1.0,1.0,100.00000000000004
Validate that the `premium_amount` values in the dataset fall within the range of 100 to 10000.,"expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000)","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For field 'interest_rate': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Verify that the interest rates are between 0% and 20%.,"expect_column_values_to_not_be_null(column=""interest_rate""),expect_column_values_to_be_of_type(column=""interest_rate"", type_=""numeric""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=20)","expect_column_values_to_not_be_null(column=""interest_rate""),expect_column_values_to_be_of_type(column=""interest_rate"", type_=""numeric""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=20)",1.0,1.0,1.0,100.00000000000004
"For the `customer_id` column, ensure it is of type 'integer' and that all entries are greater than zero.","expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_greater_than(column=""customer_id"", value=0)","expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_between(column=""customer_id"", min_value=1, max_value=float(""inf""))",0.8076923076923077,0.72,0.8076923076923077,71.92361404473228
For field 'transaction_date': Ensure this field exists and that all dates are in valid ISO format. Validate that values are in increasing order.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%dT%H:%M:%S""),expect_column_values_to_be_increasing(column=""transaction_date"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%dT%H:%M:%S""),expect_column_values_to_be_increasing(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
Check that the `billing_cycle` column has exactly 12 rows representing each month of the year.,"expect_column_unique_value_count_to_be_between(column=""billing_cycle"", min_value=12, max_value=12)","expect_column_count_to_equal(column=""billing_cycle"", value=12)",0.6666666666666667,0.39999999999999997,0.6666666666666667,39.21293505389943
For field 'battery_level': Validate that values are within the range of 0 to 100%. Ensure this field exists.,"expect_column_to_exist(column=""battery_level""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_to_exist(column=""battery_level""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'work_hours': Ensure the field matches the type 'integer'. Validate that values in (work_hours) are within the range of 0 to 168. Ensure this field exists.,"expect_column_to_exist(column=""work_hours""),expect_column_values_to_be_of_type(column=""work_hours"", type_=""int""),expect_column_values_to_be_between(column=""work_hours"", min_value=0, max_value=168)","expect_column_to_exist(column=""work_hours""),expect_column_values_to_be_of_type(column=""work_hours"", type_=""integer""),expect_column_values_to_be_between(column=""work_hours"", min_value=0, max_value=168)",0.9705882352941176,0.9393939393939394,0.9705882352941176,96.74122890261673
Ensure the standard deviation of the `sales` column is between 10 and 50.,"expect_column_stdev_to_be_between(column=""sales"", min_value=10, max_value=50)","expect_column_stdev_to_be_between(column=""sales"", min_value=10, max_value=50)",1.0,1.0,1.0,100.00000000000004
"For field 'incident_type': Ensure values are from the predefined set ['Theft', 'Assault', 'Fraud', 'Vandalism']. Ensure there are no duplicates.","expect_column_values_to_be_in_set(column=""incident_type"", value_set=['Theft', 'Assault', 'Fraud', 'Vandalism']),expect_column_values_to_be_unique(column=""incident_type"")","expect_column_values_to_be_in_set(column=""incident_type"", value_set=['Theft', 'Assault', 'Fraud', 'Vandalism']),expect_column_values_to_be_unique(column=""incident_type"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_hash': Ensure the field is required (not null). Validate that all 'transaction_hash' values are unique and conform to the regex pattern '^[0-9a-fA-F]{64}$'.,"expect_column_values_to_not_be_null(column=""transaction_hash""),expect_column_values_to_be_unique(column=""transaction_hash""),expect_column_values_to_match_regex(column=""transaction_hash"", regex=r'^[0-9a-fA-F]{64}$')","expect_column_values_to_not_be_null(column=""transaction_hash""),expect_column_values_to_be_unique(column=""transaction_hash""),expect_column_values_to_match_regex(column=""transaction_hash"", regex=r""^[0-9a-fA-F]{64}$"")",1.0,1.0,1.0,93.2637006038906
Confirm that the `claim_date` column is arranged in increasing order.,"expect_column_values_to_be_increasing(column=""claim_date"")","expect_column_values_to_be_increasing(column=""claim_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `number_of_guests` column contains no missing values. Validate that all entries are of type 'integer' and are greater than zero.,"expect_column_values_to_not_be_null(column=""number_of_guests""),expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int""),expect_column_values_to_be_greater_than(column=""number_of_guests"", value=0)","expect_column_values_to_not_be_null(column=""number_of_guests""),expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int""),expect_column_values_to_be_greater_than(column=""number_of_guests"", value=0)",1.0,1.0,1.0,100.00000000000004
For the `email` field: Confirm that all entries match the regex pattern for valid email addresses and do not exceed 100 characters.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=100)","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=100)",0.7692307692307693,0.7301587301587301,0.7692307692307693,75.34280053185418
"Check that the `category` column only includes distinct values from the specified list `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_distinct_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",0.9655172413793104,0.888888888888889,0.9655172413793104,91.3991646082772
"In the 'hire_date' column, validate that all dates are of type 'date' and that no entries are in the future.","expect_column_values_to_be_of_type(column=""hire_date"", type_=""date""),expect_column_values_to_be_less_than(column=""hire_date"", value=""current_date"")","expect_column_to_exist(column=""hire_date""),expect_column_values_to_be_of_type(column=""hire_date"", type_=""date""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # Ensure that all entries in the column can be parsed as dates, without throwing errors.",0.6086956521739131,0.5373134328358209,0.6086956521739131,56.74362813590397
For field 'product_quantity': Ensure this field is required (not null) and contains only integer values. Validate that all are non-negative.,"expect_column_values_to_not_be_null(column=""product_quantity""),expect_column_values_to_be_of_type(column=""product_quantity"", type_=""int""),expect_column_values_to_be_between(column=""product_quantity"", min_value=0)","expect_column_values_to_not_be_null(column=""product_quantity""),expect_column_values_to_be_of_type(column=""product_quantity"", type_=""int""),expect_column_values_to_be_between(column=""product_quantity"", min_value=0)",1.0,1.0,1.0,100.00000000000004
Check that the `timestamp` column adheres to the 'YYYY-MM-DD HH:MM:SS' format.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.85,0.8421052631578948,0.85,72.46326969857483
Ensure the `wind_speed` column is in ascending order without any duplicate entries.,"expect_column_values_to_be_increasing(column=""wind_speed""),expect_column_values_to_be_unique(column=""wind_speed"")","expect_column_values_to_be_increasing(column=""wind_speed""),expect_column_values_to_be_unique(column=""wind_speed"")",1.0,1.0,1.0,100.00000000000004
"For the `platform` field: Ensure that values match one of the defined categories: `['PC', 'Xbox', 'PlayStation', 'Switch']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])",1.0,1.0,1.0,100.00000000000004
Ensure the `device_id` column contains only unique values and is of type 'text'. Ensure there are no null entries.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""text""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",0.76,0.7499999999999999,0.76,49.774149722499054
"For the `customer_feedback` column, validate that the string length falls between 10 and 500 characters.","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500)","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
Ensure the `citizen_id` column contains only distinct values and exists in the `citizens` table.,"expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id"")","expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_select_column_values_to_be_unique_within_record(column=""citizen_id"")",0.7272727272727273,0.7142857142857143,0.7272727272727273,56.780901645301775
"For the `timestamp` field, ensure all entries are in the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `attachments` folder contains files with a specific hash value for integrity verification.,"expect_file_hash_to_equal(file_path=""attachments"", expected_hash_value=""YOUR_EXPECTED_HASH_VALUE"")","expect_file_to_exist(filename=""attachments""),expect_file_hash_to_match_hash_value(filename=""attachments"", hash_value=""YOUR_HASH_VALUE"")",0.6857142857142857,0.4242424242424242,0.5714285714285715,46.79119309974545
Check that the `publish_date` is greater than the `creation_date` for all content entries.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""publish_date"", column_B=""creation_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""publish_date"", column_B=""creation_date"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `weather_conditions` column contains only valid entries from the set `['sunny', 'rainy', 'cloudy', 'snowy']`.","expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=['sunny', 'rainy', 'cloudy', 'snowy'])","expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=['sunny', 'rainy', 'cloudy','snowy'])",1.0,1.0,1.0,100.00000000000004
"For table 'employees': Ensure the number of rows is equal to or greater than 1. Ensure the columns match the specified set: ['employee_id', 'name', 'email', 'hire_date', 'department', 'salary'].","expect_table_row_count_to_be_between(min_value=1),expect_table_columns_to_match_set(column_set=['employee_id', 'name', 'email', 'hire_date', 'department', 'salary'])","expect_table_row_count_to_be_between(min_value=1, max_value=None),expect_table_columns_to_match_set(columns=['employee_id', 'name', 'email', 'hire_date', 'department','salary'])",0.9259259259259259,0.8461538461538461,0.9259259259259259,82.81115410189405
Ensure the `candidate_name` column matches a predefined regex pattern for valid names and contains no empty strings.,"expect_column_values_to_match_regex(column=""candidate_name"", regex=r""^[A-Za-z\s'-]+$""),expect_column_values_to_not_match_regex(column=""candidate_name"", regex=r""^$"")","expect_column_values_to_match_regex(column=""candidate_name"", regex=r""^[A-Z][a-zA-Z]{2,}$""),expect_column_values_to_not_be_null(column=""candidate_name"")",0.8148148148148148,0.7307692307692306,0.8148148148148148,70.04065016596152
Ensure the `purchase_amount` column has a mean value greater than `100` and does not contain any negative values.,"expect_column_mean_to_be_greater_than(column=""purchase_amount"", threshold=100),expect_column_values_to_be_between(column=""purchase_amount"", min_value=0, max_value=None)","expect_column_mean_to_be_between(column=""purchase_amount"", min_value=100),expect_column_values_to_be_between(column=""purchase_amount"", min_value=0, max_value=None)",0.8888888888888888,0.8076923076923077,0.8888888888888888,88.04416897348926
Ensure the `customer_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
For field 'file_path': Ensure the file exists and checksums match the specified hash value for data integrity.,"expect_file_to_exist(file_path=""file_path""),expect_file_hash_to_equal(file_path=""file_path"", hash_value=""specified_hash_value"")","expect_file_to_exist(file_path=""file_path""),expect_file_hash_to_equal(file_path=""file_path"", expected_hash_value=hash_value)",0.9545454545454546,0.8571428571428571,0.9545454545454546,86.10250460221991
Confirm that the `location` column values are not empty and match the predefined locations in the `location_lookup` table.,"expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=location_lookup)","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=location_lookup)",1.0,1.0,1.0,100.00000000000004
Verify that the `view_count` column follows a Poisson distribution with a p-value greater than 0.05 in the Kolmogorov-Smirnov test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'booking_reference': Ensure this field is required (not null). Ensure the field matches the type 'text'. Ensure values in (booking_reference) are unique.,"expect_column_values_to_not_be_null(column=""booking_reference""),expect_column_values_to_be_of_type(column=""booking_reference"", type_=""text""),expect_column_values_to_be_unique(column=""booking_reference"")","expect_column_values_to_not_be_null(column=""booking_reference""),expect_column_values_to_be_of_type(column=""booking_reference"", type_=""text""),expect_select_column_values_to_be_unique(column=""booking_reference"")",0.9841269841269841,0.9508196721311476,0.9841269841269841,96.23398994605367
For field 'user_id': Ensure the field matches the type 'text'. Validate that all values in (user_id) are unique and match the format 'USER-XXXX' where 'XXXX' is a 4-digit number.,"expect_column_values_to_be_of_type(column=""user_id"", type_=""text""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^USER-\d{4}$"")","expect_column_values_to_be_of_type(column=""user_id"", type_=""text""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^USER-[0-9]{4}$"")",0.9577464788732395,0.9275362318840579,0.9577464788732395,92.45712963830614
"Check that the `currency` column contains only values from the set `['BTC', 'ETH', 'LTC']`.","expect_column_values_to_be_in_set(column=""currency"", value_set=['BTC', 'ETH', 'LTC'])","expect_column_values_to_be_in_set(column=""currency"", value_set=['BTC', 'ETH', 'LTC'])",1.0,1.0,1.0,100.00000000000004
"For field 'vehicle_id': Ensure the field matches the type 'text'. Validate that values in (vehicle_id) do not match any patterns from the list ['^OLD.*$', '^RENTAL.*$']. Ensure this field exists.","expect_column_to_exist(column=""vehicle_id""),expect_column_values_to_be_of_type(column=""vehicle_id"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""vehicle_id"", regex_list=['^OLD.*$', '^RENTAL.*$'])","expect_column_to_exist(column=""vehicle_id""),expect_column_values_to_be_of_type(column=""vehicle_id"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""vehicle_id"", regex_list=['^OLD.*$', '^RENTAL.*$'])",1.0,1.0,1.0,100.00000000000004
"For field 'status': Ensure the field matches the type 'text'. Validate that the status must match one of the predefined values (Draft, Published, Archived). Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Draft"", ""Published"", ""Archived""])","expect_column_to_exist(column=""status""),expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_be_in_set(column=""status"", value_set=['Draft', 'Published', 'Archived'])",1.0,1.0,1.0,85.03427863806266
Verify that the `guest_email` column contains unique values and matches the type 'email'. Ensure this field exists.,"expect_column_to_exist(column=""guest_email""),expect_column_values_to_be_unique(column=""guest_email""),expect_column_values_to_match_regex(column=""guest_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_to_exist(column=""guest_email""),expect_column_values_to_be_unique(column=""guest_email""),expect_column_values_to_be_of_type(column=""guest_email"", type_=""email"")",0.7796610169491526,0.7368421052631577,0.7796610169491526,56.928747214389254
For the `age` field: Ensure it is of type 'integer'. Validate that all values are within the range of 18 to 120.,"expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120)","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120)",1.0,1.0,1.0,100.00000000000004
"For file 'employee_data.csv': Ensure the file exists. Ensure the file size is between 1 KB and 5 MB. Ensure the first line contains valid headers: ['employee_id', 'name', 'email', 'hire_date', 'department'].","expect_file_to_exist(file_path=""employee_data.csv""),expect_file_size_to_be_between(file_path=""employee_data.csv"", min_size=1024, max_size=5242880),expect_file_to_have_valid_table_header(file_path=""employee_data.csv"", expected_header=[""employee_id"", ""name"", ""email"", ""hire_date"", ""department""])","expect_file_to_exist(filename=""employee_data.csv""),expect_file_size_to_be_between(1, 5 * 1024 * 1024),expect_file_first_line_to_match_regex(r'^[employee_id, name, email, hire_date, department]$')",0.5999999999999999,0.46153846153846156,0.5999999999999999,30.530453833469302
For field 'transaction_amount': Ensure the field matches the type 'numeric'. Ensure values in 'transaction_amount' are greater than or equal to 0 and less than 100000.,"expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""numeric""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=100000)","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""numeric""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=99999)",0.9629629629629629,0.9615384615384616,0.9629629629629629,97.09345990112651
For field 'child_count': Ensure the field matches the type 'integer'. Ensure the field contains values greater than or equal to 0. Ensure this field exists.,"expect_column_to_exist(column=""child_count""),expect_column_values_to_be_of_type(column=""child_count"", type_=""int""),expect_column_values_to_be_between(column=""child_count"", min_value=0, max_value=None)","expect_column_to_exist(column=""child_count""),expect_column_values_to_be_of_type(column=""child_count"", type_=""int""),expect_column_values_to_be_between(column=""child_count"", min_value=0)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.13468812604467
Ensure the `open_rate` column in the `emails` table has a mean value between 0.2 and 0.5.,"expect_column_mean_to_be_between(column=""open_rate"", min_value=0.2, max_value=0.5)","expect_column_mean_to_be_between(column=""open_rate"", lower_bound=0.2, upper_bound=0.5)",0.7647058823529412,0.625,0.7647058823529412,70.97141513081817
Ensure that the `transaction_date` column is formatted as `MM/DD/YYYY` and is a valid date.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""01/01/2010"", max_value=""today"")",0.7462686567164178,0.7384615384615384,0.6865671641791046,58.78694163518455
"For field `status`: Ensure the field contains only distinct values matching `['In Transit', 'Delivered', 'Cancelled']`.","expect_column_distinct_values_to_equal_set(column=""status"", value_set=[""In Transit"", ""Delivered"", ""Cancelled""])","expect_column_distinct_values_to_equal_set(column=""status"", value_set=['In Transit', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,65.18126445164165
For field 'block_number': Ensure the field matches the type 'integer'. Validate that values are positive integers greater than zero. Ensure this field exists.,"expect_column_to_exist(column=""block_number""),expect_column_values_to_be_of_type(column=""block_number"", type_=""int""),expect_column_values_to_be_between(column=""block_number"", min_value=1, max_value=None)","expect_column_to_exist(column=""block_number""),expect_column_values_to_be_of_type(column=""block_number"", type_=""int""),expect_column_values_to_be_between(column=""block_number"", min_value=1, max_value=None),expect_column_values_to_not_be_null(column=""block_number"")",0.8717948717948718,0.868421052631579,0.8717948717948718,77.11117446405373
Confirm that the `player_username` column holds unique values and does not contain special characters.,"expect_column_values_to_be_unique(column=""player_username""),expect_column_values_to_not_match_regex(column=""player_username"", regex=r""[^a-zA-Z0-9_]"")","expect_column_values_to_be_unique(column=""player_username""),expect_column_values_to_not_match_regex(column=""player_username"", regex=r""[\w\s]*$"")",0.8749999999999999,0.8695652173913043,0.8749999999999999,85.50482190219473
Ensure that the `lead_score` column values are within the range of 1 to 100 and are unique.,"expect_column_values_to_be_between(column=""lead_score"", min_value=1, max_value=100),expect_column_values_to_be_unique(column=""lead_score"")","expect_column_values_to_be_between(column=""lead_score"", min_value=1, max_value=100),expect_column_values_to_be_unique(column=""lead_score"")",1.0,1.0,1.0,100.00000000000004
Ensure the `shipment_date` column contains dates formatted as 'YYYY-MM-DD' and are in the future.,"expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_values_to_be_between(column=""shipment_date"", min_value=""2023-10-01"", max_value=None)  # Assuming today is before 2023-10-01","expect_column_to_exist(column=""shipment_date""),expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""shipment_date"", min_value=""2023-01-01"", max_value=""2023-10-01"")  # Assuming dates are in the future between Jan 1st 2023 to Oct 1st 2023.",0.7692307692307693,0.6666666666666667,0.6346153846153846,78.08737332283988
Ensure the `public_service_id` is unique and exists within the predefined set of service identifiers.,"expect_column_to_exist(column=""public_service_id""),expect_column_values_to_be_unique(column=""public_service_id""),expect_column_values_to_be_in_set(column=""public_service_id"", value_set=predefined_set_of_service_identifiers)","expect_column_values_to_be_unique(column=""public_service_id""),expect_column_values_to_be_in_set(column=""public_service_id"", value_set=[predefined_set_of_service_identifiers])",0.8750000000000001,0.870967741935484,0.8750000000000001,71.01351312909743
"For field 'ip_address': Ensure all addresses match the regular expression pattern '^((25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])\\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])))$'.","expect_column_values_to_match_regex(column=""ip_address"", regex=r'^((25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])))$')","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])$"")",1.0,1.0,1.0,91.90294490664299
For file 'inventory_data.json': Verify that the content is properly formatted JSON. Ensure the file contains less than 1000 lines of data.,"expect_file_to_be_valid_json(file_path=""inventory_data.json""),expect_file_line_regex_match_count_to_be_between(file_path=""inventory_data.json"", min_value=0, max_value=999)","expect_file_to_exist(file=""inventory_data.json""),expect_file_to_have_line_regex_count(file=""inventory_data.json"", regex=r""^{\s*,?\s*\$}""),expect_file_line_regex_match_count_to_be_between(file=""inventory_data.json"", min_value=0, max_value=1000)",0.7123287671232876,0.5915492957746479,0.7123287671232876,50.85581692315528
Validate that the `timestamp` column entries follow the ISO 8601 format.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S"")",0.9714285714285714,0.9696969696969697,0.9714285714285714,89.92646345262513
Confirm that the count of `employee_id` in HRMS matches the count of `customer_id` in Banking for individuals with accounts.,"expect_column_pair_values_to_be_equal(column_A=""employee_id"", column_B=""customer_id"")","expect_column_count_to_be_between(column=""employee_id"", min_value=1, max_value=None),expect_column_count_to_be_between(column=""customer_id"", min_value=None, max_value=1)",0.4888888888888889,0.18604651162790697,0.4444444444444444,26.587812958683344
Ensure the `vehicle_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_not_be_null(column=""vehicle_id"")","expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_not_be_null(column=""vehicle_id"")",1.0,1.0,1.0,100.00000000000004
For the `location` field: Confirm that it does not contain null values and matches the specified set of allowed locations.,"expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=[""allowed_location_1"", ""allowed_location_2"", ""allowed_location_3""])","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=allowed_locations_set)",0.8461538461538461,0.84,0.8461538461538461,60.98536802238151
"For field 'user_data': Ensure that the JSON is valid and includes 'user_id', 'username', and 'preferences' fields as required by the JSON schema.","expect_column_to_exist(column=""user_data""),expect_column_values_to_match_json_schema(column=""user_data"")","expect_column_to_exist(column=""user_data""),expect_column_values_to_match_json_schema(column=""user_data"")  # Replace the placeholder with the actual JSON schema.",0.8095238095238095,0.8,0.8095238095238095,78.93413522753539
Ensure the `source_ip` and `destination_ip` columns contain valid IP addresses and are of type 'string'.,"expect_column_values_to_be_of_type(column=""source_ip"", type_=""string""),expect_column_values_to_be_of_type(column=""destination_ip"", type_=""string""),expect_column_values_to_match_regex(column=""source_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_match_regex(column=""destination_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_match_regex(column=""source_ip"", regex=r""^[0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$""),expect_column_values_to_be_of_type(column=""source_ip"", type_=""string""),expect_column_values_to_match_regex(column=""destination_ip"", regex=r""^[0-9]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$""),expect_column_values_to_be_of_type(column=""destination_ip"", type_=""string"")",0.8823529411764706,0.8059701492537313,0.6176470588235293,78.41921381722182
"For field 'wind_speed': Ensure that values match the regex pattern '^[0-9]+(.[0-9]{1,2})?$' indicating a non-negative decimal number. Ensure this field exists.","expect_column_to_exist(column=""wind_speed""),expect_column_values_to_match_regex(column=""wind_speed"", regex=r""^[0-9]+(\.[0-9]{1,2})?$"")","expect_column_to_exist(column=""wind_speed""),expect_column_values_to_match_regex(column=""wind_speed"", regex=r""^[0-9]+(.[0-9]{1,2})?$"")",1.0,1.0,1.0,95.97373988977623
Check that `restock_date` values match the format 'YYYY-MM-DD' and are not in the past.,"expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""restock_date"")","expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""restock_date""),expect_column_values_to_be_between(column=""restock_date"", min_value=""2023-10-15"", max_value=""9999-12-31"")",0.6764705882352942,0.6363636363636364,0.6764705882352942,51.18721620161696
Ensure the `battery_level` column does not contain any missing values and that all values are integers.,"expect_column_values_to_not_be_null(column=""battery_level""),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int"")","expect_column_to_exist(column=""battery_level""),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int""),expect_column_values_to_not_be_null(column=""battery_level"")",0.8627450980392156,0.8571428571428571,0.7058823529411765,74.80673768313193
Check if the `billing_cycle` column values are arranged in increasing order across records.,"expect_column_values_to_be_increasing(column=""billing_cycle"")","expect_column_values_to_be_increasing(column=""billing_cycle"")",1.0,1.0,1.0,100.00000000000004
"Check that the `publication_year` column values fall within the range of 2000 to 2023, inclusive.","expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023)","expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023)",1.0,1.0,1.0,100.00000000000004
"Validate that the `interest_rate` column's standard deviation is below 0.05, indicating minimal variation among rates.","expect_column_stdev_to_be_between(column=""interest_rate"", min_value=0, max_value=0.05)","expect_column_stdev_to_be_between(column=""interest_rate"", min_value=0, max_value=0.05)",1.0,1.0,1.0,100.00000000000004
"Check that the `status` column has values limited to `['Open', 'Closed', 'Pending']` and contains no duplicates.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_be_unique(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""])  # Check that the status values fall within the expected set of values.  # Note: It's assumed that the current date/time is sufficient to identify if a ""Pending"" status has expired, assuming that the dates/times in the ""Pending"" statuses are provided.  # In the absence of a date or timestamp value, this may need to be adjusted accordingly.",0.40425531914893614,0.3043478260869565,0.38297872340425526,35.31303011664392
For field 'transaction_date': Ensure this field exists and that all datetime values conform to the 'YYYY-MM-DD HH:MM:SS' format.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
For field 'sent_time': Ensure the field matches the type 'datetime'. Confirm that values are in the correct format 'YYYY-MM-DD HH:MM:SS' and are not in the future.,"expect_column_values_to_be_of_type(column=""sent_time"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""sent_time"")","expect_column_values_to_be_of_type(column=""sent_time"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_in_set(column=""sent_time"", value_set=[value for value in sent_time if value < datetime.now().strftime('%Y-%m-%d %H:%M:%S')])",0.7755102040816326,0.75,0.7755102040816326,65.84186663554114
"Ensure the `case_status` column values conform to the defined set `['Open', 'Closed', 'Pending']`.","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `category` column contains distinct values only from the set `['Electronics', 'Books', 'Clothing']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Books', 'Clothing'])","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Books', 'Clothing'])",0.8571428571428571,0.6923076923076923,0.8571428571428571,82.93181259810136
For the `data_usage` field: Ensure values are within the range of 0 to 5000 MB per month.,"expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=5000)","expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=5000)",1.0,1.0,1.0,100.00000000000004
For `study_year`: Verify that all values fall within the range of 2000 to the current year.,"expect_column_values_to_be_between(column=""study_year"", min_value=2000, max_value=2023)","expect_column_values_to_be_between(column=""study_year"", min_value=2000, max_value=2023)",1.0,1.0,1.0,100.00000000000004
For the table 'orders': Validate that the combination of 'order_id' and 'customer_id' is unique across records.,"expect_compound_columns_to_be_unique(columns=[""order_id"", ""customer_id""])","expect_compound_columns_to_be_unique(columns=""order_id"", ""customer_id"")ılmaktadır",0.9166666666666666,0.9090909090909091,0.9166666666666666,83.60099541106482
For field 'phone_number': Ensure the field exists and matches the type 'text'. Validate that all values in (phone_number) conform to the pattern '^[0-9]{10}$'.,"expect_column_to_exist(column=""phone_number""),expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^[0-9]{10}$"")","expect_column_to_exist(column=""phone_number""),expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^[0-9]{10}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `employee_id` column exists and contains distinct values for each employee.,"expect_column_to_exist(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id"")","expect_column_to_exist(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `case_id` column contains only distinct values and adheres to the pattern 'CASE-[0-9]{4}' for case identifiers.,"expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""^CASE-[0-9]{4}$"")","expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""^CASE-\d{4}$"")",0.9361702127659574,0.888888888888889,0.9361702127659574,88.42748848188619
Check that the number of rows in the `deliveries` table is between 200 and 500. Ensure this table exists.,"expect_table_row_count_to_be_between(table=""deliveries"", min_value=200, max_value=500),expect_table_to_exist(table=""deliveries"")","expect_table_row_count_to_be_between(table=""deliveries"", min_value=200, max_value=500),expect_table_to_exist(table=""deliveries"")",1.0,1.0,1.0,100.00000000000004
Ensure the `number_of_guests` column only contains integer values greater than 0 and less than or equal to 10.,"expect_column_values_to_be_between(column=""number_of_guests"", min_value=1, max_value=10),expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int"")","expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int""),expect_column_values_to_be_between(column=""number_of_guests"", min_value=0, max_value=10)",0.9655172413793104,0.8928571428571429,0.6206896551724138,94.85834629217388
Ensure the `transaction_id` column contains only distinct values and cannot be null.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `currency` field has distinct values from the set `['BTC', 'ETH', 'USDT']` and that none are null.","expect_column_distinct_values_to_equal_set(column=""currency"", value_set=['BTC', 'ETH', 'USDT']),expect_column_values_to_not_be_null(column=""currency"")","expect_column_values_to_be_in_set(column=""currency"", value_set=['BTC', 'ETH', 'USDT']),expect_column_values_to_not_be_null(column=""currency"")",0.9130434782608695,0.8181818181818182,0.9130434782608695,90.07690507972515
"For the `attachment` field: Ensure that each file exists, is less than 5MB, and matches the predefined hash value.","expect_file_to_exist(file_path=""attachment""),expect_file_size_to_be_between(file_path=""attachment"", min_value=0, max_value=5 * 1024 * 1024),expect_file_hash_to_equal(file_path=""attachment"", hash_value=""PREDEFINED_HASH_VALUE"")","expect_file_to_exist(file_path=""attachment""),expect_file_size_to_be_between(file_path=""attachment"", min_value=0, max_value=5000000),expect_file_hash_to_be_valid(file_path=""attachment"", hash_value=""predefined_hash_value"")",0.9041095890410958,0.8450704225352113,0.9041095890410958,81.93270897265985
For the `signup_date` column: Ensure values conform to the format '%Y-%m-%d' and are valid datetime entries.,"expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""signup_date"")","expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""signup_date"")",1.0,1.0,1.0,100.00000000000004
For the 'property_listings' table: Ensure the number of rows is between 50 and 500. Confirm that the 'listing_id' column exists and contains unique values.,"expect_table_row_count_to_be_between(min_value=50, max_value=500),expect_column_to_exist(column=""listing_id""),expect_column_values_to_be_unique(column=""listing_id"")","expect_table_row_count_to_be_between(table=""property_listings"", min_value=50, max_value=500),expect_column_to_exist(table=""property_listings"", column=""listing_id""),expect_column_values_to_be_unique(column=""listing_id"")",0.90625,0.8387096774193549,0.90625,75.6832061112074
Check that the `updated_at` column values are all greater than or equal to the corresponding `created_at` values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""updated_at"", column_B=""created_at"")","expect_column_pair_values_to_be_increasing(column_A=""updated_at"", column_B=""created_at"")",0.8484848484848485,0.7096774193548386,0.8484848484848485,75.07184397266934
For the `course_code` field: Validate that all entries are exactly 6 characters long and match the pattern `^[A-Z]{3}[0-9]{3}$`.,"expect_column_value_lengths_to_equal(column=""course_code"", length=6),expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}[0-9]{3}$"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}[0-9]{3}$"")",0.7555555555555554,0.7441860465116279,0.7555555555555554,55.143125708000404
"Validate that the `age_rating` column contains only values matching `['E', 'T', 'M']`.","expect_column_values_to_be_in_set(column=""age_rating"", value_set=['E', 'T', 'M'])","expect_column_values_to_be_in_set(column=""age_rating"", value_set=['E', 'T', 'M'])",1.0,1.0,1.0,100.00000000000004
For field 'username': Ensure the field exists and matches the type 'text'. Validate that all entries in (username) are unique and conform to the regex pattern for valid usernames.,"expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,16}$"")","expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r"".{3,20}"")",0.923076923076923,0.8947368421052632,0.923076923076923,87.51412148361777
For the `listing_date` field: Ensure all entries are of type 'date' and are in a non-decreasing order.,"expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_increasing(column=""listing_date"")","expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_increasing(column=""listing_date"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `content_length` column reflects the number of words in the `article_body` column, with a sum of `content_length` matching the actual total word count.","expect_column_sum_to_be_between(column=""content_length"", min_value=0), ,expect_column_most_common_value_to_be_in_set(column=""content_length"", value_set=[len(article_body.split()) for article_body in df['article_body']]) ,# This assumes that df is a DataFrame containing the article_body and is a placeholder for actual implementation. ,# The most_common_value expectation may need to be replaced with a different one if the actual requirement is to check for equality. ,expect_column_pair_values_A_to_be_equal_B(column_A=""content_length"", column_B=""article_body"")  # This checks if content_length matches the word count of article_body.","expect_column_word_count_to_match(column=""article_body""),expect_column_sum_to_be_between(column=""content_length"", min_value=0, max_value=<actual_total_word_count>)",0.3432835820895523,0.2121212121212121,0.23880597014925373,8.139075992242022
For the `customer_id` field: Ensure it contains no missing values and matches the type 'integer'. Validate that all IDs are unique.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_unique(column=""customer_id"")","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""integer""),expect_column_values_to_be_unique(column=""customer_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
"For field 'study_type': Ensure the field exists. Ensure values in (study_type) must exist in the set ['clinical', 'observational', 'experimental']. Ensure this field is not null.","expect_column_to_exist(column=""study_type""),expect_column_values_to_be_in_set(column=""study_type"", value_set=['clinical', 'observational', 'experimental']),expect_column_values_to_not_be_null(column=""study_type"")","expect_column_to_exist(column=""study_type""),expect_column_values_to_be_in_set(column=""study_type"", value_set=['clinical', 'observational', 'experimental']),expect_column_values_to_not_be_null(column=""study_type"")ıldığında",0.9696969696969697,0.96875,0.9696969696969697,98.63913868009462
Validate that the `alert_type` column contains no more than 10 unique values and aligns with the expected categories.,"expect_column_unique_value_count_to_be_between(column=""alert_type"", min_value=0, max_value=10),expect_column_values_to_be_in_set(column=""alert_type"", value_set=[""category1"", ""category2"", ""category3"", ""category4"", ""category5"", ""category6"", ""category7"", ""category8"", ""category9"", ""category10""])","expect_column_unique_value_count_to_be_less_than(column=""alert_type"", threshold=10),expect_column_values_to_be_in_set(column=""alert_type"", value_set=expected_alert_types)",0.676470588235294,0.6060606060606061,0.676470588235294,40.95851060187915
Ensure that the `json_metadata` column contains valid JSON objects with all required fields present according to the schema.,"expect_column_values_to_match_json_schema(column=""json_metadata"", schema=required_schema)","expect_column_values_to_be_json_parseable(column=""json_metadata""),expect_column_values_to_match_json_schema(column=""json_metadata"", schema=required_schema)",0.7222222222222222,0.7058823529411764,0.7222222222222222,53.50130969927747
For the `listing_date` field: Ensure this field must contain valid date entries only. Check for missing values.,"expect_column_to_exist(column=""listing_date""),expect_column_values_to_be_dateutil_parseable(column=""listing_date""),expect_column_values_to_not_be_null(column=""listing_date"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""listing_date"")",0.6538461538461539,0.5599999999999999,0.6538461538461539,62.543241604883875
Ensure the `student_id` field contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")",1.0,1.0,1.0,100.00000000000004
For field 'send_time': Ensure that values in 'send_time' are within the range of '2023-01-01' to '2023-12-31'.,"expect_column_values_to_be_between(column=""send_time"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""send_time"", min_value=""2023-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `discount` column values are between 0 and 100, representing percentages.","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `booking_status` column only includes values from the set `['Confirmed', 'Pending', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""booking_status"", value_set=['Confirmed', 'Pending', 'Cancelled'])","expect_column_values_to_be_in_set(column=""booking_status"", value_set=['Confirmed', 'Pending', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
"For the `device_status` column: Ensure that the values are restricted to the set `['active', 'inactive', 'malfunction']`.","expect_column_values_to_be_in_set(column=""device_status"", value_set=['active', 'inactive', 'malfunction'])","expect_column_values_to_be_in_set(column=""device_status"", value_set=['active', 'inactive','malfunction'])",1.0,1.0,1.0,100.00000000000004
Ensure the mean value in the `order_total` column is between $20 and $500.,"expect_column_mean_to_be_between(column=""order_total"", min_value=20, max_value=500)","expect_column_mean_to_be_between(column=""order_total"", min_value=20, max_value=500)",1.0,1.0,1.0,100.00000000000004
For the `delivery_date` column: Ensure all dates are in the future and formatted as `%Y-%m-%d`.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""delivery_date"")","expect_column_values_to_be_increasing(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")",1.0,0.9565217391304348,0.625,99.52492718345985
Ensure the number of rows in the `incident_reports` table is equal to the `resolved_incidents` table.,"expect_table_row_count_to_equal_other_table(table=""resolved_incidents"")","expect_table_row_count_to_equal(other_table=""resolved_incidents"")",0.9523809523809523,0.9473684210526316,0.9523809523809523,76.59884031836235
Verify that the sum of the `price` and `tax` columns equals the `total_amount` for all transactions.,"expect_column_pair_values_to_be_equal(column_A=""price"", column_B=""total_amount""),expect_column_pair_values_to_be_equal(column_A=""tax"", column_B=""total_amount"")","expect_multicolumn_sum_to_equal(column_list=[""price"", ""tax""], sum_column=""total_amount"")",0.4390243902439025,0.10256410256410256,0.4390243902439025,17.986522974254555
Verify that the `guest_count` column values are integers and fall within the range of 1 to 10.,"expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10)","expect_column_values_to_be_of_type(column=""guest_count"", type_=""int""),expect_column_values_to_be_between(column=""guest_count"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
"For field `alert_type`: Ensure the field is required (not null). Ensure `alert_type` values must exist in the predefined set ['Malware', 'Phishing', 'DDoS'].","expect_column_values_to_not_be_null(column=""alert_type""),expect_column_values_to_be_in_set(column=""alert_type"", value_set=['Malware', 'Phishing', 'DDoS'])","expect_column_values_to_not_be_null(column=""alert_type""),expect_column_values_to_be_in_set(column=""alert_type"", value_set=['Malware', 'Phishing', 'DDoS'])",1.0,1.0,1.0,100.00000000000004
Verify that the `attack_type` column has a unique combination with the `timestamp` column for each record in the `threat_events` table.,"expect_compound_columns_to_be_unique(column_A=""attack_type"", column_B=""timestamp"")","expect_compound_columns_to_be_unique(column_a=""attack_type"", column_b=""timestamp"")",1.0,1.0,1.0,81.66920319485294
Ensure the `profile_picture` column contains valid URLs that match the regex pattern `^https?:\/\/.*\.(jpg|jpeg|png)$`.,"expect_column_values_to_match_regex(column=""profile_picture"", regex=r""^https?:\/\/.*\.(jpg|jpeg|png)$"")","expect_column_values_to_match_regex(column=""profile_picture"", regex=r""^(https?:\/\/|)(.*)\.([jpg|jpeg|png])$"")",1.0,1.0,1.0,71.28018793392015
Ensure that the `age` column adheres to a normal distribution with a p-value greater than 0.05 in the Chi-Square test.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""age"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""age"", threshold=0.05)",0.8749999999999999,0.7999999999999999,0.8749999999999999,79.75010608178974
For field 'claim_date': Ensure this field is not null. Validate that all date entries conform to the format 'YYYY-MM-DD' and are in the past.,"expect_column_values_to_not_be_null(column=""claim_date""),expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""claim_date"")","expect_column_values_to_not_be_null(column=""claim_date""),expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""claim_date"")",0.9565217391304348,0.9253731343283583,0.9565217391304348,94.32282573159867
"Check that the `service_plan` column contains only distinct values from the list `['Basic', 'Standard', 'Premium']`.","expect_column_values_to_be_in_set(column=""service_plan"", value_set=['Basic', 'Standard', 'Premium'])","expect_column_values_to_be_in_set(column=""service_plan"", value_set=['Basic', 'Standard', 'Premium'])",1.0,1.0,1.0,100.00000000000004
Validate that the average `temperature` does not exceed the sum of daily `temperature` readings divided by the count in the `daily_avg_temp` field.,"expect_column_mean_to_be_between(column=""temperature"", min_value=None, max_value=expect_column_sum_to_be_between(column=""daily_avg_temp"") / expect_column_unique_value_count_to_be_between(column=""daily_avg_temp""))","expect_column_values_to_be_less_than(column=""daily_avg_temp"", value=sum(column=""daily_avg_temp"") / count(column=""daily_avg_temp""))",0.5964912280701754,0.29090909090909084,0.5614035087719298,37.29697903659937
"Ensure the `malware_type` column in the Cybersecurity dataset contains only distinct values from the defined list `['Virus', 'Worm', 'Adware']`.","expect_column_values_to_be_in_set(column=""malware_type"", value_set=['Virus', 'Worm', 'Adware'])","expect_column_distinct_values_to_be_in_set(column=""malware_type"", value_set=['Virus', 'Worm', 'Adware'])",0.967741935483871,0.896551724137931,0.967741935483871,91.90672413319132
"Validate that the `email` column does not match any patterns from the list `['%example.com%', '%test.com%']`.","expect_column_values_to_not_match_like_pattern_list(column=""email"", patterns=['%example.com%', '%test.com%'])","expect_column_values_to_not_match_regex_list(column=""email"", regex_list=[r"".*example\.com$"", r"".*test\.com$""])",0.7647058823529411,0.5625,0.7647058823529411,43.25827469852955
"Ensure the `phone_number` column matches the regular expression pattern `^\\+?[1-9]\\d{1,14}$` for valid international formats.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\\+?[1-9]\\d{1,14}$"")",1.0,1.0,1.0,91.3567673659309
"Ensure the `course_level` column includes only the distinct values `['Beginner', 'Intermediate', 'Advanced']`.","expect_column_distinct_values_to_equal_set(column=""course_level"", value_set=['Beginner', 'Intermediate', 'Advanced'])","expect_column_values_to_be_in_set(column=""course_level"", value_set=['Beginner', 'Intermediate', 'Advanced'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For field 'timestamp': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and adheres to the format '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format='%Y-%m-%d %H:%M:%S')","expect_column_to_exist(column=""timestamp""),expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.9249999999999999,0.923076923076923,0.9249999999999999,80.40083993988922
For the `multiplayer` column: Validate that it is a boolean type and must not contain null values.,"expect_column_values_to_be_of_type(column=""multiplayer"", type_=""boolean""),expect_column_values_to_not_be_null(column=""multiplayer"")","expect_column_to_exist(column=""multiplayer""),expect_column_values_to_be_of_type(column=""multiplayer"", type_=""boolean""),expect_column_values_to_not_be_null(column=""multiplayer"")",0.8695652173913044,0.8636363636363636,0.8695652173913044,75.60038881663347
Confirm that the `claim_date` column is in the format 'YYYY-MM-DD' and that there are no missing values.,"expect_column_to_exist(column=""claim_date""),expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""claim_date"")","expect_column_to_exist(column=""claim_date""),expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""claim_date"")ЎыџNЎыџN",0.9696969696969697,0.96875,0.9696969696969697,98.65741364867488
For the `activation_date` column: Ensure all dates follow the format 'YYYY-MM-DD'. Validate that no entries are older than 5 years.,"expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""activation_date"", min_value=""2018-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""activation_date""),expect_column_values_to_be_between(column=""activation_date"", min_value=""2018-10-01"", max_value=""2023-10-01"")",0.8205128205128205,0.7631578947368421,0.794871794871795,71.33351525698703
"For the `department` field: Ensure it exists and matches the list of valid departments `['Sales', 'HR', 'Engineering']`.","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'HR', 'Engineering'])","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'HR', 'Engineering'])",1.0,1.0,1.0,100.00000000000004
"Validate that the `transaction_id` column contains strings with a fixed length of 10 characters, using a regular expression pattern of `^[A-Z0-9]{10}$`.","expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[A-Z0-9]{10}$"")","expect_column_value_lengths_to_equal(column=""transaction_id"", length=10)",0.6153846153846153,0.3333333333333333,0.6153846153846153,31.34911916627293
For field 'route_id': Ensure that 'route_id' values are unique across all records to prevent route duplication.,"expect_column_values_to_be_unique(column=""route_id"")","expect_column_values_to_be_unique(column=""route_id"")",1.0,1.0,1.0,100.00000000000004
For field `email`: Validate that the entries conform to a valid email format. Ensure this field is required (not null).,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_null(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_null(column=""email"")",1.0,1.0,1.0,100.00000000000004
For field 'account_number': Ensure the field matches the type 'text'. Ensure the field has a fixed length of 10. Ensure this field exists.,"expect_column_to_exist(column=""account_number""),expect_column_values_to_be_of_type(column=""account_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""account_number"", target_length=10)","expect_column_to_exist(column=""account_number""),expect_column_values_to_be_of_type(column=""account_number"", type_=""text""),expect_column_values_to_be_between(column=""account_number"", min_value=1, max_value=10)",0.8307692307692308,0.7301587301587302,0.8307692307692308,78.38741548418466
Validate that the `signup_date` column contains dates within the range of `2020-01-01` to `2023-12-31`.,"expect_column_values_to_be_between(column=""signup_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""signup_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
For field 'created_at': Ensure values are valid timestamps and that they fall within the range of the last 10 years. Ensure this field exists.,"expect_column_to_exist(column=""created_at""),expect_column_values_to_be_dateutil_parseable(column=""created_at""),expect_column_values_to_be_between(column=""created_at"", min_value=""2013-10-01"", max_value=""2023-10-01"")","expect_column_to_exist(column=""created_at""),expect_column_values_to_be_dateutil_parseable(column=""created_at""),expect_column_values_to_be_between(column=""created_at"", min_value=""2022-11-30"", max_value=""2022-11-30"")",0.8333333333333334,0.8000000000000002,0.8333333333333334,85.59283030985051
Verify that the `special_requests` column does not exceed 255 characters in length and is not null.,"expect_column_value_lengths_to_be_between(column=""special_requests"", min_value=0, max_value=255),expect_column_values_to_not_be_null(column=""special_requests"")","expect_column_values_to_be_between(column=""special_requests"", min_value=None, max_value=255),expect_column_values_to_not_be_null(column=""special_requests"")",0.9411764705882353,0.8571428571428572,0.9411764705882353,87.22634198624175
"For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Validate that customer IDs are distinct and fall within the range of 1 to 100,000.","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""numeric""),expect_column_unique_value_count_to_be_between(column=""customer_id"", min_value=1, max_value=100000),expect_column_values_to_be_between(column=""customer_id"", min_value=1, max_value=100000)","expect_column_to_exist(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""numeric""),expect_column_values_to_be_between(column=""customer_id"", min_value=1, max_value=100000)",0.8775510204081632,0.8124999999999999,0.7551020408163266,78.2410170761421
For the `attachment_size` field: Validate that all entries are within the size limit of 10MB. Ensure this field cannot be null.,"expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=10485760),expect_column_values_to_not_be_null(column=""attachment_size"")","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=10 * 1024 * 1024), # 10 MBexpect_column_values_to_not_be_null(column=""attachment_size"")",0.8679245283018867,0.823529411764706,0.8679245283018867,81.78973268163904
"Check that the `status` column contains only values from the set ['Pending', 'In Transit', 'Delivered', 'Cancelled']. Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'In Transit', 'Delivered', 'Cancelled'])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'In Transit', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
Check that the distribution of `response_time` adheres to a normal distribution with a p-value greater than 0.05 in the KS test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""response_time"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""response_time"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'error_message': Ensure the field matches the type 'text'. Ensure this field exists only if the 'status_code' is 'error'. Ensure this field is not null when applicable.,"expect_column_to_exist(column=""error_message""),expect_column_values_to_be_of_type(column=""error_message"", type_=""text""),expect_column_values_to_not_be_null(column=""error_message"")  # This would be conditional based on the status_code condition which is not directly representable in Great Expectations.","expect_column_to_exist(column=""error_message""),expect_column_values_to_be_of_type(column=""error_message"", type_=""text""),expect_column_values_to_not_be_null(column=""error_message"")  # If applicable, not null, but for status_code='error'  # Should be like:expect_column_values_to_be_null(column=""error_message""),expect_column_values_to_not_be_null(column=""error_message""),expect_column_values_to_equal(column=""error_message"", value=""status_code='error'"")  # Should be like:expect_column_values_to_not_be_null(column=""error_message"")  # Should be like:expect_column_values_to_be_null(column=""error_message""),expect_column_values_to_not_be_null(column=""error_message"")  # This line assumes there are no other valid conditions, and error_message will be null when there is an error. If there is more context required, then expect_column_values_to_be_null(column=""error_message""),expect_column_values_to_not_be_null(column=""error_message"")  # Expecting the column values to be null, but only when error_message=""status_code='error'"".  # This should be used if you are using multiple statuses, but want to ensure that error_message is null when a different error happens, and when a",0.31404958677685946,0.25,0.2975206611570248,19.84445948121247
"Ensure the `location` column values do not include any entries from the set `['Restricted Area', 'Blacklisted Location']`.","expect_column_values_to_not_be_in_set(column=""location"", value_set=['Restricted Area', 'Blacklisted Location'])","expect_column_values_to_not_be_in_set(column=""location"", value_set=['Restricted Area', 'Blacklisted Location'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `product_category` column includes only values from the set `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `premium_amount` column values are non-negative and do not exceed a specified maximum amount.,"expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=specific_maximum_value)","expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=99999)",0.8749999999999999,0.8666666666666666,0.8749999999999999,83.133455068861
For the `origin` and `destination` fields: Ensure that the combination of these columns is unique across records.,"expect_compound_columns_to_be_unique(column_A=""origin"", column_B=""destination"")","expect_compound_columns_to_be_unique(column_list=[""origin"", ""destination""])",0.8181818181818182,0.6,0.8181818181818182,62.50976052517882
For the `listing_date` field: Verify that all entries are valid dates in the format 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For the `election_date` field: Ensure it matches the type 'date'. Verify that the date is not null and is greater than today's date.,"expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_greater_than(column=""election_date"", value=""2023-10-01"")  # Replace with today's date dynamically as needed.","expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_greater_than(column=""election_date"", value=today_date)",0.8860759493670886,0.8311688311688312,0.8860759493670886,81.40623291995959
"For field 'email_address': Ensure the field matches the type 'text'. Validate that all values conform to the email pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'. Ensure this field exists.","expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
"For field 'room_type': Ensure the field exists. Ensure values in (room_type) must exist in the set ('Standard', 'Deluxe', 'Suite').","expect_column_to_exist(column=""room_type""),expect_column_values_to_be_in_set(column=""room_type"", value_set=[""Standard"", ""Deluxe"", ""Suite""])","expect_column_to_exist(column=""room_type""),expect_column_values_to_be_in_set(column=""room_type"", value_set=['Standard', 'Deluxe', 'Suite'])",1.0,1.0,1.0,78.45017601424416
For the `incident_severity` column: Ensure that it is a numeric type and that its value is greater than the `incident_level` column.,"expect_column_values_to_be_of_type(column=""incident_severity"", type_=""numeric""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""incident_severity"", column_B=""incident_level"")","expect_column_values_to_be_of_type(column=""incident_severity"", type_=""int""),expect_column_pair_values_to_be_greater(column_a=""incident_severity"", column_b=""incident_level"")",0.912280701754386,0.8,0.912280701754386,76.28857733501268
Check that the `transaction_date` column matches the 'YYYY-MM-DD' format.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For field `sent_date`: Ensure the field matches the type 'date'. Ensure values in `sent_date` must be less than or equal to the current date.,"expect_column_values_to_be_of_type(column=""sent_date"", type_=""date""),expect_column_values_to_be_between(column=""sent_date"", min_value=None, max_value=""current_date"")","expect_column_values_to_be_of_type(column=""sent_date"", type_=""date""),expect_column_values_to_be_less_than_or_equal_to(column=""sent_date"", value=get_current_date())",0.8070175438596492,0.6909090909090909,0.8070175438596492,73.28372476033395
For field 'game_rating': Ensure values are between 1 and 10. Verify that the mean rating for each game is greater than 5.,"expect_column_values_to_be_between(column=""game_rating"", min_value=1, max_value=10),expect_column_mean_to_be_between(column=""game_rating"", min_value=5, max_value=None)","expect_column_values_to_be_between(column=""game_rating"", min_value=1, max_value=10),expect_column_mean_to_be_between(column=""game_rating"", min_value=5)",0.9473684210526316,0.9454545454545454,0.9473684210526316,89.13907712828069
For field `published_at`: Ensure the datetime strings match the format 'YYYY-MM-DD HH:MM:SS'. Validate no entries are null.,"expect_column_to_exist(column=""published_at""),expect_column_values_to_match_strftime_format(column=""published_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""published_at"")","expect_column_to_exist(column=""published_at""),expect_column_values_to_match_strftime_format(column=""published_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""published_at"")",1.0,1.0,1.0,100.00000000000004
Validate that the `filing_date` column contains dates that are not in the future and have a median date of less than five years ago.,"expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_between(column=""filing_date"",min= None, max=""today"")# replace today date with the current date today,expect_column_median_to_be_between(column=""filing_date"", lower_bound=""2020-01-01"", upper_bound=""today"")#replace upper_bound with todays date and replace lower_bound with current date - five years","expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_median_to_be_between(column=""filing_date"", min_value=""2019-03-01"", max_value=""2023-12-31""),expect_column_values_to_be_between(column=""filing_date"", min_value=""2018-11-01"", max_value=""2023-11-01"")",0.5765765765765767,0.4954128440366973,0.5405405405405405,58.26863272585655
Ensure that the `product_id` in the inventory exists in the list of `product_ids` in the sales records.,"expect_column_values_to_be_in_set(column=""product_id"", value_set=product_ids)","expect_column_pair_values_to_be_in_set(column_A=""product_id"", column_B=""product_id"", value_set=sales_records_product_ids)",0.7777777777777778,0.588235294117647,0.7777777777777778,52.470385354771324
"For the `humidity` column, ensure that the mean value is between 30% and 90% and contains no null values.","expect_column_mean_to_be_between(column=""humidity"", min_value=30, max_value=90),expect_column_values_to_not_be_null(column=""humidity"")","expect_column_mean_to_be_between(column=""humidity"", min_value=30, max_value=90),expect_column_values_to_not_be_null(column=""humidity"")",1.0,1.0,1.0,100.00000000000004
Ensure the `credit_score` column does not include values outside the range of 300 to 850.,"expect_column_values_to_be_between(column=""credit_score"", min_value=300, max_value=850)","expect_column_values_to_be_between(column=""credit_score"", min_value=300, max_value=850)",1.0,1.0,1.0,100.00000000000004
Ensure that the `booking_date` column matches the format '%Y-%m-%d' and all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""booking_date"")","expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""booking_date""),expect_column_values_to_be_less_than(column=""booking_date"", value=""2023-10-10"")",0.7301587301587301,0.6885245901639344,0.7301587301587301,58.05131455624655
Check that the `rating` column contains decimal values between 0.0 and 10.0.,"expect_column_values_to_be_between(column=""rating"", min_value=0.0, max_value=10.0)","expect_column_values_to_be_between(column=""rating"", min_value=0.0, max_value=10.0)",1.0,1.0,1.0,100.00000000000004
Ensure the `expiration_date` field contains valid date entries and is always greater than the `manufacture_date`.,"expect_column_to_exist(column=""expiration_date""),expect_column_values_to_be_dateutil_parseable(column=""expiration_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""expiration_date"", column_B=""manufacture_date"")","expect_column_values_to_be_dateutil_parseable(column=""expiration_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""expiration_date"", column_B=""manufacture_date"")",0.888888888888889,0.8852459016393442,0.888888888888889,76.35006753024435
Check that the `transaction_amount` column values are greater than zero and less than the maximum allowable transaction limit.,"expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=max_transaction_limit)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=None)",0.8749999999999999,0.8666666666666666,0.8749999999999999,83.133455068861
Verify that the number of rows in the `court_cases` table matches the number of entries in the `clients` table.,"expect_table_row_count_to_equal_other_table(table_name=""court_cases"", other_table_name=""clients"")","expect_table_row_count_to_equal_other_table(table_name=""court_cases"", other_table_name=""clients"")",1.0,1.0,1.0,100.00000000000004
For field 'timestamp': Ensure the field is required (not null). Ensure the field matches the type 'datetime'. Validate that all timestamps are in the past.,"expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_be_between(column=""timestamp"", min_value=None, max_value=datetime.datetime.now())","expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_be_less_than(column=""timestamp"", value=""current_timestamp"")",0.823529411764706,0.7575757575757576,0.823529411764706,76.85247026293413
Check that the total of the `nightly_rate` column multiplied by the `number_of_nights` equals the `total_price` for each booking.,"expect_multicolumn_sum_to_equal(column_list=[""nightly_rate"", ""number_of_nights""], target_column=""total_price"")","expect_multicolumn_sum_to_equal(column_list=[""nightly_rate"", ""number_of_nights""], sum_column=""total_price"")",0.9375,0.8666666666666667,0.9375,93.36510695862633
For field `ip_address`: Ensure the field contains only unique values matching the format of valid IPv4 addresses.,"expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$"")",0.8196721311475409,0.7118644067796611,0.8196721311475409,69.49659592895196
"Ensure the `status` column contains only distinct values matching the set ['active', 'inactive', 'maintenance']. No null values are permitted.","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'maintenance']),expect_column_values_to_not_be_null(column=""status""),expect_column_proportion_of_unique_values_to_be_between(column=""status"", min_value=1.0, max_value=1.0)","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive','maintenance']),expect_column_values_to_not_be_null(column=""status"")",0.7076923076923077,0.6984126984126985,0.7076923076923077,49.75231416692806
"For field 'grade': Ensure the field matches the type 'text'. Validate that values in (grade) only match the patterns 'A', 'B', 'C', 'D', or 'F'.","expect_column_values_to_be_of_type(column=""grade"", type_=""text""),expect_column_values_to_match_regex(column=""grade"", regex=r""^[A-F]$"")","expect_column_values_to_be_of_type(column=""grade"", type_=""text""),expect_column_values_to_be_in_set(column=""grade"", value_set=[""A"", ""B"", ""C"", ""D"", ""F""])",0.76,0.6249999999999999,0.76,57.209571088612364
"For the `invoice_total` field: Validate that it is a numeric type and falls within the range of 0 to 50,000.","expect_column_values_to_be_of_type(column=""invoice_total"", type_=""numeric""),expect_column_values_to_be_between(column=""invoice_total"", min_value=0, max_value=50000)","expect_column_values_to_be_of_type(column=""invoice_total"", type_=""float""),expect_column_values_to_be_between(column=""invoice_total"", min_value=0, max_value=50000)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.81282631934458
"Ensure the `case_status` field only contains values from the set `['Open', 'Closed', 'Pending']`.","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `application_status` column only contains values from the set `['pending', 'approved', 'rejected']`.","expect_column_values_to_be_in_set(column=""application_status"", value_set=['pending', 'approved', 'rejected'])","expect_column_values_to_be_in_set(column=""application_status"", value_set=['pending', 'approved','rejected'])",1.0,1.0,1.0,100.00000000000004
Check that the sum of `item_subtotal` equals `total_price` across all items in each order in the e-commerce dataset.,"expect_multicolumn_sum_to_equal(column_list=[""item_subtotal"", ""total_price""])","expect_multicolumn_sum_to_equal(column_list=[""item_subtotal"", ""total_price""])",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_date` column values can be parsed using dateutil and are within the current fiscal year.,"expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-10-01"", max_value=""2023-10-31"")  # Replace with actual fiscal year min/max values based on your company's requirements.",0.6835443037974683,0.6233766233766234,0.6835443037974683,61.330713911201975
"Verify that the `start_date` and `end_date` in the `projects` table are of type 'date', and ensure `end_date` is greater than `start_date`.","expect_column_values_to_be_of_type(column=""start_date"", type_=""date""),expect_column_values_to_be_of_type(column=""end_date"", type_=""date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")","expect_column_values_to_be_of_type(column=""start_date"", type_=""date""),expect_column_values_to_be_of_type(column=""end_date"", type_=""date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")",1.0,1.0,1.0,100.00000000000004
For field 'product_id': Ensure all values in this field are distinct and match the type 'string'. Ensure this field exists.,"expect_column_to_exist(column=""product_id""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""string"")","expect_column_to_exist(column=""product_id""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
For field 'order_id': Ensure this field exists and contains unique values. Verify it matches the type 'text'.,"expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""text"")","expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field 'user_ip': Ensure the field matches the type 'text'. Ensure values in 'user_ip' conform to valid IP address formatting.,"expect_column_values_to_be_of_type(column=""user_ip"", type_=""text""),expect_column_values_to_match_regex(column=""user_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^::([0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,7}:$|^([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}$|^([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}$|^([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}$|^([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}$|^[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6}|:)$|^:((:[0-9a-fA-F]{1,4}){1,7}|:)$"")","expect_column_values_to_be_of_type(column=""user_ip"", type_=""text""),expect_column_values_to_match_regex(column=""user_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")",0.32160804020100503,0.31472081218274106,0.32160804020100503,3.738283953840176
In the `user_rating` column: Ensure values are between 0 and 10 and that no duplicates exist.,"expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10),expect_column_values_to_be_unique(column=""user_rating"")","expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10),expect_column_values_to_be_unique(column=""user_rating"")",1.0,1.0,1.0,100.00000000000004
For the `employee_id` column: Ensure all entries are unique and have a length of 6 characters.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_value_lengths_to_equal(column=""employee_id"", length=6)","expect_column_values_to_be_unique(column=""employee_id""),expect_column_value_lengths_to_equal(column=""employee_id"", length=6)",1.0,1.0,1.0,100.00000000000004
Ensure the `order_date` column values are not null and are within the last three years.,"expect_column_values_to_not_be_null(column=""order_date""),expect_column_values_to_be_between(column=""order_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_values_to_not_be_null(column=""order_date""),expect_column_values_to_be_dateutil_parseable(column=""order_date""),expect_column_values_to_be_between(column=""order_date"", min_value=""2022-07-26"", max_value=""2023-10-01"")",0.7352941176470588,0.6666666666666667,0.7058823529411765,63.64649754777889
Confirm that the `discount_rate` column has values that are percentages between `0%` and `50%`.,"expect_column_values_to_be_between(column=""discount_rate"", min_value=0, max_value=50)","expect_column_values_to_be_between(column=""discount_rate"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` is unique across the dataset and follows the pattern `U[0-9]{5}`.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^U[0-9]{5}$"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""U[0-9]{5}"")",1.0,1.0,1.0,91.48569272631985
"For the `published_date`, confirm that all entries are valid dates and are not in the future.","expect_column_values_to_be_dateutil_parseable(column=""published_date""),expect_column_values_to_be_between(column=""published_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_dateutil_parseable(column=""published_date""),expect_column_values_to_be_in_set(column=""published_date"", value_set=[])  # This is the empty set, meaning we are checking for null values.",0.6557377049180328,0.5423728813559322,0.6557377049180328,61.47079279612421
For field 'research_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""research_id""),expect_column_values_to_be_of_type(column=""research_id"", type_=""int""),expect_column_values_to_be_unique(column=""research_id"")","expect_column_values_to_not_be_null(column=""research_id""),expect_column_values_to_be_of_type(column=""research_id"", type_=""int""),expect_column_values_to_be_unique(column=""research_id"")",1.0,1.0,1.0,100.00000000000004
"For the `transaction_amount` field: Ensure all values are greater than 0 and less than $100,000.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=100000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=1, max_value=100000)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
For the `session_duration` field: Validate that the mean value is greater than 60 seconds and less than 3600 seconds.,"expect_column_mean_to_be_between(column=""session_duration"", min_value=60, max_value=3600)","expect_column_mean_to_be_between(column=""session_duration"", min_value=60, max_value=3600)",1.0,1.0,1.0,100.00000000000004
For field 'employee_id': Ensure this field exists and matches the type 'integer'. Validate that all values are unique and not null.,"expect_column_to_exist(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id"")","expect_column_to_exist(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")",1.0,1.0,0.9210526315789473,100.00000000000004
"For field 'language': Ensure the values in (language) must exist in the predefined set (['English', 'Spanish', 'French']). Ensure this field exists.","expect_column_to_exist(column=""language""),expect_column_values_to_be_in_set(column=""language"", value_set=['English', 'Spanish', 'French'])","expect_column_to_exist(column=""language""),expect_column_values_to_be_in_set(column=""language"", value_set=['English', 'Spanish', 'French'])",1.0,1.0,1.0,100.00000000000004
"For the `course_id` in the education system, ensure that it exists in the `product_code` column of the ERP dataset.","expect_column_values_to_be_in_set(column=""course_id"", value_set=product_code_values)","expect_column_to_exist(column=""product_code""),expect_column_values_to_be_unique(column=""product_code""),expect_column_values_to_match_regex(column=""product_code"", regex=r""^COURSE_ID$"")",0.5,0.2857142857142857,0.4090909090909091,20.495089315743872
Ensure that the `experiment_date` field matches the format '%Y-%m-%d' and is not older than one year from today.,"expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=""experiment_date"")","expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""experiment_date"")  # Assuming the dates are sorted, this can be modified accordingly, if required.",0.7540983606557377,0.711864406779661,0.7540983606557377,64.94636040633188
For the 'in_game_transactions' table: Confirm that the 'transaction_amount' column is numeric and that it passes the Chi-Square test for expected distribution.,"expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""numeric""),expect_column_chisquare_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""numeric""),expect_column_chisquare_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Confirm that the `customer_id` column contains only distinct values and matches the type `integer`. Ensure there are no null values.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")",0.967741935483871,0.9333333333333333,0.8064516129032258,96.46458712936789
"For the `transaction_amount` column: Validate that values are greater than 0 and do not exceed 10,000. Check for non-null values.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000),expect_column_values_to_not_be_null(column=""transaction_amount"")","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000),expect_column_values_to_not_be_null(column=""transaction_amount"")",1.0,1.0,1.0,100.00000000000004
Validate that the `enrollment_date` column contains dates formatted as `YYYY-MM-DD` and that all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""enrollment_date"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=None, max_value=""1900-01-01"")",0.696969696969697,0.6562499999999999,0.696969696969697,54.403594793010896
Verify that the `filing_date` column contains dates in the format 'YYYY-MM-DD' and is not null.,"expect_column_to_exist(column=""filing_date""),expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""filing_date"")","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""filing_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
Ensure the `last_purchase_date` is not older than 5 years for active customers.,"expect_column_values_to_be_between(column=""last_purchase_date"", min_value=""2018-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_between(column=""last_purchase_date"", min_value=""2021-12-31"")",0.6857142857142857,0.6666666666666667,0.6857142857142857,57.585433356463156
"For field 'data_category': Ensure the values in (data_category) must exist in the predefined set (['Genetics', 'Physics', 'Chemistry']). Ensure this field exists.","expect_column_to_exist(column=""data_category""),expect_column_values_to_be_in_set(column=""data_category"", value_set=['Genetics', 'Physics', 'Chemistry'])","expect_column_to_exist(column=""data_category""),expect_column_values_to_be_in_set(column=""data_category"", value_set=['Genetics', 'Physics', 'Chemistry'])",1.0,1.0,1.0,100.00000000000004
Validate that each `hotel_name` in the dataset is unique and not null.,"expect_column_values_to_be_unique(column=""hotel_name""),expect_column_values_to_not_be_null(column=""hotel_name"")","expect_column_values_to_be_unique(column=""hotel_name""),expect_column_values_to_not_be_null(column=""hotel_name"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `purchase_amount` column has a total sum not exceeding $50,000 and a mean value greater than $500.","expect_column_sum_to_be_between(column=""purchase_amount"", min_value=None, max_value=50000),expect_column_mean_to_be_between(column=""purchase_amount"", min_value=500, max_value=None)","expect_column_sum_to_be_between(column=""purchase_amount"", min_value=0, max_value=50000),expect_column_mean_to_be_between(column=""purchase_amount"", min_value=500, max_value=None)",0.9666666666666667,0.9310344827586207,0.9666666666666667,96.0132862288073
For field 'order_quantity': Ensure the field exists. Ensure the field matches the type 'integer'. Ensure values in (order_quantity) are within the range 1 to 1000.,"expect_column_to_exist(column=""order_quantity""),expect_column_values_to_be_of_type(column=""order_quantity"", type_=""int""),expect_column_values_to_be_between(column=""order_quantity"", min_value=1, max_value=1000)","expect_column_to_exist(column=""order_quantity""),expect_column_values_to_be_of_type(column=""order_quantity"", type_=""int""),expect_column_values_to_be_between(column=""order_quantity"", min_value=1, max_value=1000)",1.0,1.0,1.0,100.00000000000004
Check that the `customer_id` column has no missing values and all entries are unique.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id"")","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `price` column contains only values from the set of valid prices, excluding any negative values.","expect_column_values_to_be_in_set(column=""price"", value_set=[valid_prices]), ,expect_column_values_to_not_be_in_set(column=""price"", value_set=[negative_values])","expect_column_values_to_be_between(column=""price"", min_value=None, max_value=None)",0.43902439024390244,0.2564102564102564,0.43902439024390244,17.20406803909536
Ensure the `delivery_date` is always greater than the `shipment_date`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""shipment_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""shipment_date"")",1.0,1.0,1.0,100.00000000000004
"For field 'account_type': Ensure values in (account_type) must exist in the set ('personal', 'business'). Ensure this field exists.","expect_column_to_exist(column=""account_type""),expect_column_values_to_be_in_set(column=""account_type"", value_set=[""personal"", ""business""])","expect_column_to_exist(column=""account_type""),expect_column_values_to_be_in_set(column=""account_type"", value_set=['personal', 'business'])",1.0,1.0,1.0,84.30824673629279
"Check that the number of rows in the `temperature_readings` table is between 365 and 730, accounting for daily readings over two years.","expect_table_row_count_to_be_between(min_value=365, max_value=730)","expect_table_row_count_to_be_between(min_value=365, max_value=730)",1.0,1.0,1.0,100.00000000000004
For the `client_id` field: Ensure the field matches the type 'integer'. Ensure each value is unique and exists in the `clients` table.,"expect_column_values_to_be_of_type(column=""client_id"", type_=""int""),expect_column_values_to_be_unique(column=""client_id""),expect_select_column_values_to_be_unique_within_record(column=""client_id"")","expect_column_values_to_be_of_type(column=""client_id"", type_=""int""),expect_column_values_to_be_unique(column=""client_id""),expect_column_values_to_be_in_set(column=""client_id"", value_set=clients)  # Assume `clients` is a list of client ids  # NOTE: If clients are already loaded into the table, you would need to replace the value_set parameter with a more accurate way of accessing the client IDs, such as a query that selects from the `clients` table.",0.5309734513274336,0.46846846846846846,0.5132743362831859,49.14955486649914
Check that the average days on market for properties in the `listings` table does not exceed 90 days.,"expect_column_mean_to_be_between(column=""days_on_market"", min_value=None, max_value=90)","expect_column_mean_to_be_between(column=""days_on_market"", min_value=0, max_value=90)",0.9375,0.8666666666666667,0.9375,92.10500207490826
Ensure the `json_data` column values conform to the specified JSON schema and are valid JSON objects.,"expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object""})","expect_column_values_to_match_json_schema(column=""json_data""),expect_column_values_to_be_json_parseable(column=""json_data"")",0.9302325581395349,0.9268292682926829,0.7441860465116279,75.25250013917548
Check that the number of lines in the `course_data.txt` file does not exceed 1000 and matches the expected regex pattern.,"expect_file_line_regex_match_count_to_be_between(file_path=""course_data.txt"", min_value=0, max_value=1000),expect_file_line_regex_match_count_to_equal(file_path=""course_data.txt"", regex_pattern=""your_expected_regex_pattern_here"")","expect_file_line_regex_match_count_to_be_between(file_path=""course_data.txt"", min_value=1, max_value=1000),expect_file_line_regex_match_count_to_match_regex(file_path=""course_data.txt"", regex=r"".*"")",0.8684210526315789,0.7837837837837838,0.8421052631578948,78.5776409665376
For the `author_id` field: Ensure all values exist in the `users` table. Ensure this field cannot be null.,"expect_column_values_to_be_in_set(column=""author_id"", value_set=users_table_author_ids),expect_column_values_to_not_be_null(column=""author_id"")","expect_column_values_to_exist_in_set(column=""author_id"", value_set=users_table_values),expect_column_values_to_not_be_null(column=""author_id"")",0.9019607843137256,0.816326530612245,0.9019607843137256,87.22634198624175
For field 'points_scored': Ensure the field is required (not null). Ensure values in 'points_scored' are non-negative integers. Ensure this field exists.,"expect_column_to_exist(column=""points_scored""),expect_column_values_to_not_be_null(column=""points_scored""),expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""points_scored"", type_=""int"")","expect_column_to_exist(column=""points_scored""),expect_column_values_to_not_be_null(column=""points_scored""),expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=None)",0.8421052631578948,0.8378378378378378,0.8421052631578948,65.9240630200444
For field 'order_date': Ensure the field matches the type 'date'. Ensure all values in (order_date) are on or before the current date. Ensure this field exists.,"expect_column_to_exist(column=""order_date""),expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_be_between(column=""order_date"", min_value=None, max_value=""current_date"")","expect_column_to_exist(column=""order_date""),expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_be_less_than(column=""order_date"", value=now())",0.8484848484848486,0.78125,0.8484848484848486,78.44707490658011
Ensure the `meter_reading` column contains only numeric values and does not have any missing values.,"expect_column_values_to_not_be_null(column=""meter_reading""),expect_column_values_to_be_of_type(column=""meter_reading"", type_=""float"")","expect_column_values_to_be_of_type(column=""meter_reading"", type_=""float""),expect_column_values_to_not_be_null(column=""meter_reading"")",1.0,0.9523809523809523,0.7272727272727273,99.48584414934561
Ensure that the `delivery_date` is formatted as 'YYYY-MM-DD' and occurs after the `order_date`.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_to_exist(column=""delivery_date""),expect_column_to_exist(column=""order_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""delivery_date"", other_column=""order_date"")",0.6933333333333334,0.5205479452054794,0.6933333333333334,57.26208199837635
For the `game_title` column: Validate that all entries are unique and have a minimum length of 3 characters.,"expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=3, max_value=None)","expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=3)",0.9361702127659575,0.9333333333333333,0.9361702127659575,87.059045826559
Confirm that the `report_date` column contains dates in the format `YYYY-MM-DD` and are valid.,"expect_column_values_to_match_strftime_format(column=""report_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""report_date"")","expect_column_values_to_match_strftime_format(column=""report_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""report_date"")",1.0,1.0,1.0,100.00000000000004
Validate that the `district` column contains values from the set of all valid districts. Ensure this field exists and is not null.,"expect_column_to_exist(column=""district""),expect_column_values_to_not_be_null(column=""district""),expect_column_values_to_be_in_set(column=""district"", value_set=valid_districts_set)","expect_column_to_exist(column=""district""),expect_column_values_to_be_in_set(column=""district"", value_set=valid_districts_set)  # Replace valid_districts_set with the actual set of valid districts.",0.7,0.6551724137931035,0.6666666666666667,68.00817083271626
"Confirm the `department` column contains only values from the set: `['HR', 'IT', 'Finance']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'IT', 'Finance'])","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'IT', 'Finance'])",1.0,1.0,1.0,100.00000000000004
For field 'registration_date': Ensure the field matches the type 'date'. Ensure the field contains values less than or equal to the current date. Ensure this field exists.,"expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_between(column=""registration_date"", min_value=None, max_value=datetime.datetime.now().date())","expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than(column=""registration_date"", value=datetime.datetime.now())",0.8857142857142858,0.823529411764706,0.8857142857142858,81.16773037074556
For field 'sent_timestamp': Ensure this field cannot be null. Ensure that all timestamps are valid and fall within the last five years.,"expect_column_values_to_not_be_null(column=""sent_timestamp""),expect_column_values_to_be_dateutil_parseable(column=""sent_timestamp""),expect_column_values_to_be_between(column=""sent_timestamp"", min_value=""2018-01-01T00:00:00"", max_value=""2023-10-01T00:00:00"")","expect_column_values_to_not_be_null(column=""sent_timestamp""),expect_column_values_to_be_between(column=""sent_timestamp"", min_value=""2021-01-01"", max_value=""2023-01-01"")",0.6944444444444445,0.6285714285714286,0.6944444444444445,54.14556371367834
Verify that the `discount` field values are percentages (0-100) and do not allow null entries.,"expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""discount"")","expect_column_values_to_be_of_type(column=""discount"", type_=""float""),expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100)  # Checks if the value is between 0 and 100 #expect_column_values_to_not_be_null(column=""discount"")  # This is assuming that there will be a ""discount"" field in the given table. In case that field doesn't exist, you will need to use a different approach.",0.4842105263157894,0.47311827956989244,0.4842105263157894,40.093772590365944
"For field 'post_content': Ensure the field matches the type 'text'. Validate that the content length must be at least 100 characters and cannot exceed 10,000 characters. Ensure this field exists.","expect_column_to_exist(column=""post_content""),expect_column_value_lengths_to_be_between(column=""post_content"", min_value=100, max_value=10000),expect_column_values_to_be_of_type(column=""post_content"", type_=""text"")","expect_column_to_exist(column=""post_content""),expect_column_values_to_be_of_type(column=""post_content"", type_=""text""),expect_column_value_lengths_to_be_between(column=""post_content"", min_value=100, max_value=10000)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
Confirm that all entries in the `last_accessed` column follow the datetime format `YYYY-MM-DD HH:MM:SS`.,"expect_column_values_to_match_strftime_format(column=""last_accessed"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_be_dateutil_parseable(column=""last_accessed""),expect_column_values_to_match_strftime_format(column=""last_accessed"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.782608695652174,0.7727272727272727,0.782608695652174,64.32739204040647
For field 'publication_date': Ensure the field matches the type 'date'. Ensure this field does not contain future dates.,"expect_column_values_to_be_of_type(column=""publication_date"", type_=""date""),expect_column_values_to_be_between(column=""publication_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""publication_date"", type_=""date""),expect_column_values_to_be_dateutil_parseable(column=""publication_date""),expect_column_values_to_be_less_than(column=""publication_date"", value=""current_date"")  # Assume current_date is the latest date in the table, and that future dates should not be stored in the database.",0.5176470588235293,0.43373493975903615,0.5176470588235293,46.57589982925195
"Ensure the `account_type` column contains only values from the set `['Savings', 'Checking', 'Investment']`.","expect_column_values_to_be_in_set(column=""account_type"", value_set=['Savings', 'Checking', 'Investment'])","expect_column_values_to_be_in_set(column=""account_type"", value_set=['Savings', 'Checking', 'Investment'])",1.0,1.0,1.0,100.00000000000004
"Check that the `status` column contains only values from the set `['Active', 'Inactive', 'Pending']` and is of type 'text'.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Active"", ""Inactive"", ""Pending""]),expect_column_values_to_be_of_type(column=""status"", type_=""text"")","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Pending']),expect_column_values_to_be_of_type(column=""status"", type_=""text"")",1.0,1.0,1.0,81.09111450536177
"Verify that the `room_type` column contains only the values `['Single', 'Double', 'Suite']` and that all entries are non-null.","expect_column_values_to_be_in_set(column=""room_type"", value_set=[""Single"", ""Double"", ""Suite""]),expect_column_values_to_not_be_null(column=""room_type"")","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=""room_type"")",1.0,1.0,1.0,80.15316328584778
"For the `status` column: Validate that it only contains the values `['Sent', 'Failed', 'Pending']` and is not null.","expect_column_values_to_be_in_set(column=""status"", value_set=['Sent', 'Failed', 'Pending']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=[""Sent"", ""Failed"", ""Pending""]),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,78.98083643452483
Verify that the distribution of `monthly_usage` follows a normal distribution with an appropriate mean and standard deviation.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""monthly_usage"", threshold=0.05)","expect_column_mean_to_be_between(column=""monthly_usage"", min_value=10, max_value=None),expect_column_stdev_to_be_between(column=""monthly_usage"", min_value=0.5, max_value=5)",0.3673469387755102,0.1702127659574468,0.3673469387755102,23.148373610475733
For field 'product_sku': Ensure this field exists. Validate that (product_sku) is unique and matches the regex pattern '^[A-Z0-9-]+$'.,"expect_column_to_exist(column=""product_sku""),expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[A-Z0-9-]+$"")","expect_column_to_exist(column=""product_sku""),expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[A-Z0-9-]+$"")",1.0,1.0,1.0,100.00000000000004
For the `application_date`: Ensure that all entries are in 'YYYY-MM-DD' format and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""application_date"")","expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""application_date"")",1.0,1.0,1.0,100.00000000000004
For the field `case_id`: Ensure this field is required (not null). Ensure it contains unique values for each record.,"expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_unique(column=""case_id"")","expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_unique(column=""case_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `policy_number` column contains only unique values that conform to the pattern 'POL-#####'.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^POL-\d{5}$"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^POL-#####$"")",0.9545454545454545,0.9523809523809523,0.9545454545454545,87.77008558345752
For field 'match_date': Ensure the field matches the datetime format 'YYYY-MM-DD HH:MM:SS'. Validate that all match dates are in the future.,"expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_in_set(column=""match_date"", value_set=[date for date in pd.date_range(start=pd.Timestamp.now(), freq='D', periods=365).strftime(""%Y-%m-%d %H:%M:%S"")])","expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_between(column=""match_date"", min_value=""2023-10-10 00:00:00"", max_value=""now"")",0.6222222222222222,0.5454545454545454,0.6222222222222222,50.16739315902169
"In the `platform` field, ensure all entries are from the allowed set `['PC', 'Xbox', 'PlayStation']` and that there are no null values.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation']),expect_column_values_to_not_be_null(column=""platform"")","expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Xbox"", ""PlayStation""]),expect_column_values_to_not_be_null(column=""platform"")",1.0,1.0,1.0,78.98083643452483
Ensure the `case_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id"")","expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `registration_date` column contains valid dates in the format `YYYY-MM-DD`.,"expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure that the combination of `product_id` and `warehouse_id` is unique across records.,"expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")","expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")",1.0,1.0,1.0,100.00000000000004
For fields `transaction_date` and `fraudulent_status`: Ensure that the `fraudulent_status` is marked as 'True' only if `transaction_date` is flagged as suspicious.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""transaction_date"", column_B=""fraudulent_status"")  # Assuming 'suspicious' is defined by a certain condition for transaction_date.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""transaction_date"", column_B=""fraudulent_status"", greater_than=""True"")lásil",0.6923076923076923,0.68,0.6923076923076923,72.64390083987901
For the `shipment_date`: Validate that all dates are valid and occur after the corresponding `order_date`.,"expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""shipment_date"", column_B=""order_date"")","expect_column_pair_values_to_be_increasing(column_A=""order_date"", column_B=""shipment_date""),expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_values_to_be_between(column=""shipment_date"", min_value=""2023-10-01"", max_value=None)",0.6857142857142857,0.5588235294117647,0.5142857142857143,55.33399604236917
For the field `employee_id`: Ensure this field is required (not null). Ensure it contains unique values for each employee.,"expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_unique(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `purchase_date` column has values in the correct date format and contains no missing values.,"expect_column_to_exist(column=""purchase_date""),expect_column_values_to_be_dateutil_parseable(column=""purchase_date""),expect_column_values_to_not_be_null(column=""purchase_date"")","expect_column_values_to_match_strftime_format(column=""purchase_date"", strftime_format=""%Y-%m-%d"")  # Assumes the current date and time are used to create the purchase_date value.  # Expect_column_values_to_not_be_null(column=""purchase_date"")  # Assuming a record doesn't exist without a purchase_date, this will also ensure no missing values.",0.5060240963855422,0.37037037037037035,0.4578313253012048,39.01603918701963
For the `view_count`: Ensure the field matches the type 'integer'. Validate that all values are non-negative and adhere to the expected distribution parameters.,"expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)","expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'case_number': Ensure the field exists. Validate that (case_number) matches the pattern 'C\\d{4}-\\d{6}'.,"expect_column_to_exist(column=""case_number""),expect_column_values_to_match_regex(column=""case_number"", regex=r""C\d{4}-\d{6}"")","expect_column_to_exist(column=""case_number""),expect_column_values_to_match_regex(column=""case_number"", regex=r""C\d{4}-\d{6}"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `user_activity` column shows a normal distribution, passing the Kolmogorov-Smirnov (KS) test with a p-value greater than 0.05.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""user_activity"", threshold=0.05)","expect_column_kolmogorov_smirnov_test_p_value_to_be_greater_than(column=""user_activity"", threshold=0.05)",0.8571428571428571,0.787878787878788,0.8571428571428571,81.66577179049152
For field 'course_code': Ensure the field matches the type 'text'. Confirm that values conform to the pattern '^[A-Z]{3}-[0-9]{3}$'.,"expect_column_values_to_be_of_type(column=""course_code"", type_=""text""),expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$"")","expect_column_values_to_be_of_type(column=""course_code"", type_=""text""),expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `user_data` file exists and matches the specified SHA-256 hash value.,"expect_file_to_exist(file_path=""user_data""),expect_file_hash_to_equal(file_path=""user_data"", hash_value=""SHA-256_hash_value"")","expect_file_to_exist(file=""user_data"")  # File must exist.",0.48484848484848486,0.3225806451612903,0.48484848484848486,15.762234289046637
For the `user_agent` field: Ensure the field contains valid user agent strings and is required (not null). Verify that all entries are unique.,"expect_column_values_to_not_be_null(column=""user_agent""),expect_column_values_to_be_unique(column=""user_agent""),expect_column_values_to_match_regex(column=""user_agent"", regex=r"".+"")  # Assuming a basic check for non-empty valid user agent strings.","expect_column_values_to_not_be_null(column=""user_agent""),expect_column_values_to_be_unique(column=""user_agent"")",0.6333333333333334,0.6206896551724138,0.6333333333333334,38.539427720275945
Ensure that the combination of `user_id` and `video_id` remains unique across records to prevent duplicate entries.,"expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""video_id"")","expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""video_id"")",1.0,1.0,1.0,100.00000000000004
"For the field 'customer_email': Ensure the field is required (not null) and matches the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.","expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
"For the `shipment_status`: Ensure it follows the format of `['Pending', 'In Transit', 'Delivered']`.","expect_column_values_to_be_in_set(column=""shipment_status"", value_set=[""Pending"", ""In Transit"", ""Delivered""])","expect_column_values_to_be_in_set(column=""shipment_status"", value_set=['Pending', 'In Transit', 'Delivered'])",1.0,1.0,1.0,66.98321284153623
"Ensure the 'customer_status' column contains only distinct values from the list ['Active', 'Inactive', 'Prospect'].","expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive', 'Prospect'])","expect_column_distinct_values_to_equal_set(column=""customer_status"", value_set=['Active', 'Inactive', 'Prospect'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For field 'wind_speed': Ensure the field matches the type 'float'. Validate that all values in (wind_speed) are non-negative.,"expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0)","expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0)",1.0,1.0,1.0,100.00000000000004
Validate that the `discount_percentage` column values do not exceed 100% and are all within the range of 0 to 100.,"expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For field 'status': Ensure that values in (status) must exist in the set (['Sent', 'Draft', 'Failed']). Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Sent', 'Draft', 'Failed'])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Sent"", ""Draft"", ""Failed""])",1.0,1.0,1.0,77.03172950871594
"Check that the `population` column has a mean value greater than 500,000 and a standard deviation not exceeding 100,000.","expect_column_mean_to_be_between(column=""population"", min_value=500000),expect_column_stdev_to_be_between(column=""population"", max_value=100000)","expect_column_mean_to_be_between(column=""population"", min_value=500001, max_value=None),expect_column_stdev_to_be_between(column=""population"", max_value=100000)",0.8936170212765958,0.8444444444444444,0.8936170212765958,84.02651341260783
Check that the JSON file `config.json` contains valid JSON formatting and adheres to the specified schema.,"expect_file_to_exist(file_path=""config.json""),expect_file_to_be_valid_json(file_path=""config.json""),expect_column_values_to_match_json_schema(column=""config"", schema={""type"": ""object"", ""properties"": {}})  # Replace with the actual schema as needed.","expect_file_to_be_valid_json_file(file_path=""config.json""),expect_column_values_to_match_json_schema(column=""schema"", schema=""your schema"")",0.6885245901639344,0.576271186440678,0.6557377049180327,39.447059481205336
For field 'salary': Validate that the field is required (not null). Ensure the field matches the type 'decimal' and that values are greater than zero.,"expect_column_values_to_not_be_null(column=""salary""),expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""salary"", threshold=0)","expect_column_values_to_not_be_null(column=""salary""),expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_be_between(column=""salary"", min_value=0, max_value=None)",0.8615384615384616,0.7936507936507938,0.8615384615384616,82.77173931143666
Verify that the `email` column contains valid email formats and that the unique value count is greater than 1000.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_unique_value_count_to_be_between(column=""email"", min_value=1001)","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_unique_value_count_to_be_between(column=""email"", min_value=1001, max_value=None)",0.71875,0.6774193548387097,0.71875,73.87861524936284
Ensure that the `in_game_purchase` column contains only boolean values (true/false) and that at least 60% of entries are true.,"expect_column_values_to_be_of_type(column=""in_game_purchase"", type_=""bool""),expect_column_proportion_of_unique_values_to_be_between(column=""in_game_purchase"", min_value=0.6, max_value=1.0)","expect_column_values_to_be_of_type(column=""in_game_purchase"", type_=""boolean""),expect_column_proportion_of_unique_values_to_be_between(column=""in_game_purchase"", min_value=0.6)",0.90625,0.8709677419354839,0.90625,86.64535832077338
For field `order_date`: Ensure this field is of type 'date'. Ensure the field is required (not null).,"expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_not_be_null(column=""order_date"")","expect_column_to_exist(column=""order_date""),expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_not_be_null(column=""order_date"")",0.8627450980392156,0.8571428571428571,0.8627450980392156,74.80673768313193
Verify that the `monthly_consumption` values in the `electricity` column are within the range of 0 to 5000 kWh.,"expect_column_values_to_be_between(column=""electricity"", min_value=0, max_value=5000)","expect_column_values_to_be_between(column=""monthly_consumption"", min_value=0, max_value=5000)",0.896551724137931,0.8148148148148148,0.896551724137931,84.986446467415
For the `game_duration` column: Ensure the values are non-negative integers and the standard deviation is below `20` minutes.,"expect_column_values_to_be_of_type(column=""game_duration"", type_=""int""),expect_column_values_to_be_between(column=""game_duration"", min_value=0, max_value=None),expect_column_stdev_to_be_between(column=""game_duration"", max_value=20)","expect_column_values_to_be_of_type(column=""game_duration"", type_=""int""),expect_column_stdev_to_be_between(column=""game_duration"", min_value=0, max_value=20)",0.8181818181818181,0.8125000000000001,0.7878787878787878,64.69515502573694
For field 'profile_picture_url': Ensure the field can be null. Ensure the field matches the type 'text'. Validate that the URL format is correct if provided.,"expect_column_values_to_be_null(column=""profile_picture_url""),expect_column_values_to_be_of_type(column=""profile_picture_url"", type_=""text""),expect_column_values_to_match_regex(column=""profile_picture_url"", regex=r""^(https?://)?(www\.)?([a-zA-Z0-9-]+(\.[a-zA-Z]{2,})+)(/.*)?$"")","expect_column_to_exist(column=""profile_picture_url""),expect_column_values_to_be_of_type(column=""profile_picture_url"", type_=""text""),expect_column_values_to_be_null(column=""profile_picture_url""),expect_column_values_to_match_regex(column=""profile_picture_url"", regex=r""^http[s]?://"")",0.8000000000000002,0.7954545454545455,0.7333333333333333,67.70511897126742
Validate that the `player_count` column values are integers within the range of 1 to 10000.,"expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=""player_count"", type_=""int"")","expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=""player_count"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
For field 'tracking_number': Ensure the field exists. Validate that (tracking_number) is a string of 12 characters and does not match any disallowed regex patterns.,"expect_column_to_exist(column=""tracking_number""),expect_column_value_lengths_to_equal(column=""tracking_number"", length=12),expect_column_values_to_not_match_regex(column=""tracking_number"", regex=""DISALLOWED_REGEX_PATTERN"")","expect_column_to_exist(column=""tracking_number""),expect_column_value_lengths_to_equal(column=""tracking_number"", length=12),expect_column_values_to_not_match_regex(column=""tracking_number"", regex=r""^[A-Za-z0-9]{12}$"")",0.8656716417910447,0.8615384615384616,0.8656716417910447,83.39745273569305
"For field 'item_category': Ensure the field matches the type 'text'. Ensure the values in 'item_category' must exist in the set ['Electronics', 'Furniture', 'Clothing']. Ensure this field exists.","expect_column_to_exist(column=""item_category""),expect_column_values_to_be_of_type(column=""item_category"", type_=""text""),expect_column_values_to_be_in_set(column=""item_category"", value_set=['Electronics', 'Furniture', 'Clothing'])","expect_column_to_exist(column=""item_category""),expect_column_values_to_be_of_type(column=""item_category"", type_=""text""),expect_column_values_to_be_in_set(column=""item_category"", value_set=[""Electronics"", ""Furniture"", ""Clothing""])",1.0,1.0,1.0,86.20854454554733
For fields 'sample_size' and 'confidence_interval': Ensure the sum of sample_size is greater than or equal to the value of confidence_interval.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""sample_size"", column_B=""confidence_interval"")","expect_column_sum_to_be_between(column=""sample_size"", min_value=confidence_interval, max_value=confidence_interval)",0.5714285714285715,0.24242424242424243,0.5142857142857143,34.71764204025096
"Verify that the `weather_condition` column contains only distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",0.875,0.7333333333333333,0.875,84.99508493439812
For field 'reporting_officer': Ensure the field matches the type 'text'. Validate that the lengths of values in (reporting_officer) do not exceed 50 characters.,"expect_column_values_to_be_of_type(column=""reporting_officer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""reporting_officer"", min_value=0, max_value=50)","expect_column_values_to_be_of_type(column=""reporting_officer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""reporting_officer"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
"Ensure the `platform` column contains only values from the set ['PC', 'Console', 'Mobile'] and there are no duplicates.","expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Console"", ""Mobile""]),expect_column_values_to_be_unique(column=""platform"")","expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Console"", ""Mobile""]),expect_column_values_to_be_unique(column=""platform"")",1.0,1.0,1.0,100.00000000000004
For the `shipping_address` field: Confirm it is a valid JSON object adhering to the specified schema.,"expect_column_values_to_match_json_schema(column=""shipping_address"", schema={})","expect_column_values_to_match_json_schema(column=""shipping_address"", schema={""type"": ""object""})",0.9166666666666666,0.9090909090909091,0.9166666666666666,74.42818700511143
For `rating`: Ensure values are within the range of 1 to 5. Ensure this field is required (not null).,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
Ensure the total `votes_cast` across all candidates for each election is equal to the sum of individual `votes_per_candidate`.,"expect_multicolumn_sum_to_equal(column_list=[""votes_cast"", ""votes_per_candidate""])","expect_column_pair_values_to_be_equal(column_A=""votes_cast"", column_B=""votes_per_candidate"")",0.6428571428571429,0.30769230769230765,0.6428571428571429,43.929751176084075
For field 'customer_id': Ensure it contains unique values and does not allow null entries. Verify that it matches the type 'integer'.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"For field 'payment_status': Ensure the field matches the type 'text'. Validate that values in (payment_status) must exist in the set ['Paid', 'Pending', 'Failed']. Ensure this field exists.","expect_column_to_exist(column=""payment_status""),expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Failed'])","expect_column_to_exist(column=""payment_status""),expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Failed'])",1.0,1.0,1.0,100.00000000000004
For field 'last_contacted': Ensure values adhere to the datetime format '%d-%m-%Y'. Validate that there are no future dates.,"expect_column_values_to_match_strftime_format(column=""last_contacted"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_less_than(column=""last_contacted"", value=datetime.now())","expect_column_values_to_match_strftime_format(column=""last_contacted"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""last_contacted""),expect_column_values_to_be_less_than(column=""last_contacted"", value=""2023-10-31"")  # Replace with a valid ending date.",0.7123287671232876,0.7042253521126761,0.7123287671232876,60.96880029205754
"In the `insurance_premium` and `coverage_amount` columns: Validate that the sum of both fields is greater than $1,000 across all records.","expect_multicolumn_sum_to_equal(column_list=[""insurance_premium"", ""coverage_amount""], value=1000)","expect_column_sum_to_be_greater_than(column=""insurance_premium"", value=1000),expect_column_sum_to_be_greater_than(column=""coverage_amount"", value=1000)",0.5405405405405406,0.2857142857142857,0.5405405405405406,30.792153068156395
Ensure the `case_number` column contains only unique values and follows the format `CASE-YYYY-XXXX`.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_match_regex(column=""case_number"", regex=r""^CASE-\d{4}-\d{4}$"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_match_regex(column=""case_number"", regex=r""^CASE-[0-9]{4}-[A-Z]{3}$"")",0.8461538461538461,0.8,0.8461538461538461,79.72231992159641
For field 'doctor_id': Ensure that values in this field must exist in the 'doctor' dataset. Ensure the field matches the type 'integer' and is not null.,"expect_column_values_to_be_in_set(column=""doctor_id"", value_set=doctor_dataset_ids),expect_column_values_to_be_of_type(column=""doctor_id"", type_=""int""),expect_column_values_to_not_be_null(column=""doctor_id"")","expect_column_to_exist(column=""doctor_id""),expect_column_values_to_be_in_set(column=""doctor_id"", value_set=doctor_data[""doctor_id""]),expect_column_values_to_be_of_type(column=""doctor_id"", type_=""int""),expect_column_values_to_not_be_null(column=""doctor_id"")",0.8536585365853658,0.8250000000000001,0.8536585365853658,75.08289305054792
"In the `final_grade` column: Ensure that values are between 0 and 100, and that there are no missing values.","expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""final_grade"")","expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""final_grade"")",1.0,1.0,1.0,100.00000000000004
Ensure the `stock_level` column values are integers greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""stock_level"", type_=""int""),expect_column_values_to_be_between(column=""stock_level"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""stock_level"", min_value=0, max_value=None)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
For field 'assist_count': Ensure the field matches the type 'integer'. Ensure values in 'assist_count' are non-negative. Ensure this field exists.,"expect_column_to_exist(column=""assist_count""),expect_column_values_to_be_of_type(column=""assist_count"", type_=""int""),expect_column_values_to_be_between(column=""assist_count"", min_value=0, max_value=None)","expect_column_to_exist(column=""assist_count""),expect_column_values_to_be_of_type(column=""assist_count"", type_=""int""),expect_column_values_to_be_between(column=""assist_count"", min_value=0)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.13468812604467
"Check that the `feedback_score` column has values ranging from 1 to 10, and ensure the standard deviation is below 1.5.","expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=10),expect_column_stdev_to_be_between(column=""feedback_score"", min_value=0, max_value=1.5)","expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=10),expect_column_stdev_to_be_between(column=""feedback_score"", min_value=1.5, max_value=10)",0.967741935483871,0.9333333333333333,0.9032258064516129,94.80970094162562
For the `timestamp` field: Validate that all entries are in the ISO 8601 format `YYYY-MM-DDTHH:MM:SSZ`.,"expect_column_values_to_match_regex(column=""timestamp"", regex=r""^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",0.34146341463414637,0.2564102564102564,0.34146341463414637,22.984202324411783
For field `diagnosis_code`: Ensure the field matches the type 'text'. Ensure values exist in the predefined list of valid ICD codes.,"expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_icd_codes)","expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_icd_codes)  # Replace ""valid_icd_codes"" with actual list of valid ICD codes.",0.8307692307692308,0.8253968253968255,0.8307692307692308,78.05930743508284
"For the `message_length` column, validate that all lengths are integers and do not exceed 2000 characters.","expect_column_values_to_be_of_type(column=""message_length"", type_=""int""),expect_column_values_to_be_between(column=""message_length"", min_value=0, max_value=2000)","expect_column_values_to_be_of_type(column=""message_length"", type_=""int""),expect_column_value_lengths_to_be_between(column=""message_length"", min_value=0, max_value=2000)",0.9818181818181818,0.9433962264150944,0.9818181818181818,92.7458180009258
For the `hire_date` field: Validate that all dates are in the format 'YYYY-MM-DD' and fall before the current date.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"", max_value=your_current_date)","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""hire_date"", value_set=[date for date in hire_dates if date < date.today()])",0.6666666666666666,0.5569620253164557,0.6666666666666666,53.530103715448085
Ensure the `research_title` field contains no missing values and has a length between 5 and 150 characters.,"expect_column_values_to_not_be_null(column=""research_title""),expect_column_value_lengths_to_be_between(column=""research_title"", min_value=5, max_value=150)","expect_column_values_to_not_be_null(column=""research_title""),expect_column_value_lengths_to_be_between(column=""research_title"", min_value=5, max_value=150)",1.0,1.0,1.0,100.00000000000004
"For field 'policyholder_data': Validate that all entries are valid JSON objects and confirm they conform to the defined schema, particularly checking for required fields.","expect_column_values_to_be_json_parseable(column=""policyholder_data""),expect_column_values_to_match_json_schema(column=""policyholder_data"", schema={""type"": ""object"", ""required"": [""field1"", ""field2""]})  # Replace field1, field2 with actual required fields in the schema","expect_column_values_to_match_json_schema(column=""policyholder_data""),expect_column_values_to_match_regex(column=""policyholder_data"", regex=r""^.+?\."" + r""^}+$"")  # This ensures that the JSON is valid, but doesn't actually check for the schema requirements, so you may want to add additional assertions to achieve that.",0.5176470588235293,0.38554216867469876,0.44705882352941173,43.86727429822079
Confirm that the `citizen_id` column contains unique values and that there are no missing entries.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
For the field `data_usage` in GB: Check that values are arranged in increasing order and do not exceed 1000 GB.,"expect_column_values_to_be_increasing(column=""data_usage""),expect_column_values_to_be_less_than(column=""data_usage"", value=1000)","expect_column_values_to_be_increasing(column=""data_usage""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=1000)",0.8444444444444444,0.7441860465116279,0.8444444444444444,76.87004838800078
For `age` column: Verify that the mean age of patients falls within 0 to 120 years and that the standard deviation does not exceed 15 years.,"expect_column_mean_to_be_between(column=""age"", min_value=0, max_value=120),expect_column_stdev_to_be_between(column=""age"", min_value=0, max_value=15)","expect_column_mean_to_be_between(column=""age"", min_value=0, max_value=120),expect_column_stdev_to_be_between(column=""age"", max_value=15)",0.9433962264150945,0.9019607843137256,0.9433962264150945,88.3681888167574
Verify that the `energy_usage` column values follow a normal distribution with a mean of 500 and standard deviation of 100.,"expect_column_mean_to_be_between(column=""energy_usage"", min_value=400, max_value=600),expect_column_stdev_to_be_between(column=""energy_usage"", min_value=90, max_value=110)","expect_column_mean_to_be_between(column=""energy_usage"", min_value=500, max_value=None),expect_column_stdev_to_be_between(column=""energy_usage"", min_value=100, max_value=None)",0.8666666666666667,0.7586206896551724,0.8666666666666667,85.1107109630294
For field 'sales_amount': Ensure the expect column chisquare test p value to be greater thanÂ *; Ensure the expect column parameterized distribution ks test p value to be greater thanÂ *; Ensure this field matches the type 'decimal' and contains values greater than 0.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""sales_amount"", threshold=*),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""sales_amount"", threshold=*),expect_column_values_to_be_of_type(column=""sales_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""sales_amount"", min_value=0, max_value=None)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""sales_amount"", threshold=threshold1),expect_column_ks_test_p_value_to_be_greater_than(column=""sales_amount"", threshold=threshold2),expect_column_values_to_be_of_type(column=""sales_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""sales_amount"", min_value=0, max_value=Decimal.infinity)",0.9391304347826087,0.8849557522123894,0.9391304347826087,91.13218440306294
For field `enrollment_date`: Ensure the field matches the type 'datetime'. Validate that `enrollment_date` is in the format 'YYYY-MM-DD' and is not in the future.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""enrollment_date"")  # Assuming that the dataset is sorted by date and no future dates are present.","expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_less_than(column=""enrollment_date"", value=""2023-10-10"")  # Assuming today's date is October 10, 2023, we want to check that enrollment dates before today are valid.",0.7401574803149606,0.5920000000000001,0.6141732283464566,69.43928983803264
Ensure the `billing_amount` column values follow a normal distribution with a p-value greater than 0.05 in the Kolmogorov-Smirnov test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""billing_amount"", threshold=0.05)","expect_column_kolmogorov_smirnov_test_p_value_to_be_greater_than(column=""billing_amount"", threshold=0.05)",0.8571428571428571,0.787878787878788,0.8571428571428571,81.66577179049152
Ensure the `student_id` column only contains alphanumeric strings of length 8.,"expect_column_values_to_match_regex(column=""student_id"", regex=r""^[a-zA-Z0-9]{8}$"")","expect_column_values_to_match_regex(column=""student_id"", regex=r""^[A-Za-z0-9]{8}$"")",1.0,1.0,1.0,92.5751807101176
Ensure the `incident_id` column contains unique values and does not allow null entries to maintain distinct incident records.,"expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")","expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")",1.0,1.0,1.0,100.00000000000004
For field 'forecast_date': Ensure the field matches the type 'date'. Validate that the values in (forecast_date) must be in the future.,"expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_be_increasing(column=""forecast_date"")","expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_be_increasing(column=""forecast_date"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `status` column only contains values from the set `['Draft', 'Published', 'Archived']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Draft', 'Published', 'Archived'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Draft', 'Published', 'Archived'])",1.0,1.0,1.0,100.00000000000004
"For the `response_time` column, confirm that all values are greater than or equal to zero, indicating valid response durations.","expect_column_values_to_be_greater_than(column=""response_time"", value=0)","expect_column_values_to_be_between(column=""response_time"", min_value=0)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
"Confirm that the `event_severity` column in the Cybersecurity dataset contains non-null entries and complies with the types `['Info', 'Warning', 'Critical']`.","expect_column_values_to_not_be_null(column=""event_severity""),expect_column_values_to_be_in_set(column=""event_severity"", value_set=[""Info"", ""Warning"", ""Critical""])","expect_column_values_to_not_be_null(column=""event_severity""),expect_column_values_to_be_of_type(column=""event_severity"", type_=""str""),expect_column_values_to_be_in_set(column=""event_severity"", value_set=['Info', 'Warning', 'Critical'])",0.8064516129032258,0.8,0.8064516129032258,59.450476152594746
For field 'customer_account_id': Ensure the field is required (not null). Ensure all values in 'customer_account_id' are unique and match the pattern 'CA-XXXX'.,"expect_column_values_to_not_be_null(column=""customer_account_id""),expect_column_values_to_be_unique(column=""customer_account_id""),expect_column_values_to_match_regex(column=""customer_account_id"", regex=r""^CA-\d{4}$"")","expect_column_values_to_not_be_null(column=""customer_account_id""),expect_column_values_to_be_unique(column=""customer_account_id""),expect_column_values_to_match_regex(column=""customer_account_id"", regex=r""^CA-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `final_grade` column contains values between 0 and 100 with a mean value greater than 60.,"expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""final_grade"", min_value=60, max_value=100)","expect_column_mean_to_be_between(column=""final_grade"", min_value=0, max_value=100),expect_column_mean_to_be_greater_than(column=""final_grade"", target_mean=60)",0.793103448275862,0.6785714285714286,0.793103448275862,75.12645192890427
Ensure the `student_id` column exists and contains unique identifiers for each student.,"expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id"")","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'status': Ensure the field matches the type 'text'. Ensure values match one of the predefined statuses: ('active', 'inactive', 'suspended').","expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'suspended'])","expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive"", ""suspended""])",1.0,1.0,1.0,81.69176371437223
For the combined columns `match_date` and `stadium`: Ensure that the combination is unique across all match records.,"expect_compound_columns_to_be_unique(column_A=""match_date"", column_B=""stadium"")","expect_compound_columns_to_be_unique(column_A=""match_date"", column_B=""stadium"")",1.0,1.0,1.0,100.00000000000004
"For field `price`: Ensure all values in `price` are numeric, with a minimum value of 50000 and a maximum of 5000000.","expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_min_to_be_between(column=""price"", min_value=50000),expect_column_max_to_be_between(column=""price"", max_value=5000000)","expect_column_values_to_be_of_type(column=""price"", type_=""numeric""),expect_column_values_to_be_between(column=""price"", min_value=50000, max_value=5000000)",0.793103448275862,0.6785714285714286,0.793103448275862,63.53149098792225
For the `featured_image` column: Ensure that all values are valid URLs. Validate that this column exists and does not contain any invalid entries.,"expect_column_to_exist(column=""featured_image""),expect_column_values_to_match_regex(column=""featured_image"", regex=r""^(https?://[^\s]+)$"")","expect_column_to_exist(column=""featured_image"") andexpect_column_values_to_be_valid_url(column=""featured_image"")",0.7027027027027027,0.5714285714285714,0.7027027027027027,43.6167846737765
Ensure the `user_id` column contains only unique identifiers and that no null values are present.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
For column 'timestamp' in table 'log_entries': Ensure values in 'timestamp' are in the format 'YYYY-MM-DD HH:MM:SS'. Ensure this field exists.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `user_email` column follows the standard email format and contains no duplicates.,"expect_column_values_to_match_regex(column=""user_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""user_email"")","expect_column_values_to_match_regex(column=""user_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")  # Regex for valid email  # Note: Regular expression matching assumes that the regex for email address validation is correct, so if you use other patterns, make sure to modify this accordingly.",0.3636363636363637,0.26666666666666666,0.3376623376623376,44.07738604240446
Ensure the `tracking_number` column contains only distinct values matching the regex pattern `^[A-Z]{2}[0-9]{9}[A-Z]{2}$`.,"expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_match_regex(column=""tracking_number"", regex=r""^[A-Z]{2}[0-9]{9}[A-Z]{2}$"")","expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_match_regex(column=""tracking_number"", regex=r""^([A-Z]{2}[0-9]{9}[A-Z]{2})$"")",1.0,1.0,1.0,92.69207588009151
For the `sensor_id` field: Ensure the field is required (not null). Ensure values are unique and match the type 'string'.,"expect_column_values_to_not_be_null(column=""sensor_id""),expect_column_values_to_be_unique(column=""sensor_id""),expect_column_values_to_be_of_type(column=""sensor_id"", type_=""string"")","expect_column_values_to_not_be_null(column=""sensor_id""),expect_column_values_to_be_unique(column=""sensor_id""),expect_column_values_to_be_of_type(column=""sensor_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Ensure the mean of the `transaction_time` column falls within the range of 8 AM to 8 PM.,"expect_column_mean_to_be_between(column=""transaction_time"", min_value=""08:00:00"", max_value=""20:00:00"")","expect_column_mean_to_be_between(column=""transaction_time"", min_value=""8:00:00"", max_value=""19:59:59"")",0.7894736842105263,0.7222222222222222,0.7894736842105263,80.14219764095449
Ensure the `final_grade` field contains numeric values and that all entries fall within the range of `0` to `100`.,"expect_column_values_to_be_of_type(column=""final_grade"", type_=""float""),expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""final_grade"", type_=""float""),expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Validate that the `student_feedback` field contains valid JSON objects, ensuring all required keys are present as per the defined schema.","expect_column_values_to_be_json_parseable(column=""student_feedback""),expect_column_values_to_match_json_schema(column=""student_feedback"", schema={""type"": ""object"", ""properties"": {""required_key_1"": {""type"": ""string""}, ""required_key_2"": {""type"": ""number""}}})","expect_column_values_to_match_json_schema(column=""student_feedback"")",0.45454545454545453,0.42857142857142855,0.45454545454545453,3.0197383422318516
For field `department`: Ensure that values in this column are non-null and match the type 'text'. Ensure the field contains only distinct values.,"expect_column_values_to_not_be_null(column=""department""),expect_column_values_to_be_of_type(column=""department"", type_=""text""),expect_column_values_to_be_unique(column=""department"")","expect_column_values_to_not_be_null(column=""department""),expect_column_values_to_be_of_type(column=""department"", type_=""text""),expect_column_distinct_values_to_be_unique(column=""department"")",0.9824561403508771,0.9454545454545454,0.9824561403508771,95.89664535742807
For the `forecast_date`: Ensure the date follows the 'YYYY-MM-DD' format and is not a past date.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""forecast_date"")  # To check if it's a valid date,# Note: Checking if the date is not in the past would typically require a custom expectation, as it is not covered by the standard expectations in the provided reference.","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_greater_than(column=""forecast_date"", value=""2023-10-15"")  # Assuming this is the date you want to start looking for forecast dates after.",0.5333333333333333,0.42718446601941745,0.4761904761904762,53.858546309227464
For the field `activation_date`: Verify that all entries match the datetime format '%Y-%m-%d' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""activation_date"")","expect_column_to_exist(column=""activation_date""),expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""activation_date"")ávající",0.8474576271186441,0.8421052631578948,0.8474576271186441,75.83261502888317
Verify that the `billing_cycle` column is formatted according to the ISO 8601 standard.,"expect_column_values_to_match_strftime_format(column=""billing_cycle"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_to_exist(column=""billing_cycle""),expect_column_values_to_match_strftime_format(column=""billing_cycle"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""billing_cycle"")",0.56,0.5416666666666666,0.56,42.44240175953433
"For file-based data asset 'inventory_data.json': Confirm that the file exists, ensure it is formatted properly as JSON, and validate that it contains at least 1 and no more than 5000 records.","expect_file_to_exist(file_path=""inventory_data.json""),expect_file_to_be_valid_json(file_path=""inventory_data.json""),expect_file_line_regex_match_count_to_be_between(file_path=""inventory_data.json"", min_value=1, max_value=5000)","expect_file_to_exist(filename=""inventory_data.json""),expect_file_to_be_in_valid_json_format(filename=""inventory_data.json""),expect_file_line_regex_match_count_to_be_between(min_value=1, max_value=5000, filename=""inventory_data.json"")",0.8607594936708861,0.7272727272727273,0.7848101265822786,79.24258300754616
Check that the `content_length` column has values that are greater than or equal to 300 characters.,"expect_column_values_to_be_between(column=""content_length"", min_value=300)","expect_column_values_to_be_between(column=""content_length"", min_value=300)",1.0,1.0,1.0,100.00000000000004
Confirm that the `case_notes` column does not exceed `500` characters in length for brevity and clarity.,"expect_column_value_lengths_to_be_between(column=""case_notes"", min_value=0, max_value=500)","expect_column_value_lengths_to_be_between(column=""case_notes"", min_value=None, max_value=500)",0.9375,0.8666666666666667,0.9375,92.10500207490826
For field `quantity`: Ensure values are within the range of 0 to 1000 and are not null.,"expect_column_values_to_be_between(column=""quantity"", min_value=0, max_value=1000),expect_column_values_to_not_be_null(column=""quantity"")","expect_column_values_to_be_between(column=""quantity"", min_value=0, max_value=1000),expect_column_values_to_not_be_null(column=""quantity"")",1.0,1.0,1.0,100.00000000000004
Ensure the `case_id` column is present and contains unique identifiers matching the format 'CXXXX' where X is a digit.,"expect_column_to_exist(column=""case_id""),expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""^C\d{4}$"")","expect_column_to_exist(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""^C[0-9]{4}$"")",0.7692307692307692,0.7200000000000001,0.7692307692307692,62.72174207709839
Check that the `date_of_birth` column adheres to the format 'YYYY-MM-DD' and contains no null values.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""date_of_birth"")","expect_column_to_exist(column=""date_of_birth""),expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""date_of_birth"")",0.870967741935484,0.8666666666666666,0.870967741935484,76.09515774602313
For field 'created_at': Ensure the field is required (not null). Ensure the field matches the format 'YYYY-MM-DD HH:MM:SS'. Ensure this field exists.,"expect_column_to_exist(column=""created_at""),expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_to_exist(column=""created_at""),expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"For field 'quantity_ordered': Ensure the field exists. Validate that 'quantity_ordered' is a positive integer and the total quantity ordered across all products is less than 10,000.","expect_column_to_exist(column=""quantity_ordered""),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int""),expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=None),expect_column_sum_to_be_between(column=""quantity_ordered"", min_value=None, max_value=10000)","expect_column_to_exist(column=""quantity_ordered""),expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=9999)",0.5915492957746478,0.5797101449275361,0.5915492957746478,26.620376496611357
Ensure that the `claim_amount` column has a mean value greater than $500.,"expect_column_mean_to_be_between(column=""claim_amount"", min_value=500)","expect_column_mean_to_be_between(column=""claim_amount"", min_value=500, max_value=None)",0.888888888888889,0.88,0.888888888888889,77.77249746516185
In the `user_id` field: Ensure values are unique and of type 'integer'. Validate that this field cannot be null.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_not_be_null(column=""user_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
For the `video_duration`: Ensure the field matches the type 'integer'. Validate that all values are greater than or equal to 0 and less than 7200 seconds.,"expect_column_values_to_be_of_type(column=""video_duration"", type_=""int""),expect_column_values_to_be_between(column=""video_duration"", min_value=0, max_value=7200)","expect_column_values_to_be_of_type(column=""video_duration"", type_=""integer""),expect_column_values_to_be_between(column=""video_duration"", min_value=0, max_value=7200)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.81282631934458
"Ensure the `status` column contains values from the set `['Pending', 'In Transit', 'Delivered']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'In Transit', 'Delivered'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'In Transit', 'Delivered'])",1.0,1.0,1.0,100.00000000000004
"For the `ballot_status` column, validate that it contains only the values `['Received', 'Counted', 'Rejected']` and that none are null.","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['Received', 'Counted', 'Rejected']),expect_column_values_to_not_be_null(column=""ballot_status"")","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['Received', 'Counted', 'Rejected']),expect_column_values_to_not_be_null(column=""ballot_status"")",1.0,1.0,1.0,100.00000000000004
For field `zipcode`: Ensure the field matches the type 'text'. Ensure values in `zipcode` must exist in the defined list of valid zip codes.,"expect_column_values_to_be_of_type(column=""zipcode"", type_=""text""),expect_column_values_to_be_in_set(column=""zipcode"", value_set=valid_zip_codes)","expect_column_values_to_be_of_type(column=""zipcode"", type_=""text""),expect_column_values_to_be_in_set(column=""zipcode"", value_set=[valid_zip_codes])",1.0,1.0,1.0,92.64727591170475
Check that the `supplier_id` field is required (not null) and exists in the `supplier_list` table.,"expect_column_to_exist(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")","expect_column_to_exist(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=supplier_list_table_row_values)",0.6666666666666666,0.653061224489796,0.6666666666666666,50.31885476964537
For the field `product_sku`: Ensure this field is required (not null). Ensure it contains unique values for each product.,"expect_column_values_to_not_be_null(column=""product_sku""),expect_column_values_to_be_unique(column=""product_sku"")","expect_column_values_to_not_be_null(column=""product_sku""),expect_column_values_to_be_unique(column=""product_sku"")",1.0,1.0,1.0,100.00000000000004
"Check that the `total_fees` column values are within the range of $0 to $100,000 and do not exceed the `budget` column values.","expect_column_values_to_be_between(column=""total_fees"", min_value=0, max_value=100000),expect_column_pair_values_A_to_be_less_than_B(column_A=""total_fees"", column_B=""budget"")","expect_column_values_to_be_between(column=""total_fees"", min_value=0, max_value=100000),expect_column_pair_values_to_be_between(column_A=""budget"", column_B=""total_fees"", min_value=None, max_value=None)",0.8358208955223881,0.6769230769230768,0.7462686567164178,78.19463410390624
"Check that the `department` column contains only values from the set ['Sales', 'Marketing', 'Engineering'].","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Marketing', 'Engineering'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Marketing', 'Engineering'])",1.0,1.0,1.0,100.00000000000004
Ensure the `supplier_name` column contains only distinct values and is non-empty.,"expect_column_values_to_be_unique(column=""supplier_name""),expect_column_values_to_not_be_null(column=""supplier_name"")","expect_column_values_to_be_unique(column=""supplier_name""),expect_column_values_to_not_be_null(column=""supplier_name"")",1.0,1.0,1.0,100.00000000000004
Check that the `recipient_email` column contains valid email addresses that do not match any entries in the `blacklist` table.,"expect_column_values_to_match_regex(column=""recipient_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_in_set(column=""recipient_email"", value_set=blacklist)","expect_column_values_to_not_match_regex(column=""recipient_email"", regex=r""^.*@(.*\.blacklisted\.email)$""), expect_table_row_counts_to_be_between(table=""blacklist"", min_value=0, max_value=None)",0.6666666666666666,0.36363636363636365,0.5263157894736843,45.36376601801802
Check that `rating` values in the `content_ratings` column have a mean greater than or equal to `3`.,"expect_column_mean_to_be_between(column=""content_ratings"", min_value=3)","expect_column_mean_to_be_between(column=""rating"", min_value=3)",0.9565217391304348,0.8571428571428572,0.9565217391304348,81.36749447931932
For the `route` field: Ensure it adheres to a valid JSON schema defining properties such as 'origin' and 'destination'. Validate that both properties exist.,"expect_column_values_to_match_json_schema(column=""route"", schema={""type"": ""object"", ""properties"": {""origin"": {""type"": ""string""}, ""destination"": {""type"": ""string""}}, ""required"": [""origin"", ""destination""]})","expect_column_to_exist(column=""route""),expect_column_values_to_match_json_schema(column=""route"", json_schema={""type"": ""object"", ""properties"": {""origin"": {}, ""destination"": {}}})  # Replace {} with actual values as required.",0.64,0.5416666666666666,0.64,58.0625418315108
Check that the `timestamp` column contains valid timestamps and is not nullable.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_not_be_null(column=""timestamp"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")",1.0,1.0,0.8333333333333334,100.00000000000004
Ensure the `malware_type` field matches the regex pattern `^[a-zA-Z0-9_]+$` and has a maximum length of 50 characters.,"expect_column_values_to_match_regex(column=""malware_type"", regex=r""^[a-zA-Z0-9_]+$""),expect_column_value_lengths_to_be_between(column=""malware_type"", min_value=1, max_value=50)","expect_column_values_to_match_regex(column=""malware_type"", regex=r""^[a-zA-Z0-9_]+$""),expect_column_value_lengths_to_be_between(column=""malware_type"", min_value=0, max_value=50)",0.967741935483871,0.9333333333333333,0.967741935483871,96.30786123683066
For the `claim_amount` in the `claims` table: Ensure it is less than or equal to the `policy_limit` in the corresponding `policies` table.,"expect_column_pair_values_A_to_be_less_than_or_equal_to_B(column_A=""claim_amount"", column_B=""policy_limit"")","expect_column_pair_values_to_be_less_than(column_a=""claims_claim_amount"", column_b=""policy_limit"")",0.8421052631578947,0.7222222222222223,0.8421052631578947,56.53888143385035
Ensure the `transaction_amount` column contains values greater than or equal to 0 and has a standard deviation under 50.,"expect_column_values_to_be_between(column=""transaction_amount"", min_value=0),expect_column_stdev_to_be_between(column=""transaction_amount"", max_value=50)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0),expect_column_stdev_to_be_between(column=""transaction_amount"", max_value=50)",1.0,1.0,1.0,100.00000000000004
"Ensure the `square_footage` column has a maximum value of 10,000 and a minimum value of 500.","expect_column_max_to_be_between(column=""square_footage"", min_value=500, max_value=10000)","expect_column_values_to_be_between(column=""square_footage"", min_value=500, max_value=10000)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
Check that the JSON file is properly formatted and contains no syntax errors.,expect_file_to_be_valid_json(),"expect_file_to_be_valid_json_file(),expect_file_to_be_free_of_error_including_unnecessary_whitespaces()  # If your file contains unnecessary whitespace, you need to remove those lines  # for example, using the following code:expect_file_to_be_free_of_error_including_unnecessary_newlines()  # if you have extra newline characters, you need to remove those as well.",0.1875,0.16129032258064516,0.1875,10.548568487707739
For the `supplier_id` field: Check that it is of type 'integer' and that all values are unique and non-null.,"expect_column_values_to_be_of_type(column=""supplier_id"", type_=""int""),expect_column_values_to_not_be_null(column=""supplier_id""),expect_column_values_to_be_unique(column=""supplier_id"")","expect_column_values_to_be_of_type(column=""supplier_id"", type_=""int""),expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_not_be_null(column=""supplier_id"")",1.0,1.0,0.9032258064516129,100.00000000000004
"For field 'service_request_id': Ensure the field matches the type 'string'. Ensure values in (service_request_id) do not match any SQL-like pattern from the list ('%;', '--', '/*'). Ensure this field exists.","expect_column_to_exist(column=""service_request_id""),expect_column_values_to_be_of_type(column=""service_request_id"", type_=""string""),expect_column_values_to_not_match_regex_list(column=""service_request_id"", regex_list=[r""%;"", r""--"", r""/\*""])","expect_column_to_exist(column=""service_request_id""),expect_column_values_to_be_of_type(column=""service_request_id"", type_=""string""),expect_column_values_to_not_match_regex_list(column=""service_request_id"", regex_list=[""%;"", ""--"", ""/*""])",0.958904109589041,0.9577464788732395,0.958904109589041,90.03400498414774
"Ensure the `subject` column includes only values from the list `['Mathematics', 'Science', 'History', 'Literature']`.","expect_column_values_to_be_in_set(column=""subject"", value_set=['Mathematics', 'Science', 'History', 'Literature'])","expect_column_values_to_be_in_set(column=""subject"", value_set=['Mathematics', 'Science', 'History', 'Literature'])",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_id` column contains unique identifiers and does not allow null values.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
"For the `ballot_status` field, ensure values match one of the following: ['cast', 'pending', 'invalid']. Validate that all entries are non-null.","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['cast', 'pending', 'invalid']),expect_column_values_to_not_be_null(column=""ballot_status"")","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['cast', 'pending', 'invalid']),expect_column_values_to_not_be_null(column=""ballot_status"")",1.0,1.0,1.0,100.00000000000004
Ensure the `phone_number` column matches the format '(XXX) XXX-XXXX' and contains no duplicate entries.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_be_unique(column=""phone_number"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""(\(\d{3}\) \d{3}-\d{4})|^\d{3}-\d{4}$""),expect_column_values_to_be_unique(column=""phone_number"")",0.9285714285714286,0.9259259259259259,0.9285714285714286,80.30769327166558
"Check that the `policy_holder_age` column has a mean value between 30 and 60 years, ensuring adherence to expected demographic distributions.","expect_column_mean_to_be_between(column=""policy_holder_age"", min_value=30, max_value=60)","expect_column_mean_to_be_between(column=""policy_holder_age"", min_value=30, max_value=60)",1.0,1.0,1.0,100.00000000000004
For the `shipment_date` field: Validate that all datetime strings can be parsed using dateutil. Ensure that `delivery_date` is always greater than `shipment_date`.,"expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""shipment_date"")","expect_column_to_exist(column=""shipment_date""),expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""shipment_date"")",0.888888888888889,0.8852459016393442,0.888888888888889,78.33894698330973
Ensure the `publication_year` column values are in the range of `2000` to the current year and arranged in decreasing order.,"expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023),expect_column_values_to_be_decreasing(column=""publication_year"")","expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=""current year"")  # Assuming ""current year"" is calculated correctly.  #expect_column_values_to_be_decreasing(column=""publication_year"")",0.8363636363636364,0.7924528301886793,0.8363636363636364,73.157865628885
Verify that the `enrollment_date` is always before the `completion_date` for each course entry.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""enrollment_date"", column_B=""completion_date"")","expect_column_pair_values_to_be_increasing(column_A=""enrollment_date"", column_B=""completion_date"")",0.8484848484848485,0.7096774193548386,0.8484848484848485,75.07184397266934
Ensure the `product_code` column contains only alphanumeric characters with a length of exactly 10.,"expect_column_values_to_match_regex(column=""product_code"", regex=r""^[a-zA-Z0-9]{10}$"")","expect_column_values_to_match_regex(column=""product_code"", regex=r""^[a-zA-Z0-9]{10}$""),expect_column_lengths_to_equal(column=""product_code"", length=10)ЎыџNЎыџN",0.7272727272727273,0.7142857142857143,0.7272727272727273,58.95414193622279
"For field 'watch_time': Ensure the field exists. Validate that all values are numeric and represent time in minutes, ensuring they are greater than zero.","expect_column_to_exist(column=""watch_time""),expect_column_values_to_be_of_type(column=""watch_time"", type_=""float""),expect_column_values_to_be_between(column=""watch_time"", min_value=0.01, max_value=None)","expect_column_to_exist(column=""watch_time""),expect_column_values_to_be_of_type(column=""watch_time"", type_=""float""),expect_column_values_to_be_between(column=""watch_time"", min_value=0)",0.9393939393939393,0.9375,0.9393939393939393,89.84600309660402
Ensure the `policy_number` column contains values that match the regex pattern `^[A-Z]{3}-[0-9]{4}$`.,"expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[A-Z]{3}-[0-9]{4}$"")","expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[A-Z]{3}-[0-9]{4}$"")",1.0,1.0,1.0,100.00000000000004
"For field 'views': Ensure the sum of views is greater than 0. Check that the average views per video is within the range of 100 to 1,000,000.","expect_column_sum_to_be_between(column=""views"", min_value=0.01, max_value=None),expect_column_mean_to_be_between(column=""views"", min_value=100, max_value=1000000)","expect_column_sum_to_be_between(column=""views"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""views"", min_value=100, max_value=1000000)",0.9824561403508771,0.9454545454545454,0.9824561403508771,95.7414465780703
"Validate that the `threat_level` column contains only the values 'low', 'medium', or 'high'. Ensure the `threat_description` column contains no entries exceeding 200 characters.","expect_column_values_to_be_in_set(column=""threat_level"", value_set=[""low"", ""medium"", ""high""]),expect_column_value_lengths_to_be_between(column=""threat_description"", min_value=0, max_value=200)","expect_column_values_to_be_in_set(column=""threat_level"", value_set=[""low"", ""medium"", ""high""]),expect_column_value_lengths_to_be_between(column=""threat_description"", min_value=0, max_value=200)",1.0,1.0,1.0,100.00000000000004
Ensure the `policy_number` column exists and contains unique alphanumeric values of length 10.,"expect_column_to_exist(column=""policy_number""),expect_column_values_to_be_unique(column=""policy_number""),expect_column_value_lengths_to_equal(column=""policy_number"", length=10),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[a-zA-Z0-9]{10}$"")","expect_column_to_exist(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^[0-9a-fA-F]{10}$"")",0.5757575757575758,0.5312499999999999,0.5757575757575758,38.46943418203025
"Ensure the `call_duration` column values have a mean between 60 and 180 seconds, with a maximum value not exceeding 600 seconds.","expect_column_mean_to_be_between(column=""call_duration"", min_value=60, max_value=180),expect_column_max_to_be_between(column=""call_duration"", max_value=600)","expect_column_mean_to_be_between(column=""call_duration"", min_value=60, max_value=180),expect_column_max_to_be_between(column=""call_duration"", max_value=600)",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` column contains only unique values. Ensure this field exists and is of type 'integer'.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""integer""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""integer"")",1.0,0.9629629629629629,0.8214285714285714,99.60706509325644
Ensure the `release_date` column contains datetime strings that match the format `%Y-%m-%d`.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `stock_quantity` column contains only non-negative integers and does not have missing values.,"expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)","expect_column_to_exist(column=""stock_quantity""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0),expect_column_values_to_not_be_null(column=""stock_quantity"")",0.888888888888889,0.7868852459016394,0.6984126984126984,76.20467381371003
For fields 'location_id' and 'forecast_date': Ensure the combination of these fields is unique within each record.,"expect_compound_columns_to_be_unique(columns=[""location_id"", ""forecast_date""])","expect_compound_columns_to_be_unique(column_A=""location_id"", column_B=""forecast_date"")",0.88,0.6956521739130435,0.88,60.93671089617578
For field 'battery_level': Ensure the values are integers between 0 and 100. Validate that the average battery level does not exceed 80%.,"expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""battery_level"", min_value=0, max_value=80)","expect_column_values_to_be_of_type(column=""battery_level"", type_=""int""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""battery_level"", min_value=0, max_value=80)",0.8333333333333333,0.8285714285714285,0.8333333333333333,67.90876520486178
For the field 'score': Ensure values are numeric and greater than or equal to zero. Validate that 'score' is less than or equal to the maximum score defined in 'max_score' for each match.,"expect_column_values_to_be_of_type(column=""score"", type_=""numeric""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=None),expect_column_pair_values_A_to_be_less_than_B(column_A=""score"", column_B=""max_score"")","expect_column_values_to_be_of_type(column=""score"", type_=""float""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=None)  # This line ensures that all values in the column are between 0 and no maximum value  # Alternatively, you can check the maximum value of each match with a single match if necessary.  # For example, max_score = 10, so if you're only checking for one match, it would be max_value=10,  # if it's more than one match, then it would be a single value like max_value=10.  # The exact syntax would depend on the database implementation.",0.4383561643835617,0.3194444444444445,0.4246575342465754,37.50916086546893
"Ensure the `precipitation` column adheres to JSON format, confirming it contains valid JSON objects.","expect_column_values_to_be_json_parseable(column=""precipitation"")","expect_column_values_to_match_json_schema(column=""precipitation"")",0.7777777777777778,0.5,0.7777777777777778,70.76534431960266
"Confirm that the `outcome` column contains only distinct values from the set `['Pending', 'Closed', 'Appealed']`.","expect_column_values_to_be_in_set(column=""outcome"", value_set=['Pending', 'Closed', 'Appealed'])","expect_column_values_to_be_in_set(column=""outcome"", value_set=['Pending', 'Closed', 'Appealed'])",1.0,1.0,1.0,100.00000000000004
"For table 'blocks': Ensure the columns match the specified order ('block_id', 'miner', 'timestamp'). Ensure the number of rows is greater than or equal to 1.","expect_table_columns_to_match_ordered_list(ordered_list=[""block_id"", ""miner"", ""timestamp""]),expect_table_row_count_to_be_between(min_value=1, max_value=None)","expect_table_columns_to_match_ordered_list(table=""blocks"", column_list=[""block_id"", ""miner"", ""timestamp""]),expect_table_row_count_to_be_between(table=""blocks"", min_value=1, max_value=None)",0.8928571428571429,0.8148148148148148,0.8928571428571429,77.48980609970953
"Validate that the average `test_scores` column falls within the range of 60 to 100, with at least 75% of scores being above 70.","expect_column_mean_to_be_between(column=""test_scores"", min_value=60, max_value=100),expect_column_proportion_of_unique_values_to_be_between(column=""test_scores"", min_value=0.75, max_value=1.0)","expect_column_mean_to_be_between(column=""test_scores"", min_value=60, max_value=100),expect_column_proportion_of_values_to_be_between(column=""test_scores"", min_value=0.75, max_value=1)",0.9705882352941176,0.9393939393939394,0.9705882352941176,93.50260200574287
For the `prescription_amount` field: Ensure values are within the range of 0 to 100 and match the type 'decimal'.,"expect_column_values_to_be_between(column=""prescription_amount"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""prescription_amount"", type_=""decimal"")","expect_column_values_to_be_between(column=""prescription_amount"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""prescription_amount"", type_=""decimal"")",1.0,1.0,1.0,100.00000000000004
In the `email` field: Validate that all email addresses match the regex pattern for valid emails and do not exceed 255 characters.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=0, max_value=255)","expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=255),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9655172413793104,0.8928571428571429,0.4827586206896552,95.99877294062661
For field 'hearing_date': Ensure the field is required (not null). Validate that 'hearing_date' is later than 'filing_date'.,"expect_column_values_to_not_be_null(column=""hearing_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""hearing_date"", column_B=""filing_date"")","expect_column_values_to_not_be_null(column=""hearing_date""),expect_column_pair_values_to_be_greater_than(column_A=""hearing_date"", column_B=""filing_date"")",0.962962962962963,0.8846153846153846,0.962962962962963,89.66919793739564
Ensure that the `phone_number` column across all datasets matches the pattern `^\(\d{3}\) \d{3}-\d{4}$` and contains valid area codes.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_be_in_set(column=""phone_number"", value_set=[f""({area_code})"" for area_code in valid_area_codes])","expect_column_to_exist(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_be_in_set(column=""phone_number"", value_set=[(123) 123-4567, (321) 123-4567, (555) 123-4567])  # replace with actual valid area codes#ЎыџN",0.7032967032967034,0.6741573033707866,0.7032967032967034,63.47044530299512
Check that the `supplier_id` field contains only values from the predefined set of active suppliers.,"expect_column_values_to_be_in_set(column=""supplier_id"", value_set=active_suppliers_set)","expect_column_values_to_be_in_set(column=""supplier_id"", value_set=active_suppliers)",0.9655172413793104,0.962962962962963,0.9655172413793104,91.03132666386281
Verify that the `shipping_date` column contains dates that are after the `order_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""shipping_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""shipping_date"", column_B=""order_date"")",1.0,1.0,1.0,100.00000000000004
For columns 'product_id' and 'warehouse_location': Validate that the combination of these fields is unique within the inventory table.,"expect_compound_columns_to_be_unique(column_a=""product_id"", column_b=""warehouse_location"")","expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_location"")",1.0,1.0,1.0,82.93181259810136
In the `post_tags` column: Ensure the field contains only distinct values from the specified set of allowed tags. Validate that no entry is null.,"expect_column_values_to_be_in_set(column=""post_tags"", value_set=[""allowed_tag1"", ""allowed_tag2"", ""allowed_tag3""]),expect_column_values_to_not_be_null(column=""post_tags"")","expect_column_values_to_be_in_set(column=""post_tags"", value_set=[""tag1"", ""tag2"", ""tag3"",...])  # Specify allowed tags  # This will raise an error if a non-distinct tag or a null value is encountered, but the actual implementation depends on the use case, so please consult with the domain experts before implementing this.",0.46913580246913583,0.27848101265822783,0.3950617283950617,39.55330207625717
"For the `email` field: Ensure all values match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.[\w]{2,}$"")",0.6111111111111112,0.5294117647058824,0.6111111111111112,70.97214425667501
For field 'payment_method': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""payment_method""),expect_column_values_to_not_be_null(column=""payment_method""),expect_column_values_to_be_of_type(column=""payment_method"", type_=""text"")","expect_column_to_exist(column=""payment_method""),expect_column_values_to_not_be_null(column=""payment_method""),expect_column_values_to_be_of_type(column=""payment_method"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For table 'logs': Ensure the columns 'log_id', 'event_time', 'user_id', and 'event_type' exist and are in the specified order. The row count should be between 1 and 10000.","expect_table_columns_to_match_ordered_list(column_list=[""log_id"", ""event_time"", ""user_id"", ""event_type""]),expect_table_row_count_to_be_between(min_value=1, max_value=10000)","expect_table_columns_to_match_order(table=""logs"", column_order=[""log_id"", ""event_time"", ""user_id"", ""event_type""]),expect_table_row_count_to_be_between(table=""logs"", min_value=1, max_value=10000)",0.888888888888889,0.7868852459016394,0.888888888888889,75.89971040520385
Ensure that the `account_creation_date` column contains datetime values formatted as `'%d-%m-%Y'` and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""account_creation_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""account_creation_date"")","expect_column_values_to_match_strftime_format(column=""account_creation_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""account_creation_date"")",1.0,1.0,1.0,100.00000000000004
"For the `date_of_birth` field, ensure that all dates are in the past and that the age calculated is above 18.","expect_column_values_to_be_decreasing(column=""date_of_birth""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")","expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_decreasing(column=""date_of_birth""),expect_column_mean_to_be_between(column=""age"", min_value=18)",0.7924528301886793,0.7843137254901961,0.6792452830188678,64.52763171736474
For field `cost`: Ensure the field matches the type 'decimal'. Validate that the `cost` values have a minimum of 0 and that the average `cost` does not exceed $100.,"expect_column_values_to_be_of_type(column=""cost"", type_=""decimal""),expect_column_min_to_be_between(column=""cost"", min_value=0),expect_column_mean_to_be_between(column=""cost"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""cost"", type_=""decimal""),expect_column_values_to_be_between(column=""cost"", min_value=0.01, max_value=None),expect_column_mean_to_be_between(column=""cost"", min_value=0, max_value=100)",0.9210526315789473,0.8648648648648648,0.9210526315789473,87.35157695313222
"For field 'department': Ensure this field exists. Validate that values match the predefined list of departments: ['HR', 'Finance', 'IT', 'Sales'].","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Sales'])","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Sales'])",1.0,1.0,1.0,100.00000000000004
For field 'enrollment_date': Ensure the field matches the type 'date'. Validate that all values in (enrollment_date) are within the range of '2021-01-01' to '2023-12-31'. Ensure this field exists.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
For field 'course_duration_weeks': Ensure the field matches the type 'integer'. Validate that all values in (course_duration_weeks) are greater than or equal to 1 and less than or equal to 52. Ensure this field exists.,"expect_column_to_exist(column=""course_duration_weeks""),expect_column_values_to_be_of_type(column=""course_duration_weeks"", type_=""int""),expect_column_values_to_be_between(column=""course_duration_weeks"", min_value=1, max_value=52)","expect_column_to_exist(column=""course_duration_weeks""),expect_column_values_to_be_of_type(column=""course_duration_weeks"", type_=""int""),expect_column_values_to_be_between(column=""course_duration_weeks"", min_value=1, max_value=52),  # If there were more than 52 weeks, that would indicate a typo or a problem, but since it's a business requirement to validate against 52 weeks, this check may be useful for future maintenance.илася",0.6788990825688073,0.6728971962616822,0.6788990825688073,67.06496471877931
"For the `delivery_date` field, verify that all dates are in the format 'YYYY-MM-DD' and are not in the past.","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_greater_than(column=""delivery_date"", value=""2023-10-10"")  # Replace with the current date as needed","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""2019-10-10"", max_value=""9999-12-31"")",0.7012987012987012,0.5866666666666667,0.6753246753246753,60.45516437451322
For field 'meter_id': Ensure the field is required (not null). Ensure the values in 'meter_id' are unique. Ensure this field matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""meter_id""),expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""meter_id""),expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"For field 'firmware_version_data': Ensure that all entries are valid JSON objects and conform to the expected schema, validating against versioning standards.","expect_column_values_to_be_json_parseable(column=""firmware_version_data""),expect_column_values_to_match_json_schema(column=""firmware_version_data"", schema={""type"": ""object"", ""properties"": {""version"": {""type"": ""string""}}})  # Example schema, adjust as necessary for versioning standards","expect_column_values_to_be_json_parseable(column=""firmware_version_data""),expect_column_values_to_match_json_schema(column=""firmware_version_data"", schema={""type"": ""object"",... })  # Replace the... with the actual versioning schema.",0.7826086956521738,0.7164179104477612,0.7826086956521738,66.73913239090271
Check `release_date`: Ensure the field exists. Validate that the date is not null and is in the format `YYYY-MM-DD`.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_not_be_null(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `budget_item` column contains values that are unique within the `budget` table.,"expect_column_values_to_be_unique(column=""budget_item"")","expect_column_values_to_be_unique(column=""budget_item"")",1.0,1.0,1.0,100.00000000000004
Ensure that `total_credits` are positive integers and their sum across all courses does not exceed 180.,"expect_column_values_to_be_between(column=""total_credits"", min_value=1, max_value=None),expect_column_sum_to_be_between(column=""total_credits"", min_value=None, max_value=180)","expect_column_values_to_be_between(column=""total_credits"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""total_credits"", min_value=None, max_value=180)",0.9666666666666667,0.9310344827586207,0.9666666666666667,96.0132862288073
"For fields `start_time` and `end_time`, ensure that `end_time` is always greater than `start_time` for each record.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_time"", column_B=""start_time"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_time"", column_B=""start_time"")",1.0,1.0,1.0,100.00000000000004
Verify that the `email` field contains valid email formats and does not include any duplicates.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")",0.7058823529411764,0.6530612244897959,0.7058823529411764,70.48262191085614
"Ensure the `region` column values are limited to the set: `['North', 'South', 'East', 'West']`.","expect_column_values_to_be_in_set(column=""region"", value_set=['North', 'South', 'East', 'West'])","expect_column_values_to_be_in_set(column=""region"", value_set=['North', 'South', 'East', 'West'])",1.0,1.0,1.0,100.00000000000004
For field `transaction_amount`: Ensure values are greater than 0 and less than 10000.,"expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_greater_than(column=""transaction_amount"", threshold=0),expect_column_values_to_be_less_than(column=""transaction_amount"", threshold=10000)",0.5641025641025641,0.3243243243243243,0.5641025641025641,35.55571572565651
For the combined fields `start_location` and `end_location`: Ensure that each combination is unique across records and that both fields cannot be null.,"expect_compound_columns_to_be_unique(column_A=""start_location"", column_B=""end_location""),expect_column_values_to_not_be_null(column=""start_location""),expect_column_values_to_not_be_null(column=""end_location"")","expect_compound_columns_to_be_unique(column_list=[""start_location"", ""end_location""]),expect_compound_columns_to_not_be_null(column_list=[""start_location"", ""end_location""])",0.7457627118644068,0.5263157894736842,0.7457627118644068,50.010077323106024
For the `shipment_date` field: Confirm that all entries are valid dates in the format 'YYYY-MM-DD' and occur before the `delivery_date`.,"expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_less_than_B(column_A=""shipment_date"", column_B=""delivery_date"")","expect_column_to_exist(column=""shipment_date""),expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_to_be_between(column_A=""shipment_date"", column_B=""delivery_date"", min_value=None, max_value=None)",0.7631578947368421,0.7027027027027026,0.7631578947368421,67.56989088905986
For field 'fraud_score': Ensure the average fraud score is less than 50 across all records. Verify that the field is not null.,"expect_column_mean_to_be_between(column=""fraud_score"", min_value=None, max_value=50),expect_column_values_to_not_be_null(column=""fraud_score"")","expect_column_mean_to_be_between(column=""fraud_score"", min_value=0, max_value=50),expect_column_values_to_not_be_null(column=""fraud_score"")",0.96,0.9166666666666666,0.96,95.25618205602056
Validate that the `product_id` column contains unique identifiers that follow the pattern `^[A-Z]{3}-[0-9]{4}$`.,"expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Z]{3}-[0-9]{4}$""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Z]{3}-[0-9]{4}$"")",1.0,0.96,0.6538461538461539,99.58762008206295
Verify that the `supplier_id` column matches the type 'integer' and exists in the `suppliers` table.,"expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_of_type(column=""supplier_id"", type_=""integer"")","expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_of_type(column=""supplier_id"", type_=""integer"")",1.0,1.0,1.0,100.00000000000004
Check that the `ip_address` field contains valid IP format and that there are no duplicate entries.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_be_unique(column=""ip_address"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?!-)(0x|0)\d+(\.\d{1,3}){3}$""),expect_column_values_to_be_unique(column=""ip_address"")",0.8571428571428572,0.7777777777777779,0.8571428571428572,74.0927273409348
"Ensure that the `category` field only contains values from the set `['Electronics', 'Clothing', 'Home']`. No missing values should be present.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_not_be_null(column=""category""),expect_column_values_to_be_unique(column=""category"")",0.8518518518518519,0.846153846153846,0.8518518518518519,73.04161285764368
Verify that the `temperature` column contains numeric values and that the average temperature for each `location` is greater than 0°C.,"expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_mean_to_be_between(column=""temperature"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_mean_to_be_between(column=""temperature"", min_value=0)",0.9361702127659575,0.9333333333333333,0.9361702127659575,87.76207108868465
Ensure the 'score' column contains numeric values only and does not contain any missing values.,"expect_column_values_to_be_of_type(column=""score"", type_=""float""),  # Assuming the score is a float type; adjust if necessary,expect_column_values_to_not_be_null(column=""score"")","expect_column_values_to_be_of_type(column=""score"", type_=""float""),expect_column_values_to_not_be_null(column=""score"")",0.8,0.75,0.8,74.99913142399687
"For the `service_request_date`, ensure all entries are in the format `MM/DD/YYYY` and are not older than one year.","expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""service_request_date"")  # This will check for valid date formats,# Note: There is no direct expectation for checking if dates are not older than one year; this would typically require a custom check or a separate validation step.","expect_column_to_exist(column=""service_request_date""),expect_column_values_to_be_of_type(column=""service_request_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""11/1/2022"", max_value=""12/31/2023"")  # Assuming current year is 2023, and old entries are one year old (from 2023-11-1)",0.47407407407407404,0.3609022556390977,0.42962962962962964,38.43463726613743
For field 'block_id': Ensure values in (block_id) must exist in the blocks table. Ensure this field exists.,"expect_column_to_exist(column=""block_id""),expect_column_values_to_be_in_set(column=""block_id"", value_set=blocks_table_values)","expect_column_to_exist(column=""block_id""),expect_column_values_to_be_in_set(column=""block_id"", value_set=blocks)  # Replace value_set with the set of block_id values.",0.8076923076923077,0.7599999999999999,0.8076923076923077,75.52660933082196
"Verify that `gender` column values are either 'Male', 'Female', or 'Other', and do not include any other entries.","expect_column_values_to_be_in_set(column=""gender"", value_set=[""Male"", ""Female"", ""Other""])","expect_column_values_to_be_in_set(column=""gender"", value_set=['Male', 'Female', 'Other'])",1.0,1.0,1.0,66.93976514189524
For the `humidity` column: Verify that the mean value is between 20% and 100%.,"expect_column_mean_to_be_between(column=""humidity"", min_value=20, max_value=100)","expect_column_mean_to_be_between(column=""humidity"", min_value=20, max_value=100)",1.0,1.0,1.0,100.00000000000004
Check that the combination of `order_id` and `product_id` is unique within the `orders` table. Both fields must not contain null values.,"expect_compound_columns_to_be_unique(column_A=""order_id"", column_B=""product_id""),expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_not_be_null(column=""product_id"")","expect_compound_columns_to_be_unique(column_list=[""order_id"", ""product_id""]),expect_column_values_to_not_be_null(column_list=[""order_id"", ""product_id""])",0.7796610169491526,0.631578947368421,0.7796610169491526,55.99782078943131
For the `transaction_date` field: Ensure the field exists. Ensure it matches the type 'date' and does not contain any missing values.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_not_be_null(column=""transaction_date"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_not_be_null(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
For the `game_id` field: Ensure all values are unique and match the type 'integer'. Validate that this field cannot be null.,"expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int""),expect_column_values_to_not_be_null(column=""game_id"")","expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""integer"")",0.967741935483871,0.9333333333333333,0.8064516129032258,96.46458712936789
"For the `employee_id` field, ensure it is unique and contains only numeric values. Ensure this field cannot be null.","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int"")","expect_column_to_exist(column=""employee_id""),expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")",0.898550724637681,0.8955223880597014,0.6956521739130435,80.78752923813731
For field 'follow_up_date': Ensure that all dates are in the future and follow the format 'YYYY-MM-DD'. Confirm no null values.,"expect_column_values_to_be_dateutil_parseable(column=""follow_up_date""),expect_column_values_to_match_strftime_format(column=""follow_up_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""follow_up_date""),expect_column_values_to_be_increasing(column=""follow_up_date"")","expect_column_values_to_be_dateutil_parseable(column=""follow_up_date""),expect_column_values_to_be_in_set(column=""follow_up_date"", value_set=[""2023-10-01"", ""2023-10-15"", ""2023-11-01"", ""2023-11-15"", ""2023-12-01"", ""2023-12-15"", ""2023-01-01"", ""2023-01-15"", ""2023-02-01"", ""2023-02-15"", ""2023-03-01"", ""2023-03-15"", ""2023-04-01"", ""2023-04-15"", ""2023-05-01"", ""2023-05-15"", ""2023-06-01"", ""2023-06-15"", ""2023-07-01"", ""2023-07-15"", ""2023-08-01"", ""2023-08-15"", ""2023-09-01"", ""2023-09-15"", ""2023-10-01"", ""2023-10-15"", ""2023-11-01"", ""2023-11-15"", ""202",0.26751592356687903,0.23225806451612904,0.26751592356687903,16.268125105687577
"Ensure the `phone_number` column matches the pattern `^\+?[0-9]{10,15}$` and does not contain null values.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[0-9]{10,15}$""),expect_column_values_to_not_be_null(column=""phone_number"")","expect_column_values_to_not_be_null(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[0-9]{10,15}$"")",1.0,0.9583333333333334,0.6,99.57355105295127
In the `transaction_id` field: Ensure all entries are unique and match the hash format '^[a-fA-F0-9]{64}$'.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=""^[a-fA-F0-9]{64}$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[a-fA-F0-9]{64}$"")",0.9795918367346939,0.9361702127659574,0.9795918367346939,95.42978616972013
For field 'activation_date': Ensure all values in (activation_date) can be parsed using dateutil. Ensure this field exists.,"expect_column_to_exist(column=""activation_date""),expect_column_values_to_be_dateutil_parseable(column=""activation_date"")","expect_column_to_exist(column=""activation_date"")  # Expect this field to exist.  # Assuming it has the name ""activation_date"", you'd need to replace this with the actual name of your field if needed.  # Additionally, you'd need to adapt the rest of the expectations accordingly if this field isn't named activation_date.",0.30985915492957744,0.2318840579710145,0.30985915492957744,26.196408965307437
For field 'platform': Ensure values in 'platform' must exist in the predefined list of platforms. Ensure this field exists.,"expect_column_to_exist(column=""platform""),expect_column_values_to_be_in_set(column=""platform"", value_set=[""platform1"", ""platform2"", ""platform3"", ...])  # Replace with actual platform names","expect_column_to_exist(column=""platform""),expect_column_values_to_be_in_set(column=""platform"", value_set=predefined_platform_list)ávací",0.782608695652174,0.7272727272727272,0.782608695652174,58.95829496811725
Ensure the `activation_date` column follows the 'YYYY-MM-DD' format and is not set in the future.,"expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""activation_date""),expect_column_values_to_be_between(column=""activation_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_to_exist(column=""activation_date""),expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""activation_date"", min_value=""1900-01-01"", max_value=""current_date"")",0.9024390243902439,0.8500000000000001,0.7560975609756099,88.34705130673377
Ensure the `property_id` column contains unique values and matches the format 'PROP-XXXX' where 'X' is a digit.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP-\d{4}$"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
For the `policy_number` field: Ensure it contains unique values and is of type 'string'. This field must not be null.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_be_of_type(column=""policy_number"", type_=""string""),expect_column_values_to_not_be_null(column=""policy_number"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_be_of_type(column=""policy_number"", type_=""string""),expect_column_values_to_not_be_null(column=""policy_number"")",1.0,1.0,1.0,100.00000000000004
For field 'student_id': Ensure this field exists. Ensure that the values in (student_id) are unique and match the regex pattern for valid student IDs.,"expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^S\d{6}$"")","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^[0-9]{3}$"")",0.9,0.896551724137931,0.9,88.55983673043632
Ensure the `file_path` for the `transactions` data asset exists and matches the expected hash value.,"expect_file_to_exist(file_path=""transactions""),expect_file_hash_to_equal(file_path=""transactions"", expected_hash_value=""expected_hash_value"")","expect_file_to_exist(file_path=""transactions""),expect_file_hash_to_equal(file_path=""transactions"", hash_value=""expected_hash_value"")",0.975609756097561,0.9230769230769231,0.975609756097561,92.58269845870127
"Validate that the `attendance` column contains values greater than `0` and less than or equal to `100,000`.","expect_column_values_to_be_between(column=""attendance"", min_value=1, max_value=100000)","expect_column_values_to_be_between(column=""attendance"", min_value=1, max_value=100000)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column contains values within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",1.0,1.0,1.0,100.00000000000004
For the 'properties' table: Ensure the 'zip_code' column values match the pattern of a valid US zip code (#####) and that the column exists.,"expect_column_to_exist(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$"")","expect_table_column_to_exist(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$"")",0.975609756097561,0.9230769230769231,0.975609756097561,95.02120694720763
Confirm that the sum of `transaction_amount` in the `transactions` table matches the total amount of `block_reward` in the `blocks` table.,"expect_multicolumn_sum_to_equal(column_sum={""transactions"": ""transaction_amount"", ""blocks"": ""block_reward""})","expect_multicolumn_sum_to_be_between(column_list=[""transaction_amount""], min_value=0, max_value=block_reward),expect_multicolumn_sum_to_equal(column_list=[""transaction_amount""], sum_value=block_reward)",0.6046511627906976,0.34146341463414637,0.4651162790697674,24.277136381292056
Ensure the `product_price` and `discount` columns: The final price after discount must not be less than 0.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""product_price"", column_B=""discount"")","expect_column_values_to_be_greater_than(column=""product_price"", value=0),expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=None)",0.558139534883721,0.24390243902439027,0.558139534883721,34.4535342016324
Validate that the `likes` column contains only non-negative integer values and does not have any null entries.,"expect_column_values_to_not_be_null(column=""likes""),expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""likes"")",0.8070175438596492,0.7636363636363637,0.5263157894736842,56.84656821365618
"For field 'payment_method': Ensure the field matches the type 'text'. Validate that all values in (payment_method) must exist in the set ['Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer'].","expect_column_values_to_be_of_type(column=""payment_method"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_method"", value_set=['Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer'])","expect_column_values_to_be_of_type(column=""payment_method"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_method"", value_set=['Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer'])",1.0,1.0,1.0,100.00000000000004
Ensure the total number of rows in the `hotel_bookings` table matches the row count in the `customer_feedback` table.,"expect_table_row_count_to_equal_other_table(table=""customer_feedback"")","expect_table_row_count_to_equal_other_table(table_name=""hotel_bookings"", other_table_name=""customer_feedback"")",0.7857142857142858,0.6923076923076923,0.7857142857142858,57.2328192350989
Check that the `renewable_energy_percentage` column values are between 0 and 100.,"expect_column_values_to_be_between(column=""renewable_energy_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""renewable_energy_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For the `amount` field: Ensure all values are positive numbers and do not contain missing values.,"expect_column_values_to_be_between(column=""amount"", min_value=0),expect_column_values_to_not_be_null(column=""amount"")","expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_be_between(column=""amount"", min_value=0.01),expect_column_values_to_not_be_null(column=""amount"")",0.7692307692307693,0.72,0.7692307692307693,57.264233560927174
Verify that the `user_age` column values are greater than or equal to 13.,"expect_column_values_to_be_greater_than(column=""user_age"", value=13)","expect_column_values_to_be_between(column=""user_age"", min_value=13)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
"Check that the `route_id` and `vehicle_id` combinations in the dataset are unique, ensuring no duplicate records exist.","expect_compound_columns_to_be_unique(column_A=""route_id"", column_B=""vehicle_id"")","expect_compound_columns_to_be_unique(column_A=""route_id"", column_B=""vehicle_id"")",1.0,1.0,1.0,100.00000000000004
For field 'post_title': Ensure the field matches the type 'text'. Validate that the title length is between 5 and 100 characters. Ensure this field exists.,"expect_column_to_exist(column=""post_title""),expect_column_value_lengths_to_be_between(column=""post_title"", min_value=5, max_value=100),expect_column_values_to_be_of_type(column=""post_title"", type_=""text"")","expect_column_to_exist(column=""post_title""),expect_column_values_to_be_of_type(column=""post_title"", type_=""text""),expect_column_value_lengths_to_be_between(column=""post_title"", min_value=5, max_value=100)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
Ensure the `price` column contains values with a mean greater than 10 and less than 500.,"expect_column_mean_to_be_between(column=""price"", min_value=10, max_value=500)","expect_column_mean_to_be_between(column=""price"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
For the `team_name` field: Validate that all entries conform to the pattern `^[A-Za-z ]+$` and have a length between 3 and 50 characters.,"expect_column_values_to_match_regex(column=""team_name"", regex=r""^[A-Za-z ]+$""),expect_column_value_lengths_to_be_between(column=""team_name"", min_value=3, max_value=50)","expect_column_values_to_match_regex(column=""team_name"", regex=r""^[A-Za-z ]+$""),expect_column_value_lengths_to_be_between(column=""team_name"", min_value=3, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure the `message_length` column contains values that fall within the range of 1 to 5000 characters.,"expect_column_value_lengths_to_be_between(column=""message_length"", min_value=1, max_value=5000)","expect_column_value_lengths_to_be_between(column=""message_length"", min_value=1, max_value=5000)",1.0,1.0,1.0,100.00000000000004
Ensure the `match_duration` field has a consistent format of 'MM:SS' and does not exceed 120 minutes.,"expect_column_values_to_match_regex(column=""match_duration"", regex=r""^(?:[01]\d|2[0])(:[0-5]\d)$""),expect_column_values_to_be_between(column=""match_duration"", min_value=""00:00"", max_value=""120:00"")","expect_column_values_to_match_strftime_format(column=""match_duration"", strftime_format=""%MM:%SS""),expect_column_values_to_be_between(column=""match_duration"", min_value=0, max_value=120)",0.71875,0.5806451612903226,0.6875,47.94044761607448
For field 'price': Validate that all prices are non-negative decimals with two decimal places. Ensure this field cannot be null.,"expect_column_values_to_not_be_null(column=""price""),expect_column_values_to_match_regex(column=""price"", regex=r""^\d+(\.\d{2})?$""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None)","expect_column_to_exist(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None),expect_column_values_to_match_regex(column=""price"", regex=r""^\d+\.\d\d$"")  # regex to match two decimal points  # This will not include values like ""100.00"", which might be an integer, but could be valid if there is a tolerance for the amount.",0.6799999999999999,0.5510204081632654,0.42,60.86230702482272
"Ensure the `category` column only contains values from the specified set `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
"Validate that the `sample_size` column has a minimum of 30 and a maximum of 1000, ensuring appropriate statistical power.","expect_column_min_to_be_between(column=""sample_size"", min_value=30),expect_column_max_to_be_between(column=""sample_size"", max_value=1000)","expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=1000)",0.7179487179487181,0.5945945945945946,0.7179487179487181,44.741147524778484
Ensure the `supplier_id` column exists and corresponds to an existing supplier in the `suppliers` table.,"expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table)","expect_table_row_count_to_equal_other_table(table_name=""suppliers"", other_table_name=""suppliers""),expect_column_to_exist(column=""supplier_id""),expect_select_query_to_select_all_records(table_name=""suppliers"")",0.4528301886792453,0.2745098039215686,0.37735849056603776,31.162076572042437
Verify that all uploaded files in the `documents` field exist and match the specified hash value of `abc123xyz`.,"expect_file_to_exist(column=""documents""),expect_file_hash_to_equal(column=""documents"", file_hash=""abc123xyz"")","expect_file_to_exist(file_path=""documents""),expect_file_hash_to_equal(file_path=""documents"", hash_value=""abc123xyz"")",0.823529411764706,0.5,0.7647058823529411,68.60400393421692
Ensure the `field_goal_percentage` column values are within the range of 0 to 100 and sorted in increasing order.,"expect_column_values_to_be_between(column=""field_goal_percentage"", min_value=0, max_value=100),expect_column_values_to_be_increasing(column=""field_goal_percentage"")","expect_column_values_to_be_between(column=""field_goal_percentage"", min_value=0, max_value=100),expect_column_values_to_be_increasing(column=""field_goal_percentage"")",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_id` has a unique count that matches the number of records in the dataset.,"expect_column_unique_value_count_to_be_equal(column=""customer_id"", value=expect_table_row_count_to_equal)","expect_column_unique_value_count_to_be_between(column=""customer_id"", min_value=1, max_value=total_records)",0.6111111111111112,0.47058823529411764,0.6111111111111112,58.40053609791809
"For the `price` column: Validate that the mean price is greater than 10 and less than 500, with a standard deviation not exceeding 100.","expect_column_mean_to_be_between(column=""price"", min_value=10, max_value=500),expect_column_stdev_to_be_between(column=""price"", max_value=100)","expect_column_mean_to_be_between(column=""price"", min_value=10, max_value=500),expect_column_stdev_to_be_between(column=""price"", min_value=None, max_value=100)",0.9433962264150945,0.9019607843137256,0.9433962264150945,88.61192610713569
Check that the maximum `precipitation` values in the `precipitation` column do not exceed 100 mm for any record.,"expect_column_max_to_be_between(column=""precipitation"", min_value=None, max_value=100)","expect_column_max_to_be_between(column=""precipitation"", max_value=100)",0.88,0.7826086956521738,0.88,75.0773801833024
"For the `loan_amount` field: Ensure values are within the range of $1,000 to $1,000,000 and there are no missing values.","expect_column_values_to_be_between(column=""loan_amount"", min_value=1000, max_value=1000000),expect_column_values_to_not_be_null(column=""loan_amount"")","expect_column_values_to_be_between(column=""loan_amount"", min_value=1000, max_value=1000000),expect_column_values_to_not_be_null(column=""loan_amount"")",1.0,1.0,1.0,100.00000000000004
For both `orders` and `deliveries` tables: Ensure that the `order_id` columns match in row counts and contain only unique values.,"expect_table_row_count_to_equal_other_table(table_name=""deliveries"", column=""order_id""),expect_column_values_to_be_unique(column=""orders.order_id""),expect_column_values_to_be_unique(column=""deliveries.order_id"")","expect_table_row_count_to_equal(other_table=""deliveries""),expect_table_rows_to_be_unique(column=""order_id"")",0.6538461538461539,0.48000000000000004,0.6153846153846153,31.423813780854196
"For field 'email_address': Ensure this field exists. Validate that values conform to the standard email format (e.g., user@example.com) based on the regex pattern: ^[\\w-.]+@[\\w-]+\\.[a-z]{2,}$.","expect_column_to_exist(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w-.]+@[\w-]+\.[a-z]{2,}$"")","expect_column_to_exist(column=""email_address"")   // Assuming the column already exists.     // Validate the column values conform to the standard email format.   // Note: This assumes a single column of email addresses, which may be valid or invalid.   // It's recommended to create a separate validation step for each scenario to ensure reliable and accurate processing.   #if invalid   // Cutting Knowledge Date: December 2023
Today Date: 26 July 2024",0.31111111111111117,0.18181818181818182,0.31111111111111117,17.29750507650067
For the `contact_number` column: Ensure all entries are 10-digit numbers and do not contain any letters or special characters.,"expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\d{10}$"")","expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\d{10}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `check_in_date` column adheres to the datetime format 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_of_type(column=""check_in_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d"")",0.7111111111111111,0.6976744186046512,0.7111111111111111,52.57370829559941
Confirm that the `product_category` column adheres to a uniform distribution across predefined categories with a KL divergence less than 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""product_category"", threshold=0.1)","expect_column_ks_test_p_value_to_be_greater_than(column=""product_category"", threshold=0.1)",0.7333333333333334,0.5714285714285715,0.7333333333333334,63.66093834247326
"Validate that the `service_start_date` and `service_end_date` columns are consistent, with `service_end_date` being later than `service_start_date`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""service_end_date"", column_B=""service_start_date"")","expect_column_values_to_be_dateutil_parseable(column=""service_start_date""),expect_column_values_to_be_dateutil_parseable(column=""service_end_date""),expect_column_pair_values_to_be_increasing(column_A=""service_start_date"", column_B=""service_end_date"")",0.5423728813559321,0.45614035087719296,0.4745762711864407,39.033651248667105
Confirm that the `price_change` column is required (not null) and that all values are numeric reflecting percentage changes.,"expect_column_values_to_not_be_null(column=""price_change""),expect_column_values_to_be_of_type(column=""price_change"", type_=""float"")","expect_column_values_to_not_be_null(column=""price_change""),expect_column_values_to_be_of_type(column=""price_change"", type_=""float""),expect_column_values_to_be_between(column=""price_change"", min_value=-100, max_value=100) CLIIIK",0.7333333333333334,0.7241379310344828,0.7333333333333334,59.75389397712173
"Ensure the `geo_coordinates` column adheres to the format of `latitude,longitude` and that latitude values are within `-90` to `90` and longitude values within `-180` to `180`.","expect_column_values_to_match_regex(column=""geo_coordinates"", regex=r""^-?([1-8]?[0-9](\.\d+)?|90(\.0+)?),-?((1[0-7][0-9]|[1-9]?[0-9])(\.\d+)?|180(\.0+)?)$"")","expect_column_values_to_match_regex(column=""geo_coordinates"", regex=r""^(?:(?:[0-9][0-9]*)?[\.,][0-9]+)|([0-9][0-9.]+)""),expect_column_values_to_be_between(column=""geo_coordinates.latitude"", min_value=-90, max_value=90),expect_column_values_to_be_between(column=""geo_coordinates.longitude"", min_value=-180, max_value=180)",0.5301204819277109,0.345679012345679,0.4819277108433735,31.264056674667994
Ensure the `policy_number` column contains only unique entries and that no null values are present.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `order_status` column contains only values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
"For field 'contact_number': Ensure this field exists. Ensure values in 'contact_number' must match the regex pattern '^\\+?[0-9]{10,15}$'.","expect_column_to_exist(column=""contact_number""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+?[0-9]{10,15}$"")","expect_column_to_exist(column=""contact_number""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+?[0-9]{10,15}$"")",1.0,1.0,1.0,100.00000000000004
For field `block_number`: Verify that all values are within the range of 0 to 9999999 and are arranged in increasing order.,"expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=9999999),expect_column_values_to_be_increasing(column=""block_number"")","expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=9999999),expect_column_values_to_be_increasing(column=""block_number"")",1.0,1.0,1.0,100.00000000000004
Ensure the `employee_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `platform` column contains only distinct values matching `['PC', 'Console', 'Mobile']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Console"", ""Mobile""])","expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Console"", ""Mobile""])",1.0,1.0,1.0,100.00000000000004
Ensure the `post_slug` column contains unique slugs that match the regex pattern for URL-friendly strings.,"expect_column_values_to_be_unique(column=""post_slug""),expect_column_values_to_match_regex(column=""post_slug"", regex=r""^[a-z0-9]+(?:-[a-z0-9]+)*$"")","expect_column_values_to_be_unique(column=""post_slug""),expect_column_values_to_match_regex(column=""post_slug"", regex=r""^(?![\.\-\d\w]{0,255}$)([a-zA-Z\-_0-9]{1,255}[\-\.\d\w]*)$"")",0.7457627118644068,0.6666666666666666,0.7457627118644068,54.76664005839402
Ensure the `device_id` column contains only unique identifiers matching the expected format `DEVICE-[0-9]{4}`.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_match_regex(column=""device_id"", regex=r""^DEVICE-[0-9]{4}$"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_match_regex(column=""device_id"", regex=r""^DEVICE-[0-9]{4}$"")",1.0,1.0,1.0,100.00000000000004
For field 'profile_picture': Validate that (profile_picture) is a valid URL format. Ensure this field can be null if not provided.,"expect_column_values_to_match_regex(column=""profile_picture"", regex=r""^(https?://).+\.(jpg|jpeg|png|gif)$""),expect_column_values_to_be_null(column=""profile_picture"")","expect_column_to_exist(column=""profile_picture""),expect_column_values_to_be_of_type(column=""profile_picture"", type_=""url""),expect_column_values_to_be_null(column=""profile_picture"")",0.6037735849056605,0.5098039215686274,0.6037735849056605,53.9413337487226
For field 'student_id': Ensure the expect column pair values A to be greater than B; Ensure this field is a primary key with unique values and is required (not null).,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""student_id"", column_B=""some_other_column"")","expect_column_pair_values_to_be_greater_than(column_a=""student_id"", column_b=""id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")илакти",0.9166666666666667,0.8571428571428571,0.6666666666666667,79.13786681494152
Validate the `category_id` field to ensure it corresponds to existing categories in the `categories` table and no null values are present.,"expect_column_values_to_not_be_null(column=""category_id""),expect_column_values_to_be_in_set(column=""category_id"", value_set=existing_categories)","expect_column_values_to_be_in_set(column=""category_id"", value_set=existing_categories) and expect_column_values_to_not_be_null(column=""category_id"")",0.9795918367346939,0.9361702127659574,0.6530612244897959,95.06885335787993
Check that the `customer_age` values are within the range of `18` to `100` years.,"expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=100)","expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `student_id` column contains only unique values and is of type 'integer'. Ensure that this field cannot be null.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""integer"")",0.967741935483871,0.9333333333333333,0.8064516129032258,96.46458712936789
"Ensure the `category` column only contains values from the specified set: `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
For the field 'address': Ensure that all entries conform to the address format and do not exceed 255 characters in length. Validate that there are no duplicate addresses.,"expect_column_value_lengths_to_be_between(column=""address"", min_value=1, max_value=255),expect_column_values_to_match_regex(column=""address"", regex=r""^[a-zA-Z0-9\s,.'-]{1,255}$""),expect_column_values_to_be_unique(column=""address"")","expect_column_values_to_match_regex(column=""address"", regex=r""^.{1,255}$""),expect_column_values_to_be_unique(column=""address"")",0.6666666666666666,0.6206896551724138,0.6666666666666666,40.37274742847193
Check that the `blood_pressure` readings in the `systolic` and `diastolic` columns pass the Kolmogorov-Smirnov (KS) test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""systolic"", threshold=0.05),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""diastolic"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""systolic"", threshold=0.05),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""diastolic"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure that the `researcher_id` in the `results` table matches an existing ID in the `researchers` table.,"expect_column_pair_values_to_be_in_set(column_A=""results.researcher_id"", column_B=""researchers.id"")","expect_column_pair_values_to_be_in_set(column_A=""researcher_id"", column_B=""researchers""),expect_column_values_to_be_unique(column=""researcher_id"")",0.7804878048780487,0.717948717948718,0.7804878048780487,56.674595154136284
"Verify that the standard deviation of the `monthly_income` column is within the range of $500 to $2,000.","expect_column_stdev_to_be_between(column=""monthly_income"", min_value=500, max_value=2000)","expect_column_stdev_to_be_between(column=""monthly_income"", min_value=500, max_value=2000)",1.0,1.0,1.0,100.00000000000004
For field `data_points`: Ensure all entries are valid JSON objects conforming to the required schema for research data.,"expect_column_values_to_be_json_parseable(column=""data_points""),expect_column_values_to_match_json_schema(column=""data_points"", schema={""type"": ""object"", ""properties"": {}})  # Replace {} with the actual schema for research data.","expect_column_values_to_be_json_parseable(column=""data_points""),expect_column_values_to_match_json_schema(column=""data_points"", schema=required_schema)",0.8,0.7547169811320754,0.8,56.888037133928925
For field 'signup_date': Ensure the field matches the type 'date'. Validate that the values in (signup_date) are within the range of '2020-01-01' to '2023-12-31'.,"expect_column_values_to_be_of_type(column=""signup_date"", type_=""date""),expect_column_values_to_be_between(column=""signup_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_of_type(column=""signup_date"", type_=""date""),expect_column_values_to_be_between(column=""signup_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
Verify that the `total_price` is the sum of `item_price` and `shipping_cost` for each order record.,"expect_column_pair_values_to_be_equal(column_A=""total_price"", column_B=""item_price + shipping_cost"")","expect_column_pair_values_to_be_equal(column_A=""total_price"", column_B=""item_price + shipping_cost"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field 'game_title': Ensure values in (game_title) are unique across records and match the length constraint of 1 to 100 characters.,"expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100)","expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
Validate that the `student_name` column has a maximum length of 50 characters and does not contain any numeric characters.,"expect_column_value_lengths_to_be_between(column=""student_name"", min_value=0, max_value=50),expect_column_values_to_not_match_regex(column=""student_name"", regex=r""\d"")","expect_column_value_lengths_to_be_between(column=""student_name"", min_value=0, max_value=50),expect_column_values_to_not_match_regex(column=""student_name"", regex=r""^[\d]+$"")",1.0,1.0,1.0,88.97408926871766
For the `service_request_date` field: Validate that it is of type 'datetime' and that there are no null values.,"expect_column_values_to_be_of_type(column=""service_request_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""service_request_date"")","expect_column_to_exist(column=""service_request_date""),expect_column_values_to_be_of_type(column=""service_request_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""service_request_date"")",0.8571428571428571,0.8518518518518519,0.8571428571428571,74.14263242897161
For fields `start_date` and `end_date`: Ensure `end_date` is always greater than `start_date`. Ensure both fields match the type 'date'.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date""),expect_column_values_to_be_of_type(column=""start_date"", type_=""date""),expect_column_values_to_be_of_type(column=""end_date"", type_=""date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date""),expect_column_values_to_be_of_type(column=""end_date"", type_=""date""),expect_column_values_to_be_of_type(column=""start_date"", type_=""date"")",1.0,1.0,0.9523809523809523,100.00000000000004
Verify that the `timestamp` column values are in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).,"expect_column_values_to_match_regex(column=""timestamp"", regex=r""^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",0.34146341463414637,0.2564102564102564,0.34146341463414637,22.984202324411783
Ensure the `match_duration` values are formatted as `HH:MM:SS` and can be parsed correctly.,"expect_column_values_to_match_regex(column=""match_duration"", regex=r""^\d{2}:\d{2}:\d{2}$""),expect_column_values_to_be_dateutil_parseable(column=""match_duration"")","expect_column_values_to_match_strftime_format(column=""match_duration"", strftime_format=""%H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""match_duration"")",0.6923076923076923,0.6,0.6923076923076923,60.18478660861456
Ensure the `hire_date` column exists and that all dates are in the past.,"expect_column_to_exist(column=""hire_date""),expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_decreasing(column=""hire_date"")","expect_column_to_exist(column=""hire_date""),expect_column_values_to_be_between(column=""hire_date"", min_value=None, max_value=""now"")",0.6666666666666667,0.5652173913043478,0.6666666666666667,57.429452961464605
Ensure the `performance_metrics` column contains valid JSON objects that match the expected schema.,"expect_column_values_to_match_json_schema(column=""performance_metrics"", schema={""type"": ""object""})","expect_column_values_to_match_json_schema(column=""performance_metrics"", schema={""type"": ""object"", ""properties"": {""execution_time"": {""type"": ""number"", ""minimum"": 0}, ""success_rate"": {""type"": ""number"", ""minimum"": 0}, ""test_coverage"": {""type"": ""number"", ""minimum"": 0}, ""memory_usage"": {""type"": ""number"", ""minimum"": 0}}})",0.5098039215686275,0.489795918367347,0.5098039215686275,24.658319462483735
For `delivery_date`: Ensure all values adhere to the ISO 8601 format (YYYY-MM-DD) and are not in the past. Verify that this field is required (not null).,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_not_be_null(column=""delivery_date"")","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_greater_than(column=""delivery_date"", value=""0001-01-01""),expect_column_values_to_not_be_null(column=""delivery_date"")",0.8148148148148148,0.7848101265822784,0.8148148148148148,70.6196483321535
For field 'vehicle_id': Ensure this field is required (not null). Confirm that all values are unique and match the type 'string'.,"expect_column_values_to_not_be_null(column=""vehicle_id""),expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_be_of_type(column=""vehicle_id"", type_=""string"")","expect_column_values_to_not_be_null(column=""vehicle_id""),expect_column_values_to_be_of_type(column=""vehicle_id"", type_=""string""),expect_column_values_to_be_unique(column=""vehicle_id"")",1.0,0.9666666666666667,0.8387096774193549,99.64092777538484
For field 'response_time': Ensure values are of type 'integer'. Verify that the mean response time does not exceed 120 minutes.,"expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_mean_to_be_between(column=""response_time"", min_value=0, max_value=120)","expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_mean_to_be_between(column=""response_time"", min_value=None, max_value=120)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.81282631934458
Ensure the `coverage_start_date` column contains dates that are earlier than the `coverage_end_date` column for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""coverage_start_date"", column_B=""coverage_end_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""coverage_start_date"", column_B=""coverage_end_date"")",1.0,1.0,1.0,100.00000000000004
For field 'stock_quantity': Ensure this field exists. Validate that all entries are integers greater than or equal to zero.,"expect_column_to_exist(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)","expect_column_to_exist(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_greater_than(column=""stock_quantity"", value=0),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)",0.8378378378378378,0.8333333333333333,0.8378378378378378,72.58463297954411
Verify that the `sensor_reading` column values have a mean within the specified threshold of 20 to 80 units.,"expect_column_mean_to_be_between(column=""sensor_reading"", min_value=20, max_value=80)","expect_column_mean_to_be_between(column=""sensor_reading"", min_value=20, max_value=80)",1.0,1.0,1.0,100.00000000000004
For the `order_date` field: Ensure all entries are formatted as `YYYY-MM-DD` and are not in the future.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date""),expect_column_values_to_be_between(column=""order_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date""),expect_column_values_to_be_between(column=""order_date"", min_value=""1970-01-01"", max_value=""today"")",0.9761904761904762,0.9512195121951219,0.9761904761904762,97.41530352228281
Ensure the unique value count of the `research_area` column in the Research dataset matches the expected number of areas listed in the project outline.,"expect_column_unique_value_count_to_be_between(column=""research_area"", min_value=expected_min_value, max_value=expected_max_value)","expect_column_value_count_to_be_between(column=""research_area"", min_value=1, max_value=10)lásil",0.717948717948718,0.5945945945945946,0.717948717948718,63.035303215043754
Ensure the `sent_timestamp` column adheres to the datetime format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""sent_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_timestamp"")","expect_column_values_to_match_strftime_format(column=""sent_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_timestamp"")",1.0,1.0,1.0,100.00000000000004
Verify that the `collaborators` column is a list type and contains at least one entry per record.,"expect_column_values_to_be_of_type(column=""collaborators"", type_=""list""),expect_column_values_to_not_be_null(column=""collaborators"")","expect_column_values_to_be_of_type(column=""collaborators"", type_=""list""),expect_column_values_to_not_be_null(column=""collaborators""),expect_column_values_to_be_between(column=""collaborators"", min_value=1, max_value=None)",0.7407407407407407,0.7307692307692308,0.7407407407407407,59.98889431759882
For columns 'voter_id' and 'election_id': Ensure the combination of these fields is unique across records to prevent duplicate entries.,"expect_compound_columns_to_be_unique(column_A=""voter_id"", column_B=""election_id"")","expect_compound_columns_to_be_unique(column_A=""voter_id"", column_B=""election_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `phone_number` column matches the pattern `^\+?\d{1,3}?\s?\(?\d{1,4}?\)?[\s.-]?\d{1,4}[\s.-]?\d{1,4}$` to confirm valid phone numbers.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?\d{1,3}?\s?\(?\d{1,4}?\)?[\s.-]?\d{1,4}[\s.-]?\d{1,4}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?\d{1,3}?\s?\(\d{1,4}?\)\?\[\s.-\]?\d{1,4}\[\s.-\]?\d{1,4}$"")",1.0,1.0,1.0,82.9462805148988
"Validate the `data_source` column to ensure it only contains values from the list: `['Survey', 'Experiment', 'Observation']`.","expect_column_values_to_be_in_set(column=""data_source"", value_set=[""Survey"", ""Experiment"", ""Observation""])","expect_column_values_to_be_in_set(column=""data_source"", value_set=['Survey', 'Experiment', 'Observation'])",1.0,1.0,1.0,68.69938387430254
"Ensure the `credit_score` field contains unique values and is of type 'integer', within the range of 300 to 850.","expect_column_values_to_be_unique(column=""credit_score""),expect_column_values_to_be_of_type(column=""credit_score"", type_=""int""),expect_column_values_to_be_between(column=""credit_score"", min_value=300, max_value=850)","expect_column_values_to_be_unique(column=""credit_score""),expect_column_values_to_be_of_type(column=""credit_score"", type_=""integer""),expect_column_values_to_be_between(column=""credit_score"", min_value=300, max_value=850)",0.9722222222222222,0.9428571428571428,0.9722222222222222,96.90278768043123
For field 'player_id': Ensure this field exists. Validate that 'player_id' is unique across records.,"expect_column_to_exist(column=""player_id""),expect_column_values_to_be_unique(column=""player_id"")","expect_column_to_exist(column=""player_id""),expect_column_values_to_be_unique(column=""player_id"")",1.0,1.0,1.0,100.00000000000004
"For the `case_status` column: Ensure all entries are from the specified set ['Open', 'Closed', 'Pending'].","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
For field 'block_number': Ensure the field matches the type 'integer'. Validate that values in (block_number) are unique and greater than zero.,"expect_column_values_to_be_of_type(column=""block_number"", type_=""int""),expect_column_values_to_be_unique(column=""block_number""),expect_column_values_to_be_greater_than(column=""block_number"", value=0)","expect_column_values_to_be_of_type(column=""block_number"", type_=""int""),expect_column_values_to_be_unique(column=""block_number""),expect_column_values_to_be_greater_than(column=""block_number"", value=0)",1.0,1.0,1.0,100.00000000000004
"For the `grades` column, verify that the mean value is between 0 and 100 and the standard deviation does not exceed 15.","expect_column_mean_to_be_between(column=""grades"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""grades"", min_value=0, max_value=15)","expect_column_mean_to_be_between(column=""grades"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""grades"", min_value=0, max_value=15)",1.0,1.0,1.0,100.00000000000004
For field 'delivery_date': Ensure all delivery dates follow the 'YYYY-MM-DD' format and are set to occur in the future.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""delivery_date"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""delivery_date"", value_set=[x for x in column_values if x >= datetime.datetime.now().strftime('%Y-%m-%d')])",0.696969696969697,0.6562499999999999,0.696969696969697,55.33938306866437
"Ensure that the `gender` column only contains values from the set `['Male', 'Female', 'Other']`.","expect_column_values_to_be_in_set(column=""gender"", value_set=['Male', 'Female', 'Other'])","expect_column_values_to_be_in_set(column=""gender"", value_set=['Male', 'Female', 'Other'])",1.0,1.0,1.0,100.00000000000004
"Validate that the `delivery_status` column only contains distinct values from the list `['Pending', 'Shipped', 'Delivered', 'Returned']`.","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Returned'])","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=[""Pending"", ""Shipped"", ""Delivered"", ""Returned""])",1.0,1.0,1.0,63.15789958317594
Check that the sum of the `budget` and `expenses` columns equals the `total_cost` column for each record.,"expect_multicolumn_sum_to_equal(column_list=[""budget"", ""expenses""], target_column=""total_cost"")","expect_multicolumn_sum_to_equal(column_list=[""budget"", ""expenses""], sum_column=""total_cost"")",0.9230769230769231,0.8333333333333334,0.9230769230769231,92.10500207490826
"Validate that the `listing_price` column contains values greater than zero, and the average price does not deviate more than 15% from the median price.","expect_column_values_to_be_greater_than(column=""listing_price"", value=0),expect_column_mean_to_be_between(column=""listing_price"", min_value=""0.85 * median(listing_price)"", max_value=""1.15 * median(listing_price)"")","expect_column_values_to_be_between(column=""listing_price"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""listing_price"", min_value=0.85*median_price, max_value=1.15*median_price)",0.8732394366197184,0.7246376811594202,0.8732394366197184,66.20708613060474
Confirm that the maximum value in the `uv_index` column does not exceed 12.,"expect_column_max_to_be_between(column=""uv_index"", max_value=12)","expect_column_max_to_be_between(column=""uv_index"", max_value=12)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `temperature` column follows a normal distribution with a mean of 20 and a standard deviation of 5, confirmed by the KS test with a p-value greater than 0.05.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""temperature"", threshold=0.05)","expect_column_mean_to_be_between(column=""temperature"", min_value=20, max_value=20),expect_column_stdev_to_be_between(column=""temperature"", min_value=5, max_value=5)  # Assuming a normal distribution with mean of 20 and standard deviation of 5 #, assuming KS Test p-value is greater than 0.05.",0.4411764705882352,0.24242424242424243,0.3235294117647059,15.366937663610258
"Validate that the `order_status` column contains only distinct values within the set `['Completed', 'Pending', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Completed', 'Pending', 'Cancelled'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Completed', 'Pending', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
Check that the sum of `quantity_ordered` and `quantity_received` columns matches the value in the `quantity_shipped` column for each record.,"expect_multicolumn_sum_to_equal(column_list=[""quantity_ordered"", ""quantity_received""], sum_column=""quantity_shipped"")","expect_multicolumn_sum_to_equal(column_list=[""quantity_ordered"", ""quantity_received""], sum_column=""quantity_shipped"")",1.0,1.0,1.0,100.00000000000004
Ensure the combination of `location_id` and `forecast_date` is unique across records. No duplicates should exist.,"expect_compound_columns_to_be_unique(column_A=""location_id"", column_B=""forecast_date"")","expect_compound_columns_to_be_unique(column_A=""location_id"", column_B=""forecast_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `inventory_received_date` column contains valid datetime strings in the format `DD-MM-YYYY` and can be parsed with dateutil.,"expect_column_values_to_match_strftime_format(column=""inventory_received_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""inventory_received_date"")","expect_column_to_exist(column=""inventory_received_date""),expect_column_values_to_match_strftime_format(column=""inventory_received_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""inventory_received_date"")",0.870967741935484,0.8666666666666666,0.870967741935484,76.09515774602313
"Ensure the `network_type` column contains only distinct values matching `['4G', '5G', 'LTE', '3G']`.","expect_column_values_to_be_in_set(column=""network_type"", value_set=['4G', '5G', 'LTE', '3G'])","expect_column_distinct_values_to_equal_set(column=""network_type"", value_set=['4G', '5G', 'LTE', '3G'])",0.875,0.7333333333333333,0.875,84.99508493439812
Verify that the `sent_time` column is formatted as 'YYYY-MM-DD HH:MM:SS' and all entries are valid datetime entries.,"expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `salary` column values are all greater than 0 and do not exceed 250,000.","expect_column_values_to_be_between(column=""salary"", min_value=0, max_value=250000)","expect_column_values_to_be_between(column=""salary"", min_value=0, max_value=250000)",1.0,1.0,1.0,100.00000000000004
For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values are unique.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_unique(column=""customer_id"")","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_unique(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
For the `delivery_date`: Confirm that values are greater than or equal to the `order_date` across all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_values_to_be_greater_than(column=""delivery_date"", other_column=""order_date"")",0.8125000000000001,0.4000000000000001,0.8125000000000001,54.44581248827759
"Ensure the `username` column is unique and matches the regex pattern `^[a-zA-Z0-9_]{3,15}$`.","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",1.0,1.0,1.0,100.00000000000004
Validate that the `amenities` column contains valid JSON arrays conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""amenities"", schema={...})  # Replace {...} with the actual schema definition.","expect_column_values_to_match_json_schema(column=""amenities"", schema=""YOUR_JSON_SCHEMA_HERE"")",0.7333333333333334,0.6428571428571429,0.7333333333333334,51.26012107175422
Ensure that the `course_start_date` field adheres to the format '%Y-%m-%d' and is not a future date.,"expect_column_values_to_match_strftime_format(column=""course_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""course_start_date"")  # There is no direct expectation for future date check, it can be validated outside the context of Great Expectations.","expect_column_values_to_match_strftime_format(column=""course_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""course_start_date""),expect_column_values_to_be_between(column=""course_start_date"", min_value=""2023-10-01"", max_value=""2023-10-15"") # Assuming current date is 2023-10-15",0.62,0.5306122448979591,0.5800000000000001,52.92292994397429
"Ensure the `registration_date` column contains valid date formats and falls within the range of `['2020-01-01', '2023-12-31']`.","expect_column_values_to_be_dateutil_parseable(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value='2020-01-01', max_value='2023-12-31')","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",0.8253968253968255,0.7540983606557378,0.8253968253968255,57.20311281013618
"For the `status` column, ensure values are limited to `['sent', 'failed', 'pending']` and no null values are present.","expect_column_values_to_be_in_set(column=""status"", value_set=['sent', 'failed', 'pending']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['sent', 'failed', 'pending']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,100.00000000000004
Verify that the `author_id` and `post_id` combination is unique within the `posts` table.,"expect_compound_columns_to_be_unique(column_A=""author_id"", column_B=""post_id"")","expect_compound_columns_to_be_unique(column_list=[""author_id"", ""post_id""])",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.7176346014632
Ensure that the maximum value in the `product_price` column does not exceed 1000 and the minimum value is above 1.,"expect_column_max_to_be_between(column=""product_price"", max_value=1000),expect_column_min_to_be_between(column=""product_price"", min_value=1)","expect_column_max_to_be_between(column=""product_price"", max_value=1000),expect_column_min_to_be_between(column=""product_price"", min_value=1)",1.0,1.0,1.0,100.00000000000004
"For the `amount` field: Validate that all values are positive and fall within the range of 1 to 1,000,000.","expect_column_values_to_be_between(column=""amount"", min_value=1, max_value=1000000),expect_column_values_to_be_greater_than(column=""amount"", value=0)","expect_column_values_to_be_between(column=""amount"", min_value=1, max_value=1_000_000),expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=None),expect_column_values_to_be_greater_than(column=""amount"", threshold=0)",0.7272727272727272,0.6562500000000001,0.6969696969696971,55.495255117429934
"In the `service_requests` table, confirm that the `request_status` column only contains values from the set `['Open', 'In Progress', 'Closed']`.","expect_column_values_to_be_in_set(column=""request_status"", value_set=['Open', 'In Progress', 'Closed'])","expect_column_values_to_be_in_set(column=""request_status"", value_set=['Open', 'In Progress', 'Closed'])",1.0,1.0,1.0,100.00000000000004
Ensure the `blood_pressure` column values are formatted correctly and fall within the range of `90/60` to `180/120`.,"expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{1,3}/\d{1,3}$""),expect_column_values_to_be_between(column=""blood_pressure"", min_value=""90/60"", max_value=""180/120"")","expect_column_values_to_be_between(column=""blood_pressure"", min_value=90, max_value=120),expect_column_values_to_match_strftime_format(column=""blood_pressure"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")  # For timestamp formatting,expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^90\/60-180\/120$"")  # For string formatting,  # Note: There could be multiple regex expressions, depending on the exact format required.",0.5544554455445544,0.4848484848484849,0.37623762376237624,40.98532960736842
For the `username` field: Ensure all values are unique. Ensure this field is required (not null).,"expect_column_values_to_be_unique(column=""username""),expect_column_values_to_not_be_null(column=""username"")","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_not_be_null(column=""username"")",1.0,1.0,1.0,100.00000000000004
For field 'promotion_code': Ensure the field matches the type 'text'. Ensure the field contains unique values. Ensure this field exists.,"expect_column_to_exist(column=""promotion_code""),expect_column_values_to_be_of_type(column=""promotion_code"", type_=""text""),expect_column_values_to_be_unique(column=""promotion_code"")","expect_column_to_exist(column=""promotion_code""),expect_column_values_to_be_of_type(column=""promotion_code"", type_=""text""),expect_column_values_to_be_unique(column=""promotion_code"")",1.0,1.0,1.0,100.00000000000004
Check that the average `view_duration` in the `duration` column is above 30 minutes and the standard deviation is below 15 minutes.,"expect_column_mean_to_be_between(column=""duration"", min_value=30*60, max_value=None),expect_column_stdev_to_be_between(column=""duration"", min_value=None, max_value=15*60)","expect_column_mean_to_be_between(column=""view_duration"", min_value=30, max_value=None),expect_column_stdev_to_be_between(column=""view_duration"", min_value=0, max_value=15)",0.9,0.7586206896551724,0.9,80.97333921666642
For the field 'last_contact_date': Ensure this field matches the datetime format '%Y-%m-%d %H:%M:%S'. Validate that all values are valid datetimes.,"expect_column_to_exist(column=""last_contact_date""),expect_column_values_to_match_strftime_format(column=""last_contact_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""last_contact_date"")","expect_column_values_to_match_strftime_format(column=""last_contact_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""last_contact_date"")",0.8823529411764706,0.8787878787878788,0.8823529411764706,76.22897307899541
Ensure the `incident_id` column is unique and does not contain any missing values in both domains.,"expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")","expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'num_bedrooms': Ensure the field exists. Validate that the values in (num_bedrooms) are integers ranging from 1 to 10, inclusive.","expect_column_to_exist(column=""num_bedrooms""),expect_column_values_to_be_between(column=""num_bedrooms"", min_value=1, max_value=10),expect_column_values_to_be_of_type(column=""num_bedrooms"", type_=""int"")","expect_column_to_exist(column=""num_bedrooms""),expect_column_values_to_be_of_type(column=""num_bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""num_bedrooms"", min_value=1, max_value=10)",1.0,0.9696969696969697,0.6764705882352942,99.01141077297541
For field 'json_order_details': Ensure that values in 'json_order_details' are valid JSON objects and conform to the specified JSON schema for order details.,"expect_column_values_to_be_json_parseable(column=""json_order_details""),expect_column_values_to_match_json_schema(column=""json_order_details"", schema={""type"": ""object"", ""properties"": { ... }})  # Replace ... with actual schema properties.","expect_column_values_to_be_json_parseable(column=""json_order_details""),expect_column_values_to_match_json_schema(column=""json_order_details"", schema=""order_details_schema"")",0.8421052631578947,0.8,0.8421052631578947,60.418016792069906
For field 'customer_id': Ensure the expect column values to be in set; Ensure this field is a primary key with unique values and is required (not null).,"expect_column_values_to_be_in_set(column=""customer_id"", value_set=...),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_in_set(column=""customer_id"", value_set=customer_ids),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")",0.96875,0.9354838709677419,0.96875,93.75351159073847
For the `forecast_date` field: Ensure it exists and is in the format YYYY-MM-DD. Confirm that the row count matches the expected number of forecast entries for the month.,"expect_column_to_exist(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_table_row_count_to_equal(expected_value)  # Replace 'expected_value' with the actual expected number of forecast entries for the month.","expect_column_to_exist(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_value_count_to_equal(column=""forecast_date"", value=expected_month_forecast_entry_count)",0.7901234567901235,0.6329113924050633,0.7407407407407407,72.53031298400269
"Check if the `status` column only contains values from the set `['Open', 'Closed', 'Pending']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])илакти",1.0,1.0,1.0,96.82132340352993
"For field 'weather_condition': Ensure the field matches the type 'text'. Validate that values in (weather_condition) must match one of the defined conditions ['Sunny', 'Rainy', 'Cloudy', 'Stormy'].","expect_column_values_to_be_of_type(column=""weather_condition"", type_=""text""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])","expect_column_values_to_be_of_type(column=""weather_condition"", type_=""text""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])",1.0,1.0,1.0,100.00000000000004
Confirm that the `loan_amount` is greater than the `collateral_value` in the `loans` table for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""loan_amount"", column_B=""collateral_value"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""loan_amount"", column_B=""collateral_value"")",1.0,1.0,1.0,100.00000000000004
Verify that the `post_date` column contains dates that fall within the range of `2020-01-01` to `2023-12-31`.,"expect_column_values_to_be_between(column=""post_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_dateutil_parseable(column=""post_date""),expect_column_values_to_be_between(column=""post_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",0.7916666666666666,0.782608695652174,0.7916666666666666,64.8724877307773
Verify that the `quantity_ordered` and `quantity_shipped` columns have a relationship where `quantity_shipped` is always less than or equal to `quantity_ordered`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""quantity_shipped"", column_B=""quantity_ordered"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""quantity_shipped"", column_B=""quantity_ordered"")",1.0,1.0,1.0,100.00000000000004
"For the `service_status`: Ensure it contains only values from the set `['Active', 'Inactive', 'Suspended']`.","expect_column_values_to_be_in_set(column=""service_status"", value_set=['Active', 'Inactive', 'Suspended'])","expect_column_values_to_be_in_set(column=""service_status"", value_set=['Active', 'Inactive', 'Suspended'])",1.0,1.0,1.0,100.00000000000004
For field `prescription_amount`: Ensure values are within the range of 0 to 1000. Ensure this field does not contain negative values.,"expect_column_values_to_be_between(column=""prescription_amount"", min_value=0, max_value=1000),expect_column_values_to_be_greater_than(column=""prescription_amount"", value=0)","expect_column_values_to_be_between(column=""prescription_amount"", min_value=0, max_value=1000),expect_column_values_to_not_be_negative(column=""prescription_amount"")",0.8846153846153846,0.8,0.8846153846153846,82.76192629139766
"For `billing_cycle`: Confirm that values are from the set `['Monthly', 'Quarterly', 'Annually']` and are consistent across entries.","expect_column_values_to_be_in_set(column=""billing_cycle"", value_set=['Monthly', 'Quarterly', 'Annually']),expect_column_values_to_be_unique(column=""billing_cycle"")","expect_column_values_to_be_in_set(column=""billing_cycle"", value_set=['Monthly', 'Quarterly', 'Annually']),expect_column_values_to_be_the_same_for_all_entries(column=""billing_cycle"")",0.8846153846153847,0.84,0.8846153846153847,82.86073002063534
For the `post_date`: Ensure this field exists and matches the type 'datetime'. Ensure there are no missing values in this column.,"expect_column_to_exist(column=""post_date""),expect_column_values_to_be_of_type(column=""post_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""post_date"")","expect_column_to_exist(column=""post_date""),expect_column_values_to_be_of_type(column=""post_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""post_date"")",1.0,1.0,1.0,100.00000000000004
For field 'user_id': Ensure the field matches the type 'integer'. Ensure values in (user_id) are unique and fall within the range of 10000 to 99999. Ensure this field exists.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_between(column=""user_id"", min_value=10000, max_value=99999)","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""integer""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_between(column=""user_id"", min_value=10000, max_value=99999)",0.9767441860465116,0.9523809523809523,0.9767441860465116,97.4417599820744
For the `device_id` field: Ensure the field contains only unique values. Each `device_id` must be a non-null string.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""str"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",0.76,0.7499999999999999,0.76,49.774149722499054
Verify that the median `blood_pressure` values fall within the range of 90/60 to 120/80.,"expect_column_median_to_be_between(column=""blood_pressure"", min_value=60, max_value=80)","expect_column_values_to_be_between(column=""blood_pressure"", min_value=90/60, max_value=120/80)",0.8749999999999999,0.6666666666666666,0.8749999999999999,72.24037170215817
For the `installation_date` field: Ensure that the format is `YYYY-MM-DD`. Validate that no values are null and that all dates are in the past.,"expect_column_to_exist(column=""installation_date""),expect_column_values_to_not_be_null(column=""installation_date""),expect_column_values_to_match_strftime_format(column=""installation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""installation_date"")","expect_column_values_to_match_strftime_format(column=""installation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""installation_date""),expect_column_values_to_be_dateutil_parseable(column=""installation_date""),expect_column_values_to_be_less_than(column=""installation_date"", value=""today"")",0.8863636363636364,0.813953488372093,0.7045454545454545,81.22948659548672
"Ensure the `case_status` column includes only distinct values from the set `['Open', 'Closed', 'In Progress']`.","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'In Progress'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'In Progress'])",1.0,1.0,1.0,100.00000000000004
For field 'student_id': Ensure the field matches the type 'text'. Ensure that values in (student_id) must exist in the set of enrolled student IDs. Ensure this field exists.,"expect_column_to_exist(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""text""),expect_column_values_to_be_in_set(column=""student_id"", value_set=enrolled_student_ids)","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""text""),expect_column_values_to_be_in_set(column=""student_id"", value_set=enrolled_student_ids)",1.0,1.0,1.0,100.00000000000004
For the `location` field: Ensure it includes entries from the defined set of valid geographical locations.,"expect_column_values_to_be_in_set(column=""location"", value_set=valid_geographical_locations_set)","expect_column_values_to_be_in_set(column=""location"", value_set=[...])  # Replace [... ] with the actual set of valid geographical locations, possibly read from a configuration file.",0.7317073170731707,0.6153846153846153,0.6829268292682926,45.760114656142676
"Check that the `post_length` column values do not exceed 280 characters, adhering to platform constraints.","expect_column_value_lengths_to_be_between(column=""post_length"", min_value=0, max_value=280)","expect_column_values_to_be_between(column=""post_length"", min_value=1, max_value=280)",0.9032258064516129,0.7586206896551724,0.9032258064516129,77.9072280774556
Validate that the `billing_amount` column values follow the currency format and the average billing amount is within the expected range of $50 to $300.,"expect_column_values_to_match_regex(column=""billing_amount"", regex=r""^\$\d+(\.\d{2})?$""),expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=300)","expect_column_values_to_match_regex(column=""billing_amount"", regex=r""^\$?\d+\.\d{2}?$""),expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=300)",1.0,1.0,1.0,91.1042564958528
Ensure the `user_id` column contains only unique values and does not have any missing entries.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the `view_count` column follows a log-normal distribution with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For the `fraud_alerts`: Ensure that the JSON structure adheres to the specified schema and that all records are present.,"expect_column_values_to_match_json_schema(column=""fraud_alerts"", schema=""specified_schema""),expect_column_values_to_be_not_null(column=""fraud_alerts"")","expect_column_values_to_match_json_schema(column=""fraud_alerts"", schema={}),expect_column_values_to_be_present(column=""fraud_alerts"")",0.8837209302325583,0.8292682926829269,0.8837209302325583,78.23315758806439
For field 'supplier_email': Ensure the field exists. Ensure values in (supplier_email) conform to the pattern of a valid email address.,"expect_column_to_exist(column=""supplier_email""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_to_exist(column=""supplier_email""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",0.7058823529411764,0.6938775510204082,0.7058823529411764,70.6883366511716
Ensure the `post_date` column follows the format '%Y-%m-%d' and contains dates within the last year.,"expect_column_values_to_match_strftime_format(column=""post_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""post_date"")","expect_column_values_to_match_strftime_format(column=""post_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_in_set(column=""post_date"", value_set=[date for date in pd.date_range(start='2022-08-01', end=datetime.datetime.now(), freq='D')])",0.6666666666666666,0.6268656716417911,0.6666666666666666,47.8437582663755
Ensure the `student_grade` column has a mean value between `70` and `90`.,"expect_column_mean_to_be_between(column=""student_grade"", min_value=70, max_value=90)","expect_column_mean_to_be_between(column=""student_grade"", min_value=70, max_value=90)",1.0,1.0,1.0,100.00000000000004
For the `appointment_date`: Ensure the date is in 'YYYY-MM-DD' format and falls within the next 30 days.,"expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""2023-10-26"", max_value=""2023-11-25"")","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""appointment_date""),expect_column_values_to_be_between(column=""appointment_date"", min_value=(datetime.date.today() + datetime.timedelta(days=30)).strftime(""%Y-%m-%d"")  # Adjust the 30 day parameter as per requirement",0.6136363636363636,0.5813953488372093,0.5909090909090909,51.355431204769886
For field `room_number`: Ensure the field is required (not null). Ensure values in `room_number` are unique within the same `hotel_id`.,"expect_column_values_to_not_be_null(column=""room_number""),expect_select_column_values_to_be_unique_within_record(column=""room_number"", groupby_column=""hotel_id"")","expect_column_values_to_not_be_null(column=""room_number""),expect_column_values_to_be_unique_within_group(column=""room_number"", group_by=""hotel_id"")",0.8627450980392156,0.7346938775510204,0.8627450980392156,83.15712876758644
For field 'report_date': Ensure the field matches the type 'datetime'. Validate that 'report_date' is formatted as 'YYYY-MM-DD'.,"expect_column_values_to_be_of_type(column=""report_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""report_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_of_type(column=""report_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""report_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"Check that the `zip_code` entries consist of exactly five digits, ensuring valid U.S. postal codes.","expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$"")","expect_column_values_to_match_regex(column=""zip_code"", regex=r""^[0-9]{5}(-[0-9]{4})?$"")",0.8000000000000002,0.7142857142857143,0.8000000000000002,56.54487436660256
Check that the number of rows in the `comments` table matches the number of corresponding `posts` in the `posts` table.,"expect_table_row_count_to_equal_other_table(table_name=""comments"", other_table_name=""posts"")","expect_table_row_count_to_equal_other_table(table_name=""comments"", other_table_name=""posts"")",1.0,1.0,1.0,100.00000000000004
For field `customer_email`: Ensure the field matches the type 'text'. Ensure values in `customer_email` are unique and valid email formats.,"expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_values_to_be_unique(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_values_to_be_unique(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",1.0,1.0,1.0,100.00000000000004
"For the `coverage_amount`, validate that all values are greater than the corresponding `premium_amount`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""coverage_amount"", column_B=""premium_amount"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""coverage_amount"", column_B=""premium_amount"")",1.0,1.0,1.0,100.00000000000004
"For the `square_footage` column, confirm that values fall within the range of `300` to `50,000` square feet.","expect_column_values_to_be_between(column=""square_footage"", min_value=300, max_value=50000)","expect_column_values_to_be_between(column=""square_footage"", min_value=300, max_value=50000)",1.0,1.0,1.0,100.00000000000004
For field 'timestamp': Ensure the field matches the type 'datetime'. Validate that all entries in (timestamp) are in the correct format and timezone. Ensure this field exists.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")  # Assuming the expected format for datetime is ""yyyy-mm-dd hh:mm:ss"", change the strftime_format as per your needs.",0.6896551724137931,0.6352941176470588,0.6896551724137931,64.3139549628599
Ensure the `last_name` column contains no entries exceeding 20 characters in length and matches the pattern for alphabetic characters only.,"expect_column_value_lengths_to_be_between(column=""last_name"", min_value=0, max_value=20),expect_column_values_to_match_regex(column=""last_name"", regex=""^[A-Za-z]+$"")","expect_column_max_value_to_be_between(column=""last_name"", max_value=20),expect_column_values_to_match_regex(column=""last_name"", regex=r""[a-zA-Z]{1,}"")",0.8771929824561403,0.7272727272727273,0.8771929824561403,72.65642053292261
For the `feedback` field: Ensure that string lengths are between 10 and 500 characters and do not contain offensive words.,"expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""\b(offensive_word1|offensive_word2|offensive_word3)\b"")","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""\b(?:\p{L}++|\p{Z}++|-){1,62}\b"")  # Regular Expression for checking if the feedback does not contain any offensive words.",0.7160493827160493,0.6582278481012658,0.691358024691358,61.58582683221299
Ensure that the `order_date` column contains no duplicate dates for any single `customer_id`.,"expect_select_column_values_to_be_unique_within_record(column_a=""order_date"", column_b=""customer_id"")","expect_column_values_to_be_unique(column=""order_date""),expect_column_pair_values_to_be_equal(column_A=""customer_id"", column_B=""order_date"")",0.6829268292682927,0.41025641025641024,0.5853658536585366,40.86328865478416
"For file 'historical_weather_data.csv': Ensure the file exists. Ensure the file has a header with columns: ['date', 'temperature', 'humidity', 'precipitation'].","expect_file_to_exist(file_path=""historical_weather_data.csv""),expect_file_to_have_valid_table_header(file_path=""historical_weather_data.csv"", header=[""date"", ""temperature"", ""humidity"", ""precipitation""])","expect_file_to_exist(file=""historical_weather_data.csv""),expect_column_count_to_equal(file=""historical_weather_data.csv"", column_count=4),expect_file_to_have_header(file=""historical_weather_data.csv"")  # Expecting a header with specific column names.",0.5970149253731343,0.46153846153846156,0.5970149253731343,49.730509653861915
"For field 'contact_number': Ensure this field exists. Ensure the field matches the type 'text'. Validate that it conforms to the pattern '^\\+?[0-9]{10,15}$' for international formats.","expect_column_to_exist(column=""contact_number""),expect_column_values_to_be_of_type(column=""contact_number"", type_=""text""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+?[0-9]{10,15}$"")","expect_column_to_exist(column=""contact_number""),expect_column_values_to_be_of_type(column=""contact_number"", type_=""text""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+?[0-9]{10,15}$"")ávající",0.9714285714285714,0.9705882352941176,0.9714285714285714,98.8302081248834
Ensure that the `player_age` column has a standard deviation of less than 3 years.,"expect_column_stdev_to_be_between(column=""player_age"", min_value=None, max_value=3)","expect_column_stdev_to_be_between(column=""player_age"", min_value=0, max_value=3)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
For field 'sku': Ensure all SKU values adhere to the regex pattern for SKU formatting. Ensure the field is not null.,"expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{3,10}$""),expect_column_values_to_not_be_null(column=""sku"")","expect_column_values_to_match_regex(column=""sku"", regex=r""^[\w\s-]+$""),expect_column_values_to_not_be_null(column=""sku"")",0.8444444444444444,0.7906976744186046,0.8444444444444444,84.49104701920875
For the `age` and `income` columns: Ensure that the average income is positively correlated with age across the dataset.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""income"", column_B=""age"")","expect_column_pair_pearson_corr_to_be_greater_than(column_A=""income"", column_B=""age"", threshold=0)",0.787878787878788,0.6451612903225806,0.787878787878788,70.41206857739161
Ensure that the combination of `user_id` and `post_id` is unique across the entire dataset to avoid duplicate posts.,"expect_compound_columns_to_be_unique(column_list=[""user_id"", ""post_id""])","expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""post_id"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
Verify that the `premium_amount` column values are greater than 0 and less than 10000.,"expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For the `user_activity` and `login_time` columns: Ensure that all `login_time` values are greater than the `last_logout_time` values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""login_time"", column_B=""last_logout_time"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""login_time"", column_B=""last_logout_time"")",1.0,1.0,1.0,100.00000000000004
"For the `transaction_date` column, ensure all values are valid datetime strings that can be parsed and match the format `'%m/%d/%Y'`.","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format='%m/%d/%Y')","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y"")",1.0,1.0,1.0,90.93560552763375
"For field 'course_id': Ensure all values in 'course_id' are present in the predefined set ['math', 'science', 'literature']. Validate no missing values.","expect_column_values_to_be_in_set(column=""course_id"", value_set=['math', 'science', 'literature']),expect_column_values_to_not_be_null(column=""course_id"")","expect_column_values_to_be_in_set(column=""course_id"", value_set=[""math"", ""science"", ""literature""]),expect_column_values_to_not_be_null(column=""course_id"")",1.0,1.0,1.0,80.3595280013572
Verify that the `transaction_date` column matches the format 'YYYY-MM-DD' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
For field 'username': Ensure the field exists and matches the type 'text'. Validate that all usernames in (username) have a length between 3 and 15 characters.,"expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15)","expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15)",1.0,1.0,1.0,100.00000000000004
Ensure the `enrollment_date` column contains datetime values formatted as 'YYYY-MM-DD'. Each value must be parsable using dateutil.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")",0.8771929824561403,0.8363636363636364,0.5614035087719298,74.25309446013702
Ensure the `amount` column contains no missing values and only positive decimal numbers.,"expect_column_values_to_not_be_null(column=""amount""),expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=None)","expect_column_to_exist(column=""amount""),expect_column_values_to_be_of_type(column=""amount"", type_=""decimal""),expect_column_values_to_not_be_null(column=""amount""),expect_column_values_to_be_between(column=""amount"", min_value=0)",0.6999999999999998,0.6551724137931034,0.6666666666666666,50.20025053469571
"For the `transaction_amount` field: Ensure values are within the range of 0 to 10,000. Ensure this field exists and is not null.","expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)","expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
"Ensure the `diagnosis` column only contains values from the specified set: `['Diabetes', 'Hypertension', 'Asthma']`.","expect_column_values_to_be_in_set(column=""diagnosis"", value_set=['Diabetes', 'Hypertension', 'Asthma'])","expect_column_values_to_be_in_set(column=""diagnosis"", value_set=['Diabetes', 'Hypertension', 'Asthma'])",1.0,1.0,1.0,100.00000000000004
Ensure that the sum of `positive_responses` and `negative_responses` equals `total_responses`.,"expect_multicolumn_sum_to_equal(column_list=[""positive_responses"", ""negative_responses""], target_column=""total_responses"")","expect_column_pair_values_to_be_equal(column_A=""positive_responses"", column_B=""total_responses""),expect_column_pair_values_to_be_equal(column_A=""negative_responses"", column_B=""total_responses""),expect_multicolumn_sum_to_equal(column_list=[""positive_responses"", ""negative_responses""])",0.5,0.40740740740740744,0.3928571428571429,32.97999423783621
Ensure the `session_duration` column's values follow a reasonable distribution with a mean value between 5 and 60 minutes.,"expect_column_mean_to_be_between(column=""session_duration"", min_value=5, max_value=60)","expect_column_mean_to_be_between(column=""session_duration"", min_value=5, max_value=60)",1.0,1.0,1.0,100.00000000000004
Confirm that the `signal_strength` values are within the expected range of `-100 dBm` to `0 dBm`.,"expect_column_values_to_be_between(column=""signal_strength"", min_value=-100, max_value=0)","expect_column_values_to_be_between(column=""signal_strength"", min_value=-100, max_value=0)",1.0,1.0,1.0,100.00000000000004
"For field 'platform': Ensure the field matches the type 'text'. Ensure values in 'platform' must exist in the predefined list ['PC', 'Xbox', 'PlayStation', 'Switch'].","expect_column_values_to_be_of_type(column=""platform"", type_=""text""),expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])","expect_column_values_to_be_of_type(column=""platform"", type_=""text""),expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Xbox"", ""PlayStation"", ""Switch""])",1.0,1.0,1.0,77.25530285139872
"Confirm that the `author_email` field matches the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$` for valid email addresses.","expect_column_values_to_match_regex(column=""author_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""author_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.5945945945945946,0.5714285714285714,0.5945945945945946,61.169851731626025
Ensure the `customer_id` column is present in both the `customers` and `payments` tables.,"expect_column_to_exist(column=""customer_id""),expect_column_to_exist(column=""customer_id"")","expect_column_to_exist(column=""customer_id"")",0.6666666666666666,0.631578947368421,0.6666666666666666,34.559075257697465
For field 'sent_date': Ensure this field contains valid timestamps and is not null.,"expect_column_values_to_be_dateutil_parseable(column=""sent_date""),expect_column_values_to_not_be_null(column=""sent_date"")","expect_column_to_exist(column=""sent_date""),expect_column_values_to_be_dateutil_parseable(column=""sent_date""),expect_column_values_to_not_be_null(column=""sent_date"")",0.851063829787234,0.8444444444444443,0.851063829787234,71.88934677966844
For field 'premium_amount': Ensure the field matches the type 'numeric'. Ensure the values in 'premium_amount' are greater than 0 and less than 10000.,"expect_column_values_to_be_of_type(column=""premium_amount"", type_=""numeric""),expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_of_type(column=""premium_amount"", type_=""numeric""),expect_column_values_to_be_between(column=""premium_amount"", min_value=1, max_value=9999)",0.9259259259259259,0.8846153846153846,0.9259259259259259,92.89342370633227
"For field 'game_genre': Ensure the field matches the type 'text'. Ensure this field exists. Ensure values conform to the predefined list: ('Action', 'Adventure', 'Strategy', 'RPG').","expect_column_to_exist(column=""game_genre""),expect_column_values_to_be_of_type(column=""game_genre"", type_=""text""),expect_column_values_to_be_in_set(column=""game_genre"", value_set=['Action', 'Adventure', 'Strategy', 'RPG'])","expect_column_to_exist(column=""game_genre""),expect_column_values_to_be_of_type(column=""game_genre"", type_=""text""),expect_column_values_to_be_in_set(column=""game_genre"", value_set=['Action', 'Adventure', 'Strategy', 'RPG'])",1.0,1.0,1.0,100.00000000000004
Ensure the `hypothesis` column matches a predefined list of hypotheses and does not contain any null entries.,"expect_column_values_to_be_in_set(column=""hypothesis"", value_set=[/* predefined list of hypotheses */]),expect_column_values_to_not_be_null(column=""hypothesis"")","expect_column_values_to_be_in_set(column=""hypothesis"", value_set=""list_of_hypotheses""),expect_column_values_to_not_be_null(column=""hypothesis"")",0.9787234042553191,0.9333333333333332,0.9787234042553191,80.06670469517614
"Ensure that for each record, the `incident_type` and `incident_status` columns have unique combinations.","expect_compound_columns_to_be_unique(column_a=""incident_type"", column_b=""incident_status"")","expect_compound_columns_to_be_unique(columns=[""incident_type"", ""incident_status""])",0.88,0.6956521739130435,0.88,60.81152344671197
For field `transaction_id`: Ensure the field is required (not null). Ensure values in `transaction_id` are unique across all records.,"expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id"")ávající",0.8085106382978724,0.8,0.8085106382978724,69.73489091113805
For the `prescription_amount` column: Ensure that the aggregate sum of values does not exceed 1000 units. Ensure there are no missing values.,"expect_column_sum_to_be_between(column=""prescription_amount"", min_value=None, max_value=1000),expect_column_values_to_not_be_null(column=""prescription_amount"")","expect_column_sum_to_be_between(column=""prescription_amount"", min_value=0, max_value=1000),expect_column_values_to_not_be_null(column=""prescription_amount"")ıldığı",0.9411764705882353,0.8979591836734694,0.9411764705882353,93.50761925543668
For field 'sales_date': Ensure the expect column value lengths to be between; Ensure this field matches the type 'date' and contains values in chronological order.,"expect_column_value_lengths_to_be_between(column=""sales_date"", min_value=10, max_value=10),expect_column_values_to_be_of_type(column=""sales_date"", type_=""date""),expect_column_values_to_be_increasing(column=""sales_date"")","expect_column_value_lengths_to_be_between(column=""sales_date"", min_value=10, max_value=30) # assuming 10 - 30 being a typical expected length, you can adjust these values according to requirement. expect_column_values_to_be_of_type(column=""sales_date"", type_=""date"") # assuming dates in ""YYYY-MM-DD"" formatexpect_column_values_to_be_increasing(column=""sales_date"") #assuming this assumes dates are sorted in ascending order, which is the natural order of a date column, but it's important to ensure it is correctly ascending instead of descending.  ## if there are any expected exceptions, handle them appropriately within theexpect_column_values_to_be_between(column=""sales_date"", min_value=""2019-05-01"", max_value=""2023-10-31"") # expecting values to be between two dates; in this case, 2019-05-01 and 2023-10-31.  ## note: in some cases, it may be necessary to implement more complex logic around expected exception handling, depending upon specific business requirements and constraints.  ## if the column values do not follow the natural ordering, they would need to be adjusted accordingly before expecting them to",0.33789954337899547,0.30414746543778803,0.33789954337899547,27.675691726525567
For field 'hire_date': Ensure the field adheres to the datetime format 'YYYY-MM-DD'. Ensure this field exists and contains valid datetime values.,"expect_column_to_exist(column=""hire_date""),expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_to_exist(column=""hire_date""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # Assuming hire_date is a datetime column, not a string.",0.6779661016949152,0.5964912280701755,0.5762711864406779,50.51515172040997
For field 'listing_date': Ensure this field matches the type 'date'. Validate that all dates are not in the future and fall within the last 5 years.,"expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_between(column=""listing_date"", min_value=""2018-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_between(column=""listing_date"", min_value=""1900-01-01"", max_value=""today - 1825 days""),expect_column_values_to_be_in_set(column=""listing_date"", value_set=[""2000-01-01"", ""2000-01-02"", ""2000-01-03"", ""2000-01-04"", ""2000-01-05""])  # For today 10 December 2023, value_set would be [""2023-12-10"", ""2023-12-11"", ""2023-12-12"", ""2023-12-13"", ""2023-12-14""]",0.5045045045045046,0.47706422018348627,0.5045045045045046,33.42659449935024
Check that the `json_data` column entries conform to the specified JSON schema for device readings.,"expect_column_values_to_match_json_schema(column=""json_data"", json_schema=""your_json_schema_here"")","expect_column_values_to_match_json_schema(column=""json_data"")",0.7692307692307693,0.7499999999999999,0.7692307692307693,51.54557772792994
"Ensure that the `billing_amount` column has a mean value between `$50` and `$500`, with no outliers exceeding `$1000`.","expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=500),expect_column_max_to_be_between(column=""billing_amount"", max_value=1000)","expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=500),expect_column_stddev_to_be_between(column=""billing_amount"", min_value=0, max_value=1000)",0.912280701754386,0.8363636363636363,0.912280701754386,85.31179527911432
Confirm that the `score` column has a minimum of 5 rows and does not contain negative values.,"expect_table_row_count_to_be_between(min_value=5),expect_column_min_to_be_between(column=""score"", min_value=0)","expect_column_values_to_be_between(column=""score"", min_value=5, max_value=None),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=None)",0.6938775510204083,0.5106382978723405,0.6938775510204083,51.907067588848165
"Ensure the `file_size` for the `logs.txt` file falls within the defined range of 1KB to 10MB, and the content matches the specified header format.","expect_file_size_to_be_between(file_name=""logs.txt"", min_value=1024, max_value=10485760),expect_file_to_have_valid_table_header(file_name=""logs.txt"")","expect_file_size_to_be_between(file_path=""logs.txt"", min_value=1024, max_value=1000000),expect_file_to_match_regex(file_path=""logs.txt"", regex=r""^#.*/#"")",0.7407407407407407,0.5769230769230769,0.7407407407407407,62.23032041522952
For field 'product_name': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 255. Ensure this field exists.,"expect_column_to_exist(column=""product_name""),expect_column_value_lengths_to_be_between(column=""product_name"", min_value=0, max_value=255),expect_column_values_to_be_of_type(column=""product_name"", type_=""text"")","expect_column_to_exist(column=""product_name""),expect_column_values_to_be_of_type(column=""product_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""product_name"", min_value=0, max_value=255)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
Verify that the `delivery_date` column contains dates that are not earlier than the `order_date` column.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")",1.0,1.0,1.0,100.00000000000004
For field 'treatment_date': Ensure the field matches the type 'datetime'. Validate that it conforms to the format '%Y-%m-%d' and is not a future date.,"expect_column_values_to_be_of_type(column=""treatment_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""treatment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""treatment_date"")","expect_column_values_to_be_of_type(column=""treatment_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""treatment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""treatment_date"")  # Assuming the ""datetime"" library is available for Python, you can use this line to validate that the values are parseable, instead of using the `datetime` type as an additional validation step.",0.6730769230769229,0.6470588235294117,0.6730769230769229,65.31693405978729
"For the `delivery_status` field, ensure it contains only values from the set `['Pending', 'In Transit', 'Delivered']`.","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'In Transit', 'Delivered'])","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'In Transit', 'Delivered'])",1.0,1.0,1.0,100.00000000000004
Ensure the table contains exactly `12` rows representing monthly usage data. Validate that the `customer_id` column exists.,"expect_table_row_count_to_equal(value=12),expect_column_to_exist(column=""customer_id"")","expect_table_row_count_to_equal(12),expect_table_columns_to_match_set(['customer_id'])",0.8000000000000002,0.5714285714285714,0.8000000000000002,49.7608342609375
"Verify that the `salary` column has a mean value of at least $50,000 and a maximum value not exceeding $150,000.","expect_column_mean_to_be_between(column=""salary"", min_value=50000),expect_column_max_to_be_between(column=""salary"", max_value=150000)","expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=150000)",0.7777777777777778,0.7058823529411765,0.7777777777777778,50.15364886326205
"In the `precipitation` column, check that the total precipitation recorded does not exceed 500 mm for any month.","expect_column_sum_to_be_between(column=""precipitation"", min_value=0, max_value=500)","expect_column_value_to_be_between(column=""precipitation"", min_value=None, max_value=500)",0.8571428571428571,0.6923076923076923,0.8571428571428571,81.66920319485294
"Confirm that the `stock_quantity` column contains integer values greater than or equal to zero, with no null values allowed.","expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_greater_than(column=""stock_quantity"", value=0),expect_column_values_to_not_be_null(column=""stock_quantity"")",0.9014084507042254,0.8115942028985507,0.676056338028169,83.82761945267714
Confirm that the `order_id` column is unique and matches the format 'ORD-XXXX' where 'X' is a digit.,"expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_match_regex(column=""order_id"", regex=r""^ORD-\d{4}$"")","expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_match_regex(column=""order_id"", regex=r""^\d{4}$"")",0.9777777777777777,0.9302325581395349,0.9777777777777777,95.2903250942411
For field 'last_modified': Ensure the field matches the type 'datetime'. Validate that all entries in (last_modified) conform to the format '%Y-%m-%dT%H:%M:%S'. Ensure this field exists.,"expect_column_to_exist(column=""last_modified""),expect_column_values_to_be_of_type(column=""last_modified"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""last_modified"", strftime_format=""%Y-%m-%dT%H:%M:%S"")","expect_column_to_exist(column=""last_modified""),expect_column_values_to_be_of_type(column=""last_modified"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""last_modified"", strftime_format=""%Y-%m-%dT%H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
Ensure the `premium_amount` column has a mean value greater than 0 and less than 10000. Validate that it is of type `float`.,"expect_column_mean_to_be_between(column=""premium_amount"", min_value=0, max_value=10000),expect_column_values_to_be_of_type(column=""premium_amount"", type_=""float"")","expect_column_mean_to_be_between(column=""premium_amount"", min_value=0.01, max_value=10000),expect_column_values_to_be_of_type(column=""premium_amount"", type_=""float"")",0.9818181818181818,0.9433962264150944,0.9818181818181818,95.81282631934458
For the 'total_amount' field: Ensure the field exists and matches the type 'decimal'. Validate that all values are between 0.01 and 9999.99.,"expect_column_to_exist(column=""total_amount""),expect_column_values_to_be_of_type(column=""total_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""total_amount"", min_value=0.01, max_value=9999.99)","expect_column_to_exist(column=""total_amount""),expect_column_values_to_be_of_type(column=""total_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""total_amount"", min_value=0.01, max_value=9999.99)",1.0,1.0,1.0,100.00000000000004
Check that the `username` and `email` combinations are unique across all user records.,"expect_compound_columns_to_be_unique(column_A=""username"", column_B=""email"")","expect_column_pair_values_to_be_unique(column_A=""username"", column_B=""email"")",0.8799999999999999,0.6956521739130435,0.8799999999999999,78.60992040996204
For field 'supplier_email': Ensure the field matches the type 'text'. Ensure that the values conform to a standard email format and do not exceed 255 characters.,"expect_column_values_to_be_of_type(column=""supplier_email"", type_=""text""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_value_lengths_to_be_between(column=""supplier_email"", min_value=0, max_value=255)","expect_column_values_to_be_of_type(column=""supplier_email"", type_=""text""),expect_column_value_lengths_to_be_between(column=""supplier_email"", min_value=1, max_value=255),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9767441860465116,0.9285714285714286,0.627906976744186,97.17982910896347
Verify that the `json_data` column contains valid JSON objects and conforms to the required JSON schema.,"expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=required_json_schema)","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=YOUR_SCHEMA)",0.9361702127659574,0.888888888888889,0.9361702127659574,89.30571356198757
"Confirm that the standard deviation of the `discount_percentage` column is below 10%, indicating consistency in discount offerings.","expect_column_stdev_to_be_between(column=""discount_percentage"", min_value=0, max_value=0.10)","expect_column_stdev_to_be_between(column=""discount_percentage"", min_value=0, max_value=10)",0.967741935483871,0.896551724137931,0.967741935483871,94.20254600938034
"For the `job_title` in HRMS, ensure string lengths are between 1 and 50 characters and contain no special characters.","expect_column_value_lengths_to_be_between(column=""job_title"", min_value=1, max_value=50),expect_column_values_to_not_match_regex(column=""job_title"", regex=r""[^\w\s]"")","expect_column_value_lengths_to_be_between(column=""job_title"", min_value=1, max_value=50),expect_column_values_to_not_match_regex(column=""job_title"", regex=r"".*"")",0.9655172413793104,0.9642857142857143,0.9655172413793104,87.82616860673166
Check if the `temperature_reading` values are within the range of -50 to 150 degrees Celsius and are arranged in increasing order.,"expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150),expect_column_values_to_be_increasing(column=""temperature_reading"")","expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150),expect_column_values_to_be_increasing(column=""temperature_reading"")",1.0,1.0,1.0,100.00000000000004
Check that the `blood_pressure` column values are within the range of `0 to 300`.,"expect_column_values_to_be_between(column=""blood_pressure"", min_value=0, max_value=300)","expect_column_values_to_be_between(column=""blood_pressure"", min_value=0, max_value=300)",1.0,1.0,1.0,100.00000000000004
"Verify that the `property_type` and `listing_price` relationship holds true, where `Apartment` prices are less than `House` prices.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""listing_price"", column_B=""listing_price"", condition=""property_type = 'Apartment'"", condition_B=""property_type = 'House'"")","expect_column_pair_values_to_be_less_than(column_A=""listing_price"", column_B=""property_type"", value_B=""Apartment""),expect_column_pair_values_to_be_greater_than(column_A=""listing_price"", column_B=""property_type"", value_B=""House"")",0.7692307692307692,0.47619047619047616,0.6153846153846153,49.72666674683518
For the `user_age` field: Ensure all values are within the range of `13` to `120` and that they are arranged in increasing order.,"expect_column_values_to_be_between(column=""user_age"", min_value=13, max_value=120),expect_column_values_to_be_increasing(column=""user_age"")","expect_column_values_to_be_between(column=""user_age"", min_value=13, max_value=120),expect_column_values_to_be_increasing(column=""user_age"")",1.0,1.0,1.0,100.00000000000004
For the `sender_address` field: Verify that the address format matches the specified pattern and the field is not null.,"expect_column_values_to_not_be_null(column=""sender_address""),expect_column_values_to_match_regex(column=""sender_address"", regex=r""^[\d\w\s.,-]+$"")","expect_column_to_exist(column=""sender_address""),expect_column_values_to_be_of_type(column=""sender_address"", type_=""text""),expect_column_values_to_not_be_null(column=""sender_address"")ılmaktadır",0.6545454545454547,0.5660377358490566,0.5818181818181819,56.204132971139764
"For file 'election_results.csv': Ensure the file exists. Ensure it has valid headers: 'voter_id', 'candidate_id', 'timestamp'.","expect_file_to_exist(file_path=""election_results.csv""),expect_file_to_have_valid_table_header(file_path=""election_results.csv"", expected_header_list=[""voter_id"", ""candidate_id"", ""timestamp""])","expect_file_to_exist(file=""election_results.csv""),expect_file_to_have_valid_table_header(file=""election_results.csv"", expected_table_header=[""voter_id"", ""candidate_id"", ""timestamp""])",0.9285714285714286,0.7777777777777779,0.9285714285714286,84.17056439862525
Ensure that the sum of the `fees` column matches the expected total of 5000 for all cases. Validate that this field exists.,"expect_column_sum_to_be_between(column=""fees"", min_value=5000, max_value=5000),expect_column_to_exist(column=""fees"")","expect_column_to_exist(column=""fees""),expect_column_sum_to_equal(column=""fees"", value=5000)",0.8,0.6060606060606061,0.5714285714285715,63.8404875669664
"For the `request_status`: Ensure values are not null and belong to the set ['Pending', 'Completed', 'Denied'].","expect_column_values_to_not_be_null(column=""request_status""),expect_column_values_to_be_in_set(column=""request_status"", value_set=['Pending', 'Completed', 'Denied'])","expect_column_values_to_not_be_null(column=""request_status""),expect_column_values_to_be_in_set(column=""request_status"", value_set=['Pending', 'Completed', 'Denied'])átky",0.9803921568627451,0.9795918367346939,0.9803921568627451,98.22938874664823
Ensure the `match_duration` column contains values that are greater than or equal to 60 minutes.,"expect_column_values_to_be_greater_than(column=""match_duration"", value=60)","expect_column_values_to_be_between(column=""match_duration"", min_value=60)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
Check that the `diagnosis_code` column only contains values from the approved set of `ICD-10` codes.,"expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=approved_icd10_codes)","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=approved_icd_10_codes)",0.9032258064516129,0.8275862068965518,0.9032258064516129,85.92899528285
For field 'subscriber_id': Ensure this field exists. Ensure the field matches the type 'integer'. Ensure all values in 'subscriber_id' are unique and not null.,"expect_column_to_exist(column=""subscriber_id""),expect_column_values_to_be_of_type(column=""subscriber_id"", type_=""int""),expect_column_values_to_not_be_null(column=""subscriber_id""),expect_column_values_to_be_unique(column=""subscriber_id"")","expect_column_to_exist(column=""subscriber_id""),expect_column_values_to_be_of_type(column=""subscriber_id"", type_=""integer""),expect_column_values_to_be_unique(column=""subscriber_id""),expect_column_values_to_not_be_null(column=""subscriber_id"")",0.9736842105263158,0.9459459459459459,0.8947368421052632,97.15003449158377
Ensure the `sensor_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""sensor_id""),expect_column_values_to_not_be_null(column=""sensor_id"")","expect_column_to_exist(column=""sensor_id""),expect_column_values_to_be_unique(column=""sensor_id""),expect_column_values_to_not_be_null(column=""sensor_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
"Ensure the `shipment_status` column contains only values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""shipment_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_be_in_set(column=""shipment_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
"Ensure the 'listing_price' column contains values within the range of $50,000 to $5,000,000. Ensure no null values exist in this column.","expect_column_values_to_be_between(column=""listing_price"", min_value=50000, max_value=5000000),expect_column_values_to_not_be_null(column=""listing_price"")","expect_column_values_to_be_between(column=""listing_price"", min_value=50000, max_value=5000000),expect_column_values_to_not_be_null(column=""listing_price"")",1.0,1.0,1.0,100.00000000000004
For the `likes` and `shares` columns: Ensure that the sum of these two columns matches the expected total engagement for each post. Validate that both fields exist.,"expect_column_to_exist(column=""likes""),expect_column_to_exist(column=""shares""),expect_multicolumn_sum_to_equal(column_list=[""likes"", ""shares""], sum=expected_total_engagement)","expect_table_column_sum_to_match(column=""likes""),expect_table_column_sum_to_match(column=""shares""),expect_column_to_exist(column=""likes""),expect_column_to_exist(column=""shares"")",0.7547169811320756,0.5098039215686274,0.5660377358490566,59.833491868986876
For field 'sent_time': Ensure the field matches the type 'timestamp'. Ensure values in (sent_time) are not in the future and follow the format 'YYYY-MM-DD HH:MM:SS'. Ensure this field exists.,"expect_column_to_exist(column=""sent_time""),expect_column_values_to_be_of_type(column=""sent_time"", type_=""timestamp""),expect_column_values_to_be_between(column=""sent_time"", min_value=""1970-01-01 00:00:00"", max_value=""now""),expect_column_values_to_match_regex(column=""sent_time"", regex=r""^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$"")","expect_column_to_exist(column=""sent_time""),expect_column_values_to_be_of_type(column=""sent_time"", type_=""timestamp""),expect_column_values_to_be_between(column=""sent_time"", min_value=None, max_value=None)  # As this column's values must not be in the future, this min_value and max_value condition should not be defined.",0.5762711864406779,0.5172413793103448,0.5762711864406779,44.495379366925846
For field 'customer_id': Ensure the field is required (not null). Ensure values in 'customer_id' must exist in the 'customers' table.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_in_set(column=""customer_id"", value_set=customers_table_customer_ids)","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_in_set(column=""customer_id"", value_set=customers_table_values)",0.9411764705882353,0.9387755102040817,0.9411764705882353,93.25730884305308
For field 'email_thread_id': Ensure the field matches the type 'text'. Ensure values in (email_thread_id) are unique and not null. Ensure this field exists.,"expect_column_to_exist(column=""email_thread_id""),expect_column_values_to_not_be_null(column=""email_thread_id""),expect_column_values_to_be_unique(column=""email_thread_id""),expect_column_values_to_be_of_type(column=""email_thread_id"", type_=""text"")","expect_column_to_exist(column=""email_thread_id""),expect_column_values_to_not_be_null(column=""email_thread_id""),expect_column_values_to_be_of_type(column=""email_thread_id"", type_=""text""),expect_column_values_to_be_unique(column=""email_thread_id"")",1.0,0.975609756097561,0.8809523809523809,99.73579689909135
For field 'latitude' and 'longitude': Ensure both fields exist. Validate that the values in (latitude) range from -90 to 90 and in (longitude) from -180 to 180.,"expect_column_to_exist(column=""latitude""),expect_column_to_exist(column=""longitude""),expect_column_values_to_be_between(column=""latitude"", min_value=-90, max_value=90),expect_column_values_to_be_between(column=""longitude"", min_value=-180, max_value=180)","expect_column_to_exist(column=""latitude""),expect_column_to_exist(column=""longitude""),expect_column_values_to_be_between(column=""latitude"", min_value=-90, max_value=90),expect_column_values_to_be_between(column=""longitude"", min_value=-180, max_value=180)",1.0,1.0,1.0,100.00000000000004
Ensure the standard deviation of the `results_score` column is below 15 to confirm consistent results across experiments.,"expect_column_stdev_to_be_between(column=""results_score"", min_value=None, max_value=15)","expect_column_stdev_to_be_between(column=""results_score"", min_value=None, max_value=15)",1.0,1.0,1.0,100.00000000000004
"For field `device_status`: Ensure the field contains only distinct values matching `['active', 'inactive', 'malfunction']`.","expect_column_distinct_values_to_equal_set(column=""device_status"", value_set=['active', 'inactive', 'malfunction'])","expect_column_distinct_values_to_match_set(column=""device_status"", value_set=['active', 'inactive','malfunction'])",0.9333333333333333,0.8571428571428571,0.9333333333333333,92.10500207490826
For field 'price_history': Ensure the field exists and matches the type 'text'. Validate that the values in (price_history) contain a valid JSON format.,"expect_column_to_exist(column=""price_history""),expect_column_values_to_be_of_type(column=""price_history"", type_=""text""),expect_column_values_to_be_json_parseable(column=""price_history"")","expect_column_to_exist(column=""price_history""),expect_column_values_to_be_of_type(column=""price_history"", type_=""text""),expect_column_values_to_match_json_schema(column=""price_history"", schema=""valid JSON format"")",0.8709677419354839,0.7999999999999999,0.8709677419354839,81.97301247784299
"For the field 'category': Ensure it contains only distinct values from the predefined list ['Action', 'Strategy', 'Puzzle']. No null values should be present.","expect_column_values_to_be_in_set(column=""category"", value_set=['Action', 'Strategy', 'Puzzle']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=[""Action"", ""Strategy"", ""Puzzle""]),expect_column_values_to_not_be_null(column=""category""),expect_column_values_to_be_unique(column=""category"")",0.8518518518518519,0.846153846153846,0.8518518518518519,59.35979669633742
"Verify that the `party_affiliation` field only includes values from the set: ['Democrat', 'Republican', 'Independent'].","expect_column_values_to_be_in_set(column=""party_affiliation"", value_set=['Democrat', 'Republican', 'Independent'])","expect_column_values_to_be_in_set(column=""party_affiliation"", value_set=['Democrat', 'Republican', 'Independent'])",1.0,1.0,1.0,100.00000000000004
For field 'research_topic': Ensure the field can be null. Ensure the length of 'research_topic' is between 3 and 100 characters.,"expect_column_values_to_be_null(column=""research_topic""),expect_column_value_lengths_to_be_between(column=""research_topic"", min_value=3, max_value=100)","expect_column_to_exist(column=""research_topic""),expect_column_values_to_be_null(column=""research_topic""),expect_column_value_lengths_to_be_between(column=""research_topic"", min_value=3, max_value=100)",0.8771929824561403,0.8727272727272727,0.8771929824561403,75.87949321646191
Ensure the `customer_age` values are within the range of `18` to `100` and correspond to actual ages.,"expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=100)","expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure all entries in the `guest_name` column have a minimum length of 2 characters and a maximum of 100 characters.,"expect_column_value_lengths_to_be_between(column=""guest_name"", min_value=2, max_value=100)","expect_column_value_lengths_to_be_between(column=""guest_name"", min_value=2, max_value=100),expect_column_values_to_not_be_null(column=""guest_name"")",0.761904761904762,0.7499999999999999,0.761904761904762,58.5357651046718
Verify that the `threat_level` column values are within the range of 1 to 5.,"expect_column_values_to_be_between(column=""threat_level"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""threat_level"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
Ensure the `transport_data.json` file contains valid JSON formatting and has no more than 5000 lines.,"expect_file_to_be_valid_json(file_path=""transport_data.json""),expect_file_line_regex_match_count_to_be_between(file_path=""transport_data.json"", min_value=0, max_value=5000)","expect_file_to_exist(file_path=""transport_data.json""),expect_file_size_to_be_between(file_path=""transport_data.json"", min_value=1, max_value=5000)  # Assuming there are more than 5000 lines of JSON file, change min_value as appropriate.",0.6944444444444445,0.5714285714285715,0.638888888888889,64.45069354485578
"For field 'user_email': Ensure the field is required (not null). Ensure values in 'user_email' match the regex pattern '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$'. Ensure this field exists.","expect_column_to_exist(column=""user_email""),expect_column_values_to_not_be_null(column=""user_email""),expect_column_values_to_match_regex(column=""user_email"", regex=r""^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$"")","expect_column_to_exist(column=""user_email""),expect_column_values_to_not_be_null(column=""user_email""),expect_column_values_to_match_regex(column=""user_email"", regex=r""^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `customer_email` column matches the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$' and does not contain duplicates.","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""customer_email"")","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")  # Matches an email address, e.g. ""example@example.com""",0.75,0.7096774193548389,0.75,73.75761145085669
"For field 'view_count': Ensure values are of type 'integer'. Ensure there are no missing values. The sum of view counts should not exceed 1,000,000.","expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_not_be_null(column=""view_count""),expect_column_sum_to_be_between(column=""view_count"", min_value=0, max_value=1000000)","expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_not_be_null(column=""view_count""),expect_column_sum_to_be_between(column=""view_count"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
Ensure the file containing `hotel_reviews` has no more than 500 lines and that it includes valid table headers.,"expect_file_line_regex_match_count_to_be_between(file_path=""hotel_reviews"", min_value=0, max_value=500),expect_file_to_have_valid_table_header(file_path=""hotel_reviews"")","expect_file_line_regex_match_count_to_be_between(min_value=0, max_value=500)  # This ensures the file does not exceed 500 lines.  # Note: The minimum value of 0 can be changed as per requirement.",0.4848484848484848,0.40625,0.4848484848484848,42.39588103042961
For the `likes_count` field: Ensure this column contains only integer values that are greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_be_between(column=""likes_count"", min_value=0)","expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=None)",0.6666666666666667,0.5945945945945946,0.6153846153846154,37.75385873663765
For field 'temperature': Ensure the field is required (not null). Ensure the field matches the type 'float'. Ensure values are within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_to_exist(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",0.923076923076923,0.8571428571428572,0.923076923076923,87.84619500665347
Verify that the `watch_time_minutes` column contains only non-negative values and conforms to the type 'integer'.,"expect_column_values_to_be_between(column=""watch_time_minutes"", min_value=0),expect_column_values_to_be_of_type(column=""watch_time_minutes"", type_=""int"")","expect_column_values_to_be_between(column=""watch_time_minutes"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""watch_time_minutes"", type_=""int"")",0.9454545454545454,0.9056603773584904,0.9454545454545454,88.31730412242564
For field 'vehicle_id': Ensure this field is required (not null). Ensure values in (vehicle_id) must exist in the vehicles database. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""vehicle_id""),expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_be_in_set(column=""vehicle_id"", value_set=vehicles_database)","expect_column_to_exist(column=""vehicle_id""),expect_column_values_to_not_be_null(column=""vehicle_id""),expect_column_values_to_be_in_set(column=""vehicle_id"", value_set=vehicles_database_vehicles_list),expect_column_values_to_be_unique(column=""vehicle_id"")",0.88,0.8767123287671234,0.7466666666666666,76.72724288037101
For the `timestamp` field: Validate that all entries match the ISO 8601 format 'YYYY-MM-DDTHH:MM:SSZ' and are in the past.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"") ","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_in_set(column=""timestamp"", value_set=previous_date_values)  # Replace with the previous date values # for example if previous date was 2023-10-05 then you should replace with ""2023-10-05"" # for each previous date for the given timestamp column.",0.5393258426966292,0.5057471264367815,0.5393258426966292,49.26664872075804
Verify that the `price` column contains numeric values greater than zero. Ensure there are no null values in this field.,"expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=None),expect_column_values_to_not_be_null(column=""price"")","expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_greater_than(column=""price"", value=0),expect_column_values_to_not_be_null(column=""price"")",0.6909090909090909,0.5283018867924527,0.6545454545454547,50.119810673673385
"Ensure the `call_type` column contains only values from the specified set `['Incoming', 'Outgoing']`.","expect_column_values_to_be_in_set(column=""call_type"", value_set=['Incoming', 'Outgoing'])","expect_column_values_to_be_in_set(column=""call_type"", value_set=['Incoming', 'Outgoing'])",1.0,1.0,1.0,100.00000000000004
For field 'election_date': Ensure the field is required (not null). Ensure the field matches the format 'YYYY-MM-DD'. Ensure this field exists.,"expect_column_to_exist(column=""election_date""),expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_match_strftime_format(column=""election_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""election_date""),expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_match_strftime_format(column=""election_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"For the table 'games': Ensure the existence of columns 'game_id', 'genre', and 'release_date'. Validate that 'release_date' is in the past.","expect_table_columns_to_match_set(column_set=[""game_id"", ""genre"", ""release_date""]),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_decreasing(column=""release_date"")","expect_column_to_exist(column=""game_id""),expect_column_to_exist(column=""genre""),expect_column_to_exist(column=""release_date""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_less_than(column=""release_date"", value=""today"")",0.7297297297297298,0.5555555555555556,0.7297297297297298,54.305759155466134
"For the `view_count` column, confirm that all values are non-negative integers and that the data follows a log-normal distribution.","expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)","expect_column_values_to_be_between(column=""view_count"", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)",0.8266666666666667,0.767123287671233,0.8,63.47416899887337
"For the `employee_status` column, ensure all values are from the set `['Active', 'Inactive', 'On Leave']` and that no values are null.","expect_column_values_to_be_in_set(column=""employee_status"", value_set=['Active', 'Inactive', 'On Leave']),expect_column_values_to_not_be_null(column=""employee_status"")","expect_column_values_to_be_in_set(column=""employee_status"", value_set=[""Active"", ""Inactive"", ""On Leave""]),expect_column_values_to_not_be_null(column=""employee_status"")",1.0,1.0,1.0,79.07336054721813
Ensure that the `hashtag` column contains no missing values and includes only distinct hashtags.,"expect_column_values_to_not_be_null(column=""hashtag""),expect_column_values_to_be_unique(column=""hashtag"")","expect_column_values_to_not_be_null(column=""hashtag""),expect_column_values_to_be_unique(column=""hashtag"")",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` column is populated with unique identifiers and does not contain any duplicate values.,"expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",0.6428571428571429,0.6153846153846153,0.6428571428571429,44.51289671290764
For the 'username' field: Ensure the field exists and matches the type 'text'. Validate that values must have a length between 3 and 20 characters and do not contain special characters.,"expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=20),expect_column_values_to_not_match_regex(column=""username"", regex=r""[^a-zA-Z0-9]"")","expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=20),expect_column_values_to_not_match_regex(column=""username"", regex=r""[^a-zA-Z0-9_]""]  # This assumes the special characters will match exactly one character, and not a substring, of the expected regex.",0.8392857142857142,0.8363636363636363,0.8392857142857142,80.49131754606192
For field 'response_time': Ensure the field matches the type 'decimal'. Ensure the field contains values less than or equal to 1000. Ensure this field exists.,"expect_column_to_exist(column=""response_time""),expect_column_values_to_be_of_type(column=""response_time"", type_=""decimal""),expect_column_values_to_be_less_than(column=""response_time"", value=1000)","expect_column_to_exist(column=""response_time""),expect_column_values_to_be_of_type(column=""response_time"", type_=""decimal""),expect_column_values_to_be_less_than(column=""response_time"", value=1000)илася",1.0,1.0,1.0,98.62035921447831
Ensure the `created_at` field contains valid date formats and that all entries are in chronological order.,"expect_column_values_to_be_dateutil_parseable(column=""created_at""),expect_column_values_to_be_increasing(column=""created_at"")","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""created_at"")",0.6956521739130435,0.5909090909090908,0.6956521739130435,55.29538798663793
"For field 'username': Ensure values are unique, contain no special characters, and are between 3 to 15 characters in length.","expect_column_values_to_be_unique(column=""username""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15),expect_column_values_to_not_match_regex(column=""username"", regex=r""[^a-zA-Z0-9]"")","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_not_match_regex(column=""username"", regex=r""[^a-zA-Z0-9]""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15)",1.0,0.972972972972973,0.6052631578947368,99.07254279335388
"Verify that the `premium_amount` column values are within the range of $100 to $10,000.","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000)","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For field `transaction_value`: Ensure the mean transaction value is greater than 0 and less than 1000000.,"expect_column_mean_to_be_between(column=""transaction_value"", min_value=0, max_value=1000000)","expect_column_mean_to_be_between(column=""transaction_value"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
Verify that the `likes` and `shares` columns are non-negative integers and that the total interactions (likes + shares) exceed a specified threshold.,"expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""shares"", type_=""int""),expect_column_values_to_be_between(column=""shares"", min_value=0, max_value=None),expect_multicolumn_sum_to_equal(columns=[""likes"", ""shares""], threshold_value=specified_threshold)","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None),expect_column_values_to_be_between(column=""shares"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""likes + shares"", min_value=threshold, max_value=None)",0.7428571428571429,0.6407766990291263,0.6857142857142857,46.98392760245089
"For the `timestamp` field, confirm that all entries conform to the ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `end_date` for service plans is always greater than the `start_date` for each customer record.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")","expect_column_values_to_be_greater_than(column=""end_date"", value=column=""start_date"")",0.8125000000000001,0.4000000000000001,0.8125000000000001,54.00131969612223
Ensure the `category_id` column contains unique identifiers that correspond to existing categories in `categories_table`.,"expect_column_values_to_be_in_set(column=""category_id"", value_set=existing_categories_in_categories_table)","expect_column_values_to_be_unique(column=""category_id""),expect_column_values_to_be_in_set(column=""category_id"", value_set=categories_table.category_id)ávající",0.6818181818181819,0.5714285714285714,0.6363636363636364,49.099978358377115
"Ensure the `category` column contains only values from the specified set ['Electronics', 'Clothing', 'Home'].","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
Verify that the average transit time in the `transit_duration` column is between 1 and 14 days.,"expect_column_mean_to_be_between(column=""transit_duration"", min_value=1, max_value=14)","expect_column_mean_to_be_between(column=""transit_duration"", min_value=1, max_value=14)",1.0,1.0,1.0,100.00000000000004
Verify that the `date_of_birth` column has date entries formatted as 'YYYY-MM-DD' and that all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""date_of_birth"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_less_than(column=""date_of_birth"", value=datetime.datetime.now())",0.7352941176470588,0.6969696969696971,0.7352941176470588,58.595970279609
Ensure the number of rows in `customer_accounts` is greater than 1000 to meet the business requirement.,"expect_table_row_count_to_be_greater_than(table=""customer_accounts"", value=1000)","expect_table_row_count_to_be_between(table_name=""customer_accounts"", min_value=1001)",0.7407407407407408,0.48000000000000004,0.7407407407407408,61.25926661657884
For `assignment_due_date`: Ensure all dates are in the past and conform to the format 'YYYY-MM-DD'.,"expect_column_values_to_be_dateutil_parseable(column=""assignment_due_date""),expect_column_values_to_match_strftime_format(column=""assignment_due_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""assignment_due_date"")","expect_column_values_to_match_strftime_format(column=""assignment_due_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""assignment_due_date""),expect_column_values_to_be_greater_than(column=""assignment_due_date"", value=""assignment_due_date"")  # assuming you're storing a previous due date as a string, or use whatever value makes sense in your context.",0.7272727272727273,0.7010309278350515,0.5050505050505051,68.91301119962571
Ensure that the `delivery_date` is greater than the `order_date` for all records in the shipments table.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `last_contact_date` column contains datetime values formatted as 'YYYY-MM-DD HH:MM:SS' that can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""last_contact_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""last_contact_date"")","expect_column_values_to_be_dateutil_parseable(column=""last_contact_date"")",0.5365853658536585,0.5128205128205129,0.5365853658536585,14.70964673929769
For the `platform` column: Confirm that all entries match the regular expression `^(PC|PS4|Xbox)$`.,"expect_column_values_to_match_regex(column=""platform"", regex=r""^(PC|PS4|Xbox)$"")","expect_column_values_to_match_regex(column=""platform"", regex=r""^(PC|PS4|Xbox)$"")",1.0,1.0,1.0,100.00000000000004
For the `account_number` column: Ensure all entries are unique and match the regex pattern '^[0-9]{10}$'.,"expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^[0-9]{10}$"")","expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^[0-9]{10}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `student_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'polling_station_data': Ensure that every entry is a valid JSON object and adheres to the defined schema, especially for geographic data.","expect_column_values_to_be_json_parseable(column=""polling_station_data""),expect_column_values_to_match_json_schema(column=""polling_station_data"", schema=""defined_schema_here"")","expect_column_values_to_be_json_parseable(column=""polling_station_data""),expect_column_values_to_match_json_schema(column=""polling_station_data"")  # Define schema for geographic data, for instance, for GPS coordinates.",0.8275862068965517,0.7857142857142856,0.8275862068965517,77.15998039869757
For field 'json_schema': Ensure the field exists. Validate that the values in 'json_schema' accurately conform to the expected JSON structure and data types as defined in the schema.,"expect_column_to_exist(column=""json_schema""),expect_column_values_to_match_json_schema(column=""json_schema"")","expect_column_to_exist(column=""json_schema""),expect_column_values_to_match_json_schema(column=""json_schema"", schema={})  # Replace { } with your actual JSON schema.",0.8292682926829268,0.8205128205128205,0.8292682926829268,69.95977946278121
"Ensure the `fraud_score` column values are constrained between 0 and 100, with no missing entries.","expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""fraud_score"")","expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""fraud_score"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `data_source` column does not contain any values outside the set `['Survey', 'Experiment', 'Observation']`.","expect_column_values_to_be_in_set(column=""data_source"", value_set=['Survey', 'Experiment', 'Observation'])","expect_column_values_to_be_in_set(column=""data_source"", value_set=['Survey', 'Experiment', 'Observation'])",1.0,1.0,1.0,100.00000000000004
For field `customer_id`: Ensure the field exists. Validate that all values are unique and match the type 'integer'.,"expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""integer"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")",0.9642857142857143,0.9629629629629629,0.9642857142857143,96.53467555444786
"Ensure the `email` column matches the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$` for valid email addresses.","expect_column_values_to_match_regex(column=""email"", regex=""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+)\.([a-zA-Z]{2,})$"")",0.9767441860465117,0.9268292682926829,0.9767441860465117,71.61162128358698
Ensure that the `route` column does not contain any entries matching the pattern `^.*(error|invalid|canceled).*`.,"expect_column_values_to_not_match_regex(column=""route"", regex=r""^.*(error|invalid|canceled).*"")","expect_column_values_to_not_match_regex(column=""route"", regex=r""^(error|invalid|canceled).*"")",1.0,1.0,1.0,90.32226940590644
Verify that the `hire_date` column values are in the correct datetime format `'%Y-%m-%d %H:%M:%S'` and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")",1.0,1.0,1.0,90.5619259480469
For the `court_date` field: Ensure all dates are in the range of the current year to five years in the future.,"expect_column_values_to_be_between(column=""court_date"", min_value=""2023-01-01"", max_value=""2028-12-31"")","expect_column_values_to_be_dateutil_parseable(column=""court_date""),expect_column_values_to_be_between(column=""court_date"", min_value=""2023-01-01"", max_value=""2028-12-31""),expect_column_values_to_be_decreasing(column=""court_date"")  # assuming the dates will be decreasing over time.",0.5846153846153846,0.5714285714285715,0.5846153846153846,44.0291607878198
Ensure the `product_name` field is of type 'text' and does not contain null values.,"expect_column_values_to_be_of_type(column=""product_name"", type_=""text""),expect_column_values_to_not_be_null(column=""product_name"")","expect_column_values_to_be_of_type(column=""product_name"", type_=""text""),expect_column_values_to_not_be_null(column=""product_name"")",1.0,1.0,1.0,100.00000000000004
For field 'reply_to': Ensure that values in (reply_to) conform to standard email format using a regular expression. Ensure this field exists.,"expect_column_to_exist(column=""reply_to""),expect_column_values_to_match_regex(column=""reply_to"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""reply_to""),expect_column_values_to_match_regex(column=""reply_to"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `contract_duration_months` column is of type 'integer', contains no missing values, and that the average duration is at least 12 months.","expect_column_values_to_be_of_type(column=""contract_duration_months"", type_=""integer""),expect_column_values_to_not_be_null(column=""contract_duration_months""),expect_column_mean_to_be_between(column=""contract_duration_months"", min_value=12)","expect_column_to_exist(column=""contract_duration_months""),expect_column_values_to_be_of_type(column=""contract_duration_months"", type_=""int""),expect_column_values_to_not_be_null(column=""contract_duration_months""),expect_column_mean_to_be_between(column=""contract_duration_months"", min_value=12, max_value=None)",0.8470588235294119,0.8192771084337349,0.8470588235294119,73.92883309633534
For the `pickup_time` field: Validate that all datetime values follow the format '%Y-%m-%d %H:%M:%S'. The `pickup_time` must precede `delivery_time`.,"expect_column_values_to_match_strftime_format(column=""pickup_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""pickup_time"", column_B=""delivery_time"")","expect_column_values_to_match_strftime_format(column=""pickup_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""pickup_time"", column_B=""delivery_time"")",1.0,1.0,1.0,100.00000000000004
For field 'shipment_weight': Ensure the field matches the type 'decimal'. Ensure the field contains values greater than 0. Ensure this field exists.,"expect_column_to_exist(column=""shipment_weight""),expect_column_values_to_be_of_type(column=""shipment_weight"", type_=""decimal""),expect_column_values_to_be_between(column=""shipment_weight"", min_value=0, max_value=None)","expect_column_to_exist(column=""shipment_weight""),expect_column_values_to_be_of_type(column=""shipment_weight"", type_=""decimal""),expect_column_values_to_be_between(column=""shipment_weight"", min_value=0)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.13468812604467
Validate the `temperature_reading` column to ensure all values are within the range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature_reading"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature_reading"", min_value=-30, max_value=50)",1.0,1.0,1.0,100.00000000000004
Check that the combination of `state` and `city` columns is unique across all records.,"expect_compound_columns_to_be_unique(column_A=""state"", column_B=""city"")","expect_compound_columns_to_be_unique(column_A=""state"", column_B=""city"")",1.0,1.0,1.0,100.00000000000004
For field 'listing_date': Ensure the field exists. Ensure the field matches the type 'date'. Ensure values in (listing_date) are arranged in decreasing order.,"expect_column_to_exist(column=""listing_date""),expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_decreasing(column=""listing_date"")","expect_column_to_exist(column=""listing_date""),expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_decreasing(column=""listing_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `user_id` column does not contain any null values and consists of unique identifiers for each user.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `zip_code` column matches the regex pattern `^\\d{5}(-\\d{4})?$` for valid US ZIP codes.,"expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}(-\d{4})?$"")","expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\\d{5}(-\\d{4})?$"")",1.0,1.0,1.0,91.56565938905828
"For the 'discount' field, validate that values are between 0% and 50% and that all entries are not null.","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=0.5),expect_column_values_to_not_be_null(column=""discount"")","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=50),expect_column_values_to_not_be_null(column=""discount"")",0.9361702127659574,0.888888888888889,0.9361702127659574,94.86610352970624
For field 'case_number': Ensure this field is required (not null). Ensure values in (case_number) are unique.,"expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_unique(column=""case_number"")","expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_unique(column=""case_number"")",1.0,1.0,1.0,100.00000000000004
For field 'researcher_email': Ensure the field is required (not null). Ensure that 'researcher_email' matches the pattern of a valid email address.,"expect_column_values_to_not_be_null(column=""researcher_email""),expect_column_values_to_match_regex(column=""researcher_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_to_exist(column=""researcher_email""),expect_column_values_to_not_be_null(column=""researcher_email""),expect_column_values_to_match_regex(column=""researcher_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",0.6562500000000001,0.6451612903225806,0.6562500000000001,59.97233412500529
"Check that the `amenities` column contains valid JSON objects conforming to the schema {'parking': 'boolean', 'gym': 'boolean', 'pool': 'boolean'}.","expect_column_values_to_match_json_schema(column=""amenities"", schema={'parking': 'boolean', 'gym': 'boolean', 'pool': 'boolean'})","expect_column_values_to_match_json_schema(column=""amenities"", schema={'type': 'object', 'properties': {'parking': {'type': 'boolean'}, 'gym': {'type': 'boolean'}, 'pool': {'type': 'boolean'}},'required': ['parking', 'gym', 'pool']})",0.761904761904762,0.5499999999999999,0.761904761904762,43.047918551920176
Ensure the `phone_number` column matches the format `+(country_code) (number)` and contains no duplicates.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+\(\d{1,3}\) \d{7,15}$""),expect_column_values_to_be_unique(column=""phone_number"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^(\\+|\(?)([0-9]{1,4})[\.-]?([0-9]{2,14})[)\)]$""),expect_column_values_to_be_unique(column=""phone_number"")",0.7777777777777779,0.6923076923076923,0.7777777777777779,56.88934602479696
Validate that the distribution of `watch_hours` follows a normal distribution with a p-value greater than 0.05 in a Kolmogorov-Smirnov test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""watch_hours"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""watch_hours"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'json_data': Ensure the field matches the type 'string'. Validate that (json_data) is a valid JSON object and conforms to the specified schema. Ensure this field exists.,"expect_column_to_exist(column=""json_data""),expect_column_values_to_be_of_type(column=""json_data"", type_=""string""),expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=your_schema_here)","expect_column_to_exist(column=""json_data""),expect_column_values_to_be_of_type(column=""json_data"", type_=""string""),expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=specified_schema)",0.9647058823529412,0.9397590361445782,0.9647058823529412,94.91194801021555
Confirm that the `user_reviews` column does not contain any entries with a review length exceeding 500 characters.,"expect_column_value_lengths_to_be_between(column=""user_reviews"", min_value=0, max_value=500)","expect_column_value_lengths_to_be_between(column=""user_reviews"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
Verify that the `created_at` and `updated_at` timestamps in both health and CMS records are in the correct `datetime` format and have no missing values.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""updated_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""updated_at"")","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""updated_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""updated_at"")",1.0,1.0,1.0,100.00000000000004
"For field 'account_status': Ensure the field matches the type 'text'. Validate that values in (account_status) must exist in the list ['Active', 'Inactive', 'Suspended']. Ensure this field exists.","expect_column_to_exist(column=""account_status""),expect_column_values_to_be_of_type(column=""account_status"", type_=""text""),expect_column_values_to_be_in_set(column=""account_status"", value_set=['Active', 'Inactive', 'Suspended'])","expect_column_to_exist(column=""account_status""),expect_column_values_to_be_of_type(column=""account_status"", type_=""text""),expect_column_values_to_be_in_set(column=""account_status"", value_set=[""Active"", ""Inactive"", ""Suspended""])",1.0,1.0,1.0,86.20854454554733
"For field 'temperature_control': Ensure the field matches the type 'decimal'. Validate that values fall within the range of -20.0 to 25.0 degrees Celsius, ensuring compliance with product handling requirements.","expect_column_values_to_be_of_type(column=""temperature_control"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature_control"", min_value=-20.0, max_value=25.0)","expect_column_values_to_be_of_type(column=""temperature_control"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature_control"", min_value=-20.0, max_value=25.0)",1.0,1.0,1.0,100.00000000000004
For the `click_through_rate` column: Ensure that values are between 0% and 100%.,"expect_column_values_to_be_between(column=""click_through_rate"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""click_through_rate"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For field 'status_code': Ensure the column contains distinct values from the list ['Active', 'Inactive', 'Pending']. Validate that the field is not null.","expect_column_values_to_be_in_set(column=""status_code"", value_set=['Active', 'Inactive', 'Pending']),expect_column_values_to_not_be_null(column=""status_code"")","expect_column_values_to_be_in_set(column=""status_code"", value_set=['Active', 'Inactive', 'Pending']),expect_column_values_to_not_be_null(column=""status_code"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `grade` column has a mean value between 0 and 100, with at least 80% of entries above 50.","expect_column_mean_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_proportion_of_unique_values_to_be_between(column=""grade"", min_value=0.8, max_value=1.0)","expect_column_mean_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_proportion_of_unique_values_to_be_between(column=""grade"", min_value=0.8, max_value=1.0)",1.0,1.0,1.0,100.00000000000004
Verify that the median value of the `assignment_scores` column is above `75`.,"expect_column_median_to_be_between(column=""assignment_scores"", min_value=75)","expect_column_mean_to_be_greater_than(column=""assignment_scores"", threshold=75)",0.6666666666666666,0.36363636363636365,0.6666666666666666,59.095070812710155
Verify that the `address` field contains no missing values and conforms to the pattern of a valid address.,"expect_column_values_to_not_be_null(column=""address""),expect_column_values_to_match_regex(column=""address"", regex=r""^[\d\s\w.,-]+$"")","expect_column_to_exist(column=""address""),expect_column_values_to_not_be_null(column=""address""),expect_column_values_to_match_regex(column=""address"", regex=r""^[\da-z-\s]+,\s+\d{5}-\d{4}$"")",0.7636363636363637,0.6792452830188678,0.7272727272727273,58.74452478459999
For table 'media_assets': Ensure the column 'file_size' exists. Ensure that all 'file_size' values are within the range of 1KB to 10MB.,"expect_column_to_exist(column=""file_size""),expect_column_values_to_be_between(column=""file_size"", min_value=1024, max_value=10485760)","expect_column_to_exist(column=""file_size""),expect_column_values_to_be_between(column=""file_size"", min_value=1, max_value=10 * 1024 * 1024)",0.9130434782608695,0.8181818181818182,0.8695652173913043,84.29386172633308
For field `salary`: Ensure values are greater than zero. Ensure this field is required (not null).,"expect_column_values_to_be_greater_than(column=""salary"", threshold=0),expect_column_values_to_not_be_null(column=""salary"")","expect_column_values_to_be_between(column=""salary"", min_value=0),expect_column_values_to_not_be_null(column=""salary"")",0.85,0.7368421052631579,0.85,84.08470277448976
Ensure the `temperature` column values are within the range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)",1.0,1.0,1.0,100.00000000000004
Check the size of the `transaction_data.csv` file is between 1KB and 10MB and that it contains valid CSV formatting.,"expect_file_size_to_be_between(file_path=""transaction_data.csv"", min_value=1024, max_value=10485760),expect_file_to_have_valid_table_header(file_path=""transaction_data.csv"")","expect_file_size_to_be_between(min_value=1 * 1024, max_value=10 * 1024 * 1024),expect_file_to_be_valid_csv  # assuming that transaction_data.csv file is saved on local machine, this is just for information, actual validation needs to be done on production system before actually performing a financial transaction.",0.5185185185185185,0.30379746835443033,0.4444444444444444,37.53176095019496
Ensure the `election_date` field contains valid date formats and that all entries are in increasing chronological order.,"expect_column_values_to_be_dateutil_parseable(column=""election_date""),expect_column_values_to_be_increasing(column=""election_date"")","expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_increasing(column=""election_date"")",0.8500000000000001,0.7894736842105262,0.8500000000000001,76.07109690140504
"For the `status` column in the `transactions` table: Ensure values are restricted to ['Pending', 'Completed', 'Failed'] and are unique.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Pending"", ""Completed"", ""Failed""]),expect_column_values_to_be_unique(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Completed', 'Failed']),expect_column_values_to_be_unique(column=""status"")",1.0,1.0,1.0,77.96738277473784
"Ensure the `category` column contains only distinct values from the set `['Electronics', 'Clothing', 'Home Goods']`.","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods'])","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods'])",1.0,1.0,1.0,100.00000000000004
"For the `guest_info` JSON field: Validate that it is a valid JSON object containing keys 'guest_id', 'name', and 'email'.","expect_column_values_to_be_json_parseable(column=""guest_info""),expect_column_values_to_match_json_schema(column=""guest_info"", schema={""type"": ""object"", ""properties"": {""guest_id"": {""type"": ""string""}, ""name"": {""type"": ""string""}, ""email"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""guest_info""),expect_column_values_to_match_json_schema(column=""guest_info"", schema={'type': 'object', 'properties': {'guest_id': {'type':'string'}, 'name': {'type':'string'}, 'email': {'type':'string'}}})",1.0,1.0,1.0,49.84543828656854
Verify that the `inventory_count` column has a total row count that is equal to 1000.,"expect_column_sum_to_be_between(column=""inventory_count"", min_value=1000, max_value=1000)","expect_table_row_count_to_equal(column=""inventory_count"", value=1000)",0.5384615384615385,0.25,0.5384615384615385,37.727143782744015
For field 'interest_rate': Ensure this field matches the type 'decimal'. Validate that values fall within the range of 0.01 to 0.20.,"expect_column_values_to_be_of_type(column=""interest_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0.01, max_value=0.20)","expect_column_values_to_be_of_type(column=""interest_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0.01, max_value=0.20)",1.0,1.0,1.0,100.00000000000004
"For field 'course_id': Ensure that values in 'course_id' are from the set ['math101', 'eng202', 'cs303']. Confirm that this field contains no null values.","expect_column_values_to_be_in_set(column=""course_id"", value_set=['math101', 'eng202', 'cs303']),expect_column_values_to_not_be_null(column=""course_id"")","expect_column_values_to_be_in_set(column=""course_id"", value_set=['math101', 'eng202', 'cs303']),expect_column_values_to_not_be_null(column=""course_id"")",1.0,1.0,1.0,100.00000000000004
For field 'email_address': Ensure the field matches the type 'text'. Ensure this field is required (not null). Ensure the values in 'email_address' are unique and valid email formats.,"expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.989010989010989,0.9887640449438202,0.989010989010989,95.6050212289798
For field `subscriber_id`: Ensure the field is required (not null). Ensure values in `subscriber_id` are unique across the dataset.,"expect_column_values_to_not_be_null(column=""subscriber_id""),expect_column_values_to_be_unique(column=""subscriber_id"")","expect_column_to_exist(column=""subscriber_id""),expect_column_values_to_not_be_null(column=""subscriber_id""),expect_column_values_to_be_unique(column=""subscriber_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
"For field 'json_data': Ensure that all values in (json_data) are valid JSON objects and conform to the specified JSON schema, ensuring it's properly structured.","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=""your_json_schema_here"")","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={})  # replace with the actual schema",0.8627450980392156,0.816326530612245,0.8627450980392156,82.85990487948949
For the `data_collection_date`: Validate that all dates are formatted as `YYYY-MM-DD` and are within the last two years.,"expect_column_values_to_match_strftime_format(column=""data_collection_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""data_collection_date"", min_value=""2021-10-01"", max_value=""2023-10-01"")","expect_column_values_to_match_strftime_format(column=""data_collection_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""data_collection_date""),expect_column_values_to_be_between(column=""data_collection_date"", min_value=""2021-10-01"", max_value=""2023-10-01"")",0.8674698795180723,0.8641975308641976,0.8674698795180723,76.7412887694588
Check the distribution of `votes_cast` to ensure that the results pass the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""votes_cast"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""votes_cast"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"For the `course_code` column, ensure all values match the pattern `^[A-Z]{3}-[0-9]{3}$` and that no duplicates are present.","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$""),expect_column_values_to_be_unique(column=""course_code"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^([A-Z]{3}-[0-9]{3})$""),expect_column_values_to_be_unique(column=""course_code"")",1.0,1.0,1.0,92.11506631805882
Ensure the `product_id` column contains only distinct values that are numeric and match a predefined set of valid IDs.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_be_in_set(column=""product_id"", value_set=[/* predefined set of valid IDs */])","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_match_set(column=""product_id"", value_set=valid_id_set)  # Replace ""valid_id_set"" with the actual predefined set of valid IDs.",0.8470588235294116,0.7951807228915664,0.8470588235294116,76.81637671000927
Ensure the sum of `total_amount` in the `bookings` table is greater than 0.,"expect_column_sum_to_be_between(column=""total_amount"", min_value=0)","expect_column_sum_to_be_between(column=""total_amount"", min_value=0)",1.0,1.0,1.0,100.00000000000004
"Verify that the `price` field contains only positive decimal values within the range of [0.01, 10000].","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000),expect_column_values_to_be_in_set(column=""price"", value_set=[0.01, 10000])","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000)",0.6818181818181819,0.6666666666666666,0.6818181818181819,35.58189185373421
For field 'timestamp': Ensure this field cannot be null. Ensure all timestamps are in the correct format (ISO 8601) and validate that they fall within a specified range.,"expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_between(column=""timestamp"", min_value=""2020-01-01T00:00:00Z"", max_value=""2023-12-31T23:59:59Z"")","expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_between(column=""timestamp"", min_value=""2022-10-24T12:00:00.000000+00:00"", max_value=""2023-10-24T12:00:00.000000+00:00"")",0.7572815533980584,0.6930693069306931,0.7572815533980584,75.70499444396113
Confirm that the `policy_number` column contains unique entries with no duplicates.,"expect_column_values_to_be_unique(column=""policy_number"")","expect_column_values_to_be_unique(column=""policy_number"")",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_id` column contains only unique values and is of type 'text'. Ensure this field cannot be null.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,0.9666666666666667,0.8064516129032258,99.64092777538484
Check that the count of unique `department_id` values in the `employees` table matches the count of entries in the `departments` table.,"expect_column_unique_value_count_to_be_between(column=""department_id"", min_value=0, max_value=expect_table_row_count_to_equal_other_table(table=""departments""))","expect_table_row_count_to_equal_other_table(table_name=""departments"")",0.5405405405405405,0.45714285714285713,0.5405405405405405,21.46532181377674
"Assess that the `field_goal_percentage` column contains values between 0 and 100, and that the mean percentage of all players is within 10% of the league average.","expect_column_values_to_be_between(column=""field_goal_percentage"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""field_goal_percentage"", min_value=league_average - 10, max_value=league_average + 10)","expect_column_values_to_be_between(column=""field_goal_percentage"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""field_goal_percentage"", min_value=None, max_value=(100 + (0.10 * league_mean)) / 2)  # Assuming the league mean is stored in a variable called ""league_mean"".",0.7764705882352941,0.674698795180723,0.7294117647058823,67.198051596222
For the `attachment_size`: Ensure the field matches the type 'integer'. Validate that all values are less than or equal to 25MB.,"expect_column_values_to_be_of_type(column=""attachment_size"", type_=""int""),expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25 * 1024 * 1024)","expect_column_values_to_be_of_type(column=""attachment_size"", type_=""integer""),expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25 * 1024 * 1024)",0.9655172413793104,0.9285714285714286,0.9655172413793104,96.07590505097875
For field `ip_address`: Ensure values match the regex pattern for valid IPv4 addresses and do not contain any duplicates.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_be_unique(column=""ip_address"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:\d{1,3}\.){3}\d{1,3}$""),expect_column_values_to_be_unique(column=""ip_address"")",0.8928571428571429,0.8148148148148148,0.8928571428571429,81.79839264312791
"Ensure the `article_id` column contains unique values and is of type integer, not allowing nulls.","expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_be_of_type(column=""article_id"", type_=""int""),expect_column_values_to_not_be_null(column=""article_id"")","expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_not_be_null(column=""article_id""),expect_column_values_to_be_of_type(column=""article_id"", type_=""int"")",1.0,0.9666666666666667,0.8064516129032258,99.64092777538484
Check that the `delivery_date` values are all greater than the corresponding `order_date` values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `device_status` column contains only the values `['Active', 'Inactive', 'Pending']` and that there are no invalid entries.","expect_column_values_to_be_in_set(column=""device_status"", value_set=[""Active"", ""Inactive"", ""Pending""])","expect_column_values_to_be_in_set(column=""device_status"", value_set=['Active', 'Inactive', 'Pending']),expect_column_values_to_not_be_in_set(column=""device_status"", value_set=['*invalid*'])",0.6818181818181819,0.6666666666666666,0.6818181818181819,39.266953429713
Ensure the `player_id` column contains only distinct values and matches the expected range of player identifiers.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_between(column=""player_id"", min_value=<expected_min>, max_value=<expected_max>)","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_between(column=""player_id"", min_value=0, max_value=99999)",0.8799999999999999,0.8333333333333333,0.8799999999999999,78.7946531157066
"Validate that the `grade` column values fall within the set (0, 1, 2, 3, 4) and that no values are duplicated.","expect_column_values_to_be_in_set(column=""grade"", value_set={0, 1, 2, 3, 4}),expect_column_values_to_be_unique(column=""grade"")","expect_column_values_to_be_in_set(column=""grade"", value_set=[0, 1, 2, 3, 4]) # Expect values to fall within the given set.",0.7916666666666666,0.7391304347826085,0.7916666666666666,56.51489958409923
Validate that the `transaction_id` column entries are unique and match the pattern `TX-XXXXXX` where `X` is a letter or digit.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^TX-[A-Za-z0-9]{6}$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""TX-[\w]{6}"")",0.8979591836734695,0.8510638297872342,0.8979591836734695,83.81862345596213
Ensure the `device_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_to_exist(column=""device_id""),expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
For the `citizen_id` field: Ensure all values are unique and of type 'integer'. Ensure no null values exist.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""int""),expect_column_values_to_not_be_null(column=""citizen_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
For field `listing_description`: Validate that string lengths are between 50 and 500 characters.,"expect_column_value_lengths_to_be_between(column=""listing_description"", min_value=50, max_value=500)","expect_column_value_lengths_to_be_between(column=""listing_description"", min_value=50, max_value=500)",1.0,1.0,1.0,100.00000000000004
Ensure that the distribution of `spam_score` passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""spam_score"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""spam_score"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For the `product_id` field: Ensure the field matches the type 'text'. Ensure all values are unique and not null.,"expect_column_values_to_be_of_type(column=""product_id"", type_=""text""),expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_to_exist(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""text""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",0.898550724637681,0.8955223880597014,0.8115942028985507,80.78752923813731
For the `delivery_status` column: Ensure the distribution passes the KS test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""delivery_status"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""delivery_status"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"For the `merchant_category` field, ensure values are from the set ['Online', 'In-Store', 'Mobile'] and do not contain nulls.","expect_column_values_to_be_in_set(column=""merchant_category"", value_set=['Online', 'In-Store', 'Mobile']),expect_column_values_to_not_be_null(column=""merchant_category"")","expect_column_values_to_be_in_set(column=""merchant_category"", value_set=['Online', 'In-Store', 'Mobile']),expect_column_values_to_not_be_null(column=""merchant_category"")",1.0,1.0,1.0,100.00000000000004
"For the `salary` column: Confirm that the maximum salary recorded does not exceed $200,000 and the average salary is greater than $50,000.","expect_column_max_to_be_between(column=""salary"", min_value=None, max_value=200000),expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=None)","expect_column_max_to_be_between(column=""salary"", max_value=200000),expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=None)",0.9433962264150945,0.9019607843137256,0.9433962264150945,88.3681888167574
In the `transactions` table: Validate that the `transaction_amount` is within the range of 0 to 1000000.,"expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=1000000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
"For field 'listing_price': Ensure this field matches the type 'decimal'. Validate that values are greater than zero and do not exceed '1,000,000'.","expect_column_values_to_be_of_type(column=""listing_price"", type_=""decimal""),expect_column_values_to_be_between(column=""listing_price"", min_value=0, max_value=1000000)","expect_column_values_to_be_of_type(column=""listing_price"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""listing_price"", value=0),expect_column_values_to_be_between(column=""listing_price"", min_value=0, max_value=1000000)",0.8181818181818181,0.8125000000000001,0.8181818181818181,69.13669280533436
Check if the `quantity_ordered` column values are arranged in increasing order without any duplicates.,"expect_column_values_to_be_increasing(column=""quantity_ordered""),expect_column_values_to_be_unique(column=""quantity_ordered"")","expect_column_values_to_be_increasing(column=""quantity_ordered""),expect_column_values_to_be_unique(column=""quantity_ordered"")",1.0,1.0,1.0,100.00000000000004
Check that the `enrollment_date` is less than the `completion_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""completion_date"", column_B=""enrollment_date"")","expect_column_pair_values_A_to_be_less_than_B(column_A=""enrollment_date"", column_B=""completion_date"")",0.9444444444444444,0.7647058823529412,0.8333333333333334,91.9171473512929
For the `recipient_email` field: Ensure all entries follow the standard email format and are unique.,"expect_column_values_to_match_regex(column=""recipient_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""recipient_email"")","expect_column_values_to_match_regex(column=""recipient_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Check for standard email format, excluding the '@', which will be covered in the uniqueness check.  # Assuming recipient emails are already checked against a unique constraint, which would be the actual application requirement.",0.5217391304347826,0.417910447761194,0.5217391304347826,54.87304141867082
"For field 'weather_conditions': Ensure this field matches the type 'text' and contains only values from the set ['Sunny', 'Rainy', 'Cloudy', 'Snowy'].","expect_column_values_to_be_of_type(column=""weather_conditions"", type_=""text""),expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=[""Sunny"", ""Rainy"", ""Cloudy"", ""Snowy""])","expect_column_values_to_be_of_type(column=""weather_conditions"", type_=""text""),expect_column_values_to_be_in_set(column=""weather_conditions"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",1.0,1.0,1.0,78.18429768538174
"For field 'income_level': Ensure the field matches the type 'text'. Ensure there are no missing values and values conform to the expected categories ['Low', 'Medium', 'High'].","expect_column_values_to_be_of_type(column=""income_level"", type_=""text""),expect_column_values_to_not_be_null(column=""income_level""),expect_column_values_to_be_in_set(column=""income_level"", value_set=[""Low"", ""Medium"", ""High""])","expect_column_values_to_be_of_type(column=""income_level"", type_=""text""),expect_column_values_to_not_be_null(column=""income_level""),expect_column_values_to_be_in_set(column=""income_level"", value_set=['Low', 'Medium', 'High'])",1.0,1.0,1.0,87.01784579512386
For the `observation_time` field: Confirm that all datetime entries are recorded in UTC and can be parsed correctly.,"expect_column_values_to_be_dateutil_parseable(column=""observation_time""),expect_column_values_to_match_strftime_format(column=""observation_time"", format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_be_dateutil_parseable(column=""observation_time""),expect_column_values_to_be_between(column=""observation_time"", min_value=""1970-01-01 00:00:00"", max_value=datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S""))  # Adjust as needed based on current date/time.илася",0.5945945945945945,0.4722222222222222,0.5675675675675675,47.35944585877071
Verify that the `transaction_amount` column contains values greater than zero and is of type float.,"expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""float"")","expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""float"")",1.0,1.0,1.0,100.00000000000004
"For the `plaintiff_name` column, confirm that all names are at least 2 characters long and do not exceed 50 characters.","expect_column_value_lengths_to_be_between(column=""plaintiff_name"", min_value=2, max_value=50)","expect_column_value_lengths_to_be_between(column=""plaintiff_name"", min_value=2, max_value=50),expect_column_values_to_be_of_type(column=""plaintiff_name"", type_=""str"")",0.7272727272727273,0.7142857142857143,0.7272727272727273,51.977527909438486
For field 'account_number': Ensure the field matches the type 'text'. Validate that the length is exactly 10 characters and contains only digits. Ensure this field exists.,"expect_column_to_exist(column=""account_number""),expect_column_values_to_be_of_type(column=""account_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""account_number"", length=10),expect_column_values_to_match_regex(column=""account_number"", regex=r""^\d{10}$"")","expect_column_to_exist(column=""account_number""),expect_column_values_to_be_of_type(column=""account_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""account_number"", length=10),expect_column_values_to_match_regex(column=""account_number"", regex=r""^\d+$"")",0.988235294117647,0.9879518072289156,0.988235294117647,95.64268837648851
"Confirm that the `email_content` field is a valid JSON object and adheres to the specified schema, ensuring that all necessary fields are included.","expect_column_values_to_be_json_parseable(column=""email_content""),expect_column_values_to_match_json_schema(column=""email_content"", schema={""type"": ""object"", ""properties"": { ... }})  # Replace with actual schema properties","expect_column_values_to_be_json_parseable(column=""email_content""),expect_column_values_to_match_json_schema(column=""email_content"", schema={""type"": ""object"", ""required"": [""from"", ""to"", ""subject"", ""email_content""], ""properties"": {""from"": {""type"": ""string""}, ""to"": {""type"": ""string""}, ""subject"": {""type"": ""string""}, ""email_content"": {""type"": ""string""}}})",0.6666666666666666,0.6285714285714286,0.6666666666666666,42.29711278880929
"Verify the `visibility` values are within the range of [0, 100] kilometers and do not include any outliers.","expect_column_values_to_be_between(column=""visibility"", min_value=0, max_value=100),expect_column_proportion_of_unique_values_to_be_between(column=""visibility"", min_value=0.95, max_value=1.0)","expect_column_values_to_be_between(column=""visibility"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""visibility"")",0.75,0.6296296296296297,0.75,63.14731946633213
For the `author_email` column: Ensure it contains valid email formats and does not exceed 255 characters.,"expect_column_values_to_match_regex(column=""author_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_value_lengths_to_be_between(column=""author_email"", min_value=1, max_value=255)","expect_column_values_to_match_regex(column=""author_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_value_lengths_to_be_between(column=""author_email"", min_value=1, max_value=255)",1.0,1.0,1.0,100.00000000000004
For field 'summary': Ensure the field matches the type 'text'. Validate that the values do not exceed 200 characters.,"expect_column_values_to_be_of_type(column=""summary"", type_=""text""),expect_column_value_lengths_to_be_between(column=""summary"", min_value=0, max_value=200)","expect_column_values_to_be_of_type(column=""summary"", type_=""text""),expect_column_value_lengths_to_be_between(column=""summary"", min_value=0, max_value=200)",1.0,1.0,1.0,100.00000000000004
Ensure the `weather_conditions` column has no entries exceeding `50` characters and conforms to the specified condition types.,"expect_column_value_lengths_to_be_between(column=""weather_conditions"", min_value=0, max_value=50)","expect_column_value_lengths_to_be_between(column=""weather_conditions"", min_value=1, max_value=50),expect_column_values_to_be_of_type(column=""weather_conditions"", type_=""condition_types"")",0.6666666666666667,0.6046511627906976,0.6666666666666667,46.38898765560942
For field 'sensor_reading': Validate that values fall within the expected operational range of -100 to 1000. Ensure this field exists.,"expect_column_to_exist(column=""sensor_reading""),expect_column_values_to_be_between(column=""sensor_reading"", min_value=-100, max_value=1000)","expect_column_to_exist(column=""sensor_reading""),expect_column_values_to_be_between(column=""sensor_reading"", min_value=-100, max_value=1000)",1.0,1.0,1.0,100.00000000000004
Verify that the `case_opened_date` field contains datetime strings formatted as '%Y-%m-%d' and can be parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""case_opened_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""case_opened_date"")","expect_column_values_to_match_strftime_format(column=""case_opened_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""case_opened_date"")",1.0,1.0,1.0,100.00000000000004
For the `price` column: Ensure all values are greater than 0 and verify the distribution passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_values_to_be_greater_than(column=""price"", threshold=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""price"", threshold=0.05)","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""price"", threshold=0.05)",0.8474576271186439,0.7368421052631577,0.8474576271186439,77.64630472383662
For the `order_date` field: Ensure all entries are in the format `%Y-%m-%d` and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")",1.0,1.0,1.0,100.00000000000004
Confirm that the mean `views` for `articles` is at least 100.,"expect_column_mean_to_be_between(column=""views"", min_value=100)","expect_column_mean_to_be_between(column=""views"", min_value=100)",1.0,1.0,1.0,100.00000000000004
"For the `appointment_date` field: Ensure all entries are valid datetimes, and check if they fall within the range of the current year.","expect_column_values_to_be_dateutil_parseable(column=""appointment_date""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_dateutil_parseable(column=""appointment_date""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""1900-01-01"", max_value=""current_date"")",0.8771929824561403,0.8363636363636364,0.8771929824561403,86.552536021371
Check that the `budget_allocation` is a positive number and that the sum of `project_costs` must equal `budget_allocation` for each project.,"expect_column_values_to_be_between(column=""budget_allocation"", min_value=0),expect_column_pair_values_to_be_equal(column_A=""project_costs"", column_B=""budget_allocation"")","expect_column_values_to_be_of_type(column=""budget_allocation"", type_=""float""),expect_column_values_to_be_between(column=""budget_allocation"", min_value=0),expect_column_pair_values_to_be_equal(column_a=""project_costs"", column_b=""budget_allocation"")",0.8181818181818181,0.8125000000000001,0.8181818181818181,60.78302823473647
"Validate that the `status` column has values that match the set `['Approved', 'Pending', 'Rejected']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Approved', 'Pending', 'Rejected'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Approved', 'Pending', 'Rejected'])",1.0,1.0,1.0,100.00000000000004
Validate that the `filing_date` column contains dates that match the format '%Y-%m-%d' and are in the past.,"expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""filing_date"")",0.9387755102040817,0.8936170212765957,0.9387755102040817,91.99952818920538
Ensure that the `last_updated` column adheres to the correct datetime format and reflects updates within the last 6 months.,"expect_column_values_to_match_strftime_format(column=""last_updated"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""last_updated"")","expect_column_to_exist(column=""last_updated""),expect_column_values_to_match_strftime_format(column=""last_updated"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_between(column=""last_updated"", min_value=""2023-06-01 00:00:00"", max_value=""2023-12-31 23:59:59"")  # assuming today's date 26 July 2023, current month is June 2023 # and current year is 2023.",0.553191489361702,0.5217391304347827,0.553191489361702,44.91415962951973
For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values are unique.,"expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_be_unique(column=""patient_id"")","expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""integer""),expect_column_values_to_be_unique(column=""patient_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
Verify that the `purchase_date` values adhere to the 'YYYY-MM-DD HH:MM:SS' format.,"expect_column_values_to_match_strftime_format(column=""purchase_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""purchase_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
Validate that the `application_date` field contains valid date formats and does not include future dates.,"expect_column_values_to_be_dateutil_parseable(column=""application_date""),expect_column_values_to_be_between(column=""application_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""application_date"", min_value=""1900-01-01"", max_value=""today"")",0.8135593220338982,0.7368421052631579,0.8135593220338982,73.33122314161866
"For the `course_duration` column, ensure values are within the range [1, 52] weeks.","expect_column_values_to_be_between(column=""course_duration"", min_value=1, max_value=52)","expect_column_values_to_be_between(column=""course_duration"", min_value=1, max_value=52)",1.0,1.0,1.0,100.00000000000004
For the `student_id` field: Ensure all entries are positive integers and exist in the `student_list`.,"expect_column_values_to_be_in_set(column=""student_id"", value_set=student_list),expect_column_values_to_be_between(column=""student_id"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""student_id"", type_=""int"")","expect_column_values_to_be_of_type(column=""student_id"", type_=""int""),expect_column_values_to_be_between(column=""student_id"", min_value=1, max_value=len(student_list) - 1),expect_column_values_to_be_in_set(column=""student_id"", value_set=student_list)",0.9411764705882352,0.891566265060241,0.7058823529411764,89.54657257305887
Ensure the 'game_title' column contains only unique values. No null values should be present in this column.,"expect_column_values_to_be_unique(column=""game_title""),expect_column_values_to_not_be_null(column=""game_title"")","expect_column_values_to_be_unique(column=""game_title""),expect_column_values_to_not_be_null(column=""game_title"")",1.0,1.0,1.0,100.00000000000004
For field 'product_id': Ensure the field exists and matches the type 'integer'. Ensure that all values in 'product_id' are unique and not null.,"expect_column_to_exist(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_to_exist(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""integer""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",1.0,1.0,0.9210526315789473,100.00000000000004
Ensure the `loyalty_points` column has values that are all integers and fall within the range of 0 to 1000.,"expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=1000)","expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'client_email': Ensure the field is of type 'text'. Validate that it contains valid email format and does not exceed 254 characters in length.,"expect_column_values_to_be_of_type(column=""client_email"", type_=""text""),expect_column_values_to_match_regex(column=""client_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_value_lengths_to_be_between(column=""client_email"", min_value=1, max_value=254)","expect_column_values_to_be_of_type(column=""client_email"", type_=""text""),expect_column_value_lengths_to_be_between(column=""client_email"", min_value=1, max_value=254),expect_column_values_to_match_regex(column=""client_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",0.851063829787234,0.8043478260869565,0.5957446808510639,84.93917633501349
"Validate that the unique value count in the `account_type` column matches the set `['Savings', 'Checking', 'Investment']`.","expect_column_distinct_values_to_equal_set(column=""account_type"", value_set=['Savings', 'Checking', 'Investment'])","expect_column_unique_value_count_to_equal_set(column=""account_type"", value_set=['Savings', 'Checking', 'Investment'])",0.9032258064516129,0.7586206896551724,0.9032258064516129,81.58721088985364
"Verify that the `policy_status` column values are not in the set `['Cancelled', 'Expired']`.","expect_column_values_to_not_be_in_set(column=""policy_status"", value_set=['Cancelled', 'Expired'])","expect_column_values_to_not_be_in_set(column=""policy_status"", value_set=['Cancelled', 'Expired'])",1.0,1.0,1.0,100.00000000000004
"Confirm that the `service_type` column contains only distinct values from the set `['Mobile', 'Landline', 'Internet']`.","expect_column_distinct_values_to_equal_set(column=""service_type"", value_set=['Mobile', 'Landline', 'Internet'])","expect_column_distinct_values_to_be_in_set(column=""service_type"", value_set=['Mobile', 'Landline', 'Internet'])",0.9032258064516129,0.8275862068965518,0.9032258064516129,86.75979125638379
Confirm that the average `rating` in the `reviews` table has a normal distribution with a mean greater than 4.0 and p-value of KS test greater than 0.05.,"expect_column_mean_to_be_between(column=""rating"", min_value=4.0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""rating"", threshold=0.05)","expect_column_mean_to_be_between(column=""rating"", min_value=4.0),expect_column_kst_test_p_value_to_be_greater_than(column=""rating"", threshold=0.05)",0.8813559322033898,0.8070175438596492,0.8813559322033898,76.98088029623149
"Ensure that the `complaint_type` column contains only distinct values from the predefined set: ['Noise', 'Traffic', 'Waste'].","expect_column_values_to_be_in_set(column=""complaint_type"", value_set=['Noise', 'Traffic', 'Waste'])","expect_column_distinct_values_to_equal_set(column=""complaint_type"", value_set=['Noise', 'Traffic', 'Waste'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
Ensure that the `transaction_amount` column has a mean value greater than 0 and a maximum value of 100 BTC across all records.,"expect_column_mean_to_be_between(column=""transaction_amount"", min_value=0),expect_column_max_to_be_between(column=""transaction_amount"", max_value=100)","expect_column_mean_to_be_between(column=""transaction_amount"", min_value=0),expect_column_max_to_be_between(column=""transaction_amount"", max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'transaction_date': Ensure the field matches the type 'date'. Ensure values in 'transaction_date' are within the range of '2021-01-01' and '2023-12-31'.,"expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2021-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
"For the 'price' column, validate that the mean price of properties is greater than $100,000 and less than $1,000,000.","expect_column_mean_to_be_between(column=""price"", min_value=100000, max_value=1000000)","expect_column_mean_to_be_between(column=""price"", min_value=100000, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
For the field 'last_modified': Ensure all timestamps are in the format 'YYYY-MM-DD HH:MM:SS' and validate that no entries are older than five years from the current date.,"expect_column_values_to_match_strftime_format(column=""last_modified"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_between(column=""last_modified"", min_value=(current_date - timedelta(days=1825)), max_value=current_date)","expect_column_values_to_match_strftime_format(column=""last_modified"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_less_than(column=""last_modified"", value=""2023-08-01"")  # Current Date, replace with today's date if needed.",0.7594936708860759,0.6493506493506493,0.7594936708860759,70.65475407542054
Verify that the `points_scored` column values are integers within the range of 0 to 100.,"expect_column_values_to_be_of_type(column=""points_scored"", type_=""int""),expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""points_scored"", type_=""int"")",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
"For the `product_id` column, ensure all entries are unique and of type 'string'. Validate that there are no null values.","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""string""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""string""),expect_column_values_to_not_be_null(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `game_rating` column contains values between 0 and 10.,"expect_column_values_to_be_between(column=""game_rating"", min_value=0, max_value=10)","expect_column_values_to_be_between(column=""game_rating"", min_value=0, max_value=10)",1.0,1.0,1.0,100.00000000000004
Ensure the `game_title` column contains unique titles and does not allow null entries.,"expect_column_values_to_be_unique(column=""game_title""),expect_column_values_to_not_be_null(column=""game_title"")","expect_column_to_exist(column=""game_title""),expect_column_values_to_be_unique(column=""game_title""),expect_column_values_to_not_be_null(column=""game_title"")átky",0.8260869565217391,0.8181818181818181,0.8260869565217391,69.73489091113805
For the `email_address` field: Ensure all entries are of type 'text' and contain valid email format. Verify that this field contains unique values.,"expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email_address"")","expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email_address"")илакти",1.0,1.0,1.0,99.00485133666974
"Ensure the `review_score` column contains only integer values between 1 and 10, and validate against the expected distribution parameters.","expect_column_values_to_be_between(column=""review_score"", min_value=1, max_value=10),expect_column_distinct_values_to_equal_set(column=""review_score"", set_={1, 2, 3, 4, 5, 6, 7, 8, 9, 10})","expect_column_values_to_be_between(column=""review_score"", min_value=1, max_value=10),expect_column_mean_to_be_between(column=""review_score"", min_value=2, max_value=10)  # This is an expected mean of the column which should be between 2 and 10.",0.5925925925925926,0.4556962025316455,0.5679012345679012,57.5600685849424
Ensure the `healthcare_data.json` file is correctly formatted and adheres to the expected JSON structure.,"expect_file_to_exist(filepath=""healthcare_data.json""),expect_file_to_be_valid_json(filepath=""healthcare_data.json"")","expect_file_to_exist(file_path=""healthcare_data.json""),expect_column_values_to_match_json_schema(column=""data"")",0.6666666666666666,0.35294117647058826,0.6111111111111112,53.1671971621465
For field 'region_name': Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""region_name""),expect_column_values_to_be_of_type(column=""region_name"", type_=""text"")","expect_column_to_exist(column=""region_name""),expect_column_values_to_be_of_type(column=""region_name"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field 'is_active': Ensure the field matches the type 'boolean'. Ensure this field exists.,"expect_column_to_exist(column=""is_active""),expect_column_values_to_be_of_type(column=""is_active"", type_=""boolean"")","expect_column_to_exist(column=""is_active""),expect_column_values_to_be_of_type(column=""is_active"", type_=""boolean"")",1.0,1.0,1.0,100.00000000000004
Verify that the `patient_id` column contains only valid alphanumeric characters and does not exceed `10` characters in length.,"expect_column_values_to_match_regex(column=""patient_id"", regex=r""^[a-zA-Z0-9]*$""),expect_column_value_lengths_to_be_between(column=""patient_id"", min_value=1, max_value=10)","expect_column_to_exist(column=""patient_id""),expect_column_values_to_match_regex(column=""patient_id"", regex=r""^[a-zA-Z0-9]+$""),expect_column_value_lengths_to_be_between(column=""patient_id"", min_value=0, max_value=10)",0.8695652173913043,0.835820895522388,0.8695652173913043,73.86427891390254
For the `release_date` field: Ensure the field matches the type 'date'. Validate that all entries correspond to actual release dates in the past.,"expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_be_between(column=""release_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_be_between(column=""release_date"", min_value=""1900-01-01"", max_value=""today"")",0.8787878787878789,0.8437500000000001,0.8484848484848485,79.49593483158235
Validate that the sum of the `base_salary` and `bonus` columns in each record equals the `total_compensation` column.,"expect_multicolumn_sum_to_equal(column_list=[""base_salary"", ""bonus""], target_column=""total_compensation"")","expect_multicolumn_sum_to_equal(column_A=""base_salary"", column_B=""bonus"", sum_column=""total_compensation"")",0.7999999999999999,0.5714285714285715,0.7999999999999999,65.6697951575367
For field 'temperature_reading': Ensure the field exists and is of type 'float'. Confirm that values in (temperature_reading) are within the range of -50 to 150 degrees Celsius.,"expect_column_to_exist(column=""temperature_reading""),expect_column_values_to_be_of_type(column=""temperature_reading"", type_=""float""),expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150)","expect_column_to_exist(column=""temperature_reading""),expect_column_values_to_be_of_type(column=""temperature_reading"", type_=""float""),expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150)",1.0,1.0,1.0,100.00000000000004
For field 'enrollment_date': Ensure the field is required (not null). Validate that the length of (enrollment_date) is exactly 10 characters and follows the format 'YYYY-MM-DD'.,"expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_value_lengths_to_equal(column=""enrollment_date"", length=10),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_value_lengths_to_equal(column=""enrollment_date"", length=10),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d"")",0.9113924050632911,0.9090909090909091,0.9113924050632911,82.73866067632372
"For field 'student_id': Ensure this field exists, is of type 'integer', and contains only unique values. Verify that no null values are present.","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the 'transaction_amount' values are greater than zero and pass the Kolmogorov-Smirnov test with a p-value above 0.05.,"expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)","expect_column_values_to_be_greater_than(column=""transaction_amount"", threshold=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)",0.9666666666666667,0.9310344827586207,0.9666666666666667,95.8818508950773
"For field 'phone_extension': Ensure that all values in (phone_extension) have a length of exactly 4 digits and do not match any invalid patterns from the list ['0000', '1234'].","expect_column_value_lengths_to_equal(column=""phone_extension"", length=4),expect_column_values_to_not_match_regex_list(column=""phone_extension"", regex_list=[r""^0000$"", r""^1234$""])","expect_column_values_to_match_regex(column=""phone_extension"", regex=r""^([1-9]?[0-9]{3})$""),expect_column_values_to_not_be_in_set(column=""phone_extension"", value_set=[""0000"", ""1234""])",0.7118644067796611,0.4210526315789474,0.5762711864406779,46.30464394305713
"Ensure the `genre` column does not match any of the following patterns: `['Horror', 'Adult', 'Violent']`.","expect_column_values_to_not_match_regex_list(column=""genre"", regex_list=[r""Horror"", r""Adult"", r""Violent""])","expect_column_values_to_not_match_regex_list(column=""genre"", regex_list=['Horror', 'Adult', 'Violent'])",0.9090909090909091,0.7096774193548386,0.9090909090909091,62.89740687598917
"For the `game_id`, ensure all entries are unique and match the pattern `^GAME-\\d{4}$`.","expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_match_regex(column=""game_id"", regex=r""^GAME-\d{4}$"")","expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_match_regex(column=""game_id"", regex=r""^GAME-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
Check the `customer_id` column to confirm all values are present in the `customers` table and are unique.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_in_set(column=""customer_id"", value_set=customers_table_values)","expect_column_values_to_be_unique(column=""customer_id""),expect_select_values_to_be_in_set(column=""customer_id"", set_of_values=customers_table_unique_values)",0.9199999999999999,0.7083333333333334,0.8799999999999999,79.27484301804549
Ensure the `evidence_files` column contains valid file paths and that all files exist and match the specified hash values.,"expect_column_values_to_match_regex(column=""evidence_files"", regex=r""^.+\..+$""),expect_file_to_exist(column=""evidence_files""),expect_file_hash_to_equal(column=""evidence_files"")","expect_column_values_to_be_file_path_matches(column=""evidence_files""),expect_file_to_exist(file_path=""evidence_files""),expect_file_hash_to_equal(file_path=""evidence_files"", hash_value=""specified_hash_value"")  # Replace ""specified_hash_value"" with the actual hash value for the specified file.",0.5833333333333333,0.42857142857142855,0.5833333333333333,49.18259931639777
Check if the `restock_date` is always greater than or equal to the `last_sold_date`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""restock_date"", column_B=""last_sold_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""restock_date"", column_B=""last_sold_date"")",1.0,1.0,1.0,100.00000000000004
"For field 'temperature': Ensure the field is required (not null). Validate that the field matches the type 'decimal' and that values fall within the range [-50, 60].","expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=60)","expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=60)",1.0,1.0,1.0,100.00000000000004
Ensure that the `last_payment_date` values are not later than the `service_end_date` values.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""last_payment_date"", column_B=""service_end_date"")","expect_column_values_to_be_less_than(column=""service_end_date"", value=""last_payment_date"")",0.8,0.48484848484848486,0.6285714285714286,57.55966614650935
"Ensure the `genre` column contains only distinct values from the defined set `['Action', 'Drama', 'Comedy', 'Thriller']`.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy', 'Thriller'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Drama', 'Comedy', 'Thriller']) CLIIIK",0.967741935483871,0.9655172413793104,0.967741935483871,97.01154303042087
"For the `incident_type`: Ensure that the values are not in the set `['Phishing', 'Malware', 'Insider Threat']`.","expect_column_values_to_not_be_in_set(column=""incident_type"", value_set=['Phishing', 'Malware', 'Insider Threat'])","expect_column_values_to_not_be_in_set(column=""incident_type"", value_set=['Phishing', 'Malware', 'Insider Threat'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `created_at` timestamps can be parsed using dateutil without raising exceptions.,"expect_column_values_to_be_dateutil_parseable(column=""created_at"")","expect_column_values_to_be_dateutil_parseable(column=""created_at"")",1.0,1.0,1.0,100.00000000000004
For the `stock_quantity` field: Ensure the values are non-negative integers and do not exceed 1000.,"expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int"")","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
"Ensure that `transaction_type` contains only values from the set ['transfer', 'stake', 'delegate'].","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['transfer', 'stake', 'delegate'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""transfer"", ""stake"", ""delegate""])",1.0,1.0,1.0,69.17381010255603
Ensure the `product_id` column exists and contains unique identifiers for each product.,"expect_column_to_exist(column=""product_id""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_to_exist(column=""product_id""),expect_column_values_to_be_unique(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the `case_duration_days` column has a maximum value not exceeding 365 days and that the average is at least 30 days.,"expect_column_max_to_be_between(column=""case_duration_days"", max_value=365),expect_column_mean_to_be_between(column=""case_duration_days"", min_value=30)","expect_column_max_to_be_between(column=""case_duration_days"", max_value=365),expect_column_mean_to_be_between(column=""case_duration_days"", min_value=30, max_value=365)",0.9454545454545454,0.9433962264150945,0.9454545454545454,89.0068563874357
For the `research_date` column: Ensure all entries are valid datetime values conforming to the format `%Y-%m-%d` and that no future dates exist.,"expect_column_values_to_be_dateutil_parseable(column=""research_date""),expect_column_values_to_match_strftime_format(column=""research_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""research_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""research_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""research_date""),expect_column_values_to_be_decreasing(column=""research_date"")  # future dates must not exist # TODO: Replace with actual datetime parsing logic if required, e.g. for more precise validation.",0.6875000000000001,0.6595744680851064,0.5,71.47662554620054
"Verify that the `benefits` JSON column contains valid entries, including fields `['health', 'dental', 'vision']`.","expect_column_values_to_be_json_parseable(column=""benefits""),expect_column_values_to_match_json_schema(column=""benefits"", schema={""type"": ""object"", ""properties"": {""health"": {}, ""dental"": {}, ""vision"": {}}})","expect_column_values_to_match_json_schema(column=""benefits"", schema={""type"": ""object"", ""properties"": {""health"": {""type"": ""boolean""}, ""dental"": {""type"": ""boolean""}, ""vision"": {""type"": ""boolean""}}})",0.6808510638297872,0.5777777777777778,0.6808510638297872,67.84448312003113
For the `user_agent` field: Check that it is a text type and does not exceed 255 characters.,"expect_column_values_to_be_of_type(column=""user_agent"", type_=""text""),expect_column_value_lengths_to_be_between(column=""user_agent"", min_value=0, max_value=255)","expect_column_values_to_be_of_type(column=""user_agent"", type_=""text""),expect_column_value_lengths_to_be_between(column=""user_agent"", min_value=0, max_value=255)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature_reading` column values are within the range of -50 to 150 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150)","expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150)",1.0,1.0,1.0,100.00000000000004
For field 'research_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field is unique for each research study.,"expect_column_values_to_not_be_null(column=""research_id""),expect_column_values_to_be_of_type(column=""research_id"", type_=""int""),expect_column_values_to_be_unique(column=""research_id"")","expect_column_to_exist(column=""research_id""),expect_column_values_to_be_of_type(column=""research_id"", type_=""int""),expect_column_values_to_be_unique(column=""research_id""),expect_column_values_to_be_greater_than(column=""research_id"", value=0)",0.8169014084507041,0.7536231884057971,0.7605633802816901,71.80555965162623
Ensure the `p_value` column values are less than 0.05 for statistically significant results.,"expect_column_values_to_be_less_than(column=""p_value"", value=0.05)","expect_column_values_to_be_less_than(column=""p_value"", value=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `property_id` field is unique and matches the type 'string'. Confirm that this field does not include null values.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""string""),expect_column_values_to_not_be_null(column=""property_id"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""string""),expect_column_values_to_not_be_null(column=""property_id"")",1.0,1.0,1.0,100.00000000000004
Check that the combination of `sender_email` and `sent_date` columns is unique across records.,"expect_compound_columns_to_be_unique(column_A=""sender_email"", column_B=""sent_date"")","expect_compound_columns_to_be_unique(column_A=""sender_email"", column_B=""sent_date"")",1.0,1.0,1.0,100.00000000000004
"For field 'case_status': Ensure the field exists. Validate that values in (case_status) match at least one of the patterns ['open', 'closed', 'pending'].","expect_column_to_exist(column=""case_status""),expect_column_values_to_match_like_pattern(column=""case_status"", pattern=""open|closed|pending"")","expect_column_to_exist(column=""case_status""),expect_column_values_to_be_in_set(column=""case_status"", value_set=['open', 'closed', 'pending'])",0.7906976744186046,0.6829268292682926,0.7906976744186046,64.24048939167271
Ensure that the `hashtags` column contains valid JSON objects and conforms to the specified schema.,"expect_column_values_to_be_json_parseable(column=""hashtags""),expect_column_values_to_match_json_schema(column=""hashtags"", schema=my_json_schema)","expect_column_values_to_match_json_schema(column=""hashtags"", schema={""type"": ""array"", ""items"": {""type"": ""string"", ""pattern"": r""^#\d+$""}})",0.5,0.4736842105263158,0.5,36.489468035466174
For field 'loyalty_points': Ensure the expect column values to be in set; Ensure this field matches the type 'integer' and contains values greater than or equal to 0.,"expect_column_values_to_be_in_set(column=""loyalty_points"", value_set=[0, 1, 2, 3, 4, 5]),  # Example set, adjust as necessary,expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=None)","expect_column_values_to_be_in_set(column=""loyalty_points"", value_set),expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_greater_than(column=""loyalty_points"", value=0)",0.7906976744186047,0.7142857142857143,0.7906976744186047,63.741362863596
For field 'json_metadata': Ensure that values in 'json_metadata' are valid JSON objects and conform to the specified JSON schema for product metadata.,"expect_column_values_to_be_json_parseable(column=""json_metadata""),expect_column_values_to_match_json_schema(column=""json_metadata"")","expect_column_values_to_be_json_parseable(column=""json_metadata"")  # Checks if the column values can be parsed as JSON.,expect_column_values_to_match_json_schema(column=""json_metadata"", schema=""specific_JSON_schema_for_product_metadata"")  # Replace'specific_JSON_schema_for_product_metadata' with the actual schema for the product metadata.",0.5555555555555556,0.5142857142857143,0.5555555555555556,45.34426355401422
"For field `game_platform`: Validate that entries belong to the set `['PC', 'Console', 'Mobile']`.","expect_column_values_to_be_in_set(column=""game_platform"", value_set=['PC', 'Console', 'Mobile'])","expect_column_values_to_be_in_set(column=""game_platform"", value_set=['PC', 'Console', 'Mobile'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `provider` column contains only distinct values from the list `['ProviderA', 'ProviderB', 'ProviderC']`.","expect_column_values_to_be_in_set(column=""provider"", value_set=['ProviderA', 'ProviderB', 'ProviderC'])","expect_column_distinct_values_to_match_set(column=""provider"", value_set=['ProviderA', 'ProviderB', 'ProviderC'])",0.8571428571428571,0.6923076923076923,0.8571428571428571,82.93181259810136
Verify that the `call_duration` values are within the range of 0 to 3600 seconds and the sum of all durations exceeds 1000 hours.,"expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600),expect_column_sum_to_be_between(column=""call_duration"", min_value=3600000, max_value=None)","expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600),expect_column_sum_to_be_between(column=""call_duration"", min_value=1000, max_value=None)ыџN",0.9508196721311476,0.9152542372881356,0.9508196721311476,94.52425713908256
"For field 'email_address': Ensure this field exists. Ensure the field matches the type 'text'. Ensure all values in 'email_address' conform to the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.","expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
"Check that the `case_value` column has a minimum value of `0` and a maximum value of `1,000,000`.","expect_column_min_to_be_between(column=""case_value"", min_value=0),expect_column_max_to_be_between(column=""case_value"", max_value=1000000)","expect_column_min_to_be_between(column=""case_value"", min_value=0),expect_column_max_to_be_between(column=""case_value"", max_value=1000000)",1.0,1.0,1.0,100.00000000000004
For field 'patient_id': Ensure the field is required (not null) and contains unique values. Ensure this field exists.,"expect_column_to_exist(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")","expect_column_to_exist(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")ılmaktadır",0.962962962962963,0.9615384615384615,0.962962962962963,98.31872889241426
Verify that the `json_payload` column contains valid JSON formatted data and conforms to the required schema for API responses.,"expect_column_values_to_be_json_parseable(column=""json_payload""),expect_column_values_to_match_json_schema(column=""json_payload"", schema=required_schema)","expect_column_values_to_be_json_parseable(column=""json_payload""),expect_column_values_to_match_json_schema(column=""json_payload"", schema={""type"": ""object"", ""required"": [""some_key1"", ""some_key2"", ""some_key3""]})  # Replace the required keys with the actual required keys.",0.7096774193548387,0.6666666666666666,0.7096774193548387,51.04848087015867
Ensure the `gas_price` column maintains a mean value not exceeding 50 gwei.,"expect_column_mean_to_be_between(column=""gas_price"", min_value=None, max_value=50)","expect_column_mean_to_be_between(column=""gas_price"", min_value=0, max_value=50)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
"For the `attachments` column, ensure that it contains valid JSON arrays where each item conforms to the schema for filenames.","expect_column_values_to_be_json_parseable(column=""attachments""),expect_column_values_to_match_json_schema(column=""attachments"", schema={""type"": ""array"", ""items"": {""type"": ""string""}})","expect_column_values_to_be_of_type(column=""attachments"", type_=""list""),expect_column_values_to_match_json_schema(column=""attachments"", schema={""type"": ""array"", ""items"": {""type"": ""string"", ""minLength"": 5, ""maxLength"": 100}})",0.8148148148148148,0.7307692307692308,0.8148148148148148,69.62733782106653
Ensure the `sunrise` and `sunset` columns are in the format 'HH:MM:SS' and `sunrise` is always earlier than `sunset`.,"expect_column_values_to_match_strftime_format(column=""sunrise"", strftime_format=""%H:%M:%S""),expect_column_values_to_match_strftime_format(column=""sunset"", strftime_format=""%H:%M:%S""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""sunrise"", column_B=""sunset"")","expect_column_values_to_match_strftime_format(column=""sunrise"", strftime_format=""%H:%M:%S""),expect_column_values_to_be_between(column=""sunrise"", min_value=""00:00:00"", max_value=""23:59:59""),expect_column_pair_values_A_to_be_less_than_B(column_A=""sunrise"", column_B=""sunset"")",0.7391304347826088,0.6666666666666666,0.7391304347826088,72.58677711797289
For field 'delivery_schedule': Validate that all entries conform to the datetime format '%Y-%m-%d %H:%M:%S'. Ensure there are no missing values.,"expect_column_values_to_match_strftime_format(column=""delivery_schedule"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""delivery_schedule"")","expect_column_values_to_match_strftime_format(column=""delivery_schedule"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_not_be_null(column=""delivery_schedule"")ЎыџNЎыџN",0.9655172413793104,0.9642857142857143,0.9655172413793104,90.5619259480469
For the `listing_date` field: Ensure all values are formatted as 'YYYY-MM-DD' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""listing_date"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""listing_date"")",1.0,1.0,1.0,100.00000000000004
"Check that the `customer_phone` column matches the pattern `^\+?[1-9]\d{1,14}$` for international phone numbers.","expect_column_values_to_match_regex(column=""customer_phone"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_match_regex(column=""customer_phone"", regex=r""^[\+]\d{1,14}$"")",0.9333333333333333,0.8571428571428571,0.9333333333333333,80.49801776350661
For field 'project_code': Ensure values in 'project_code' are unique. Ensure the field matches the type 'text'. Validate that it adheres to the regex pattern for project codes.,"expect_column_values_to_be_unique(column=""project_code""),expect_column_values_to_be_of_type(column=""project_code"", type_=""text""),expect_column_values_to_match_regex(column=""project_code"", regex=r""^[A-Z]{2}\d{4}$"")","expect_column_values_to_be_unique(column=""project_code""),expect_column_values_to_be_of_type(column=""project_code"", type_=""text""),expect_column_values_to_match_regex(column=""project_code"", regex=r""[A-Z]+-\d{4}"")",0.9863013698630138,0.9577464788732395,0.9863013698630138,89.43385406925577
For field 'check_in_date': Ensure the field exists. Ensure the field matches the type 'date'. Ensure the values in (check_in_date) are arranged in increasing order.,"expect_column_to_exist(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_increasing(column=""check_in_date"")","expect_column_to_exist(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_increasing(column=""check_in_date"")ılmaktadır",0.96875,0.967741935483871,0.96875,98.62035921447831
Ensure the `game_date` column contains datetime values formatted as 'YYYY/MM/DD' and are all in the past.,"expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y/%m/%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date"")  # This checks if the values can be parsed as dates,# To check if all dates are in the past, a custom expectation would be needed as it's not covered by the provided expectations.","expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y/%m/%d""),expect_column_values_to_be_in_set(column=""game_date"", value_set=[value for value in past_game_dates])",0.5806451612903226,0.4615384615384615,0.5591397849462365,54.590304495398634
For field 'customer_feedback': Ensure the field contains valid JSON objects and conforms to the specified JSON schema for feedback records.,"expect_column_values_to_be_json_parseable(column=""customer_feedback""),expect_column_values_to_match_json_schema(column=""customer_feedback"", schema=""specified_json_schema_for_feedback_records"")","expect_column_values_to_be_json_parseable(column=""customer_feedback"")  # Ensure values can be parsed as JSON ,expect_column_values_to_match_json_schema(column=""customer_feedback"", schema={...})  # Provide the specified schema for feedback records.",0.870967741935484,0.7333333333333334,0.8387096774193549,66.11537451648381
Check that the `incident_date` column values are in chronological order with no future dates.,"expect_column_values_to_be_decreasing(column=""incident_date""),expect_column_values_to_be_between(column=""incident_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_be_increasing(column=""incident_date"")",0.4444444444444444,0.3529411764705882,0.4444444444444444,9.993092134753901
For field 'timestamp': Ensure the field is formatted as a valid UNIX timestamp. Ensure this field exists.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.6315789473684211,0.5555555555555556,0.6315789473684211,49.168717121592714
For field 'wallet_address': Ensure the field matches the type 'text'. Validate that all values in (wallet_address) conform to the regex pattern '^(0x)?[0-9a-fA-F]{40}$' and are not null.,"expect_column_values_to_be_of_type(column=""wallet_address"", type_=""text""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^(0x)?[0-9a-fA-F]{40}$""),expect_column_values_to_not_be_null(column=""wallet_address"")","expect_column_values_to_be_of_type(column=""wallet_address"", type_=""text""),expect_column_values_to_not_be_null(column=""wallet_address""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^(0x)?[0-9a-fA-F]{40}$"")",1.0,0.9736842105263158,0.7435897435897437,99.72105725531368
"Ensure that the `details` column contains valid JSON objects that adhere to the schema: {'type': 'string', 'description': 'string'}.","expect_column_values_to_match_json_schema(column=""details"", schema={'type': 'object', 'properties': {'type': {'type': 'string'}, 'description': {'type': 'string'}}})","expect_column_values_to_match_json_schema(column=""details"", json_schema={'type':'string', 'description':'string'})",0.8235294117647058,0.6875000000000001,0.8235294117647058,52.69192093931285
For field `hypothesis`: Ensure the field matches the type 'text' and must not be null.,"expect_column_values_to_not_be_null(column=""hypothesis""),expect_column_values_to_be_of_type(column=""hypothesis"", type_=""text"")","expect_column_values_to_not_be_null(column=""hypothesis""),expect_column_values_to_be_of_type(column=""hypothesis"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field 'match_date': Ensure values in 'match_date' are in the format 'YYYY-MM-DD' and are in the past.,"expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""match_date"")  # This checks if the values can be parsed as dates,# Note: There is no direct expectation for checking if the dates are in the past, ,# but this can be handled via custom validation logic.","expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""match_date""),expect_column_values_to_be_in_set(column=""match_date"", value_set=[date for date in past_dates])",0.613861386138614,0.42424242424242425,0.594059405940594,54.698828312850395
"Ensure the total `inventory_count` is above 1000 and below 10,000.","expect_column_sum_to_be_between(column=""inventory_count"", min_value=1000, max_value=10000)","expect_column_value_count_to_be_between(column=""inventory_count"", min_value=1000, max_value=10000)",0.9032258064516129,0.8275862068965518,0.9032258064516129,85.92899528285
"For field 'case_value': Ensure this column is required (not null). Ensure all values are numeric and within the range of $0 to $10,000,000.","expect_column_values_to_not_be_null(column=""case_value""),expect_column_values_to_be_of_type(column=""case_value"", type_=""numeric""),expect_column_values_to_be_between(column=""case_value"", min_value=0, max_value=10000000)","expect_column_to_exist(column=""case_value""),expect_column_values_to_not_be_null(column=""case_value""),expect_column_values_to_be_of_type(column=""case_value"", type_=""numeric""),expect_column_values_to_be_between(column=""case_value"", min_value=0, max_value=10000000)",0.9135802469135803,0.9113924050632911,0.9135802469135803,83.08227002724321
Verify that the `incident_date` column values adhere to the format `'%Y-%m-%d %H:%M:%S'` and can be parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""incident_date"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""incident_date"")","expect_column_values_to_match_strftime_format(column=""incident_date"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""incident_date"")",1.0,1.0,1.0,100.00000000000004
For field `email`: Ensure the field is required (not null). Verify that all values are in valid email format.,"expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_be_in_set(column=""email"", value_set=['valid_email_format_1', 'valid_email_format_2', 'valid_email_format_3'])  # Replace with appropriate value set if necessary.",0.5161290322580646,0.43333333333333335,0.5161290322580646,43.850954381156754
"Ensure the `status` column contains only distinct values matching `['Active', 'Inactive', 'Pending']`.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Active"", ""Inactive"", ""Pending""])","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Pending'])",1.0,1.0,1.0,66.93976514189524
Verify that the `product_id` column contains unique values that are integers.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
For field 'user_id': Validate that the field matches the type 'string'. Ensure all values in (user_id) have a length of exactly 36 characters. Ensure this field exists.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string""),expect_column_value_lengths_to_equal(column=""user_id"", length=36)","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string""),expect_column_value_lengths_to_equal(column=""user_id"", length=36)",1.0,1.0,1.0,100.00000000000004
Check that the sum of the `item_price` column matches the expected total in the `order_total` column.,"expect_column_pair_values_to_be_equal(column_A=""item_price"", column_B=""order_total"")","expect_multicolumn_sum_to_equal(column_list=[""item_price""], total=expect_column_sum_to_be_between(column=""order_total"", min_value=None, max_value=1000))",0.6,0.2631578947368421,0.45,31.597528855728402
For field `enrollment_date`: Ensure the date format is 'YYYY-MM-DD' and that all entries can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")",1.0,1.0,1.0,100.00000000000004
For field 'property_id': Ensure the field exists. Validate that 'property_id' is unique and follows the pattern 'PROP-\d{5}'.,"expect_column_to_exist(column=""property_id""),expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP-\d{5}$"")","expect_column_to_exist(column=""property_id""),expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP-\d{5}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `usage_kwh` column values are between 0 and 10000.,"expect_column_values_to_be_between(column=""usage_kwh"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""usage_kwh"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_timestamp` column values match the format 'ISO 8601' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""transaction_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""transaction_timestamp"")","expect_column_values_to_match_strftime_format(column=""transaction_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",0.7234042553191489,0.7111111111111111,0.7234042553191489,51.62220945555726
For field 'tax_rate': Ensure the field matches the type 'decimal'. Ensure the field contains values between 0.0 and 1.0. Ensure this field exists.,"expect_column_to_exist(column=""tax_rate""),expect_column_values_to_be_of_type(column=""tax_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""tax_rate"", min_value=0.0, max_value=1.0)","expect_column_to_exist(column=""tax_rate""),expect_column_values_to_be_of_type(column=""tax_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""tax_rate"", min_value=0.0, max_value=1.0)",1.0,1.0,1.0,100.00000000000004
Ensure the `rating` column contains values within the range of 1 to 10.,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10) CLIIIK",0.9655172413793104,0.962962962962963,0.9655172413793104,96.60520303055019
Ensure the `likes` column contains no missing values. Validate that all entries are of type 'integer' and greater than or equal to zero.,"expect_column_values_to_not_be_null(column=""likes""),expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None)","expect_column_to_exist(column=""likes""),expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_between(column=""likes"", min_value=0)",0.8709677419354839,0.7999999999999999,0.8709677419354839,78.39088080486535
For the `email` field: Ensure the field matches the type 'text'. Validate that all email addresses conform to a standard email pattern.,"expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",1.0,1.0,1.0,100.00000000000004
For field 'date_of_event': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure that the date is not in the future.,"expect_column_values_to_not_be_null(column=""date_of_event""),expect_column_values_to_be_of_type(column=""date_of_event"", type_=""date""),expect_column_values_to_be_less_than(column=""date_of_event"", value=""today"")","expect_column_values_to_not_be_null(column=""date_of_event""),expect_column_values_to_be_of_type(column=""date_of_event"", type_=""date""),expect_column_values_to_be_less_than(column=""date_of_event"", value=""today"")",1.0,1.0,1.0,100.00000000000004
"In the `player_stats` dataset, ensure that the sum of `goals`, `assists`, and `matches_played` for each player is consistent and does not exceed 100.","expect_multicolumn_sum_to_equal(column_list=[""goals"", ""assists"", ""matches_played""], target_value=100)","expect_column_sum_to_be_between(column=""goals"", min_value=0, max_value=100),expect_column_sum_to_be_between(column=""assists"", min_value=0, max_value=100),expect_column_sum_to_be_between(column=""matches_played"", min_value=0, max_value=100)",0.3508771929824562,0.10909090909090909,0.3508771929824562,17.29750507650067
For field 'course_code': Ensure the expect column to exist; Ensure this field is alphanumeric and matches a valid course pattern.,"expect_column_to_exist(column=""course_code""),expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Za-z0-9]{1,10}$"")","expect_column_to_exist(column=""course_code""),expect_column_values_to_match_regex(column=""course_code"", regex=r""^[a-zA-Z0-9]+$"")",0.9565217391304348,0.9545454545454545,0.9565217391304348,86.21742720803536
For the `json_response` field: Validate that the content is a properly formatted JSON object and conforms to the specified schema.,"expect_column_values_to_be_json_parseable(column=""json_response""),expect_column_values_to_match_json_schema(column=""json_response"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""json_response""),expect_column_values_to_match_json_schema(column=""json_response"", schema={})  # Replace {} with the actual schema as required.",0.8235294117647057,0.8163265306122449,0.8235294117647057,79.36063317219477
"Check that the number of unique `likes` per post is consistently above 0 and does not exceed 10,000.","expect_column_unique_value_count_to_be_between(column=""likes"", min_value=1, max_value=10000)","expect_column_unique_value_count_to_be_between(column=""likes"", min_value=1, max_value=10000),expect_column_mean_to_be_between(column=""likes"", min_value=0.1, max_value=10.0)",0.6666666666666666,0.6521739130434783,0.6666666666666666,51.158728252201975
"Ensure the `transaction_status` field only contains values from the set ['pending', 'completed', 'failed']. Ensure this field exists.","expect_column_to_exist(column=""transaction_status""),expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['pending', 'completed', 'failed'])","expect_column_to_exist(column=""transaction_status""),expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['pending', 'completed', 'failed'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `room_type` column contains only distinct values matching `['Single', 'Double', 'Suite']`.","expect_column_distinct_values_to_equal_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])","expect_column_distinct_values_to_equal_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])",1.0,1.0,1.0,100.00000000000004
Verify that the `service_request_date` is within the past year from the current date to ensure relevance.,"expect_column_values_to_be_between(column=""service_request_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_value_to_be_between(column=""service_request_date"", min_value=""1 year ago"", max_value=""current date"")",0.717948717948718,0.6486486486486486,0.717948717948718,64.91804481709504
Ensure that the `content_id` column contains valid JSON objects that conform to the specified schema for content metadata.,"expect_column_values_to_match_json_schema(column=""content_id"", schema={""type"": ""object"", ""properties"": {}})","expect_column_values_to_match_json_schema(column=""content_id"", schema={""type"": ""object"", ""required"": [""title"", ""description""], ""properties"": {""title"": {""type"": ""string""}, ""description"": {""type"": ""string""}}})",0.7567567567567568,0.6857142857142856,0.7567567567567568,46.78733287589733
"For the `budget` column: Verify that the mean value falls within the range of $100,000 to $1,000,000 and that the standard deviation does not exceed $50,000.","expect_column_mean_to_be_between(column=""budget"", max_value=1000000, min_value=100000),expect_column_stdev_to_be_between(column=""budget"", max_value=50000, min_value=0)","expect_column_mean_to_be_between(column=""budget"", min_value=100000, max_value=1000000),expect_column_stdev_to_be_between(column=""budget"", min_value=None, max_value=50000)",0.9642857142857143,0.7777777777777778,0.7857142857142857,86.31859171286038
For field `humidity`: Ensure the field matches the type 'integer'. Validate that the `humidity` values are within the range of 0 to 100.,"expect_column_values_to_be_of_type(column=""humidity"", type_=""integer""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",0.96,0.9166666666666666,0.96,95.51190479308646
Check that the values in the `release_year` column are greater than or equal to 2000.,"expect_column_values_to_be_between(column=""release_year"", min_value=2000)","expect_column_values_to_be_greater_than_or_equal_to(column=""release_year"", value=2000)",0.7407407407407408,0.56,0.7407407407407408,60.317983955216874
"Ensure that the `attachment_size` column contains values in KB and does not exceed 25 MB (25,000 KB) for each record.","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25000)","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25000),expect_column_values_to_be_between(column=""attachment_size"", min_value=""1.00 kb"", max_value=""24.99 mb"")",0.6122448979591837,0.5957446808510638,0.6122448979591837,43.86106100885237
"For field 'platform': Ensure the field is required (not null). Ensure values match one of the patterns: ('PC', 'Xbox', 'PlayStation', 'Switch'). Ensure the values are case-sensitive.","expect_column_values_to_not_be_null(column=""platform""),expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Xbox"", ""PlayStation"", ""Switch""])","expect_column_values_to_not_be_null(column=""platform""),expect_column_values_to_be_in_set(column=""platform"", value_set=[""PC"", ""Xbox"", ""PlayStation"", ""Switch""]),""expect_column_values_to_be_case_sensitive(column=""platform"")",0.8421052631578948,0.8363636363636363,0.8421052631578948,73.64712401914962
Ensure the `user_id` follows the format `UID-XXXX` and does not contain any special characters.,"expect_column_values_to_match_regex(column=""user_id"", regex=r""^UID-\d{4}$""),expect_column_values_to_not_match_regex(column=""user_id"", regex=r""[^a-zA-Z0-9-]"")","expect_column_values_to_match_regex(column=""user_id"", regex=r""^UID-\d{4}$"")",0.6363636363636364,0.6190476190476191,0.6363636363636364,34.68636452568926
"Check that the `property_type` field contains only distinct values from the set `['Apartment', 'House', 'Condo']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo'])",1.0,1.0,1.0,100.00000000000004
For the 'json_data' field: Ensure the field exists and is a valid JSON object. Validate that it conforms to the specified JSON schema for game metadata.,"expect_column_to_exist(column=""json_data""),expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=""specified JSON schema for game metadata"")","expect_column_to_exist(column=""json_data""),expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=""specified_json_schema"")",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.58240110228925
"For the `post_length` field, validate that the character counts fall within the range of 0 to 280.","expect_column_value_lengths_to_be_between(column=""post_length"", min_value=0, max_value=280)","expect_column_values_to_be_between(column=""post_length"", min_value=0, max_value=280)",0.967741935483871,0.896551724137931,0.967741935483871,86.02302883775145
Confirm that the `hashtag` column contains at least 100 unique entries that match trending topics.,"expect_column_unique_value_count_to_be_between(column=""hashtag"", min_value=100)","expect_column_unique_value_count_to_be_between(column=""hashtag"", min_value=100, max_value=None),expect_column_values_to_match_regex(column=""hashtag"", regex=r""^#[^ #]+ #"")",0.6666666666666666,0.6486486486486487,0.6666666666666666,39.25478835813719
Validate that the `stock_quantity` values are within the range of 0 to 1000.,"expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'watch_time': Ensure the field exists. Validate that 'watch_time' is a positive integer and that the average watch time does not exceed 300 minutes.,"expect_column_to_exist(column=""watch_time""),expect_column_values_to_be_of_type(column=""watch_time"", type_=""int""),expect_column_mean_to_be_between(column=""watch_time"", min_value=0, max_value=300)","expect_column_to_exist(column=""watch_time""),expect_column_values_to_be_of_type(column=""watch_time"", type_=""int""),expect_column_values_to_be_between(column=""watch_time"", min_value=1, max_value=300),  # Assuming minimum value is 1, this ensures that all watch times are positive # and that the average watch time is less than or equal to 300 min.",0.6736842105263159,0.6236559139784946,0.6736842105263159,66.14255197109773
Ensure the `property_id` column contains only unique values that match the format `PROP[0-9]{4}`.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""^PROP[0-9]{4}$"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_match_regex(column=""property_id"", regex=r""PROP[0-9]{4}"")",1.0,1.0,1.0,91.48569272631985
Ensure that the combination of `match_id` and `player_id` is unique across records. No duplicates should be present.,"expect_compound_columns_to_be_unique(column_A=""match_id"", column_B=""player_id"")","expect_compound_columns_to_be_unique(column_A=""match_id"", column_B=""player_id"")",1.0,1.0,1.0,100.00000000000004
Ensure that `metadata` entries are valid JSON and do not contain any keys that exceed 50 characters in length.,"expect_column_values_to_be_json_parseable(column=""metadata""),expect_column_values_to_not_match_regex(column=""metadata"", regex=r'\""[^\""]{51,}\""\s*:')","expect_column_values_to_be_json_parseable(column=""metadata""),expect_column_value_lengths_to_be_between(column=""metadata"", min_value=1, max_value=50)",0.6521739130434783,0.5454545454545454,0.6521739130434783,50.407844326434756
For columns 'salary' and 'bonus': Ensure that the sum of (salary) and (bonus) must equal or exceed the minimum threshold of 50000.,"expect_multicolumn_sum_to_equal(column_list=[""salary"", ""bonus""], target_value=50000)","expect_column_pair_sum_to_be_between(column_A=""salary"", column_B=""bonus"", threshold=50000)",0.5185185185185186,0.08,0.5185185185185186,28.866268445635875
For the `purchase_date` field: Ensure all entries are of type 'date' and that there are no missing values. Validate that all dates are within the last year.,"expect_column_values_to_be_of_type(column=""purchase_date"", type_=""date""),expect_column_values_to_not_be_null(column=""purchase_date""),expect_column_values_to_be_between(column=""purchase_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""purchase_date""),expect_column_values_to_be_between(column=""purchase_date"", min_value=""2022-10-10"", max_value=""2023-10-10"")",0.7142857142857144,0.6470588235294117,0.7142857142857144,54.95976748850806
For the `student_id` column: Ensure all values are unique and of type 'integer'. Validate that this field cannot be null.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""student_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
Ensure that the `sent_time` column values are in ISO 8601 format and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%dT%H:%M:%S%z""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%dT%H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")",0.9824561403508771,0.9454545454545454,0.9824561403508771,94.71348559974824
Ensure the number of rows in the `employee_records` table equals 100.,"expect_table_row_count_to_equal(column=""employee_records"", value=100)","expect_table_row_count_to_be_between(table=""employee_records"", min_value=100, max_value=100)",0.6666666666666666,0.48,0.6666666666666666,50.305537131404854
"For field `email`: Ensure all values match the pattern `^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$` and are no longer than `255` characters.","expect_column_values_to_match_regex(column=""email"", regex=r""^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=1, max_value=255)","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_value_lengths_to_be_between(column=""email"", min_value=0, max_value=255)",0.746268656716418,0.676923076923077,0.746268656716418,75.04132402247873
Validate that the `enrollment_date` is within the academic year range of `01-01-2023` to `12-31-2023`.,"expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
Ensure the `reading_date` column values are valid dates and fall within the last 12 months.,"expect_column_values_to_be_dateutil_parseable(column=""reading_date""),expect_column_values_to_be_between(column=""reading_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""reading_date""),expect_column_values_to_be_between(column=""reading_date"", min_value=""2022-09-01"", max_value=""2023-09-01"")",0.9310344827586207,0.8571428571428571,0.9310344827586207,92.23765517412046
Validate that the `username` field contains unique values and is of type 'string'. Ensure it is required (not null).,"expect_column_values_to_be_unique(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""string""),expect_column_values_to_not_be_null(column=""username"")","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""string""),expect_column_values_to_not_be_null(column=""username"")",1.0,1.0,1.0,100.00000000000004
Check that the `created_at` field follows the format 'YYYY-MM-DD HH:MM:SS' and can be parsed accurately. Flag any non-compliant entries.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""created_at"")","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""created_at"")",1.0,1.0,1.0,100.00000000000004
Confirm that `response_time` is greater than or equal to `0` for all service requests.,"expect_column_values_to_be_greater_than(column=""response_time"", value=0)","expect_column_values_to_be_greater_than(column=""response_time"", value=0)",1.0,1.0,1.0,100.00000000000004
Ensure the `check_in_date` entries are in the format 'YYYY-MM-DD' and are earlier than the `check_out_date`.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")","expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_greater_than(column=""check_in_date"", value=""check_out_date"")",0.8955223880597015,0.7384615384615385,0.8955223880597015,78.38980450011162
For field 'phone_number': Ensure the field matches the type 'text'. Validate that all values conform to the standard phone number format using regex.,"expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\d{10}$"")",0.9056603773584904,0.8627450980392156,0.9056603773584904,83.3203435765348
For table 'articles': Ensure the column 'author_id' exists and corresponds to valid IDs in the 'authors' table. Ensure the row count is equal to the number of published articles.,"expect_column_to_exist(column=""author_id""),expect_select_column_values_to_be_unique_within_record(column=""author_id""),expect_table_row_count_to_equal(other_table=""published_articles"")","expect_column_to_exist(column=""author_id""),expect_column_values_to_be_unique(column=""author_id""),expect_column_values_to_be_of_type(column=""author_id"", type_=""int""),expect_table_row_count_to_be_between(min_value=1, max_value=1000)  # Replace with actual table row count for ""published articles"".",0.6075949367088608,0.4935064935064935,0.6075949367088608,45.3658446474805
For fields 'first_name' and 'last_name': Ensure both fields match the type 'text'. Validate that the length of (first_name) is between 2 and 30 characters and (last_name) is between 2 and 30 characters. Ensure these fields exist.,"expect_column_to_exist(column=""first_name""),expect_column_to_exist(column=""last_name""),expect_column_values_to_be_of_type(column=""first_name"", type_=""text""),expect_column_values_to_be_of_type(column=""last_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""first_name"", min_value=2, max_value=30),expect_column_value_lengths_to_be_between(column=""last_name"", min_value=2, max_value=30)","expect_column_to_exist(column=""first_name""),expect_column_to_exist(column=""last_name""),expect_column_values_to_be_of_type(column=""first_name"", type_=""text""),expect_column_values_to_be_of_type(column=""last_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""first_name"", min_value=2, max_value=30),expect_column_value_lengths_to_be_between(column=""last_name"", min_value=2, max_value=30)",1.0,1.0,1.0,100.00000000000004
For field 'student_id': Ensure the field is required (not null). Ensure the values in 'student_id' are unique. Ensure this field matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Verify that the `humidity` column contains values between `0` and `100` and that each value is an integer.,"expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""humidity"", type_=""int"")","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""humidity"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Check the `enrollment_date` column to confirm all entries are in the correct date format (YYYY-MM-DD) and fall within the current academic year.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-05-31"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-08-01"")",0.9411764705882353,0.9393939393939394,0.9411764705882353,94.86962941572061
Check the `shipment_date` field to ensure it is not null and follows the `YYYY-MM-DD` format.,"expect_column_values_to_not_be_null(column=""shipment_date""),expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""shipment_date""),expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For the `diagnosis_code` field: Ensure values conform to the ICD-10 format. Validate that no code is missing.,"expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-Z][0-9]{1,3}(\.[0-9]{1,4})?$""),expect_column_values_to_not_be_null(column=""diagnosis_code"")","expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^\d{5}$""),expect_column_values_to_be_unique(column=""diagnosis_code""),expect_column_values_to_not_be_null(column=""diagnosis_code"")",0.6666666666666667,0.6229508196721313,0.6666666666666667,65.01660597785951
Validate that the `publish_date` column contains dates that are not in the future and that the maximum date does not exceed the current year.,"expect_column_values_to_be_dateutil_parseable(column=""publish_date""),expect_column_max_to_be_between(column=""publish_date"", max_value=datetime.datetime.now().year)","expect_column_values_to_be_between(column=""publish_date"", min_value=""1900-01-01"", max_value=""current_year-01-01"") # replace current_year with the actual current year today",0.4444444444444445,0.3461538461538462,0.4444444444444445,44.2512164713319
For field 'performance_score': Ensure the field matches the type 'float'. Verify that all values fall within the expected range of 0 to 100.,"expect_column_values_to_be_of_type(column=""performance_score"", type_=""float""),expect_column_values_to_be_between(column=""performance_score"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""performance_score"", type_=""float""),expect_column_values_to_be_between(column=""performance_score"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'product_id': Ensure the field exists. Validate that all values match the pattern '^[A-Z]{2}[0-9]{4}$'.,"expect_column_to_exist(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[A-Z]{2}[0-9]{4}$"")","expect_column_to_exist(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=""^[A-Z]{2}[0-9]{4}$"")",0.9787234042553191,0.9333333333333332,0.9787234042553191,95.62072972676275
For the `medical_record` field: Ensure that values are valid JSON objects and conform to the specified JSON schema for medical records.,"expect_column_values_to_be_json_parseable(column=""medical_record""),expect_column_values_to_match_json_schema(column=""medical_record"", schema=""your_json_schema_here"")","expect_column_values_to_match_json_schema(column=""medical_record"")",0.5714285714285715,0.5454545454545454,0.5714285714285715,20.374030905570727
"Verify that the average `blood_pressure` readings fall within the range of 90 to 180 mmHg, and check if the standard deviation is below 10 mmHg.","expect_column_mean_to_be_between(column=""blood_pressure"", min_value=90, max_value=180),expect_column_stdev_to_be_between(column=""blood_pressure"", min_value=0, max_value=10)","expect_column_mean_to_be_between(column=""blood_pressure"", min_value=90),expect_column_mean_to_be_between(column=""blood_pressure"", max_value=180),expect_column_stdev_to_be_less_than(column=""blood_pressure"", threshold=10)",0.7575757575757577,0.6875,0.7272727272727272,66.61133596820733
Ensure combinations of `account_id` and `transaction_id` are unique across all records.,"expect_compound_columns_to_be_unique(column_A=""account_id"", column_B=""transaction_id"")","expect_compound_columns_to_be_unique(column_A=""account_id"", column_B=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
"For the `property_type`: Ensure that entries match the types ['Apartment', 'House', 'Condo'] and contain no duplicates.","expect_column_values_to_be_in_set(column=""property_type"", value_set=[""Apartment"", ""House"", ""Condo""]),expect_column_values_to_be_unique(column=""property_type"")","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo']),expect_column_values_to_not_be_unique(column=""property_type"")",0.9795918367346939,0.9361702127659574,0.9795918367346939,78.29697033321236
For the `player_stats` JSON column: Validate that each entry conforms to the specified JSON schema ensuring all required fields are present.,"expect_column_values_to_match_json_schema(column=""player_stats"", schema={...})  # Replace { ... } with the actual JSON schema.","expect_column_values_to_match_json_schema(column=""player_stats"")",0.7407407407407407,0.72,0.7407407407407407,37.04328380481385
"For the `height` and `weight` columns, ensure that the average `BMI` calculated from these values is within the range of 15 to 40.","expect_column_mean_to_be_between(column=""BMI"", min_value=15, max_value=40)","expect_column_mean_to_be_between(column=""BMI"", min_value=15, max_value=40)",1.0,1.0,1.0,100.00000000000004
"Check that the `budget` column does not exceed 1,000,000 in total across all records.","expect_column_sum_to_be_between(column=""budget"", min_value=0, max_value=1000000)","expect_column_sum_to_be_between(column=""budget"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
For field 'fraud_score': Ensure the mean value does not exceed the threshold of 100. Ensure standard deviation remains within acceptable limits.,"expect_column_mean_to_be_between(column=""fraud_score"", min_value=None, max_value=100),expect_column_stdev_to_be_between(column=""fraud_score"", min_value=None, max_value=<acceptable_limit>)","expect_column_mean_to_be_between(column=""fraud_score"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""fraud_score"", min_value=None, max_value=25)",0.9180327868852459,0.8813559322033899,0.9180327868852459,87.66873669754834
Verify that the `quantity` column contains numeric values and all entries are greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""quantity"", type_=""int""), ,expect_column_values_to_be_between(column=""quantity"", min_value=0)","expect_column_values_to_be_of_type(column=""quantity"", type_=""float""),expect_column_values_to_be_between(column=""quantity"", min_value=0, max_value=None)",0.8936170212765958,0.8444444444444444,0.8936170212765958,82.50175837803843
For `user_id`: Ensure values are unique and of type 'integer'. Confirm that there are no missing values.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_not_be_null(column=""user_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
"Validate that the `case_status` field only contains values from the set `['Open', 'Closed', 'Pending']`.","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `vote_cast` column includes only values from the set `['Yes', 'No', 'Abstain']`.","expect_column_values_to_be_in_set(column=""vote_cast"", value_set=['Yes', 'No', 'Abstain'])","expect_column_values_to_be_in_set(column=""vote_cast"", value_set=['Yes', 'No', 'Abstain'])",1.0,1.0,1.0,100.00000000000004
For field 'ip_address': Ensure this field matches the type 'text'. Ensure this field contains unique values and conforms to valid IP address formats.,"expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^(?:[0-9a-fA-F]{1,4}:){1,7}:$|^(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$|^(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}$|^(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}$|^(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}$|^(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}$|^[0-9a-fA-F]{1,4}:(?::[0-9a-fA-F]{1,4}){1,6}$|^:((?::[0-9a-fA-F]{1,4}){1,7}|:)$|^fe80:(?:[0-9a-fA-F]{0,4}:){0,4}%[0-9a-zA-Z]{1,}|^::(?:ffff(:0{1,1}){0,1})?((25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?))|([0-9a-fA-F]{1,4}:){1,5}:((25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?))|[0-9a-fA-F]{1,4}:((25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?))|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|(2[0-4][0-9]|[01]?[0-9][0-9]?)))))$"")","expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")ılmaktadır",0.23098591549295774,0.22662889518413595,0.23098591549295774,0.13759625305522447
Ensure that the `product_sku` column in the `inventory` table consists of alphanumeric strings of exactly 8 characters.,"expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[a-zA-Z0-9]{8}$"")","expect_column_value_lengths_to_equal(column=""product_sku"", length=8),expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[a-zA-Z0-9]{8}$"")",0.7441860465116279,0.7317073170731707,0.7441860465116279,57.96296298112396
For field 'device_id': Ensure 'device_id' values are unique across the dataset to prevent duplication.,"expect_column_values_to_be_unique(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `research_id` column contains only distinct values in the dataset.,"expect_column_values_to_be_unique(column=""research_id"")","expect_column_values_to_be_unique(column=""research_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the mean response time in the `incident_response_time` column is below 300 seconds and the standard deviation does not exceed 50 seconds.,"expect_column_mean_to_be_between(column=""incident_response_time"", min_value=None, max_value=300),expect_column_stdev_to_be_between(column=""incident_response_time"", min_value=None, max_value=50)","expect_column_mean_to_be_between(column=""incident_response_time"", min_value=None, max_value=300),expect_column_stdev_to_be_between(column=""incident_response_time"", max_value=50)",0.9508196721311475,0.9152542372881356,0.9508196721311475,89.77660135170622
For field 'feedback_score': Validate that all values are integers between 1 and 5.,"expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""feedback_score"", type_=""int"")","expect_column_values_to_be_of_type(column=""feedback_score"", type_=""int""),expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=5)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
For the `release_date` column: Ensure all entries are of type 'datetime' and formatted as 'YYYY-MM-DD'. Validate that no entries are in the future.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""release_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""release_date"")  # This assumes the dates are sorted in ascending order.",0.7391304347826086,0.6888888888888889,0.7173913043478259,63.459499457695074
For the `sent_time` field: Ensure all datetime entries follow the format `%Y-%m-%d %H:%M:%S`. Report any discrepancies.,"expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S"")ыџN",0.972972972972973,0.9714285714285714,0.972972972972973,97.64540896763108
Ensure the `customer_id` column contains unique values with no null entries.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
"For the `hire_date` field: Ensure it exists, is of type 'date', and all dates are not in the future.","expect_column_to_exist(column=""hire_date""),expect_column_values_to_be_of_type(column=""hire_date"", type_=""date""),expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_to_exist(column=""hire_date""),expect_column_values_to_be_of_type(column=""hire_date"", type_=""date""),expect_column_values_to_be_in_set(column=""hire_date"", value_set=[date for date in hire_dates if date <= datetime.now()])",0.7272727272727273,0.6666666666666666,0.7272727272727273,71.10471804556232
Ensure the `supplier_rating` column values follow a normal distribution with a mean greater than 4.,"expect_column_mean_to_be_between(column=""supplier_rating"", min_value=4)","expect_column_mean_to_be_between(column=""supplier_rating"", min_value=4)",1.0,1.0,1.0,100.00000000000004
"Validate that the `tariff_rate` field is within the range of `0.05` to `2.00`, with two decimal places.","expect_column_values_to_be_between(column=""tariff_rate"", min_value=0.05, max_value=2.00),expect_column_values_to_match_regex(column=""tariff_rate"", regex=r""^\d+\.\d{2}$"")","expect_column_values_to_be_between(column=""tariff_rate"", min_value=0.05, max_value=2.00, decimals=2)",0.72,0.6666666666666667,0.72,33.332258042916045
"Ensure that the `email_priority` field only contains values from `['low', 'normal', 'high']` and is unique within the same `user_id`.","expect_column_values_to_be_in_set(column=""email_priority"", value_set=['low', 'normal', 'high']),expect_select_column_values_to_be_unique_within_record(column_a=""email_priority"", column_b=""user_id"")","expect_column_values_to_be_in_set(column=""email_priority"", value_set=['low', 'normal', 'high']),expect_column_values_to_be_unique_within_column(column=""email_priority"")",0.896551724137931,0.75,0.8620689655172413,72.09945650630787
Ensure the sum of the `hours_worked` and `overtime_hours` columns equals the `total_hours` column for each record.,"expect_multicolumn_sum_to_equal(column_list=[""hours_worked"", ""overtime_hours""], target_column=""total_hours"")","expect_multicolumn_sum_to_equal(column_list=[""total_hours"", ""hours_worked"", ""overtime_hours""])",0.9285714285714286,0.7692307692307692,0.7857142857142856,78.04124581907575
Check that the Kullback-Leibler divergence between the `player_stats_before` and `player_stats_after` distributions is below 0.1.,"expect_column_kl_divergence_to_be_less_than(column_A=""player_stats_before"", column_B=""player_stats_after"", threshold=0.1)","expect_column_kl_divergence_to_be_between(column=""player_stats_before"", column=""player_stats_after"", lower_bound=0, upper_bound=0.1)",0.7441860465116279,0.5365853658536585,0.7441860465116279,64.4039435135577
Ensure the `date_added` column contains only datetime values formatted as '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""date_added"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""date_added"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `employee_status` column only contains values from the set ['Active', 'Inactive', 'On Leave'].","expect_column_values_to_be_in_set(column=""employee_status"", value_set=['Active', 'Inactive', 'On Leave'])","expect_column_values_to_be_in_set(column=""employee_status"", value_set=[""Active"", ""Inactive"", ""On Leave""])",1.0,1.0,1.0,67.4211512697052
For field 'client_zip_code': Ensure the field matches the type 'text'. Validate that (client_zip_code) matches the regex pattern '^[0-9]{5}(-[0-9]{4})?$'. Ensure this field exists.,"expect_column_to_exist(column=""client_zip_code""),expect_column_values_to_be_of_type(column=""client_zip_code"", type_=""text""),expect_column_values_to_match_regex(column=""client_zip_code"", regex=r""^[0-9]{5}(-[0-9]{4})?$"")","expect_column_to_exist(column=""client_zip_code""),expect_column_values_to_be_of_type(column=""client_zip_code"", type_=""text""),expect_column_values_to_match_regex(column=""client_zip_code"", regex=r""^[0-9]{5}(-[0-9]{4})?$"")",1.0,1.0,1.0,100.00000000000004
For the `study_type` column: Ensure values match the regex pattern `^(Qualitative|Quantitative|Mixed)$`.,"expect_column_values_to_match_regex(column=""study_type"", regex=r""^(Qualitative|Quantitative|Mixed)$"")","expect_column_values_to_be_of_type(column=""study_type"", type_=""text""),expect_column_values_to_match_regex(column=""study_type"", regex=r""^(Qualitative|Quantitative|Mixed)$"")",0.7000000000000001,0.6842105263157895,0.7000000000000001,52.73468151739389
Ensure the `diagnosis_code` column only includes values from the set of valid ICD-10 codes.,"expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_icd10_codes)","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=[""valid_i10_codes""])",0.9333333333333333,0.8571428571428571,0.9333333333333333,75.60931150622578
"Verify that the total number of rows in the `user_sessions` table is between 200 and 500, ensuring an adequate dataset.","expect_table_row_count_to_be_between(table=""user_sessions"", min_value=200, max_value=500)","expect_table_row_count_to_be_between(table=""user_sessions"", min_value=200, max_value=500)",1.0,1.0,1.0,100.00000000000004
Check that the `average_rating` column has a mean value between `0` and `10`.,"expect_column_mean_to_be_between(column=""average_rating"", min_value=0, max_value=10)","expect_column_mean_to_be_between(column=""average_rating"", min_value=0, max_value=10)",1.0,1.0,1.0,100.00000000000004
Check that the `completion_time` for courses is arranged in increasing order.,"expect_column_values_to_be_increasing(column=""completion_time"")","expect_column_values_to_be_increasing(column=""completion_time"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `status` column contains only values from the set: `['Open', 'In Progress', 'Closed']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'In Progress', 'Closed'])","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""In Progress"", ""Closed""])",1.0,1.0,1.0,65.65745183153668
Verify that the `snowfall_amount` values are non-negative and check for any missing entries.,"expect_column_values_to_be_between(column=""snowfall_amount"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""snowfall_amount"")","expect_column_values_to_be_between(column=""snowfall_amount"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""snowfall_amount"")",1.0,1.0,1.0,100.00000000000004
For field 'amount': Ensure the field matches the type 'float'. Verify that amounts are greater than zero.,"expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_be_greater_than(column=""amount"", value=0)","expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_be_between(column=""amount"", min_value=0.01, max_value=None)",0.8333333333333333,0.7391304347826089,0.8333333333333333,76.28004026703547
Check that the `candidate_vote_count` follows a distribution with a KL divergence below 0.1 compared to expected candidate performance.,"expect_column_kl_divergence_to_be_less_than(column=""candidate_vote_count"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""candidate_vote_count"", threshold=0.1)",1.0,1.0,1.0,100.00000000000004
"For the `hashtag` column: Confirm that all values do not match any SQL-like patterns from the list `['%20', '%23']`.","expect_column_values_to_not_match_regex_list(column=""hashtag"", regex_list=[r""%20"", r""%23""])","expect_column_values_to_not_match_regex_list(column=""hashtag"", regex_list=[""%20"", ""%23""])",0.9333333333333333,0.7857142857142856,0.9333333333333333,86.67689264652505
For the `policy_holder_age`: Ensure the values are within the range of 18 to 70 and are arranged in increasing order.,"expect_column_values_to_be_between(column=""policy_holder_age"", min_value=18, max_value=70),expect_column_values_to_be_increasing(column=""policy_holder_age"")","expect_column_values_to_be_between(column=""policy_holder_age"", min_value=18, max_value=70),expect_column_values_to_be_increasing(column=""policy_holder_age"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `agent_email` column matches a standard email format and does not include any entries from the banned list `['test.com', 'example.com']`.","expect_column_values_to_match_regex(column=""agent_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_in_set(column=""agent_email"", value_set=['test.com', 'example.com'])","expect_column_values_to_match_regex(column=""agent_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_in_set(column=""agent_email"", value_set=banned_list)",0.9,0.896551724137931,0.9,88.7382188450037
For the `wind_speed` column: Ensure the standard deviation is less than or equal to 15 km/h.,"expect_column_stdev_to_be_between(column=""wind_speed"", max_value=15)","expect_column_stdev_to_be_between(column=""wind_speed"", max_value=15)ыџN",0.9600000000000001,0.9565217391304348,0.9600000000000001,96.07071390340015
Ensure that the `supplier_id` column exists and that all values correspond to valid entries in the `suppliers` table.,"expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_values)","expect_column_to_exist(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_ids)",0.9545454545454546,0.9523809523809523,0.9545454545454546,96.29257778548396
Check that the `course_material_json` column contains valid JSON objects conforming to the specified JSON schema. Validate that no entries are missing.,"expect_column_to_exist(column=""course_material_json""),expect_column_values_to_be_json_parseable(column=""course_material_json""),expect_column_values_to_not_be_null(column=""course_material_json"")","expect_column_values_to_match_json_schema(column=""course_material_json"", schema={""type"": ""object"", ""required"": [""title"", ""description""], ""properties"": {""title"": {""type"": ""string""}, ""description"": {""type"": ""string""}}}),expect_column_values_to_not_be_null(column=""course_material_json"")",0.6153846153846153,0.507936507936508,0.6153846153846153,38.69526691102347
Validate that the `filing_date` column contains dates that are not in the future.,"expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_in_set(column=""filing_date"", value_set=[date for date in range(datetime.now().year)])","expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""filing_date"", min_value=""1900-01-01"", max_value=""today"")ЎыџN",0.547945205479452,0.4507042253521127,0.5205479452054794,41.29246146098316
Verify that the `study_completion_date` column values are later than the `study_start_date` values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""study_completion_date"", column_B=""study_start_date"")","expect_column_values_to_be_greater_than(column=""study_completion_date"", other_column=""study_start_date"")",0.8333333333333334,0.47058823529411764,0.8333333333333334,59.12427937541292
For field 'vote_data': Ensure the field contains valid JSON objects and adheres to the defined JSON schema.,"expect_column_values_to_be_json_parseable(column=""vote_data""),expect_column_values_to_match_json_schema(column=""vote_data"", schema=defined_json_schema)","expect_column_values_to_be_json_parseable(column=""vote_data""),expect_column_values_to_match_json_schema(column=""vote_data"", schema=defined_schema)",0.9787234042553191,0.9333333333333332,0.9787234042553191,94.6475293504401
Ensure the `timestamp` column adheres to the ISO 8601 format and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%f""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")",0.9629629629629629,0.9230769230769231,0.9629629629629629,96.0132862288073
For the `check_in_date`: Ensure all dates are within the range of '2023-01-01' to '2023-12-31'. Values must not be null.,"expect_column_values_to_be_between(column=""check_in_date"", min_value=""2023-01-01"", max_value=""2023-12-31""),expect_column_values_to_not_be_null(column=""check_in_date"")","expect_column_values_to_be_between(column=""check_in_date"", min_value=""2023-01-01"", max_value=""2023-12-31""),expect_column_values_to_not_be_null(column=""check_in_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `sales_date` column follows the format 'MM/DD/YYYY' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""sales_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""sales_date"")","expect_column_to_exist(column=""sales_date""),expect_column_values_to_match_strftime_format(column=""sales_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""sales_date"")ıldığında",0.8474576271186441,0.8421052631578948,0.8474576271186441,76.46478679475176
Validate that the number of posts in the `posts` table matches the user count in the `users` table to ensure each user has at least one post.,"expect_table_row_count_to_equal_other_table(table=""posts"", other_table=""users"")","expect_column_pair_values_to_be_equal(column_A=""posts.count"", column_B=""users.count"")",0.42857142857142855,0.0,0.3571428571428571,13.268708142926682
"Ensure the `price` column values are greater than 0 and less than or equal to 10,000.","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)ılmaktadır",0.9333333333333333,0.9285714285714286,0.9333333333333333,96.60520303055019
For the `arrival_time`: Ensure values are parsed correctly and fall within the expected delivery window.,"expect_column_values_to_be_dateutil_parseable(column=""arrival_time""),expect_column_values_to_be_between(column=""arrival_time"", min_value=""2023-01-01T00:00:00"", max_value=""2023-12-31T23:59:59"")","expect_column_values_to_be_dateutil_parseable(column=""arrival_time""),expect_column_values_to_be_between(column=""arrival_time"", min_value=""expected_min_delivery_time"", max_value=""expected_max_delivery_time"") CLIIIK",0.7076923076923077,0.6666666666666667,0.7076923076923077,71.66029975992929
For field 'account_creation_date': Ensure the field exists. Validate that all values in 'account_creation_date' conform to the format 'YYYY-MM-DD'. Check that no account was created more than five years ago.,"expect_column_to_exist(column=""account_creation_date""),expect_column_values_to_match_strftime_format(column=""account_creation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""account_creation_date""),expect_column_values_to_be_between(column=""account_creation_date"", min_value=""2018-01-01"", max_value=""2023-01-01"")","expect_column_to_exist(column=""account_creation_date""),expect_column_values_to_match_strftime_format(column=""account_creation_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""account_creation_date"", min_value=""2019-05-01"", max_value=datetime.datetime.now().strftime(""%Y-%m-%d""))",0.7572815533980584,0.7326732673267328,0.7572815533980584,71.32523308450004
Verify that the `filing_date` column contains dates in the format 'MM/DD/YYYY' and are not future dates.,"expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_in_set(column=""filing_date"", value_set=[date for date in range(datetime.now().year)])","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_less_than(column=""filing_date"", value=""today"")",0.7741935483870968,0.7333333333333334,0.7741935483870968,68.75131291505481
Ensure the `registration_date` column matches the format `MM/DD/YYYY` and all dates are valid.,"expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""registration_date"")","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""registration_date"")ыџN",0.9803921568627451,0.9795918367346939,0.9803921568627451,98.31872889241426
Ensure the number of rows in the `customer_feedback` table is equal to the number of unique entries in the `customer_id` column.,"expect_table_row_count_to_equal(column=""customer_feedback"", value=expect_column_unique_value_count_to_be_equal(column=""customer_id""))","expect_table_row_count_to_equal(column=""customer_feedback"", row_count=unique_customer_ids)",0.6857142857142857,0.4848484848484849,0.6285714285714286,41.51595821968107
Ensure the `customer_feedback` column contains no null values and is of type 'text'.,"expect_column_values_to_not_be_null(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text"")","expect_column_values_to_not_be_null(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `inventory_status` column contains only the values from the set `['in_stock', 'out_of_stock', 'back_order']`.","expect_column_values_to_be_in_set(column=""inventory_status"", value_set=['in_stock', 'out_of_stock', 'back_order'])","expect_column_values_to_be_in_set(column=""inventory_status"", value_set=['in_stock', 'out_of_stock', 'back_order'])",1.0,1.0,1.0,100.00000000000004
"In the `genre` column: Ensure that values match one of the following patterns: `['Action', 'Adventure', 'RPG']`, and there are no duplicates.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG']),expect_column_values_to_be_unique(column=""genre"")","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG']) and column_values_to_be_unique(column=""genre"")",0.9545454545454546,0.9047619047619048,0.9545454545454546,90.86062123206543
For field 'quantity': Ensure this field exists. Validate that all values in 'quantity' are non-negative integers and that the column has no null values.,"expect_column_to_exist(column=""quantity""),expect_column_values_to_not_be_null(column=""quantity""),expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=0, max_value=None)","expect_column_to_exist(column=""quantity""),expect_column_values_to_not_be_null(column=""quantity""),expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
Check that the `restock_date` is formatted as `YYYY-MM-DD` and is a future date.,"expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""restock_date"")","expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""restock_date""),expect_column_values_to_be_increasing(column=""restock_date"")  # Future dates should increase over time, since today should be the maximum.",0.6857142857142856,0.676470588235294,0.6857142857142856,58.91082178422078
"Ensure that for the 'developer' and 'publisher' columns, the combination is unique within the dataset.","expect_compound_columns_to_be_unique(columns=[""developer"", ""publisher""])","expect_compound_columns_to_be_unique(column_A=""developer"", column_B=""publisher"")",0.8571428571428571,0.631578947368421,0.8571428571428571,54.60241725418134
"For the `rating` column, ensure all values are within the range of 1 to 5 and are not null.","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
"For field 'claim_amount': Ensure the field matches the type 'decimal'. Validate that values in (claim_amount) are within the range of $0 to $100,000.","expect_column_values_to_be_of_type(column=""claim_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""claim_amount"", min_value=0, max_value=100000)","expect_column_values_to_be_of_type(column=""claim_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""claim_amount"", min_value=0, max_value=100000)",1.0,1.0,1.0,100.00000000000004
"Ensure that any uploaded CSV file includes the required headers: 'id', 'name', 'quantity', and 'price', and validate that the content adheres to the expected formats.","expect_file_to_have_valid_table_header(required_header_list=[""id"", ""name"", ""quantity"", ""price""])","expect_file_to_have_table_header(table_header=""id, name, quantity, price""),expect_file_column_values_to_match_strftime_format(column=""id"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_file_column_values_to_not_be_null(column=""name""),expect_file_column_values_to_not_be_null(column=""quantity""),expect_file_column_values_to_not_be_null(column=""price""),expect_file_to_be_valid_json_parseable,  # If the file is JSON file then use expect_column_values_to_be_json_parseable.  # For example:expect_file_to_be_json_parseable,expect_file_column_values_to_be_json_parseable(column=""quantity"")  # For this file, you would need to parse the JSON file contents to validate if the file is valid JSON and each quantity item has a corresponding price.",0.16901408450704225,0.09999999999999999,0.15492957746478872,7.158510674934787
Validate that the total `hours_played` in Gaming matches the sum of `daily_playtime` entries across a week.,"expect_multicolumn_sum_to_equal(column_list=[""daily_playtime""], target_column=""hours_played"")","expect_column_sum_to_equal_other_table_columns(column=""hours_played"", other_table=""daily_playtime"", other_column=""daily_playtime"")",0.625,0.33333333333333337,0.5,38.3129601797665
"For the `genre` field: Ensure values are from the set `['action', 'adventure', 'strategy', 'puzzle']`. Ensure the field is required (not null).","expect_column_values_to_be_in_set(column=""genre"", value_set=['action', 'adventure', 'strategy', 'puzzle']),expect_column_values_to_not_be_null(column=""genre"")","expect_column_values_to_be_in_set(column=""genre"", value_set=['action', 'adventure','strategy', 'puzzle']),expect_column_values_to_not_be_null(column=""genre"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_amount': Ensure the field matches the type 'decimal'. Validate that (transaction_amount) is greater than zero.,"expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""transaction_amount"", threshold=0)","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=None)",0.8076923076923077,0.72,0.8076923076923077,77.09289348246001
For field 'product_description': Ensure the field matches the type 'text'. Validate that the length of string values falls within a range of 10 to 500 characters.,"expect_column_values_to_be_of_type(column=""product_description"", type_=""text""),expect_column_value_lengths_to_be_between(column=""product_description"", min_value=10, max_value=500)","expect_column_values_to_be_of_type(column=""product_description"", type_=""text""),expect_column_value_lengths_to_be_between(column=""product_description"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
Validate that the `ip_address` column contains unique values and matches the standard IPv4 format.,"expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:\d{1,3}\.){3}\d{1,3}$"")",0.8928571428571429,0.8148148148148148,0.8928571428571429,81.79839264312791
For field 'last_updated': Ensure the field matches the type 'datetime'. Verify all values can be parsed using dateutil and are in the correct format.,"expect_column_values_to_be_of_type(column=""last_updated"", type_=""datetime""),expect_column_values_to_be_dateutil_parseable(column=""last_updated"")","expect_column_values_to_be_of_type(column=""last_updated"", type_=""datetime""),expect_column_values_to_be_dateutil_parseable(column=""last_updated""),expect_column_values_to_match_strftime_format(column=""last_updated"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.7096774193548387,0.7000000000000001,0.7096774193548387,53.42979291141877
Check that the `author_id` in the `articles` table exists in the `users` table and maintains referential integrity.,"expect_column_pair_values_to_be_in_set(column_A=""author_id"", column_B=""user_id"", value_set=users_table_user_ids)","expect_column_values_to_be_in_set(column=""author_id"", value_set=users),expect_column_pair_values_to_be_in_set(column_A=""author_id"", column_B=""user_id"", value_set=users)",0.7407407407407406,0.6923076923076923,0.7037037037037037,58.15694423650542
For the `content_length` column: Ensure values fall within the range of 300 to 5000 characters.,"expect_column_values_to_be_between(column=""content_length"", min_value=300, max_value=5000)","expect_column_value_lengths_to_be_between(column=""content_length"", min_value=300, max_value=5000)",0.967741935483871,0.896551724137931,0.967741935483871,85.92899528285
"Verify that the `category` field contains only values from the predefined list `['Technology', 'Health', 'Lifestyle']` and has no null entries.","expect_column_values_to_be_in_set(column=""category"", value_set=['Technology', 'Health', 'Lifestyle']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Technology', 'Health', 'Lifestyle']),expect_column_values_to_not_be_null(column=""category"")",1.0,1.0,1.0,100.00000000000004
"Confirm that the `view_count` column contains no negative values, indicating accurate tracking of user engagement.","expect_column_values_to_be_between(column=""view_count"", min_value=0)","expect_column_values_to_be_between(column=""view_count"", min_value=0)",1.0,1.0,1.0,100.00000000000004
Ensure that the `response_time` column follows a log-normal distribution with a KL divergence below 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""response_time"", threshold=0.1)","expect_column_kl_divergence_to_be_less_than(column=""response_time"", threshold=0.1)",1.0,1.0,1.0,100.00000000000004
Ensure the `citizen_id` column contains unique values across all records.,"expect_column_values_to_be_unique(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `quantity` column values are integers and fall within the range of 1 to 10,000.","expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=10000)","expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For the table 'shipping_logs': Ensure the number of rows is equal to the row count in 'inventory'. Ensure that 'tracking_number' is unique.,"expect_table_row_count_to_equal_other_table(table_name=""inventory""),expect_column_values_to_be_unique(column=""tracking_number"")","expect_table_row_count_to_equal_other_table(table=""shipping_logs"", other_table=""inventory""),expect_column_values_to_be_unique(column=""tracking_number"")",0.8837209302325583,0.8292682926829269,0.8837209302325583,78.01369851567566
For fields `bedrooms` and `bathrooms`: Ensure the sum of these columns is greater than or equal to 2 for all records.,"expect_multicolumn_sum_to_equal(column_list=[""bedrooms"", ""bathrooms""], target_value=2)","expect_multicolumn_sum_to_be_between(column_list=[""bedrooms"", ""bathrooms""], min_value=2)",0.8,0.6086956521739131,0.8,76.30637969873823
"For field 'coverage_type': Ensure the field matches the type 'text'. Ensure values in 'coverage_type' must exist in the set ['Full Coverage', 'Liability', 'Collision']. Ensure this field exists.","expect_column_to_exist(column=""coverage_type""),expect_column_values_to_be_of_type(column=""coverage_type"", type_=""text""),expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Full Coverage', 'Liability', 'Collision'])","expect_column_to_exist(column=""coverage_type""),expect_column_values_to_be_of_type(column=""coverage_type"", type_=""text""),expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Full Coverage', 'Liability', 'Collision'])",1.0,1.0,1.0,100.00000000000004
"For the `category` column: Ensure it contains only distinct values matching `['Technology', 'Health', 'Lifestyle']`.","expect_column_distinct_values_to_equal_set(column=""category"", value_set=[""Technology"", ""Health"", ""Lifestyle""])","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Technology', 'Health', 'Lifestyle'])",1.0,1.0,1.0,66.93976514189524
For field 'threat_level': Ensure the field matches the type 'integer'. Ensure values are within the range of 1 to 5.,"expect_column_values_to_be_of_type(column=""threat_level"", type_=""int""),expect_column_values_to_be_between(column=""threat_level"", min_value=1, max_value=5)","expect_column_values_to_be_of_type(column=""threat_level"", type_=""int""),expect_column_values_to_be_between(column=""threat_level"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
"Ensure the `ip_address` column matches the regular expression pattern for valid IP addresses: `^(\d{1,3}\.){3}\d{1,3}$`.","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(\d{1,3}\.){3}\d{1,3}$"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(\d{1,3}\.){3}\d{1,3}$"")ávací",0.972972972972973,0.9714285714285714,0.972972972972973,97.75137267097121
"Check that the `team` column values are from the defined set: `['Team A', 'Team B', 'Team C']`.","expect_column_values_to_be_in_set(column=""team"", value_set=['Team A', 'Team B', 'Team C'])","expect_column_values_to_be_in_set(column=""team"", value_set=['Team A', 'Team B', 'Team C'])",1.0,1.0,1.0,100.00000000000004
Verify that the `attack_timestamp` field is formatted correctly as `YYYY-MM-DD HH:MM:SS` and is not null.,"expect_column_values_to_match_strftime_format(column=""attack_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""attack_timestamp"")","expect_column_to_exist(column=""attack_timestamp""),expect_column_values_to_not_be_null(column=""attack_timestamp""),expect_column_values_to_match_strftime_format(column=""attack_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.888888888888889,0.8524590163934426,0.5714285714285714,78.82073879917684
For field `watch_time`: Verify that the average watch time is greater than 0 and less than 500 minutes.,"expect_column_mean_to_be_between(column=""watch_time"", min_value=0, max_value=500)","expect_column_mean_to_be_between(column=""watch_time"", min_value=0.5, max_value=500.5)",0.9375,0.8666666666666666,0.9375,85.70980059247852
For the `plaintiff_id` column: Ensure values are unique and not null. Verify that this ID exists in the `clients` table.,"expect_column_values_to_be_unique(column=""plaintiff_id""),expect_column_values_to_not_be_null(column=""plaintiff_id""),expect_select_column_values_to_be_unique_within_record(column=""plaintiff_id"")  # Note: This expectation assumes the presence of a reference to the 'clients' table for verification.","expect_column_values_to_be_unique(column=""plaintiff_id""),expect_column_values_to_not_be_null(column=""plaintiff_id""),expect_column_pair_values_to_be_equal(column_A=""plaintiff_id"", column_B=""clients"", value=""plaintiff_id"")",0.7073170731707318,0.5499999999999999,0.6829268292682927,66.72863804530401
"For the `grade` column, check that values are within the range of 0 to 100 and are represented as integers.","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""grade"", type_=""int"")","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""grade"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `employment_status` column contains only values from the set `['Active', 'Inactive', 'Terminated']`.","expect_column_values_to_be_in_set(column=""employment_status"", value_set=['Active', 'Inactive', 'Terminated'])","expect_column_values_to_be_in_set(column=""employment_status"", value_set=['Active', 'Inactive', 'Terminated'])átky",0.967741935483871,0.9655172413793104,0.967741935483871,97.01154303042087
"For the `medication_dosage` column, confirm that the values are within the range of `1` to `500` mg.","expect_column_values_to_be_between(column=""medication_dosage"", min_value=1, max_value=500)","expect_column_values_to_be_between(column=""medication_dosage"", min_value=1, max_value=500)",1.0,1.0,1.0,100.00000000000004
Ensure the `age` column values are integers greater than or equal to 0.,"expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=0)","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_values_to_be_between(column=""age"", min_value=0)",1.0,1.0,1.0,100.00000000000004
"Ensure that numeric fields such as `amount` in any domain are within the specified range of `$0` to `$1,000,000`.","expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=1000000)","expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=1000000)илакти",1.0,1.0,1.0,96.60520303055019
"For the `genre` column, ensure values are from the set `['Drama', 'Comedy', 'Documentary']` and are unique.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Drama', 'Comedy', 'Documentary']),expect_column_values_to_be_unique(column=""genre"")","expect_column_values_to_be_in_set(column=""genre"", value_set=['Drama', 'Comedy', 'Documentary']),expect_column_values_to_be_unique(column=""genre"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `transaction_type` column contains only distinct values from the set `['purchase', 'refund', 'transfer']`.","expect_column_distinct_values_to_equal_set(column=""transaction_type"", value_set=['purchase', 'refund', 'transfer'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['purchase','refund', 'transfer'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
"For field 'balance': Ensure the values in 'balance' are within the range of 0 to 1,000,000. Ensure this field exists.","expect_column_to_exist(column=""balance""),expect_column_values_to_be_between(column=""balance"", min_value=0, max_value=1000000)","expect_column_to_exist(column=""balance""),expect_column_values_to_be_between(column=""balance"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
Ensure the `location_code` is unique and matches the regex pattern `^[A-Z]{3}$`.,"expect_column_values_to_be_unique(column=""location_code""),expect_column_values_to_match_regex(column=""location_code"", regex=r""^[A-Z]{3}$"")","expect_column_values_to_be_unique(column=""location_code""),expect_column_values_to_match_regex(column=""location_code"", regex=r""^([A-Z]{3})$"")",1.0,1.0,1.0,90.80821798911968
"Ensure that the `content_type` column contains values that match the specified list: `['Article', 'Video', 'Image']`.","expect_column_values_to_be_in_set(column=""content_type"", value_set=['Article', 'Video', 'Image'])","expect_column_values_to_be_in_set(column=""content_type"", value_set=['Article', 'Video', 'Image'])",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column values are within the range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-30, max_value=50)",1.0,1.0,1.0,100.00000000000004
Confirm that the `performance_score` column values range between 1 and 5 for all employees.,"expect_column_values_to_be_between(column=""performance_score"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""performance_score"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
For the `data_format` field: Validate that it is of type 'text' and conforms to the specified JSON schema.,"expect_column_values_to_be_of_type(column=""data_format"", type_=""text""),expect_column_values_to_match_json_schema(column=""data_format"")","expect_column_values_to_be_of_type(column=""data_format"", type_=""text""),expect_column_values_to_match_json_schema(column=""data_format"", schema=""your_schema"")",0.9361702127659575,0.9333333333333333,0.9361702127659575,85.44293959070544
Ensure the `weight` column values are positive and do not exceed 5000 kg.,"expect_column_values_to_be_between(column=""weight"", min_value=0, max_value=5000)","expect_column_values_to_be_between(column=""weight"", min_value=0, max_value=5000)",1.0,1.0,1.0,100.00000000000004
For field 'comments': Ensure the field can be null. Ensure the length of 'comments' does not exceed 250 characters.,"expect_column_values_to_be_null(column=""comments""),expect_column_value_lengths_to_be_between(column=""comments"", min_value=0, max_value=250)","expect_column_values_to_be_null(column=""comments""),expect_column_value_lengths_to_be_between(column=""comments"", min_value=1, max_value=250)",0.9565217391304348,0.9090909090909091,0.9565217391304348,94.86610352970624
"In the `guest_reviews` dataset, ensure the `rating` field contains integer values between `1` and `5`.","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""rating"", type_=""int"")","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=5)",0.717948717948718,0.7027027027027027,0.717948717948718,39.32407208685984
"Ensure the `location` column only contains values from the predefined set of valid locations: `['New York', 'Los Angeles', 'Chicago']`.","expect_column_values_to_be_in_set(column=""location"", value_set=['New York', 'Los Angeles', 'Chicago'])","expect_column_values_to_be_in_set(column=""location"", value_set=[""New York"", ""Los Angeles"", ""Chicago""])",1.0,1.0,1.0,63.9506040646552
For field 'booking_id': Ensure the field is required (not null). Validate that the length of 'booking_id' is exactly 10 characters. Ensure this field exists.,"expect_column_to_exist(column=""booking_id""),expect_column_values_to_not_be_null(column=""booking_id""),expect_column_value_lengths_to_equal(column=""booking_id"", length=10)","expect_column_to_exist(column=""booking_id""),expect_column_values_to_be_not_null(column=""booking_id""),expect_column_value_lengths_to_equal(column=""booking_id"", length=10)",1.0,0.8888888888888888,0.9642857142857143,96.24391794293528
"For field 'email': Ensure the field matches the type 'text'. Validate that all entries conform to the pattern of a standard email format (e.g., user@example.com). Ensure this field exists.","expect_column_to_exist(column=""email""),expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_to_exist(column=""email""),expect_column_values_to_be_of_type(column=""email"", type_=""text""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.9836065573770492,0.983050847457627,0.9836065573770492,94.03059497144451
"Ensure the `game_genre` column consists only of values from the set `['Action', 'Adventure', 'Puzzle', 'RPG']`.","expect_column_values_to_be_in_set(column=""game_genre"", value_set=['Action', 'Adventure', 'Puzzle', 'RPG'])","expect_column_values_to_be_in_set(column=""game_genre"", value_set=['Action', 'Adventure', 'Puzzle', 'RPG'])",1.0,1.0,1.0,100.00000000000004
Validate that the `game_title` column contains string values with a minimum length of 3 characters and a maximum length of 100 characters.,"expect_column_value_lengths_to_be_between(column=""game_title"", min_value=3, max_value=100)","expect_column_value_lengths_to_be_between(column=""game_title"", min_value=3, max_value=100),expect_column_values_to_be_of_type(column=""game_title"", type_=""str"")",0.7272727272727273,0.7142857142857143,0.7272727272727273,51.977527909438486
For field `recorded_at`: Ensure the datetime strings match the format 'YYYY-MM-DD HH:MM:SS'. Validate no missing values.,"expect_column_to_exist(column=""recorded_at""),expect_column_values_to_match_strftime_format(column=""recorded_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""recorded_at"")","expect_column_values_to_match_strftime_format(column=""recorded_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""recorded_at"")",0.888888888888889,0.8852459016393442,0.888888888888889,77.2923069317465
"Ensure the `candidate_status` column contains only values from the set `['Active', 'Inactive', 'Withdrawn']`.","expect_column_values_to_be_in_set(column=""candidate_status"", value_set=['Active', 'Inactive', 'Withdrawn'])","expect_column_values_to_be_in_set(column=""candidate_status"", value_set=['Active', 'Inactive', 'Withdrawn'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `claim_date` is not null and falls within the range of `policy_start_date` and `policy_end_date`.,"expect_column_values_to_not_be_null(column=""claim_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""claim_date"", column_B=""policy_start_date""),expect_column_pair_values_A_to_be_less_than_B(column_A=""claim_date"", column_B=""policy_end_date"")","expect_column_values_to_not_be_null(column=""claim_date""),expect_column_pair_values_to_be_between(column_A=""policy_start_date"", column_B=""claim_date"", column_C=""policy_end_date"")",0.7341772151898733,0.5974025974025974,0.7341772151898733,53.88800566846936
For fields 'quantity_sold' and 'returns': Ensure that the sum of (quantity_sold) minus (returns) equals the total net sales for each product.,"expect_multicolumn_sum_to_equal(column_A=""quantity_sold"", column_B=""returns"", result_column=""total_net_sales"")","expect_multicolumn_sum_to_equal(column_list=[""quantity_sold"", ""returns""], target_column=""total_net_sales"")",0.8125,0.6000000000000001,0.8125,67.61187434639817
"For the `amount` column: Ensure values are non-negative floats and fall within the range [0.01, 10000.00].","expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_be_between(column=""amount"", min_value=0.01, max_value=10000.00)","expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_be_between(column=""amount"", min_value=0.01, max_value=10000.00)",1.0,1.0,1.0,100.00000000000004
Ensure the number of rows in the `comments` table is equal to the number of posts in the `posts` table.,"expect_table_row_count_to_equal_other_table(table=""comments"", other_table=""posts"")","expect_table_row_count_to_equal_other_table(table_name=""comments"", other_table_name=""posts"")",0.9285714285714286,0.7692307692307692,0.9285714285714286,77.82206607249452
For field 'discount_code': Ensure this field exists. Validate that 'discount_code' values do not match any patterns from the specified list of invalid codes.,"expect_column_to_exist(column=""discount_code""),expect_column_values_to_not_match_regex_list(column=""discount_code"", regex_list=[""INVALID1"", ""INVALID2"", ""INVALID3""])","expect_column_to_exist(column=""discount_code""),expect_column_values_to_not_match_regex_list(column=""discount_code"", regex_list=invalid_codes_list)",0.8695652173913043,0.8636363636363636,0.8695652173913043,75.5288834382947
Ensure the `transaction_id` column contains only unique values and is of type 'string'. Ensure this field exists.,"expect_column_to_exist(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Ensure the `age` column values are between 18 and 120 and are arranged in increasing order.,"expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120),expect_column_values_to_be_increasing(column=""age"")","expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120),expect_column_values_to_be_increasing(column=""age"")",1.0,1.0,1.0,100.00000000000004
For table 'financial_statements': Ensure the column (statement_id) exists. Validate that the number of rows equals the row count in the associated 'audit_reports' table.,"expect_column_to_exist(column=""statement_id""),expect_table_row_count_to_equal_other_table(table=""audit_reports"")","expect_column_to_exist(column=""statement_id""),expect_table_row_count_to_equal_other_table(table=""financial_statements"", other_table=""audit_reports"")",0.9,0.8947368421052632,0.9,79.78635747365944
"Validate that the `category` column contains values restricted to the set `['Blog', 'Article', 'News']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Blog', 'Article', 'News'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Blog', 'Article', 'News'])",1.0,1.0,1.0,100.00000000000004
Ensure the `alert_id` column contains unique values for each record in the dataset.,"expect_column_values_to_be_unique(column=""alert_id"")","expect_column_values_to_be_unique(column=""alert_id"")",1.0,1.0,1.0,100.00000000000004
"For the `coverage_type`: Ensure that the field contains distinct values from `['Basic', 'Enhanced', 'Premium']`.","expect_column_values_to_be_in_set(column=""coverage_type"", value_set=[""Basic"", ""Enhanced"", ""Premium""])","expect_column_distinct_values_to_be_in_set(column=""coverage_type"", value_set=['Basic', 'Enhanced', 'Premium'])",0.967741935483871,0.896551724137931,0.967741935483871,66.91046563661692
"Ensure the `salary` column is of type numeric and all values are within the range of $30,000 to $250,000.","expect_column_values_to_be_of_type(column=""salary"", type_=""numeric""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=250000)","expect_column_values_to_be_of_type(column=""salary"", type_=""numeric""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=250000)",1.0,1.0,1.0,100.00000000000004
Ensure the `variable_name` column contains no null values and adheres to the naming convention of starting with a letter followed by alphanumeric characters.,"expect_column_values_to_not_be_null(column=""variable_name""),expect_column_values_to_match_regex(column=""variable_name"", regex=r""^[a-zA-Z][a-zA-Z0-9]*$"")","expect_column_to_exist(column=""variable_name""),expect_column_values_to_not_be_null(column=""variable_name""),expect_column_value_lengths_to_be_between(column=""variable_name"", min_value=1, max_value=255)  # Min and max values must be set accordingly for your dataset.",0.4722222222222222,0.4,0.4722222222222222,41.911516870902894
For the `property_id` field: Ensure this field is unique and not null. Verify that it matches the expected type 'integer'.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""int"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""integer"")",0.967741935483871,0.9666666666666667,0.967741935483871,96.82792533867517
Confirm that the `tags` column contains no more than 10 unique tags for each article.,"expect_column_unique_value_count_to_be_between(column=""tags"", min_value=0, max_value=10)","expect_column_values_to_be_unique(column=""tags"")  # This will check for duplicates within each article. # But not for all the articles.  # We want to check if the unique tags for all articles together are less than or equal to 10.  # For example, if there are 10 tags in the `tags` column for Article #1, Article #2, Article #3,..., Article #10, we want to ensure that sum of unique tags across all those articles is less than or equal to 10.  # Note: We're expecting there to be a certain number of articles, say, 10 articles. In case that number changes, we can easily modify the query accordingly.",0.14516129032258063,0.04918032786885246,0.12903225806451613,7.481550396457451
Verify that the `user_id` field has exactly 1000 records and that all entries are unique. Check that it is of type 'integer'.,"expect_column_unique_value_count_to_be_equal(column=""user_id"", value=1000),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int"")","expect_column_value_count_to_be_between(column=""user_id"", min_value=1000, max_value=1000),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""int"")",0.9014084507042254,0.8115942028985507,0.9014084507042254,84.86848879970131
"In the 'diagnosis_code' column, ensure values match the standard ICD-10 code format and that all entries are unique.","expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-Z]\d{2}(?:\.\d{1,4})?$""),expect_column_values_to_be_unique(column=""diagnosis_code"")","expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^\d{3}\.\d{3}\.\d{3}$""),expect_column_values_to_be_unique(column=""diagnosis_code"")",0.830188679245283,0.7058823529411765,0.830188679245283,75.94290104268536
For the `listing_date`: Validate that all entries are in the format `MM/DD/YYYY` and represent dates within the last year.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_between(column=""listing_date"",min= 2024-01-01, max=""2024-12-01"")#adjust dates according to current date","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""listing_date""),expect_column_values_to_be_between(column=""listing_date"", min_value=""2022-10-01"", max_value=""2023-10-31"")",0.7073170731707317,0.6250000000000001,0.6585365853658537,60.06961505033905
"Ensure the average `monthly_cost` does not exceed $300, and the minimum should be at least $20.","expect_column_mean_to_be_between(column=""monthly_cost"", min_value=20, max_value=300),expect_column_min_to_be_between(column=""monthly_cost"", min_value=20)","expect_column_mean_to_be_between(column=""monthly_cost"", min_value=20),expect_column_mean_to_be_between(column=""monthly_cost"", max_value=300)",0.9019607843137256,0.7755102040816326,0.823529411764706,82.10599265532603
"Ensure the `attack_vector` column contains only distinct values from the predefined list `['Phishing', 'Malware', 'DDoS']`.","expect_column_values_to_be_in_set(column=""attack_vector"", value_set=['Phishing', 'Malware', 'DDoS'])","expect_column_values_to_be_in_set(column=""attack_vector"", value_set=['Phishing', 'Malware', 'DDoS'])",1.0,1.0,1.0,100.00000000000004
"For the `status` column, ensure that it only contains values from the set `['Draft', 'Published', 'Archived']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Draft', 'Published', 'Archived'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Draft', 'Published', 'Archived'])",1.0,1.0,1.0,100.00000000000004
"For field `diagnosis_code`: Ensure this field exists as a string and contains codes that match the specified set `['A00', 'B99', 'C00']`.","expect_column_to_exist(column=""diagnosis_code""),expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""str""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=['A00', 'B99', 'C00'])","expect_column_to_exist(column=""diagnosis_code""),expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""string""),expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=['A00', 'B99', 'C00'])",0.9705882352941176,0.9393939393939394,0.9705882352941176,96.82406246501176
"For field 'geo_coordinates': Validate that values conform to the pattern '(latitude, longitude)' where latitude is between -90 and 90 and longitude is between -180 and 180.","expect_column_values_to_match_regex(column=""geo_coordinates"", regex=r""^\([-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?((1[0-7]\d)|([1-9]?\d)(\.\d+)?)\)$"")","expect_column_values_to_match_json_schema(column=""geo_coordinates"", schema={""type"": ""array"", ""items"": {""type"": ""array"", ""length"": 2, ""minValue"": 0, ""maxValue"": 2, ""itemSchema"": {""type"": ""string"", ""pattern"": ""(-?\\d{1,3}(\\.\\d+?)?|\\d+)([\\,E]?[+-]?)?(\\d+)?"")}}}),expect_column_values_to_match_regex(column=""latitude"", regex=""^\\[-\\+]?[0-9]?[\\,\\.]?[0-9]+(\\,[0-9]{1,3}?)?$""),expect_column_values_to_match_regex(column=""longitude"", regex=""^\\[-\\+]?\\d{0,3}(\\.\\d+?)?(\\,\\d{1,3}?)?$"")",0.45652173913043476,0.24444444444444446,0.34782608695652173,17.5358542517838
"For the `video_title` column: Ensure string lengths are between 5 and 100 characters, and do not contain special characters.","expect_column_value_lengths_to_be_between(column=""video_title"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""video_title"", regex=r""[!@#$%^&*(),.?\"":{}|<>]"")","expect_column_value_lengths_to_be_between(column=""video_title"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""video_title"", regex=r""[\w\s]+$"")",0.9655172413793104,0.9642857142857143,0.9655172413793104,72.14171877789528
For the `description` column: Ensure string lengths do not exceed 500 characters. Validate that this field is nullable (may contain null values).,"expect_column_value_lengths_to_be_between(column=""description"", min_value=0, max_value=500),expect_column_values_to_be_null(column=""description"")","expect_column_value_lengths_to_be_between(column=""description"", max_value=500),expect_column_values_to_be_null(column=""description"")",0.9302325581395349,0.8780487804878049,0.9302325581395349,85.94922262280947
For the multi-column check on `alert_id` and `severity`: Ensure the combination is unique across records.,"expect_compound_columns_to_be_unique(column_A=""alert_id"", column_B=""severity"")","expect_compound_columns_to_be_unique(column_list=[""alert_id"", ""severity""])",0.8333333333333333,0.6363636363636365,0.8333333333333333,65.3140956467441
Ensure that the `bedrooms` and `bathrooms` columns are both integers and that `bathrooms` is less than or equal to `bedrooms`.,"expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_of_type(column=""bathrooms"", type_=""int""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")","expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bathrooms"", min_value=0, max_value=bedrooms)",0.6349206349206348,0.5245901639344263,0.6349206349206348,42.833173649220655
"For field 'property_status': Ensure the field matches the type 'text'. Validate that all values in 'property_status' are among the defined set: {active, sold, under_contract, withdrawn}.","expect_column_values_to_be_of_type(column=""property_status"", type_=""text""),expect_column_values_to_be_in_set(column=""property_status"", value_set={""active"", ""sold"", ""under_contract"", ""withdrawn""})","expect_column_values_to_be_of_type(column=""property_status"", type_=""text""),expect_column_values_to_be_in_set(column=""property_status"", value_set={""active"", ""sold"", ""under_contract"", ""withdrawn""})",1.0,1.0,1.0,100.00000000000004
In the `usage_data` column: Validate that all entries are valid JSON objects conforming to the specified schema for energy consumption data.,"expect_column_values_to_match_json_schema(column=""usage_data"", schema={""type"": ""object"", ""properties"": { ""energy_consumed"": { ""type"": ""number"" }, ""timestamp"": { ""type"": ""string"", ""format"": ""date-time"" }}})","expect_column_values_to_match_json_schema(column=""usage_data"", schema={})  # Replace {} with the actual schema for energy consumption data.",0.5454545454545454,0.47619047619047616,0.5454545454545454,24.942828893561174
For field 'category_ids': Ensure the field matches the type 'JSON'. Validate that the category IDs conform to a valid JSON array of integers. Ensure this field exists.,"expect_column_to_exist(column=""category_ids""),expect_column_values_to_be_json_parseable(column=""category_ids""),expect_column_values_to_match_json_schema(column=""category_ids"", schema={""type"": ""array"", ""items"": {""type"": ""integer""}})","expect_column_to_exist(column=""category_ids""),expect_column_values_to_be_of_type(column=""category_ids"", type_=""JSON""),expect_column_values_to_be_json_parseable(column=""category_ids""),expect_column_values_to_be_in_set(column=""category_ids"", value_set=[1, 2, 3, 4])",0.6923076923076923,0.5789473684210527,0.6153846153846153,54.20561975703994
"For the `location` field, ensure that it contains valid strings that match the specified list of locations: ['USA', 'Canada', 'UK']. Validate that the field contains no null values.","expect_column_values_to_be_in_set(column=""location"", value_set=['USA', 'Canada', 'UK']),expect_column_values_to_not_be_null(column=""location"")","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=['USA', 'Canada', 'UK'])",1.0,0.9545454545454546,0.6086956521739131,98.49581210109045
"For the `ip_address` field, ensure that the values match valid IPv4 address patterns and do not belong to the set of known proxy addresses.","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$""),expect_column_values_to_not_be_in_set(column=""ip_address"", value_set=[""proxy_ip_1"", ""proxy_ip_2"", ""proxy_ip_3""])  # Replace with actual known proxy addresses,     ","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:\d{1,3}\.){3}\d{1,3}$"")  # IPv4 address regular expression.  #expect_column_values_to_not_be_in_set(column=""ip_address"", value_set=KNOWN_PROXY_IP_SET)  # Replace known_proxy_ip_set with a set of known proxy addresses.",0.49295774647887325,0.3714285714285714,0.4507042253521127,16.43417813201508
"Verify that the `account_status` column contains only the values `['Active', 'Inactive', 'Pending']` and that it exists in the dataset.","expect_column_to_exist(column=""account_status""),expect_column_values_to_be_in_set(column=""account_status"", value_set=['Active', 'Inactive', 'Pending'])","expect_column_to_exist(column=""account_status"")  # Checks whether the column exists in the dataset.  # Since the expected values are a list, you can use set operations to determine the intersection of expected values with the actual values in the column. expect_column_values_to_be_in_set(column=""account_status"", value_set=['Active', 'Inactive', 'Pending'])  # This expects all the expected values to be present in the column.  # Assuming this is a DataFrame, you can use a list comprehension to determine the intersection:  intersection = ['Active', 'Inactive', 'Pending']  actual_set = set(actual_values)  expected_set = set(intersection)  actual_intersected_set = actual_set.intersection(expected_set)  if actual_intersected_set == expected_set:  # Actual intersection was the same as the expected values.  else:  # Actual intersection was different than the expected values.  # You would need to investigate and handle the actual result accordingly.",0.2732919254658385,0.25157232704402516,0.2732919254658385,22.413491054679053
For the `billing_date` field: Ensure values are of type 'date'. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""billing_date"", type_=""date""),expect_column_values_to_not_be_null(column=""billing_date"")","expect_column_values_to_be_of_type(column=""billing_date"", type_=""date""),expect_column_values_to_not_be_null(column=""billing_date"")",1.0,1.0,1.0,100.00000000000004
Check that the `customer_email` column values are valid email formats and do not contain duplicates.,"expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")  # This regex ensures that email formats are valid, except for a more complex version.  # Since you haven't specified what regex is expected, the most simple regex would be to ensure a valid email format.  #expect_column_values_to_be_unique(column=""customer_email"")  # This ensures that no duplicates exist in the column.",0.40404040404040403,0.37113402061855677,0.40404040404040403,41.44555434000595
Verify that the `threat_level` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""threat_level"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""threat_level"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"Check that the `device_model` column only includes distinct values matching `['iPhone', 'Samsung', 'Google']`.","expect_column_distinct_values_to_equal_set(column=""device_model"", value_set=['iPhone', 'Samsung', 'Google'])","expect_column_distinct_values_to_equal_set(column=""device_model"", value_set=['iPhone', 'Samsung', 'Google'])",1.0,1.0,1.0,100.00000000000004
For field 'fraud_score': Ensure the field matches the type 'integer'. Ensure values are between 0 and 100. Ensure this field exists.,"expect_column_to_exist(column=""fraud_score""),expect_column_values_to_be_of_type(column=""fraud_score"", type_=""int""),expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100)","expect_column_to_exist(column=""fraud_score""),expect_column_values_to_be_of_type(column=""fraud_score"", type_=""int""),expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'transaction_amount': Ensure the field matches the type 'decimal'. Validate that 'transaction_amount' is greater than 0. Ensure this field exists.,"expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=None)","expect_column_to_exist(column=""transaction_amount""),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0),expect_column_values_to_not_be_null(column=""transaction_amount"")",0.7894736842105263,0.7027027027027027,0.7894736842105263,68.59514508988696
Ensure the `supplier_id` column contains only unique values that belong to the set of active suppliers.,"expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=active_suppliers_set)","expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=set(active_suppliers))",1.0,0.9565217391304348,0.9583333333333334,90.32396317187124
Ensure that the `temperature` readings in the `sensor_data` column are all greater than the minimum threshold of -30°C.,"expect_column_values_to_be_greater_than(column=""sensor_data"", value=-30)","expect_column_values_to_be_between(column=""sensor_data"", min_value=-30)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
Ensure that the `check_in_date` column values match the specified strftime format '%Y-%m-%d' for all reservations.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `filing_date` column is of type 'date' and contains no missing values.,"expect_column_values_to_be_of_type(column=""filing_date"", type_=""date""),expect_column_values_to_not_be_null(column=""filing_date"")","expect_column_to_exist(column=""filing_date""),expect_column_values_to_be_of_type(column=""filing_date"", type_=""date""),expect_column_values_to_not_be_null(column=""filing_date"")илакти",0.8627450980392156,0.8571428571428571,0.8627450980392156,73.7143753118099
For the `device_id` and `timestamp` columns: Ensure the combination is unique within each record.,"expect_select_column_values_to_be_unique_within_record(column_a=""device_id"", column_b=""timestamp"")","expect_compound_columns_to_be_unique(column_A=""device_id"", column_B=""timestamp"")",0.8275862068965517,0.5925925925925926,0.8275862068965517,49.204255339581564
"For field 'location_coordinates': Ensure the field matches the type 'string'. Validate that (location_coordinates) matches the pattern '^-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?$'. Ensure this field exists.","expect_column_to_exist(column=""location_coordinates""),expect_column_values_to_be_of_type(column=""location_coordinates"", type_=""string""),expect_column_values_to_match_regex(column=""location_coordinates"", regex=r""^-?\d+(\.\d+)?,-?\d+(\.\d+)?$"")","expect_column_to_exist(column=""location_coordinates""),expect_column_values_to_be_of_type(column=""location_coordinates"", type_=""string""),expect_column_values_to_match_regex(column=""location_coordinates"", regex=r""^-?\d+(.\d+)?,-?\d+(.\d+)?$"")",1.0,1.0,1.0,94.98195498040337
"Ensure the `service_type` column contains only distinct values from the set `['Prepaid', 'Postpaid', 'Hybrid']`.","expect_column_values_to_be_in_set(column=""service_type"", value_set=['Prepaid', 'Postpaid', 'Hybrid'])","expect_column_distinct_values_to_equal_set(column=""service_type"", value_set=['Prepaid', 'Postpaid', 'Hybrid'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
Ensure the `end_date` column is always greater than the `start_date` column for each record.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")",1.0,1.0,1.0,100.00000000000004
For field 'customer_id': Ensure this field exists. Validate that all 'customer_id' values are unique and of type 'integer'.,"expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `device_id` and `location_id` combination is unique across records.,"expect_compound_columns_to_be_unique(column_A=""device_id"", column_B=""location_id"")","expect_compound_columns_to_be_unique(column_list=[""device_id"", ""location_id""])",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.7176346014632
For the `date_of_birth` field: Verify that values are in the format 'YYYY-MM-DD' and are valid dates.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_id` field contains only unique values. Verify that there are no null entries in this field.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `property_type` column only contains values from the list `['Residential', 'Commercial', 'Industrial']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])",1.0,1.0,1.0,100.00000000000004
"Ensure that the `status` column in the `orders` table contains only distinct values from the set `['pending', 'shipped', 'delivered', 'cancelled']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['pending', 'shipped', 'delivered', 'cancelled'])","expect_column_values_to_be_in_set(column=""status"", value_set=['pending','shipped', 'delivered', 'cancelled'])",1.0,1.0,1.0,100.00000000000004
"For the `jurisdiction` field, confirm it matches one of the values in the list `['Federal', 'State', 'Local']`.","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local'])","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local'])",1.0,1.0,1.0,100.00000000000004
Ensure the `contact_email` field contains only unique values and matches the valid email format.,"expect_column_values_to_be_unique(column=""contact_email""),expect_column_values_to_match_regex(column=""contact_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_be_unique(column=""contact_email""),expect_column_values_to_match_regex(column=""contact_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.9787234042553191,0.9777777777777777,0.9787234042553191,92.37327881761382
For the `appointment_date` field: Ensure all dates are within the range of the last 30 days to the next 30 days.,"expect_column_values_to_be_between(column=""appointment_date"", min_value=""2023-09-24"", max_value=""2023-11-24"")","expect_column_values_to_be_between(column=""appointment_date"", min_value=""30 days ago"", max_value=""30 days from now"")",0.6666666666666667,0.5945945945945946,0.6666666666666667,69.6694431922471
Verify that the sum of `fixed_charge` and `variable_charge` columns equals the `total_bill` for each entry.,"expect_multicolumn_sum_to_equal(column_list=[""fixed_charge"", ""variable_charge""], target_column=""total_bill"")","expect_multicolumn_sum_to_equal(column_list=[""fixed_charge"", ""variable_charge""], sum_column=""total_bill"")",0.9333333333333333,0.8571428571428571,0.9333333333333333,92.9923845210929
For field 'service_request_date': Ensure that the dates match the format '%Y-%m-%d'. Ensure this field exists.,"expect_column_to_exist(column=""service_request_date""),expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""service_request_date""),expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"Confirm that the `age` column has a mean value between 30 and 45, with a maximum age not exceeding 65.","expect_column_mean_to_be_between(column=""age"", min_value=30, max_value=45),expect_column_max_to_be_between(column=""age"", max_value=65)","expect_column_mean_to_be_between(column=""age"", min_value=30, max_value=45),expect_column_max_to_be_between(column=""age"", max_value=65)İTESİ",0.9615384615384615,0.9600000000000001,0.9615384615384615,98.16435766913733
For field `premium_amount`: Ensure the field is required (not null). Ensure this field is of type 'decimal' and its values are greater than 0.,"expect_column_values_to_not_be_null(column=""premium_amount""),expect_column_values_to_be_of_type(column=""premium_amount"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""premium_amount"", value=0)","expect_column_values_to_not_be_null(column=""premium_amount""),expect_column_values_to_be_of_type(column=""premium_amount"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""premium_amount"", threshold=0)",0.9705882352941176,0.9393939393939394,0.9705882352941176,96.74122890261673
"For the `inventory_value` column, validate that the sum of `price * stock_quantity` equals the recorded `inventory_value`.","expect_multicolumn_sum_to_equal(column_list=[""price"", ""stock_quantity""], target_column=""inventory_value"")","expect_multicolumn_sum_to_equal(column_A=""price * stock_quantity"", column_B=""inventory_value"")",0.8571428571428571,0.6153846153846154,0.8571428571428571,57.15508401968583
"Ensure that the JSON array in the `citizen_feedback` column contains only valid JSON objects, each having a `rating` and `comment` field.","expect_column_values_to_match_json_schema(column=""citizen_feedback"", schema={""type"": ""array"", ""items"": {""type"": ""object"", ""properties"": {""rating"": {""type"": ""number""}, ""comment"": {""type"": ""string""}}}})","expect_column_values_to_match_json_schema(column=""citizen_feedback"", schema={""type"": ""array"", ""items"": {""type"": ""object"", ""required"": [""rating"", ""comment""], ""properties"": {""rating"": {""type"": ""integer""}, ""comment"": {""type"": ""string""}}})",0.8979591836734695,0.8085106382978724,0.8979591836734695,82.04454329304599
Ensure the `property_id` column contains only unique values and does not include null entries.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id"")",1.0,1.0,1.0,100.00000000000004
For field 'promo_code': Ensure the field matches the type 'text'. Ensure this field contains unique values and matches a specific pattern of alphanumeric characters with a length of 6 to 12.,"expect_column_values_to_be_of_type(column=""promo_code"", type_=""text""),expect_column_values_to_be_unique(column=""promo_code""),expect_column_values_to_match_regex(column=""promo_code"", regex=r""^[a-zA-Z0-9]{6,12}$"")","expect_column_values_to_be_of_type(column=""promo_code"", type_=""text""),expect_column_values_to_be_unique(column=""promo_code""),expect_column_values_to_match_regex(column=""promo_code"", regex=r""^[\w\s]{6,12}$"")",0.918918918918919,0.888888888888889,0.918918918918919,93.61374222844411
"Ensure that the `product_id` column has 50 rows, corresponding to the expected number of products in the inventory.",expect_table_row_count_to_equal(expected_value=50),"expect_table_row_count_to_equal(other_table=""products"", value=50)",0.7999999999999999,0.6666666666666665,0.7999999999999999,57.84879107039426
Ensure the `property_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id"")",1.0,1.0,1.0,100.00000000000004
Validate that the `title` field has a length between 10 and 100 characters and does not contain any special characters.,"expect_column_value_lengths_to_be_between(column=""title"", min_value=10, max_value=100),expect_column_values_to_not_match_regex(column=""title"", regex=r""[^a-zA-Z0-9\s]"")","expect_column_value_lengths_to_be_between(column=""title"", min_value=10, max_value=100),expect_column_values_to_not_match_regex(column=""title"", regex=r""[^a-zA-Z0-9]"")",0.9836065573770492,0.983050847457627,0.9836065573770492,94.63235296798655
"Verify that the `study_type` column values are from the set `['qualitative', 'quantitative']`.","expect_column_values_to_be_in_set(column=""study_type"", value_set=['qualitative', 'quantitative'])","expect_column_values_to_be_in_set(column=""study_type"", value_set=['qualitative', 'quantitative'])",1.0,1.0,1.0,100.00000000000004
For field 'ip_address': Ensure the field matches the type 'text'. Ensure the field matches the format 'IPv4'. Ensure this field exists.,"expect_column_to_exist(column=""ip_address""),expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_to_exist(column=""ip_address""),expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^[\d]{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"")",0.8641975308641975,0.7848101265822786,0.8641975308641975,78.94967414156272
Ensure the `budget_amount` column is of type 'decimal' and all values are greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""budget_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""budget_amount"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""budget_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""budget_amount"", min_value=0, max_value=None)ávající",0.9642857142857143,0.962962962962963,0.9642857142857143,98.37344161747833
Confirm that the `hashtags` column contains valid JSON arrays with at least one entry.,"expect_column_values_to_be_json_parseable(column=""hashtags""),expect_column_values_to_not_be_null(column=""hashtags""),expect_column_values_to_match_json_schema(column=""hashtags"", schema={""type"": ""array"", ""minItems"": 1})","expect_column_values_to_match_json_parseable_regex(column=""hashtags"", regex=r""^\[\{\""|\[\{|\{\""|\{""|\""\""|\"""")  # For regex with comments, check https",0.36,0.29166666666666663,0.32,24.51996198659364
For the `post_slug` field: Ensure all values are unique and formatted in lowercase. Ensure this field cannot be null.,"expect_column_values_to_be_unique(column=""post_slug""),expect_column_values_to_not_be_null(column=""post_slug""),expect_column_values_to_match_regex(column=""post_slug"", regex=r""^[a-z0-9\-]+$"")","expect_column_values_to_be_unique(column=""post_slug""),expect_column_values_to_not_be_null(column=""post_slug""),expect_column_values_to_match_regex(column=""post_slug"", regex=r""^[\w-]+$"")",0.9374999999999999,0.9354838709677419,0.9374999999999999,91.99009843728103
"For the `status` column: Ensure it contains only distinct values from the set `['active', 'inactive', 'suspended']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'suspended'])","expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive"", ""suspended""])",1.0,1.0,1.0,67.45795392275566
For the `timestamp` field: Ensure that all values are of type 'datetime' and do not contain any null entries. Validate that timestamps are in increasing order.,"expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_be_increasing(column=""timestamp"")","expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_be_increasing(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Ensure the `points_scored` column values exhibit a binomial distribution with a mean of 25 points per game.,"expect_column_mean_to_be_between(column=""points_scored"", min_value=25, max_value=25)","expect_column_mean_to_be_between(column=""points_scored"", min_value=24, max_value=26)",0.8666666666666667,0.7857142857142857,0.8666666666666667,85.70980059247852
For field 'game_title': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""game_title""),expect_column_values_to_be_of_type(column=""game_title"", type_=""text""),expect_column_values_to_be_unique(column=""game_title"")","expect_column_values_to_not_be_null(column=""game_title""),expect_column_values_to_be_of_type(column=""game_title"", type_=""text""),expect_column_values_to_be_unique(column=""game_title"")",1.0,1.0,1.0,100.00000000000004
Check that the `hire_date` values are all earlier than `termination_date`.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""hire_date"", column_B=""termination_date"")","expect_column_pair_values_A_to_be_less_than_B(column_A=""hire_date"", column_B=""termination_date"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `article_category` field contains only distinct values from the set `['Technology', 'Health', 'Finance']`.","expect_column_distinct_values_to_equal_set(column=""article_category"", value_set=['Technology', 'Health', 'Finance'])","expect_column_values_to_be_in_set(column=""article_category"", value_set=['Technology', 'Health', 'Finance'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
"Check that the `customer_email` column values do not match any SQL-like patterns from the list `['%admin%', '%test%']`.","expect_column_values_to_not_match_like_pattern_list(column=""customer_email"", patterns=['%admin%', '%test%'])","expect_column_values_to_not_match_regex_list(column=""customer_email"", regex_list=['%admin%', '%test%'])",0.8000000000000002,0.6428571428571429,0.8000000000000002,82.86682903354249
Validate that the `follow_up_date` is greater than the `admission_date` and follows the format `YYYY-MM-DD`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""follow_up_date"", column_B=""admission_date""),expect_column_values_to_match_strftime_format(column=""follow_up_date"", strftime_format=""%Y-%m-%d"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""follow_up_date"", column_B=""admission_date""),expect_column_values_to_match_strftime_format(column=""follow_up_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"For the `match_date` column, ensure that all dates are in increasing order without any duplicates.","expect_column_values_to_be_increasing(column=""match_date""),expect_column_values_to_be_unique(column=""match_date"")","expect_column_values_to_be_increasing(column=""match_date""),expect_column_values_to_be_unique(column=""match_date"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `interest_rate` column values fall within the range of 0% to 15%.,"expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=0.15)","expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=15)",0.967741935483871,0.896551724137931,0.967741935483871,94.20254600938034
For field 'team_name': Ensure this field is of type 'text'. Ensure values in 'team_name' are distinct.,"expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_be_unique(column=""team_name"")","expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_be_unique(column=""team_name"")",1.0,1.0,1.0,100.00000000000004
For the combination of `product_id` and `warehouse_id`: Ensure this combination is unique across records.,"expect_compound_columns_to_be_unique(columns=[""product_id"", ""warehouse_id""])","expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")",0.88,0.6956521739130435,0.88,60.93671089617578
Check that the `request_status` column only contains values that match the regex pattern `^(Open|Closed|Pending)$`.,"expect_column_values_to_match_regex(column=""request_status"", regex=r""^(Open|Closed|Pending)$"")","expect_column_values_to_match_regex(column=""request_status"", regex=r""^(Open|Closed|Pending)$"")",1.0,1.0,1.0,100.00000000000004
Verify the `course_code` field matches the type 'text' and exists for all records.,"expect_column_to_exist(column=""course_code""),expect_column_values_to_be_of_type(column=""course_code"", type_=""text"")","expect_column_to_exist(column=""course_code""),expect_column_values_to_be_of_type(column=""course_code"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For field 'monthly_fee': Validate that the monthly fee is within the range of [20, 100] and that the total revenue from all plans does not exceed 10,000.","expect_column_values_to_be_between(column=""monthly_fee"", min_value=20, max_value=100),expect_column_sum_to_be_between(column=""monthly_fee"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""monthly_fee"", min_value=20, max_value=100),expect_column_sum_to_be_between(column=""total_revenue"", max_value=10000)",0.8771929824561403,0.8363636363636363,0.8771929824561403,82.747990401732
"For field `status`: Confirm that values only match the set `['Pending', 'Confirmed', 'Failed']` and are not null.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Confirmed', 'Failed']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Confirmed', 'Failed']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,100.00000000000004
Ensure the `purchase_date` in the retail domain occurs before the `refund_request_date` in the corresponding entries.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""purchase_date"", column_B=""refund_request_date"")","expect_column_values_A_to_be_less_than_B(column_A=""purchase_date"", column_B=""refund_request_date"")",0.918918918918919,0.7999999999999999,0.918918918918919,86.80295933474072
"For the `discount_code` field, ensure it contains valid JSON objects that conform to the specified JSON schema for promotional codes.","expect_column_values_to_match_json_schema(column=""discount_code"", schema=""specified_json_schema"")","expect_column_values_to_match_json_schema(column=""discount_code"", json_schema=""your_json_schema_here"")",0.8666666666666666,0.7142857142857142,0.8666666666666666,72.24037170215817
Check that the `shipping_cost` column does not exceed 20% of the `total_price` for any order.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""shipping_cost"", column_B=""total_price"", threshold=0.2)","expect_column_pair_values_to_be_greater_than(column_A=""shipping_cost"", column_B=""total_price"", ratio=0.2)",0.8500000000000001,0.631578947368421,0.8500000000000001,73.14644135133288
Validate that the 'file_hash' for uploaded data files matches the expected hash value to ensure data integrity.,expect_file_hash_to_equal(expected_hash_value),expect_file_hash_to_match_file_hash(expected_hash),0.7058823529411765,0.5333333333333333,0.7058823529411765,54.9995519064483
For field 'property_type': Ensure the field exists. Ensure values in (property_type) must not include 'Commercial'.,"expect_column_to_exist(column=""property_type""),expect_column_values_to_not_be_in_set(column=""property_type"", value_set=[""Commercial""])","expect_column_to_exist(column=""property_type""),expect_column_values_to_not_be_in_set(column=""property_type"", value_set=['Commercial'])",1.0,1.0,1.0,91.39669535063027
"Confirm that all values in the `genre` column belong to the predefined set ['Action', 'Comedy', 'Drama', 'Documentary'].","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Comedy', 'Drama', 'Documentary'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Comedy', 'Drama', 'Documentary'])",1.0,1.0,1.0,100.00000000000004
Ensure the `post_id` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_not_be_null(column=""post_id"")","expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_not_be_null(column=""post_id"")",1.0,1.0,1.0,100.00000000000004
Validate that the `comment_count` field is a non-negative integer and does not exceed 500.,"expect_column_values_to_be_between(column=""comment_count"", min_value=0, max_value=500),expect_column_values_to_be_of_type(column=""comment_count"", type_=""int"")","expect_column_values_to_be_between(column=""comment_count"", min_value=0, max_value=500),expect_column_values_to_be_of_type(column=""comment_count"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Ensure the `gas_used` column does not exceed the maximum gas limit defined by the blockchain protocol.,"expect_column_max_to_be_between(column=""gas_used"", max_value=<max_gas_limit>)","expect_column_values_to_be_between(column=""gas_used"", min_value=0, max_value=MAX_GAS_LIMIT)",0.8387096774193549,0.6896551724137931,0.8387096774193549,56.826152333369755
For field 'publication_year': Ensure that no values are missing and that all values fall within the range of 1900 to the current year.,"expect_column_values_to_not_be_null(column=""publication_year""),expect_column_values_to_be_between(column=""publication_year"", min_value=1900, max_value=2023)","expect_column_values_to_not_be_null(column=""publication_year""),expect_column_values_to_be_between(column=""publication_year"", min_value=1900, max_value=2023)",1.0,1.0,1.0,100.00000000000004
Ensure the `sensor_reading_time` column contains valid datetime values formatted as `'%Y-%m-%dT%H:%M:%SZ'`.,"expect_column_values_to_match_strftime_format(column=""sensor_reading_time"", strftime_format='%Y-%m-%dT%H:%M:%SZ')","expect_column_values_to_match_strftime_format(column=""sensor_reading_time"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,87.76072097254693
"Ensure the `grades` column contains only values from the set `[A, B, C, D, F]`.","expect_column_values_to_be_in_set(column=""grades"", value_set=[""A"", ""B"", ""C"", ""D"", ""F""])","expect_column_values_to_be_in_set(column=""grades"", value_set=[""A"", ""B"", ""C"", ""D"", ""F""])",1.0,1.0,1.0,100.00000000000004
For the `publication_year` column: Validate that values are within the range of `2000` to `2023`.,"expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023)","expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023)",1.0,1.0,1.0,100.00000000000004
For field 'shipment_info': Ensure the field contains valid JSON objects and adheres to the specified JSON schema for 'shipment_details'.,"expect_column_values_to_be_json_parseable(column=""shipment_info""),expect_column_values_to_match_json_schema(column=""shipment_info"", schema=""shipment_details"")","expect_column_values_to_be_json_parseable(column=""shipment_info""),expect_column_values_to_match_json_schema(column=""shipment_info"", schema=""shipment_details"")",1.0,1.0,1.0,100.00000000000004
For the `sensor_type` field: Ensure all entries match the pattern `^sensor_[a-z]+$`.,"expect_column_values_to_match_regex(column=""sensor_type"", regex=r""^sensor_[a-z]+$"")","expect_column_values_to_match_regex(column=""sensor_type"", regex=r""^sensor_.*"")",0.923076923076923,0.9166666666666666,0.923076923076923,80.61948330607453
For field 'timestamp': Ensure this field exists. Validate that all values conform to the ISO 8601 date format.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")",1.0,1.0,1.0,100.00000000000004
For field 'case_notes': Ensure the field matches the type 'text'. Validate that the length of (case_notes) does not exceed 2000 characters. Ensure this field exists.,"expect_column_to_exist(column=""case_notes""),expect_column_values_to_be_of_type(column=""case_notes"", type_=""text""),expect_column_value_lengths_to_be_between(column=""case_notes"", min_value=0, max_value=2000)","expect_column_to_exist(column=""case_notes""),expect_column_values_to_be_of_type(column=""case_notes"", type_=""text""),expect_column_value_lengths_to_be_between(column=""case_notes"", min_value=0, max_value=2000)",1.0,1.0,1.0,100.00000000000004
"Ensure the `ip_address` column contains only valid IPv4 addresses that match the regex pattern `^([0-9]{1,3}\\.){3}[0-9]{1,3}$`.","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^([0-9]{1,3}\\.){3}[0-9]{1,3}$"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(\\d{1,3}\\.){3}\\d{1,3}$"")",0.8421052631578948,0.7222222222222222,0.8421052631578948,73.92035050625195
For field 'salary': Ensure the field contains numeric values. Validate that all entries are greater than or equal to the minimum wage of the specified region.,"expect_column_values_to_be_of_type(column=""salary"", type_=""float""),expect_column_values_to_be_between(column=""salary"", min_value=min_wage, max_value=None)","expect_column_values_to_be_of_type(column=""salary"", type_=""float""),expect_column_values_to_be_between(column=""salary"", min_value=minimum_wage)",0.8979591836734695,0.8510638297872342,0.8979591836734695,84.30057028411063
"Ensure the `platforms_supported` column contains valid JSON objects with keys that match the set `['PC', 'Console', 'Mobile']`.","expect_column_values_to_match_json_schema(column=""platforms_supported"", schema={""type"": ""object"", ""properties"": {""PC"": {}, ""Console"": {}, ""Mobile"": {}}})","expect_column_values_to_be_json_parseable(column=""platforms_supported""),expect_column_values_to_match_json_schema(column=""platforms_supported"", schema={'type':'string', 'pattern': 'PC|Console|Mobile'})",0.6818181818181819,0.6190476190476191,0.6818181818181819,43.047911677735954
For the `transaction_time` field: Ensure all entries are valid datetime strings formatted as `%Y/%m/%d %H:%M:%S`.,"expect_column_values_to_match_strftime_format(column=""transaction_time"", strftime_format=""%Y/%m/%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""transaction_time"", strftime_format=""%Y/%m/%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `sku` field contains values matching the regular expression pattern '^[A-Z0-9]{8,12}$' and does not allow null entries.","expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8,12}$""),expect_column_values_to_not_be_null(column=""sku"")","expect_column_values_to_not_be_null(column=""sku""),expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8,12}$"")",1.0,0.9565217391304348,0.625,99.51572426809184
"Ensure that the `description` column does not contain any SQL-like patterns, specifically the keywords `SELECT`, `DROP`, or `INSERT`.","expect_column_values_to_not_match_regex_list(column=""description"", regex_list=[r"".*SELECT.*"", r"".*DROP.*"", r"".*INSERT.*""])","expect_column_values_to_not_match_regex(column=""description"", regex=r"".*(select|drop|insert).*"")",0.8750000000000001,0.5999999999999999,0.8750000000000001,37.960281603864175
"Ensure that the `category` column includes only values from the set `['Electronics', 'Furniture', 'Clothing']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Furniture', 'Clothing'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Furniture', 'Clothing'])",1.0,1.0,1.0,100.00000000000004
Check that the `customer_id` column has no null values and each value is unique across the table.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id"")","expect_column_values_to_not_be_null(column=""customer_id""),expect_select_column_values_to_be_unique(column=""customer_id"")",0.9743589743589743,0.918918918918919,0.9743589743589743,93.60404127121653
Ensure the `customer_id` column has no missing values and is linked to valid entries in the `customers` table.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_pair_values_to_be_equal(column_A=""customer_id"", column_B=""customers.customer_id"")","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_in_set(column=""customer_id"", value_set=valid_customer_ids)  # Replace valid_customer_ids with a valid list of customer IDs from the `customers` table.",0.6363636363636364,0.4375,0.6060606060606061,52.19209004628487
"Verify that the `message_length` column contains values within the range of 1 to 10,000 characters.","expect_column_values_to_be_between(column=""message_length"", min_value=1, max_value=10000)","expect_column_value_lengths_to_be_between(column=""message_length"", min_value=1, max_value=10000)",0.967741935483871,0.896551724137931,0.967741935483871,85.92899528285
"For the `course_code` field, ensure it follows the regex pattern `^C[0-9]{3}$` and that no values are null.","expect_column_values_to_match_regex(column=""course_code"", regex=r""^C[0-9]{3}$""),expect_column_values_to_not_be_null(column=""course_code"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^C[0-9]{3}$"")  # Check if course code matches the regex.  # Null check with ""is not null"" statement will also be needed.lásil",0.6666666666666666,0.5172413793103449,0.5666666666666667,61.25539405623767
For field 'resume': Ensure that the file exists and matches the specified hash value. Validate that the file does not exceed 2MB.,"expect_file_to_exist(file_path=""resume""),expect_file_hash_to_equal(file_path=""resume"", expected_hash=""your_expected_hash_value""),expect_file_size_to_be_between(file_path=""resume"", min_value=0, max_value=2097152)","expect_file_to_exist(file=""resume""),expect_file_hash_to_match_file_content_hash(file=""resume""),expect_file_size_to_be_between(min_value=0, max_value=2 * 1024 * 1024)  # assuming file size is in bytes, where 2 * 1024 * 1024 = 2 MB",0.6410256410256411,0.4736842105263158,0.5897435897435898,57.25599625444224
Ensure the `patient_id` column exists and contains unique identifiers for each patient.,"expect_column_to_exist(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")","expect_column_to_exist(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")lásil",0.9411764705882353,0.9375,0.9411764705882353,97.25766308764152
For the `stock_quantity` field: Ensure values are greater than or equal to 0 and are sorted in decreasing order.,"expect_column_values_to_be_between(column=""stock_quantity"", min_value=0),expect_column_values_to_be_decreasing(column=""stock_quantity"")","expect_column_values_to_be_greater_than(column=""stock_quantity"", threshold=0),expect_column_values_to_be_increasing(column=""stock_quantity"", decreasing=False)",0.8181818181818182,0.6190476190476191,0.7727272727272727,71.39161558717579
"Confirm that the `incident_type` column contains only values from the allowed list `['Malware', 'Phishing', 'DDoS', 'Data Breach']`.","expect_column_values_to_be_in_set(column=""incident_type"", value_set=['Malware', 'Phishing', 'DDoS', 'Data Breach'])","expect_column_values_to_be_in_set(column=""incident_type"", value_set=['Malware', 'Phishing', 'DDoS', 'Data Breach'])",1.0,1.0,1.0,100.00000000000004
Validate that the `user_age` column's values are integers between 13 and 100.,"expect_column_values_to_be_between(column=""user_age"", min_value=13, max_value=100),expect_column_values_to_be_of_type(column=""user_age"", type_=""int"")","expect_column_values_to_be_of_type(column=""user_age"", type_=""int""),expect_column_values_to_be_between(column=""user_age"", min_value=13, max_value=100)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
"Check that the `priority_level` column only contains the values `['Low', 'Medium', 'High']`.","expect_column_values_to_be_in_set(column=""priority_level"", value_set=[""Low"", ""Medium"", ""High""])","expect_column_values_to_be_in_set(column=""priority_level"", value_set=['Low', 'Medium', 'High'])",1.0,1.0,1.0,68.69938387430254
For the `claims` table: Validate that the number of rows is greater than 0 and does not exceed 1000 for the current year.,"expect_table_row_count_to_be_between(table=""claims"", min_value=1, max_value=1000)","expect_table_row_count_to_be_between(column=""claims"", min_value=1, max_value=1000)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
For field 'delivery_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure delivery dates are scheduled at least 24 hours in the future.,"expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_values_to_be_increasing(column=""delivery_date"")","expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""delivery_date"")  # Assuming ""delivery_date"" values are chronological, this ensures dates are greater than 24 hours from the current timestamp.",0.6526315789473685,0.6451612903225806,0.6526315789473685,54.36794042336815
For the `transaction_date` column: Ensure it consists of valid date entries. Check that it does not contain future dates.,"expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_less_than(column=""transaction_date"", value=""current_date"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_less_than(column=""transaction_date"", value=""2023-10-26"")  # Change this value according to future dates",0.634920634920635,0.5573770491803278,0.634920634920635,51.836568684969436
For field 'view_count': Ensure the field matches the type 'integer'. Verify that view counts are non-negative.,"expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
Ensure the `account_number` column exists and contains unique identifiers for all accounts.,"expect_column_to_exist(column=""account_number""),expect_column_values_to_be_unique(column=""account_number"")","expect_column_to_exist(column=""account_number""),expect_column_values_to_be_unique(column=""account_number"")",1.0,1.0,1.0,100.00000000000004
For fields 'source_ip' and 'destination_ip': Ensure that values in 'source_ip' are unique within records and that 'source_ip' is not equal to 'destination_ip' for any entry.,"expect_select_column_values_to_be_unique_within_record(column=""source_ip""),expect_column_pair_values_to_be_equal(column_A=""source_ip"", column_B=""destination_ip"")","expect_column_values_to_be_unique(column=""source_ip""),expect_column_values_to_not_equal_other_column(column=""source_ip"", other_column=""destination_ip"")",0.7843137254901961,0.44897959183673475,0.7843137254901961,62.498559200346996
"For the `wallet_address` column, ensure that all values are unique and conform to the valid address format.","expect_column_values_to_be_unique(column=""wallet_address""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$"")","expect_column_values_to_be_unique(column=""wallet_address""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[0-9a-fA-F]{40}$"")",0.8846153846153846,0.8000000000000002,0.8846153846153846,92.38344363760223
"For the `content_length` field: Ensure that the values adhere to a normal distribution, with a mean length between 200 and 2000 characters.","expect_column_mean_to_be_between(column=""content_length"", min_value=200, max_value=2000),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""content_length"", threshold=0.05)","expect_column_mean_to_be_between(column=""content_length"", min_value=200, max_value=2000)",0.625,0.6086956521739131,0.625,31.466396101845913
Ensure the `patient_id` column values are unique and match the regex pattern `^[A-Z]{2}[0-9]{6}$`.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_match_regex(column=""patient_id"", regex=r""^[A-Z]{2}[0-9]{6}$"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_match_regex(column=""patient_id"", regex=r""^([A-Z]{2}[0-9]{6}$"")",1.0,1.0,1.0,95.94863506034301
Ensure the `shipment_id` column is unique and does not contain null values.,"expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_not_be_null(column=""shipment_id"")","expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_not_be_null(column=""shipment_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
For the `data_record` JSON field: Validate that the content matches the required structure with keys 'data_id' (string) and 'data_value' (float).,"expect_column_values_to_match_json_schema(column=""data_record"", schema={,    ""type"": ""object"",    ""properties"": {,  ""data_id"": {""type"": ""string""},  ""data_value"": {""type"": ""number""},    },    ""required"": [""data_id"", ""data_value""],})","expect_column_values_to_match_json_schema(column=""data_record"", schema={""type"": ""object"", ""properties"": {""data_id"": {""type"": ""string""}, ""data_value"": {""type"": ""float""}}})",0.8571428571428572,0.8510638297872339,0.8571428571428572,65.87397447543
"For field 'shipping_method': Ensure the field matches the type 'text'. Ensure values in (shipping_method) must exist in the predefined list ['Air', 'Sea', 'Land'].","expect_column_values_to_be_of_type(column=""shipping_method"", type_=""text""),expect_column_values_to_be_in_set(column=""shipping_method"", value_set=['Air', 'Sea', 'Land'])","expect_column_values_to_be_of_type(column=""shipping_method"", type_=""text""),expect_column_values_to_be_in_set(column=""shipping_method"", value_set=['Air', 'Sea', 'Land'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `departure_time` column contains valid time formats and falls within the range of [00:00, 23:59].","expect_column_values_to_match_regex(column=""departure_time"", regex=r""^(?:[01]\d|2[0-3]):[0-5]\d$""),expect_column_values_to_be_between(column=""departure_time"", min_value=""00:00"", max_value=""23:59"")","expect_column_values_to_match_strftime_format(column=""departure_time"", strftime_format=""%H:%M""),expect_column_values_to_be_between(column=""departure_time"", min_value=""00:00"", max_value=""23:59"")",0.746268656716418,0.6769230769230768,0.746268656716418,62.17124375454818
Check that the sum of the `income` and `expenses` columns in each record equals the `net_profit` column.,"expect_multicolumn_sum_to_equal(column_list=[""income"", ""expenses""], target_column=""net_profit"")","expect_multicolumn_sum_to_equal(column_list=[""income"", ""expenses""], sum_column=""net_profit"")",0.9230769230769231,0.8333333333333334,0.9230769230769231,92.10500207490826
"Ensure the `precipitation` field is required (not null), has values that are numeric, and is within the range of 0 to 500 mm.","expect_column_values_to_not_be_null(column=""precipitation""),expect_column_values_to_be_of_type(column=""precipitation"", type_=""float""),expect_column_values_to_be_between(column=""precipitation"", min_value=0, max_value=500)","expect_column_values_to_not_be_null(column=""precipitation""),expect_column_values_to_be_of_type(column=""precipitation"", type_=""float""),expect_column_values_to_be_between(column=""precipitation"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
Check that the `csv_data.csv` file contains no more than 1000 lines and adheres to the expected column count of 5.,"expect_file_size_to_be_between(file=""csv_data.csv"", min_size=0, max_size=1000),expect_file_line_regex_match_count_to_equal(file=""csv_data.csv"", regex="".*"", count=5)","expect_file_line_count_to_be_between(file_path=""csv_data.csv"", min_value=0, max_value=1000)  # Change min_value and max_value as required  #expect_file_column_count_to_equal(file_path=""csv_data.csv"", expected_column_count=5)  # Change expected_column_count as required",0.641025641025641,0.4210526315789474,0.6153846153846153,48.621493969187085
Check that the `homework_score` values are integers that are greater than or equal to 0.,"expect_column_values_to_be_of_type(column=""homework_score"", type_=""int""),expect_column_values_to_be_between(column=""homework_score"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""homework_score"", type_=""int""),expect_column_values_to_be_greater_than(column=""homework_score"", value=0)",0.8627450980392156,0.7755102040816326,0.8627450980392156,78.86192859134178
Ensure the `product_id` column contains unique values and is not null for all records.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `order_status` field contains only distinct values from the set `['Pending', 'Shipped', 'Delivered']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered'])",1.0,1.0,1.0,100.00000000000004
Ensure the `citizen_id` column contains unique values and no entries are missing.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
"For the `content_length` in CMS articles, confirm that it matches the expected value derived from the `word_count` column.","expect_column_pair_values_to_be_equal(column_A=""content_length"", column_B=""word_count"")","expect_column_pair_values_to_be_equal(column_A=""content_length"", column_B=""word_count"")",1.0,1.0,1.0,100.00000000000004
Validate that the `temperature_readings` column values are within the defined range of -30 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature_readings"", min_value=-30, max_value=50)","expect_column_values_to_be_between(column=""temperature_readings"", min_value=-30, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure the `description` column has a maximum character count of 500 and contains no null values.,"expect_column_value_lengths_to_be_between(column=""description"", min_value=0, max_value=500),expect_column_values_to_not_be_null(column=""description"")","expect_column_max_value_to_be_between(column=""description"", max_value=500),expect_column_values_to_not_be_null(column=""description"")",0.888888888888889,0.7441860465116279,0.888888888888889,79.95049949018146
Verify that the `device_id` column exists and contains distinct alphanumeric values.,"expect_column_to_exist(column=""device_id""),expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_match_regex(column=""device_id"", regex=r""^[a-zA-Z0-9]*$"")","expect_column_to_exist(column=""device_id""),expect_column_values_to_be_unique(column=""device_id"")",0.6808510638297872,0.6666666666666666,0.6808510638297872,38.83120748804757
"Ensure the `dataset_id` column contains unique identifiers, free from any SQL-like patterns such as '%DROP%' or '%SELECT%'.","expect_column_values_to_be_unique(column=""dataset_id""),expect_column_values_to_not_match_regex(column=""dataset_id"", regex=r"".*DROP.*|.*SELECT.*"")","expect_column_values_to_be_unique(column=""dataset_id"")  # This will ensure that each dataset has a unique identifier.  # Expect column values to not contain SQL-like patterns like ""%DROP%"", ""%SELECT%"" (assuming these are the actual patterns, but can be modified based on your specific requirement).  # Replace ""dataset_id"" with the actual column name that contains unique dataset identifiers.",0.4634146341463415,0.35,0.3902439024390244,28.28677189520718
For field 'registration_date': Ensure this field exists. Validate that all dates are within the range of '2015-01-01' to '2023-12-31'.,"expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2015-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2015-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
For the `sender_address` and `receiver_address` columns: Ensure that the combination of sender and receiver addresses is unique across all records.,"expect_compound_columns_to_be_unique(column_A=""sender_address"", column_B=""receiver_address"")","expect_compound_columns_to_be_unique(columns=[""sender_address"", ""receiver_address""])",0.88,0.6956521739130435,0.88,60.81152344671197
For the `researcher_id` field: Ensure it is of type integer. Ensure values are unique.,"expect_column_values_to_be_of_type(column=""researcher_id"", type_=""int""),expect_column_values_to_be_unique(column=""researcher_id"")","expect_column_values_to_be_of_type(column=""researcher_id"", type_=""int""),expect_column_values_to_be_unique(column=""researcher_id"")",1.0,1.0,1.0,100.00000000000004
Confirm that the JSON data file has proper formatting with no missing brackets or commas.,expect_file_to_be_valid_json(),"expect_file_to_be_valid_json  # Check for file formatting  #expect_file_to_exist(path=""json_data_file.json"")  # Check if file exists  #expect_file_to_match_json_schema(path=""json_data_file.json"", schema={""type"": ""object"", ""required"": [""data""]})  # Check if JSON file matches the expected schema  #expect_file_to_have_valid_json_content(path=""json_data_file.json"")  # Check if JSON file contents are valid, no missing brackets or commas  #expect_column_to_exist(column=""data"")  # Check if the file has a column called ""data""  #expect_column_values_to_be_of_type(column=""data"", type_=""string"")  # Check if the values in the ""data"" column are strings  #expect_column_values_to_be_in_set(column=""data"", value_set=valid_values_set)  # Check if the values in the ""data"" column are within a specific set of values (valid_values_set)  #expect_column_values_to_not_be_null(column=""data"")  # Check if the values in the ""data"" column are not null  #expect_column_values_to_not_be_empty(column=""data"")  # Check if the values in the ""data"" column are not empty",0.06486486486486485,0.0546448087431694,0.06486486486486485,2.9671390513088407
Ensure the 'timestamp' column matches the format '%Y-%m-%d %H:%M:%S'. Validate that all entries can be parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")",1.0,1.0,1.0,89.95216567684199
Verify that the `published_date` column contains valid datetime strings formatted as `'%Y-%m-%d %H:%M:%S'`.,"expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `sku` field matches a regex pattern of `^[A-Z]{3}-[0-9]{4}$`.,"expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z]{3}-[0-9]{4}$"")","expect_column_values_to_match_regex(column=""sku"", regex=r""^[\w]{1,50}$"")",0.6896551724137931,0.6666666666666665,0.6896551724137931,63.74696428230796
For the `post_content` field: Ensure no entries exceed 280 characters and that this field cannot be null.,"expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")","expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `court_location` column is not null and contains only values from the predefined list: ['District Court', 'Supreme Court', 'Family Court'].","expect_column_values_to_not_be_null(column=""court_location""),expect_column_values_to_be_in_set(column=""court_location"", value_set=['District Court', 'Supreme Court', 'Family Court'])","expect_column_values_to_not_be_null(column=""court_location""),expect_column_values_to_be_in_set(column=""court_location"", value_set=['District Court', 'Supreme Court', 'Family Court'])",1.0,1.0,1.0,100.00000000000004
Validate that the `delivery_date` column values follow the datetime format `'%Y-%m-%d'`.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")илася",1.0,1.0,1.0,97.09835434146471
"For the `category` column: Ensure values are not in the set `['Discontinued', 'Out of Stock']`.","expect_column_values_to_not_be_in_set(column=""category"", value_set=['Discontinued', 'Out of Stock'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Not Discontinued', 'Not Out of Stock'])",0.9696969696969697,0.7096774193548386,0.9090909090909091,77.82206607249452
"Check that the `insurance_provider` column contains values from the set `['Medicare', 'Medicaid', 'Private']`.","expect_column_values_to_be_in_set(column=""insurance_provider"", value_set=['Medicare', 'Medicaid', 'Private'])","expect_column_values_to_be_in_set(column=""insurance_provider"", value_set=['Medicare', 'Medicaid', 'Private'])",1.0,1.0,1.0,100.00000000000004
"For the `session_duration` field, validate that the mean session time is between 5 and 120 minutes and that no session time is recorded as negative.","expect_column_mean_to_be_between(column=""session_duration"", min_value=5, max_value=120),expect_column_values_to_be_between(column=""session_duration"", min_value=0, max_value=None)","expect_column_mean_to_be_between(column=""session_duration"", min_value=5 * 60, max_value=120 * 60),expect_column_values_to_be_between(column=""session_duration"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""session_duration"", type_=""int"")",0.8108108108108109,0.7499999999999999,0.8108108108108109,61.95982918523497
Ensure the `release_date` column matches the format `YYYY-MM-DD` and is not in the future.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")  # Assuming the context requires parsing to check for future dates. ,# To explicitly check for future dates, additional logic would be needed outside of standard expectations.","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""1900-01-01"", max_value=""2023-10-01"")  # Assuming a release_date range between 1900 and 2023.",0.6019417475728155,0.4752475247524753,0.5436893203883495,52.34443997934582
Ensure the `submission_date` column values match the format `%Y-%m-%d %H:%M:%S` for all assignments.,"expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
Verify that the `order_date` column contains only dates that fall within the range of '2020-01-01' to '2023-12-31'.,"expect_column_values_to_be_between(column=""order_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""order_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
For the `election_date` field: Ensure this field exists and matches the type 'date'. Ensure no entries are missing.,"expect_column_to_exist(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_not_be_null(column=""election_date"")","expect_column_to_exist(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_not_be_null(column=""election_date"")",1.0,1.0,1.0,100.00000000000004
For field 'insured_person_age': Validate that all values are integers between 18 and 100.,"expect_column_values_to_be_between(column=""insured_person_age"", min_value=18, max_value=100),expect_column_values_to_be_of_type(column=""insured_person_age"", type_=""int"")","expect_column_values_to_be_between(column=""insured_person_age"", min_value=18, max_value=100)",0.7111111111111111,0.6976744186046512,0.7111111111111111,39.0168543423977
Ensure the `post_id` field consists of unique identifiers. Validate that it does not contain null values.,"expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_not_be_null(column=""post_id"")","expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_not_be_null(column=""post_id"")",1.0,1.0,1.0,100.00000000000004
For field 'duration_minutes': Ensure the average duration of videos falls within the range of 1 to 300 minutes. Ensure there are no outliers.,"expect_column_mean_to_be_between(column=""duration_minutes"", min_value=1, max_value=300),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""duration_minutes"", threshold=0.05)","expect_column_mean_to_be_between(column=""duration_minutes"", min_value=1, max_value=300),expect_column_stdev_to_be_between(column=""duration_minutes"", min_value=None, max_value=1)  # Assume standard deviation to be around 1 in order to minimize outliers.",0.6133333333333334,0.5205479452054794,0.5866666666666667,61.582168109393336
"For the `precipitation` and `temperature` columns, ensure the sum of `precipitation` is equal to the total `temperature` for the corresponding dates.","expect_multicolumn_sum_to_equal(column_list=[""precipitation"", ""temperature""])","expect_column_pair_values_to_be_equal(column_A=""temperature"", column_B=""precipitation"")",0.5454545454545455,0.1,0.4545454545454546,25.396201325263178
For field 'polling_station': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""polling_station""),expect_column_values_to_be_of_type(column=""polling_station"", type_=""text""),expect_column_values_to_be_unique(column=""polling_station"")","expect_column_values_to_not_be_null(column=""polling_station""),expect_column_values_to_be_of_type(column=""polling_station"", type_=""text""),expect_column_values_to_be_unique(column=""polling_station"")",1.0,1.0,1.0,100.00000000000004
For the `distance_km` column: Check that all values are positive integers and that the total distance for all deliveries matches the expected value of 5000 km.,"expect_column_values_to_be_between(column=""distance_km"", min_value=1, max_value=None),expect_column_sum_to_be_between(column=""distance_km"", min_value=5000, max_value=5000)","expect_column_values_to_be_between(column=""distance_km"", min_value=1),expect_column_values_to_be_of_type(column=""distance_km"", type_=""int""),expect_column_sum_to_be_between(column=""distance_km"", min_value=5000, max_value=5000)",0.8115942028985509,0.746268656716418,0.8115942028985509,64.75207355773296
Validate that `loan_amount` in the Banking table is less than or equal to `collateral_value`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""loan_amount"", column_B=""collateral_value"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""loan_amount"", column_B=""collateral_value"")",1.0,1.0,1.0,100.00000000000004
Ensure `prescription_id` values are unique and not null in the `prescriptions` table.,"expect_column_to_exist(column=""prescription_id""),expect_column_values_to_not_be_null(column=""prescription_id""),expect_column_values_to_be_unique(column=""prescription_id"")","expect_column_values_to_be_unique(column=""prescription_id""),expect_column_values_to_not_be_null(column=""prescription_id"")",0.8444444444444443,0.8372093023255813,0.7111111111111111,67.34450755684337
"For the `plan_type` field: Ensure it matches the type 'text'. Validate that all values are from the specified set `['Basic', 'Premium', 'Family']`.","expect_column_values_to_be_of_type(column=""plan_type"", type_=""text""),expect_column_values_to_be_in_set(column=""plan_type"", value_set=['Basic', 'Premium', 'Family'])","expect_column_values_to_be_of_type(column=""plan_type"", type_=""text""),expect_column_values_to_be_in_set(column=""plan_type"", value_set=[""Basic"", ""Premium"", ""Family""])",1.0,1.0,1.0,82.76706852379537
For table 'user_profiles': Ensure the number of rows is between 100 and 5000. Ensure the column 'email' exists and follows a valid email format.,"expect_table_row_count_to_be_between(min_value=100, max_value=5000),expect_column_to_exist(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_table_row_count_to_be_between(table=""user_profiles"", min_value=100, max_value=5000),expect_column_to_exist(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.9411764705882354,0.9090909090909091,0.9411764705882354,87.74635764725326
Ensure that the `response_time` in `customer_interactions` is less than the `issue_resolution_time` in `support_tickets`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""response_time"", column_B=""issue_resolution_time"")","expect_column_pair_values_to_be_increasing(column_A=""response_time"", column_B=""issue_resolution_time"")",0.8571428571428572,0.7272727272727272,0.8571428571428572,76.34726548250774
Ensure the median of the `rating` column is between 3 and 4.,"expect_column_median_to_be_between(column=""rating"", min_value=3, max_value=4)","expect_column_median_to_be_between(column=""rating"", min_value=3, max_value=4)",1.0,1.0,1.0,100.00000000000004
"Ensure the `currency` column does not contain values outside the set `['BTC', 'ETH', 'LTC']`.","expect_column_values_to_be_in_set(column=""currency"", value_set=['BTC', 'ETH', 'LTC'])","expect_column_values_to_be_in_set(column=""currency"", value_set=['BTC', 'ETH', 'LTC'])",1.0,1.0,1.0,100.00000000000004
Ensure the `brand` column contains only distinct values and is populated (no nulls).,"expect_column_values_to_be_unique(column=""brand""),expect_column_values_to_not_be_null(column=""brand"")","expect_column_to_exist(column=""brand""),expect_column_values_to_be_unique(column=""brand""),expect_column_values_to_not_be_null(column=""brand"")",0.85,0.8421052631578948,0.85,71.41300691065217
Validate that the `patient_email` and `author_email` fields do not contain any duplicated email addresses across both domains.,"expect_column_pair_values_to_be_unique(column_a=""patient_email"", column_b=""author_email"")","expect_select_column_values_to_be_unique(column=""patient_email""),expect_select_column_values_to_be_unique(column=""author_email""),expect_column_values_to_be_in_set(column=""patient_email"", value_set=author_email),expect_column_values_to_be_in_set(column=""author_email"", value_set=patient_email)",0.38095238095238093,0.22950819672131148,0.38095238095238093,21.362062663969535
Check that the `timestamp` column values in the `block_data` table are formatted as 'YYYY-MM-DD HH:MM:SS' and are in chronological order.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Check that the `participant_age` column only includes integer values between 18 and 65.,"expect_column_values_to_be_between(column=""participant_age"", min_value=18, max_value=65),expect_column_values_to_be_of_type(column=""participant_age"", type_=""int"")","expect_column_values_to_be_of_type(column=""participant_age"", type_=""int""),expect_column_values_to_be_between(column=""participant_age"", min_value=18, max_value=65)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
Validate that the `assignment_submissions` column contains valid JSON objects that include keys for `submission_time` and `feedback`.,"expect_column_values_to_be_json_parseable(column=""assignment_submissions""),expect_column_values_to_match_json_schema(column=""assignment_submissions"", schema={""type"": ""object"", ""properties"": {""submission_time"": {""type"": ""string""}, ""feedback"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""assignment_submissions""),expect_select_column_values_to_match_json_schema(column=""assignment_submissions"", schema={""type"": ""object"", ""properties"": {""submission_time"": {""type"": ""string""}, ""feedback"": {""type"": ""string""}}})ıldığında",0.9538461538461539,0.9206349206349207,0.9538461538461539,96.01687767385408
For table 'transactions': Ensure the table contains at least 100 rows. Confirm that 'timestamp' values are unique.,"expect_table_row_count_to_be_between(min_value=100),expect_column_values_to_be_unique(column=""timestamp"")","expect_table_row_count_to_be_between(table=""transactions"", min_value=100),expect_column_values_to_be_unique(column=""timestamp"")",0.9473684210526316,0.8888888888888888,0.9473684210526316,82.62592696121884
Ensure the total number of rows in the `calls` table is equal to the number of rows in the `messages` table.,"expect_table_row_count_to_equal_other_table(table=""messages"")","expect_table_row_count_to_equal_other_table(table_name=""calls"", other_table_name=""messages"")",0.8,0.6956521739130435,0.8,58.08783080909063
"Confirm that the `treatment_response` column contains only valid responses from the set `['Improved', 'Unchanged', 'Worsened']`.","expect_column_values_to_be_in_set(column=""treatment_response"", value_set=['Improved', 'Unchanged', 'Worsened'])","expect_column_values_to_be_in_set(column=""treatment_response"", value_set=['Improved', 'Unchanged', 'Worsened'])",1.0,1.0,1.0,100.00000000000004
"For the `device_id` field, confirm that it matches the format defined by the regular expression: `^[A-F0-9]{16}$`.","expect_column_values_to_match_regex(column=""device_id"", regex=r""^[A-F0-9]{16}$"")","expect_column_values_to_match_regex(column=""device_id"", regex=r""^[A-F0-9]{16}$"")",1.0,1.0,1.0,100.00000000000004
For field 'court_hearing_date': Ensure that values in 'court_hearing_date' are valid datetime strings and can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""court_hearing_date"")","expect_column_values_to_be_dateutil_parseable(column=""court_hearing_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `complaint_description` is between 10 and 500 characters and contains no SQL-like patterns.,"expect_column_value_lengths_to_be_between(column=""complaint_description"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""complaint_description"", regex=r"".*(SELECT|INSERT|UPDATE|DELETE|WHERE|DROP|TABLE|--|;).*"")","expect_column_value_lengths_to_be_between(column=""complaint_description"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""complaint_description"", regex=r""select|insert|update|delete|alter|drop|truncate"")",0.9428571428571428,0.9117647058823528,0.9428571428571428,72.5042330738405
Ensure the total number of rows in the `subscription_data` table matches the expected count of 5000.,"expect_table_row_count_to_equal(table=""subscription_data"", value=5000)",expect_table_row_count_to_equal(5000),0.7777777777777778,0.625,0.7777777777777778,43.60299025004959
Confirm that the `watch_time` column adheres to a normal distribution using the Kolmogorov-Smirnov test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""watch_time"", threshold=0.05)","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""watch_time"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field `location`: Ensure the field contains only unique values representing valid geographic locations.,"expect_column_values_to_be_unique(column=""location""),expect_column_values_to_not_match_regex(column=""location"", regex=r""^.*$"")  # This regex would typically be refined to match specific geographic criteria.","expect_column_values_to_be_unique(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=valid_geographic_locations)  # Replace 'valid_geographic_locations' with the set of valid geographic locations.",0.507936507936508,0.3934426229508197,0.47619047619047616,52.56541737378606
Ensure that the `booking_date` column contains values within the last 30 days and is formatted correctly.,"expect_column_values_to_be_dateutil_parseable(column=""booking_date""),expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""booking_date"", min_value=""2023-09-21"", max_value=""2023-10-21"")","expect_column_values_to_be_dateutil_parseable(column=""booking_date""),expect_column_values_to_be_between(column=""booking_date"", min_value=""2023-05-31"", max_value=""2023-06-30""),expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d"")",0.9090909090909091,0.8604651162790697,0.5681818181818182,91.54446387629869
For the column `match_date`: Ensure that all dates are arranged in increasing order based on `match_id`.,"expect_column_values_to_be_increasing(column=""match_date"", order_by_column=""match_id"")","expect_column_values_to_be_increasing(column=""match_date"", by_column=""match_id"")",0.962962962962963,0.8799999999999999,0.962962962962963,88.38992012581365
Check that the `humidity` column has values within the range of `0` to `100` and are formatted as percentages.,"expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_match_regex(column=""humidity"", regex=r""^\d+(\.\d+)?%$"")","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""humidity"", type_=""float"")  # assuming humidity values are of type float",0.6896551724137931,0.6428571428571428,0.6896551724137931,65.65803494148028
"For field 'order_status': Ensure this field contains values from the set ['Pending', 'Shipped', 'Delivered']. Ensure this field exists.","expect_column_to_exist(column=""order_status""),expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered'])","expect_column_to_exist(column=""order_status""),expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered'])",1.0,1.0,1.0,100.00000000000004
Verify that the `listing_date` field conforms to the format 'DD-MM-YYYY' and that all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_increasing(column=""listing_date"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""listing_date""),expect_column_values_to_be_less_than(column=""listing_date"", value=""current_date"")",0.7419354838709677,0.6999999999999998,0.7419354838709677,59.37841601674012
For the `plaintiff_id` and `defendant_id` columns: Ensure that each value corresponds to existing entries in the `users` table and both columns are not null.,"expect_column_values_to_not_be_null(column=""plaintiff_id""),expect_column_values_to_not_be_null(column=""defendant_id""),expect_select_column_values_to_be_unique_within_record(column=""plaintiff_id""),expect_select_column_values_to_be_unique_within_record(column=""defendant_id"")","expect_column_to_exist(column=""plaintiff_id""),expect_column_values_to_not_be_null(column=""plaintiff_id""),expect_column_to_exist(column=""defendant_id""),expect_column_values_to_not_be_null(column=""defendant_id""),expect_select_columns_to_be_unique_within_row(column_list=[""plaintiff_id"", ""defendant_id""])",0.7826086956521738,0.6666666666666666,0.717391304347826,69.81926637062428
"For the `subscription_plan` field: Verify that all entries match one of the allowed values in `['Free', 'Basic', 'Premium']`.","expect_column_values_to_be_in_set(column=""subscription_plan"", value_set=['Free', 'Basic', 'Premium'])","expect_column_values_to_be_in_set(column=""subscription_plan"", value_set=['Free', 'Basic', 'Premium'])",1.0,1.0,1.0,100.00000000000004
For the `block_number` column: Ensure that values are in increasing order and are unique. Validate that the minimum value is greater than or equal to 0.,"expect_column_values_to_be_increasing(column=""block_number""),expect_column_values_to_be_unique(column=""block_number""),expect_column_min_to_be_between(column=""block_number"", min_value=0)","expect_column_values_to_be_increasing(column=""block_number""),expect_column_values_to_be_unique(column=""block_number""),expect_column_min_to_be_greater_than(column=""block_number"", value=0)",0.9333333333333333,0.8620689655172413,0.9333333333333333,91.19765347366997
Ensure that the `student_age` column has values that follow a normal distribution with a mean of `20` and a standard deviation of `2`.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""student_age"", p_value=0.05),expect_column_mean_to_be_between(column=""student_age"", min_value=18, max_value=22),expect_column_stdev_to_be_between(column=""student_age"", min_value=1.5, max_value=2.5)","expect_column_mean_to_be_between(column=""student_age"", min_value=18, max_value=23),expect_column_std_dev_to_be_between(column=""student_age"", min_value=1.8, max_value=3.2)",0.6666666666666667,0.5609756097560976,0.6666666666666667,47.69180845611487
For field 'transaction_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Validate that all dates are within the current fiscal year.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_not_be_null(column=""transaction_date""),expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_not_be_null(column=""transaction_date""),expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2022-10-01"", max_value=""2023-09-30"")  # This assumes a fiscal year that begins from October 1st to September 30th.",0.7450980392156864,0.7,0.7254901960784315,77.70188975371515
Ensure the `call_id` column contains only unique values and is of type 'string'. Ensure this field exists.,"expect_column_to_exist(column=""call_id""),expect_column_values_to_be_unique(column=""call_id""),expect_column_values_to_be_of_type(column=""call_id"", type_=""string"")","expect_column_to_exist(column=""call_id""),expect_column_values_to_be_unique(column=""call_id""),expect_column_values_to_be_of_type(column=""call_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
For field 'election_date': Ensure this field cannot be null. Ensure the type is 'date'. Validate that all election dates are in the future or today.,"expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_in_set(column=""election_date"", value_set=[date.today()])  # This is a placeholder; you would need to implement the logic to validate future dates.","expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_greater_than_or_equal_to(column=""election_date"", value=datetime.datetime.now())",0.711111111111111,0.6590909090909091,0.6888888888888889,69.24905954826104
Validate that the combination of `ip_address` and `alert_type` columns is unique across all records.,"expect_compound_columns_to_be_unique(columns=[""ip_address"", ""alert_type""])","expect_compound_columns_to_be_unique(column_A=""ip_address"", column_B=""alert_type"")",0.88,0.6956521739130435,0.88,60.93671089617578
For field 'user_profile': Ensure the field is a valid JSON object. Validate that it contains required fields as specified in the JSON schema.,"expect_column_values_to_be_json_parseable(column=""user_profile""),expect_column_values_to_match_json_schema(column=""user_profile"", schema={""required"": [""field1"", ""field2""]})  # Replace with actual required fields in the schema.","expect_column_values_to_be_json_parseable(column=""user_profile""),expect_column_values_to_match_json_schema(column=""user_profile"", schema={""type"": ""object"", ""required"": [""first_name"", ""last_name""]})",0.7333333333333334,0.689655172413793,0.7333333333333334,75.64727935004697
"Validate that the `case_status` column contains only values from the set `['Open', 'Closed', 'Pending']`. Ensure this field exists and is not null.","expect_column_to_exist(column=""case_status""),expect_column_values_to_not_be_null(column=""case_status""),expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_to_exist(column=""case_status""),expect_column_values_to_be_in_set(column=""case_status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_not_be_null(column=""case_status"")",1.0,0.967741935483871,0.71875,83.97511401948091
Validate that the `transaction_id` column in the `transactions` table is unique and of type 'string'. Ensure there are no null values.,"expect_column_to_exist(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",0.6666666666666666,0.6545454545454547,0.6666666666666666,33.52015602122288
"Ensure the `data_payload` column contains valid JSON objects conforming to the schema `{ 'data': 'string', 'timestamp': 'string' }`.","expect_column_values_to_match_json_schema(column=""data_payload"", schema={""type"": ""object"", ""properties"": {""data"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""data_payload"", schema={""data"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}})",0.9189189189189189,0.8571428571428572,0.9189189189189189,76.3944151275223
For field 'user_id': Ensure the field is required (not null). Ensure all values are unique and match the type 'text'.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""text"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For the `priority_level` column, ensure values are integers within the range of `1` to `5`.","expect_column_values_to_be_between(column=""priority_level"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""priority_level"", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=""priority_level"", type_=""int"")",0.7142857142857143,0.7000000000000001,0.7142857142857143,50.38793199614183
"Confirm that the `medical_record` field is a valid JSON object and adheres to the specified schema, ensuring all required fields are present.","expect_column_values_to_be_json_parseable(column=""medical_record""),expect_column_values_to_match_json_schema(column=""medical_record"", schema={""type"": ""object"", ""required"": [""field1"", ""field2"", ...]})","expect_column_values_to_match_json_schema(column=""medical_record""),expect_column_values_to_not_be_null(column=""medical_record""),expect_column_values_to_match_json_schema(column=""medical_record"", schema={""type"": ""object"", ""properties"": {""required"": [""id"", ""name"", ""birthdate"", ""gender""]}, ""required"": [""id"", ""name"", ""birthdate"", ""gender""]})",0.6571428571428571,0.5294117647058824,0.6285714285714286,46.35342112622981
"Ensure the `loan_amount` column values are within the range of $1,000 to $500,000, and that they are sorted in increasing order.","expect_column_values_to_be_between(column=""loan_amount"", min_value=1000, max_value=500000),expect_column_values_to_be_increasing(column=""loan_amount"")","expect_column_values_to_be_between(column=""loan_amount"", min_value=1000, max_value=500000),expect_column_values_to_be_increasing(column=""loan_amount"")",1.0,1.0,1.0,100.00000000000004
Ensure the `file_size` for all uploaded documents is within the range of `1KB` to `10MB`.,"expect_file_size_to_be_between(min_value=1024, max_value=10485760)","expect_file_size_to_be_between(min_value=1 * 1024, max_value=10 * 1024 * 1024)  # min value in kilobytes, max value in bytes",0.6285714285714286,0.5454545454545455,0.6285714285714286,49.57470060922256
"Ensure the `claim_status` column contains only values from the set `['Pending', 'Approved', 'Denied']`.","expect_column_values_to_be_in_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Denied'])","expect_column_values_to_be_in_set(column=""claim_status"", value_set=[""Pending"", ""Approved"", ""Denied""])",1.0,1.0,1.0,69.17381010255603
Ensure the `email_id` column contains only unique email addresses and matches a valid email format.,"expect_column_values_to_be_unique(column=""email_id""),expect_column_values_to_match_regex(column=""email_id"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_be_unique(column=""email_id""),expect_column_values_to_match_regex(column=""email_id"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")",0.75,0.7037037037037037,0.75,77.17815465742113
Ensure the `case_description` column's string length does not exceed 500 characters.,"expect_column_value_lengths_to_be_between(column=""case_description"", min_value=0, max_value=500)","expect_column_max_char_length_to_be_between(column=""case_description"", max_value=500)",0.7999999999999999,0.6428571428571429,0.7999999999999999,65.87588099983532
"For the `view_count`: Confirm that the sum of views across all videos is above 1,000,000.","expect_column_sum_to_be_between(column=""view_count"", min_value=1000000)","expect_column_sum_to_be_between(column=""view_count"", min_value=1000000)",1.0,1.0,1.0,100.00000000000004
Check that the total of `deposits` and `withdrawals` columns in each record equals the `balance` column.,"expect_multicolumn_sum_to_equal(column_list=[""deposits"", ""withdrawals""], target_column=""balance"")","expect_multicolumn_sum_to_equal(column_list=[""deposits"", ""withdrawals""], sum_column=""balance"")",0.9166666666666666,0.8181818181818182,0.9166666666666666,91.57103753711765
Ensure the `product_id` column contains only unique values. Ensure this field is required (not null). Ensure the field matches the type 'integer'.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"For field 'study_id': Ensure the field exists. Check that values in 'study_id' are unique across the dataset, and the data type is 'text'.","expect_column_to_exist(column=""study_id""),expect_column_values_to_be_unique(column=""study_id""),expect_column_values_to_be_of_type(column=""study_id"", type_=""text"")","expect_column_to_exist(column=""study_id""),expect_column_values_to_be_unique(column=""study_id""),expect_column_values_to_be_of_type(column=""study_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For the `game_title` column: Ensure that all string values are between 1 and 100 characters long and do not contain special characters.,"expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=""game_title"", regex=r""[^a-zA-Z0-9\s]"")","expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=""game_title"", regex=r""[^A-Za-z0-9\s]"")",1.0,1.0,1.0,96.36162552773173
Check that the `grades` column contains values that fall within the range of 0 to 100.,"expect_column_values_to_be_between(column=""grades"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""grades"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For the `service_request_date` field: Validate that all entries are in the format `YYYY-MM-DD` and are in the past.,"expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""service_request_date""),expect_column_values_to_be_increasing(column=""service_request_date"")","expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""service_request_date"")",0.7936507936507937,0.7540983606557377,0.7936507936507937,63.06796161999339
For the `stock_quantity` column: Ensure values are non-negative integers and check for non-null entries.,"expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=∞),expect_column_values_to_not_be_null(column=""stock_quantity"")",0.9863013698630138,0.9577464788732395,0.7671232876712328,96.97770291819575
Ensure the `threat_level` column only contains non-null values that match the type 'text'.,"expect_column_values_to_not_be_null(column=""threat_level""),expect_column_values_to_be_of_type(column=""threat_level"", type_=""text"")","expect_column_values_to_not_be_null(column=""threat_level""),expect_column_values_to_be_of_type(column=""threat_level"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Verify that the combination of `customer_id` and `plan_type` is unique, ensuring no customer has multiple active plans of the same type.","expect_compound_columns_to_be_unique(column_names=[""customer_id"", ""plan_type""])","expect_compound_columns_to_be_unique(column_A=""customer_id"", column_B=""plan_type"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
"Confirm that the `category` column contains values that match either of the patterns `['Electronics', 'Home', 'Clothing']`.","expect_column_values_to_be_in_set(column=""category"", value_set=[""Electronics"", ""Home"", ""Clothing""])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Home', 'Clothing'])",1.0,1.0,1.0,66.93976514189524
"For field `vote_choice`: Ensure values belong to the set `['Candidate A', 'Candidate B', 'Candidate C']`. Validate that no votes are recorded for values outside this set.","expect_column_values_to_be_in_set(column=""vote_choice"", value_set=['Candidate A', 'Candidate B', 'Candidate C']),expect_column_values_to_not_be_in_set(column=""vote_choice"", value_set=['Candidate A', 'Candidate B', 'Candidate C'])","expect_column_values_to_be_in_set(column=""vote_choice"", value_set=['Candidate A', 'Candidate B', 'Candidate C']),expect_column_values_to_be_in_set(column=""vote_choice"", value_set=['Candidate A', 'Candidate B', 'Candidate C']),expect_column_values_to_be_in_set(column=""vote_choice"", value_set=['Candidate A', 'Candidate B', 'Candidate C'])",0.7912087912087912,0.7640449438202246,0.7912087912087912,65.44341134880129
Ensure that the `email` field conforms to the standard email pattern and does not contain any SQL-like injection patterns.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_match_regex(column=""email"", regex=r"".*(\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|--|#)\b).*"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Expect column values to match the standard email pattern #  #expect_column_values_to_not_match_regex(column=""email"", regex=r""^(?:[\w\.\[\]\-]+\:\w+\@\[\]\w+\.\[\]\w\-\[\]\w+)+(\w\-\w\+)+(\w\-\w\+)+(\w\-\w\+)+(\w\-\w\+)+(\w\-\w\+)+(\w\-\w\+)+(\w\-\w\+)+(\w\-\w\+)+(\w\-\w\+)$"")  # Expect column values to NOT match any SQL-like injection patterns",0.48484848484848486,0.4742268041237114,0.48484848484848486,29.433474813006878
For field 'block_height': Validate that the field is an integer type. Ensure values in (block_height) are greater than 0 and are in increasing order. Ensure this field exists.,"expect_column_to_exist(column=""block_height""),expect_column_values_to_be_of_type(column=""block_height"", type_=""int""),expect_column_values_to_be_greater_than(column=""block_height"", value=0),expect_column_values_to_be_increasing(column=""block_height"")","expect_column_to_exist(column=""block_height""),expect_column_values_to_be_of_type(column=""block_height"", type_=""int""),expect_column_values_to_be_between(column=""block_height"", min_value=1, max_value=None),expect_column_values_to_be_increasing(column=""block_height"")",0.891566265060241,0.8148148148148148,0.891566265060241,85.67161337947972
"In the `data_format` field, ensure that all entries match either `['JSON', 'CSV', 'XML']` and are distinct across the dataset.","expect_column_values_to_be_in_set(column=""data_format"", value_set=[""JSON"", ""CSV"", ""XML""]),expect_column_values_to_be_unique(column=""data_format"")","expect_column_values_to_match_regex_list(column=""data_format"", regex_list=[""JSON"", ""CSV"", ""XML""]),expect_column_values_to_be_unique(column=""data_format"")",0.7916666666666666,0.6956521739130435,0.7916666666666666,82.45877312351095
Verify that the `customer_email` field adheres to valid email format and is unique across the dataset.,"expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # regex to check email format; assuming you are validating uniqueness via a custom function.",0.7058823529411765,0.5306122448979591,0.6666666666666666,70.43338870495697
For the `release_date` field: Confirm all dates are of type 'datetime' and that there are no missing values.,"expect_column_values_to_be_of_type(column=""release_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""release_date"")",0.8627450980392156,0.8571428571428571,0.8627450980392156,74.80673768313193
For field 'participant_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""participant_id""),expect_column_values_to_be_of_type(column=""participant_id"", type_=""text""),expect_column_values_to_be_unique(column=""participant_id"")","expect_column_values_to_not_be_null(column=""participant_id""),expect_column_values_to_be_of_type(column=""participant_id"", type_=""text""),expect_column_values_to_be_unique(column=""participant_id"")",1.0,1.0,1.0,100.00000000000004
For column 'uv_index': Validate that the values are integers between 0 and 11. Ensure this column exists.,"expect_column_to_exist(column=""uv_index""),expect_column_values_to_be_between(column=""uv_index"", min_value=0, max_value=11),expect_column_values_to_be_of_type(column=""uv_index"", type_=""int"")","expect_column_to_exist(column=""uv_index""),expect_column_values_to_be_between(column=""uv_index"", min_value=0, max_value=11),expect_column_values_to_be_of_type(column=""uv_index"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_id` column exists and contains unique values for all products. Validate that the `price` column only contains positive numeric values.,"expect_column_to_exist(column=""product_id""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None)","expect_column_to_exist(column=""product_id""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=None)",0.8333333333333333,0.8000000000000002,0.8333333333333333,67.68824061135687
For field 'billing_period': Ensure the field matches the JSON schema defining 'start_date' and 'end_date' as required fields with correct datetime formats.,"expect_column_values_to_match_json_schema(column=""billing_period"", schema={""type"": ""object"", ""properties"": {""start_date"": {""type"": ""string"", ""format"": ""date-time""}, ""end_date"": {""type"": ""string"", ""format"": ""date-time""}}, ""required"": [""start_date"", ""end_date""]})","expect_column_values_to_match_json_schema(column=""billing_period"", schema={""type"": ""object"", ""required"": [""start_date"", ""end_date""], ""properties"": {""start_date"": {""type"": ""string"", ""format"": ""datetime""}, ""end_date"": {""type"": ""string"", ""format"": ""datetime""}}})",0.90625,0.8064516129032259,0.7500000000000001,92.19453250249845
"For table 'inventory': Ensure the columns 'warehouse_id', 'product_sku', and 'quantity' exist in that order. Validate that the total number of rows is between 50 and 1000.","expect_table_columns_to_match_ordered_list(column_list=[""warehouse_id"", ""product_sku"", ""quantity""]),expect_table_row_count_to_be_between(min_value=50, max_value=1000)","expect_column_order_to_be_equal_to(table=""inventory"", column_order=[""warehouse_id"", ""product_sku"", ""quantity""]),expect_table_row_count_to_be_between(table=""inventory"", min_value=50, max_value=1000)",0.8275862068965517,0.5714285714285715,0.7586206896551724,63.65204110197938
For field 'measurement_value': Ensure values are of type 'float'. Ensure there are no missing values. The standard deviation of the measurement values should not exceed 5.,"expect_column_values_to_be_of_type(column=""measurement_value"", type_=""float""),expect_column_values_to_not_be_null(column=""measurement_value""),expect_column_stdev_to_be_between(column=""measurement_value"", min_value=0, max_value=5)","expect_column_values_to_be_of_type(column=""measurement_value"", type_=""float""),expect_column_values_to_not_be_null(column=""measurement_value""),expect_column_stdev_to_be_between(column=""measurement_value"", min_value=0, max_value=5)ЎыџN",0.9866666666666666,0.9863013698630138,0.9866666666666666,98.81635957019256
Ensure the `amount` column in the `transactions` table is a non-negative float and does not exceed the corresponding `credit_limit` in the `users` table.,"expect_column_values_to_be_between(column=""amount"", min_value=0.0),expect_column_pair_values_A_to_be_less_than_B(column_A=""amount"", column_B=""credit_limit"")","expect_column_values_to_be_of_type(column=""amount"", type_=""float""),expect_column_values_to_be_between(column=""amount"", min_value=0.0, max_value=float('inf'))  # For non-negative float, remove float('inf'), and ensure there is no type coercion from int to float, or from float to int, due to precision concerns.",0.4578313253012048,0.32098765432098764,0.3373493975903614,38.58441275301842
Ensure the `team_id` column in Sports Analytics is unique across all records and matches the corresponding `league_id` values in the League table.,"expect_column_values_to_be_unique(column=""team_id""),expect_column_pair_values_to_be_equal(left_column=""team_id"", right_column=""league_id"")","expect_column_values_to_be_unique(column=""team_id""),expect_select_column_values_to_be_equal_to_other_table(column=""team_id"", other_table=""league_id"")",0.8,0.6250000000000001,0.8,72.244680073418
"Verify that the `discount_percentage` column in the ERP system contains values between 0 and 50, ensuring no negative discounts.","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=50)","expect_column_values_to_be_between(column=""discount_percentage"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `candidate_id` column is linked to valid entries in the `candidates` table, and that no duplicates exist within the same election.","expect_column_values_to_be_in_set(column=""candidate_id"", value_set=valid_candidate_ids), ,expect_column_values_to_be_unique(column=""candidate_id"")","expect_column_to_exist(column=""candidate_id""),expect_column_values_to_be_unique(column=""candidate_id""),expect_select_column_values_to_be_unique_within_record(column=""candidate_id"")",0.6923076923076924,0.5599999999999999,0.6538461538461539,58.353733857444944
For field 'release_date': Ensure all entries follow the format 'YYYY-MM-DD'. Ensure the field is required (not null).,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")",1.0,1.0,1.0,100.00000000000004
For the `last_login` column: Ensure values are of type 'timestamp' and that all entries are in chronological order. Verify that there are no missing values.,"expect_column_values_to_be_of_type(column=""last_login"", type_=""timestamp""),expect_column_values_to_be_increasing(column=""last_login""),expect_column_values_to_not_be_null(column=""last_login"")","expect_column_values_to_be_of_type(column=""last_login"", type_=""timestamp""),expect_column_values_to_be_increasing(column=""last_login""),expect_column_values_to_not_be_null(column=""last_login"")",1.0,1.0,1.0,100.00000000000004
For the `appointment_date` field: Ensure all dates are in the format 'YYYY-MM-DD' and are not null. Verify that these dates fall within the range of '2020-01-01' to '2023-12-31'.,"expect_column_to_exist(column=""appointment_date""),expect_column_values_to_not_be_null(column=""appointment_date""),expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""appointment_date""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date""),expect_column_values_to_not_be_null(column=""appointment_date""),expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",0.9107142857142857,0.9090909090909091,0.9107142857142857,83.74446965587866
Ensure the `student_id` column exists and contains only unique values that follow the format `S123456`.,"expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^S\d{6}$"")","expect_column_to_exist(column=""student_id""),expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""S[0-9]{6}"")",0.9508196721311476,0.9152542372881356,0.9508196721311476,87.9963679497384
For fields 'price' and 'market_value': Ensure 'price' is less than or equal to 'market_value' for all records.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""price"", column_B=""market_value"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""price"", column_B=""market_value"")",0.9411764705882353,0.875,0.9411764705882353,92.9923845210929
Check that the `loan_amount` column is sorted in increasing order for all entries.,"expect_column_values_to_be_increasing(column=""loan_amount"")","expect_column_values_to_be_increasing(column=""loan_amount"")",1.0,1.0,1.0,100.00000000000004
Ensure the combination of `policy_number` and `claim_id` is unique across the `claims` table.,"expect_compound_columns_to_be_unique(column_names=[""policy_number"", ""claim_id""])","expect_compound_columns_to_be_unique(column_A=""policy_number"", column_B=""claim_id"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
For field 'post_content': Ensure the field is of type 'text'. Validate that the content does not exceed 280 characters and contains no missing values.,"expect_column_values_to_be_of_type(column=""post_content"", type_=""text""),expect_column_value_lengths_to_be_between(column=""post_content"", min_value=0, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")","expect_column_values_to_be_of_type(column=""post_content"", type_=""text""),expect_column_value_lengths_to_be_between(column=""post_content"", min_value=1, max_value=280),expect_column_values_to_not_be_null(column=""post_content"")",0.9736842105263158,0.9459459459459459,0.9736842105263158,97.04907832745397
Validate that the `data_exfiltration_attempts` column has a maximum value of zero.,"expect_column_max_to_be_between(column=""data_exfiltration_attempts"", max_value=0)","expect_column_values_to_be_between(column=""data_exfiltration_attempts"", min_value=0, max_value=0)",0.8275862068965517,0.6666666666666665,0.8275862068965517,70.95677710506087
For field 'customer_email': Ensure the field is required (not null). Ensure it adheres to the standard email format. Ensure this field exists.,"expect_column_to_exist(column=""customer_email""),expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""customer_email""),expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.7887323943661972,0.7826086956521738,0.7887323943661972,77.70163253094874
Verify that the `plaintiff_count` field contains numeric values and is always greater than or equal to `1`.,"expect_column_values_to_be_of_type(column=""plaintiff_count"", type_=""int""),expect_column_values_to_be_greater_than(column=""plaintiff_count"", value=1)","expect_column_values_to_be_of_type(column=""plaintiff_count"", type_=""int""),expect_column_values_to_be_between(column=""plaintiff_count"", min_value=1)",0.9166666666666666,0.8260869565217391,0.9166666666666666,89.21204364132208
For `attachment_count`: Ensure that this field contains only non-negative integers and that the maximum value does not exceed 10.,"expect_column_values_to_be_between(column=""attachment_count"", min_value=0, max_value=10),expect_column_values_to_be_of_type(column=""attachment_count"", type_=""int"")","expect_column_values_to_be_of_type(column=""attachment_count"", type_=""int""),expect_column_max_to_be_between(column=""attachment_count"", max_value=10)",0.9019607843137256,0.7755102040816326,0.5882352941176471,83.01855121947375
For the `enrollment_date` column: Ensure all entries are in the format 'YYYY-MM-DD'. Validate that no entries are older than 5 years from today.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date"")  # To ensure valid date entries,# Additional check for no entries older than 5 years would require a custom validation not covered by the provided expectations.","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""enrollment_date"", value=(datetime.date.today() - datetime.timedelta(days=3650)).strftime(""%Y-%m-%d"")  # Replace the number 3650 with the actual number of days today from 5 years ago.",0.5490196078431373,0.43999999999999995,0.5098039215686274,51.35827742446469
Validate that the `developer_email` column matches the regex pattern for email addresses and contains no duplicates.,"expect_column_values_to_match_regex(column=""developer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""developer_email"")","expect_column_values_to_match_regex(column=""developer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""developer_email"")",1.0,1.0,1.0,100.00000000000004
For field 'plan_start_date': Ensure the field matches the format 'YYYY-MM-DD'. Ensure this field is required (not null). Ensure this field exists.,"expect_column_to_exist(column=""plan_start_date""),expect_column_values_to_not_be_null(column=""plan_start_date""),expect_column_values_to_match_strftime_format(column=""plan_start_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""plan_start_date""),expect_column_values_to_match_strftime_format(column=""plan_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""plan_start_date""),expect_column_values_to_be_in_set(column=""plan_start_date"", value_set=['YYYY-MM-DD'])",0.813953488372093,0.8095238095238095,0.627906976744186,70.6631674941189
Verify that the `hearing_date` values are within the next 12 months and conform to the datetime format '%Y-%m-%d'.,"expect_column_values_to_be_dateutil_parseable(column=""hearing_date""),expect_column_values_to_match_strftime_format(column=""hearing_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_between(column=""hearing_date"", min_value=""2023-10-01"", max_value=""2024-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""hearing_date""),expect_column_values_to_be_between(column=""hearing_date"", min_value=""2023-10-01"", max_value=""2024-10-01"")",0.7945205479452054,0.7887323943661972,0.7945205479452054,59.310249128380256
For field 'timestamp': Ensure the field matches the type 'datetime'. Validate that the values are formatted as 'YYYY-MM-DD HH:MM:SS' and are not null. Ensure this field exists.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""timestamp"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `department` column contains only distinct values from the predefined set `['Health', 'Education', 'Transportation']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])",1.0,1.0,1.0,100.00000000000004
For multi-column validation of 'city_name' and 'forecast_value': Ensure that combinations of these columns are unique across records.,"expect_compound_columns_to_be_unique(columns=[""city_name"", ""forecast_value""])","expect_compound_columns_to_be_unique(column_A=""city_name"", column_B=""forecast_value"")",0.88,0.6956521739130435,0.88,60.93671089617578
For field 'stock_quantity': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure that values in 'stock_quantity' must be greater than or equal to zero.,"expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)","expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)",1.0,1.0,1.0,100.00000000000004
"For the `category` field: Ensure values are from the predefined set `['Electronics', 'Clothing', 'Home Goods']` and are case-sensitive.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods']),expect_column_values_to_be_unique(column=""category""),expect_column_values_to_be_case_sensitive(column=""category"")",0.6382978723404256,0.6222222222222222,0.6382978723404256,44.03355816447538
For `points_scored`: Validate that all values are greater than or equal to 0.,"expect_column_values_to_be_between(column=""points_scored"", min_value=0)","expect_column_values_to_be_between(column=""points_scored"", min_value=0)",1.0,1.0,1.0,100.00000000000004
"Check that the `transaction_amount` column contains values greater than zero and less than 1,000,000.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=1000000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=1, max_value=999999),expect_column_values_to_not_be_null(column=""transaction_amount"")",0.65,0.5789473684210527,0.65,48.84040990992919
"Ensure the 'genre' column contains only distinct values that match the list ['Action', 'Adventure', 'RPG', 'Strategy', 'Simulation'].","expect_column_distinct_values_to_equal_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG', 'Strategy', 'Simulation'])","expect_column_distinct_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG', 'Strategy', 'Simulation'])",0.9090909090909091,0.8387096774193549,0.9090909090909091,87.49766281017179
Verify that the `transaction_date` column contains no null values and that all dates are in the past.,"expect_column_values_to_not_be_null(column=""transaction_date""),expect_column_values_to_be_less_than(column=""transaction_date"", value=datetime.datetime.now())","expect_column_values_to_not_be_null(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""1900-01-01"", max_value=""present_date"")",0.7307692307692307,0.6399999999999999,0.7307692307692307,63.124878330691885
Verify that the file containing transaction records exists and matches the specified hash value for integrity checks.,"expect_file_to_exist(),expect_file_hash_to_equal(expected_hash_value)","expect_file_to_exist(file_path=""transaction_records""),expect_file_hash_to_equal(file_path=""transaction_records"", hash_value=specified_hash_value)",0.6470588235294118,0.5,0.6470588235294118,42.582957054872
For field 'square_footage': Ensure the field exists. Validate that all values are numeric and that they are greater than 100.,"expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_of_type(column=""square_footage"", type_=""float""),  # Assuming numeric includes float,expect_column_values_to_be_greater_than(column=""square_footage"", value=100)","expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_of_type(column=""square_footage"", type_=""float""),expect_column_values_to_be_between(column=""square_footage"", min_value=100)",0.8787878787878788,0.8125,0.8787878787878788,83.54742227106192
Ensure that the `created_at` column contains datetime strings matching the format 'YYYY-MM-DD HH:MM:SS' and are not in the future.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""created_at""),expect_column_values_to_be_in_set(column=""created_at"", value_set=[datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")])  # This will require further specification for ""not in the future""  ]","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_decreasing(column=""created_at"")",0.6046511627906976,0.5714285714285715,0.6046511627906976,31.640501622084685
Ensure the `followers_count` column has a mean value greater than 100.,"expect_column_mean_to_be_between(column=""followers_count"", min_value=100)","expect_column_mean_to_be_greater_than(column=""followers_count"", value=100)",0.8333333333333334,0.6363636363636364,0.8333333333333334,75.11755437222459
In the `transaction_date` column: Ensure all datetime values are formatted as 'YYYY-MM-DD' and contain no missing values.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""transaction_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
"Check that the `service_feedback` column values are valid JSON objects, conforming to the required schema for feedback collection.","expect_column_values_to_be_json_parseable(column=""service_feedback""),expect_column_values_to_match_json_schema(column=""service_feedback"", schema=""required_schema_here"")","expect_column_values_to_be_json_parseable(column=""service_feedback""),expect_column_values_to_match_json_schema(column=""service_feedback"", schema={""type"": ""object""})  # The type ""object"" ensures that all values in the column are valid JSON objects.",0.6885245901639344,0.6779661016949152,0.6885245901639344,62.85808872637109
"For field `category`: Ensure it matches the type 'text' and values must exist in the predefined set `['Technology', 'Health', 'Lifestyle']`.","expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=['Technology', 'Health', 'Lifestyle'])","expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=['Technology', 'Health', 'Lifestyle'])",1.0,1.0,1.0,100.00000000000004
For the `team_id` column: Ensure values are unique and exist in the `teams` table.,"expect_column_values_to_be_unique(column=""team_id""),expect_column_values_to_be_in_set(column=""team_id"", value_set=teams_table_values)  # Note: teams_table_values should be defined based on the actual values in the 'teams' table.","expect_column_values_to_be_unique(column=""team_id""),expect_column_values_to_be_in_set(column=""team_id"", value_set=teams_table_ids)",0.71875,0.7096774193548387,0.71875,64.98586024760223
"For field 'supplier_rating': Ensure that ratings are within the range of [1, 5] and validate that the average supplier rating is at least 3.","expect_column_values_to_be_between(column=""supplier_rating"", min_value=1, max_value=5),expect_column_mean_to_be_between(column=""supplier_rating"", min_value=3, max_value=5)","expect_column_values_to_be_between(column=""supplier_rating"", min_value=1, max_value=5),expect_column_mean_to_be_between(column=""supplier_rating"", min_value=3)",0.9473684210526316,0.9454545454545454,0.9473684210526316,89.13907712828069
"For field 'meeting_notes_file': Ensure the field matches the type 'file'. Validate that (meeting_notes_file) exists and is in a valid format (DOCX, PDF). Ensure this field exists.","expect_column_to_exist(column=""meeting_notes_file""),expect_column_values_to_be_of_type(column=""meeting_notes_file"", type_=""file""),expect_column_values_to_match_regex(column=""meeting_notes_file"", regex=r"".*\.(docx|pdf)$"")","expect_column_to_exist(column=""meeting_notes_file""),expect_column_values_to_be_of_type(column=""meeting_notes_file"", type_=""file""),expect_file_to_exist(file_path=""meeting_notes_file"")  # file_path is assumed to be the path for the file with this name.  # Replace with actual path if needed. CLIIIK",0.6046511627906976,0.5476190476190477,0.6046511627906976,63.87729201805882
Verify that the `transaction_id` column has unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",0.8444444444444443,0.8372093023255813,0.8444444444444443,70.92737232948345
Ensure the `coverage_start_date` column contains valid dates and that all entries precede the corresponding `coverage_end_date` entries.,"expect_column_values_to_be_dateutil_parseable(column=""coverage_start_date""),expect_column_pair_values_A_to_be_less_than_B(column_A=""coverage_start_date"", column_B=""coverage_end_date"")","expect_column_to_exist(column=""coverage_start_date""),expect_column_values_to_be_dateutil_parseable(column=""coverage_start_date""),expect_select_column_values_to_be_greater_than(column=""coverage_start_date"", other_column=""coverage_end_date"")",0.746268656716418,0.523076923076923,0.746268656716418,61.513189158143796
For field 'transaction_time': Ensure values follow the format 'HH:MM:SS'. Ensure no missing values.,"expect_column_values_to_match_strftime_format(column=""transaction_time"", strftime_format=""%H:%M:%S""),expect_column_values_to_not_be_null(column=""transaction_time"")","expect_column_values_to_match_strftime_format(column=""transaction_time"", strftime_format=""%H:%M:%S""),expect_column_values_to_not_be_null(column=""transaction_time"")",1.0,1.0,1.0,100.00000000000004
For field 'course_code': Ensure this field is alphanumeric and matches a valid course pattern.,"expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Za-z0-9]+$"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^\w{3,20}$"")",0.7586206896551724,0.7407407407407408,0.7586206896551724,76.73511881889584
"Check that the `category` column matches the specified set of values: `['Electronics', 'Apparel', 'Home Goods']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home Goods'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home Goods'])",1.0,1.0,1.0,100.00000000000004
"Ensure that the `property_status` column contains values only from the set `['Available', 'Under Contract', 'Sold']`.","expect_column_values_to_be_in_set(column=""property_status"", value_set=['Available', 'Under Contract', 'Sold'])","expect_column_values_to_be_in_set(column=""property_status"", value_set=['Available', 'Under Contract', 'Sold'])",1.0,1.0,1.0,100.00000000000004
For field 'post_id': Ensure the field contains only unique values. Ensure this field is not null and matches the type 'integer'.,"expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_not_be_null(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_not_be_null(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""int"")",0.967741935483871,0.9666666666666667,0.967741935483871,96.82792533867517
"For the `price` field: Validate that all values are numeric and fall within the range of 0 to 10,000.","expect_column_values_to_be_of_type(column=""price"", type_=""numeric""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000),expect_column_values_to_be_of_type(column=""price"", type_=""float"")",0.96,0.9166666666666666,0.56,94.5887163699136
Validate that the `cost` column values are sorted in ascending order.,"expect_column_values_to_be_increasing(column=""cost"")","expect_column_values_to_be_increasing(column=""cost"")",1.0,1.0,1.0,100.00000000000004
"Check that the `plan_cost` column contains values adhering to the pattern '^[0-9]+(\.[0-9]{1,2})?$'.","expect_column_values_to_match_regex(column=""plan_cost"", regex=r'^[0-9]+(\.[0-9]{1,2})?$')","expect_column_values_to_match_regex(column=""plan_cost"", regex=r""^[0-9]+(\.[0-9]{1,2})?$"")",1.0,1.0,1.0,88.30707423966243
For field 'mac_address': Ensure the field matches the type 'text'. Validate that all entries in (mac_address) conform to the MAC address format regex. Ensure this field cannot be null.,"expect_column_values_to_be_of_type(column=""mac_address"", type_=""text""),expect_column_values_to_match_regex(column=""mac_address"", regex=r""^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$""),expect_column_values_to_not_be_null(column=""mac_address"")","expect_column_to_exist(column=""mac_address""),expect_column_values_to_be_of_type(column=""mac_address"", type_=""text""),expect_column_values_to_match_regex(column=""mac_address"", regex=r""^[0-9a-fA-F]{1,2}:[0-9a-fA-F]{1,2}:[0-9a-fA-F]{1,2}:[0-9a-fA-F]{1,2}:[0-9a-fA-F]{1,2}:[0-9a-fA-F]{1,2}$""),expect_column_values_to_not_be_null(column=""mac_address"")",0.7166666666666667,0.6610169491525424,0.7166666666666667,56.49085084915381
"For the `balance` column, ensure all values are numerical and greater than or equal to 0.","expect_column_values_to_be_of_type(column=""balance"", type_=""float""),expect_column_values_to_be_between(column=""balance"", min_value=0)","expect_column_values_to_be_of_type(column=""balance"", type_=""float""),expect_column_values_to_be_between(column=""balance"", min_value=0.0, max_value=None)",0.9166666666666666,0.9130434782608696,0.9166666666666666,86.26069370954563
For field `check_out_date`: Ensure the field matches the type 'date'. Ensure values in `check_out_date` must be greater than `check_in_date`.,"expect_column_values_to_be_of_type(column=""check_out_date"", type_=""date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")","expect_column_values_to_be_of_type(column=""check_out_date"", type_=""date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `user_id` in the Research dataset is unique and does not allow null entries to maintain data integrity.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
"In the `device_status` column: Verify that the values are from the set ['Active', 'Inactive', 'Maintenance']. Ensure there are no null entries.","expect_column_values_to_be_in_set(column=""device_status"", value_set=['Active', 'Inactive', 'Maintenance']),expect_column_values_to_not_be_null(column=""device_status"")","expect_column_values_to_be_in_set(column=""device_status"", value_set=[""Active"", ""Inactive"", ""Maintenance""]),expect_column_values_to_not_be_null(column=""device_status"")",1.0,1.0,1.0,80.3595280013572
"For field 'subscription_status': Ensure the field contains no missing values. Ensure values are one of ['active', 'inactive', 'canceled'].","expect_column_values_to_not_be_null(column=""subscription_status""),expect_column_values_to_be_in_set(column=""subscription_status"", value_set=['active', 'inactive', 'canceled'])","expect_column_values_to_not_be_null(column=""subscription_status""),expect_column_values_to_be_in_set(column=""subscription_status"", value_set=['active', 'inactive', 'canceled'])",1.0,1.0,1.0,100.00000000000004
"For the 'status' field: Ensure the field exists and matches the type 'text'. Validate that values must be one of the predefined statuses: 'Pending', 'Shipped', 'Delivered', or 'Cancelled'.","expect_column_to_exist(column=""status""),expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Pending"", ""Shipped"", ""Delivered"", ""Cancelled""])","expect_column_to_exist(column=""status""),expect_column_values_to_be_of_type(column=""status"", type_=""text""),expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,81.10571112619581
Ensure that the `file_size` of each document in the `uploads` folder is within the range of `1KB` to `10MB`.,"expect_file_size_to_be_between(file_size_range=(1024, 10485760))","expect_file_size_to_be_between(file_path=""uploads"", min_value=1000, max_value=10000000)",0.5384615384615385,0.5,0.5384615384615385,43.4950381356163
Evaluate that the `monthly_bill` column has a median value between $50 and $150.,"expect_column_median_to_be_between(column=""monthly_bill"", min_value=50, max_value=150)","expect_column_median_to_be_between(column=""monthly_bill"", lower_bound=50, upper_bound=150)",0.7333333333333333,0.5714285714285714,0.7333333333333333,70.97141513081817
Ensure the `minutes_played` column values are in increasing order for each player's game entries.,"expect_column_values_to_be_increasing(column=""minutes_played"")","expect_column_values_to_be_increasing(column=""minutes_played"")",1.0,1.0,1.0,100.00000000000004
Verify that `block_number` is an integer greater than `previous_block_number`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""block_number"", column_B=""previous_block_number""),expect_column_values_to_be_of_type(column=""block_number"", type_=""int"")","expect_column_values_to_be_between(column=""block_number"", min_value=previous_block_number + 1)",0.5217391304347827,0.36363636363636365,0.47826086956521735,18.59348818678873
For field 'course_code': Ensure the expect column values to be unique; Ensure this field is alphanumeric and matches a valid course pattern.,"expect_column_values_to_be_unique(column=""course_code""),expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Za-z0-9]+$"")","expect_column_values_to_be_unique(column=""course_code""),expect_column_values_to_match_regex(column=""course_code"", regex=r""^[\w.]+$"")",0.888888888888889,0.8837209302325583,0.888888888888889,91.51329413834155
For the `total_price` column: Ensure the mean value is between 100 and 500. Validate that no values are negative.,"expect_column_mean_to_be_between(column=""total_price"", min_value=100, max_value=500),expect_column_values_to_be_between(column=""total_price"", min_value=0, max_value=None)","expect_column_mean_to_be_between(column=""total_price"", min_value=100, max_value=500),expect_column_values_to_be_between(column=""total_price"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
For the `release_date` field: Ensure all entries are of type 'date' and that the earliest release date is not before `2015-01-01`.,"expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_min_to_be_between(column=""release_date"", min_value=""2015-01-01"")","expect_column_values_to_be_of_type(column=""release_date"", type_=""date""),expect_column_values_to_be_between(column=""release_date"", min_value=""2015-01-01"")",0.9615384615384616,0.92,0.9615384615384616,95.81282631934458
"For field 'ballot_status': Ensure that the field contains only values from the set ['valid', 'invalid', 'pending']. Ensure this field cannot be null.","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['valid', 'invalid', 'pending']),expect_column_values_to_not_be_null(column=""ballot_status"")","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=[""valid"", ""invalid"", ""pending""]),expect_column_values_to_not_be_null(column=""ballot_status"")",1.0,1.0,1.0,80.3595280013572
Ensure the `departure_time` and `arrival_time` columns contain valid timestamps and that `arrival_time` is greater than `departure_time`.,"expect_column_values_to_be_dateutil_parseable(column=""departure_time""),expect_column_values_to_be_dateutil_parseable(column=""arrival_time""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""arrival_time"", column_B=""departure_time"")","expect_column_values_to_be_dateutil_parseable(column=""departure_time""),expect_column_values_to_be_dateutil_parseable(column=""arrival_time""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""arrival_time"", column_B=""departure_time"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `candidate_party` column includes only values from the set `['Democrat', 'Republican', 'Independent']`.","expect_column_values_to_be_in_set(column=""candidate_party"", value_set=['Democrat', 'Republican', 'Independent'])","expect_column_values_to_be_in_set(column=""candidate_party"", value_set=['Democrat', 'Republican', 'Independent'])",1.0,1.0,1.0,100.00000000000004
Verify that the `score` column values are within the range of 0 to 300 for all game entries.,"expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300)","expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300)",1.0,1.0,1.0,100.00000000000004
"For field 'booking_source': Ensure the field matches the type 'text'. Ensure values in (booking_source) must exist in the set (Website, Mobile App, Call Center).","expect_column_values_to_be_of_type(column=""booking_source"", type_=""text""),expect_column_values_to_be_in_set(column=""booking_source"", value_set=[""Website"", ""Mobile App"", ""Call Center""])","expect_column_values_to_be_of_type(column=""booking_source"", type_=""text""),expect_column_values_to_be_in_set(column=""booking_source"", value_set=[Website, Mobile App, Call Center])",1.0,1.0,1.0,82.56810715923706
"Ensure the `property_type` field contains only distinct values that match the set `['Apartment', 'House', 'Commercial']`.","expect_column_distinct_values_to_equal_set(column=""property_type"", value_set=['Apartment', 'House', 'Commercial'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Commercial'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
Ensure the `vehicle_id` column contains only unique values and does not include any null entries.,"expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_not_be_null(column=""vehicle_id"")","expect_column_values_to_be_unique(column=""vehicle_id""),expect_column_values_to_not_be_null(column=""vehicle_id"")",1.0,1.0,1.0,100.00000000000004
"For fields `block_number` and `transaction_fee`, ensure that `transaction_fee` is always less than or equal to a fixed percentage of the `block_number` value.","expect_column_pair_values_A_to_be_less_than_B(column_A=""transaction_fee"", column_B=""block_number"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""transaction_fee"", column_B=""block_number"")  # Make sure `transaction_fee` is always less than or equal to block number.",0.7346938775510204,0.6808510638297872,0.6938775510204082,64.00995670848634
For field 'voter_registration': Validate that all entries are valid JSON objects and include required fields like 'voter_id' and 'registration_date'.,"expect_column_values_to_be_json_parseable(column=""voter_registration""),expect_column_values_to_match_json_schema(column=""voter_registration"", schema={""type"": ""object"", ""properties"": {""voter_id"": {""type"": ""string""}, ""registration_date"": {""type"": ""string"", ""format"": ""date-time""}}, ""required"": [""voter_id"", ""registration_date""]})","expect_column_values_to_be_json_parseable(column=""voter_registration""),expect_column_values_to_match_json_schema(column=""voter_registration"", schema={""type"": ""object"", ""properties"": {""voter_id"": {""type"": ""string""}, ""registration_date"": {""type"": ""string""}}, ""required"": [""voter_id"", ""registration_date""]})",0.961038961038961,0.9333333333333333,0.961038961038961,92.52917334096253
For `humidity`: Ensure values are within the range of 0 to 100 and are arranged in increasing order.,"expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_increasing(column=""humidity"")","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100),expect_column_values_to_be_increasing(column=""humidity"")",1.0,1.0,1.0,100.00000000000004
Ensure the `user_agent` column contains strings that meet a minimum length of 10 characters and match at least one predefined pattern.,"expect_column_value_lengths_to_be_between(column=""user_agent"", min_value=10, max_value=None),expect_column_values_to_match_regex(column=""user_agent"", regex=""YOUR_REGEX_PATTERN_HERE"")","expect_column_value_lengths_to_be_between(column=""user_agent"", min_value=10),expect_column_values_to_match_regex_list(column=""user_agent"", regex_list=[r""^(\s+)User-Agent\s+$"", r""^Mozilla/5\.0\.1+$""])",0.7076923076923077,0.6349206349206349,0.7076923076923077,54.20913610485741
Confirm that the distribution of `final_exam_scores` passes the Chi-Square test with a p-value greater than `0.05`.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""final_exam_scores"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""final_exam_scores"", threshold=0.05)илася",1.0,1.0,1.0,97.01154303042087
"Ensure the `attack_type` field only includes values from the set `['Phishing', 'Malware', 'Ransomware']`.","expect_column_values_to_be_in_set(column=""attack_type"", value_set=['Phishing', 'Malware', 'Ransomware'])","expect_column_values_to_be_in_set(column=""attack_type"", value_set=['Phishing', 'Malware', 'Ransomware'])",1.0,1.0,1.0,100.00000000000004
For the 'inventory' table: Ensure the number of rows is at least 50. Ensure all values in 'product_id' are unique.,"expect_table_row_count_to_be_between(min_value=50),expect_column_values_to_be_unique(column=""product_id"")","expect_table_row_count_to_be_between(table=""inventory"", min_value=50),expect_column_values_to_be_unique(column=""product_id"")илакти",0.9500000000000001,0.8947368421052632,0.9500000000000001,81.6022620682652
For column 'timestamp': Ensure that all datetime entries adhere to the format 'YYYY-MM-DD HH:MM:SS'. Verify that this column exists.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"For the `phone_number` column: Validate that all entries follow the pattern `^\+?[1-9]\d{1,14}$`.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")",1.0,1.0,1.0,100.00000000000004
In the `gas_price` column: Check for values that are non-negative integers and verify that the average gas price does not exceed 200 Gwei.,"expect_column_values_to_be_between(column=""gas_price"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""gas_price"", min_value=None, max_value=200)","expect_column_values_to_be_between(column=""gas_price"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""gas_price"", min_value=None, max_value=200)",1.0,1.0,1.0,100.00000000000004
"Verify that the mean age in the `citizen_age` column is between 18 and 100 years, with a standard deviation below 15 years.","expect_column_mean_to_be_between(column=""citizen_age"", min_value=18, max_value=100),expect_column_stdev_to_be_between(column=""citizen_age"", min_value=0, max_value=15)","expect_column_mean_to_be_between(column=""citizen_age"", min_value=18, max_value=100),expect_column_stdev_to_be_between(column=""citizen_age"", min_value=0, max_value=15)",1.0,1.0,1.0,100.00000000000004
Verify that the combination of `product_id` and `warehouse_id` is unique across all records in the `inventory` table.,"expect_compound_columns_to_be_unique(column_a=""product_id"", column_b=""warehouse_id"")","expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")",1.0,1.0,1.0,82.93181259810136
Verify that the standard deviation of the `transaction_amount` column is below the defined limit of 1000.,"expect_column_stdev_to_be_between(column=""transaction_amount"", max_value=1000)","expect_column_stdev_to_be_between(column=""transaction_amount"", max_value=1000)",1.0,1.0,1.0,100.00000000000004
"For the `follower_count` column, validate that the maximum value does not exceed 1,000,000 and the minimum value is at least 0.","expect_column_max_to_be_between(column=""follower_count"", max_value=1000000),expect_column_min_to_be_between(column=""follower_count"", min_value=0)","expect_column_max_to_be_between(column=""follower_count"", max_value=1000000),expect_column_min_to_be_between(column=""follower_count"", min_value=0)",1.0,1.0,1.0,100.00000000000004
"Check that the `platforms` column contains distinct values from the set ['PC', 'Xbox', 'PlayStation', 'Nintendo'] and is not null.","expect_column_distinct_values_to_contain_set(column=""platforms"", value_set=['PC', 'Xbox', 'PlayStation', 'Nintendo']),expect_column_values_to_not_be_null(column=""platforms"")","expect_column_distinct_values_to_be_in_set(column=""platforms"", value_set=['PC', 'Xbox', 'PlayStation', 'Nintendo']),expect_column_values_to_not_be_null(column=""platforms"")",0.9387755102040817,0.8936170212765957,0.9387755102040817,91.82210682909735
Verify that the `order_amount` column has a mean value greater than or equal to `50`.,"expect_column_mean_to_be_between(column=""order_amount"", min_value=50)","expect_column_mean_to_be_between(column=""order_amount"", min_value=50)",1.0,1.0,1.0,100.00000000000004
For the `salary` column: Check that the distribution follows a normal distribution with a p-value greater than 0.05 from the KS test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""salary"", threshold=0.05)","expect_column_kst_test_p_value_to_be_greater_than(column=""salary"", threshold=0.05)",0.8749999999999999,0.7999999999999999,0.8749999999999999,79.60515801184586
For field `performance_score`: Verify that the distribution of performance scores passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""performance_score"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""performance_score"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
Ensure the `team_name` column does not contain any numeric values and matches the regex pattern `^[A-Za-z ]+$`.,"expect_column_values_to_not_match_regex(column=""team_name"", regex=r"".*\d.*""),expect_column_values_to_match_regex(column=""team_name"", regex=r""^[A-Za-z ]+$"")","expect_column_values_to_not_be_numberic(column=""team_name""),expect_column_values_to_match_regex(column=""team_name"", regex=r""^[A-Za-z ]+$"")",0.8627450980392156,0.7755102040816326,0.8627450980392156,72.72521716405268
Ensure that the `email` field matches a valid email format and does not contain any SQL-like patterns such as `'%` or `';`.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_not_match_regex(column=""email"", regex=r""['%;]"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")  # Regular expression to validate email format, refer to regex101 for more details.",0.4406779661016949,0.3157894736842105,0.4406779661016949,45.24296327545461
"Ensure the `response_time` column values are non-negative integers, with the average response time not exceeding 48 hours.","expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_values_to_be_between(column=""response_time"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""response_time"", min_value=0, max_value=48 * 60 * 60)  # 48 hours in seconds","expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_mean_to_be_between(column=""response_time"", min_value=0, max_value=48 * 60 * 60)  # Assuming the unit of response time is seconds.",0.7529411764705882,0.6987951807228916,0.7058823529411764,61.49265400749373
For field 'region_name': Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""region_name""),expect_column_values_to_be_of_type(column=""region_name"", type_=""text"")","expect_column_to_exist(column=""region_name""),expect_column_values_to_be_of_type(column=""region_name"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `timestamp` column contains only unique values, with no duplicates.","expect_column_values_to_be_unique(column=""timestamp"")","expect_column_values_to_be_unique(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
"Check that the `content_rating` column adheres to the specified set of values which includes `['G', 'PG', 'PG-13', 'R']`.","expect_column_values_to_be_in_set(column=""content_rating"", value_set=['G', 'PG', 'PG-13', 'R'])","expect_column_values_to_be_in_set(column=""content_rating"", value_set=['G', 'PG', 'PG-13', 'R'])",1.0,1.0,1.0,100.00000000000004
Ensure the `call_duration` column has values between 0 and 3600 seconds.,"expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)","expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)",1.0,1.0,1.0,100.00000000000004
"For table 'claims': Ensure the number of rows is greater than or equal to 1. Validate that the field 'claim_status' contains only values from the set {'Pending', 'Approved', 'Denied'}.","expect_table_row_count_to_be_between(min_value=1, max_value=None),expect_column_values_to_be_in_set(column=""claim_status"", value_set={""Pending"", ""Approved"", ""Denied""})","expect_table_row_count_to_be_between(table_name=""claims"", min_value=1),expect_column_values_to_be_in_set(column=""claim_status"", value_set={'Pending', 'Approved', 'Denied'})ılmaktadır",0.8620689655172413,0.7857142857142857,0.8620689655172413,69.88815683253176
"Ensure that the `threat_level` column contains only values from the set `['Low', 'Medium', 'High']`.","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High'])","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High'])",1.0,1.0,1.0,100.00000000000004
Verify that the number of rows in the `messages` table is equal to 1000.,"expect_table_row_count_to_equal(table_name=""messages"", value=1000)","expect_table_row_count_to_equal(table=""messages"", value=1000)",0.9523809523809523,0.8421052631578948,0.9523809523809523,84.16346004872253
For the combination of `lawyer_id` and `case_number`: Ensure that this pairing is unique across all records.,"expect_compound_columns_to_be_unique(column_a=""lawyer_id"", column_b=""case_number"")","expect_compound_columns_to_be_unique(column_a=""lawyer_id"", column_b=""case_number"")",1.0,1.0,1.0,100.00000000000004
Check that the `score` column in the `exams` table has a maximum value of 100 and a minimum value of 0.,"expect_column_max_to_be_between(column=""score"", max_value=100),expect_column_min_to_be_between(column=""score"", min_value=0)","expect_column_values_to_be_between(column=""score"", min_value=0, max_value=100)",0.7222222222222223,0.588235294117647,0.6111111111111112,45.23440274781762
Ensure the `patient_age` column has a mean value greater than 30 and less than 80.,"expect_column_mean_to_be_between(column=""patient_age"", min_value=30, max_value=80)","expect_column_mean_to_be_between(column=""patient_age"", min_value=30, max_value=80)",1.0,1.0,1.0,100.00000000000004
For field 'assigned_officer': Ensure the field matches the type 'text'. Ensure values in (assigned_officer) must exist in the list of officers (officer_list).,"expect_column_values_to_be_of_type(column=""assigned_officer"", type_=""text""),expect_column_values_to_be_in_set(column=""assigned_officer"", value_set=officer_list)","expect_column_values_to_be_of_type(column=""assigned_officer"", type_=""text""),expect_column_values_to_be_in_set(column=""assigned_officer"", value_set=officer_list)",1.0,1.0,1.0,100.00000000000004
Ensure that the `transaction_type` is unique per `transaction_id` and does not repeat within the same account.,"expect_select_column_values_to_be_unique_within_record(column=""transaction_type""),expect_column_pair_values_to_be_unique(column_A=""transaction_type"", column_B=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_type""),expect_column_values_to_not_be_repeated_within_record(column=""transaction_type"", record_key=""transaction_id"")",0.8076923076923077,0.5599999999999999,0.7307692307692308,72.07696982034895
Confirm that the `timestamp` column entries are in ISO 8601 format and exist for all records.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_not_be_null(column=""timestamp"")",0.7857142857142857,0.7777777777777777,0.7857142857142857,69.16642990954357
Confirm that the `hire_date` column values are greater than or equal to `1980-01-01` and less than the current date.,"expect_column_values_to_be_between(column=""hire_date"", min_value=""1980-01-01"", max_value=""current_date"")","expect_column_values_to_be_between(column=""hire_date"", min_value=""1980-01-01"", max_value=""current_date"")",1.0,1.0,1.0,100.00000000000004
"For fields `unit_price` and `quantity`, ensure that the total value calculated as `unit_price * quantity` matches the `total_price` column.","expect_column_pair_values_A_to_be_equal_B(column_A=""unit_price"", column_B=""total_price""),expect_column_pair_values_A_to_be_equal_B(column_A=""quantity"", column_B=""total_price"")","expect_column_pair_values_to_be_equal(column_a=""unit_price"", column_b=""quantity"", column_c=""total_price"")",0.6666666666666666,0.48979591836734687,0.6666666666666666,33.8462255352623
Ensure the `gas_price` column values follow a normal distribution with a mean between 20 and 100 Gwei.,"expect_column_mean_to_be_between(column=""gas_price"", min_value=20, max_value=100)","expect_column_mean_to_be_between(column=""gas_price"", min_value=20, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure the `enrollment_status` column contains only values from the set `['Active', 'Inactive', 'Completed']`.","expect_column_values_to_be_in_set(column=""enrollment_status"", value_set=['Active', 'Inactive', 'Completed'])","expect_column_values_to_be_in_set(column=""enrollment_status"", value_set=['Active', 'Inactive', 'Completed'])",1.0,1.0,1.0,100.00000000000004
For field 'publication_year': Ensure values are between 2000 and the current year. Ensure this field is not null.,"expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=2023),  ,expect_column_values_to_not_be_null(column=""publication_year"")","expect_column_to_exist(column=""publication_year""),expect_column_values_to_be_between(column=""publication_year"", min_value=2000, max_value=datetime.date.today()),expect_column_values_to_not_be_null(column=""publication_year"")",0.8135593220338982,0.7719298245614035,0.8135593220338982,66.22926675903726
For the `date_of_birth` column: Validate that all dates are in the format `YYYY-MM-DD` and are before the current date.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_less_than(column=""date_of_birth"", value=""today"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today"")",0.8941176470588236,0.8433734939759037,0.8941176470588236,82.77824770138314
"Ensure the `category` field only contains values from the set ['Electronics', 'Clothing', 'Home', 'Beauty']. Validate that this field is not null.","expect_column_values_to_be_in_set(column=""category"", set_=['Electronics', 'Clothing', 'Home', 'Beauty']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home', 'Beauty']),expect_column_values_to_not_be_null(column=""category"")",0.9787234042553191,0.9333333333333332,0.9787234042553191,92.38081570518212
Verify that the `data_file.json` is properly formatted as JSON and contains no more than `1000` lines.,"expect_file_to_be_valid_json(file_path=""data_file.json""),expect_file_line_regex_match_count_to_be_between(file_path=""data_file.json"", min_value=0, max_value=1000)","expect_file_to_exist(file_path=""data_file.json""),expect_file_size_to_be_between(file_path=""data_file.json"", min_value=0, max_value=1000),expect_file_lines_to_be_between(file_path=""data_file.json"", min_value=0, max_value=1000) CLIIIK",0.72,0.6301369863013698,0.6933333333333334,57.22932940334969
For field 'insurance_details': Ensure the field contains valid JSON objects that conform to the specified JSON schema.,"expect_column_values_to_match_json_schema(column=""insurance_details"", schema=json_schema)","expect_column_values_to_match_json_schema(column=""insurance_details"")",0.8695652173913044,0.8571428571428571,0.8695652173913044,73.25197744024094
For field 'medical_record': Ensure this field is required (not null). Validate that the values are valid JSON objects adhering to the specified schema.,"expect_column_values_to_not_be_null(column=""medical_record""),expect_column_values_to_be_json_parseable(column=""medical_record""),expect_column_values_to_match_json_schema(column=""medical_record"", schema=""specify_your_schema_here"")","expect_column_values_to_not_be_null(column=""medical_record""),expect_column_values_to_match_json_schema(column=""medical_record"")",0.7272727272727273,0.7169811320754718,0.7272727272727273,45.94258240359268
Verify that the `customer_id` in the `orders` table exists in the `customers` table and matches the expected format.,"expect_column_pair_values_to_be_in_set(column_A=""orders.customer_id"", column_B=""customers.customer_id""),expect_column_values_to_match_regex(column=""orders.customer_id"", regex=r""^[A-Za-z0-9]+$"")","expect_column_to_exist(column=""orders.customer_id""),expect_column_to_exist(column=""customers.customer_id""),expect_columns_to_be_in_same_ordered_list(column=""orders.customer_id"", column=""customers.customer_id"")",0.6060606060606061,0.40625,0.5454545454545455,54.204984129720145
"Ensure that the `vulnerability_id` field matches the regular expression pattern '^[A-Z]{3}-[0-9]{1,4}$' for standard vulnerability identifiers.","expect_column_values_to_match_regex(column=""vulnerability_id"", regex=r""^[A-Z]{3}-[0-9]{1,4}$"")","expect_column_values_to_match_regex(column=""vulnerability_id"", regex=r""^[A-Z]{3}-[0-9]{1,4}$"")",1.0,1.0,1.0,100.00000000000004
