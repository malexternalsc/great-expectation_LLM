user_prompt,reference,hypothesis,rouge1_fmeasure,rouge2_fmeasure,rougeL_fmeasure,granular_bleu_score
"Check that the `threat_level` column has values that are either 'Low', 'Medium', or 'High', ensuring uniqueness.","expect_column_values_to_be_in_set(column=""threat_level"", value_set=[""Low"", ""Medium"", ""High""]),expect_column_values_to_be_unique(column=""threat_level"")","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High']),expect_column_values_to_be_unique(column=""threat_level"")",1.0,1.0,1.0,79.47440347019332
For field 'appointment_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure this field does not accept future dates.,"expect_column_values_to_not_be_null(column=""appointment_date""),expect_column_values_to_be_of_type(column=""appointment_date"", type_=""date""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_not_be_null(column=""appointment_date""),expect_column_values_to_be_of_type(column=""appointment_date"", type_=""date""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.9411764705882353,0.9156626506024097,0.9411764705882353,90.16695654343552
"For field 'group_id': Ensure the field can be null. Ensure the field matches the type 'numeric'. Validate that all group IDs, if present, are unique and range from 1 to 10,000.","expect_column_values_to_be_null(column=""group_id""),expect_column_values_to_be_of_type(column=""group_id"", type_=""numeric""),expect_column_values_to_be_between(column=""group_id"", min_value=1, max_value=10000),expect_column_values_to_be_unique(column=""group_id"")","expect_column_values_to_be_null(column=""group_id""),expect_column_values_to_be_of_type(column=""group_id"", type_=""numeric""),expect_column_values_to_be_unique(column=""group_id""),expect_column_values_to_be_between(column=""group_id"", min_value=1, max_value=10000)  # Replace 10000 with your desired max value.",0.9278350515463918,0.9052631578947369,0.7628865979381444,91.24388123877263
"Ensure that the table has at least 30 rows, representing daily weather forecasts for a month. Each row must have a corresponding `location`.","expect_table_row_count_to_be_between(min_value=30, max_value=None),expect_column_to_exist(column=""location""),expect_column_values_to_not_be_null(column=""location"")","expect_table_row_count_to_be_between(min_value=30),expect_column_values_to_be_unique(column=""location"")  # Assuming the table has a column named ""location"" with unique values.",0.7017543859649122,0.4727272727272727,0.5964912280701754,55.92300225716974
Ensure the distribution of `attendance` percentages passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""attendance"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""attendance"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"For the `product_sku` column, ensure all values match the regex pattern `^[A-Z]{2}-[0-9]{5}$` and that each SKU is unique.","expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[A-Z]{2}-[0-9]{5}$""),expect_column_values_to_be_unique(column=""product_sku"")","expect_column_values_to_match_regex(column=""product_sku"", regex=r""^[A-Z]{2}-[0-9]{5}$""),expect_column_values_to_be_unique(column=""product_sku"")  # Note: This expectation may not be necessary depending on your specific requirements.",0.8125000000000001,0.8064516129032258,0.8125000000000001,80.64064803235935
Ensure the `length_of_stay` column contains integer values that are greater than or equal to 1.,"expect_column_values_to_be_of_type(column=""length_of_stay"", type_=""int""),expect_column_values_to_be_between(column=""length_of_stay"", min_value=1)","expect_column_values_to_be_between(column=""length_of_stay"", min_value=1)",0.6666666666666666,0.6486486486486487,0.6666666666666666,31.890655732397057
Ensure the `engagement_rate` column values are between 0 and 1 and calculated as the ratio of interactions to impressions.,"expect_column_values_to_be_between(column=""engagement_rate"", min_value=0, max_value=1),expect_multicolumn_sum_to_equal(column_A=""interactions"", column_B=""impressions"", sum_value=1)","expect_column_values_to_be_between(column=""engagement_rate"", min_value=0, max_value=1),expect_column_values_to_be_of_type(column=""engagement_rate"", type_=""float"")  # Note: This expectation assumes that the column values are of type float. If this assumption is incorrect, modify the expectation accordingly.",0.5194805194805195,0.4,0.5194805194805195,45.54826120676378
"For the `match_date` column, check that all dates are formatted as 'MM-DD-YYYY' and can be parsed correctly.","expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%m-%d-%Y""),expect_column_values_to_be_dateutil_parseable(column=""match_date"")","expect_column_values_to_match_strftime_format(column=""match_date"", strftime_format=""%m-%d-%Y""),expect_column_values_to_be_dateutil_parseable(column=""match_date"")  # This assumes that you're using the dateutil library. If not, you'll need to replace this with the appropriate expectation.",0.704225352112676,0.6956521739130436,0.704225352112676,71.0622929198242
"Check that the mean of the `claims_per_policy` column is less than or equal to 3, indicating a reasonable claims ratio.","expect_column_mean_to_be_between(column=""claims_per_policy"", min_value=None, max_value=3)","expect_column_mean_to_be_between(column=""claims_per_policy"", min_value=0, max_value=3)",0.9375,0.8666666666666667,0.9375,92.10500207490826
"For the `property_type` field: Ensure the values belong to the set `['Residential', 'Commercial', 'Industrial']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])",1.0,1.0,1.0,100.00000000000004
"For the `report_date`, ensure the values are not in the future and are formatted as 'MM-DD-YYYY'.","expect_column_values_to_be_dateutil_parseable(column=""report_date""),expect_column_values_to_match_strftime_format(column=""report_date"", strftime_format=""%m-%d-%Y""),expect_column_values_to_be_in_set(column=""report_date"", value_set=[date for date in pd.date_range(start='1900-01-01', end=pd.Timestamp.now())])","expect_column_values_to_be_between(column=""report_date"", min_value=""1900-01-01"", max_value=""today""),expect_column_values_to_match_strftime_format(column=""report_date"", strftime_format=""%m-%d-%Y"")",0.6666666666666667,0.5365853658536586,0.5476190476190477,44.06716968612383
"For field 'data_collection_method': Ensure the field is required (not null). Ensure values in 'data_collection_method' must exist in the set ('survey', 'experiment', 'observation').","expect_column_values_to_not_be_null(column=""data_collection_method""),expect_column_values_to_be_in_set(column=""data_collection_method"", value_set=[""survey"", ""experiment"", ""observation""])","expect_column_values_to_not_be_null(column=""data_collection_method""),expect_column_values_to_be_in_set(column=""data_collection_method"", value_set=['survey', 'experiment', 'observation'])",1.0,1.0,1.0,81.78827632627952
For field 'last_active': Ensure the field matches the type 'datetime'. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""last_active"", type_=""datetime""),expect_column_values_to_not_be_null(column=""last_active"")","expect_column_values_to_be_of_type(column=""last_active"", type_=""datetime""),expect_column_values_to_not_be_null(column=""last_active"")",1.0,1.0,1.0,100.00000000000004
For file 'sales_data.csv': Ensure the file exists. Ensure the file size is within the range of 1KB to 10MB. Ensure the first line contains valid CSV headers.,"expect_file_to_exist(file_path=""sales_data.csv""),expect_file_size_to_be_between(file_path=""sales_data.csv"", min_size=1024, max_size=10485760),expect_file_to_have_valid_table_header(file_path=""sales_data.csv"")","expect_file_to_exist(file_path=""sales_data.csv""),expect_file_size_to_be_between(min_value=1_000, max_value=10_000_000),expect_file_to_have_valid_csv_headers(file_path=""sales_data.csv"")  # Note: This is a placeholder expectation. Actual expectations may vary based on the specific requirements.",0.651685393258427,0.5287356321839081,0.6292134831460675,59.67272755168037
For field 'forecast_id': Ensure the field matches the type 'text'. Verify that all values are unique and not null.,"expect_column_values_to_be_of_type(column=""forecast_id"", type_=""text""),expect_column_values_to_not_be_null(column=""forecast_id""),expect_column_values_to_be_unique(column=""forecast_id"")","expect_column_values_to_be_of_type(column=""forecast_id"", type_=""text""),expect_column_values_to_be_unique(column=""forecast_id""),expect_column_values_to_not_be_null(column=""forecast_id"")",1.0,1.0,0.9032258064516129,100.00000000000004
For field 'result_json': Ensure all entries in 'result_json' are valid JSON objects and conform to the specified JSON schema for results.,"expect_column_values_to_be_json_parseable(column=""result_json""),expect_column_values_to_match_json_schema(column=""result_json"", schema=""specified_json_schema"")","expect_column_values_to_be_json_parseable(column=""result_json""),expect_column_values_to_match_json_schema(column=""result_json"", schema={""type"": ""object"", ""properties"": {""result"": {""type"": ""object"", ""properties"": {""type"": {""type"": ""string""}, ""value"": {""type"": ""string""}, ""message"": ""Expected type to be string""}, ""value"": {""type"": ""string""}, ""message"": ""Expected value to be string""}}}})",0.5753424657534246,0.5633802816901409,0.5753424657534246,31.108861125242846
For field 'warehouse_location': Ensure the field matches the type 'text'. Validate that (warehouse_location) does not contain any SQL-like patterns from a predefined disallowed list.,"expect_column_values_to_be_of_type(column=""warehouse_location"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""warehouse_location"", regex_list=[""SELECT"", ""INSERT"", ""UPDATE"", ""DELETE"", ""--"", "";""])","expect_column_values_to_be_of_type(column=""warehouse_location"", type_=""text""),expect_column_values_to_not_match_regex_list(column=""warehouse_location"", regex_list
"For field 'job_title': Ensure values in (job_title) must exist in the list ['Manager', 'Developer', 'Designer']. Ensure this field exists.","expect_column_to_exist(column=""job_title""),expect_column_values_to_be_in_set(column=""job_title"", value_set=['Manager', 'Developer', 'Designer'])","expect_column_to_exist(column=""job_title""),expect_column_values_to_be_in_set(column=""job_title"", value_set=['Manager', 'Developer', 'Designer'])",1.0,1.0,1.0,100.00000000000004
For the `last_updated` column: Confirm that all entries are in the correct datetime format and represent timestamps in the last 30 days.,"expect_column_values_to_match_strftime_format(column=""last_updated"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""last_updated"")","expect_column_values_to_match_strftime_format(column=""last_updated"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_between(column=""last_updated"", min_value=""2023-10-01T00:00:00Z"", max_value=""2023-11-01T00:00:00Z"")  # Replace with actual date range based on today's date.",0.625,0.5384615384615384,0.625,51.15680868889456
For field 'description': Ensure the field matches the type 'text'. Validate that the length does not exceed 1000 characters and does not contain any SQL-like patterns. Ensure this field exists.,"expect_column_to_exist(column=""description""),expect_column_values_to_be_of_type(column=""description"", type_=""text""),expect_column_value_lengths_to_be_between(column=""description"", min_value=0, max_value=1000),expect_column_values_to_not_match_regex(column=""description"", regex=r"".*(SELECT|INSERT|UPDATE|DELETE|DROP|WHERE|;).*"")","expect_column_to_exist(column=""description""),expect_column_values_to_be_of_type(column=""description"", type_=""text""),expect_column_value_lengths_to_be_between(column=""description"", min_value=0, max_value=1000),expect_column_values_to_not_match_regex(column=""description"", regex=r""^(?:SELECT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER|TRUNCATE|SET|FROM|WHERE|ORDER|BY|LIMIT|OFFSET|UNION|INTERSECT|EXCEPT|MATCH|JOIN|LEFT|RIGHT|FULL|INNER|OUTER|ANY|ALL|NULL|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|NOW|DATE|TIME|TIMESTAMP|YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|DATE|TIME|TIMESTAMP|YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|DATE|TIME|TIMESTAMP|YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|DATE|TIME|TIMESTAMP|YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|DATE|TIME|TIMESTAMP|YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|DATE",0.547486033519553,0.519774011299435,0.547486033519553,39.081953572011926
For the `measurement_value` field: Validate that values are within the range of -100 to 100 and are of type 'float'.,"expect_column_values_to_be_between(column=""measurement_value"", min_value=-100, max_value=100),expect_column_values_to_be_of_type(column=""measurement_value"", type_=""float"")","expect_column_values_to_be_between(column=""measurement_value"", min_value=-100, max_value=100),expect_column_values_to_be_of_type(column=""measurement_value"", type_=""float"")",1.0,1.0,1.0,100.00000000000004
Verify that the `sku` column values conform to the regular expression pattern `^[A-Z0-9]{8}$` to ensure proper SKU formatting.,"expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8}$"")","expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8}$"")",1.0,1.0,1.0,100.00000000000004
Check that the `special_requests` column contains valid JSON objects and conforms to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""special_requests""),expect_column_values_to_match_json_schema(column=""special_requests"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""special_requests""),expect_column_values_to_match_json_schema(column=""special_requests"", schema={""type"": ""object"", ""properties"": {""request_type"": {""type"": ""string""}, ""request_details"": {""type"": ""object"", ""properties"": {""request_id"": {""type"": ""string""}, ""request_date"": {""type"": ""string""}, ""request_status"": {""type"": ""string""}}}}}})",0.676470588235294,0.6666666666666666,0.676470588235294,36.67510615552731
Check that the `grade` column values are between 0 and 100 and that no null values are present.,"expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""grade"")","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""grade"")",1.0,1.0,1.0,100.00000000000004
"For table 'inventory': Ensure the columns match the specified order ('product_id', 'product_name', 'stock_quantity', 'price').","expect_table_columns_to_match_ordered_list(column_list=[""product_id"", ""product_name"", ""stock_quantity"", ""price""])","expect_column_values_to_match_column_order(column_list=['product_id', 'product_name','stock_quantity', 'price'])",0.875,0.6,0.875,23.603916639280413
"For the `sensor_status` field, validate that values must be either 'active' or 'inactive'. Ensure this field exists.","expect_column_to_exist(column=""sensor_status""),expect_column_values_to_be_in_set(column=""sensor_status"", value_set=[""active"", ""inactive""])","expect_column_to_exist(column=""sensor_status""),expect_column_values_to_be_in_set(column=""sensor_status"", value_set=[""active"", ""inactive""])",1.0,1.0,1.0,100.00000000000004
Verify that the `listing_date` values are formatted as 'YYYY-MM-DD' and are not in the future.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""listing_date"")  # This ensures they are valid dates,# Additional check for future dates would require a custom implementation as it is not covered by the listed expectations.","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""listing_date"")  # This assumes that the listing dates are in ascending order.",0.6666666666666666,0.5609756097560976,0.6190476190476191,62.41333697307447
For field `user_id`: Ensure the field matches the type 'string'. Ensure all values in `user_id` are unique and not null.,"expect_column_values_to_be_of_type(column=""user_id"", type_=""string""),expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_be_of_type(column=""user_id"", type_=""string""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,0.9032258064516129,100.00000000000004
Ensure that the `view_count` column contains non-negative integers and is sorted in descending order.,"expect_column_values_to_be_between(column=""view_count"", min_value=0),expect_column_values_to_be_decreasing(column=""view_count"")","expect_column_values_to_be_between(column=""view_count"", min_value=0),expect_column_values_to_be_decreasing(column=""view_count"")",1.0,1.0,1.0,100.00000000000004
"For the `application_date` and `approval_date`, confirm that `approval_date` must be later than `application_date`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""approval_date"", column_B=""application_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""approval_date"", column_B=""application_date"")",1.0,1.0,1.0,100.00000000000004
Check the `transaction_date` column: Ensure all entries are in 'YYYY-MM-DD' format and that there are no missing values.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""transaction_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
In the `filing_date` column: Ensure all datetime entries match the format `%Y-%m-%d` and are not in the future.,"expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")  # To ensure valid datetime entries,# Additionally, you would need a custom expectation to check for future dates since it's not in the accepted expectations.","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_between(column=""filing_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.5918367346938774,0.5,0.5918367346938774,55.36474549394062
Verify that the `court_date` is greater than the `filing_date` for all records and both columns are of type 'datetime'.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""court_date"", column_B=""filing_date""),expect_column_values_to_be_of_type(column=""court_date"", type_=""datetime""),expect_column_values_to_be_of_type(column=""filing_date"", type_=""datetime"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""court_date"", column_B=""filing_date""),expect_column_values_to_be_of_type(column=""court_date"", type_=""datetime""),expect_column_values_to_be_of_type(column=""filing_date"", type_=""datetime"")  # Note: This is just a suggestion; you may need to adjust the column names based on your specific use case.",0.8076923076923077,0.8039215686274509,0.8076923076923077,80.40633217550045
Ensure the `amount` column values are within the range of 0.0001 to 10000 and are positive.,"expect_column_values_to_be_between(column=""amount"", min_value=0.0001, max_value=10000)","expect_column_values_to_be_between(column=""amount"", min_value=0.0001, max_value=10000),expect_column_values_to_be_between(column=""amount"", min_value=0, max_value=None)  # This is a valid expectation, but it's not necessary to check for positive values.  # Note: This expectation is not specific to the ""amount"" column, but rather to any column that has numeric values.  # Note: This expectation is not specific to the ""expect_column_values_to_be_between"" expectation, but rather to any expectation that checks for a specific range of values.  # Note: This expectation is not specific to the ""expect_column_values_to_be_between"" expectation, but rather to any expectation that checks for a specific range of values.  # Note: This expectation is not specific to the ""expect_column_values_to_be_between"" expectation, but rather to any expectation that checks for a specific range of values.  # Note: This expectation is not specific to the ""expect_column_values_to_be_between"" expectation, but rather to any expectation that checks for a specific range of values.  # Note: This expectation is not specific to the ""expect_column_values_to_be_between"" expectation, but rather to any expectation that checks",0.14150943396226415,0.13333333333333333,0.14150943396226415,9.837051219566733
For the `employee_id` field: Ensure that all values are unique and fall within the specified set of valid employee IDs.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_in_set(column=""employee_id"", value_set=valid_employee_ids)","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_in_set(column=""employee_id"", value_set=valid_employee_ids)",1.0,1.0,1.0,100.00000000000004
Check that the total count of emails in the `emails` table equals the count of unique addresses in the `recipients` column.,"expect_column_pair_values_to_be_equal(column_A=""emails"", column_B=""recipients"")","expect_table_row_count_to_equal(table=""emails""),expect_column_values_to_be_unique(column=""recipients"")  # Note: This assumes that the `recipients` column contains unique values. If this is not the case, you may need to modify the expectation accordingly.",0.37735849056603776,0.11764705882352941,0.2641509433962264,22.85743135645678
For the `sender_id` and `receiver_id` columns: Ensure that each ID in `sender_id` exists in the `users` table and is unique across records.,"expect_column_values_to_be_unique(column=""sender_id""),expect_select_column_values_to_be_unique_within_record(column=""sender_id""),expect_column_values_to_be_in_set(column=""sender_id"", value_set=users_table_ids),expect_column_values_to_be_unique(column=""receiver_id""),expect_select_column_values_to_be_unique_within_record(column=""receiver_id""),expect_column_values_to_be_in_set(column=""receiver_id"", value_set=users_table_ids)","expect_column_values_to_be_unique(column=""sender_id""),expect_column_values_to_be_in_set(column=""sender_id"", value_set=users_table[""user_id""].unique())",0.5306122448979591,0.45833333333333337,0.5102040816326531,17.19015929093657
For fields `likes` and `shares`: Ensure the sum of `likes` and `shares` does not exceed `engagement_score`. Ensure all fields are of type 'integer' and not null.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""likes"", column_B=""engagement_score""),expect_column_pair_values_A_to_be_less_than_B(column_A=""shares"", column_B=""engagement_score""),expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_not_be_null(column=""likes""),expect_column_values_to_be_of_type(column=""shares"", type_=""int""),expect_column_values_to_not_be_null(column=""shares"")","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=engagement_score),expect_column_values_to_not_be_null(column=""likes""),expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_between(column=""shares"", min_value=0, max_value=engagement_score),expect_column_values_to_not_be_null(column=""shares""),expect_column_values_to_be_of_type(column=""shares"", type_=""int"")  # Note: This is a hypothetical expectation based on the provided requirements. Please adjust as needed based on your specific use case.",0.7151515151515152,0.5644171779141105,0.5575757575757576,67.22556626872948
Ensure the `employee_id` column has distinct values and all fall within the range of 1 to 5000.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_between(column=""employee_id"", min_value=1, max_value=5000)","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_be_between(column=""employee_id"", min_value=1, max_value=5000)",1.0,1.0,1.0,100.00000000000004
Validate that the `metadata` column contains valid JSON objects that adhere to the specified schema.,"expect_column_values_to_match_json_schema(column=""metadata"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""metadata""),expect_column_values_to_match_json_schema(column=""metadata"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""version"": {""type"": ""string""}, ""description"": {""type"": ""string""}, ""type"": {""type"": ""string""}, ""url"": {""type"": ""string""}, ""created_at"": {""type"": ""string""}, ""updated_at"": {""type"": ""string""}}})  # Replace with actual schema  # Note: This is just an example, please replace with your actual schema.",0.3287671232876712,0.30985915492957744,0.3287671232876712,16.3038245145593
For the `email` field: Ensure it follows a valid email format and contains unique values. Confirm the field is required.,"expect_column_to_exist(column=""email""),expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email""),expect_column_values_to_not_be_null(column=""email"")  # Optional, but recommended.",0.6923076923076923,0.6578947368421052,0.4871794871794872,66.15416742981681
"Ensure the `property_type` column contains only distinct values matching `['Residential', 'Commercial', 'Industrial']`.","expect_column_distinct_values_to_equal_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For the `billing_amount` column: Ensure the sum is less than or equal to 5000 and the average is between 50 and 200.,"expect_column_sum_to_be_between(column=""billing_amount"", min_value=None, max_value=5000),expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=200)","expect_column_sum_to_be_between(column=""billing_amount"", min_value=0, max_value=5000),expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=200)",0.9666666666666667,0.9310344827586207,0.9666666666666667,96.0132862288073
For the `policy_number` field: Ensure all entries are unique and formatted as 'INS-XXXXXX'. Validate that this field does not contain any null values.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^INS-\d{6}$"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_match_regex(column=""policy_number"", regex=r""^INS-\d{8}$""),expect_column_values_to_not_be_null(column=""policy_number"")",0.9696969696969697,0.9375,0.696969696969697,96.35586983844266
For field 'metadata': Ensure the field contains valid JSON objects and that parsing does not raise exceptions.,"expect_column_values_to_be_json_parseable(column=""metadata"")","expect_column_values_to_be_json_parseable(column=""metadata""),expect_column_values_to_not_be_null(column=""metadata"")  # Note: This assumes that the column values are not null. If this is not the case, please modify the expectation accordingly.",0.375,0.34782608695652173,0.375,28.196697072285215
Ensure that the `score` column contains integer values only and that they are greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0)","expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=None)",0.9361702127659575,0.9333333333333333,0.9361702127659575,88.03173774565059
Ensure the `transaction_date` column values are monotonically increasing.,"expect_column_values_to_be_increasing(column=""transaction_date"")","expect_column_values_to_be_increasing(column=""transaction_date"")",1.0,1.0,1.0,100.00000000000004
Validate that the `consumption` values are within the range of `0` to `5000` kilowatt-hours.,"expect_column_values_to_be_between(column=""consumption"", min_value=0, max_value=5000)","expect_column_values_to_be_between(column=""consumption"", min_value=0, max_value=5000)",1.0,1.0,1.0,100.00000000000004
For field 'registration_date': Ensure the expect column to exist; Ensure this field matches the type 'date' and contains values less than or equal to the current date.,"expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than_or_equal_to(column=""registration_date"", value=current_date)","expect_column_to_exist(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than(column=""registration_date"", value=datetime.datetime.now())  # Replace 'now' with the current date/time.",0.8533333333333333,0.7945205479452054,0.8533333333333333,78.48644290138506
"For field 'email': Validate that all email addresses conform to the pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'.","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
For field 'price': Ensure the field matches the type 'decimal'. Ensure values in (price) are greater than 0. Ensure this field exists.,"expect_column_to_exist(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""decimal""),expect_column_values_to_be_greater_than(column=""price"", value=0)","expect_column_to_exist(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""decimal""),expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=None)",0.8666666666666666,0.7931034482758621,0.8666666666666666,81.31122552134251
For the `view_count`: Ensure the field matches the type 'integer'. Validate that all values are non-negative and adhere to the expected distribution parameters.,"expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)","expect_column_values_to_be_of_type(column=""view_count"", type_=""int""),expect_column_values_to_be_between(column=""view_count"", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)  # Replace threshold with your expected distribution threshold.",0.8936170212765957,0.8695652173913043,0.8936170212765957,84.4856064123368
For field 'location': Ensure the field contains no missing values. Ensure it matches the type 'text' and includes valid location identifiers.,"expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_match_regex(column=""location"", regex=r""^[A-Za-z\s]+$"")","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_match_regex(column=""location"", regex=r""^[A-Za-z0-9_-]+$"")  # Regular expression to validate alphanumeric characters, dashes, and underscores.",0.8311688311688312,0.8266666666666667,0.8311688311688312,79.33534098083057
Verify that the `quantity_sold` column has a minimum value of 1 and a maximum value of 1000.,"expect_column_min_to_be_between(column=""quantity_sold"", min_value=1),expect_column_max_to_be_between(column=""quantity_sold"", max_value=1000)","expect_column_values_to_be_between(column=""quantity_sold"", min_value=1, max_value=1000)",0.7179487179487181,0.5945945945945946,0.7179487179487181,44.741147524778484
For the `user_email` field: Ensure all entries conform to the valid email format and do not match entries in the `blacklist` table.,"expect_column_values_to_match_regex(column=""user_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_not_match_regex(column=""user_email"", regex=r""blacklist_regex_pattern"") ","expect_column_values_to_match_regex(column=""user_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_in_set(column=""user_email"", value_set=blacklist_table_entries)",0.7666666666666667,0.6551724137931034,0.7666666666666667,77.23083558900812
For field 'team_name': Ensure the field is required (not null). Ensure values in 'team_name' must exist in the predefined set of team names.,"expect_column_values_to_not_be_null(column=""team_name""),expect_column_values_to_be_in_set(column=""team_name"", value_set=predefined_team_names)","expect_column_values_to_not_be_null(column=""team_name""),expect_column_values_to_be_in_set(column=""team_name"", value_set=predefined_team_names)",1.0,1.0,1.0,100.00000000000004
Ensure the 'transaction_date' column adheres to the datetime format '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `user_role` column contains only the values `['Admin', 'User']` with no duplicates.","expect_column_values_to_be_in_set(column=""user_role"", value_set=[""Admin"", ""User""]),expect_column_values_to_be_unique(column=""user_role"")","expect_column_values_to_be_in_set(column=""user_role"", value_set=['Admin', 'User']),expect_column_values_to_be_unique(column=""user_role"")",1.0,1.0,1.0,84.97157924991672
For field 'voter_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""text"")","expect_column_to_exist(column=""voter_id""),expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For the column combination of `election_id` and `voter_id`: Ensure the values are unique across records.,"expect_compound_columns_to_be_unique(column_A=""election_id"", column_B=""voter_id"")","expect_compound_columns_to_be_unique(column_A=""election_id"", column_B=""voter_id"")",1.0,1.0,1.0,100.00000000000004
For field 'registration_date': Ensure the expect column values to be unique; Ensure this field matches the type 'date' and contains values less than or equal to the current date.,"expect_column_values_to_be_unique(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_between(column=""registration_date"", min_value=None, max_value=""current_date"")","expect_column_values_to_be_unique(column=""registration_date""),expect_column_values_to_be_of_type(column=""registration_date"", type_=""date""),expect_column_values_to_be_less_than(column=""registration_date"", value=datetime.datetime.now())  # Replace 'now' with the current date/time.",0.810126582278481,0.7272727272727273,0.810126582278481,74.98216549006496
Confirm that the `team_score` column values are consistently greater than the `opponent_score` column for winning games.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""team_score"", column_B=""opponent_score"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""team_score"", column_B=""opponent_score"")",1.0,1.0,1.0,100.00000000000004
"For field 'contact_email': Ensure all email values conform to the pattern '^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$' and have no missing values.","expect_column_values_to_match_regex(column=""contact_email"", regex=r""^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$""),expect_column_values_to_not_be_null(column=""contact_email"")","expect_column_values_to_match_regex(column=""contact_email"", regex=r""^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$""),expect_column_values_to_not_be_null(column=""contact_email"")  # Note: This assumes that the column is nullable. If it is not, you may need to modify the expectation accordingly.",0.7222222222222222,0.7142857142857143,0.7222222222222222,67.51879639874174
For table 'game_details': Ensure the column 'release_date' exists. Ensure the values in 'release_date' are in the format 'YYYY-MM-DD'.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `email` column contains only unique values and adheres to the format of a valid email address.,"expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_unique(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to validate email address.",0.8571428571428572,0.8510638297872339,0.8571428571428572,85.67016975092368
"Ensure that the `course_feedback` column has unique values that match the set `['Excellent', 'Good', 'Average', 'Poor']`.","expect_column_values_to_be_in_set(column=""course_feedback"", value_set=['Excellent', 'Good', 'Average', 'Poor']),expect_column_values_to_be_unique(column=""course_feedback"")","expect_column_values_to_be_in_set(column=""course_feedback"", value_set=['Excellent', 'Good', 'Average', 'Poor'])",0.7804878048780487,0.7692307692307693,0.7804878048780487,55.803514577004734
Ensure that the `order_id` column consists of unique values and is of type 'string'. No null values should be allowed.,"expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""string""),expect_column_values_to_not_be_null(column=""order_id"")","expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""string""),expect_column_values_to_not_be_null(column=""order_id"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `tracking_number` column contains unique values formatted as valid JSON strings.,"expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_be_json_parseable(column=""tracking_number"")","expect_column_values_to_be_unique(column=""tracking_number""),expect_column_values_to_match_json_schema(column=""tracking_number"", schema={""type"": ""string""})",0.8292682926829269,0.717948717948718,0.8292682926829269,66.48101359975271
For field 'sample_size': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure 'sample_size' is within the range of 30 to 1000.,"expect_column_values_to_not_be_null(column=""sample_size""),expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=1000)","expect_column_values_to_not_be_null(column=""sample_size""),expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"For field 'file_size': Ensure this field is required (not null). Ensure the 'file_size' falls within the defined range [1KB, 10MB]. Ensure this field matches the type 'integer'.","expect_column_values_to_not_be_null(column=""file_size""),expect_column_values_to_be_between(column=""file_size"", min_value=1024, max_value=10485760),expect_column_values_to_be_of_type(column=""file_size"", type_=""integer"")","expect_column_values_to_not_be_null(column=""file_size""),expect_column_values_to_be_between(column=""file_size"", min_value=1, max_value=10 * 1024 * 1024),expect_column_values_to_be_of_type(column=""file_size"", type_=""int"")  # Note: type_ is a new feature in SQLAlchemy 2.0.  # Cutting Knowledge Date: December 2023
Today Date: 26 July 2024",0.7291666666666666,0.6595744680851064,0.7083333333333333,67.28850841790855
"Check that the `student_feedback` column contains valid JSON objects that conform to the schema: {'course_id': 'string', 'comments': 'string'}.","expect_column_values_to_match_json_schema(column=""student_feedback"", schema={'course_id': 'string', 'comments': 'string'})","expect_column_values_to_match_json_schema(column=""student_feedback"", schema={""type"": ""object"", ""properties"": {""course_id"": {""type"": ""string""}, ""comments"": {""type"": ""string""}}}})",0.8648648648648648,0.6857142857142857,0.8648648648648648,36.010939901047756
"Ensure that the `weather_condition` column only contains values from the predefined list `['Sunny', 'Cloudy', 'Rain', 'Snow']`.","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rain', 'Snow'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rain', 'Snow'])",1.0,1.0,1.0,100.00000000000004
Ensure the `device_id` column contains unique values across all records in the dataset.,"expect_column_values_to_be_unique(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column values are within the range of `-50` to `50` degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",1.0,1.0,1.0,100.00000000000004
Verify that the `location` column does not contain any missing values and is of type 'text'.,"expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text"")","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field 'enrollment_date': Ensure that this date field contains no missing values and that all dates are in the format 'YYYY-MM-DD'.,"expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Validate that the `release_date` column contains dates that are in the past and arranged in chronological order.,"expect_column_values_to_be_increasing(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_increasing(column=""release_date"")  # Assuming that the column values are already in chronological order.",0.6428571428571429,0.5555555555555555,0.6071428571428571,60.07007797479375
"Ensure the `call_type` column contains only values from the specified set `['Incoming', 'Outgoing']`.","expect_column_values_to_be_in_set(column=""call_type"", value_set=['Incoming', 'Outgoing'])","expect_column_values_to_be_in_set(column=""call_type"", value_set=['Incoming', 'Outgoing'])",1.0,1.0,1.0,100.00000000000004
For field 'warehouse_location': Ensure the field matches the type 'text'. Ensure the field does not exceed 100 characters. Ensure this field exists.,"expect_column_to_exist(column=""warehouse_location""),expect_column_value_lengths_to_be_between(column=""warehouse_location"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""warehouse_location"", type_=""text"")","expect_column_to_exist(column=""warehouse_location""),expect_column_values_to_be_of_type(column=""warehouse_location"", type_=""text""),expect_column_value_lengths_to_be_between(column=""warehouse_location"", min_value=0, max_value=100)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
Check that the `product_ids` column contains valid JSON arrays adhering to the specified JSON schema.,"expect_column_values_to_match_json_schema(column=""product_ids"", schema=your_json_schema_here)","expect_column_values_to_match_json_schema(column=""product_ids"", schema={""type"": ""array"", ""items"": {""type"": ""object"", ""properties"": {""id"": {""type"": ""integer""}, ""name"": {""type"": ""string""}, ""price"": {""type"": ""number""}, ""quantity"": {""type"": ""number""}}}}})",0.5,0.4761904761904762,0.5,20.734137569352413
For field 'player_age': Validate that the mean age of players in the dataset is between 20 and 35 years.,"expect_column_mean_to_be_between(column=""player_age"", min_value=20, max_value=35)","expect_column_mean_to_be_between(column=""player_age"", min_value=20, max_value=35)",1.0,1.0,1.0,100.00000000000004
"Validate that the `attendance_rate` column values are between 0 and 100, ensuring valid percentage representation.","expect_column_values_to_be_between(column=""attendance_rate"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""attendance_rate"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For the `product_category` field: Ensure all entries match the set `['Electronics', 'Furniture', 'Clothing']`.","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing'])","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing'])",1.0,1.0,1.0,100.00000000000004
For field 'special_requests': Ensure the field matches the type 'text'. Validate that the length of 'special_requests' is not more than 250 characters. Ensure this field exists.,"expect_column_to_exist(column=""special_requests""),expect_column_values_to_be_of_type(column=""special_requests"", type_=""text""),expect_column_value_lengths_to_be_between(column=""special_requests"", min_value=0, max_value=250)","expect_column_to_exist(column=""special_requests""),expect_column_values_to_be_of_type(column=""special_requests"", type_=""text""),expect_column_value_lengths_to_be_between(column=""special_requests"", min_value=0, max_value=250)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `policy_type` column only contains values from the set `['Life', 'Health', 'Auto', 'Home']`.","expect_column_values_to_be_in_set(column=""policy_type"", value_set=['Life', 'Health', 'Auto', 'Home'])","expect_column_values_to_be_in_set(column=""policy_type"", value_set=['Life', 'Health', 'Auto', 'Home'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `property_type` column matches the defined set `['House', 'Condo', 'Apartment']`.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['House', 'Condo', 'Apartment'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['House', 'Condo', 'Apartment'])",1.0,1.0,1.0,100.00000000000004
Ensure the number of rows in the `reservations` table is equal to the number of rows in the `guests` table.,"expect_table_row_count_to_equal_other_table(table=""reservations"", other_table=""guests"")","expect_table_row_count_to_equal_other_table(table=""reservations"", other_table=""guests"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `carrier` column contains values only from the set `['FedEx', 'UPS', 'DHL']`.","expect_column_values_to_be_in_set(column=""carrier"", value_set=['FedEx', 'UPS', 'DHL'])","expect_column_values_to_be_in_set(column=""carrier"", value_set=['FedEx', 'UPS', 'DHL'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `alert_level` column contains valid values within the set `['Low', 'Medium', 'High']` and is not null.","expect_column_values_to_be_in_set(column=""alert_level"", value_set=['Low', 'Medium', 'High']),expect_column_values_to_not_be_null(column=""alert_level"")","expect_column_values_to_be_in_set(column=""alert_level"", value_set=['Low', 'Medium', 'High']),expect_column_values_to_not_be_null(column=""alert_level"")",1.0,1.0,1.0,100.00000000000004
In the `temperature_reading` column: Ensure values are within the range of -50 to 150 degrees Celsius. Validate that there are no missing values.,"expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150),expect_column_values_to_not_be_null(column=""temperature_reading"")","expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150),expect_column_values_to_not_be_null(column=""temperature_reading"")",1.0,1.0,1.0,100.00000000000004
Ensure the `description` field does not exceed 255 characters and contains no HTML tags.,"expect_column_value_lengths_to_be_between(column=""description"", min_value=0, max_value=255),expect_column_values_to_not_match_regex(column=""description"", regex=r""<[^>]*>"")","expect_column_value_lengths_to_be_between(column=""description"", min_value=0, max_value=255),expect_column_values_to_not_match_regex(column=""description"", regex=r""<[^>]+>"")  # Regular expression to match HTML tags.",0.896551724137931,0.8928571428571428,0.896551724137931,85.47174722117387
For the `comment` field: Ensure values do not match the regex pattern `.*(spam|advertisement).*`.,"expect_column_values_to_not_match_regex(column=""comment"", regex=r"".*(spam|advertisement).*"")","expect_column_values_to_not_match_regex(column=""comment"", regex=r"".*(spam|advertisement).*"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `subscription_type` column can only contain the values 'Free', 'Basic', 'Premium' and has no missing values.","expect_column_values_to_be_in_set(column=""subscription_type"", value_set=[""Free"", ""Basic"", ""Premium""]),expect_column_values_to_not_be_null(column=""subscription_type"")","expect_column_values_to_be_in_set(column=""subscription_type"", value_set=['Free', 'Basic', 'Premium']),expect_column_values_to_not_be_null(column=""subscription_type"")  # This expectation is not necessary but can be added for completeness.",0.819672131147541,0.8135593220338984,0.819672131147541,72.14529220824441
For field 'temperature_reading': Ensure this field exists. Ensure the field matches the type 'decimal'. Ensure values in 'temperature_reading' are within the range of -50 to 150.,"expect_column_to_exist(column=""temperature_reading""),expect_column_values_to_be_of_type(column=""temperature_reading"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150)","expect_column_to_exist(column=""temperature_reading""),expect_column_values_to_be_of_type(column=""temperature_reading"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature_reading"", min_value=-50, max_value=150)",1.0,1.0,1.0,100.00000000000004
"Verify that the `price` column values are within the range of $50,000 to $5,000,000.","expect_column_values_to_be_between(column=""price"", min_value=50000, max_value=5000000)","expect_column_values_to_be_between(column=""price"", min_value=50000, max_value=5000000)",1.0,1.0,1.0,100.00000000000004
Ensure the sum of the `battery_level` column does not fall below 20% across all devices.,"expect_column_sum_to_be_between(column=""battery_level"", min_value=20)","expect_column_sum_to_be_between(column=""battery_level"", min_value=20)",1.0,1.0,1.0,100.00000000000004
"For the `stock_level` field, ensure that it contains integer values only and does not allow negative numbers.","expect_column_values_to_be_of_type(column=""stock_level"", type_=""int""),expect_column_values_to_be_between(column=""stock_level"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""stock_level"", type_=""int""),expect_column_values_to_be_between(column=""stock_level"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
"Ensure the `transaction_type` column contains only distinct values matching `['Deposit', 'Withdrawal', 'Transfer']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])",1.0,1.0,1.0,100.00000000000004
Ensure the `ip_address` field contains only unique values and adheres to the valid IPv4 format.,"expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")  # Regular expression to validate IPv4 address.",0.90625,0.9032258064516129,0.90625,90.0600883892277
For the `release_date` field: Ensure values conform to the format '%Y-%m-%d'. Ensure this field cannot be null.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `filing_date` column contains dates in the format 'MM/DD/YYYY' and are not future dates.,"expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_in_set(column=""filing_date"", value_set=[date for date in range(datetime.now().year)])","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""filing_date""),expect_column_values_to_be_between(column=""filing_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.6265060240963857,0.5185185185185186,0.6265060240963857,52.261986134032135
For field 'court_name': Ensure values match the regex for valid court names. Ensure this field cannot be null.,"expect_column_values_to_not_be_null(column=""court_name""),expect_column_values_to_match_regex(column=""court_name"", regex=r""^[\w\s]+ Court$"")","expect_column_values_to_match_regex(column=""court_name"", regex=r""^[a-zA-Z0-9\s]+$""),expect_column_values_to_not_be_null(column=""court_name"")",0.8799999999999999,0.7916666666666667,0.5599999999999999,88.91237500904045
Validate that the `timestamp` column matches the 'YYYY-MM-DDTHH:MM:SSZ' format and can be parsed into valid datetime objects.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")  # Note: This is a new expectation that is not yet supported by Cutting Knowledge Date: December 2023
Today Date: 26 July 2024",0.7027027027027027,0.6944444444444444,0.7027027027027027,69.93609373070524
For field 'booking_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""booking_id""),expect_column_values_to_be_of_type(column=""booking_id"", type_=""int""),expect_column_values_to_be_unique(column=""booking_id"")","expect_column_values_to_not_be_null(column=""booking_id""),expect_column_values_to_be_of_type(column=""booking_id"", type_=""int""),expect_column_values_to_be_unique(column=""booking_id"")  # Note: This expectation may not be applicable depending on the requirements.",0.8493150684931507,0.8450704225352113,0.8493150684931507,83.62265600679518
For field 'battery_level': Ensure that values in 'battery_level' are within the range of 0 to 100. Ensure that this field exists and is not null.,"expect_column_to_exist(column=""battery_level""),expect_column_values_to_not_be_null(column=""battery_level""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_to_exist(column=""battery_level""),expect_column_values_to_not_be_null(column=""battery_level""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `status` column values are from the set `['Open', 'Closed', 'In Progress']` and do not contain any other values.","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'In Progress']),expect_column_values_to_not_be_in_set(column=""status"", value_set=['Open', 'Closed', 'In Progress'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'In Progress'])",0.6521739130434783,0.6363636363636364,0.6521739130434783,33.591098123916254
Ensure the `product_name` column has a length of at least 3 characters and no more than 50 characters to maintain consistency.,"expect_column_value_lengths_to_be_between(column=""product_name"", min_value=3, max_value=50)","expect_column_value_lengths_to_be_between(column=""product_name"", min_value=3, max_value=50)",1.0,1.0,1.0,100.00000000000004
For field 'doctor_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all doctor IDs are unique.,"expect_column_values_to_not_be_null(column=""doctor_id""),expect_column_values_to_be_of_type(column=""doctor_id"", type_=""text""),expect_column_values_to_be_unique(column=""doctor_id"")","expect_column_values_to_not_be_null(column=""doctor_id""),expect_column_values_to_be_of_type(column=""doctor_id"", type_=""text""),expect_column_values_to_be_unique(column=""doctor_id"")  # Assuming the column is unique.",0.9253731343283582,0.923076923076923,0.9253731343283582,91.08090449130712
Ensure the `shipment_date` column contains dates formatted as `MM/DD/YYYY`.,"expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%m/%d/%Y"")","expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%m/%d/%Y"")",1.0,1.0,1.0,100.00000000000004
For field 'json_data': Ensure values in (json_data) are valid JSON objects and conform to the specified JSON schema. Ensure this field exists.,"expect_column_to_exist(column=""json_data""),expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object""})","expect_column_to_exist(column=""json_data""),expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {""key1"": {""type"": ""string""}, ""key2"": {""type"": ""number""}, ""key3"": {""type"": ""boolean""}}})  # Replace with actual JSON schema.",0.8,0.7945205479452054,0.8,56.05726966858617
Validate that the `patient_id` column contains unique values and matches the set of existing patient identifiers.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_in_set(column=""patient_id"", value_set=existing_patient_identifiers)","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_in_set(column=""patient_id"", value_set=existing_patient_identifiers)",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column values are within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",1.0,1.0,1.0,100.00000000000004
Check that the `check_in_date` is earlier than the `check_out_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_in_date"", column_B=""check_out_date"")",1.0,1.0,1.0,100.00000000000004
For fields 'incident_date' and 'resolution_date': Ensure resolution_date is greater than incident_date.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""resolution_date"", column_B=""incident_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""resolution_date"", column_B=""incident_date"")",1.0,1.0,1.0,100.00000000000004
Check that the `view_count` column has values greater than or equal to 0 and does not include any null entries.,"expect_column_values_to_be_between(column=""view_count"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""view_count"")","expect_column_values_to_be_between(column=""view_count"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""view_count"")",1.0,1.0,1.0,100.00000000000004
"For field 'amount': Ensure the field is required (not null). Validate that the field matches the type 'decimal' and that values fall within the range [0.001, 1000000].","expect_column_values_to_not_be_null(column=""amount""),expect_column_values_to_be_of_type(column=""amount"", type_=""decimal""),expect_column_values_to_be_between(column=""amount"", min_value=0.001, max_value=1000000)","expect_column_values_to_not_be_null(column=""amount""),expect_column_values_to_be_of_type(column=""amount"", type_=""decimal""),expect_column_values_to_be_between(column=""amount"", min_value=0.001, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
"For field 'category': Ensure the field contains only distinct values from the list ['News', 'Blog', 'Tutorial']. Validate there are no missing values.","expect_column_distinct_values_to_equal_set(column=""category"", value_set=[""News"", ""Blog"", ""Tutorial""]),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['News', 'Blog', 'Tutorial']),expect_column_values_to_not_be_null(column=""category"")",0.9130434782608695,0.8181818181818182,0.9130434782608695,69.67355957220936
Ensure that the `course_start_date` is always earlier than the `course_end_date` for all entries in the `courses` table.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""course_start_date"", column_B=""course_end_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""course_end_date"", column_B=""course_start_date"")",1.0,1.0,0.9,100.00000000000004
Verify that the `sample_size` column contains integer values that are greater than `30` and that the average sample size does not exceed `500`.,"expect_column_values_to_be_of_type(column=""sample_size"", type_=""int""),expect_column_values_to_be_greater_than(column=""sample_size"", value=30),expect_column_mean_to_be_between(column=""sample_size"", min_value=None, max_value=500)","expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=None),expect_column_mean_to_be_between(column=""sample_size"", min_value=0, max_value=500)",0.7536231884057971,0.5970149253731344,0.6956521739130435,53.36475264063673
"Ensure the `service_plan` column contains only distinct values matching ['Basic', 'Standard', 'Premium'].","expect_column_distinct_values_to_equal_set(column=""service_plan"", value_set=[""Basic"", ""Standard"", ""Premium""])","expect_column_values_to_be_in_set(column=""service_plan"", value_set=['Basic', 'Standard', 'Premium'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,54.76253193209774
For field 'property_id': Ensure the field is required (not null). Ensure the field contains only unique values.,"expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id"")","expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `square_footage` field is of type integer and does not contain any missing values.,"expect_column_values_to_be_of_type(column=""square_footage"", type_=""int""),expect_column_values_to_not_be_null(column=""square_footage"")","expect_column_values_to_be_of_type(column=""square_footage"", type_=""int""),expect_column_values_to_not_be_null(column=""square_footage"")",1.0,1.0,1.0,100.00000000000004
For field 'research_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field is unique for each research study.,"expect_column_values_to_not_be_null(column=""research_id""),expect_column_values_to_be_of_type(column=""research_id"", type_=""int""),expect_column_values_to_be_unique(column=""research_id"")","expect_column_values_to_not_be_null(column=""research_id""),expect_column_values_to_be_of_type(column=""research_id"", type_=""int""),expect_column_values_to_be_unique(column=""research_id"")  # Note: This expectation may need to be adjusted based on the actual implementation.",0.8266666666666667,0.8219178082191781,0.8266666666666667,81.71096521534241
Verify that the `signup_date` field contains only valid datetime entries formatted as 'YYYY-MM-DD'. Ensure there are no missing values.,"expect_column_to_exist(column=""signup_date""),expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""signup_date"")","expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""signup_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
"In the `service_request` table: Validate that the `status` column contains only values from the set `['Open', 'In Progress', 'Closed']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'In Progress', 'Closed'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'In Progress', 'Closed'])",1.0,1.0,1.0,100.00000000000004
Verify that the `hire_date` column values are formatted as `'YYYY-MM-DD'` and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # Assuming dateutil is installed.",0.9259259259259259,0.923076923076923,0.9259259259259259,90.39676305405135
Ensure the `game_title` column contains unique values with a maximum length of 100 characters. It should not allow null entries.,"expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100),expect_column_values_to_not_be_null(column=""game_title"")","expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""game_title"")",0.9714285714285714,0.9411764705882353,0.9714285714285714,96.69816961515569
For field 'email_address': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that all email addresses conform to a valid format.,"expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to validate email address format.",0.7499999999999999,0.7441860465116279,0.7499999999999999,79.05226958173357
Verify that the `admission_date` column contains dates formatted as 'YYYY-MM-DD' and that there are no missing values.,"expect_column_to_exist(column=""admission_date""),expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""admission_date"")","expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""admission_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
For the 'reports' JSON file: Validate that the content is properly formatted JSON and that it contains all required fields as per the schema.,"expect_file_to_exist(file_path=""reports.json""),expect_file_to_be_valid_json(file_path=""reports.json""),expect_column_values_to_match_json_schema(column=""reports"", schema={""required_fields"": [...]})  # Replace [...] with actual required fields in the schema.","expect_file_to_exist(file_path=""reports.json""),expect_file_to_match_json_schema(file_path=""reports.json"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""type"": {""type"": ""string""}, ""start_date"": {""type"": ""string""}, ""end_date"": {""type"": ""string""}, ""total_revenue"": {""type"": ""number""}, ""total_customers"": {""type"": ""number""}, ""total_orders"": {""type"": ""number""}, ""total_items"": {""type"": ""number""}, ""total_payments"": {""type"": ""number""}, ""total_refunds"": {""type"": ""number""}, ""total_returns"": {""type"": ""number""}, ""total_expenses"": {""type"": ""number""}, ""total_profit"": {""type"": ""number""}, ""total_tax"": {""type"": ""number""}, ""total_discount"": {""type"": ""number""}, ""total_shipping"": {""type"": ""number""}, ""total_other"": {""type"": ""number""}, ""total"": {""type"": ""number""}, ""total_with_tax"": {""type"": ""number""}, ""total_with_discount"": {""type"": ""number""}, ""total_with_shipping"": {""type"": ""number""}, ""total_with_other"": {""type"": ""number",0.2684563758389262,0.21768707482993194,0.24161073825503354,11.094279103511354
"In the `username` column: Ensure all values are unique and match the regex pattern '^[a-zA-Z0-9_]{3,15}$'.","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=""^[a-zA-Z0-9_]{3,15}$"")","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",0.9787234042553191,0.9333333333333332,0.9787234042553191,95.16433313522532
For the `property_id` field: Ensure the values are unique and of type 'string'. The field must not contain null entries.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""string"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""string""),expect_column_values_to_not_be_null(column=""property_id"")",1.0,0.9666666666666667,0.8064516129032258,99.64092777538484
"Check that `payment_status` contains only distinct values from `['paid', 'pending', 'refunded']` and is related to the `order_id`.","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'pending', 'refunded']),expect_select_column_values_to_be_unique_within_record(column=""order_id"")","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'pending','refunded']),expect_column_pair_values_to_be_equal(column_A=""payment_status"", column_B=""order_id"")  # This expectation is not necessary but can be used to ensure that the two columns are related.",0.6216216216216216,0.5,0.6216216216216216,56.283774325576076
Validate that the `project_allocation` column contains JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""project_allocation"", schema={""type"": ""object"", ""properties"": {}})","expect_column_values_to_match_json_schema(column=""project_allocation"", schema={""type"": ""object"", ""properties"": {""project_id"": {""type"": ""string""}, ""allocation"": {""type"": ""number""}}})",0.8,0.787878787878788,0.8,55.38559766041524
Ensure the `customer_id` column contains only unique values and is of type 'integer'.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Check that the `timestamp` column is formatted as 'YYYY-MM-DD HH:MM:SS' and does not include any null entries.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Ensure the `team_id` column contains values that exist in the `teams` table.,"expect_column_values_to_be_in_set(column=""team_id"", value_set=<values_from_teams_table>)","expect_column_values_to_be_in_set(column=""team_id"", value_set=teams_table.team_id)",0.875,0.8000000000000002,0.875,76.45844465028159
Verify that the `tracking_info` column contains valid JSON objects according to the defined schema.,"expect_column_values_to_match_json_schema(column=""tracking_info"", schema={...})  # Replace {...} with the actual schema definition.","expect_column_values_to_match_json_schema(column=""tracking_info"", schema={""type"": ""object"", ""properties"": {""tracking_id"": {""type"": ""string""}, ""status"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}, ""location"": {""type"": ""string""}, ""device_id"": {""type"": ""string""}, ""user_id"": {""type"": ""string""}, ""event_type"": {""type"": ""string""}, ""event_data"": {""type"": ""object""}}})",0.3666666666666667,0.3448275862068965,0.3666666666666667,15.334076708054537
"For the 'comments' table: Confirm that the number of rows is between 0 and 1000. Ensure columns exist: 'comment_id', 'post_id', and 'author_name'.","expect_table_row_count_to_be_between(min_value=0, max_value=1000),expect_column_to_exist(column=""comment_id""),expect_column_to_exist(column=""post_id""),expect_column_to_exist(column=""author_name"")","expect_table_row_count_to_be_between(min_value=0, max_value=1000),expect_column_to_exist(column=""comment_id""),expect_column_to_exist(column=""post_id""),expect_column_to_exist(column=""author_name"")  # Note: This is a combination of multiple expectations.",0.8947368421052632,0.8918918918918919,0.8947368421052632,87.28095704914654
Ensure the `account_number` column contains unique identifiers and has no null values.,"expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")","expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `transaction_amount` is greater than zero and falls within the expected range of transaction values.,"expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0),expect_column_values_to_be_between(column=""transaction_amount"", min_value=<min_value>, max_value=<max_value>)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=1000)",0.6222222222222222,0.5581395348837209,0.5777777777777777,28.70918706597389
Verify that the number of rows in the `course_enrollment` table is between 100 and 500.,"expect_table_row_count_to_be_between(min_value=100, max_value=500)","expect_table_row_count_to_be_between(min_value=100, max_value=500)",1.0,1.0,1.0,100.00000000000004
For the `email_subject` column: Confirm that it contains no missing values and is of type string with a maximum length of 255 characters.,"expect_column_values_to_not_be_null(column=""email_subject""),expect_column_values_to_be_of_type(column=""email_subject"", type_=""str""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=0, max_value=255)","expect_column_values_to_not_be_null(column=""email_subject""),expect_column_values_to_be_of_type(column=""email_subject"", type_=""string""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=0, max_value=255)",0.9736842105263158,0.9459459459459459,0.9736842105263158,97.04907832745397
Ensure the `temperature` column contains only numeric values within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `data_payload` column contains valid JSON objects conforming to the schema `{ 'data': 'string', 'timestamp': 'string' }`.","expect_column_values_to_match_json_schema(column=""data_payload"", schema={""type"": ""object"", ""properties"": {""data"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""data_payload"", schema={""type"": ""object"", ""properties"": {""data"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}}})",1.0,1.0,1.0,98.51810883417694
Check that the `city_id` column has unique values across the dataset to prevent duplicate entries for cities.,"expect_column_values_to_be_unique(column=""city_id"")","expect_column_values_to_be_unique(column=""city_id"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `grade` column in the `exam_results` table only contains values within the range of 0 to 100.,"expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'temperature': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure temperature values are within the range of -50 to 50 degrees Celsius.,"expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""numeric""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)","expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""numeric""),expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=50)",1.0,1.0,1.0,100.00000000000004
Verify that the `sales` column in CRM data has a standard deviation between 0 and 1000.,"expect_column_stdev_to_be_between(column=""sales"", min_value=0, max_value=1000)","expect_column_stdev_to_be_between(column=""sales"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
Verify that the `expense_amount` column values are greater than or equal to zero.,"expect_column_values_to_be_between(column=""expense_amount"", min_value=0)","expect_column_values_to_be_between(column=""expense_amount"", min_value=0)",1.0,1.0,1.0,100.00000000000004
Confirm that the sum of the `usage_kwh` column matches the expected total for each `billing_period`.,"expect_multicolumn_sum_to_equal(column_list=[""billing_period"", ""usage_kwh""])","expect_multicolumn_sum_to_equal(column_list=[""usage_kwh""], total=expected_total)",0.7826086956521738,0.6666666666666666,0.7826086956521738,72.82821124436853
For field `hire_date`: Ensure all entries adhere to the datetime format 'YYYY-MM-DD'. Ensure this field is required (not null).,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""hire_date"")",1.0,1.0,1.0,100.00000000000004
For field `supplier_name`: Validate that the length of each entry does not exceed 100 characters and matches the regex pattern for valid supplier names.,"expect_column_value_lengths_to_be_between(column=""supplier_name"", min_value=0, max_value=100),expect_column_values_to_match_regex(column=""supplier_name"", regex=r""^[a-zA-Z0-9\s&.,'-]*$"")","expect_column_value_lengths_to_be_between(column=""supplier_name"", min_value=0, max_value=100),expect_column_values_to_match_regex(column=""supplier_name"", regex=r""^[a-zA-Z0-9\s\.\,\-\(\)]+$"")  # Note: This regex assumes that the column values contain alphanumeric characters, spaces, periods, commas, hyphens, parentheses, and nothing else. If your actual requirement is different, adjust the regex accordingly.",0.6881720430107526,0.6813186813186815,0.6881720430107526,55.79129023204453
For a CSV file upload: Ensure that the first line contains valid headers and that the total number of lines does not exceed 1000.,"expect_file_to_have_valid_table_header(),expect_file_line_regex_match_count_to_be_between(min_value=1, max_value=1000)","expect_file_to_exist(file_path=""upload_file""),expect_file_to_have_valid_header(file_path=""upload_file""),expect_file_line_count_to_be_between(min_value=1, max_value=1000)",0.7169811320754716,0.588235294117647,0.7169811320754716,54.03844011459399
"Ensure the `listing_price` column values conform to a normal distribution with a mean between 200,000 and 1,000,000.","expect_column_mean_to_be_between(column=""listing_price"", min_value=200000, max_value=1000000),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""listing_price"", threshold=0.05)","expect_column_mean_to_be_between(column=""listing_price"", min_value=200000, max_value=1000000)",0.625,0.6086956521739131,0.625,31.466396101845913
Ensure the `start_date` is less than the `end_date` for all `projects` records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""start_date"", column_B=""end_date"")","expect_column_pair_values_A_to_be_less_than_B(column_A=""end_date"", column_B=""start_date"")",0.9444444444444444,0.7647058823529412,0.8333333333333334,91.9171473512929
Validate that the `pressure` column contains only numeric values and that all values fall within the range of 950 to 1050 hPa.,"expect_column_values_to_be_of_type(column=""pressure"", type_=""numeric""),expect_column_values_to_be_between(column=""pressure"", min_value=950, max_value=1050)","expect_column_values_to_be_of_type(column=""pressure"", type_=""float""),expect_column_values_to_be_between(column=""pressure"", min_value=950, max_value=1050)",0.96,0.9166666666666666,0.96,95.51190479308646
Ensure that all `account_numbers` in the `customer_accounts` column are exactly 10 digits long.,"expect_column_value_lengths_to_equal(column=""customer_accounts"", length=10)","expect_column_value_lengths_to_equal(column=""customer_accounts"", value=10)",0.9090909090909091,0.8000000000000002,0.9090909090909091,88.43865924896839
"For the `player_scores` column: Validate that all scores are within the range of 0 to 100, ensuring no negative values exist.","expect_column_values_to_be_between(column=""player_scores"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""player_scores"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""player_scores"")  # Note: This assumes that the column is not null. If it is null, you may need to modify the expectation accordingly.",0.4918032786885246,0.4745762711864407,0.4918032786885246,38.342776337422976
For field 'final_grade': Ensure the field matches the type 'float'. Validate that the average of all values in (final_grade) is within the range of 0.0 to 4.0. Ensure this field exists.,"expect_column_to_exist(column=""final_grade""),expect_column_values_to_be_of_type(column=""final_grade"", type_=""float""),expect_column_mean_to_be_between(column=""final_grade"", min_value=0.0, max_value=4.0)","expect_column_to_exist(column=""final_grade""),expect_column_values_to_be_of_type(column=""final_grade"", type_=""float""),expect_column_mean_to_be_between(column=""final_grade"", min_value=0.0, max_value=4.0)",1.0,1.0,1.0,100.00000000000004
For the `water_usage` field: Ensure the sum of this column for each month does not exceed the expected limit of 5000 liters.,"expect_column_sum_to_be_between(column=""water_usage"", min_value=0, max_value=5000)","expect_column_sum_to_be_between(column=""water_usage"", min_value=0, max_value=5000)",1.0,1.0,1.0,100.00000000000004
"For field 'room_type': Ensure the field matches the type 'text'. Ensure values in 'room_type' must exist in the predefined list ['Single', 'Double', 'Suite'].","expect_column_values_to_be_of_type(column=""room_type"", type_=""text""),expect_column_values_to_be_in_set(column=""room_type"", value_set=[""Single"", ""Double"", ""Suite""])","expect_column_values_to_be_of_type(column=""room_type"", type_=""text""),expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])",1.0,1.0,1.0,82.59707449774302
Ensure the `alert_time` column contains datetime entries formatted as `'%Y-%m-%d %H:%M:%S'`.,"expect_column_values_to_match_strftime_format(column=""alert_time"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""alert_time"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
For field 'sensor_id': Ensure the field exists. Ensure that each value in 'sensor_id' is unique and matches the type 'text'.,"expect_column_to_exist(column=""sensor_id""),expect_column_values_to_be_unique(column=""sensor_id""),expect_column_values_to_be_of_type(column=""sensor_id"", type_=""text"")","expect_column_to_exist(column=""sensor_id""),expect_column_values_to_be_unique(column=""sensor_id""),expect_column_values_to_be_of_type(column=""sensor_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For the `medications` column, ensure that all entries are valid JSON objects conforming to the specified schema for medication details.","expect_column_values_to_match_json_schema(column=""medications"")","expect_column_values_to_match_json_schema(column=""medications"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""dosage"": {""type"": ""string""}, ""frequency"": {""type"": ""string""}, ""duration"": {""type"": ""string""}, ""start_date"": {""type"": ""string""}, ""end_date"": {""type"": ""string""}, ""prescriber"": {""type"": ""string""}, ""patient"": {""type"": ""string""}, ""reason"": {""type"": ""string""}, ""status"": {""type"": ""string""}, ""notes"": {""type"": ""string""}}})",0.3157894736842105,0.2909090909090909,0.3157894736842105,9.095056907719682
Ensure the `location_id` column has unique values and is of type 'integer'. There should be no null values present.,"expect_column_values_to_be_unique(column=""location_id""),expect_column_values_to_be_of_type(column=""location_id"", type_=""int""),expect_column_values_to_not_be_null(column=""location_id"")","expect_column_values_to_be_unique(column=""location_id""),expect_column_values_to_be_of_type(column=""location_id"", type_=""int""),expect_column_values_to_not_be_null(column=""location_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the values in the `methodology` column are from the set `['Qualitative', 'Quantitative', 'Mixed Methods']`.","expect_column_values_to_be_in_set(column=""methodology"", value_set=['Qualitative', 'Quantitative', 'Mixed Methods'])","expect_column_values_to_be_in_set(column=""methodology"", value_set=['Qualitative', 'Quantitative', 'Mixed Methods'])",1.0,1.0,1.0,100.00000000000004
For the `order_id` field: Ensure the field is unique and not null. Ensure this field exists.,"expect_column_to_exist(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_be_unique(column=""order_id"")","expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id"")",1.0,1.0,0.8846153846153846,100.00000000000004
For the `comments` column: Check that it contains valid JSON objects conforming to the specified schema for user comments.,"expect_column_values_to_match_json_schema(column=""comments"", schema={""type"": ""object"", ""properties"": {""user"": {""type"": ""string""}, ""message"": {""type"": ""string""}, ""timestamp"": {""type"": ""string"", ""format"": ""date-time""}}})","expect_column_values_to_match_json_schema(column=""comments"", schema={""type"": ""object"", ""properties"": {""text"": {""type"": ""string""}, ""author"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}, ""rating"": {""type"": ""number""}}})",0.8000000000000002,0.7083333333333334,0.8000000000000002,81.06535548894297
Ensure the `customer_email` column contains only valid email formats and no null values.,"expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.7368421052631579,0.7272727272727273,0.7368421052631579,72.78249610356731
"For the `json_data` field, ensure all entries are valid JSON objects that conform to the provided schema.","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=provided_schema)","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {""key1"": {""type"": ""string""}, ""key2"": {""type"": ""number""}, ""key3"": {""type"": ""boolean""}}})  # Replace with actual schema  # Note: This is just an example, please replace with your actual schema.",0.6111111111111112,0.5714285714285715,0.6111111111111112,36.919255686188606
Check that the `premium_amount` is greater than zero and less than or equal to the maximum defined limit.,"expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=maximum_defined_limit)","expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=100000)",0.8749999999999999,0.8666666666666666,0.8749999999999999,83.133455068861
"Ensure the `payment_status` column contains distinct values from the set `['Paid', 'Pending', 'Failed']`.","expect_column_distinct_values_to_equal_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Failed'])","expect_column_values_to_be_in_set(column=""payment_status"", value_set=['Paid', 'Pending', 'Failed'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For field 'court_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure this field exists.,"expect_column_to_exist(column=""court_date""),expect_column_values_to_not_be_null(column=""court_date""),expect_column_values_to_be_of_type(column=""court_date"", type_=""date"")","expect_column_to_exist(column=""court_date""),expect_column_values_to_not_be_null(column=""court_date""),expect_column_values_to_be_of_type(column=""court_date"", type_=""date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_description` column does not exceed 500 characters and does not contain any HTML tags.,"expect_column_value_lengths_to_be_between(column=""product_description"", min_value=0, max_value=500),expect_column_values_to_not_match_regex(column=""product_description"", regex=r""<[^>]+>"")","expect_column_value_lengths_to_be_between(column=""product_description"", min_value=0, max_value=500),expect_column_values_to_not_match_regex(column=""product_description"", regex=r""<[^>]+>"")  # Regular expression to match HTML tags.",0.9032258064516129,0.9,0.9032258064516129,89.54011867524983
"For the `category` column: Ensure values are from the set ['Electronics', 'Apparel', 'Home', 'Sports']. Confirm that there are no null entries.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home', 'Sports']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home', 'Sports']),expect_column_values_to_not_be_null(column=""category"")",1.0,1.0,1.0,100.00000000000004
For field 'classroom_number': Ensure the expect column values to be in set;,"expect_column_values_to_be_in_set(column=""classroom_number"", value_set=...)  # Specify the value_set as needed.","expect_column_values_to_be_in_set(column=""classroom_number"", value_set=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",0.6,0.5789473684210527,0.6,53.14756263771804
For field 'author_id': Ensure this field is required (not null). Its values must exist in the 'authors' table.,"expect_column_values_to_not_be_null(column=""author_id""),expect_column_values_to_be_in_set(column=""author_id"", value_set=authors_table_values)  # authors_table_values should be defined as a set of valid author IDs from the 'authors' table.","expect_column_values_to_not_be_null(column=""author_id""),expect_column_values_to_be_in_set(column=""author_id"", value_set=authors_table_author_ids)",0.7647058823529412,0.7272727272727272,0.7647058823529412,67.40827716162198
"For field 'account_number': Ensure the field exists. Validate that 'account_number' is exactly 12 digits long, matching the pattern '^\d{12}$'.","expect_column_to_exist(column=""account_number""),expect_column_values_to_match_regex(column=""account_number"", regex=r""^\d{12}$"")","expect_column_to_exist(column=""account_number""),expect_column_value_lengths_to_equal(column=""account_number"", value=12),expect_column_values_to_match_regex(column=""account_number"", regex=r""^\d{12}$"")",0.7843137254901961,0.7755102040816326,0.7843137254901961,65.97649045223153
For field 'content_length': Ensure this field is numeric and that it accurately reflects the character count of the 'content' field.,"expect_column_values_to_be_of_type(column=""content_length"", type_=""numeric""),expect_column_pair_values_to_be_equal(column_A=""content_length"", column_B=""content"", ignore_index=True)","expect_column_values_to_be_of_type(column=""content_length"", type_=""int""),expect_column_values_to_be_between(column=""content_length"", min_value=0, max_value=None)  # Note: This assumes that the max_value is not specified. If it is, you can modify the expectation accordingly.",0.5066666666666666,0.3835616438356164,0.5066666666666666,49.86640103999983
For field 'meter_reading_date': Ensure the field matches the type 'date'. Validate that values in (meter_reading_date) are unique and occur within the last 30 days.,"expect_column_values_to_be_of_type(column=""meter_reading_date"", type_=""date""),expect_column_values_to_be_unique(column=""meter_reading_date""),expect_column_values_to_be_between(column=""meter_reading_date"", min_value=(current_date - timedelta(days=30)), max_value=current_date)","expect_column_values_to_be_of_type(column=""meter_reading_date"", type_=""date""),expect_column_values_to_be_unique(column=""meter_reading_date""),expect_column_values_to_be_between(column=""meter_reading_date"", min_value=""2023-01-01"", max_value=""2023-01-31"")  # Replace with actual date range based on your requirements.",0.7916666666666666,0.7446808510638299,0.7916666666666666,75.73615220169147
For field 'customer_id': Ensure this field contains unique values. Ensure this field matches the type 'integer'. Ensure this field is required (not null).,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the `employee_id` is unique across the dataset.,"expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `feedback_score` column contains integer values between 1 and 10, with no missing entries.","expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""feedback_score""),expect_column_values_to_be_of_type(column=""feedback_score"", type_=""int"")","expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""feedback_score"")",0.8064516129032258,0.8,0.8064516129032258,57.95782787848098
"In the `status` column: Ensure values are from the set ['active', 'inactive', 'malfunctioning'] and do not contain null entries.","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'malfunctioning']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive','malfunctioning']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `genre` column contains at least one value from the list `['Action', 'Adventure', 'RPG']`.","expect_column_values_to_contain_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG'])",0.888888888888889,0.8,0.888888888888889,84.986446467415
For field 'stock_quantity': Ensure the field is required (not null). Ensure the field matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int"")","expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `purchase_amount` column values are between $10 and $5000, with a median value above $100.","expect_column_values_to_be_between(column=""purchase_amount"", min_value=10, max_value=5000),expect_column_median_to_be_between(column=""purchase_amount"", min_value=100, max_value=None)","expect_column_values_to_be_between(column=""purchase_amount"", min_value=10, max_value=5000),expect_column_median_to_be_between(column=""purchase_amount"", min_value=100, max_value=None)",1.0,1.0,1.0,100.00000000000004
"For the `temperature` field, verify that all values fall within the range of -50 to 150 degrees Celsius.","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=150)","expect_column_values_to_be_between(column=""temperature"", min_value=-50, max_value=150)",1.0,1.0,1.0,100.00000000000004
For field 'email_id': Ensure this field is required (not null). Ensure that values in 'email_id' are unique and match the type 'string' with a valid email format.,"expect_column_values_to_not_be_null(column=""email_id""),expect_column_values_to_be_unique(column=""email_id""),expect_column_values_to_be_of_type(column=""email_id"", type_=""string""),expect_column_values_to_match_regex(column=""email_id"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_not_be_null(column=""email_id""),expect_column_values_to_be_unique(column=""email_id""),expect_column_values_to_be_of_type(column=""email_id"", type_=""string""),expect_column_values_to_match_regex(column=""email_id"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to match valid email addresses.",0.9278350515463918,0.9263157894736842,0.9278350515463918,93.15538056004472
"Ensure that the `booking_status` column only includes values from the set `['Confirmed', 'Pending', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""booking_status"", value_set=['Confirmed', 'Pending', 'Cancelled'])","expect_column_values_to_be_in_set(column=""booking_status"", value_set=['Confirmed', 'Pending', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `ballot_status` column only contains distinct values from the set `['Submitted', 'Rejected', 'In Progress']`.","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['Submitted', 'Rejected', 'In Progress'])","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['Submitted', 'Rejected', 'In Progress'])",1.0,1.0,1.0,100.00000000000004
"For the `phone_number` column: Ensure values do not match the pattern `^\D*1?\D*\d{3}\D*\d{3}\D*\d{4}\D*$` (e.g., North American format).","expect_column_values_to_not_match_regex(column=""phone_number"", regex=r""^\D*1?\D*\d{3}\D*\d{3}\D*\d{4}\D*$"")","expect_column_values_to_not_match_regex(column=""phone_number"", regex=r""^\D*1?\D*\d{3}\D*\d{3}\D*\d{4}\D*$"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `participant_age` field contains only integers between 18 and 100. Validate that this field exists.,"expect_column_to_exist(column=""participant_age""),expect_column_values_to_be_between(column=""participant_age"", min_value=18, max_value=100),expect_column_values_to_be_of_type(column=""participant_age"", type_=""int"")","expect_column_to_exist(column=""participant_age""),expect_column_values_to_be_of_type(column=""participant_age"", type_=""int""),expect_column_values_to_be_between(column=""participant_age"", min_value=18, max_value=100)",1.0,0.9696969696969697,0.6764705882352942,99.01141077297541
Verify that the `transaction_id` column has unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
For field 'customer_id': Ensure the field is required (not null). Validate that the length of 'customer_id' is exactly 10 characters.,"expect_column_values_to_not_be_null(column=""customer_id""),expect_column_value_lengths_to_equal(column=""customer_id"", value=10)","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_value_lengths_to_equal(column=""customer_id"", value=10)",1.0,1.0,1.0,100.00000000000004
"Check that the `json_transaction_details` column contains valid JSON objects with required fields such as `amount`, `currency`, and `timestamp`.","expect_column_values_to_be_json_parseable(column=""json_transaction_details""),expect_column_values_to_match_json_schema(column=""json_transaction_details"", schema={""type"": ""object"", ""required"": [""amount"", ""currency"", ""timestamp""]})","expect_column_values_to_be_json_parseable(column=""json_transaction_details""),expect_column_values_to_match_json_schema(column=""json_transaction_details"", schema={""type"": ""object"", ""properties"": {""amount"": {""type"": ""number""}, ""currency"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}})  # Replace with actual schema for your use case.",0.7777777777777779,0.6857142857142857,0.7777777777777779,57.21929588220115
Check that the `transaction_value` entries are greater than 0 and are of type 'float'.,"expect_column_values_to_be_greater_than(column=""transaction_value"", threshold=0),expect_column_values_to_be_of_type(column=""transaction_value"", type_=""float"")","expect_column_values_to_be_between(column=""transaction_value"", min_value=0.01, max_value=None),expect_column_values_to_be_of_type(column=""transaction_value"", type_=""float"")",0.8076923076923077,0.68,0.8076923076923077,75.75359313425164
"For the `ballot_status` field, ensure values match one of the following: ['cast', 'pending', 'invalid']. Validate that all entries are non-null.","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['cast', 'pending', 'invalid']),expect_column_values_to_not_be_null(column=""ballot_status"")","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['cast', 'pending', 'invalid']),expect_column_values_to_not_be_null(column=""ballot_status"")",1.0,1.0,1.0,100.00000000000004
Ensure the `id_number` column across both the `clients` and `suppliers` tables contains no duplicates.,"expect_compound_columns_to_be_unique(column_list=[""clients.id_number"", ""suppliers.id_number""])","expect_column_values_to_be_unique(column=""id_number""),expect_column_values_to_be_unique(column=""id_number"", table=""suppliers"")  # Note: This expectation is for the `suppliers` table only.",0.5116279069767441,0.24390243902439027,0.46511627906976755,23.830522616700417
For the `timestamp` field: Validate that all entries match the ISO 8601 format 'YYYY-MM-DDTHH:MM:SSZ' and are in the past.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"") ","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ""),expect_column_values_to_be_increasing(column=""timestamp"")  # Assuming that the timestamp is in ascending order.",0.8135593220338984,0.7719298245614036,0.8135593220338984,81.69747705716475
Verify that the `claim_date` field matches the strftime format '%Y-%m-%d' and is correctly parsed without null values.,"expect_column_to_exist(column=""claim_date""),expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""claim_date"")","expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""claim_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
For field 'order_quantity': Ensure the field matches the type 'integer'. Ensure there are no negative values present.,"expect_column_values_to_be_of_type(column=""order_quantity"", type_=""int""),expect_column_values_to_be_between(column=""order_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""order_quantity"", type_=""int""),expect_column_values_to_be_between(column=""order_quantity"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
For the `product_id` column: Ensure that all entries are unique and conform to the `UUID` format.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[{(]?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}[)}]?$"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[\da-fA-F]{32}$"")  # Regular expression to match UUID format.",0.5641025641025641,0.5263157894736842,0.5641025641025641,36.764197653624265
Verify that the `bedrooms` and `bathrooms` columns have values such that `bathrooms` is not greater than `bedrooms`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""bathrooms"", column_B=""bedrooms"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")",1.0,0.8000000000000002,0.875,94.53198735096927
"For field 'likes_count': Ensure values are within the range of 0 to 1,000,000. Ensure this field matches the type 'integer'.","expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=""likes_count"", type_=""int"")","expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=""likes_count"", type_=""int"")  # Note: This is a placeholder for the actual type of the column.  # Please replace this with the actual type of the column.",0.7105263157894737,0.7027027027027027,0.7105263157894737,69.13669280533436
Ensure the `transaction_id` column in both `payments` and `invoices` tables matches and that both have the same row count.,"expect_column_pair_values_to_be_equal(column_A=""payments.transaction_id"", column_B=""invoices.transaction_id""),expect_table_row_count_to_equal_other_table(table_A=""payments"", table_B=""invoices"")","expect_column_values_to_be_in_set(column=""transaction_id"", value_set=payments_table_transaction_ids),expect_table_row_count_to_equal(other_table=""invoices"", value=payments_table_row_count)",0.7213114754098361,0.4067796610169491,0.6229508196721313,44.627797358654625
Verify that the `transaction_id` column contains unique values that match a defined UUID format.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89ab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"")  # Replace regex pattern with actual UUID format.",0.8775510204081634,0.7708333333333335,0.8775510204081634,79.94940366628369
For field 'last_modified': Ensure all datetime values are accurate and comply with the format '%Y-%m-%d %H:%M:%S'. Ensure this field is required.,"expect_column_to_exist(column=""last_modified""),expect_column_values_to_match_strftime_format(column=""last_modified"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""last_modified"")","expect_column_values_to_be_dateutil_parseable(column=""last_modified""),expect_column_values_to_not_be_null(column=""last_modified""),expect_column_values_to_match_strftime_format(column=""last_modified"", strftime_format=""%Y-%m-%d %H:%M:%S"")  # Note: strftime_format is optional, but recommended for clarity.",0.8292682926829269,0.75,0.5853658536585366,76.77850714754906
Verify that the `content_rating` column matches the regular expression pattern '^(G|PG|PG-13|R|NC-17)$'.,"expect_column_values_to_match_regex(column=""content_rating"", regex=r""^(G|PG|PG-13|R|NC-17)$"")","expect_column_values_to_match_regex(column=""content_rating"", regex=r""^(G|PG|PG-13|R|NC-17)$"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `delivery_status` column contains only valid values from the set ['Pending', 'In Transit', 'Delivered', 'Returned'].","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'In Transit', 'Delivered', 'Returned'])","expect_column_values_to_be_in_set(column=""delivery_status"", value_set=['Pending', 'In Transit', 'Delivered', 'Returned'])",1.0,1.0,1.0,100.00000000000004
"For field 'token_amount': Ensure the field matches the type 'decimal'. Validate that values are non-negative and do not exceed 1,000,000. Ensure this field exists.","expect_column_to_exist(column=""token_amount""),expect_column_values_to_be_of_type(column=""token_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""token_amount"", min_value=0, max_value=1000000)","expect_column_to_exist(column=""token_amount""),expect_column_values_to_be_of_type(column=""token_amount"", type_=""decimal""),expect_column_values_to_be_between(column=""token_amount"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
For the `contact_number` field: Ensure all values match the pattern of a 10-digit phone number.,"expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\d{10}$"")","expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\d{10}$"")",1.0,1.0,1.0,100.00000000000004
For the `username` field: Ensure this field contains unique values and does not allow null entries. Validate that it matches the type 'text'.,"expect_column_values_to_be_unique(column=""username""),expect_column_values_to_not_be_null(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text"")","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_not_be_null(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field `appointment_date`: Ensure the date format adheres to 'YYYY-MM-DD'. Ensure there are no missing values in this column.,"expect_column_to_exist(column=""appointment_date""),expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""appointment_date"")","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""appointment_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
For field 'phone_number': Ensure the field matches the format 'XXX-XXX-XXXX'. Ensure values in (phone_number) are unique. Ensure this field exists.,"expect_column_to_exist(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\d{3}-\d{3}-\d{4}$""),expect_column_values_to_be_unique(column=""phone_number"")","expect_column_to_exist(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\d{3}-\d{3}-\d{4}$""),expect_column_values_to_be_unique(column=""phone_number"")  # Note: This expectation may not be applicable depending on the requirements.  # Please refer to the actual requirements for more information.",0.7674418604651162,0.761904761904762,0.7674418604651162,76.5228371122388
Verify that the `ip_address` column adheres to the correct IP address format and contains no duplicates.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_be_unique(column=""ip_address"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_be_unique(column=""ip_address"")  # Note: This assumes that the column values are unique. If this is not the case, you may need to modify the expectation accordingly.",0.7160493827160493,0.7088607594936709,0.7160493827160493,72.13518853450314
Ensure the `wallet_address` column contains valid addresses matching the regex pattern `^0x[a-fA-F0-9]{40}$` and that there are no duplicates.,"expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$""),expect_column_values_to_be_unique(column=""wallet_address"")","expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$""),expect_column_values_to_be_unique(column=""wallet_address"")  # Note: This assumes that the column is unique, which may not always be the case.",0.7761194029850745,0.7692307692307693,0.7761194029850745,74.8279877183659
"For JSON object 'data_sources': Confirm the presence of 'source_name' and 'source_url', and validate their formatting against the required schema.","expect_column_values_to_match_json_schema(column=""data_sources"", schema={""type"": ""object"", ""properties"": {""source_name"": {""type"": ""string""}, ""source_url"": {""type"": ""string""}}})","expect_column_values_to_exist(column=""source_name""),expect_column_values_to_exist(column=""source_url""),expect_column_values_to_match_regex(column=""source_name"", regex=r""^[a-zA-Z0-9_-]+$""),expect_column_values_to_match_regex(column=""source_url"", regex=r""^https?://"")  # Regular expression to validate URL format.",0.30985915492957744,0.17391304347826086,0.2816901408450704,17.750980204327764
"Ensure the `precipitation` column contains only values from the set `[0, 1, 2, 3, 4, 5]` representing millimeters of rain.","expect_column_values_to_be_in_set(column=""precipitation"", value_set=[0, 1, 2, 3, 4, 5])","expect_column_values_to_be_in_set(column=""precipitation"", value_set=[0, 1, 2, 3, 4, 5])",1.0,1.0,1.0,100.00000000000004
Ensure the `last_interaction_date` column contains dates that are not older than `2022-01-01`.,"expect_column_values_to_be_between(column=""last_interaction_date"", min_value=""2022-01-01"", max_value=None)","expect_column_values_to_be_between(column=""last_interaction_date"", min_value=""2022-01-01"")",0.9090909090909091,0.9032258064516129,0.9090909090909091,81.84866986519522
"For the `citizen_id` column, ensure that all values are unique and consist of exactly `10` digits. Ensure this field exists.","expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_value_lengths_to_equal(column=""citizen_id"", length=10),expect_column_values_to_match_regex(column=""citizen_id"", regex=r""^\d{10}$"")","expect_column_to_exist(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_value_lengths_to_equal(column=""citizen_id"", value=10)",0.8059701492537313,0.7384615384615384,0.8059701492537313,55.368423905912586
For field `order_date`: Ensure this field is of type 'date'. Ensure the field is required (not null).,"expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_not_be_null(column=""order_date"")","expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_not_be_null(column=""order_date"")",1.0,1.0,1.0,100.00000000000004
For field 'account_balance': Ensure the expect column value lengths to be between;,"expect_column_value_lengths_to_be_between(column=""account_balance"", min_value=1, max_value=15)","expect_column_value_lengths_to_be_between(column=""account_balance"", min_value=0, max_value=1000000)",0.875,0.8000000000000002,0.875,86.61374260444664
For the 'employees' table: Ensure the row count equals the 'departments' table row count. Ensure this field exists.,"expect_table_row_count_to_equal_other_table(table_name=""employees"", other_table_name=""departments""),expect_table_columns_to_match_set(column_set=[""employees""], exact_match=False)","expect_table_row_count_to_equal_other_table(table=""employees"", other_table=""departments"")  # This will check if the row count of the ""employees"" table equals the row count of the ""departments"" table.  # Note: This will not check if the field exists, but it can be added as a separate expectation.",0.41558441558441556,0.26666666666666666,0.36363636363636365,35.78961373875673
"For the `status` column in the `transactions` table: Ensure values are restricted to ['Pending', 'Completed', 'Failed'] and are unique.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Pending"", ""Completed"", ""Failed""]),expect_column_values_to_be_unique(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Completed', 'Failed']),expect_column_values_to_be_unique(column=""status"")  # Note: This assumes that the column values are unique. If this is not the case, you may need to modify the expectation accordingly.",0.6567164179104478,0.6461538461538462,0.6567164179104478,56.00725606719364
For field `location`: Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure each `location` value is unique.,"expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_be_unique(column=""location"")","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_of_type(column=""location"", type_=""text""),expect_column_values_to_be_unique(column=""location"")  # Note: This expectation may not be applicable depending on the requirements.",0.835820895522388,0.8307692307692308,0.835820895522388,82.38608057048786
For the `patient_id` field: Ensure it contains unique values. No duplicates or null entries should be allowed.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
Confirm the number of rows in the `billing` table is equal to the number of rows in the `usage` table.,"expect_table_row_count_to_equal_other_table(table_name=""billing"", other_table_name=""usage"")","expect_table_row_count_to_equal_other_table(table=""billing"", other_table=""usage"")",0.9285714285714286,0.7692307692307692,0.9285714285714286,77.68062226971533
For the `impact_score` field: Ensure the field matches the type 'integer'. Ensure all values are within the range of 1 to 10 and non-negative.,"expect_column_values_to_be_of_type(column=""impact_score"", type_=""int""),expect_column_values_to_be_between(column=""impact_score"", min_value=1, max_value=10)","expect_column_values_to_be_of_type(column=""impact_score"", type_=""int""),expect_column_values_to_be_between(column=""impact_score"", min_value=1, max_value=10),expect_column_values_to_be_between(column=""impact_score"", min_value=0, max_value=None)  # Note: This is a valid expectation, but it may not be the most appropriate expectation depending on the specific requirements.  -->",0.6067415730337078,0.5977011494252873,0.6067415730337078,50.621184178580094
"For the `jurisdiction` field, confirm it matches one of the values in the list `['Federal', 'State', 'Local']`.","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local'])","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['Federal', 'State', 'Local'])",1.0,1.0,1.0,100.00000000000004
"Check that the `created_at` and `updated_at` columns across all domains maintain valid timestamps, with `updated_at` being greater than `created_at`.","expect_column_values_to_be_dateutil_parseable(column=""created_at""),expect_column_values_to_be_dateutil_parseable(column=""updated_at""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""updated_at"", column_B=""created_at"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""updated_at"", column_B=""created_at"")",0.6428571428571429,0.6296296296296297,0.6428571428571429,31.66367693790534
For field 'penalty_kicks': Ensure the field matches the type 'integer'. Ensure values in 'penalty_kicks' are non-negative. Ensure this field exists.,"expect_column_to_exist(column=""penalty_kicks""),expect_column_values_to_be_of_type(column=""penalty_kicks"", type_=""int""),expect_column_values_to_be_between(column=""penalty_kicks"", min_value=0)","expect_column_to_exist(column=""penalty_kicks""),expect_column_values_to_be_of_type(column=""penalty_kicks"", type_=""int""),expect_column_values_to_be_between(column=""penalty_kicks"", min_value=0, max_value=None)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.27998962321676
"Check that the `release_date` and `update_date` columns maintain a logical relationship, where `release_date` is always earlier than `update_date`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""release_date"", column_B=""update_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""release_date"", column_B=""update_date"")",1.0,1.0,1.0,100.00000000000004
"For the `timestamp` column, confirm that all entries are in the ISO 8601 format and that they are sequentially increasing.","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_increasing(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_increasing(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
Validate that the `discount` column values are less than the `original_price` column values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""original_price"", column_B=""discount"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""discount"", column_B=""original_price"")",1.0,0.8125,0.8235294117647058,94.85438370694514
For the `interest_rate` field: Ensure this field is required (not null). Ensure it contains values between `0` and `1`.,"expect_column_values_to_not_be_null(column=""interest_rate""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=1)","expect_column_values_to_not_be_null(column=""interest_rate""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=1)",1.0,1.0,1.0,100.00000000000004
For field 'email_subject': Ensure the field is required (not null) and does not exceed 255 characters in length.,"expect_column_values_to_not_be_null(column=""email_subject""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=1, max_value=255)","expect_column_values_to_not_be_null(column=""email_subject""),expect_column_value_lengths_to_be_between(column=""email_subject"", min_value=0, max_value=255)",0.9615384615384616,0.92,0.9615384615384616,95.42978616972013
For field 'humidity': Ensure the field matches the type 'integer'. Validate that values in (humidity) are within the range of 0 to 100 percent.,"expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `order_id` column exists and contains unique identifiers for each order.,"expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id"")","expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id"")  # Replace with actual column names and expectations as needed.",0.7804878048780487,0.7692307692307693,0.7804878048780487,76.32827303495586
Confirm that the standard deviation of the `room_price` column falls between $50 and $200 to maintain pricing consistency.,"expect_column_stdev_to_be_between(column=""room_price"", min_value=50, max_value=200)","expect_column_stdev_to_be_between(column=""room_price"", min_value=50, max_value=200)",1.0,1.0,1.0,100.00000000000004
"For field `transaction_type`: Ensure only distinct values exist from the defined set `['purchase', 'refund', 'transfer']`. Ensure this field exists and does not contain null values.","expect_column_to_exist(column=""transaction_type""),expect_column_values_to_not_be_null(column=""transaction_type""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['purchase', 'refund', 'transfer'])","expect_column_to_exist(column=""transaction_type""),expect_column_values_to_not_be_null(column=""transaction_type""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['purchase','refund', 'transfer'])",1.0,1.0,1.0,100.00000000000004
Validate that the `customer_email` column matches the regex pattern for valid emails and does not contain any duplicates.,"expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")  # Note: This assumes that the column is unique. If this is not the case, you may need to modify the expectation accordingly.",0.676470588235294,0.6666666666666666,0.676470588235294,72.01623884815339
"Check that the `weather_condition` field contains distinct values from the set `['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']`.","expect_column_distinct_values_to_equal_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'])",0.8823529411764706,0.75,0.8823529411764706,85.84922885264845
"For the `result_score` field: Validate that all scores are between 0 and 100, and no missing values are allowed.","expect_column_values_to_be_between(column=""result_score"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""result_score"")","expect_column_values_to_be_between(column=""result_score"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""result_score"")",1.0,1.0,1.0,100.00000000000004
Ensure the `account_balance` column's minimum value is not less than $0 and the mean balance is above $1000.,"expect_column_min_to_be_between(column=""account_balance"", min_value=0),expect_column_mean_to_be_between(column=""account_balance"", min_value=1000)","expect_column_min_to_be_between(column=""account_balance"", min_value=0),expect_column_mean_to_be_between(column=""account_balance"", min_value=1000)",1.0,1.0,1.0,100.00000000000004
Ensure the `monthly_fee` column values are within the range of 10 to 1000.,"expect_column_values_to_be_between(column=""monthly_fee"", min_value=10, max_value=1000)","expect_column_values_to_be_between(column=""monthly_fee"", min_value=10, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"For field 'status_code': Validate that the field is an integer type. Ensure values in (status_code) must exist in the predefined set (['200', '400', '500']). Ensure this field exists.","expect_column_to_exist(column=""status_code""),expect_column_values_to_be_of_type(column=""status_code"", type_=""int""),expect_column_values_to_be_in_set(column=""status_code"", value_set=['200', '400', '500'])","expect_column_to_exist(column=""status_code""),expect_column_values_to_be_of_type(column=""status_code"", type_=""int""),expect_column_values_to_be_in_set(column=""status_code"", value_set=['200', '400', '500'])  # Note: This is a sample implementation. Please refer to your specific requirements.",0.85,0.846153846153846,0.85,83.2435453193687
"For the file 'inventory.json': Ensure the file contains valid JSON formatting and includes the required headers: ['product_id', 'product_name', 'quantity'].","expect_file_to_exist(filepath=""inventory.json""),expect_file_to_be_valid_json(filepath=""inventory.json""),expect_file_to_have_valid_table_header(filepath=""inventory.json"", expected_header_list=['product_id', 'product_name', 'quantity'])","expect_file_to_exist(file_path=""inventory.json""),expect_file_to_match_json_schema(file_path=""inventory.json"", schema={""type"": ""object"", ""properties"": {""product_id"": {""type"": ""string""}, ""product_name"": {""type"": ""string""}, ""quantity"": {""type"": ""number""}}}, ""required"": [""product_id"", ""product_name"", ""quantity""]})",0.4931506849315069,0.3380281690140845,0.4931506849315069,22.28201301570461
Confirm that the `travel_dates` column contains dates that are in chronological order.,"expect_column_values_to_be_increasing(column=""travel_dates"")","expect_column_values_to_be_increasing(column=""travel_dates"")",1.0,1.0,1.0,100.00000000000004
For the `title` field: Validate that string lengths are between 1 and 100 characters and do not contain any special characters except for hyphens and apostrophes.,"expect_column_value_lengths_to_be_between(column=""title"", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=""title"", regex=r""[^a-zA-Z0-9\s'-]"")","expect_column_value_lengths_to_be_between(column=""title"", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=""title"", regex=r""[^a-zA-Z0-9\s\-']"")  # Note: This regex matches alphanumeric characters, spaces, hyphens, and apostrophes.",0.8611111111111112,0.8571428571428571,0.8611111111111112,75.40830399826872
"For field 'case_type': Ensure the field is required (not null). Ensure values in 'case_type' must exist in the set ('civil', 'criminal', 'family', 'business').","expect_column_values_to_not_be_null(column=""case_type""),expect_column_values_to_be_in_set(column=""case_type"", value_set=['civil', 'criminal', 'family', 'business'])","expect_column_values_to_not_be_null(column=""case_type""),expect_column_values_to_be_in_set(column=""case_type"", value_set=['civil', 'criminal', 'family', 'business'])",1.0,1.0,1.0,100.00000000000004
"For field 'medications': Ensure this field contains unique values that match the set ['Aspirin', 'Metformin', 'Lisinopril']. Ensure the field is not null.","expect_column_values_to_be_unique(column=""medications""),expect_column_values_to_not_be_null(column=""medications""),expect_column_values_to_be_in_set(column=""medications"", value_set=['Aspirin', 'Metformin', 'Lisinopril'])","expect_column_values_to_be_unique(column=""medications""),expect_column_values_to_not_be_null(column=""medications"")",0.7083333333333333,0.6956521739130436,0.7083333333333333,42.90620009431088
"For field 'case_number': Ensure the field matches the type 'text'. Validate that all values conform to the pattern '^[A-Z]{2}-[0-9]{4}-[0-9]{3}$', ensuring consistency in case identification.","expect_column_values_to_be_of_type(column=""case_number"", type_=""text""),expect_column_values_to_match_regex(column=""case_number"", regex=r""^[A-Z]{2}-[0-9]{4}-[0-9]{3}$"")","expect_column_values_to_be_of_type(column=""case_number"", type_=""text""),expect_column_values_to_match_regex(column=""case_number"", regex=r""^[A-Z]{2}-[0-9]{4}-[0-9]{3}$"")  # Regular expression to match the expected pattern.",0.9014084507042254,0.898550724637681,0.9014084507042254,89.94247668045125
For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_be_unique(column=""patient_id"")","expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int""),expect_column_values_to_be_unique(column=""patient_id"")  # Note: This expectation may not be applicable depending on the use case.  # For example, if the use case requires the patient_id to be unique across all records, then this expectation may be necessary.  # However, if the use case only requires the patient_id to be unique within each record, then this expectation may not be necessary.  # Therefore, this expectation should be considered based on the specific requirements of the use case.  # Note: This expectation may also need to be adjusted based on the actual implementation details of the system.  # For example, if the system uses a database table to store the patient_id values, then the expectation may need to be adjusted to account for any constraints or indexes that may be present on the table.  # Therefore, this expectation should be considered based on the specific implementation details of the system.  # Note: This expectation may also need to be adjusted based on the actual implementation details of the system.  # For example, if the system uses a database table to store the patient_id values, then the",0.2594142259414226,0.25316455696202533,0.2594142259414226,25.306838022463396
For field 'data_usage': Ensure the field matches the type 'integer'. Validate that values are within the range '0' to '2000' megabytes.,"expect_column_values_to_be_of_type(column=""data_usage"", type_=""int""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=2000)","expect_column_values_to_be_of_type(column=""data_usage"", type_=""int""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=2000)",1.0,1.0,1.0,100.00000000000004
"For the `user_rating`, ensure that values fall within the range of `1` to `5`.","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
Ensure the `student_id` column contains only distinct values and is of type 'text'. This field must not be null.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""text""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id""),expect_column_values_to_be_of_type(column=""student_id"", type_=""text"")",1.0,0.9666666666666667,0.8064516129032258,99.64092777538484
"For field 'device_status': Ensure the field matches the type 'text'. Validate that values must match one of the predefined statuses (Online, Offline, Maintenance). Ensure this field exists.","expect_column_to_exist(column=""device_status""),expect_column_values_to_be_of_type(column=""device_status"", type_=""text""),expect_column_values_to_be_in_set(column=""device_status"", value_set=[""Online"", ""Offline"", ""Maintenance""])","expect_column_to_exist(column=""device_status""),expect_column_values_to_be_of_type(column=""device_status"", type_=""text""),expect_column_values_to_be_in_set(column=""device_status"", value_set=[""Online"", ""Offline"", ""Maintenance""])",1.0,1.0,1.0,100.00000000000004
"Verify that the `status` column only contains values from the set `['Open', 'Closed', 'Pending']`. Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
For field 'video_title': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'video_title' are unique.,"expect_column_values_to_not_be_null(column=""video_title""),expect_column_values_to_be_of_type(column=""video_title"", type_=""text""),expect_column_values_to_be_unique(column=""video_title"")","expect_column_values_to_not_be_null(column=""video_title""),expect_column_values_to_be_of_type(column=""video_title"", type_=""text""),expect_column_values_to_be_unique(column=""video_title"")  # Note: This expectation may not be applicable depending on the actual requirement.",0.8378378378378378,0.8333333333333333,0.8378378378378378,82.65575760496411
For the `customer_feedback` field: Ensure there are no missing values. Ensure entries are of type 'text' and do not exceed 300 characters.,"expect_column_values_to_not_be_null(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=300)","expect_column_values_to_not_be_null(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=300)",1.0,1.0,1.0,100.00000000000004
Ensure the `start_date` field is of type 'date'. Ensure `start_date` is not null and is less than `end_date`. Ensure both fields exist.,"expect_column_to_exist(column=""start_date""),expect_column_to_exist(column=""end_date""),expect_column_values_to_be_of_type(column=""start_date"", type_=""date""),expect_column_values_to_not_be_null(column=""start_date""),expect_column_pair_values_A_to_be_less_than_B(column_A=""start_date"", column_B=""end_date"")","expect_column_to_exist(column=""start_date""),expect_column_values_to_not_be_null(column=""start_date""),expect_column_values_to_be_of_type(column=""start_date"", type_=""date""),expect_column_pair_values_to_be_increasing(column_A=""start_date"", column_B=""end_date"")  # Note: This assumes the ""end_date"" column exists.",0.8867924528301887,0.7884615384615384,0.7169811320754716,81.84594099379768
Ensure the `service_start_date` column values follow the format 'MM/DD/YYYY' and are all valid dates.,"expect_column_values_to_match_strftime_format(column=""service_start_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""service_start_date"")","expect_column_values_to_match_strftime_format(column=""service_start_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""service_start_date"")  # Note: This is a new expectation that may not be available today. Please check if it's available before using it.",0.72,0.7123287671232876,0.72,72.24880804875296
"Validate that the `user_rating` column has values between 0 and 10, ensuring the mean rating is above 5.","expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10),expect_column_mean_to_be_between(column=""user_rating"", min_value=5, max_value=10)","expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10),expect_column_mean_to_be_between(column=""user_rating"", min_value=5, max_value=None)",0.9666666666666667,0.9655172413793104,0.9666666666666667,97.23145726436792
Check that the `signup_date` field contains valid datetime entries formatted as `YYYY-MM-DDTHH:MM:SS`.,"expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%dT%H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%dT%H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
"For the `item_id` across ERP and CRM tables, ensure that the values are unique when combined with `customer_id`.","expect_compound_columns_to_be_unique(column_names=[""item_id"", ""customer_id""])","expect_compound_columns_to_be_unique(column_A=""item_id"", column_B=""customer_id"")",0.8461538461538461,0.6666666666666667,0.8461538461538461,67.63278572760893
Check that the `claim_amount` column has no missing values and that its distribution fits a log-normal distribution with a p-value > 0.05.,"expect_column_values_to_not_be_null(column=""claim_amount""),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""claim_amount"", threshold=0.05)","expect_column_values_to_not_be_null(column=""claim_amount""),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""claim_amount"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'battery_level': Ensure this field exists. Ensure the field matches the type 'integer'. Ensure values in 'battery_level' are between 0 and 100.,"expect_column_to_exist(column=""battery_level""),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)","expect_column_to_exist(column=""battery_level""),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure that the file 'supplier_list.xml' adheres to the specified schema and contains no duplicate supplier entries.,"expect_file_to_exist(file_path=""supplier_list.xml""),expect_file_to_have_valid_table_header(file_path=""supplier_list.xml""),expect_column_values_to_be_unique(column=""supplier_name"")  # Assuming 'supplier_name' is the column with supplier entries.","expect_file_to_exist(file_path=""supplier_list.xml""),expect_file_to_match_schema(file_path=""supplier_list.xml"", schema=""supplier_list_schema.xml""),expect_file_to_have_unique_values(column=""supplier_id"", file_path=""supplier_list.xml"")  # This expectation will fail if there are duplicate supplier entries.",0.6206896551724138,0.44705882352941173,0.5747126436781609,53.24515409263356
Ensure the `order_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id"")","expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_not_be_null(column=""order_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `voter_status` column contains only values from the set `['active', 'inactive', 'pending']` and does not include any duplicates.","expect_column_values_to_be_in_set(column=""voter_status"", value_set=['active', 'inactive', 'pending']),expect_column_values_to_be_unique(column=""voter_status"")","expect_column_values_to_be_in_set(column=""voter_status"", value_set=['active', 'inactive', 'pending']),expect_column_values_to_be_unique(column=""voter_status"")",1.0,1.0,1.0,100.00000000000004
"Check that the `hashtag` column contains distinct values and that each entry is of type 'string', with no null values allowed.","expect_column_values_to_be_unique(column=""hashtag""),expect_column_values_to_be_of_type(column=""hashtag"", type_=""string""),expect_column_values_to_not_be_null(column=""hashtag"")","expect_column_values_to_be_unique(column=""hashtag""),expect_column_values_to_be_of_type(column=""hashtag"", type_=""string""),expect_column_values_to_not_be_null(column=""hashtag"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `attack_vector` column in the Cybersecurity dataset only contains unique values from the predefined list `['Phishing', 'Malware', 'DDoS']`.","expect_column_values_to_be_in_set(column=""attack_vector"", value_set=['Phishing', 'Malware', 'DDoS'])","expect_column_values_to_be_in_set(column=""attack_vector"", value_set=['Phishing', 'Malware', 'DDoS'])",1.0,1.0,1.0,100.00000000000004
"For the `zip_code` field, validate that it consists of exactly 5 digits and no null values are present.","expect_column_values_to_not_be_null(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$"")","expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$""),expect_column_values_to_not_be_null(column=""zip_code"")",1.0,0.9545454545454546,0.6086956521739131,99.52492718345985
Check that the `peak_demand` values follow a normal distribution with a p-value greater than 0.05 in the KS test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""peak_demand"", threshold=0.05)","expect_column_parameterized_test_p_value_to_be_greater_than(column=""peak_demand"", threshold=0.05)",0.9411764705882353,0.8749999999999999,0.9411764705882353,85.95552893261161
For the `likes` and `shares` columns: Ensure that the sum of these two columns matches the expected total engagement for each post. Validate that both fields exist.,"expect_column_to_exist(column=""likes""),expect_column_to_exist(column=""shares""),expect_multicolumn_sum_to_equal(column_list=[""likes"", ""shares""], sum=expected_total_engagement)","expect_column_to_exist(column=""likes""),expect_column_to_exist(column=""shares"")  # Note: This is just a sample expectation, you may need to customize it based on your specific requirements.",0.509090909090909,0.4150943396226415,0.509090909090909,45.50388488304821
Validate that the `temperature` column's values are within the range of -40 to 125 degrees Celsius.,"expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125)","expect_column_values_to_be_between(column=""temperature"", min_value=-40, max_value=125)",1.0,1.0,1.0,100.00000000000004
"In the `ballot_status` column: Ensure values fall within the set `['received', 'counted', 'rejected']` and that no entries are null.","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['received', 'counted', 'rejected']),expect_column_values_to_not_be_null(column=""ballot_status"")","expect_column_values_to_be_in_set(column=""ballot_status"", value_set=['received', 'counted','rejected']),expect_column_values_to_not_be_null(column=""ballot_status"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `status` column contains only values from the set `['sent', 'delivered', 'failed']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['sent', 'delivered', 'failed'])","expect_column_values_to_be_in_set(column=""status"", value_set=['sent', 'delivered', 'failed'])",1.0,1.0,1.0,100.00000000000004
Ensure the `response_time` column values are within the range of 0 to 120 minutes and are arranged in increasing order.,"expect_column_values_to_be_between(column=""response_time"", min_value=0, max_value=120),expect_column_values_to_be_increasing(column=""response_time"")","expect_column_values_to_be_between(column=""response_time"", min_value=0, max_value=120),expect_column_values_to_be_increasing(column=""response_time"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'transaction_id' are unique.,"expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text""),expect_column_values_to_be_unique(column=""transaction_id"")","expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text""),expect_column_values_to_be_unique(column=""transaction_id"")  # Assuming transaction_id is a unique identifier.",0.898550724637681,0.8955223880597014,0.898550724637681,87.7275899636538
"Confirm that all entries in the `game_data` field are valid JSON objects according to the specified schema, ensuring proper structure.","expect_column_values_to_match_json_schema(column=""game_data"")","expect_column_values_to_be_json_parseable(column=""game_data""),expect_column_values_to_match_json_schema(column=""game_data"", schema={""type"": ""object"", ""properties"": {""game"": {""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""description"": {""type"": ""string""}, ""developer"": {""type"": ""string""}, ""release_date"": {""type"": ""string""}, ""genre"": {""type"": ""string""}, ""platform"": {""type"": ""string""}, ""rating"": {""type"": ""number""}, ""review_count"": {""type"": ""number""}, ""developer_rating"": {""type"": ""number""}, ""review_rating"": {""type"": ""number""}, ""developer_name"": {""type"": ""string""}, ""developer_description"": {""type"": ""string""}, ""developer_website"": {""type"": ""string""}, ""developer_email"": {""type"": ""string""}, ""developer_phone"": {""type"": ""string""}, ""developer_address"": {""type"": ""string""}, ""developer_logo"": {""type"": ""string""}, ""developer_logo_url"": {""type"": ""string""}, ""developer_logo_size"": {""type"": ""number""}, ""developer_logo_width"": {""type"": ""number""}, ""developer_logo_height"": {""type"": ""number""}, """,0.16666666666666669,0.15254237288135594,0.16666666666666669,4.986488736417358
For field 'meter_id': Ensure the field contains unique values. Ensure this field matches the type 'integer'. Ensure this field is required (not null).,"expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""meter_id"")","expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""int""),expect_column_values_to_not_be_null(column=""meter_id"")  # Note: This is a placeholder for the actual validation logic. Please replace with the actual validation logic.",0.759493670886076,0.7272727272727273,0.759493670886076,74.56084834332086
Ensure the `lab_results` column consists of valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""lab_results"", schema=""specified_schema"")","expect_column_values_to_be_json_parseable(column=""lab_results""),expect_column_values_to_match_json_schema(column=""lab_results"", schema={""type"": ""object"", ""properties"": {""result"": {""type"": ""string""}, ""interpretation"": {""type"": ""string""}, ""reference_range"": {""type"": ""array""}, ""reference_range_unit"": {""type"": ""string""}, ""reference_range_value"": {""type"": ""number""}}})}",0.38596491228070173,0.3636363636363636,0.38596491228070173,16.73530020185427
Ensure the `listing_date` column contains dates in the format 'MM/DD/YYYY' and all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_increasing(column=""listing_date"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""listing_date""),expect_column_values_to_be_between(column=""listing_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.638888888888889,0.6,0.638888888888889,50.19216437373887
"Verify that the `transaction_amount` values are within the range of 0.01 to 1000.00 BTC, and no values are negative.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=1000.00),expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=1000.00),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.00, max_value=None)  # This is to check for negative values as well.",0.7605633802816901,0.6956521739130435,0.7605633802816901,67.2716312917764
Validate that the `alert_type` column contains no more than 10 unique values and aligns with the expected categories.,"expect_column_unique_value_count_to_be_between(column=""alert_type"", min_value=0, max_value=10),expect_column_values_to_be_in_set(column=""alert_type"", value_set=[""category1"", ""category2"", ""category3"", ""category4"", ""category5"", ""category6"", ""category7"", ""category8"", ""category9"", ""category10""])","expect_column_values_to_be_in_set(column=""alert_type"", value_set=[""alert_type_1"", ""alert_type_2"", ""alert_type_3"", ""alert_type_4"", ""alert_type_5"", ""alert_type_6"", ""alert_type_7"", ""alert_type_8"", ""alert_type_9"", ""alert_type_10""])",0.3703703703703704,0.3037974683544304,0.29629629629629634,40.63690746683836
Verify that the `battery_level` field contains only values within the range of 0 to 100 percent. This field must have no missing values.,"expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""battery_level"")","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""battery_level"")",1.0,1.0,1.0,100.00000000000004
"For the field 'genre': Ensure this field exists and matches the type 'text'. Validate that values must be one of ['Action', 'Adventure', 'Puzzle', 'Strategy'].","expect_column_to_exist(column=""genre""),expect_column_values_to_be_of_type(column=""genre"", type_=""text""),expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'Puzzle', 'Strategy'])","expect_column_to_exist(column=""genre""),expect_column_values_to_be_of_type(column=""genre"", type_=""text""),expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'Puzzle', 'Strategy'])",1.0,1.0,1.0,100.00000000000004
For field 'candidate_id': Ensure the field matches the type 'integer'. Ensure values must exist in the list of valid candidates.,"expect_column_values_to_be_of_type(column=""candidate_id"", type_=""int""),expect_column_values_to_be_in_set(column=""candidate_id"", value_set=valid_candidates_list)","expect_column_values_to_be_of_type(column=""candidate_id"", type_=""int""),expect_column_values_to_be_in_set(column=""candidate_id"", value_set=valid_candidates)",0.9811320754716981,0.9803921568627451,0.9811320754716981,95.46793332143143
Ensure the `patient_id` column is present and contains unique identifiers that match the format 'PXXXX' where X is a digit.,"expect_column_to_exist(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_match_regex(column=""patient_id"", regex=r""^P\d{4}$"")","expect_column_to_exist(column=""patient_id""),expect_column_values_to_match_regex(column=""patient_id"", regex=r""^P\d{4}$"")  # Replace \d{4} with the actual length of your desired identifier.",0.6774193548387096,0.6666666666666667,0.6774193548387096,70.13040085666582
In the `user_rating` column: Ensure values are between 0 and 10 and that no duplicates exist.,"expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10),expect_column_values_to_be_unique(column=""user_rating"")","expect_column_values_to_be_between(column=""user_rating"", min_value=0, max_value=10),expect_column_values_to_be_unique(column=""user_rating"")",1.0,1.0,1.0,100.00000000000004
"Ensure that the `tariff_plan` column only includes values from the set `['Standard', 'Discounted']`.","expect_column_values_to_be_in_set(column=""tariff_plan"", value_set=['Standard', 'Discounted'])","expect_column_values_to_be_in_set(column=""tariff_plan"", value_set=['Standard', 'Discounted'])",1.0,1.0,1.0,100.00000000000004
Verify that the `brand` field contains only distinct values and does not allow null entries.,"expect_column_values_to_be_unique(column=""brand""),expect_column_values_to_not_be_null(column=""brand"")","expect_column_values_to_be_unique(column=""brand""),expect_column_values_to_not_be_null(column=""brand"")",1.0,1.0,1.0,100.00000000000004
Ensure the file containing `hotel_reviews` has no more than 500 lines and that it includes valid table headers.,"expect_file_line_regex_match_count_to_be_between(file_path=""hotel_reviews"", min_value=0, max_value=500),expect_file_to_have_valid_table_header(file_path=""hotel_reviews"")","expect_file_line_count_to_be_between(file_path=""hotel_reviews"", min_value=0, max_value=500),expect_table_header_to_be_present(file_path=""hotel_reviews"")  # Note: This expectation may not be necessary depending on the specific requirements.",0.7246376811594204,0.5970149253731344,0.6956521739130435,68.93324898769397
For field 'email_address': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that the values conform to the email format.,"expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to validate email format.",0.9113924050632912,0.9090909090909091,0.9113924050632912,90.39260258394364
For field 'network_fee': Ensure this field exists. Validate that the average 'network_fee' across all transactions does not exceed a defined threshold.,"expect_column_to_exist(column=""network_fee""),expect_column_mean_to_be_between(column=""network_fee"", min_value=None, max_value=threshold)","expect_column_to_exist(column=""network_fee""),expect_column_mean_to_be_between(column=""network_fee"", min_value=0, max_value=threshold)",0.9545454545454546,0.9047619047619048,0.9545454545454546,94.64594399631754
For the `json_data` field: Ensure that the content is properly formatted JSON and contains no missing keys in the predefined schema.,"expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {}})  # Replace {} with your predefined schema.","expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {""key1"": {""type"": ""string""}, ""key2"": {""type"": ""number""}, ""key3"": {""type"": ""boolean""}}})  # Replace with actual column name and schema.",0.6101694915254238,0.49122807017543857,0.576271186440678,47.080449015462364
For the `alert_threshold`: Ensure values in this column are greater than the respective `sensor_reading` values. Ensure this field is required (not null).,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""alert_threshold"", column_B=""sensor_reading""),expect_column_values_to_not_be_null(column=""alert_threshold"")","expect_column_values_to_be_greater_than(column=""alert_threshold"", value=""sensor_reading""),expect_column_values_to_not_be_null(column=""alert_threshold"")",0.8627450980392156,0.6530612244897959,0.8627450980392156,71.37180748632385
For field 'rating': Ensure this field is required (not null). Ensure this field matches the type 'decimal'. Ensure values are between 0.0 and 10.0.,"expect_column_values_to_not_be_null(column=""rating""),expect_column_values_to_be_of_type(column=""rating"", type_=""decimal""),expect_column_values_to_be_between(column=""rating"", min_value=0.0, max_value=10.0)","expect_column_values_to_not_be_null(column=""rating""),expect_column_values_to_be_of_type(column=""rating"", type_=""decimal""),expect_column_values_to_be_between(column=""rating"", min_value=0.0, max_value=10.0)",1.0,1.0,1.0,100.00000000000004
"Ensure the `status` column contains values from the set `['open', 'closed', 'pending']` and has no missing values.","expect_column_values_to_be_in_set(column=""status"", value_set=['open', 'closed', 'pending']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['open', 'closed', 'pending']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,100.00000000000004
Ensure the `price` column values in the `products` table are within a specified range of $10 to $500.,"expect_column_values_to_be_between(column=""price"", min_value=10, max_value=500)","expect_column_values_to_be_between(column=""price"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
Check that the `wind_speed` column does not contain any null values and is within the range of `0` to `150` km/h.,"expect_column_values_to_not_be_null(column=""wind_speed""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_not_be_null(column=""wind_speed""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
For field 'plaintiff_name': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure the length of 'plaintiff_name' is between 5 and 50 characters.,"expect_column_values_to_not_be_null(column=""plaintiff_name""),expect_column_values_to_be_of_type(column=""plaintiff_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""plaintiff_name"", min_value=5, max_value=50)","expect_column_values_to_not_be_null(column=""plaintiff_name""),expect_column_values_to_be_of_type(column=""plaintiff_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""plaintiff_name"", min_value=5, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure the `property_id` column contains only unique alphanumeric strings of exactly 8 characters.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_value_lengths_to_equal(column=""property_id"", length=8),expect_column_values_to_match_regex(column=""property_id"", regex=r""^[a-zA-Z0-9]{8}$"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_value_lengths_to_equal(column=""property_id"", value=8)",0.7142857142857143,0.6296296296296297,0.7142857142857143,41.371768000723925
"Verify that the `transaction_description` field does not contain any SQL injection patterns such as '--', ';', or '/*'.","expect_column_values_to_not_match_regex(column=""transaction_description"", regex=r""(--|;|/\*)"")","expect_column_values_to_not_match_regex(column=""transaction_description"", regex=r""[-;/*]"")",1.0,1.0,1.0,72.79847744191295
"For the `application_date` column, verify all datetime entries match the format '%d-%m-%Y' and can be parsed correctly.","expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""application_date"")","expect_column_values_to_match_strftime_format(column=""application_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""application_date"")  # Note: This is a new expectation, which may not be available in your current version of pandas. Please refer to the latest documentation for the latest expectation.",0.6493506493506493,0.6399999999999999,0.6493506493506493,63.83440008175241
Ensure the `policy_number` column contains only distinct values and does not allow nulls.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number"")",1.0,1.0,1.0,100.00000000000004
"For the `balance` column: Ensure values fall within the range of `0.00` to `10,000,000.00` and are of type 'decimal'.","expect_column_values_to_be_between(column=""balance"", min_value=0.00, max_value=10000000.00),expect_column_values_to_be_of_type(column=""balance"", type_=""decimal"")","expect_column_values_to_be_between(column=""balance"", min_value=0.00, max_value=10000000.00),expect_column_values_to_be_of_type(column=""balance"", type_=""decimal"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `user_id` column values are consistent with the `email_id` for related communications, confirming uniqueness across both fields.","expect_column_pair_values_to_be_equal(column_A=""user_id"", column_B=""email_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_unique(column=""email_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_unique(column=""email_id"")  # Note: This assumes the two columns are related.",0.6440677966101696,0.5964912280701754,0.6101694915254238,49.29405040900147
Verify that the `view_count` column contains values that are greater than or equal to zero.,"expect_column_values_to_be_between(column=""view_count"", min_value=0)","expect_column_values_to_be_between(column=""view_count"", min_value=0)",1.0,1.0,1.0,100.00000000000004
For field 'sensor_data': Ensure the field matches the type 'numeric'. Ensure values in (sensor_data) are within the range of 0 to 100. Ensure this field exists.,"expect_column_to_exist(column=""sensor_data""),expect_column_values_to_be_of_type(column=""sensor_data"", type_=""numeric""),expect_column_values_to_be_between(column=""sensor_data"", min_value=0, max_value=100)","expect_column_to_exist(column=""sensor_data""),expect_column_values_to_be_of_type(column=""sensor_data"", type_=""numeric""),expect_column_values_to_be_between(column=""sensor_data"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure the `country` column contains only non-null values and values are specified within the set ['US', 'UK', 'CA'].","expect_column_values_to_not_be_null(column=""country""),expect_column_values_to_be_in_set(column=""country"", value_set=['US', 'UK', 'CA'])","expect_column_values_to_not_be_null(column=""country""),expect_column_values_to_be_in_set(column=""country"", value_set=['US', 'UK', 'CA'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `contact_email` column contains valid email formats and that no two entries are identical.,"expect_column_values_to_match_regex(column=""contact_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""contact_email"")","expect_column_values_to_match_regex(column=""contact_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""contact_email"")  # Note: This expectation may not be necessary depending on the requirements.  # Cutting Knowledge Date: December 2023
Today Date: 26 July 2024",0.5263157894736842,0.4864864864864865,0.5263157894736842,57.26953760354026
For field 'keywords': Ensure that values in (keywords) are comma-separated and do not contain special characters or exceed 150 characters in total length.,"expect_column_values_to_match_regex(column=""keywords"", regex=r""^[a-zA-Z0-9, ]*$""),expect_column_value_lengths_to_be_between(column=""keywords"", min_value=0, max_value=150)","expect_column_values_to_match_regex(column=""keywords"", regex=r""^[a-zA-Z0-9, ]+$""),expect_column_value_lengths_to_be_between(column=""keywords"", min_value=0, max_value=150)",1.0,1.0,1.0,96.07590505097875
Validate that the `supplier_id` column contains unique identifiers that exist in the `suppliers` table.,"expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_ids)","expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_supplier_ids)",0.9795918367346939,0.9361702127659574,0.9795918367346939,94.81208519756275
For field 'loyalty_points': Ensure this field matches the type 'integer' and contains values greater than or equal to 0.,"expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0)","expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0)",1.0,1.0,1.0,100.00000000000004
For the table 'orders': Validate that the combination of 'order_id' and 'customer_id' is unique across records.,"expect_compound_columns_to_be_unique(columns=[""order_id"", ""customer_id""])","expect_compound_columns_to_be_unique(column_A=""order_id"", column_B=""customer_id"")",0.88,0.6956521739130435,0.88,60.93671089617578
For field 'check_in_date': Ensure this field exists. Validate that all values conform to the format 'YYYY-MM-DD' and are in the future.,"expect_column_to_exist(column=""check_in_date""),expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""check_in_date"", value_set=[date for date in range(datetime.now().date(), datetime.max.date())])","expect_column_to_exist(column=""check_in_date""),expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""check_in_date""),expect_column_values_to_be_increasing(column=""check_in_date"")  # Assuming check_in_date is a timestamp column, this will ensure that the values are in ascending order.",0.6846846846846846,0.5688073394495413,0.6666666666666666,62.0983847866945
Ensure the `booking_date` is not greater than the `check_in_date` and both are valid `YYYY-MM-DD` formats.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""booking_date"", column_B=""check_in_date""),expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_dateutil_parseable(column=""booking_date""),expect_column_values_to_be_between(column=""booking_date"", min_value=""2023-01-01"", max_value=""2023-12-31""),expect_column_values_to_be_between(column=""check_in_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")  # Note: This assumes the check-in date is always greater than the booking date. If this is not the case, adjust the min_value accordingly.",0.43548387096774194,0.2786885245901639,0.3709677419354839,37.12883326276684
In the `release_date` column: Ensure all datetime values are formatted as 'YYYY-MM-DD' and contain no missing values.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
For field 'wind_speed': Ensure the field matches the type 'float'. Validate that all values in 'wind_speed' represent realistic wind speeds (0 to 150 km/h).,"expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)","expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float""),expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
Ensure the `final_grade` column contains numeric values within the range of `0` to `100`. Verify that the mean grade is greater than `60`.,"expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""final_grade"", min_value=60, max_value=100)","expect_column_values_to_be_between(column=""final_grade"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""final_grade"", min_value=60)",0.9473684210526316,0.9454545454545454,0.9473684210526316,89.13907712828069
For the `transaction_hash` column: Ensure all entries are unique and match the regular expression pattern for a SHA-256 hash.,"expect_column_values_to_be_unique(column=""transaction_hash""),expect_column_values_to_match_regex(column=""transaction_hash"", regex=r""^[a-f0-9]{64}$"")","expect_column_values_to_be_unique(column=""transaction_hash""),expect_column_values_to_match_regex(column=""transaction_hash"", regex=r""^[a-fA-F0-9]{64}$"")",0.9795918367346939,0.9361702127659574,0.9795918367346939,95.42978616972013
"For field 'claims_json': Validate that every entry adheres to the specified JSON schema for claims, ensuring all keys are present and correctly typed.","expect_column_values_to_match_json_schema(column=""claims_json"", json_schema=""your_json_schema_here"")","expect_column_values_to_match_json_schema(column=""claims_json"", schema={""type"": ""object"", ""properties"": {""claim_id"": {""type"": ""string""}, ""claim_type"": {""type"": ""string""}, ""claim_value"": {""type"": ""string""}, ""claim_date"": {""type"": ""string""}, ""claim_status"": {""type"": ""string""}, ""claim_source"": {""type"": ""string""}, ""claim_type"": {""type"": ""string""}, ""claim_value"": {""type"": ""string""}, ""claim_date"": {""type"": ""string""}, ""claim_status"": {""type"": ""string""}, ""claim_source"": {""type"": ""string""}}})",0.2972972972972973,0.2777777777777778,0.2972972972972973,10.518906525805898
Ensure the `student_id` column contains only values that exist in the `registered_students` table.,"expect_column_values_to_be_in_set(column=""student_id"", value_set=registered_students)","expect_column_values_to_be_in_set(column=""student_id"", value_set=registered_students_table.student_id)",0.9032258064516129,0.896551724137931,0.9032258064516129,80.36431532733101
Ensure the `product_id` column contains only distinct values that are numeric and match a predefined set of valid IDs.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_be_in_set(column=""product_id"", value_set=[/* predefined set of valid IDs */])","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_be_in_set(column=""product_id"", value_set=valid_product_ids)",0.9459459459459458,0.888888888888889,0.9459459459459458,86.73050940467715
"For field 'device_status': Validate that each entry is a valid JSON object, ensuring all required fields like 'device_id' and 'status' are present.","expect_column_values_to_be_json_parseable(column=""device_status""),expect_column_values_to_match_json_schema(column=""device_status"", schema={""type"": ""object"", ""required"": [""device_id"", ""status""]})","expect_column_values_to_be_json_parseable(column=""device_status""),expect_column_values_to_match_json_schema(column=""device_status"", schema={""type"": ""object"", ""properties"": {""device_id"": {""type"": ""string""}, ""status"": {""type"": ""string""}}})  # Replace with actual JSON schema for ""device_status"" column.",0.7761194029850746,0.7076923076923076,0.7761194029850746,59.536226559679214
For field 'customer_feedback': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 1000. Ensure this field exists.,"expect_column_to_exist(column=""customer_feedback""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=1000),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text"")","expect_column_to_exist(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=1000)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
"Check that the `sensor_type` column contains only values from the set `['Temperature', 'Humidity', 'Pressure']`.","expect_column_values_to_be_in_set(column=""sensor_type"", value_set=['Temperature', 'Humidity', 'Pressure'])","expect_column_values_to_be_in_set(column=""sensor_type"", value_set=['Temperature', 'Humidity', 'Pressure'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `phone_number` column matches the pattern `^\+?[0-9]{10,15}$` and does not contain null values.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[0-9]{10,15}$""),expect_column_values_to_not_be_null(column=""phone_number"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[0-9]{10,15}$""),expect_column_values_to_not_be_null(column=""phone_number"")",1.0,1.0,1.0,100.00000000000004
"For the `customer_age` column, confirm that values fall within the range of 18 to 120.","expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=120)","expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=120)",1.0,1.0,1.0,100.00000000000004
"Verify that the `customer_id` column has exactly 500 unique values, confirming distinct customer entries.","expect_column_unique_value_count_to_be_between(column=""customer_id"", min_value=500, max_value=500)","expect_column_values_to_be_unique(column=""customer_id""),expect_column_value_count_to_equal(column=""customer_id"", value=500)  # Replace 500 with actual value.",0.6666666666666666,0.35000000000000003,0.5714285714285713,41.421486281318536
"For the `stock_quantity` column, verify that all values are integers greater than or equal to `0`.","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)",0.9411764705882353,0.9387755102040816,0.9411764705882353,88.58875777833778
"Validate that `course_code` values are in the format 'XYZ123' where 'XYZ' are uppercase letters and '123' are digits, and that they are unique.","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}\d{3}$""),expect_column_values_to_be_unique(column=""course_code"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}\d{3}$""),expect_column_values_to_be_unique(column=""course_code"")",1.0,1.0,1.0,100.00000000000004
"For column 'customer_segment': Ensure values are within the set ['VIP', 'Regular', 'New']. Confirm that this field is not null.","expect_column_values_to_be_in_set(column=""customer_segment"", value_set=['VIP', 'Regular', 'New']),expect_column_values_to_not_be_null(column=""customer_segment"")","expect_column_values_to_be_in_set(column=""customer_segment"", value_set=['VIP', 'Regular', 'New']),expect_column_values_to_not_be_null(column=""customer_segment"")  # This expectation is not necessary but can be added for completeness.",0.819672131147541,0.8135593220338984,0.819672131147541,81.01624707862271
Ensure the `wallet_address` column adheres to the specified format and contains unique values.,"expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$""),expect_column_values_to_be_unique(column=""wallet_address"")","expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^[A-Za-z0-9]{26}$""),expect_column_values_to_be_unique(column=""wallet_address"")  # Note: This expectation may fail if the dataset contains duplicate wallet addresses.",0.6984126984126985,0.5901639344262295,0.6984126984126985,70.3820901817249
For field 'email_address': Ensure the field is required (not null). Validate that all values in 'email_address' match the regex pattern for valid email formats.,"expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",0.9795918367346939,0.9787234042553191,0.9795918367346939,92.58064271362642
Ensure the table contains exactly 100 rows for active employees. Verify that this matches the total in the `active_employees` reference table.,"expect_table_row_count_to_equal(row_count=100),expect_table_row_count_to_equal_other_table(other_table=""active_employees"")","expect_table_row_count_to_equal(100),expect_table_row_values_to_be_in_set(column=""active_employees"", value_set=active_employees)",0.6046511627906977,0.4390243902439024,0.6046511627906977,54.61819510922581
Check that the `diagnosis_codes` column contains valid JSON objects and adheres to the specified schema.,"expect_column_values_to_be_json_parseable(column=""diagnosis_codes""),expect_column_values_to_match_json_schema(column=""diagnosis_codes"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""diagnosis_codes""),expect_column_values_to_match_json_schema(column=""diagnosis_codes"", schema={""type"": ""object"", ""properties"": {""code"": {""type"": ""string""}, ""description"": {""type"": ""string""}}})  # Replace with actual schema  # Note: This is just an example, please replace with your actual schema.",0.6666666666666666,0.6567164179104478,0.6666666666666666,49.28848597194154
"For field 'data_frequency': Ensure that the values in 'data_frequency' match the pattern of integers representing seconds (e.g., 10, 30, 60). Confirm that this field exists.","expect_column_to_exist(column=""data_frequency""),expect_column_values_to_match_regex(column=""data_frequency"", regex=r""^\d+$"")","expect_column_to_exist(column=""data_frequency""),expect_column_values_to_match_regex(column=""data_frequency"", regex=r""^\d+$"")",1.0,1.0,1.0,100.00000000000004
"In the `property_type` column: Validate that values are from the set `['Apartment', 'House', 'Condo']` and the field is required (not null).","expect_column_to_exist(column=""property_type""),expect_column_values_to_not_be_null(column=""property_type""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Apartment', 'House', 'Condo']),expect_column_values_to_not_be_null(column=""property_type"")  # This is a valid expectation, but it may not be necessary depending on the requirements.",0.7222222222222223,0.6571428571428573,0.5,74.77668293145884
For the `publish_date` column: Ensure it matches the type 'date'. Ensure all values are in the format 'YYYY-MM-DD'.,"expect_column_values_to_be_of_type(column=""publish_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_of_type(column=""publish_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `ip_address` field adheres to the standard IPv4 format and does not match any known blacklisted IP addresses.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_not_match_regex_list(column=""ip_address"", regex_list=[""192\.168\.1\.1"", ""10\.0\.0\.1""])","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_not_be_in_set(column=""ip_address"", value_set=blacklisted_ip_addresses)",0.7272727272727273,0.6933333333333334,0.7272727272727273,64.04950317286482
Ensure the `email_address` column contains unique values and matches the standard email regex pattern.,"expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Replace regex pattern with actual regex pattern.",0.8679245283018869,0.8627450980392156,0.8679245283018869,88.53255471697872
"Ensure that the `multiplayer_mode` column contains values only from the set `['Co-op', 'Competitive', 'Singleplayer']`.","expect_column_values_to_be_in_set(column=""multiplayer_mode"", value_set=['Co-op', 'Competitive', 'Singleplayer'])","expect_column_values_to_be_in_set(column=""multiplayer_mode"", value_set=['Co-op', 'Competitive', 'Singleplayer'])",1.0,1.0,1.0,100.00000000000004
For field 'monthly_bill': Ensure the field is required (not null). Ensure the field matches the type 'decimal'. Check that the average monthly bill does not exceed $150.,"expect_column_values_to_not_be_null(column=""monthly_bill""),expect_column_values_to_be_of_type(column=""monthly_bill"", type_=""decimal""),expect_column_mean_to_be_between(column=""monthly_bill"", min_value=None, max_value=150)","expect_column_values_to_not_be_null(column=""monthly_bill""),expect_column_values_to_be_of_type(column=""monthly_bill"", type_=""decimal""),expect_column_mean_to_be_between(column=""monthly_bill"", min_value=0, max_value=150)",0.972972972972973,0.9444444444444444,0.972972972972973,96.97770291819575
Ensure the `developer_id` in the `games` table exists in the `developers` table to maintain data integrity.,"expect_column_pair_values_to_be_in_set(column_A=""games.developer_id"", column_B=""developers.developer_id"")","expect_column_values_to_be_in_set(column=""developer_id"", value_set=developers_table_developer_ids)",0.7058823529411765,0.43749999999999994,0.7058823529411765,46.78316546557145
Ensure the `release_date` field follows the format '%Y-%m-%d' and contains only valid dates.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date"")  # This is a new expectation that checks if the column values are valid date strings.",0.7692307692307693,0.761904761904762,0.7692307692307693,76.86458850312829
Ensure the `discount_code` column matches the regex pattern `^[A-Z]{5}-[0-9]{4}$`.,"expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z]{5}-[0-9]{4}$"")","expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z]{5}-[0-9]{4}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `loyalty_points` column contains only non-negative integers. Ensure uniqueness and non-null entries.,"expect_column_values_to_be_of_type(column=""loyalty_points"", type_=""int""),expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""loyalty_points""),expect_column_values_to_be_unique(column=""loyalty_points"")","expect_column_values_to_be_between(column=""loyalty_points"", min_value=0, max_value=None),expect_column_values_to_be_unique(column=""loyalty_points""),expect_column_values_to_not_be_null(column=""loyalty_points"")  # Note: This expectation may not be necessary depending on your specific requirements.",0.782608695652174,0.7333333333333333,0.6739130434782609,70.81911487170744
Verify that the `order_date` column contains datetime strings matching the format '%Y-%m-%d %H:%M:%S'.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
For the `status` field (across all domains): Ensure values are distinct and match a predefined set of statuses. Ensure this field cannot be null.,"expect_column_values_to_be_unique(column=""status""),expect_column_values_to_not_be_null(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""status1"", ""status2"", ""status3"", ...])  # Replace with actual statuses","expect_column_values_to_be_unique(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""active"", ""inactive"", ""deleted""])  # Replace ""active"", ""inactive"", and ""deleted"" with your predefined set of statuses.  # Note: This is just an example, you may need to adjust the value_set based on your specific requirements.",0.5517241379310346,0.4235294117647059,0.5057471264367815,51.06686686322862
Ensure the `transaction_date` column exists and that all dates fall within the last two years.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2021-10-01"", max_value=""2023-10-01"")","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2022-01-01"", max_value=""2024-01-01"")  # Replace with actual date range based on your requirements.",0.6197183098591549,0.5507246376811594,0.6197183098591549,54.378530727688606
For the `timestamp` field: Validate that all entries match the ISO 8601 format and can be parsed as valid datetime objects.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")  # Note: This assumes that you're using the dateutil library. If not, you'll need to replace this with a suitable alternative.",0.7105263157894737,0.7027027027027027,0.7105263157894737,71.74601470115196
For table 'community_events': Ensure the 'event_location' column exists. Ensure that all values in 'event_location' are non-empty strings.,"expect_column_to_exist(column=""event_location""),expect_column_values_to_not_be_null(column=""event_location""),expect_column_values_to_match_regex(column=""event_location"", regex=r""^.+$"")","expect_column_to_exist(column=""event_location""),expect_column_values_to_not_be_null(column=""event_location""),expect_column_values_to_be_of_type(column=""event_location"", type_=""text"")",0.8421052631578947,0.7999999999999999,0.8421052631578947,80.82917241299592
For field 'number_of_guests': Ensure the field matches the type 'integer'. Ensure values in (number_of_guests) are within the range of 1 to 10.,"expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int""),expect_column_values_to_be_between(column=""number_of_guests"", min_value=1, max_value=10)","expect_column_values_to_be_of_type(column=""number_of_guests"", type_=""int""),expect_column_values_to_be_between(column=""number_of_guests"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_date` column values can be parsed using dateutil and are within the current fiscal year.,"expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-01-01"", max_value=""2024-01-01"")  # Replace with actual fiscal year start/end dates.",0.787878787878788,0.78125,0.787878787878788,78.03572552541839
"For the `room_price` column, ensure values are arranged in ascending order for the `hotel_id`.","expect_column_values_to_be_increasing(column=""room_price"", order_by=""hotel_id"")","expect_column_values_to_be_increasing(column=""room_price"", order_by=""hotel_id"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `premium_amount` column values are within the range of $100 to $1,000, and that there are no negative values.","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=1000),expect_column_values_to_be_greater_than(column=""premium_amount"", value=0)","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=1000),expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=None)",0.8771929824561403,0.8,0.8771929824561403,80.07586438016325
Ensure that the `inventory_count` is non-negative and does not exceed `max_inventory` for corresponding product entries.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""inventory_count"", column_B=""max_inventory""),expect_column_values_to_be_between(column=""inventory_count"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""inventory_count"", min_value=0, max_value=max_inventory)",0.653061224489796,0.5957446808510638,0.5714285714285714,29.468846968734553
For the field 'service_request_date': Ensure all dates are valid and within the last two years. Validate the format as 'YYYY-MM-DD' and ensure no future dates.,"expect_column_values_to_be_dateutil_parseable(column=""service_request_date""),expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""2021-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""service_request_date""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""2022-01-01"", max_value=""2024-01-01"")  # Replace with actual min/max values based on your requirements.",0.6363636363636364,0.5581395348837209,0.6136363636363638,54.99418720362737
"For the `discount` column, ensure values are not greater than `100%`.","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Check that the number of rows in the `orders` table is equal to the number of entries in the `invoices` table.,"expect_table_row_count_to_equal_other_table(table_name=""invoices"")","expect_table_row_count_to_equal_other_table(table=""orders"", other_table=""invoices"")",0.8333333333333333,0.7272727272727272,0.8333333333333333,66.99267475747621
Validate that the `hire_date` column contains dates formatted as `YYYY-MM-DD` and that all dates are before the current date.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date""),expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.945054945054945,0.9213483146067415,0.945054945054945,90.72823001633434
Ensure the `experiment_id` column contains unique values and does not include any null entries.,"expect_column_values_to_be_unique(column=""experiment_id""),expect_column_values_to_not_be_null(column=""experiment_id"")","expect_column_values_to_be_unique(column=""experiment_id""),expect_column_values_to_not_be_null(column=""experiment_id"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `game_data.json` file exists, contains valid JSON formatting, and matches the specified hash value.","expect_file_to_exist(file_path=""game_data.json""),expect_file_to_be_valid_json(file_path=""game_data.json""),expect_file_hash_to_equal(file_path=""game_data.json"", hash_value=""SPECIFIED_HASH_VALUE"")","expect_file_to_exist(file_path=""game_data.json""),expect_file_to_match_json_schema(file_path=""game_data.json"", schema=""file_path""),expect_file_hash_to_equal(file_path=""game_data.json"", hash_value=""specified_hash_value"")",0.904109589041096,0.8169014084507041,0.904109589041096,76.61003637610068
For field 'sent_date': Ensure this field exists. Ensure the field matches the type 'datetime'. Ensure values in 'sent_date' are not null.,"expect_column_to_exist(column=""sent_date""),expect_column_values_to_be_of_type(column=""sent_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""sent_date"")","expect_column_to_exist(column=""sent_date""),expect_column_values_to_be_of_type(column=""sent_date"", type_=""datetime""),expect_column_values_to_not_be_null(column=""sent_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `transaction_fee` field has values that are numeric and fall within the range of `0.001` to `0.1`.,"expect_column_values_to_be_of_type(column=""transaction_fee"", type_=""float""),expect_column_values_to_be_between(column=""transaction_fee"", min_value=0.001, max_value=0.1)","expect_column_values_to_be_of_type(column=""transaction_fee"", type_=""float""),expect_column_values_to_be_between(column=""transaction_fee"", min_value=0.001, max_value=0.1)",1.0,1.0,1.0,100.00000000000004
For the `forecast_date` field: Verify that all entries match the 'YYYY-MM-DD' format and exist in the past or present.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""forecast_date"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""forecast_date""),expect_column_values_to_be_between(column=""forecast_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.684931506849315,0.676056338028169,0.684931506849315,53.54702180388988
For field 'stock_quantity': Ensure this field exists. Validate that all entries are integers greater than or equal to zero.,"expect_column_to_exist(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)","expect_column_to_exist(column=""stock_quantity""),expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.27998962321676
For the `incident_date` field: Ensure all dates are valid and are of type 'date'. Validate that no future dates are recorded.,"expect_column_to_exist(column=""incident_date""),expect_column_values_to_be_dateutil_parseable(column=""incident_date""),expect_column_values_to_be_of_type(column=""incident_date"", type_=""date""),expect_column_values_to_be_between(column=""incident_date"", min_value=""1900-01-01"", max_value=""current_date"")","expect_column_values_to_be_of_type(column=""incident_date"", type_=""date""),expect_column_values_to_be_between(column=""incident_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.7317073170731707,0.7,0.7317073170731707,56.38761470281126
For the `forecast_date` column: Ensure all values are formatted as 'YYYY-MM-DD' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""forecast_date"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""forecast_date"")  # This assumes you're using the dateutil library. If not, you'll need to replace this with a different expectation.",0.7142857142857143,0.7058823529411764,0.7142857142857143,71.96772759280424
For field 'zip_code': Ensure this field exists and that all entries match the US ZIP code pattern '^[0-9]{5}(?:-[0-9]{4})?$'.,"expect_column_to_exist(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^[0-9]{5}(?:-[0-9]{4})?$"")","expect_column_to_exist(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^[0-9]{5}(?:-[0-9]{4})?$"")",1.0,1.0,1.0,100.00000000000004
For field 'associated_lawyers': Ensure the field matches the type 'text'. Ensure values in 'associated_lawyers' must not match any SQL-like patterns indicating injection attacks.,"expect_column_values_to_be_of_type(column=""associated_lawyers"", type_=""text""),expect_column_values_to_not_match_regex(column=""associated_lawyers"", regex=r"".*(--|;|\/\*|\*\/|\'|\""|=|<|>).*"")","expect_column_values_to_be_of_type(column=""associated_lawyers"", type_=""text""),expect_column_values_to_not_match_regex(column=""associated_lawyers"", regex=r""^[a-zA-Z0-9_]+$"")  # Regular expression to match alphanumeric characters and underscores.",0.8,0.7931034482758621,0.8,62.85586899186526
For fields 'first_name' and 'last_name': Ensure both fields are of type 'text'. Validate that the lengths of values in (first_name) and (last_name) do not exceed 50 characters.,"expect_column_values_to_be_of_type(column=""first_name"", type_=""text""),expect_column_values_to_be_of_type(column=""last_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""first_name"", min_value=0, max_value=50),expect_column_value_lengths_to_be_between(column=""last_name"", min_value=0, max_value=50)","expect_column_values_to_be_of_type(column=""first_name"", type_=""text""),expect_column_values_to_be_of_type(column=""last_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""first_name"", min_value=0, max_value=50),expect_column_value_lengths_to_be_between(column=""last_name"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
For field 'subscription_start_date': Ensure the field matches the type 'datetime'. Verify that all values can be parsed using dateutil.,"expect_column_values_to_be_of_type(column=""subscription_start_date"", type_=""datetime""),expect_column_values_to_be_dateutil_parseable(column=""subscription_start_date"")","expect_column_values_to_be_of_type(column=""subscription_start_date"", type_=""datetime""),expect_column_values_to_be_dateutil_parseable(column=""subscription_start_date"")  # Note: This is a hypothetical expectation. Dateutil parsing may not be available for all types of datetime values.",0.7272727272727273,0.71875,0.7272727272727273,71.23444428001145
Verify that the `polling_station_id` is present for all records and does not contain duplicates.,"expect_column_values_to_not_be_null(column=""polling_station_id""),expect_column_values_to_be_unique(column=""polling_station_id"")","expect_column_values_to_not_be_null(column=""polling_station_id""),expect_column_values_to_be_unique(column=""polling_station_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `premium_amount` field has a minimum value of 100 and a maximum of 10,000, with no null entries.","expect_column_min_to_be_between(column=""premium_amount"", min_value=100),expect_column_max_to_be_between(column=""premium_amount"", max_value=10000),expect_column_values_to_not_be_null(column=""premium_amount"")","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000),expect_column_values_to_not_be_null(column=""premium_amount"")",0.8135593220338982,0.7368421052631579,0.8135593220338982,63.026614097539586
Check that the standard deviation of the `patient_wait_time` column does not exceed 20 minutes.,"expect_column_stdev_to_be_between(column=""patient_wait_time"", min_value=0, max_value=20)","expect_column_stdev_to_be_between(column=""patient_wait_time"", min_value=0, max_value=20)",1.0,1.0,1.0,100.00000000000004
For the `timestamp` field: Ensure the field cannot be null. Validate that all entries follow the ISO 8601 format.,"expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_amount` column contains values greater than or equal to 0 and has a standard deviation under 50.,"expect_column_values_to_be_between(column=""transaction_amount"", min_value=0),expect_column_stdev_to_be_between(column=""transaction_amount"", max_value=50)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0),expect_column_stdev_to_be_between(column=""transaction_amount"", min_value=0, max_value=50)",0.9411764705882353,0.8979591836734695,0.9411764705882353,88.21387334903267
"For the 'customers' table: Confirm that the 'customer_id' column exists and contains unique values, and ensure the row count is equal to the number of active customers.","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_table_row_count_to_equal(other_table=""active_customers"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_table_row_count_to_equal(expected_value=active_customers)  # Replace active_customers with the actual number of active customers.",0.7741935483870968,0.7333333333333334,0.7741935483870968,72.87598490655722
Validate that the values in the `cost` column are greater than zero and less than the corresponding values in the `price` column.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""cost"", column_B=""price""),expect_column_values_to_be_between(column=""cost"", min_value=0, max_value=None)","expect_column_pair_values_A_to_be_greater_than_B(column_A=""cost"", column_B=""price"")",0.6956521739130436,0.6818181818181819,0.6956521739130436,42.26921633407287
For field 'assignment_due_date': Ensure the field matches the type 'datetime'. Ensure values in (assignment_due_date) are in increasing order compared to (submission_date). Ensure this field exists.,"expect_column_to_exist(column=""assignment_due_date""),expect_column_values_to_be_of_type(column=""assignment_due_date"", type_=""datetime""),expect_column_values_to_be_increasing(column=""assignment_due_date"")","expect_column_to_exist(column=""assignment_due_date""),expect_column_values_to_be_of_type(column=""assignment_due_date"", type_=""datetime""),expect_column_values_to_be_increasing(column=""assignment_due_date"", other_column=""submission_date"")",0.9393939393939393,0.9375,0.9393939393939393,87.7275899636538
"Check that the `contract_length` column only contains integer values, with a range of 1 to 36 months.","expect_column_values_to_be_of_type(column=""contract_length"", type_=""int""),expect_column_values_to_be_between(column=""contract_length"", min_value=1, max_value=36)","expect_column_values_to_be_of_type(column=""contract_length"", type_=""int""),expect_column_values_to_be_between(column=""contract_length"", min_value=1, max_value=36)",1.0,1.0,1.0,100.00000000000004
Verify that the `check_in_date` field contains valid dates and that all dates are in the future.,"expect_column_values_to_be_dateutil_parseable(column=""check_in_date""),expect_column_values_to_be_greater_than(column=""check_in_date"", value=datetime.datetime.now())","expect_column_values_to_be_dateutil_parseable(column=""check_in_date""),expect_column_values_to_be_between(column=""check_in_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.6885245901639345,0.6101694915254237,0.6885245901639345,60.295639819523835
"For the `blood_pressure` column, verify that the mean systolic value is below 140 and the diastolic value is below 90.","expect_column_mean_to_be_between(column=""blood_pressure_systolic"", min_value=None, max_value=140),expect_column_mean_to_be_between(column=""blood_pressure_diastolic"", min_value=None, max_value=90)","expect_column_mean_to_be_between(column=""blood_pressure_systolic"", min_value=0, max_value=140),expect_column_mean_to_be_between(column=""blood_pressure_diastolic"", min_value=0, max_value=90)",0.9375,0.8709677419354839,0.9375,92.47172642809836
Ensure that the `insured_age` values are within the range of `18` to `65` years old and are presented in increasing order.,"expect_column_values_to_be_between(column=""insured_age"", min_value=18, max_value=65),expect_column_values_to_be_increasing(column=""insured_age"")","expect_column_values_to_be_between(column=""insured_age"", min_value=18, max_value=65),expect_column_values_to_be_increasing(column=""insured_age"")",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_id` column contains unique values and does not allow nulls.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `check_in_date` and `check_out_date` are formatted correctly and that the `check_out_date` is always later than the `check_in_date`.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""check_out_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")","expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""check_out_date"")  # Note: This expectation may not be applicable depending on the specific requirements.",0.5777777777777778,0.5227272727272727,0.5777777777777778,41.785690437631025
For the `delivery_date` column: Ensure all dates are in the future and formatted as `%Y-%m-%d`.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""delivery_date"")","expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""2023-01-01"", max_value=""today"")  # Replace today with the current date.",0.5263157894736842,0.4,0.5263157894736842,48.830543794146706
"Ensure the `threat_level` column contains only the values from the set `['Low', 'Medium', 'High']`. Any other value should be flagged as invalid.","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High'])","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High'])  # This expectation will fail if any other value is present in the column.",0.6976744186046512,0.6829268292682926,0.6976744186046512,68.39949267203949
Ensure the `device_id` column contains only unique values representing different IoT devices. Verify that this field is non-null and of type 'text'.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""text"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Confirm that the total row count in the `user_activity` table equals the total in the `subscription_data` table.,"expect_table_row_count_to_equal_other_table(table_name=""user_activity"", other_table_name=""subscription_data"")","expect_table_row_count_to_equal_other_table(table=""user_activity"", other_table=""subscription_data"")",0.9375,0.7999999999999999,0.9375,80.21674991378997
"Check that the `user_rating` column contains numeric values between 1 and 10, ensuring no outliers exceed this range.","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=""user_rating"")  # Note: This assumes that the column is not null. If it is null, you may need to modify the expectation accordingly.",0.4918032786885246,0.4745762711864407,0.4918032786885246,38.342776337422976
"For field `category`: Ensure the field contains only distinct values matching `['Electronics', 'Apparel', 'Home']`.","expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Apparel', 'Home'])",0.8571428571428571,0.6923076923076923,0.8571428571428571,82.93181259810136
Ensure the `player_rating` column has a mean value between `0` and `10` and each rating is a float within that range.,"expect_column_mean_to_be_between(column=""player_rating"", min_value=0, max_value=10),expect_column_values_to_be_between(column=""player_rating"", min_value=0.0, max_value=10.0)","expect_column_mean_to_be_between(column=""player_rating"", min_value=0, max_value=10),expect_column_values_to_be_of_type(column=""player_rating"", type_=""float"")",0.7796610169491525,0.7368421052631579,0.7796610169491525,78.54053031310262
"For the `salary` column: Confirm that the maximum salary recorded does not exceed $200,000 and the average salary is greater than $50,000.","expect_column_max_to_be_between(column=""salary"", min_value=None, max_value=200000),expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=None)","expect_column_max_to_be_between(column=""salary"", min_value=0, max_value=200000),expect_column_mean_to_be_between(column=""salary"", min_value=50000, max_value=None)  # Note: This assumes that there are no null values in the salary column. If there are null values, you may need to modify the expectation accordingly.",0.6585365853658536,0.625,0.6585365853658536,62.939722495743794
"Validate that the `age_of_policyholder` column has values ranging from 18 to 100, with a standard deviation below 15.","expect_column_values_to_be_between(column=""age_of_policyholder"", min_value=18, max_value=100),expect_column_stdev_to_be_between(column=""age_of_policyholder"", min_value=0, max_value=15)","expect_column_values_to_be_between(column=""age_of_policyholder"", min_value=18, max_value=100),expect_column_stdev_to_be_between(column=""age_of_policyholder"", min_value=0, max_value=15)",1.0,1.0,1.0,100.00000000000004
"For the `order_status` column: Ensure it contains only values from the predefined set `['Pending', 'Shipped', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=[""Pending"", ""Shipped"", ""Cancelled""])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Cancelled'])",1.0,1.0,1.0,68.69938387430254
Verify that the `trailer_url` column matches the regular expression for valid URLs: `^(http|https)://.*$`.,"expect_column_values_to_match_regex(column=""trailer_url"", regex=r""^(http|https)://.*$"")","expect_column_values_to_match_regex(column=""trailer_url"", regex=r""^(http|https)://.*$"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `response_time` column is numeric and greater than or equal to zero, and does not allow null entries.","expect_column_values_to_be_of_type(column=""response_time"", type_=""float""),  # Assuming numeric includes float,expect_column_values_to_be_between(column=""response_time"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""response_time"")","expect_column_values_to_be_of_type(column=""response_time"", type_=""float""),expect_column_values_to_be_between(column=""response_time"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""response_time"")",0.9487179487179488,0.9473684210526316,0.9487179487179488,92.33086251661187
"For table 'inventory': Ensure the columns 'warehouse_id', 'product_sku', and 'quantity' exist in that order. Validate that the total number of rows is between 50 and 1000.","expect_table_columns_to_match_ordered_list(column_list=[""warehouse_id"", ""product_sku"", ""quantity""]),expect_table_row_count_to_be_between(min_value=50, max_value=1000)","expect_column_to_exist(column=""warehouse_id""),expect_column_to_exist(column=""product_sku""),expect_column_to_exist(column=""quantity""),expect_table_row_count_to_be_between(min_value=50, max_value=1000)  # Replace min_value and max_value with actual values.",0.6376811594202898,0.47761194029850756,0.6376811594202898,44.91510282705387
"For the `transaction_id` field across domains, ensure that it matches the regex pattern `^TX[0-9]{8}$` and that all entries are unique.","expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^TX[0-9]{8}$""),expect_column_values_to_be_unique(column=""transaction_id"")","expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^TX[0-9]{8}$""),expect_column_values_to_be_unique(column=""transaction_id"")  # Note: This expectation may not be applicable depending on the requirements.",0.8135593220338984,0.8070175438596492,0.8135593220338984,80.13622819477933
For column 'humidity': Confirm that the values fall between 0 and 100 percent. Ensure this field exists.,"expect_column_to_exist(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_to_exist(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure the `billing_details` column contains valid JSON objects conforming to the schema `{ 'amount': 'number', 'due_date': 'string' }`.","expect_column_values_to_match_json_schema(column=""billing_details"", schema={""type"": ""object"", ""properties"": {""amount"": {""type"": ""number""}, ""due_date"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""billing_details"", schema={""type"": ""object"", ""properties"": {""amount"": {""type"": ""number""}, ""due_date"": {""type"": ""string""}}}})",1.0,1.0,1.0,98.56077584670501
Validate that the `player_count` column values are integers within the range of 1 to 10000.,"expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=""player_count"", type_=""int"")","expect_column_values_to_be_of_type(column=""player_count"", type_=""int""),expect_column_values_to_be_between(column=""player_count"", min_value=1, max_value=10000)",1.0,0.9615384615384616,0.5925925925925926,98.72585449014348
Ensure the `publish_date` column values adhere to the format 'YYYY-MM-DD HH:MM:SS' and are valid datetime entries.,"expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""publish_date"")","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""publish_date"")  # Note: This is a newer expectation that may not be available in all databases. If not available, you can use the original expectation.",0.7088607594936709,0.7012987012987013,0.7088607594936709,69.72434585326833
For the `game_date` field: Validate that all values are in the format `YYYY-MM-DD` and fall within the current season dates.,"expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""game_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""game_date"", min_value=""2023-08-01"", max_value=""2023-12-31"")  # Replace with actual current season dates.",0.8918918918918919,0.8611111111111112,0.8918918918918919,87.83056157287352
Validate that the `check_in` and `check_out` dates in the `reservation` table maintain logical sequencing (check-out must be after check-in).,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out"", column_B=""check_in"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out"", column_B=""check_in"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `device_id` column exists and contains unique identifiers matching the format 'DEV-XXXX', where 'XXXX' is a numeric value.","expect_column_to_exist(column=""device_id""),expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_match_regex(column=""device_id"", regex=r""^DEV-\d{4}$"")","expect_column_to_exist(column=""device_id""),expect_column_values_to_match_regex(column=""device_id"", regex=r""^DEV-\d{4}$"")  # Replace \d{4} with the actual length of your numeric value.",0.7096774193548386,0.6666666666666667,0.6774193548387096,70.13040085666582
For field 'phone_number': Ensure the expect column to exist; Ensure this field matches the format 'phone number' and is required (not null).,"expect_column_to_exist(column=""phone_number""),expect_column_values_to_not_be_null(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_to_exist(column=""phone_number""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$""),expect_column_values_to_not_be_null(column=""phone_number"")  # This is a placeholder, please replace with the actual expectation.",0.868421052631579,0.8378378378378379,0.6052631578947368,85.66692931511118
For the 'developer' field: Ensure the field exists and matches the type 'text'. Validate that its length is between 3 and 50 characters and does not contain numeric values.,"expect_column_to_exist(column=""developer""),expect_column_values_to_be_of_type(column=""developer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""developer"", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=""developer"", regex=r""\d"")","expect_column_to_exist(column=""developer""),expect_column_values_to_be_of_type(column=""developer"", type_=""text""),expect_column_value_lengths_to_be_between(column=""developer"", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=""developer"", regex=r""^\d+$"")  # Regular expression to match only alphanumeric characters.",0.9263157894736842,0.924731182795699,0.9263157894736842,87.30786126388237
Ensure the number of rows in the `customer_feedback` table is equal to the number of unique entries in the `customer_id` column.,"expect_table_row_count_to_equal(column=""customer_feedback"", value=expect_column_unique_value_count_to_be_equal(column=""customer_id""))","expect_table_row_count_to_equal(column=""customer_feedback"", value=expect_column_values_to_be_unique(column=""customer_id""))",0.9500000000000001,0.7368421052631577,0.9,80.83381849172346
For the `shipping_cost` column: Ensure the values are non-negative and of type 'float'. No missing values allowed.,"expect_column_values_to_be_between(column=""shipping_cost"", min_value=0),expect_column_values_to_be_of_type(column=""shipping_cost"", type_=""float""),expect_column_values_to_not_be_null(column=""shipping_cost"")","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""shipping_cost"", type_=""float""),expect_column_values_to_not_be_null(column=""shipping_cost"")",0.9577464788732395,0.927536231884058,0.9577464788732395,90.98670670132002
Check that the average days on market for properties in the `listings` table does not exceed 90 days.,"expect_column_mean_to_be_between(column=""days_on_market"", min_value=None, max_value=90)","expect_column_mean_to_be_between(column=""days_on_market"", min_value=0, max_value=90)",0.9375,0.8666666666666667,0.9375,92.10500207490826
For field `check_in_date`: Ensure the datetime format is 'YYYY-MM-DD' and that it is not earlier than today's date.,"expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""check_in_date"")  # This checks for valid datetime parsing, though not specifically for today's date. ,# A separate expectation would be needed to check that dates are not earlier than today.","expect_column_values_to_match_strftime_format(column=""check_in_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""check_in_date"", min_value=""2023-01-01"", max_value=""today"")  # Replace today with today's date.",0.6105263157894736,0.5376344086021506,0.5894736842105263,62.40799818302573
"Validate that the `precipitation_type` column only includes values from the set `['Rain', 'Snow', 'None']`.","expect_column_values_to_be_in_set(column=""precipitation_type"", value_set=['Rain', 'Snow', 'None'])","expect_column_values_to_be_in_set(column=""precipitation_type"", value_set=['Rain', 'Snow', 'None'])",1.0,1.0,1.0,100.00000000000004
For the column `publication_year`: Confirm that all values are integers within the range of 1900 to the current year and that there are no missing entries.,"expect_column_values_to_be_between(column=""publication_year"", min_value=1900, max_value=2023),expect_column_values_to_not_be_null(column=""publication_year""),expect_column_values_to_be_of_type(column=""publication_year"", type_=""int"")","expect_column_values_to_be_of_type(column=""publication_year"", type_=""int""),expect_column_values_to_be_between(column=""publication_year"", min_value=1900, max_value=2023),expect_column_values_to_not_be_null(column=""publication_year"")  # This line is optional but recommended for completeness.",0.9024390243902439,0.875,0.6097560975609757,89.02967173230238
For the `district_number`: Ensure values are integers and within the range of 1 to 100.,"expect_column_values_to_be_of_type(column=""district_number"", type_=""int""),expect_column_values_to_be_between(column=""district_number"", min_value=1, max_value=100)","expect_column_values_to_be_of_type(column=""district_number"", type_=""int""),expect_column_values_to_be_between(column=""district_number"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `booking_date` column contains dates that are not in the past.,"expect_column_values_to_be_greater_than(column=""booking_date"", value=""2023-10-19"")  # Use current date as an example, replace with appropriate date as needed.","expect_column_values_to_be_between(column=""booking_date"", min_value=""1900-01-01"", max_value=""today"")",0.41860465116279066,0.2926829268292683,0.41860465116279066,40.29803097960704
For the `json_data` column: Ensure all entries are valid JSON objects and contain a 'status' field.,"expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {""status"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {""status"": {""type"": ""string""}}})  # Replace 'expect_column_values_to_match_json_schema' with the actual expectation method.",0.8059701492537313,0.8,0.8059701492537313,78.23501372192041
Verify that the `humidity` values are consistently below the `dew_point` values across all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""dew_point"", column_B=""humidity"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""humidity"", column_B=""dew_point"")",1.0,0.8125,0.8235294117647058,94.85438370694514
Verify that the `quantity` column values are within the range of 1 to 1000.,"expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)","expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"Validate that the `email` column matches the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
For field 'shipment_tracking_number': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""shipment_tracking_number""),expect_column_values_to_not_be_null(column=""shipment_tracking_number""),expect_column_values_to_be_of_type(column=""shipment_tracking_number"", type_=""text"")","expect_column_to_exist(column=""shipment_tracking_number""),expect_column_values_to_not_be_null(column=""shipment_tracking_number""),expect_column_values_to_be_of_type(column=""shipment_tracking_number"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check that the `last_payment_date` column contains dates that can be parsed using dateutil.,"expect_column_values_to_be_dateutil_parseable(column=""last_payment_date"")","expect_column_values_to_be_dateutil_parseable(column=""last_payment_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `course_completion_date` values have a median that falls within the current academic year and does not include null entries.,"expect_column_median_to_be_between(column=""course_completion_date"", min_value=""2023-08-01"", max_value=""2024-05-31""),expect_column_values_to_not_be_null(column=""course_completion_date"")","expect_column_median_to_be_between(column=""course_completion_date"", min_value=""2023-08-01"", max_value=""2024-07-31""),expect_column_values_to_not_be_null(column=""course_completion_date"")  # This expectation is not necessary but can be added for completeness.",0.821917808219178,0.7887323943661972,0.821917808219178,81.17431886407581
"Ensure the `status` column only contains distinct values from the set ['Open', 'Closed', 'Pending'] and that 'Closed' cases have a valid `case_closed_date`.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_not_be_null(column=""case_closed_date"")  # This assumes that 'case_closed_date' should be checked for non-null only when 'status' is 'Closed'","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_be_dateutil_parseable(column=""case_closed_date"")  # Assuming the column is of type datetime, this will check if the values are parsable as datetime objects.",0.6352941176470588,0.4819277108433735,0.5882352941176471,56.671126391167675
"Check that the `weather_condition` column includes only distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","expect_column_values_to_be_in_set(column=""weather_condition"", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])",1.0,1.0,1.0,100.00000000000004
Validate that the `guest_email` field matches the format of a valid email address and does not exceed 255 characters in length.,"expect_column_values_to_match_regex(column=""guest_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_value_lengths_to_be_between(column=""guest_email"", min_value=1, max_value=255)","expect_column_value_lengths_to_be_between(column=""guest_email"", min_value=0, max_value=255),expect_column_values_to_match_regex(column=""guest_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to match valid email addresses.",0.6842105263157895,0.6216216216216216,0.39473684210526316,71.22123768392133
For field 'child_count': Ensure the field matches the type 'integer'. Ensure the field contains values greater than or equal to 0. Ensure this field exists.,"expect_column_to_exist(column=""child_count""),expect_column_values_to_be_of_type(column=""child_count"", type_=""int""),expect_column_values_to_be_between(column=""child_count"", min_value=0, max_value=None)","expect_column_to_exist(column=""child_count""),expect_column_values_to_be_of_type(column=""child_count"", type_=""int""),expect_column_values_to_be_between(column=""child_count"", min_value=0)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.13468812604467
"For the column `status`: Ensure values are from the set `['Open', 'Closed', 'Pending']`. Ensure this field is required (not null).","expect_column_values_to_be_in_set(column=""status"", value_set=[""Open"", ""Closed"", ""Pending""]),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,78.74757509415676
"For field 'account_balance': Ensure the field matches the type 'decimal'. Validate that all values in (account_balance) are within the range of $0.00 to $1,000,000.00.","expect_column_values_to_be_of_type(column=""account_balance"", type_=""decimal""),expect_column_values_to_be_between(column=""account_balance"", min_value=0.00, max_value=1000000.00)","expect_column_values_to_be_of_type(column=""account_balance"", type_=""decimal""),expect_column_values_to_be_between(column=""account_balance"", min_value=0.00, max_value=1000000.00)",1.0,1.0,1.0,100.00000000000004
For field `platform`: Ensure values are valid JSON objects that match the specified schema for gaming platforms.,"expect_column_values_to_match_json_schema(column=""platform"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""type"": {""type"": ""string""}}})","expect_column_values_to_match_json_schema(column=""platform"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""version"": {""type"": ""string""}, ""type"": {""type"": ""string""}, ""url"": {""type"": ""string""}, ""description"": {""type"": ""string""}, ""icon"": {""type"": ""string""}, ""developer"": {""type"": ""string""}, ""publisher"": {""type"": ""string""}, ""release_date"": {""type"": ""string""}, ""genres"": {""type"": ""array""}, ""rating"": {""type"": ""number""}, ""review_count"": {""type"": ""number""}, ""developer_url"": {""type"": ""string""}, ""publisher_url"": {""type"": ""string""}, ""support_url"": {""type"": ""string""}, ""website"": {""type"": ""string""}, ""store"": {""type"": ""string""}, ""store_url"": {""type"": ""string""}, ""store_description"": {""type"": ""string""}, ""store_price"": {""type"": ""number""}, ""store_currency"": {""type"": ""string""}, ""store_country"": {""type"": ""string""}, ""store_state"": {""type"": ""string""}, ""store_city"": {""type"": ""string""}, ""store_zip"": {""type"":",0.319327731092437,0.3076923076923077,0.319327731092437,15.282954674485865
For field 'subscription_start_date': Ensure the field matches the type 'datetime'. All values must adhere to the format 'YYYY-MM-DD' and not be in the past.,"expect_column_to_exist(column=""subscription_start_date""),expect_column_values_to_be_of_type(column=""subscription_start_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""subscription_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""subscription_start_date"")","expect_column_values_to_be_of_type(column=""subscription_start_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""subscription_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""subscription_start_date"")  # This expectation will fail if the values are in the past.",0.8247422680412372,0.8,0.8041237113402062,82.58165794154115
Ensure the `order_date` column has no missing values and is formatted as 'MM/DD/YYYY'.,"expect_column_values_to_not_be_null(column=""order_date""),expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%m/%d/%Y"")","expect_column_values_to_not_be_null(column=""order_date""),expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%m/%d/%Y"")",1.0,1.0,1.0,100.00000000000004
For field 'employee_id': Ensure the field matches the type 'integer'. Ensure values in (employee_id) are unique across records within the dataset.,"expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_be_of_type(column=""employee_id"", type_=""int""),expect_column_values_to_be_unique(column=""employee_id"")  # Note: This expectation may not be applicable depending on the dataset.  # Please refer to the dataset documentation for more information.",0.6774193548387097,0.6666666666666666,0.6774193548387097,65.97649045223153
Ensure the `date_of_birth` field is formatted as YYYY-MM-DD and that all entries are at least 13 years old.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""2023-07-26"")  # Replace with actual date of birth.",0.7246376811594204,0.6865671641791045,0.7246376811594204,61.51632297854434
For the `content_metadata` table: Ensure that the `author_id` column values exist in the `users` table.,"expect_column_values_to_be_in_set(column=""author_id"", value_set=users_table_author_id_values)","expect_column_values_to_be_in_set(column=""author_id"", value_set=users_table_author_ids)",0.9090909090909091,0.9032258064516129,0.9090909090909091,89.16118976939595
Ensure the `candidate_name` column matches a predefined regex pattern for valid names and contains no empty strings.,"expect_column_values_to_match_regex(column=""candidate_name"", regex=r""^[A-Za-z\s'-]+$""),expect_column_values_to_not_match_regex(column=""candidate_name"", regex=r""^$"")","expect_column_values_to_match_regex(column=""candidate_name"", regex=r""^[A-Za-z\s]+$""),expect_column_values_to_not_be_null(column=""candidate_name"")",0.8846153846153846,0.8400000000000001,0.8846153846153846,75.29030706225059
"For field `status`: Ensure the field contains only distinct values matching `['In Transit', 'Delivered', 'Cancelled']`.","expect_column_distinct_values_to_equal_set(column=""status"", value_set=[""In Transit"", ""Delivered"", ""Cancelled""])","expect_column_values_to_be_in_set(column=""status"", value_set=['In Transit', 'Delivered', 'Cancelled'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,50.76222552302742
Check that the number of rows in the `reservations` table equals the number of rows in the `customers` table.,"expect_table_row_count_to_equal_other_table(table_name=""reservations"", other_table_name=""customers"")","expect_table_row_count_to_equal_other_table(table=""reservations"", other_table=""customers"")",0.9285714285714286,0.7692307692307692,0.9285714285714286,77.68062226971533
"For table 'call_records': Ensure that the number of rows is greater than or equal to 1000. Verify that the columns ['call_duration', 'call_type', 'timestamp'] exist and are in the correct order.","expect_table_row_count_to_be_between(min_value=1000),expect_table_columns_to_match_ordered_list(column_list=[""call_duration"", ""call_type"", ""timestamp""])","expect_table_row_count_to_be_between(min_value=1000),expect_column_to_exist(column=""call_duration""),expect_column_to_exist(column=""call_type""),expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_in_order(column=""call_duration"", column=""call_type"", column=""timestamp"")  # Note: This is a hypothetical expectation, as the actual implementation may vary based on the specific requirements.",0.4651162790697674,0.30952380952380953,0.4651162790697674,27.890235960306143
For the field 'post_slug': Ensure it matches the regular expression `^[a-z0-9-]+$` and is unique across the dataset. Validate that the length is between 5 and 100 characters.,"expect_column_values_to_match_regex(column=""post_slug"", regex=r""^[a-z0-9-]+$""),expect_column_values_to_be_unique(column=""post_slug""),expect_column_value_lengths_to_be_between(column=""post_slug"", min_value=5, max_value=100)","expect_column_values_to_match_regex(column=""post_slug"", regex=r""^[a-z0-9-]+$""),expect_column_values_to_be_unique(column=""post_slug""),expect_column_value_lengths_to_be_between(column=""post_slug"", min_value=5, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure that the `humidity` percentage values are unique and fall within the range of 0 to 100.,"expect_column_values_to_be_unique(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_unique(column=""humidity""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `player_id` column contains only unique identifiers and matches the specified set of player IDs.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_in_set(column=""player_id"", value_set=specified_set_of_player_ids)","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_in_set(column=""player_id"", value_set=player_ids)",0.9387755102040816,0.8936170212765958,0.9387755102040816,86.13532843788728
For field 'email_address': Ensure the field matches the type 'text'. Validate that all values in (email_address) conform to the regex pattern for valid email formats. Ensure this field exists.,"expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regex for valid email formats.",0.9295774647887324,0.927536231884058,0.9295774647887324,93.16988923137689
"For field 'category_id': Ensure all values in 'category_id' are present in the predefined set ['electronics', 'clothing', 'home']. Validate no missing values.","expect_column_values_to_be_in_set(column=""category_id"", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=""category_id"")","expect_column_values_to_be_in_set(column=""category_id"", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=""category_id"")  # This expectation is not necessary but can be added for completeness.",0.819672131147541,0.8135593220338984,0.819672131147541,81.01624707862271
"For the `user_rating` column: Ensure that the standard deviation is less than `1.5`, and the values fall within the range of `1 to 5`.","expect_column_stdev_to_be_between(column=""user_rating"", min_value=0, max_value=1.5),expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=5)","expect_column_stdev_to_be_between(column=""user_rating"", min_value=1, max_value=1.5),expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=5)",0.967741935483871,0.9333333333333333,0.967741935483871,96.0132862288073
"For the `incident_report` column, ensure it is a valid JSON object conforming to the specified schema.","expect_column_values_to_match_json_schema(column=""incident_report"", schema={/* specify your JSON schema here */})","expect_column_values_to_be_json_parseable(column=""incident_report""),expect_column_values_to_match_json_schema(column=""incident_report"", schema={""type"": ""object"", ""properties"": {""type"": {""type"": ""string""}, ""date"": {""type"": ""string""}, ""time"": {""type"": ""string""}, ""location"": {""type"": ""string""}, ""description"": {""type"": ""string""}, ""status"": {""type"": ""string""}, ""resolution"": {""type"": ""string""}, ""escalation"": {""type"": ""boolean""}, ""priority"": {""type"": ""string""}, ""severity"": {""type"": ""string""}, ""impact"": {""type"": ""string""}, ""risk"": {""type"": ""string""}, ""owner"": {""type"": ""string""}, ""assignee"": {""type"": ""string""}, ""resolution_date"": {""type"": ""string""}, ""escalation_date"": {""type"": ""string""}, ""escalation_status"": {""type"": ""string""}, ""escalation_reason"": {""type"": ""string""}, ""escalation_resolution"": {""type"": ""string""}, ""escalation_notes"": {""type"": ""string""}, ""escalation_status_date"": {""type"": ""string""}, ""escalation_status_reason"": {""type"": ""string""}, ""escalation_resolution",0.20338983050847456,0.17241379310344826,0.18644067796610167,6.112253884560804
Ensure that the combined `points` and `assists` columns for each player in a game do not exceed the maximum value of 200.,"expect_multicolumn_sum_to_equal(column_list=[""points"", ""assists""], value=200)","expect_column_pair_values_to_be_between(column_A=""points"", column_B=""assists"", min_value=0, max_value=200)",0.4666666666666667,0.07142857142857142,0.4666666666666667,19.64871171894245
Confirm that the `fiscal_year` values are sequential and fall within the range of 2000 to the current year.,"expect_column_values_to_be_increasing(column=""fiscal_year""),expect_column_values_to_be_between(column=""fiscal_year"", min_value=2000, max_value=current_year)","expect_column_values_to_be_between(column=""fiscal_year"", min_value=2000, max_value=2023)",0.7000000000000001,0.6842105263157894,0.7000000000000001,45.91065425229585
Validate that the distribution of `in-game purchases` follows a normal distribution with a mean close to 50.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""in-game purchases"", threshold=0.05),expect_column_mean_to_be_between(column=""in-game purchases"", min_value=45, max_value=55)","expect_column_mean_to_be_between(column=""in_game_purchases"", min_value=48, max_value=52)",0.5490196078431373,0.489795918367347,0.5490196078431373,26.64150942752704
Verify that the `submission_date` column values adhere to the format `'%Y-%m-%d'` and can be parsed correctly using dateutil.,"expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""submission_date"")","expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""submission_date"")  # This expectation is not yet implemented, but it should be added to check that the column values can be parsed as dates.",0.6944444444444444,0.6857142857142856,0.6944444444444444,69.31810056278083
For the `check_in_date` field: Validate that all dates are within the range of '2023-01-01' to '2023-12-31' and are of type 'date'.,"expect_column_values_to_be_between(column=""check_in_date"", min_value=""2023-01-01"", max_value=""2023-12-31""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date"")","expect_column_values_to_be_between(column=""check_in_date"", min_value=""2023-01-01"", max_value=""2023-12-31""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `balance` column contains only numeric values. Ensure no entry in this column is null.,"expect_column_values_to_be_of_type(column=""balance"", type_=""numeric""),expect_column_values_to_not_be_null(column=""balance"")","expect_column_values_to_be_of_type(column=""balance"", type_=""numeric""),expect_column_values_to_not_be_null(column=""balance"")",1.0,1.0,1.0,100.00000000000004
Ensure the `customer_rating` column has a standard deviation below 1.5 to reflect consistent customer feedback.,"expect_column_stdev_to_be_between(column=""customer_rating"", max_value=1.5)","expect_column_stdev_to_be_between(column=""customer_rating"", min_value=0, max_value=1.5)",0.896551724137931,0.8148148148148148,0.896551724137931,77.66178900310341
For field 'content_id': Ensure the field matches the type 'uuid'. Ensure values in (content_id) are unique and follow the UUID format.,"expect_column_values_to_be_of_type(column=""content_id"", type_=""uuid""),expect_column_values_to_be_unique(column=""content_id""),expect_column_values_to_match_regex(column=""content_id"", regex=r""^[{(]?[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}[)}]?$"")","expect_column_values_to_be_of_type(column=""content_id"", type_=""uuid""),expect_column_values_to_be_unique(column=""content_id""),expect_column_values_to_match_regex(column=""content_id"", regex=r""^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1|2][0-9]{3}-[89ab][AEJMNrtvw][AEJMNrtvw][0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"")  # Regular expression to match UUID format.",0.85,0.711864406779661,0.8333333333333334,73.20594605255664
For field 'service_start_date': Ensure this field exists. Validate that all dates are within the range of '2020-01-01' to '2023-12-31'.,"expect_column_to_exist(column=""service_start_date""),expect_column_values_to_be_between(column=""service_start_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""service_start_date""),expect_column_values_to_be_dateutil_parseable(column=""service_start_date""),expect_column_values_to_be_between(column=""service_start_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",0.835820895522388,0.8307692307692308,0.835820895522388,71.74601470115196
"Ensure that the `email_body` column contains no invalid JSON structures and is less than 10,000 characters.","expect_column_values_to_be_json_parseable(column=""email_body""),expect_column_value_lengths_to_be_between(column=""email_body"", min_value=0, max_value=10000)","expect_column_value_lengths_to_be_between(column=""email_body"", min_value=0, max_value=10000),expect_column_values_to_be_json_parseable(column=""email_body"")",1.0,0.96,0.6153846153846154,98.60754887982947
"Ensure that the `status` column contains only distinct values from the set `['Pending', 'Approved', 'Rejected']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Approved', 'Rejected'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Approved', 'Rejected'])",1.0,1.0,1.0,100.00000000000004
Ensure the `check_in_date` column contains no missing values. Validate that all entries are of type 'date' and in the future.,"expect_column_values_to_not_be_null(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_in_set(column=""check_in_date"", value_set=[date for date in pd.date_range(start=datetime.now(), end=pd.Timestamp.max)])","expect_column_values_to_not_be_null(column=""check_in_date""),expect_column_values_to_be_of_type(column=""check_in_date"", type_=""date""),expect_column_values_to_be_increasing(column=""check_in_date"")",0.7764705882352942,0.7469879518072288,0.7764705882352942,61.48494914945934
Ensure the number of rows in the `orders` table is equal to the number of rows in the `customers` table.,"expect_table_row_count_to_equal_other_table(table=""customers"")","expect_table_row_count_to_equal_other_table(table=""orders"", other_table=""customers"")",0.8695652173913044,0.8571428571428571,0.8695652173913044,71.87802426635454
"For field 'vehicle_registration': Ensure this field exists. Validate that (vehicle_registration) matches the regex pattern '^[A-Z]{1,3}-\d{1,6}$' and does not contain any invalid characters.","expect_column_to_exist(column=""vehicle_registration""),expect_column_values_to_match_regex(column=""vehicle_registration"", regex=r""^[A-Z]{1,3}-\d{1,6}$""),expect_column_values_to_not_match_regex(column=""vehicle_registration"", regex=r""[^A-Z0-9-]"")","expect_column_to_exist(column=""vehicle_registration""),expect_column_values_to_match_regex(column=""vehicle_registration"", regex=r""^[A-Z]{1,3}-\d{1,6}$""),expect_column_values_to_not_match_regex(column=""vehicle_registration"", regex=r""[^A-Z0-9-]"")  # Note: This regex may need to be adjusted based on the specific requirements.",0.8602150537634409,0.8571428571428571,0.8602150537634409,85.11452803881025
"For field 'player_statistics': Ensure the field is a valid JSON object conforming to the schema defining 'goals', 'assists', and 'minutes_played' as required fields.","expect_column_values_to_match_json_schema(column=""player_statistics"", schema={""type"": ""object"", ""properties"": {""goals"": {""type"": ""integer""}, ""assists"": {""type"": ""integer""}, ""minutes_played"": {""type"": ""integer""}}, ""required"": [""goals"", ""assists"", ""minutes_played""]})","expect_column_values_to_be_json_parseable(column=""player_statistics""),expect_column_values_to_match_json_schema(column=""player_statistics"", schema={""type"": ""object"", ""properties"": {""goals"": {""type"": ""number""}, ""assists"": {""type"": ""number""}, ""minutes_played"": {""type"": ""number""}}})  # Replace type with actual type for each field.",0.591549295774648,0.5217391304347826,0.591549295774648,64.46586014689426
Check that the `last_active` column contains datetime entries that can be parsed using dateutil and are no older than 24 hours.,"expect_column_values_to_be_dateutil_parseable(column=""last_active""),expect_column_values_to_be_between(column=""last_active"", min_value=datetime.now() - timedelta(hours=24), max_value=datetime.now())","expect_column_values_to_be_dateutil_parseable(column=""last_active""),expect_column_values_to_be_between(column=""last_active"", min_value=""2023-12-01"", max_value=""2023-12-02"")",0.7796610169491527,0.736842105263158,0.7796610169491527,72.14673294479938
Ensure the `phone_number` column contains only strings that match the pattern `^\(\d{3}\) \d{3}-\d{4}$` for valid US phone formats.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
For the field 'meter_reading_date': Ensure it is in the format 'YYYY-MM-DD' and verify that all dates are unique within the dataset.,"expect_column_values_to_match_strftime_format(column=""meter_reading_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_unique(column=""meter_reading_date"")","expect_column_values_to_match_strftime_format(column=""meter_reading_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_unique(column=""meter_reading_date"")  # Assuming there are no duplicate meter readings.",0.8813559322033898,0.8771929824561403,0.8813559322033898,86.66272532703856
For field 'subscriber_id': Ensure this field exists and matches the type 'integer'. Verify that all values in 'subscriber_id' are unique and do not contain nulls.,"expect_column_to_exist(column=""subscriber_id""),expect_column_values_to_be_of_type(column=""subscriber_id"", type_=""int""),expect_column_values_to_be_unique(column=""subscriber_id""),expect_column_values_to_not_be_null(column=""subscriber_id"")","expect_column_to_exist(column=""subscriber_id""),expect_column_values_to_be_of_type(column=""subscriber_id"", type_=""int""),expect_column_values_to_be_unique(column=""subscriber_id""),expect_column_values_to_not_be_null(column=""subscriber_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `employee_id` column contains values from the set of active employee IDs and there are no duplicates.,"expect_column_values_to_be_in_set(column=""employee_id"", value_set=active_employee_ids),expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_be_in_set(column=""employee_id"", value_set=active_employee_ids),expect_column_values_to_be_unique(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
For the `package_weight` column: Ensure that it contains only positive float values and has no missing entries.,"expect_column_values_to_not_be_null(column=""package_weight""),expect_column_values_to_be_between(column=""package_weight"", min_value=0.0, max_value=None),expect_column_values_to_be_of_type(column=""package_weight"", type_=""float"")","expect_column_values_to_be_between(column=""package_weight"", min_value=0.0, max_value=None),expect_column_values_to_not_be_null(column=""package_weight"")",0.8125000000000001,0.8064516129032258,0.7499999999999999,57.95782787848098
For the `battery_level` field: Ensure it is required (not null) and contains only integer values between 0 and 100.,"expect_column_values_to_not_be_null(column=""battery_level""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int"")","expect_column_values_to_not_be_null(column=""battery_level""),expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100)",0.8064516129032258,0.8,0.8064516129032258,57.95782787848098
For column 'deductible_amount': Validate that all values are integers greater than or equal to 0. Ensure this field exists.,"expect_column_to_exist(column=""deductible_amount""),expect_column_values_to_be_of_type(column=""deductible_amount"", type_=""int""),expect_column_values_to_be_between(column=""deductible_amount"", min_value=0)","expect_column_to_exist(column=""deductible_amount""),expect_column_values_to_be_of_type(column=""deductible_amount"", type_=""int""),expect_column_values_to_be_between(column=""deductible_amount"", min_value=0)",1.0,1.0,1.0,100.00000000000004
Validate the `shipment_weight` column to ensure all entries are numeric and fall within the range of 0.1 to 500 pounds.,"expect_column_values_to_be_of_type(column=""shipment_weight"", type_=""float""),expect_column_values_to_be_between(column=""shipment_weight"", min_value=0.1, max_value=500)","expect_column_values_to_be_of_type(column=""shipment_weight"", type_=""float""),expect_column_values_to_be_between(column=""shipment_weight"", min_value=0.1, max_value=500)",1.0,1.0,1.0,100.00000000000004
For field `attachment_size`: Ensure the field matches the type 'integer'. Ensure values in `attachment_size` must be greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""attachment_size"", type_=""int""),expect_column_values_to_be_between(column=""attachment_size"", min_value=0)","expect_column_values_to_be_of_type(column=""attachment_size"", type_=""int""),expect_column_values_to_be_between(column=""attachment_size"", min_value=0)",1.0,1.0,1.0,100.00000000000004
For the `transaction_timestamp` field: Ensure all values follow the UNIX timestamp format. Validate that there are no null values and that all entries are unique.,"expect_column_to_exist(column=""transaction_timestamp""),expect_column_values_to_not_be_null(column=""transaction_timestamp""),expect_column_values_to_be_unique(column=""transaction_timestamp""),expect_column_values_to_match_regex(column=""transaction_timestamp"", regex=r""^\d{10}$"")","expect_column_values_to_match_regex(column=""transaction_timestamp"", regex=r""^\d{10}$""),expect_column_values_to_be_unique(column=""transaction_timestamp""),expect_column_values_to_not_be_null(column=""transaction_timestamp"")",0.9014084507042254,0.8695652173913043,0.6478873239436619,79.91707640841781
For field 'data_usage': Ensure the field exists and matches the type 'integer'. Validate that the average data usage in (data_usage) is not greater than 5000 MB.,"expect_column_to_exist(column=""data_usage""),expect_column_values_to_be_of_type(column=""data_usage"", type_=""int""),expect_column_mean_to_be_between(column=""data_usage"", min_value=None, max_value=5000)","expect_column_to_exist(column=""data_usage""),expect_column_values_to_be_of_type(column=""data_usage"", type_=""int""),expect_column_mean_to_be_between(column=""data_usage"", min_value=0, max_value=5000)",0.9705882352941176,0.9393939393939394,0.9705882352941176,96.74122890261673
Ensure that the sum of `transaction_amount` and `fees` equals the `total_amount` for each record.,"expect_column_pair_values_to_be_equal(column_A=""transaction_amount"", column_B=""total_amount""),expect_column_pair_values_to_be_equal(column_A=""fees"", column_B=""total_amount"")","expect_multicolumn_sum_to_equal(column_list=[""transaction_amount"", ""fees""], target_column=""total_amount"")",0.46511627906976755,0.14634146341463414,0.46511627906976755,20.576007960835234
For field `precipitation`: Ensure this field matches the type 'decimal'. Confirm no negative values are present in this column.,"expect_column_values_to_be_of_type(column=""precipitation"", type_=""decimal""),expect_column_values_to_be_between(column=""precipitation"", min_value=0)","expect_column_values_to_be_of_type(column=""precipitation"", type_=""decimal""),expect_column_values_to_be_between(column=""precipitation"", min_value=0)",1.0,1.0,1.0,100.00000000000004
Ensure the `user_id` column contains only unique values and must not allow null entries.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
"For the `price` column: Verify that all values are greater than `0` and less than or equal to `10,000,000`.","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000000)","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000000)",1.0,1.0,1.0,100.00000000000004
"For the `number_of_bedrooms`: Ensure the values are integers between 1 and 10, inclusive.","expect_column_values_to_be_between(column=""number_of_bedrooms"", min_value=1, max_value=10)","expect_column_values_to_be_of_type(column=""number_of_bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""number_of_bedrooms"", min_value=1, max_value=10)",0.7111111111111111,0.6976744186046512,0.7111111111111111,50.36532936385109
For field 'comment_id': Ensure this field contains unique values. Ensure this field matches the type 'integer'. Ensure the field is required (not null).,"expect_column_values_to_be_unique(column=""comment_id""),expect_column_values_to_be_of_type(column=""comment_id"", type_=""int""),expect_column_values_to_not_be_null(column=""comment_id"")","expect_column_values_to_be_unique(column=""comment_id""),expect_column_values_to_be_of_type(column=""comment_id"", type_=""int""),expect_column_values_to_not_be_null(column=""comment_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `discount` column values are between 0 and 50% and confirm that there are no null entries.,"expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=50),expect_column_values_to_not_be_null(column=""discount"")","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=0.5),expect_column_values_to_not_be_null(column=""discount"")",0.9361702127659574,0.888888888888889,0.9361702127659574,94.86610352970624
For field `block_number`: Verify that all values are within the range of 0 to 9999999 and are arranged in increasing order.,"expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=9999999),expect_column_values_to_be_increasing(column=""block_number"")","expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=9999999),expect_column_values_to_be_increasing(column=""block_number"")  # Note: This expectation may not be applicable depending on the specific requirements.  -->",0.8,0.7931034482758621,0.8,75.17477499265956
"Check that the `response_time` column has a standard deviation less than 15 seconds, indicating consistency in participant responses.","expect_column_stdev_to_be_between(column=""response_time"", max_value=15)","expect_column_stdev_to_be_between(column=""response_time"", min_value=0, max_value=15)",0.888888888888889,0.8,0.888888888888889,77.66178900310341
Ensure the `account_number` column contains unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")","expect_column_values_to_be_unique(column=""account_number""),expect_column_values_to_not_be_null(column=""account_number"")",1.0,1.0,1.0,100.00000000000004
For field 'customer_email': Ensure the field matches the type 'text'. Validate that the email follows standard formatting rules and does not exceed 256 characters. Ensure this field exists.,"expect_column_to_exist(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_email"", min_value=1, max_value=256),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_to_exist(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_email"", min_value=0, max_value=256),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regex to match valid email addresses.",0.923076923076923,0.9019607843137256,0.923076923076923,92.40767908155553
For the combination of `author_id` and `publication_year`: Ensure that these fields uniquely identify each record.,"expect_compound_columns_to_be_unique(columns=[""author_id"", ""publication_year""])","expect_compound_columns_to_be_unique(column_A=""author_id"", column_B=""publication_year"")",0.88,0.6956521739130435,0.88,60.93671089617578
"Ensure that the `cancellation_policy` field only contains values from the set `['Flexible', 'Moderate', 'Strict']`.","expect_column_values_to_be_in_set(column=""cancellation_policy"", value_set=['Flexible', 'Moderate', 'Strict'])","expect_column_values_to_be_in_set(column=""cancellation_policy"", value_set=['Flexible', 'Moderate', 'Strict'])",1.0,1.0,1.0,100.00000000000004
Check the `enrollment_date` column to confirm all entries are in the correct date format (YYYY-MM-DD) and fall within the current academic year.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-05-31"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-07-31"")  # Replace with actual date range for your current academic year.",0.846153846153846,0.8157894736842105,0.846153846153846,83.9479414712393
For field 'product_description': Ensure the field matches the type 'text'. Validate that the length of string values falls within a range of 10 to 500 characters.,"expect_column_values_to_be_of_type(column=""product_description"", type_=""text""),expect_column_value_lengths_to_be_between(column=""product_description"", min_value=10, max_value=500)","expect_column_values_to_be_of_type(column=""product_description"", type_=""text""),expect_column_value_lengths_to_be_between(column=""product_description"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
In the `insurance_policy_number` column: Ensure all entries match the pattern of a valid insurance policy number and are of type 'string'.,"expect_column_values_to_match_regex(column=""insurance_policy_number"", regex=r""^[A-Z0-9-]+$""),expect_column_values_to_be_of_type(column=""insurance_policy_number"", type_=""string"")","expect_column_values_to_match_regex(column=""insurance_policy_number"", regex=r""^[A-Z0-9]{10}$""),expect_column_values_to_be_of_type(column=""insurance_policy_number"", type_=""string"")",0.9824561403508771,0.9454545454545454,0.9824561403508771,92.27131661912698
Ensure that the `patient_id` column contains unique identifiers for each patient.,"expect_column_values_to_be_unique(column=""patient_id"")","expect_column_values_to_be_unique(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `age` column values are between 18 and 120 and are arranged in increasing order.,"expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120),expect_column_values_to_be_increasing(column=""age"")","expect_column_values_to_be_between(column=""age"", min_value=18, max_value=120),expect_column_values_to_be_increasing(column=""age"")",1.0,1.0,1.0,100.00000000000004
Validate that the `stock_quantity` column only contains integer values that do not fall below `0`.,"expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)",0.6153846153846153,0.5945945945945945,0.6153846153846153,24.254361539140042
For the `balance` column: Ensure all values are numeric. Validate that the minimum balance is greater than or equal to 0.,"expect_column_values_to_be_of_type(column=""balance"", type_=""numeric""),expect_column_min_to_be_between(column=""balance"", min_value=0)","expect_column_values_to_be_of_type(column=""balance"", type_=""numeric""),expect_column_min_to_be_between(column=""balance"", min_value=0)",1.0,1.0,1.0,100.00000000000004
For field 'rating': Ensure the average rating is between 1 and 5. Ensure there are no null values in this column.,"expect_column_mean_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")","expect_column_mean_to_be_between(column=""rating"", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=""rating"")",1.0,1.0,1.0,100.00000000000004
"For the `salary` field: Confirm that all values are of type 'numeric' and fall within the range of $30,000 to $200,000.","expect_column_values_to_be_of_type(column=""salary"", type_=""numeric""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)","expect_column_values_to_be_of_type(column=""salary"", type_=""numeric""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)",1.0,1.0,1.0,100.00000000000004
In the `fraud_alert_date` column: Ensure all entries are formatted as 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""fraud_alert_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""fraud_alert_date"")","expect_column_values_to_match_strftime_format(column=""fraud_alert_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""fraud_alert_date"")  # Assuming dateutil is installed, this will check if the values can be parsed as dates.",0.8,0.7945205479452054,0.8,79.18681695065528
"For table 'subscription_plans': Ensure the columns 'plan_id', 'plan_name', and 'price' exist in that order. Ensure the number of rows is equal to 5.","expect_table_columns_to_match_ordered_list(column_list=[""plan_id"", ""plan_name"", ""price""]),expect_table_row_count_to_equal(value=5)","expect_column_values_to_be_in_set(column=""plan_id"", value_set=[""plan1"", ""plan2"", ""plan3"", ""plan4"", ""plan5""]),expect_table_row_count_to_equal(table=""subscription_plans"", value=5)",0.64,0.2916666666666667,0.56,39.02507243761099
Confirm that the Kullback-Leibler divergence between `purchase_amounts` across different customer types is below 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""purchase_amounts"", threshold=0.1)","expect_multicolumn_kl_divergence_to_be_between(column_list=[""purchase_amounts""], min_value=0.0, max_value=0.1)",0.6060606060606061,0.3225806451612903,0.6060606060606061,37.73086331579574
"For field 'genre': Ensure the field exists. Validate that all values in 'genre' match at least one of the predefined categories: (Drama, Comedy, Action, Documentary).","expect_column_to_exist(column=""genre""),expect_column_values_to_be_in_set(column=""genre"", value_set=[""Drama"", ""Comedy"", ""Action"", ""Documentary""])","expect_column_to_exist(column=""genre""),expect_column_values_to_be_in_set(column=""genre"", value_set=[""Drama"", ""Comedy"", ""Action"", ""Documentary""])",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_age` column values are within the range of 0 to 120 years.,"expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)","expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)",1.0,1.0,1.0,100.00000000000004
For field 'hire_date': Ensure this field is required (not null). Confirm that all dates in (hire_date) are in 'YYYY-MM-DD' format and are prior to the current date.,"expect_column_values_to_not_be_null(column=""hire_date""),expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # This ensures the dates can be parsed,# Additional check for dates being prior to the current date would typically require a custom expectation, which is not listed in the provided expectations.","expect_column_values_to_not_be_null(column=""hire_date""),expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""hire_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.631578947368421,0.5892857142857143,0.631578947368421,66.95683998026097
Ensure the `voter_id` column contains unique values and matches the format 'VOTER-\d{8}'.,"expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_match_regex(column=""voter_id"", regex=r""^VOTER-\d{8}$"")","expect_column_values_to_be_unique(column=""voter_id""),expect_column_values_to_match_regex(column=""voter_id"", regex=r""^VOTER-\d{8}$"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_fee': Ensure the field matches the type 'decimal'. Ensure the field contains values greater than or equal to 0. Ensure this field exists.,"expect_column_to_exist(column=""transaction_fee""),expect_column_values_to_be_of_type(column=""transaction_fee"", type_=""decimal""),expect_column_values_to_be_between(column=""transaction_fee"", min_value=0, max_value=None)","expect_column_to_exist(column=""transaction_fee""),expect_column_values_to_be_of_type(column=""transaction_fee"", type_=""decimal""),expect_column_values_to_be_between(column=""transaction_fee"", min_value=0)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.13468812604467
For the `reviews` field: Ensure it contains valid JSON objects that conform to the defined JSON schema. Ensure this field exists.,"expect_column_to_exist(column=""reviews""),expect_column_values_to_match_json_schema(column=""reviews"")","expect_column_to_exist(column=""reviews""),expect_column_values_to_match_json_schema(column=""reviews"", schema={""type"": ""object"", ""properties"": {""review"": {""type"": ""object"", ""properties"": {""rating"": {""type"": ""number""}, ""text"": {""type"": ""string""}, ""date"": {""type"": ""string""}, ""author"": {""type"": ""string""}, ""product"": {""type"": ""string""}}}, ""reviews"": {""type"": ""array"", ""items"": {""type"": ""object"", ""properties"": {""review"": {""type"": ""object"", ""properties"": {""rating"": {""type"": ""number""}, ""text"": {""type"": ""string""}, ""date"": {""type"": ""string""}, ""author"": {""type"": ""string""}, ""product"": {""type"": ""string""}}}, ""reviews"": {""type"": ""array"", ""items"": {""type"": ""object"", ""properties"": {""review"": {""type"": ""object"", ""properties"": {""rating"": {""type"": ""number""}, ""text"": {""type"": ""string""}, ""date"": {""type"": ""string""}, ""author"": {""type"": ""string""}, ""product"": {""type"": ""string""}}}, ""reviews"": {""type"": ""array"", ""items",0.27522935779816515,0.2616822429906542,0.27522935779816515,8.191900471908884
For field 'manager_id': Ensure the field matches the type 'text'. Ensure values in (manager_id) must exist in employees (employee_id). Ensure this field exists.,"expect_column_to_exist(column=""manager_id""),expect_column_values_to_be_of_type(column=""manager_id"", type_=""text""),expect_column_values_to_be_in_set(column=""manager_id"", value_set=employees[""employee_id""])","expect_column_to_exist(column=""manager_id""),expect_column_values_to_be_of_type(column=""manager_id"", type_=""text""),expect_column_values_to_be_in_set(column=""manager_id"", value_set=employees[""employee_id""])",1.0,1.0,1.0,100.00000000000004
Confirm that the `hire_date` column values are greater than or equal to `1980-01-01` and less than the current date.,"expect_column_values_to_be_between(column=""hire_date"", min_value=""1980-01-01"", max_value=""current_date"")","expect_column_values_to_be_between(column=""hire_date"", min_value=""1980-01-01"", max_value=""today"")",0.9142857142857143,0.9090909090909091,0.9142857142857143,89.47693915921018
For the `editor_notes` column: Validate that string lengths are less than 250 characters. Confirm the existence of this column.,"expect_column_to_exist(column=""editor_notes""),expect_column_value_lengths_to_be_between(column=""editor_notes"", min_value=0, max_value=250)","expect_column_to_exist(column=""editor_notes""),expect_column_value_lengths_to_be_between(column=""editor_notes"", min_value=0, max_value=250)",1.0,1.0,1.0,100.00000000000004
For the 'job_applications' table: Ensure the number of rows is equal to the number of entries in the 'candidates' table. Ensure this field exists.,"expect_table_row_count_to_equal_other_table(table_name=""job_applications"", other_table_name=""candidates""),expect_table_columns_to_match_set(column_set=[""job_applications""], exact_match=False)","expect_table_row_count_to_equal_other_table(table=""job_applications"", other_table=""candidates"")  # This expectation will fail because the number of rows in the ""job_applications"" table is not equal to the number of rows in the ""candidates"" table.  # Note: This expectation is not implemented yet.  #expect_column_to_exist(column=""number_of_rows"")  # This expectation will always pass because the column ""number_of_rows"" does not exist.  #expect_column_values_to_be_of_type(column=""number_of_rows"", type_=""int"")  # This expectation will always pass because the column ""number_of_rows"" is of type ""int"".  #expect_column_values_to_be_between(column=""number_of_rows"", min_value=0, max_value=None)  # This expectation will always pass because the column ""number_of_rows"" has no maximum value.  #expect_column_values_to_be_unique(column=""number_of_rows"")  # This expectation will always pass because the column ""number_of_rows"" has no duplicate values.  #expect_column_values_to_be_of_type(column=""number_of_rows"", type_=""int"")  # This expectation will always pass because the column ""number_of_rows"" is of type ""int"".  #",0.19999999999999998,0.125,0.18095238095238095,10.987187360656584
Confirm that the `resource_access` records for each user reflect a non-empty list of accessed materials in the `learning_resources` table.,"expect_column_values_to_not_be_null(column=""learning_resources""),expect_column_values_to_be_increasing(column=""resource_access"")","expect_column_values_to_not_be_null(column=""resource_access""),expect_column_values_to_be_in_set(column=""resource_access"", value_set=learning_resources_table)",0.8181818181818181,0.6666666666666666,0.7727272727272727,66.33670270452727
Check that the sum of the `total_deliveries` matches the expected total of 1000 for all shipments. Validate that this field exists.,"expect_column_to_exist(column=""total_deliveries""),expect_column_sum_to_be_between(column=""total_deliveries"", min_value=1000, max_value=1000)","expect_column_to_exist(column=""total_deliveries""),expect_column_values_to_be_between(column=""total_deliveries"", min_value=0, max_value=1000)",0.9090909090909091,0.8095238095238095,0.9090909090909091,89.21877278718925
"For field 'customer_status': Ensure the field is required (not null). Validate that the values conform to the expected categories ['Active', 'Inactive', 'Prospect'].","expect_column_values_to_not_be_null(column=""customer_status""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=[""Active"", ""Inactive"", ""Prospect""])","expect_column_values_to_not_be_null(column=""customer_status""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive', 'Prospect'])",1.0,1.0,1.0,80.58527146550718
For the `guest_count` column: Ensure the mean value is between 1 and 10.,"expect_column_mean_to_be_between(column=""guest_count"", min_value=1, max_value=10)","expect_column_mean_to_be_between(column=""guest_count"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
For the `age` field: Ensure this field exists and contains values within the range of 18 to 65.,"expect_column_to_exist(column=""age""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=65)","expect_column_to_exist(column=""age""),expect_column_values_to_be_between(column=""age"", min_value=18, max_value=65)",1.0,1.0,1.0,100.00000000000004
Check the `json_forecast` entries to ensure they are valid JSON objects and follow the designated schema.,"expect_column_values_to_be_json_parseable(column=""json_forecast""),expect_column_values_to_match_json_schema(column=""json_forecast"", schema={})  # Replace {} with the actual schema if available.","expect_column_values_to_be_json_parseable(column=""json_forecast""),expect_column_values_to_match_json_schema(column=""json_forecast"", schema={""type"": ""object"", ""properties"": {""date"": {""type"": ""string""}, ""value"": {""type"": ""number""}}})}  # Replace with actual column names and schema.",0.7692307692307693,0.6666666666666666,0.7692307692307693,49.4997429587471
Confirm that the `year_built` column contains integer values and that all entries are within the range of 1900 to the current year.,"expect_column_values_to_be_of_type(column=""year_built"", type_=""int""),expect_column_values_to_be_between(column=""year_built"", min_value=1900, max_value=current_year)","expect_column_values_to_be_of_type(column=""year_built"", type_=""int""),expect_column_values_to_be_between(column=""year_built"", min_value=1900, max_value=datetime.datetime.now().year)",0.9310344827586207,0.8928571428571429,0.9310344827586207,86.46268854638595
"Ensure the `case_status` column contains only distinct values in the set `['open', 'closed', 'in_progress']`.","expect_column_distinct_values_to_equal_set(column=""case_status"", value_set=['open', 'closed', 'in_progress'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['open', 'closed', 'in_progress'])",0.875,0.7333333333333333,0.875,84.99508493439812
For field 'court_date': Ensure the field adheres to the datetime format 'YYYY-MM-DD'. Ensure this field cannot be null.,"expect_column_values_to_match_strftime_format(column=""court_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""court_date"")","expect_column_values_to_match_strftime_format(column=""court_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""court_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `product_sku` column has unique values representing each product. Confirm that this column does not allow null entries.,"expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_not_be_null(column=""product_sku"")","expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_not_be_null(column=""product_sku"")",1.0,1.0,1.0,100.00000000000004
"For field `platform`: Validate that values adhere to a specified JSON schema, ensuring structural correctness and compliance with defined types.","expect_column_values_to_match_json_schema(column=""platform"", schema={""type"": ""object"", ""properties"": {}})","expect_column_values_to_match_json_schema(column=""platform"", schema={""type"": ""object"", ""properties"": {""type"": {""type"": ""string""}, ""version"": {""type"": ""string""}, ""platform"": {""type"": ""string""}}})",0.7428571428571429,0.7272727272727273,0.7428571428571429,45.775856318138274
For field 'amount': Validate that all values are non-negative numbers. Ensure no null values.,"expect_column_values_to_be_between(column=""amount"", min_value=0),expect_column_values_to_not_be_null(column=""amount"")","expect_column_values_to_be_between(column=""amount"", min_value=0),expect_column_values_to_not_be_null(column=""amount"")",1.0,1.0,1.0,100.00000000000004
Ensure the `experiment_date` column contains datetime strings that can be parsed using dateutil in the format 'MM/DD/YYYY'.,"expect_column_values_to_be_dateutil_parseable(column=""experiment_date""),expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format=""%m/%d/%Y"")","expect_column_values_to_match_strftime_format(column=""experiment_date"", strftime_format=""%m/%d/%Y"")",0.7499999999999999,0.7368421052631579,0.7499999999999999,53.70728021858611
Ensure the `article_id` column has unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_not_be_null(column=""article_id"")","expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_not_be_null(column=""article_id"")",1.0,1.0,1.0,100.00000000000004
Validate that the `score` column contains integer values greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""score"", min_value=0, max_value=None)",0.717948717948718,0.7027027027027027,0.717948717948718,39.32407208685984
"Ensure the `funding_source` column contains only values from the set `['Federal', 'State', 'Local', 'Private']`.","expect_column_values_to_be_in_set(column=""funding_source"", value_set=['Federal', 'State', 'Local', 'Private'])","expect_column_values_to_be_in_set(column=""funding_source"", value_set=['Federal', 'State', 'Local', 'Private'])",1.0,1.0,1.0,100.00000000000004
"For field 'client_email': Ensure the field exists. Validate that all values in (client_email) do not match any SQL-like patterns from the list ['SELECT', 'DROP', 'INSERT'].","expect_column_to_exist(column=""client_email""),expect_column_values_to_not_match_regex_list(column=""client_email"", regex_list=[r"".*SELECT.*"", r"".*DROP.*"", r"".*INSERT.*""])","expect_column_to_exist(column=""client_email""),expect_column_values_to_not_match_regex_list(column=""client_email"", regex_list=['SELECT', 'DROP', 'INSERT'])",0.9387755102040816,0.8085106382978724,0.9387755102040816,59.68682093700062
Ensure the `block_height` column values are distinct and sorted in ascending order.,"expect_column_values_to_be_unique(column=""block_height""),expect_column_values_to_be_increasing(column=""block_height"")","expect_column_values_to_be_unique(column=""block_height""),expect_column_values_to_be_increasing(column=""block_height"")  # Note: This is just an example, you may need to adjust the expectation based on your specific requirements.",0.6666666666666666,0.6538461538461539,0.6666666666666666,64.21251524438739
Check that the `enrollment_date` column values pass the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""enrollment_date"", threshold=0.05)","expect_column_p_value_to_be_greater_than(column=""enrollment_date"", threshold=0.05)",0.8750000000000001,0.8000000000000002,0.8750000000000001,72.87934895122054
"Ensure the `square_footage` column values are within the range of 300 to 20,000 square feet.","expect_column_values_to_be_between(column=""square_footage"", min_value=300, max_value=20000)","expect_column_values_to_be_between(column=""square_footage"", min_value=300, max_value=20000)",1.0,1.0,1.0,100.00000000000004
For field 'departure_time': Ensure the field is required (not null). Validate that the datetime format matches 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.,"expect_column_values_to_not_be_null(column=""departure_time""),expect_column_values_to_match_strftime_format(column=""departure_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""departure_time"")","expect_column_values_to_not_be_null(column=""departure_time""),expect_column_values_to_match_strftime_format(column=""departure_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""departure_time"")  # Assuming dateutil is installed.",0.9500000000000001,0.9487179487179488,0.9500000000000001,93.58193846533962
Ensure the average `data_usage` in the `monthly_usage` column is between 1 and 100 GB.,"expect_column_mean_to_be_between(column=""monthly_usage"", min_value=1, max_value=100)","expect_column_mean_to_be_between(column=""monthly_usage"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
For `attack_vector`: Ensure that all entries are valid JSON objects and adhere to the defined JSON schema for attack vectors.,"expect_column_values_to_be_json_parseable(column=""attack_vector""),expect_column_values_to_match_json_schema(column=""attack_vector"", json_schema=""defined_schema_for_attack_vectors"")","expect_column_values_to_be_json_parseable(column=""attack_vector""),expect_column_values_to_match_json_schema(column=""attack_vector"", schema={""type"": ""object"", ""properties"": {""type"": {""type"": ""string""}, ""value"": {""type"": ""string""}, ""description"": ""The type of attack vector""}, ""required"": [""type"", ""value"", ""description""]})  # Replace with actual JSON schema for attack vectors.",0.6933333333333334,0.6301369863013698,0.6666666666666667,35.34495417377213
Ensure the `transaction_id` column contains only distinct values and that it matches the specified pattern 'TX-\\d{6}'.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^TX-\d{6}$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""TX-\d{6}"")",1.0,1.0,1.0,91.00091141126883
"For the `property_type` field: Ensure it matches the type `text` and contains values from the list `['House', 'Apartment', 'Condo']`.","expect_column_values_to_be_of_type(column=""property_type"", type_=""text""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['House', 'Apartment', 'Condo'])","expect_column_values_to_be_of_type(column=""property_type"", type_=""text""),expect_column_values_to_be_in_set(column=""property_type"", value_set=['House', 'Apartment', 'Condo'])",1.0,1.0,1.0,100.00000000000004
Validate that the `json_response` column contains valid JSON objects and conforms to the expected schema for API responses.,"expect_column_values_to_be_json_parseable(column=""json_response""),expect_column_values_to_match_json_schema(column=""json_response"", schema={/* schema definition here */})","expect_column_values_to_be_json_parseable(column=""json_response""),expect_column_values_to_match_json_schema(column=""json_response"", schema={""type"": ""object"", ""properties"": {""status"": {""type"": ""string""}, ""data"": {""type"": ""object"", ""properties"": {""message"": {""type"": ""string""}, ""result"": {""type"": ""object"", ""properties"": {""total"": {""type"": ""number""}, ""count"": {""type"": ""number""}, ""items"": {""type"": ""array"", ""items"": {""type"": ""object"", ""properties"": {""id"": {""type"": ""string""}, ""name"": {""type"": ""string""}, ""type"": {""type"": ""string""}, ""status"": {""type"": ""string""}, ""created_at"": {""type"": ""string""}, ""updated_at"": {""type"": ""string""}}}}}}}}}}}}})",0.4421052631578947,0.4301075268817204,0.4421052631578947,16.712073839855844
Ensure the `order_date` column adheres to the datetime format of `'YYYY-MM-DD'` and is not a future date.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date""),expect_column_values_to_be_less_than(column=""order_date"", value=""now"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date""),expect_column_values_to_be_between(column=""order_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.8000000000000002,0.7469879518072289,0.8000000000000002,73.34102308857527
Ensure the `product_id` column has unique values and is of type 'integer'.,"expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"For the `employee_count`: Ensure that the mean value of this column falls between 1 and 500, and check for any entries that are out of this range.","expect_column_mean_to_be_between(column=""employee_count"", min_value=1, max_value=500),expect_column_values_to_be_between(column=""employee_count"", min_value=1, max_value=500)","expect_column_mean_to_be_between(column=""employee_count"", min_value=1, max_value=500),expect_column_values_to_be_between(column=""employee_count"", min_value=1, max_value=500)",1.0,1.0,1.0,100.00000000000004
Ensure the `number_of_attacks` column has a minimum value of 0 and a maximum value of 500.,"expect_column_min_to_be_between(column=""number_of_attacks"", min_value=0),expect_column_max_to_be_between(column=""number_of_attacks"", max_value=500)","expect_column_values_to_be_between(column=""number_of_attacks"", min_value=0, max_value=500)",0.7142857142857143,0.6,0.7142857142857143,44.29849525334805
Verify that the `published_date` column adheres to the format '%Y-%m-%d' and is not a future date.,"expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""published_date"")  # This is to ensure the date is parseable,# To verify that the date is not a future date, you would typically use a custom validator, which is not part of the standard expectations. However, we can express this conceptually as:,# expect_column_values_to_be_less_than(column=""published_date"", value=current_date)  # This line is illustrative and would require the current date as a parameter.","expect_column_values_to_match_strftime_format(column=""published_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""published_date""),expect_column_values_to_be_between(column=""published_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.5323741007194245,0.4671532846715329,0.5323741007194245,48.14072651416631
"Ensure that the `status` column does not include any values outside the set `['Active', 'Inactive']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive'])",1.0,1.0,1.0,100.00000000000004
"For the `communication_type`: Ensure the values must match either `['Email', 'Chat', 'Video']` and do not include any other types.","expect_column_values_to_be_in_set(column=""communication_type"", value_set=['Email', 'Chat', 'Video']),expect_column_values_to_not_be_in_set(column=""communication_type"", value_set=['Email', 'Chat', 'Video'])","expect_column_values_to_be_in_set(column=""communication_type"", value_set=['Email', 'Chat', 'Video'])",0.6521739130434783,0.6363636363636364,0.6521739130434783,33.681034075950286
"Verify the distribution of `salary` values adheres to the expected parameters, with KL divergence below 0.1.","expect_column_kl_divergence_to_be_less_than(column=""salary"", threshold=0.1)","expect_column_kl_divergence_to_be_between(column=""salary"", min_value=0.0, max_value=0.1)",0.6666666666666667,0.5,0.6666666666666667,56.967670627592234
"For the `grade` column: Ensure the values are within the set `['A', 'B', 'C', 'D', 'F']`.","expect_column_values_to_be_in_set(column=""grade"", value_set=['A', 'B', 'C', 'D', 'F'])","expect_column_values_to_be_in_set(column=""grade"", value_set=['A', 'B', 'C', 'D', 'F'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `product_id` column contains unique identifiers, with no duplicates present.","expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")  # Note: This assumes that the column is not null. If it is null, you may need to modify the expectation accordingly.",0.36734693877551017,0.3404255319148936,0.36734693877551017,27.36100656840769
Ensure the `temperature` column contains no null values and is of type 'float'.,"expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")","expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")",1.0,1.0,1.0,100.00000000000004
"Check that the `visit_type` field contains values only from the set `['Routine', 'Emergency', 'Follow-up']` and no duplicates exist.","expect_column_values_to_be_in_set(column=""visit_type"", value_set=['Routine', 'Emergency', 'Follow-up']),expect_column_values_to_be_unique(column=""visit_type"")","expect_column_values_to_be_in_set(column=""visit_type"", value_set=['Routine', 'Emergency', 'Follow-up']),expect_column_values_to_be_unique(column=""visit_type"")  # This expectation will fail if there are duplicate values in the column.",0.8064516129032258,0.8,0.8064516129032258,79.25282106614476
For field 'device_status': Ensure the field exists. Validate that values do not match the pattern 'inactive|unknown'.,"expect_column_to_exist(column=""device_status""),expect_column_values_to_not_match_regex(column=""device_status"", regex=r""inactive|unknown"")","expect_column_to_exist(column=""device_status""),expect_column_values_to_not_match_regex(column=""device_status"", regex=r""^inactive|unknown$"")",1.0,1.0,1.0,90.01491242518759
Verify that the `confidence_interval` column has values formatted as `0.XX` and fall within the range of 0.0 to 1.0.,"expect_column_values_to_match_regex(column=""confidence_interval"", regex=r""^0\.\d{2}$""),expect_column_values_to_be_between(column=""confidence_interval"", min_value=0.0, max_value=1.0)","expect_column_values_to_match_regex(column=""confidence_interval"", regex=r""^\d+\.\d{2}$""),expect_column_values_to_be_between(column=""confidence_interval"", min_value=0.0, max_value=1.0)",0.967741935483871,0.9333333333333333,0.967741935483871,93.48189981364854
"For the `content_rating` column: Ensure values match the set `['G', 'PG', 'PG-13', 'R']`.","expect_column_values_to_be_in_set(column=""content_rating"", value_set=['G', 'PG', 'PG-13', 'R'])","expect_column_values_to_be_in_set(column=""content_rating"", value_set=['G', 'PG', 'PG-13', 'R'])",1.0,1.0,1.0,100.00000000000004
"For the `shipment_weight` field, ensure that all values are of type `float`, non-null, and fall within the range of 0.1 to 1000.0.","expect_column_values_to_be_of_type(column=""shipment_weight"", type_=""float""),expect_column_values_to_not_be_null(column=""shipment_weight""),expect_column_values_to_be_between(column=""shipment_weight"", min_value=0.1, max_value=1000.0)","expect_column_values_to_be_of_type(column=""shipment_weight"", type_=""float""),expect_column_values_to_not_be_null(column=""shipment_weight""),expect_column_values_to_be_between(column=""shipment_weight"", min_value=0.1, max_value=1000.0)",1.0,1.0,1.0,100.00000000000004
"For field 'num_bedrooms': Ensure the field exists. Validate that the values in (num_bedrooms) are integers ranging from 1 to 10, inclusive.","expect_column_to_exist(column=""num_bedrooms""),expect_column_values_to_be_between(column=""num_bedrooms"", min_value=1, max_value=10),expect_column_values_to_be_of_type(column=""num_bedrooms"", type_=""int"")","expect_column_to_exist(column=""num_bedrooms""),expect_column_values_to_be_of_type(column=""num_bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""num_bedrooms"", min_value=1, max_value=10)",1.0,0.9696969696969697,0.6764705882352942,99.01141077297541
Validate that the `departure_time` field follows the `'%Y-%m-%d %H:%M:%S'` format and contains no null values.,"expect_column_to_exist(column=""departure_time""),expect_column_values_to_match_strftime_format(column=""departure_time"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_not_be_null(column=""departure_time"")","expect_column_values_to_match_strftime_format(column=""departure_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""departure_time"")",0.888888888888889,0.8852459016393442,0.888888888888889,72.86114094152522
For the `communication_timestamp` field: Ensure the values are in the ISO 8601 format and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""communication_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""communication_timestamp"")","expect_column_values_to_match_strftime_format(column=""communication_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_dateutil_parseable(column=""communication_timestamp"")  # This assumes that dateutil is installed.  -->",0.90625,0.9032258064516129,0.90625,87.09388880833535
Ensure the `polling_station` column contains distinct values from the predefined list of valid polling locations.,"expect_column_values_to_be_in_set(column=""polling_station"", value_set=valid_polling_locations)","expect_column_values_to_be_in_set(column=""polling_station"", value_set=valid_polling_locations)",1.0,1.0,1.0,100.00000000000004
Ensure that the values in the `job_title` column are unique combinations when paired with the `department` column.,"expect_compound_columns_to_be_unique(column_A=""job_title"", column_B=""department"")","expect_compound_columns_to_be_unique(column_A=""job_title"", column_B=""department"")",1.0,1.0,1.0,100.00000000000004
For the `user_profiles`: Ensure that `email` follows a valid email format. Verify that `username` is unique across records.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""username"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""username"")  # Note: This expectation may not be applicable depending on the requirements.",0.5806451612903225,0.5333333333333333,0.5806451612903225,64.46291551500948
Validate that the `vehicle_identification_number` (VIN) field matches the pattern for VINs and has a length of exactly `17` characters.,"expect_column_values_to_match_regex(column=""vehicle_identification_number"", regex=r""^[A-HJ-NPR-Z0-9]{17}$""),expect_column_value_lengths_to_equal(column=""vehicle_identification_number"", length=17)","expect_column_value_lengths_to_equal(column=""vehicle_identification_number"", value=17),expect_column_values_to_match_regex(column=""vehicle_identification_number"", regex=r""^[A-Z0-9]{17}$"")  # Regular expression to match VINs.",0.8571428571428572,0.7868852459016394,0.5714285714285713,81.71208619716471
In the `balance` column: Verify that all values are of type 'float' and are greater than or equal to zero. Ensure there are no missing values.,"expect_column_values_to_be_of_type(column=""balance"", type_=""float""),expect_column_values_to_be_between(column=""balance"", min_value=0),expect_column_values_to_not_be_null(column=""balance"")","expect_column_values_to_be_of_type(column=""balance"", type_=""float""),expect_column_values_to_be_between(column=""balance"", min_value=0),expect_column_values_to_not_be_null(column=""balance"")",1.0,1.0,1.0,100.00000000000004
Ensure the `order_date` column values are in a valid date format and fall within the range of the current fiscal year.,"expect_column_values_to_be_dateutil_parseable(column=""order_date""),expect_column_values_to_be_between(column=""order_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""order_date"", min_value=""2023-01-01"", max_value=""2024-12-31"")  # Replace with actual fiscal year start/end dates.",0.7042253521126761,0.6086956521739131,0.7042253521126761,62.62445100355593
Ensure the `wind_speed` column does not exceed 150 and is consistently recorded as a float.,"expect_column_max_to_be_between(column=""wind_speed"", min_value=None, max_value=150),expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float"")","expect_column_values_to_be_between(column=""wind_speed"", min_value=0, max_value=150),expect_column_values_to_be_of_type(column=""wind_speed"", type_=""float"")",0.9259259259259259,0.8461538461538461,0.9259259259259259,91.58330538871908
"Ensure the `email` column contains only valid email addresses that match the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
For the `author_id` column: Ensure that all values are integers greater than `0` and exist in the `user_id` list.,"expect_column_values_to_be_of_type(column=""author_id"", type_=""int""),expect_column_values_to_be_between(column=""author_id"", min_value=1, max_value=None),expect_column_values_to_be_in_set(column=""author_id"", value_set=user_id_list)","expect_column_values_to_be_of_type(column=""author_id"", type_=""int""),expect_column_values_to_be_between(column=""author_id"", min_value=1, max_value=None),expect_column_values_to_be_in_set(column=""author_id"", value_set=user_id_list)",1.0,1.0,1.0,100.00000000000004
"For field 'coverage_type': Ensure the field matches the type 'text'. Ensure values in 'coverage_type' must exist in the set ['Full Coverage', 'Liability', 'Collision']. Ensure this field exists.","expect_column_to_exist(column=""coverage_type""),expect_column_values_to_be_of_type(column=""coverage_type"", type_=""text""),expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Full Coverage', 'Liability', 'Collision'])","expect_column_to_exist(column=""coverage_type""),expect_column_values_to_be_of_type(column=""coverage_type"", type_=""text""),expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Full Coverage', 'Liability', 'Collision'])  # Note: This is a placeholder value_set, please replace with actual value_set.",0.8433734939759037,0.8395061728395062,0.8433734939759037,80.90182644202635
"For the `service_plan` column: Ensure it contains only values from the allowed set `['Basic', 'Standard', 'Premium']`.","expect_column_values_to_be_in_set(column=""service_plan"", value_set=['Basic', 'Standard', 'Premium'])","expect_column_values_to_be_in_set(column=""service_plan"", value_set=['Basic', 'Standard', 'Premium'])",1.0,1.0,1.0,100.00000000000004
Ensure the `json_response` column contains valid JSON objects that conform to the specified schema in all tables.,"expect_column_values_to_be_json_parseable(column=""json_response""),expect_column_values_to_match_json_schema(column=""json_response"", schema=specified_schema)","expect_column_values_to_be_json_parseable(column=""json_response""),expect_column_values_to_match_json_schema(column=""json_response"", schema={""type"": ""object"", ""properties"": {""table1"": {""type"": ""object"", ""properties"": {""column1"": {""type"": ""string""}, ""column2"": {""type"": ""number""}, ""column3"": {""type"": ""boolean""}}}, ""table2"": {""type"": ""object"", ""properties"": {""column4"": {""type"": ""string""}, ""column5"": {""type"": ""number""}, ""column6"": {""type"": ""boolean""}}}}})",0.5753424657534246,0.5633802816901408,0.5753424657534246,24.650744440181263
Ensure the `submission_date` is arranged in increasing order according to `assignment_id`.,"expect_column_values_to_be_increasing(column=""submission_date"", order_by_column=""assignment_id"")","expect_column_values_to_be_increasing(column=""submission_date"", order_by=""assignment_id"")",0.962962962962963,0.8799999999999999,0.962962962962963,88.38992012581365
Check that the count of unique `lawyer_id` values in the `cases` table matches the count of entries in the `lawyers` table.,"expect_column_pair_values_to_be_equal(column_A=""lawyer_id"", column_B=""lawyers.lawyer_id"")","expect_table_row_count_to_equal_other_table(table=""cases"", other_table=""lawyers"")",0.27586206896551724,0.0,0.27586206896551724,10.659732160825955
Verify that the `delivery_time` column's values are within the range of 1 to 30 days from the order date.,"expect_column_values_to_be_between(column=""delivery_time"", min_value=1, max_value=30)","expect_column_values_to_be_between(column=""delivery_time"", min_value=1, max_value=30)",1.0,1.0,1.0,100.00000000000004
Confirm that the `weight` column has values within the range of `0.1` to `1000` kilograms.,"expect_column_values_to_be_between(column=""weight"", min_value=0.1, max_value=1000)","expect_column_values_to_be_between(column=""weight"", min_value=0.1, max_value=1000)",1.0,1.0,1.0,100.00000000000004
Verify that the `total_price` is the sum of `item_price` and `shipping_cost` for each order record.,"expect_column_pair_values_to_be_equal(column_A=""total_price"", column_B=""item_price + shipping_cost"")","expect_column_sum_to_equal(column=""total_price"", value=expect_column_values_to_be_between(column=""total_price"", min_value=0, max_value=None))",0.5365853658536585,0.2564102564102564,0.4390243902439025,33.74600819504528
For the `ballot_data` field: Validate that it is a valid JSON object and conforms to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""ballot_data""),expect_column_values_to_match_json_schema(column=""ballot_data"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""ballot_data""),expect_column_values_to_match_json_schema(column=""ballot_data"", schema={""type"": ""object"", ""properties"": {""candidate_list"": {""type"": ""array"", ""items"": {""type"": ""string""}}, ""vote_count"": {""type"": ""integer""}, ""total_votes"": {""type"": ""integer""}}})}  # (1)",0.7301587301587301,0.7213114754098361,0.7301587301587301,42.3836969485038
For field 'email_address': Ensure the field matches the type 'text'. Validate that all values in (email_address) conform to the regex pattern for valid email formats. Ensure this field exists.,"expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")","expect_column_to_exist(column=""email_address""),expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regex for valid email formats.",0.9295774647887324,0.927536231884058,0.9295774647887324,93.16988923137689
Verify that the `item_code` column contains valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""item_code"")","expect_column_values_to_match_json_schema(column=""item_code"", schema={""type"": ""object"", ""properties"": {""item_code"": {""type"": ""string""}, ""item_name"": {""type"": ""string""}, ""item_description"": {""type"": ""string""}, ""item_price"": {""type"": ""number""}, ""item_quantity"": {""type"": ""number""}, ""item_date"": {""type"": ""string""}, ""item_status"": {""type"": ""string""}, ""item_image"": {""type"": ""string""}, ""item_video"": {""type"": ""string""}, ""item_file"": {""type"": ""string""}, ""item_link"": {""type"": ""string""}, ""item_tags"": {""type"": ""array""}, ""item_category"": {""type"": ""string""}, ""item_subcategory"": {""type"": ""string""}, ""item_brand"": {""type"": ""string""}, ""item_color"": {""type"": ""string""}, ""item_size"": {""type"": ""string""}, ""item_material"": {""type"": ""string""}, ""item_origin"": {""type"": ""string""}, ""item_country"": {""type"": ""string""}, ""item_state"": {""type"": ""string""}, ""item_condition"": {""type"": ""string""}, ""item_warranty"": {""type"": ""string""}, ""item",0.17094017094017094,0.15652173913043477,0.17094017094017094,4.789166564670296
Validate that the `order_date` is always earlier than the `delivery_date` for all entries in the orders table.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""order_date"", column_B=""delivery_date"")",1.0,0.8823529411764706,0.8888888888888888,98.6203592144784
For field 'service_request_id': Validate that the length of 'service_request_id' is exactly 12 characters and is unique across the dataset.,"expect_column_value_lengths_to_equal(column=""service_request_id"", length=12),expect_column_values_to_be_unique(column=""service_request_id"")","expect_column_value_lengths_to_equal(column=""service_request_id"", value=12),expect_column_values_to_be_unique(column=""service_request_id"")  # Replace with actual column names based on your use case.",0.7777777777777778,0.7307692307692307,0.7777777777777778,75.55009005241325
"For field `matches_played`: Ensure the mean is greater than 10, and values are of type 'integer' with no missing entries.","expect_column_mean_to_be_between(column=""matches_played"", min_value=10),expect_column_values_to_be_of_type(column=""matches_played"", type_=""integer""),expect_column_values_to_not_be_null(column=""matches_played"")","expect_column_mean_to_be_between(column=""matches_played"", min_value=10),expect_column_values_to_be_of_type(column=""matches_played"", type_=""int""),expect_column_values_to_not_be_null(column=""matches_played"")  # Note: This assumes there are no null values in the dataset. If there are, you may need to modify this expectation accordingly.",0.7333333333333333,0.7045454545454546,0.7333333333333333,71.74252714145365
For field 'usage_data': Ensure the field contains valid JSON objects conforming to the specified JSON schema for energy consumption.,"expect_column_values_to_match_json_schema(column=""usage_data"", schema=""specified JSON schema for energy consumption"")","expect_column_values_to_match_json_schema(column=""usage_data"", schema={""type"": ""object"", ""properties"": {""timestamp"": {""type"": ""string""}, ""consumption"": {""type"": ""number""}}, ""required"": [""timestamp"", ""consumption""]})",0.6,0.5263157894736842,0.6,29.325729529456275
Ensure the `threat_reports.pdf` file exists and is greater than `1KB` but less than `10MB`.,"expect_file_to_exist(file_path=""threat_reports.pdf""),expect_file_size_to_be_between(file_path=""threat_reports.pdf"", min_value=1024, max_value=10485760)","expect_file_to_exist(file_path=""threat_reports.pdf""),expect_file_size_to_be_between(min_value=1_000, max_value=10_000_000)  # Replace 1_000 with 1KB and 10_000_000 with 10MB.",0.6229508196721311,0.5423728813559322,0.6229508196721311,58.34205235070352
Check that the sum of the `budget` and `expenses` columns equals the `total_cost` column for each record.,"expect_multicolumn_sum_to_equal(column_list=[""budget"", ""expenses""], target_column=""total_cost"")","expect_multicolumn_sum_to_equal(column_list=[""budget"", ""expenses""], target_column=""total_cost"")",1.0,1.0,1.0,100.00000000000004
Check that the `hearing_date` is always later than the `filing_date` for each case.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""hearing_date"", column_B=""filing_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""hearing_date"", column_B=""filing_date"")",1.0,1.0,1.0,100.00000000000004
Verify that the `transaction_date` entries are all in the past and follow the 'YYYY-MM-DD' format.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""1900-01-01"", max_value=""2023-12-31"")",0.732394366197183,0.7246376811594203,0.732394366197183,56.08661113971021
Ensure that combinations of `user_id` and `content_id` are unique within the `user_interactions` dataset.,"expect_compound_columns_to_be_unique(column_a=""user_id"", column_b=""content_id"")","expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""content_id"")",1.0,1.0,1.0,82.93181259810136
Ensure that the combination of `voter_id` and `election_id` is unique across records.,"expect_compound_columns_to_be_unique(columns=[""voter_id"", ""election_id""])","expect_compound_columns_to_be_unique(column_A=""voter_id"", column_B=""election_id"")",0.88,0.6956521739130435,0.88,60.93671089617578
"Ensure the `account_balance` column contains values within the range of $0 to $1,000,000.","expect_column_values_to_be_between(column=""account_balance"", min_value=0, max_value=1000000)","expect_column_values_to_be_between(column=""account_balance"", min_value=0, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
For field 'data_usage': Ensure values in (data_usage) are within the range of 0 to 500 GB. Ensure this field exists.,"expect_column_to_exist(column=""data_usage""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=500)","expect_column_to_exist(column=""data_usage""),expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
For field 'upload_timestamp': Ensure the field matches the type 'datetime'. Validate that the values are formatted as 'YYYY-MM-DD HH:MM:SS' and are not null. Ensure this field exists.,"expect_column_to_exist(column=""upload_timestamp""),expect_column_values_to_be_of_type(column=""upload_timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""upload_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""upload_timestamp"")","expect_column_to_exist(column=""upload_timestamp""),expect_column_values_to_be_of_type(column=""upload_timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""upload_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""upload_timestamp"")  # Replace this line with your actual expectation for this field.",0.9038461538461539,0.9019607843137255,0.9038461538461539,90.28256151137539
"Ensure the `fraud_score` values fall within the defined range of [0, 100] and are of type 'integer'.","expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""fraud_score"", type_=""int"")","expect_column_values_to_be_between(column=""fraud_score"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""fraud_score"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
For field 'transaction_date': Ensure the field is required (not null). Validate that 'transaction_date' follows the format YYYY-MM-DD and is not a future date. Ensure this field exists.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_not_be_null(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_be_in_set(column=""transaction_date"", value_set=[date for date in range(datetime.now().year)])","expect_column_to_exist(column=""transaction_date""),expect_column_values_to_not_be_null(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.7350427350427351,0.6608695652173914,0.7350427350427351,67.09721133842937
For field 'service_request': Ensure this field is required (not null). Validate that values are of type 'text' and conform to expected formats.,"expect_column_values_to_not_be_null(column=""service_request""),expect_column_values_to_be_of_type(column=""service_request"", type_=""text"")","expect_column_values_to_not_be_null(column=""service_request""),expect_column_values_to_be_of_type(column=""service_request"", type_=""text""),expect_column_values_to_match_regex(column=""service_request"", regex=r""^[a-zA-Z0-9\s\.\,\-\(\)\[\]\{\}\;\:\,\?\!\@\#\$\%\^\&\*\(\)\_\+\=\[\]\{\}\;\:\,\?\!\@\#\$\%\^\&\*\(\)\_\+\=\[\]\{\}\;\:\,\?\!\@\#\$\%\^\&\*\(\)\_\+\=\[\]\{\}\;\:\,\?\!\@\#\$\%\^\&\*\(\)\_\+\=\[\]\{\}\;"")  # Replace this regex with your expected format.",0.6567164179104478,0.6461538461538462,0.6567164179104478,17.935352936363778
"Ensure the `call_logs` file exists, is under 10MB in size, and follows the required format with valid headers.","expect_file_to_exist(file_path=""call_logs""),expect_file_size_to_be_between(file_path=""call_logs"", min_value=0, max_value=10_000_000),expect_file_to_have_valid_table_header(file_path=""call_logs"")","expect_file_to_exist(file_path=""call_logs""),expect_file_size_to_be_between(file_path=""call_logs"", min_value=0, max_value=10_000_000),expect_file_to_match_regex(file_path=""call_logs"", regex=r""^Date: \d{4}-\d{2}-\d{2}, Time: \d{2}:\d{2}:\d{2}, Caller: \w+, Called: \w+, Duration: \d{1,2}:\d{1,2}$"")  # Replace \w+ with actual regex pattern for date, time, caller, called, and duration.",0.5892857142857143,0.5636363636363637,0.5892857142857143,42.04562431174806
Ensure the `supplier_id` column contains only distinct values and matches entries in the `suppliers` table.,"expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_entries)","expect_column_values_to_be_unique(column=""supplier_id""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_supplier_ids)",0.9387755102040817,0.9361702127659574,0.9387755102040817,92.97019689158859
Ensure the `patient_id` column contains only unique values. Ensure this field exists and is of type 'integer'.,"expect_column_to_exist(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int"")","expect_column_to_exist(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_be_of_type(column=""patient_id"", type_=""int"")  # Note: This is a hypothetical expectation, as the actual implementation may vary depending on the specific requirements and database engine used.  # Cuttings Knowledge Date: December 2023
Today Date: 26 July 2024",0.6436781609195402,0.6352941176470588,0.6436781609195402,63.27949556508986
"Ensure the `status` column values are from the set `['Pending', 'Shipped', 'Delivered']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered'])",1.0,1.0,1.0,100.00000000000004
For field 'department_code': Ensure the field matches the type 'text'. Validate that all entries in (department_code) match the regex pattern for valid department codes. Ensure this field cannot be null.,"expect_column_values_to_be_of_type(column=""department_code"", type_=""text""),expect_column_values_to_not_be_null(column=""department_code""),expect_column_values_to_match_regex(column=""department_code"", regex=r""^[A-Z]{2,5}$"")","expect_column_values_to_be_of_type(column=""department_code"", type_=""text""),expect_column_values_to_match_regex(column=""department_code"", regex=r""^[A-Z]{2}$""),expect_column_values_to_not_be_null(column=""department_code"")",0.9863013698630138,0.9577464788732395,0.7123287671232876,96.74436788443651
Validate that the sum of `votes` in each `district_number` matches the total `eligible_voters` for that district.,"expect_multicolumn_sum_to_equal(column_A=""votes"", column_B=""eligible_voters"")","expect_column_sum_to_equal(column=""votes"", value=eligible_voters)",0.8181818181818182,0.39999999999999997,0.7272727272727272,45.321242300279486
"For the `billing_amount` column, confirm that the average billing amount is between 50 and 200, and the maximum value does not exceed 500.","expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=200),expect_column_max_to_be_between(column=""billing_amount"", max_value=500)","expect_column_mean_to_be_between(column=""billing_amount"", min_value=50, max_value=200),expect_column_max_to_be_between(column=""billing_amount"", min_value=0, max_value=500)",0.9473684210526316,0.9090909090909091,0.9473684210526316,89.3324110527433
Check that the `unit_price` column has a mean value greater than or equal to 10 and less than or equal to 1000.,"expect_column_mean_to_be_between(column=""unit_price"", min_value=10, max_value=1000)","expect_column_mean_to_be_between(column=""unit_price"", min_value=10, max_value=1000)",1.0,1.0,1.0,100.00000000000004
For field 'transaction_amount': Ensure no missing values. Ensure all values are greater than 0 and of type 'float'.,"expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_values_to_be_greater_than(column=""transaction_amount"", value=0),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""float"")","expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""float""),expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=None)",0.8888888888888888,0.8000000000000002,0.7222222222222222,83.06807384152961
Ensure the `transaction_id` column contains only unique values. Ensure this field is required (not null) and matches the type 'text'.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For field `timestamp`: Ensure the field is required (not null) and matches the datetime format 'YYYY-MM-DDTHH:MM:SSZ'.,"expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_not_be_null(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,100.00000000000004
Check `price`: Ensure the field exists. Validate that prices are greater than 0 and are formatted correctly as decimal values.,"expect_column_to_exist(column=""price""),expect_column_values_to_be_between(column=""price"", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=""price"", type_=""decimal"")","expect_column_to_exist(column=""price""),expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=None),expect_column_values_to_match_regex(column=""price"", regex=r""^\d+(\.\d{1,2})?$"")  # Regular expression to validate decimal values.",0.7469879518072289,0.6913580246913581,0.6506024096385542,55.99831156294593
"Ensure the dataset has at least 50 rows and includes columns `device_id`, `timestamp`, and `status` in that order.","expect_table_row_count_to_be_between(min_value=50),expect_table_columns_to_match_ordered_list(column_list=[""device_id"", ""timestamp"", ""status""])","expect_table_row_count_to_be_between(min_value=50),expect_column_values_to_be_in_set(column=""device_id"", value_set=[""device_id_1"", ""device_id_2"",...]),expect_column_values_to_be_in_set(column=""timestamp"", value_set=[""timestamp_1"", ""timestamp_2"",...]),expect_column_values_to_be_in_set(column=""status"", value_set=[""status_1"", ""status_2"",...])",0.4444444444444444,0.27848101265822783,0.4444444444444444,24.403641908714576
Ensure the `agent_id` column exists and that all values correspond to valid entries in the `agents` table.,"expect_column_to_exist(column=""agent_id""),expect_column_values_to_be_in_set(column=""agent_id"", value_set=agents_table_values)","expect_column_to_exist(column=""agent_id""),expect_column_values_to_be_in_set(column=""agent_id"", value_set=agents_table_agent_ids)",0.9333333333333332,0.9302325581395349,0.9333333333333332,92.39994024670389
For the `game_level` field: Ensure values are distinct and match the type 'integer'. Validate that levels are within the range of 1 to 100.,"expect_column_values_to_be_unique(column=""game_level""),expect_column_values_to_be_of_type(column=""game_level"", type_=""int""),expect_column_values_to_be_between(column=""game_level"", min_value=1, max_value=100)","expect_column_values_to_be_unique(column=""game_level""),expect_column_values_to_be_of_type(column=""game_level"", type_=""int""),expect_column_values_to_be_between(column=""game_level"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'case_number': Ensure this field is required (not null). Ensure values in (case_number) are unique.,"expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_unique(column=""case_number"")","expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_unique(column=""case_number"")",1.0,1.0,1.0,100.00000000000004
Check that the `region` column only contains values from the predefined set of valid regions.,"expect_column_values_to_be_in_set(column=""region"", value_set=valid_regions)","expect_column_values_to_be_in_set(column=""region"", value_set=[""North America"", ""South America"", ""Europe"", ""Asia"", ""Africa"", ""Australia"", ""Antarctica""])",0.6666666666666667,0.6451612903225806,0.6666666666666667,41.665094250615155
For field 'ip_address': Validate that all entries conform to the standard IPv4 format and do not match any entries from the blacklist.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$""),expect_column_values_to_not_match_regex(column=""ip_address"", regex=r""blacklisted_ip_pattern"")  # Replace 'blacklisted_ip_pattern' with actual regex for blacklist.","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_not_be_in_set(column=""ip_address"", value_set=blacklist)",0.396694214876033,0.3025210084033613,0.396694214876033,12.100596038106847
"Ensure that for each record, the `incident_type` and `incident_status` columns have unique combinations.","expect_compound_columns_to_be_unique(column_a=""incident_type"", column_b=""incident_status"")","expect_compound_columns_to_be_unique(column_A=""incident_type"", column_B=""incident_status"")",1.0,1.0,1.0,82.93181259810136
Check that the `supplier_id` field contains only values from the predefined set of active suppliers.,"expect_column_values_to_be_in_set(column=""supplier_id"", value_set=active_suppliers_set)","expect_column_values_to_be_in_set(column=""supplier_id"", value_set=active_suppliers)",0.9655172413793104,0.962962962962963,0.9655172413793104,91.03132666386281
For field 'plan_start_date': Ensure the field is required (not null). Verify that the values in this column are valid datetime strings in the format 'YYYY-MM-DD'.,"expect_column_values_to_not_be_null(column=""plan_start_date""),expect_column_values_to_match_strftime_format(column=""plan_start_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""plan_start_date""),expect_column_values_to_match_strftime_format(column=""plan_start_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `case_number` column has a unique value for each entry and is of type 'text'. Ensure there are no null values.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text""),expect_column_values_to_not_be_null(column=""case_number"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text""),expect_column_values_to_not_be_null(column=""case_number"")",1.0,1.0,1.0,100.00000000000004
For field `content_length`: Ensure that the `content_length` is less than or equal to 280 characters. Ensure the field is of type 'integer' and not null.,"expect_column_values_to_be_between(column=""content_length"", min_value=0, max_value=280),expect_column_values_to_be_of_type(column=""content_length"", type_=""int""),expect_column_values_to_not_be_null(column=""content_length"")","expect_column_value_lengths_to_be_between(column=""content_length"", min_value=0, max_value=280),expect_column_values_to_not_be_null(column=""content_length""),expect_column_values_to_be_of_type(column=""content_length"", type_=""int"")",0.9866666666666666,0.9315068493150684,0.8266666666666665,94.40380165281049
Ensure the `lead_time` column has values within the range of 1 to 30 days and is sorted in ascending order.,"expect_column_values_to_be_between(column=""lead_time"", min_value=1, max_value=30),expect_column_values_to_be_increasing(column=""lead_time"")","expect_column_values_to_be_between(column=""lead_time"", min_value=1, max_value=30),expect_column_values_to_be_increasing(column=""lead_time"")  # Note: This is a combination of two expectations.",0.8571428571428571,0.8518518518518519,0.8571428571428571,82.39376271278411
For field 'phone_number': Ensure the field matches the type 'text'. Validate that all values conform to the standard phone number format using regex.,"expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")  # Replace? with actual regex pattern.",0.9180327868852458,0.9152542372881356,0.9180327868852458,89.67514657046357
"For field 'voter_status': Ensure the field is required (not null). Validate that the column values match one of the predefined categories: ['Active', 'Inactive', 'Pending'].","expect_column_values_to_not_be_null(column=""voter_status""),expect_column_values_to_be_in_set(column=""voter_status"", value_set=['Active', 'Inactive', 'Pending'])","expect_column_values_to_not_be_null(column=""voter_status""),expect_column_values_to_be_in_set(column=""voter_status"", value_set=['Active', 'Inactive', 'Pending'])",1.0,1.0,1.0,100.00000000000004
For the `customer_rating` column: Ensure the mean rating is above 4.0 and the maximum rating equals 5.0.,"expect_column_mean_to_be_between(column=""customer_rating"", min_value=4.0, max_value=None),expect_column_max_to_be_between(column=""customer_rating"", max_value=5.0)","expect_column_mean_to_be_between(column=""customer_rating"", min_value=4.0, max_value=5.0),expect_column_max_to_be_between(column=""customer_rating"", min_value=4.0, max_value=5.0)",0.888888888888889,0.819672131147541,0.888888888888889,85.31179527911432
Ensure the `settlement_amount` column contains values greater than or equal to `0` and matches the type 'decimal'.,"expect_column_values_to_be_between(column=""settlement_amount"", min_value=0),expect_column_values_to_be_of_type(column=""settlement_amount"", type_=""decimal"")","expect_column_values_to_be_between(column=""settlement_amount"", min_value=0),expect_column_values_to_be_of_type(column=""settlement_amount"", type_=""decimal"")",1.0,1.0,1.0,100.00000000000004
"For the `follower_count` field, ensure that values are greater than or equal to `following_count` for all records.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""follower_count"", column_B=""following_count"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""follower_count"", column_B=""following_count"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `transaction_amount` column values follow a Poisson distribution with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)","expect_column_proportion_to_be_between(column=""transaction_amount"", min_value=0.05, max_value=None)",0.5882352941176471,0.3125,0.5294117647058824,41.9494661361019
"Ensure the `course_category` column contains only distinct values matching `['Science', 'Arts', 'Commerce']`.","expect_column_values_to_be_in_set(column=""course_category"", value_set=[""Science"", ""Arts"", ""Commerce""])","expect_column_values_to_be_in_set(column=""course_category"", value_set=['Science', 'Arts', 'Commerce'])",1.0,1.0,1.0,68.69938387430254
"For the `event_time` field, ensure the field matches the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil across all domains.","expect_column_values_to_match_strftime_format(column=""event_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""event_time"")","expect_column_values_to_match_strftime_format(column=""event_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""event_time"")  # This is a new expectation, please refer to the documentation for more information.",0.8115942028985507,0.8059701492537313,0.8115942028985507,80.11991253619979
Validate that the lengths of string values in the `player_position` column fall within a range of 2 to 15 characters.,"expect_column_value_lengths_to_be_between(column=""player_position"", min_value=2, max_value=15)","expect_column_value_lengths_to_be_between(column=""player_position"", min_value=2, max_value=15)",1.0,1.0,1.0,100.00000000000004
For field 'ip_address': Ensure the field matches the type 'text'. Ensure the field matches the format 'IPv4'. Ensure this field exists.,"expect_column_to_exist(column=""ip_address""),expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_to_exist(column=""ip_address""),expect_column_values_to_be_of_type(column=""ip_address"", type_=""text""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(\d{1,3}\.){3}\d{1,3}$"")  # Regular expression to match IPv4 addresses.",0.8536585365853658,0.8,0.8536585365853658,84.70857662096982
Confirm that the CSV files in the `exports` directory have a valid header row and do not exceed `1000` lines.,"expect_file_to_have_valid_table_header(file_path=""exports""),expect_file_line_regex_match_count_to_be_between(file_path=""exports"", min_value=0, max_value=1000)","expect_file_to_exist(file_path=""exports/*.csv""),expect_file_line_count_to_be_between(file_path=""exports/*.csv"", min_value=1, max_value=1000),expect_file_to_have_valid_header(file_path=""exports/*.csv"")  # TODO: Implement this expectation.  -->",0.7164179104477612,0.5538461538461538,0.6268656716417911,51.065973304218595
Verify that the `event_date` field in the Government dataset is formatted as 'MM/DD/YYYY' and does not contain future dates.,"expect_column_values_to_match_strftime_format(column=""event_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_between(column=""event_date"", min_value=""01/01/1900"", max_value=""current_date"")","expect_column_values_to_match_strftime_format(column=""event_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_between(column=""event_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.9295774647887324,0.8115942028985507,0.9014084507042254,81.46053208877633
For field 'customer_id': Ensure this field exists. Ensure the field matches the type 'integer'. Ensure values in 'customer_id' are unique.,"expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_unique(column=""customer_id"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_unique(column=""customer_id"")  # Assuming 'customer_id' is a unique identifier.",0.888888888888889,0.8852459016393442,0.888888888888889,86.7518394325971
Validate that the `course_code` field matches the predefined format `^[A-Z]{3}-[0-9]{3}$`.,"expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `severity_level` column values are within the range of 1 to 5, where 1 indicates low severity and 5 indicates high severity.","expect_column_values_to_be_between(column=""severity_level"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""severity_level"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
For field 'order_id': Ensure the field is required (not null). Ensure the field contains unique values of type 'integer'.,"expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""integer"")","expect_column_values_to_not_be_null(column=""order_id""),expect_column_values_to_be_of_type(column=""order_id"", type_=""int""),expect_column_values_to_be_unique(column=""order_id"")  # Note: This expectation may not be necessary depending on the requirements.  # However, it is recommended to check for uniqueness of values in the column.",0.6976744186046512,0.6666666666666667,0.6046511627906976,67.9487002221665
Confirm that the `branch_code` field contains exactly 5 digits and does not include any letters or symbols.,"expect_column_values_to_match_regex(column=""branch_code"", regex=r""^\d{5}$"")","expect_column_values_to_match_regex(column=""branch_code"", regex=r""^\d{5}$"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `username` column contains unique usernames that match the regex pattern `^[a-zA-Z0-9_]{3,15}$`.","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")","expect_column_values_to_be_unique(column=""username""),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",1.0,1.0,1.0,100.00000000000004
For the `email_content` JSON field: Validate that it contains valid JSON with at least 'subject' and 'body' keys.,"expect_column_values_to_be_json_parseable(column=""email_content""),expect_column_values_to_match_json_schema(column=""email_content"", schema={""type"": ""object"", ""properties"": {""subject"": {""type"": ""string""}, ""body"": {""type"": ""string""}}, ""required"": [""subject"", ""body""]})","expect_column_values_to_match_json_schema(column=""email_content"", schema={""type"": ""object"", ""properties"": {""subject"": {""type"": ""string""}, ""body"": {""type"": ""string""}}})  # Replace with actual column name and schema.",0.7000000000000001,0.6551724137931033,0.6666666666666666,60.27730075018871
"Ensure the `policy_type` field values are restricted to the set `['Life', 'Health', 'Auto']`.","expect_column_values_to_be_in_set(column=""policy_type"", value_set=['Life', 'Health', 'Auto'])","expect_column_values_to_be_in_set(column=""policy_type"", value_set=['Life', 'Health', 'Auto'])",1.0,1.0,1.0,100.00000000000004
Verify that the `research_id` column contains only unique values and matches the regex pattern `R^[A-Z]{2}-[0-9]{4}$`.,"expect_column_values_to_be_unique(column=""research_id""),expect_column_values_to_match_regex(column=""research_id"", regex=r""^[A-Z]{2}-[0-9]{4}$"")","expect_column_values_to_be_unique(column=""research_id""),expect_column_values_to_match_regex(column=""research_id"", regex=r""^R[A-Z]{2}-[0-9]{4}$"")",0.9811320754716981,0.9803921568627451,0.9811320754716981,96.0132862288073
Ensure the `category_id` column values are unique across records.,"expect_column_values_to_be_unique(column=""category_id"")","expect_column_values_to_be_unique(column=""category_id"")",1.0,1.0,1.0,100.00000000000004
For field 'order_quantity': Ensure this field is required (not null). Ensure all values are integers greater than or equal to 1.,"expect_column_values_to_not_be_null(column=""order_quantity""),expect_column_values_to_be_between(column=""order_quantity"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""order_quantity"", type_=""int"")","expect_column_values_to_not_be_null(column=""order_quantity""),expect_column_values_to_be_of_type(column=""order_quantity"", type_=""int""),expect_column_values_to_be_between(column=""order_quantity"", min_value=1)",0.9577464788732395,0.927536231884058,0.7323943661971832,90.86248101118649
For the `price` field: Validate that all values are of type 'float'. Ensure no missing values are present.,"expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_not_be_null(column=""price"")","expect_column_values_to_be_of_type(column=""price"", type_=""float""),expect_column_values_to_not_be_null(column=""price"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `agent_id` column exists and that all values correspond to valid agent records.,"expect_column_to_exist(column=""agent_id""),expect_column_values_to_be_in_set(column=""agent_id"", value_set=valid_agent_ids)","expect_column_to_exist(column=""agent_id""),expect_column_values_to_be_of_type(column=""agent_id"", type_=""int""),expect_column_values_to_be_unique(column=""agent_id"")  # Assuming agent IDs are unique.",0.6545454545454545,0.5283018867924528,0.6545454545454545,47.82616711021769
"For the `subscription_start_date`, ensure it adheres to the format `YYYY-MM-DD` and is not a future date.","expect_column_values_to_match_strftime_format(column=""subscription_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_less_than(column=""subscription_start_date"", value=""now"")","expect_column_values_to_match_strftime_format(column=""subscription_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""subscription_start_date""),expect_column_values_to_be_between(column=""subscription_start_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.65,0.5897435897435898,0.65,52.3153449651114
For field 'enrollment_date': Ensure this field is required (not null). Ensure the field matches the type 'date'. Ensure no duplicate dates exist for the same student.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_select_column_values_to_be_unique_within_record(column=""enrollment_date"")","expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_column_values_to_be_unique(column=""enrollment_date"")  # Note: This assumes there are no duplicate dates for the same student. If there are, you may need to modify this expectation.",0.723404255319149,0.6304347826086957,0.6595744680851064,71.51590276804403
Ensure the `post_id` column contains unique values with the format 'PST-YYYY-MM-DD-XXXX' where X is a digit.,"expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_match_regex(column=""post_id"", regex=r""^PST-\d{4}-\d{2}-\d{2}-\d{4}$"")","expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_match_regex(column=""post_id"", regex=r""^PST-\d{4}-\d{2}-\d{3}$"")",0.9285714285714286,0.9259259259259259,0.9285714285714286,87.90157403817452
"For field 'energy_type': Ensure the field matches the type 'text'. Validate that values in (energy_type) match at least one pattern from the list: 'electricity', 'gas', 'water'.","expect_column_values_to_be_of_type(column=""energy_type"", type_=""text""),expect_column_values_to_match_regex_list(column=""energy_type"", regex_list=[r""^electricity$"", r""^gas$"", r""^water$""])","expect_column_values_to_be_of_type(column=""energy_type"", type_=""text""),expect_column_values_to_match_regex_list(column=""energy_type"", regex_list=[""electricity"", ""gas"", ""water""])",0.9473684210526316,0.8363636363636363,0.9473684210526316,76.64559426071864
For field 'voter_id': Ensure this field is required (not null) and matches the format of a unique identifier. Ensure values in (voter_id) are unique.,"expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_unique(column=""voter_id"")","expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_match_regex(column=""voter_id"", regex=r""^[a-zA-Z0-9]{1,20}$""),expect_column_values_to_be_unique(column=""voter_id"")  # Assuming voter_id is a unique identifier.",0.6129032258064516,0.6,0.6129032258064516,46.87937233347603
For field 'watch_time': Validate that the total watch time for each user is a non-negative integer and that the average watch time does not exceed 300 minutes.,"expect_column_mean_to_be_between(column=""watch_time"", min_value=0, max_value=300),expect_column_sum_to_be_between(column=""watch_time"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""watch_time"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""watch_time"", min_value=0, max_value=300)",0.9666666666666667,0.896551724137931,0.8666666666666667,94.77559795386334
Check that the `employee_id` column contains unique values corresponding to each employee. Ensure this column does not allow null values.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_not_be_null(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
For field 'election_date': Ensure the field is required (not null). Ensure all values in 'election_date' match the type 'date'. Ensure the date is not in the past.,"expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_dateutil_parseable(column=""election_date""),expect_column_values_to_be_between(column=""election_date"", min_value=str(datetime.date.today()))","expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_between(column=""election_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.775,0.6923076923076923,0.75,65.432934379611
For field 'customer_id': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 20. Ensure the field has a minimum length of 10. Ensue this field exist,"expect_column_to_exist(column=""customer_id""),expect_column_value_lengths_to_be_between(column=""customer_id"", min_value=10, max_value=20),expect_column_values_to_be_of_type(column=""customer_id"", type_=""text"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_id"", min_value=10, max_value=20)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
"Ensure that the entries in the `data_quality` column match the set `['High', 'Medium', 'Low']`.","expect_column_values_to_be_in_set(column=""data_quality"", value_set=['High', 'Medium', 'Low'])","expect_column_values_to_be_in_set(column=""data_quality"", value_set=['High', 'Medium', 'Low'])",1.0,1.0,1.0,100.00000000000004
"Ensure that the values in the `property_type` column are restricted to `['Residential', 'Commercial', 'Industrial']` to maintain consistency.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial'])",1.0,1.0,1.0,100.00000000000004
For field 'delivery_date': Ensure this field is not null. Ensure values in 'delivery_date' are in the date format 'YYYY-MM-DD'.,"expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For the `complaint_description` field: Validate that string lengths do not exceed 500 characters and do not contain any offensive language as defined by the regex `(?:badword1|badword2|badword3)`.,"expect_column_value_lengths_to_be_between(column=""complaint_description"", min_value=0, max_value=500),expect_column_values_to_not_match_regex(column=""complaint_description"", regex=r""(?:badword1|badword2|badword3)"")","expect_column_value_lengths_to_be_between(column=""complaint_description"", min_value=0, max_value=500),expect_column_values_to_match_regex(column=""complaint_description"", regex=r""(?:badword1|badword2|badword3)"")  # Replace badword1, badword2, and badword3 with actual offensive words.",0.8571428571428572,0.8235294117647058,0.8571428571428572,83.1030732617089
"For the `user_id` and `transaction_id` combination, ensure that it is unique across all records.","expect_compound_columns_to_be_unique(columns=[""user_id"", ""transaction_id""])","expect_compound_columns_to_be_unique(column_A=""user_id"", column_B=""transaction_id"")",0.88,0.6956521739130435,0.88,60.93671089617578
For field 'user_ip': Ensure the field matches a valid IP address pattern. Ensure this field cannot be null.,"expect_column_values_to_not_be_null(column=""user_ip""),expect_column_values_to_match_regex(column=""user_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_match_regex(column=""user_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_not_be_null(column=""user_ip"")",1.0,0.9655172413793104,0.6666666666666666,99.65576081305295
Verify that the `order_amount` column has a mean value greater than or equal to `50`.,"expect_column_mean_to_be_between(column=""order_amount"", min_value=50)","expect_column_mean_to_be_between(column=""order_amount"", min_value=50)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `customer_feedback` column strings are between 10 and 500 characters in length, providing sufficient detail.","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500)","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500),expect_column_values_to_match_regex(column=""customer_feedback"", regex=r"".{10,500}"")  # This regex matches between 10 and 500 characters.",0.6037735849056604,0.5882352941176471,0.6037735849056604,44.196618984907346
Verify that the `listing_date` field conforms to the format 'DD-MM-YYYY' and that all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_increasing(column=""listing_date"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%d-%m-%Y""),expect_column_values_to_be_dateutil_parseable(column=""listing_date""),expect_column_values_to_be_between(column=""listing_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.638888888888889,0.6,0.638888888888889,49.24624637240325
For field 'report_date': Ensure the field is required (not null). Ensure all values in 'report_date' match the type 'date'. Validate that the date falls within the current fiscal year.,"expect_column_values_to_not_be_null(column=""report_date""),expect_column_values_to_be_dateutil_parseable(column=""report_date""),expect_column_values_to_be_between(column=""report_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_not_be_null(column=""report_date""),expect_column_values_to_be_of_type(column=""report_date"", type_=""date""),expect_column_values_to_be_between(column=""report_date"", min_value=""2023-01-01"", max_value=""2024-01-01"")  # Replace with actual fiscal year dates.",0.7906976744186047,0.761904761904762,0.7906976744186047,75.48846747278743
For the field `blood_pressure`: Ensure values are in the format `systolic/diastolic` and fall within the normal range.,"expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{1,3}/\d{1,3}$""),expect_column_values_to_be_between(column=""blood_pressure"", min_value=""90/60"", max_value=""120/80"")","expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{1,3}\/\d{1,3}$""),expect_column_values_to_be_between(column=""blood_pressure"", min_value=90, max_value=120)  # Replace with actual min/max values for normal blood pressure range.",0.8311688311688312,0.8,0.8311688311688312,76.41184216914203
In the `customer_id` column: Ensure that all values are unique and of type 'integer'.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Verify that the `total_order_value` column contains values that are the sum of the `quantity_ordered` multiplied by the `cost_per_item`.,"expect_multicolumn_sum_to_equal(column_A=""total_order_value"", column_B=""quantity_ordered"", column_C=""cost_per_item"")","expect_column_sum_to_equal(column=""total_order_value"", value=expect_column_values_to_be_between(column=""total_order_value"", min_value=0, max_value=None))",0.4888888888888889,0.23255813953488372,0.4444444444444444,31.58749311399722
For the `forecast_date` field: Ensure it exists and is in the format YYYY-MM-DD. Confirm that the row count matches the expected number of forecast entries for the month.,"expect_column_to_exist(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_table_row_count_to_equal(expected_value)  # Replace 'expected_value' with the actual expected number of forecast entries for the month.","expect_column_to_exist(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_row_count_to_equal(expected_value=30)  # Replace 30 with the expected number of forecast entries for the month.",0.9302325581395349,0.8333333333333333,0.9302325581395349,86.79506927117419
"For the field 'review_comments': Ensure this field can accept null values, but when present, the length of the string must be between 5 and 300 characters.","expect_column_value_lengths_to_be_between(column=""review_comments"", min_value=5, max_value=300),expect_column_values_to_be_null(column=""review_comments"")","expect_column_values_to_be_null(column=""review_comments""),expect_column_value_lengths_to_be_between(column=""review_comments"", min_value=5, max_value=300)",1.0,0.9583333333333334,0.64,98.55383616872882
"Ensure the `diagnosis_code` column contains only valid codes from the specified set `['A00', 'B99', 'C00']`.","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=['A00', 'B99', 'C00'])","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=['A00', 'B99', 'C00'])",1.0,1.0,1.0,100.00000000000004
Ensure the `hire_date` field is formatted correctly as `YYYY-MM-DD` and that all entries can be parsed into valid datetime objects.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # Note: This is a new expectation that may not be available today. Please check if it's available before using it.",0.704225352112676,0.6956521739130436,0.704225352112676,70.17936011225832
Ensure that the `observation_time` column values are recorded in intervals not exceeding 30 minutes apart for accuracy.,"expect_column_values_to_be_increasing(column=""observation_time""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""observation_time"", column_B=""observation_time"", max_difference=1800)","expect_column_values_to_be_between(column=""observation_time"", min_value=""00:00:00"", max_value=""00:30:00"")",0.4081632653061224,0.2553191489361702,0.4081632653061224,28.093145731139817
Ensure that the average `response_time` for service requests passes the Kolmogorov-Smirnov test with a p-value greater than `0.05`.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""response_time"", threshold=0.05)","expect_column_parameterized_test_p_value_to_be_greater_than(column=""response_time"", threshold=0.05)",0.9411764705882353,0.8749999999999999,0.9411764705882353,85.95552893261161
"For the `player_id` column, ensure all values are unique and consist of exactly `8` alphanumeric characters.","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_match_regex(column=""player_id"", regex=r""^[a-zA-Z0-9]{8}$"")","expect_column_values_to_be_unique(column=""player_id""),expect_column_value_lengths_to_equal(column=""player_id"", value=8),expect_column_values_to_match_regex(column=""player_id"", regex=r""^[a-zA-Z0-9]{8}$"")  # Regular expression to match alphanumeric characters of length 8.",0.7142857142857143,0.7058823529411764,0.7142857142857143,60.64795530628231
"Ensure that the `user_data` column in the file contains valid entries matching the regular expression `^[A-Za-z0-9_]{3,15}$`.","expect_column_values_to_match_regex(column=""user_data"", regex=""^[A-Za-z0-9_]{3,15}$"")","expect_column_values_to_match_regex(column=""user_data"", regex=r""^[A-Za-z0-9_]{3,15}$"")",0.9696969696969697,0.9032258064516129,0.9696969696969697,92.78982724420875
For field 'attachment_size': Ensure the field matches the type 'integer'. Ensure values in (attachment_size) are within the range of 0 to 10485760 bytes (10 MB). Ensure this field exists.,"expect_column_to_exist(column=""attachment_size""),expect_column_values_to_be_of_type(column=""attachment_size"", type_=""int""),expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=10485760)","expect_column_to_exist(column=""attachment_size""),expect_column_values_to_be_of_type(column=""attachment_size"", type_=""int""),expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=10485760)",1.0,1.0,1.0,100.00000000000004
For the 'trailer_link' field: Ensure the field exists and matches the type 'text'. Validate that values conform to the regex pattern '^(https?://)?(www\\.)?youtube\\.com/watch\\?v=[A-Za-z0-9_-]+$'.,"expect_column_to_exist(column=""trailer_link""),expect_column_values_to_be_of_type(column=""trailer_link"", type_=""text""),expect_column_values_to_match_regex(column=""trailer_link"", regex=r""^(https?://)?(www\\.)?youtube\\.com/watch\\?v=[A-Za-z0-9_-]+$"")","expect_column_to_exist(column=""trailer_link""),expect_column_values_to_be_of_type(column=""trailer_link"", type_=""text""),expect_column_values_to_match_regex(column=""trailer_link"", regex=r""^(https?://)?(www\\.)?youtube\\.com/watch\\?v=[A-Za-z0-9_-]+$"")  # Replace regex pattern with your actual requirement.",0.9195402298850576,0.9176470588235294,0.9195402298850576,92.33970316808434
Ensure the `abstract` column has a length between 100 and 1000 characters for all entries.,"expect_column_value_lengths_to_be_between(column=""abstract"", min_value=100, max_value=1000)","expect_column_value_lengths_to_be_between(column=""abstract"", min_value=100, max_value=1000)",1.0,1.0,1.0,100.00000000000004
Check that the `credit_score` column is within the range `300` to `850`.,"expect_column_values_to_be_between(column=""credit_score"", min_value=300, max_value=850)","expect_column_values_to_be_between(column=""credit_score"", min_value=300, max_value=850)",1.0,1.0,1.0,100.00000000000004
Ensure that the `player_id` field is unique across all records. Verify that it contains no missing values and is of the type 'integer'.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""int"")",0.967741935483871,0.9666666666666667,0.967741935483871,96.82792533867517
For field 'user_id': Ensure the field exists and matches the type 'text'. Validate that all user IDs are unique.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""text""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""text""),expect_column_values_to_be_unique(column=""user_id"")  # Replace 'expect_column_values_to_be_unique' with your actual expectation for uniqueness.",0.8115942028985507,0.8059701492537313,0.8115942028985507,76.60357503217901
Ensure the `location_id` field contains distinct values that correspond to valid entries in the `locations` dataset. Confirm this field is non-null.,"expect_column_values_to_be_unique(column=""location_id""),expect_column_values_to_not_be_null(column=""location_id""),expect_column_values_to_be_in_set(column=""location_id"", value_set=locations_dataset_distinct_values)","expect_column_values_to_be_unique(column=""location_id""),expect_column_values_to_not_be_null(column=""location_id"")  # Note: This is just a sample expectation. You may need to adjust it based on your specific requirements.",0.5833333333333333,0.5142857142857143,0.5833333333333333,53.80481778524901
For field 'user_ip': Ensure the field matches the type 'text'. Ensure values in 'user_ip' conform to valid IP address formatting.,"expect_column_values_to_be_of_type(column=""user_ip"", type_=""text""),expect_column_values_to_match_regex(column=""user_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^::([0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,7}:$|^([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}$|^([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}$|^([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}$|^([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}$|^[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6}|:)$|^:((:[0-9a-fA-F]{1,4}){1,7}|:)$"")","expect_column_values_to_be_of_type(column=""user_ip"", type_=""text""),expect_column_values_to_match_regex(column=""user_ip"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")  # Regular expression to match valid IP addresses.",0.31067961165048547,0.30392156862745096,0.31067961165048547,5.115498392077507
For the `hire_date` field: Ensure all dates are in the correct format 'MM/DD/YYYY' and can be parsed correctly.,"expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # This assumes you're using the dateutil library. If not, you'll need to find another solution.",0.7462686567164178,0.7384615384615384,0.7462686567164178,75.47793763460413
For the 'in_game_transactions' table: Confirm that the 'transaction_amount' column is numeric and that it passes the Chi-Square test for expected distribution.,"expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""numeric""),expect_column_chisquare_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""numeric""),expect_column_chisquare_test_p_value_to_be_greater_than(column=""transaction_amount"", threshold=0.05)  # Replace threshold with your desired threshold.",0.9032258064516129,0.9,0.9032258064516129,88.31784938935655
For the `check_out_date` field: Confirm that all dates are after the respective `check_in_date` values and adhere to the `YYYY-MM-DD` format.,"expect_column_values_to_be_dateutil_parseable(column=""check_out_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date""),expect_column_values_to_match_strftime_format(column=""check_out_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_dateutil_parseable(column=""check_out_date""),expect_column_values_to_be_between(column=""check_out_date"", min_value=""check_in_date"")  # Replace ""check_in_date"" with the actual value.",0.6419753086419752,0.5063291139240507,0.617283950617284,46.902916910181524
For the `transaction_details` field: Validate that it is a valid JSON object that conforms to the specified schema and is required (not null).,"expect_column_to_exist(column=""transaction_details""),expect_column_values_to_be_json_parseable(column=""transaction_details""),expect_column_values_to_not_be_null(column=""transaction_details"")","expect_column_values_to_be_json_parseable(column=""transaction_details""),expect_column_values_to_not_be_null(column=""transaction_details"")",0.851063829787234,0.8444444444444443,0.851063829787234,68.53827910309879
Ensure the `user_id` column exists and contains only values present in the `users` table.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_values)","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_user_ids)",0.9333333333333332,0.9302325581395349,0.9333333333333332,92.39994024670389
For the `data_record` JSON field: Validate that the content matches the required structure with keys 'data_id' (string) and 'data_value' (float).,"expect_column_values_to_match_json_schema(column=""data_record"", schema={,    ""type"": ""object"",    ""properties"": {,  ""data_id"": {""type"": ""string""},  ""data_value"": {""type"": ""number""},    },    ""required"": [""data_id"", ""data_value""],})","expect_column_values_to_match_json_schema(column=""data_record"", schema={""type"": ""object"", ""properties"": {""data_id"": {""type"": ""string""}, ""data_value"": {""type"": ""float""}}}})",0.8571428571428572,0.8510638297872339,0.8571428571428572,66.12451314772056
For field 'vote_timestamp': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and can be parsed using dateutil.,"expect_column_values_to_not_be_null(column=""vote_timestamp""),expect_column_values_to_be_dateutil_parseable(column=""vote_timestamp"")","expect_column_values_to_not_be_null(column=""vote_timestamp""),expect_column_values_to_be_of_type(column=""vote_timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""vote_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")  # Assuming dateutil is installed.",0.59375,0.5161290322580645,0.5625000000000001,38.663968118634294
Verify that the count of `sent_emails` in the `user_activity` table is between 50 and 200 for active users.,"expect_column_sum_to_be_between(column=""sent_emails"", min_value=50, max_value=200)","expect_column_value_count_to_be_between(column=""sent_emails"", min_value=50, max_value=200)",0.9032258064516129,0.8275862068965518,0.9032258064516129,85.92899528285
For the `game_date` field: Ensure all datetime entries match the format `YYYY-MM-DD` and are not in the future.,"expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date""),expect_column_values_to_be_between(column=""game_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""game_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""game_date""),expect_column_values_to_be_between(column=""game_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.9333333333333333,0.9318181818181819,0.9333333333333333,92.41617488669405
"Verify that the `feedback_rating` in the `CRM` system falls within the set `['1', '2', '3', '4', '5']` and contains no null values.","expect_column_values_to_be_in_set(column=""feedback_rating"", value_set=['1', '2', '3', '4', '5']),expect_column_values_to_not_be_null(column=""feedback_rating"")","expect_column_values_to_be_in_set(column=""feedback_rating"", value_set=['1', '2', '3', '4', '5']),expect_column_values_to_not_be_null(column=""feedback_rating"")  # Note: This expectation is not necessary but can be added for completeness.",0.8181818181818181,0.8125000000000001,0.8181818181818181,79.86066344139108
Ensure the `product_price` column has a Kullback-Leibler divergence of less than 0.1 when compared to historical price distributions.,"expect_column_kl_divergence_to_be_less_than(column=""product_price"", threshold=0.1)","expect_column_divergence_to_be_less_than(column=""product_price"", threshold=0.1)",0.962962962962963,0.8799999999999999,0.962962962962963,89.55601190840834
For the `checkout_date`: Ensure it is always later than the `checkin_date`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""checkout_date"", column_B=""checkin_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""checkout_date"", column_B=""checkin_date"")",1.0,1.0,1.0,100.00000000000004
For field 'citizen_id': Ensure the field is required (not null) and contains unique values. Validate the type as 'integer'.,"expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `discount` column must be between 0% and 100%, and confirm that no values are negative.","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100),expect_column_values_to_be_greater_than(column=""discount"", value=0)","expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100),expect_column_values_to_be_between(column=""discount"", min_value=0, max_value=100)",0.8679245283018867,0.7843137254901961,0.8679245283018867,78.71444816554938
"For the `conversation_id` field, ensure that values are unique across records.","expect_column_values_to_be_unique(column=""conversation_id"")","expect_column_values_to_be_unique(column=""conversation_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `account_number` column has a unique value for each record in the `accounts` table.,"expect_column_values_to_be_unique(column=""account_number"")","expect_column_values_to_be_unique(column=""account_number"")",1.0,1.0,1.0,100.00000000000004
"Ensure all values in the `shipping_method` column exist in the predefined set `['Air', 'Sea', 'Land']`.","expect_column_values_to_be_in_set(column=""shipping_method"", value_set=['Air', 'Sea', 'Land'])","expect_column_values_to_be_in_set(column=""shipping_method"", value_set=['Air', 'Sea', 'Land'])",1.0,1.0,1.0,100.00000000000004
For field 'customer_email': Ensure it is required (not null) and matches the type 'text'. Validate that all values are in correct email format.,"expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_not_be_null(column=""customer_email""),expect_column_values_to_be_of_type(column=""customer_email"", type_=""text""),expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to validate email format.",0.7586206896551724,0.7529411764705882,0.7586206896551724,79.7742830519834
"For field 'user_age': Ensure the field has a type of 'integer'. Validate that all values are within the range of 13 to 120 years, and check for any missing values.","expect_column_values_to_be_of_type(column=""user_age"", type_=""int""),expect_column_values_to_be_between(column=""user_age"", min_value=13, max_value=120),expect_column_values_to_not_be_null(column=""user_age"")","expect_column_values_to_be_of_type(column=""user_age"", type_=""int""),expect_column_values_to_be_between(column=""user_age"", min_value=13, max_value=120),expect_column_values_to_not_be_null(column=""user_age"")",1.0,1.0,1.0,100.00000000000004
"For the `player_performance` data, ensure that the average points scored by players follows a normal distribution with a mean greater than 10.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""points_scored"", threshold=0.05),expect_column_mean_to_be_between(column=""points_scored"", min_value=10, max_value=None)","expect_column_mean_to_be_between(column=""points_scored"", min_value=10)",0.5333333333333333,0.5116279069767442,0.5333333333333333,18.529530251316512
"Validate that the `price` column values are within the range of $0.01 to $10,000.00 and are sorted in ascending order.","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000.00),expect_column_values_to_be_increasing(column=""price"")","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000.00),expect_column_values_to_be_increasing(column=""price"")  # Note: This expectation may not be applicable depending on the specific requirements.",0.8,0.7931034482758621,0.8,75.99110151102917
Confirm that the `user_age` column has a median value of 35 and that the sum of all values is between 1000 and 5000.,"expect_column_median_to_be_between(column=""user_age"", lower_bound=35, upper_bound=35),expect_column_sum_to_be_between(column=""user_age"", lower_bound=1000, upper_bound=5000)","expect_column_median_to_be_between(column=""user_age"", min_value=35, max_value=None),expect_column_sum_to_be_between(column=""user_age"", min_value=1000, max_value=5000)",0.7,0.5517241379310345,0.7,69.55072503066273
"Verify that the `transaction_status` column only contains values from the set `['completed', 'pending', 'failed']`.","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['completed', 'pending', 'failed'])","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['completed', 'pending', 'failed'])",1.0,1.0,1.0,100.00000000000004
Ensure the `temperature` column contains only numeric values and does not include any missing entries.,"expect_column_values_to_not_be_null(column=""temperature""),expect_column_values_to_be_of_type(column=""temperature"", type_=""float"")","expect_column_values_to_be_of_type(column=""temperature"", type_=""float""),expect_column_values_to_not_be_null(column=""temperature"")",1.0,0.9473684210526315,0.7,99.4397538686661
"Ensure that the `patient_email` column entries match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$` and are unique.","expect_column_values_to_match_regex(column=""patient_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""patient_email"")","expect_column_values_to_match_regex(column=""patient_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""patient_email"")  # Note: This expectation may not be necessary depending on the requirements.  -->",0.8533333333333333,0.8493150684931507,0.8533333333333333,82.6999106677264
"For field 'status': Ensure the field exists. Validate that 'status' matches one of the values: (Pending, Shipped, Delivered, Canceled).","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Pending"", ""Shipped"", ""Delivered"", ""Canceled""])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Pending"", ""Shipped"", ""Delivered"", ""Canceled""])",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_id` column contains only unique values and no null entries.,"expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")","expect_column_values_to_be_unique(column=""patient_id""),expect_column_values_to_not_be_null(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
"For the `course_code` field, validate that all entries are formatted as `^COURSE-[A-Z]{3}-[0-9]{3}$`.","expect_column_values_to_match_regex(column=""course_code"", regex=r""^COURSE-[A-Z]{3}-[0-9]{3}$"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^COURSE-[A-Z]{3}-[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `category` column does not have null values and only contains entries from the list of valid categories.,"expect_column_values_to_not_be_null(column=""category""),expect_column_values_to_be_in_set(column=""category"", value_set=[/* list of valid categories */])","expect_column_values_to_not_be_null(column=""category""),expect_column_values_to_be_in_set(column=""category"", value_set=[""valid_category_1"", ""valid_category_2"", ""valid_category_3""])",0.830188679245283,0.7843137254901961,0.830188679245283,65.3943402909721
Verify that the `measurement_date` column has values formatted as `YYYY-MM-DD` and contains no missing values.,"expect_column_to_exist(column=""measurement_date""),expect_column_values_to_match_strftime_format(column=""measurement_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""measurement_date"")","expect_column_values_to_match_strftime_format(column=""measurement_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""measurement_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
"For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Validate that customer IDs are distinct and fall within the range of 1 to 100,000.","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""numeric""),expect_column_unique_value_count_to_be_between(column=""customer_id"", min_value=1, max_value=100000),expect_column_values_to_be_between(column=""customer_id"", min_value=1, max_value=100000)","expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""numeric""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_between(column=""customer_id"", min_value=1, max_value=100000)  # Replace 100000 with your actual maximum value.",0.897196261682243,0.7619047619047619,0.8411214953271028,81.9466015092832
Verify that the `threat_level` column values are within the range of 1 to 5.,"expect_column_values_to_be_between(column=""threat_level"", min_value=1, max_value=5)","expect_column_values_to_be_between(column=""threat_level"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
For field `supplier_id`: Ensure values in `supplier_id` must exist in the `suppliers` table. Validate that the field matches the type 'integer'.,"expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_ids),expect_column_values_to_be_of_type(column=""supplier_id"", type_=""int"")","expect_column_values_to_be_of_type(column=""supplier_id"", type_=""int""),expect_column_values_to_be_in_set(column=""supplier_id"", value_set=suppliers_table_values)",0.9629629629629629,0.9230769230769231,0.5925925925925926,95.81282631934458
Verify that the `quantity_ordered` column contains only positive integers.,"expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int"")","expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=None)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
For the `consumption` field: Ensure that values are greater than zero and exist for all entries in the `household_id` column.,"expect_column_values_to_be_greater_than(column=""consumption"", value=0),expect_column_values_to_not_be_null(column=""consumption"")","expect_column_values_to_be_between(column=""consumption"", min_value=0),expect_column_values_to_not_be_null(column=""consumption""),expect_column_values_to_be_unique(column=""consumption"")  # This assumes that there are no duplicate values in the ""consumption"" column. If there are, you may need to modify this expectation.",0.5142857142857143,0.44117647058823534,0.5142857142857143,41.516615496467736
For field 'release_date': Ensure the field matches the type 'datetime'. Validate that all values in (release_date) conform to the format 'YYYY-MM-DD'. Ensure this field exists.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_be_of_type(column=""release_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For columns 'origin_location' and 'destination_location': Ensure that 'origin_location' values must exist in the predefined list of valid locations. Ensure this field exists.,"expect_column_to_exist(column=""origin_location""),expect_column_values_to_be_in_set(column=""origin_location"", value_set=valid_locations)","expect_column_to_exist(column=""origin_location""),expect_column_values_to_be_in_set(column=""origin_location"", value_set=valid_locations)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `course_category` column includes only values from the set `['Science', 'Arts', 'Commerce']`.","expect_column_values_to_be_in_set(column=""course_category"", value_set=['Science', 'Arts', 'Commerce'])","expect_column_values_to_be_in_set(column=""course_category"", value_set=['Science', 'Arts', 'Commerce'])",1.0,1.0,1.0,100.00000000000004
Check that the `origin` and `destination` columns do not contain any values matching the SQL-like pattern `'%NULL%'`.,"expect_column_values_to_not_match_like_pattern(column=""origin"", pattern=""%NULL%""),expect_column_values_to_not_match_like_pattern(column=""destination"", pattern=""%NULL%"")","expect_column_values_to_not_match_regex(column=""origin"", regex=r""%NULL%""),expect_column_values_to_not_match_regex(column=""destination"", regex=r""%NULL%"")  # Note: This is just an example, you may need to adjust the regex pattern based on your specific requirements.",0.5671641791044777,0.39999999999999997,0.5373134328358209,54.36326096335863
Check that the average `student_scores` across all courses conforms to a normal distribution with a significance level of 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""student_scores"", threshold=0.05)","expect_column_mean_to_be_between(column=""student_scores"", min_value=0, max_value=None),expect_column_proportion_of_outliers_to_be_between(column=""student_scores"", min_value=0, max_value=None)  # Note: This expectation may not be applicable depending on the specific requirements.  # Please refer to the documentation for more information.",0.2571428571428571,0.11764705882352941,0.2571428571428571,15.889742894479467
For field 'device_id': Ensure the field contains only distinct values. Ensure the field is of type 'text'.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""text"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For fields 'salary' and 'bonus': Ensure both fields match the type 'decimal'. Validate that the sum of (salary) and (bonus) should not exceed the maximum allowable compensation limit of $200,000. Ensure these fields exist.","expect_column_to_exist(column=""salary""),expect_column_to_exist(column=""bonus""),expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_be_of_type(column=""bonus"", type_=""decimal""),expect_multicolumn_sum_to_equal(column_list=[""salary"", ""bonus""], value=200000)","expect_column_to_exist(column=""salary""),expect_column_to_exist(column=""bonus""),expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_be_of_type(column=""bonus"", type_=""decimal""),expect_column_sum_to_be_between(column=""salary"", min_value=0, max_value=200000),expect_column_sum_to_be_between(column=""bonus"", min_value=0, max_value=200000)  # Note: This assumes that the sum of salary and bonus is the total compensation.",0.694214876033058,0.6050420168067226,0.694214876033058,60.286954771309524
"For the `post_timestamp` column, ensure all entries are valid datetime strings that can be parsed and match the format `'%Y-%m-%dT%H:%M:%S'`.","expect_column_values_to_be_dateutil_parseable(column=""post_timestamp""),expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format='%Y-%m-%dT%H:%M:%S')","expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S"")",0.782608695652174,0.7727272727272727,0.782608695652174,53.596495697140604
"For field 'genre': Ensure the field exists. Ensure values in (genre) must exist in the set ['action', 'comedy', 'drama', 'horror']. Ensure this field is not null.","expect_column_to_exist(column=""genre""),expect_column_values_to_be_in_set(column=""genre"", value_set=['action', 'comedy', 'drama', 'horror']),expect_column_values_to_not_be_null(column=""genre"")","expect_column_to_exist(column=""genre""),expect_column_values_to_be_in_set(column=""genre"", value_set=['action', 'comedy', 'drama', 'horror']),expect_column_values_to_not_be_null(column=""genre"")  # This assumes that the column is nullable. If it is not, you can remove this expectation.",0.7894736842105263,0.7837837837837839,0.7894736842105263,77.3969953823506
Ensure the `user_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
"Verify that the JSON objects in the `email_content` column are valid and contain the keys `subject`, `body`, and `recipient` with appropriate value types.","expect_column_values_to_be_json_parseable(column=""email_content""),expect_column_values_to_match_json_schema(column=""email_content"", schema={,    ""type"": ""object"",    ""properties"": {,  ""subject"": {""type"": ""string""},  ""body"": {""type"": ""string""},  ""recipient"": {""type"": ""string""},    },    ""required"": [""subject"", ""body"", ""recipient""],})","expect_column_values_to_be_json_parseable(column=""email_content""),expect_column_values_to_match_json_schema(column=""email_content"", schema={""type"": ""object"", ""properties"": {""subject"": {""type"": ""string""}, ""body"": {""type"": ""string""}, ""recipient"": {""type"": ""string""}}})  # Replace with actual column name and schema.",0.8571428571428571,0.8533333333333333,0.8571428571428571,78.04228682222153
Check the `humidity` values to ensure they are presented as integers in the range of `0` to `100`.,"expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `order_value` column values are greater than or equal to 0 and compute the average to ensure it does not exceed 50,000.","expect_column_values_to_be_between(column=""order_value"", min_value=0),expect_column_mean_to_be_between(column=""order_value"", min_value=None, max_value=50000)","expect_column_values_to_be_between(column=""order_value"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""order_value"", min_value=0, max_value=50000)",0.9473684210526316,0.8727272727272727,0.912280701754386,85.67716464560682
Ensure that the combination of `product_id` and `warehouse_id` is unique across records.,"expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")","expect_compound_columns_to_be_unique(column_A=""product_id"", column_B=""warehouse_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the mean `delivery_time` does not exceed 48 hours and the standard deviation is below 12 hours.,"expect_column_mean_to_be_between(column=""delivery_time"", min_value=0, max_value=48),expect_column_stdev_to_be_between(column=""delivery_time"", min_value=0, max_value=12)","expect_column_mean_to_be_between(column=""delivery_time"", min_value=0, max_value=48),expect_column_stdev_to_be_between(column=""delivery_time"", min_value=0, max_value=12)",1.0,1.0,1.0,100.00000000000004
"Ensure the `vehicle_type` column entries are from the set `['Truck', 'Van', 'Motorcycle']`.","expect_column_values_to_be_in_set(column=""vehicle_type"", value_set=['Truck', 'Van', 'Motorcycle'])","expect_column_values_to_be_in_set(column=""vehicle_type"", value_set=['Truck', 'Van', 'Motorcycle'])",1.0,1.0,1.0,100.00000000000004
Ensure the `tags` column contains only distinct values and is formatted as a valid JSON array.,"expect_column_values_to_be_unique(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"")","expect_column_values_to_be_unique(column=""tags""),expect_column_values_to_match_json_schema(column=""tags"", schema={""type"": ""array""})",0.9189189189189189,0.9142857142857143,0.9189189189189189,74.20186902521694
"For the `token_symbol` field: Ensure all values are unique and match the regex pattern '^[A-Z]{1,5}$' representing token symbols.","expect_column_values_to_be_unique(column=""token_symbol""),expect_column_values_to_match_regex(column=""token_symbol"", regex=r""^[A-Z]{1,5}$"")","expect_column_values_to_be_unique(column=""token_symbol""),expect_column_values_to_match_regex(column=""token_symbol"", regex=r""^[A-Z]{1,5}$"")",1.0,1.0,1.0,100.00000000000004
For field `candidate_name`: Ensure the field is required (not null). Validate that all values are distinct and match the type 'text'.,"expect_column_values_to_not_be_null(column=""candidate_name""),expect_column_values_to_be_unique(column=""candidate_name""),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text"")","expect_column_values_to_not_be_null(column=""candidate_name""),expect_column_values_to_be_unique(column=""candidate_name""),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Ensure the `timestamp` column in the `logs` table matches the `YYYY-MM-DD HH:MM:SS` format.,"expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
For the `restock_date` column: Ensure all entries are valid datetime strings formatted as `%Y-%m-%d` and are in the future.,"expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""restock_date"")","expect_column_values_to_match_strftime_format(column=""restock_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""restock_date""),expect_column_values_to_be_increasing(column=""restock_date"")  # Assuming the restock date is always increasing.",0.7575757575757575,0.7499999999999999,0.7575757575757575,65.31058382120763
For field 'district_code': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure 'district_code' conforms to the pattern of three uppercase letters followed by three digits.,"expect_column_values_to_not_be_null(column=""district_code""),expect_column_values_to_be_of_type(column=""district_code"", type_=""text""),expect_column_values_to_match_regex(column=""district_code"", regex=r""^[A-Z]{3}\d{3}$"")","expect_column_values_to_not_be_null(column=""district_code""),expect_column_values_to_be_of_type(column=""district_code"", type_=""text""),expect_column_values_to_match_regex(column=""district_code"", regex=r""^[A-Z]{3}[0-9]{3}$"")  # Regular expression to match the pattern.",0.891566265060241,0.8641975308641975,0.891566265060241,85.69116300950228
"In the `engagement_rate` column: Ensure values are within the range of 0 to 1, formatted as decimals.","expect_column_values_to_be_between(column=""engagement_rate"", min_value=0, max_value=1)","expect_column_values_to_be_between(column=""engagement_rate"", min_value=0, max_value=1),expect_column_values_to_match_regex(column=""engagement_rate"", regex=r""^\d+(\.\d{1,2})?$"")  # Regular expression to match decimal values with up to 2 decimal places.",0.5263157894736842,0.5090909090909091,0.5263157894736842,35.239351349785764
Check that the `data_usage` column contains values that are non-negative integers and do not exceed 100 GB.,"expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=100000), ,expect_column_values_to_be_of_type(column=""data_usage"", type_=""int"")","expect_column_values_to_be_between(column=""data_usage"", min_value=0, max_value=100000000000)",0.6666666666666667,0.65,0.6666666666666667,35.75525348300853
Validate that the `order_total` column is the sum of the individual item prices multiplied by their respective quantities and check for any discrepancies.,"expect_column_pair_values_to_be_equal(column_A=""order_total"", column_B=""item_price * quantity"")","expect_column_sum_to_equal(column=""order_total"", value=total_price)",0.6666666666666666,0.24,0.5925925925925926,31.646300436319727
"For field 'json_data': Ensure that all values in (json_data) are valid JSON objects and conform to the specified JSON schema, ensuring it's properly structured.","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema=""your_json_schema_here"")","expect_column_values_to_be_json_parseable(column=""json_data""),expect_column_values_to_match_json_schema(column=""json_data"", schema={""type"": ""object"", ""properties"": {""key1"": {""type"": ""string""}, ""key2"": {""type"": ""number""}, ""key3"": {""type"": ""boolean""}}})  # Replace with actual JSON schema.",0.7301587301587301,0.6885245901639344,0.7301587301587301,42.01537589628049
"Ensure the `department_name` field only includes values from the set `['HR', 'Finance', 'IT', 'Sales']` and is required.","expect_column_to_exist(column=""department_name""),expect_column_values_to_not_be_null(column=""department_name""),expect_column_values_to_be_in_set(column=""department_name"", value_set=['HR', 'Finance', 'IT', 'Sales'])","expect_column_values_to_be_in_set(column=""department_name"", value_set=['HR', 'Finance', 'IT', 'Sales']),expect_column_values_to_not_be_null(column=""department_name"")  # This is a placeholder expectation, as the actual expectation will depend on the specific requirements.",0.7297297297297297,0.6666666666666665,0.4594594594594595,75.44681879863064
For field 'team_name': Ensure this field is of type 'text'. Ensure values in 'team_name' are distinct.,"expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_be_unique(column=""team_name"")","expect_column_values_to_be_of_type(column=""team_name"", type_=""text""),expect_column_values_to_be_unique(column=""team_name"")  # Note: This expectation may not be applicable depending on the requirements.",0.7924528301886793,0.7843137254901961,0.7924528301886793,77.59179214633441
Ensure the `plaintiff_id` field is of type integer. Ensure there are no duplicate values in this column.,"expect_column_values_to_be_of_type(column=""plaintiff_id"", type_=""int""),expect_column_values_to_be_unique(column=""plaintiff_id"")","expect_column_values_to_be_of_type(column=""plaintiff_id"", type_=""int""),expect_column_values_to_be_unique(column=""plaintiff_id"")",1.0,1.0,1.0,100.00000000000004
"For the `customer_id` column, ensure it is of type 'integer' and that all entries are greater than zero.","expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_greater_than(column=""customer_id"", value=0)","expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_be_between(column=""customer_id"", min_value=1, max_value=None)",0.823529411764706,0.7346938775510203,0.823529411764706,77.86966788855449
For field 'vendor_rating': Ensure the field matches the type 'decimal'. Ensure the field contains values between 0.0 and 5.0. Ensure this field exists.,"expect_column_to_exist(column=""vendor_rating""),expect_column_values_to_be_of_type(column=""vendor_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""vendor_rating"", min_value=0.0, +B83max_value=5.0)","expect_column_to_exist(column=""vendor_rating""),expect_column_values_to_be_of_type(column=""vendor_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""vendor_rating"", min_value=0.0, max_value=5.0)",0.9722222222222222,0.9428571428571428,0.9722222222222222,95.52437424470371
"For the `category` column, verify that only values from the set `['Electronics', 'Clothing', 'Home']` are present. Any other value should raise a warning.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])  # This expectation will fail if any other value is present in the column.",0.6829268292682926,0.6666666666666666,0.6829268292682926,67.00813200598796
For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field exists.,"expect_column_to_exist(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Ensure the average `square_feet` value is between 800 and 10,000.","expect_column_mean_to_be_between(column=""square_feet"", min_value=800, max_value=10000)","expect_column_mean_to_be_between(column=""square_feet"", min_value=800, max_value=10000)",1.0,1.0,1.0,100.00000000000004
For field 'voter_id': Ensure the field is required (not null). Ensure the field matches the type 'string'. Ensure all values are unique within this column.,"expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""string""),expect_column_values_to_be_unique(column=""voter_id"")","expect_column_values_to_not_be_null(column=""voter_id""),expect_column_values_to_be_of_type(column=""voter_id"", type_=""string""),expect_column_values_to_be_unique(column=""voter_id"")  # Note: This expectation may not be applicable depending on the use case.  # For example, if the use case requires unique values across multiple columns, this expectation may not be sufficient.  # In such cases, additional expectations may need to be added to ensure uniqueness across multiple columns.  # For example, if the use case requires unique values across multiple columns, the expectation could be modified to check for uniqueness across multiple columns.  # For example:expect_column_pair_values_to_be_unique(column_A=""column_A"", column_B=""column_B"")  # Note: This expectation may not be applicable depending on the use case.  # For example, if the use case requires unique values across multiple columns, this expectation may not be sufficient.  # In such cases, additional expectations may need to be added to ensure uniqueness across multiple columns.  # For example, if the use case requires unique values across multiple columns, the expectation could be modified to check for uniqueness across multiple columns.  # For example:expect_column_values_to_be_unique(column=""",0.2719298245614035,0.2654867256637168,0.2719298245614035,24.11189402617811
For field 'room_number': Ensure the field matches the type 'integer'. Ensure values in (room_number) are unique and cannot be null.,"expect_column_values_to_be_of_type(column=""room_number"", type_=""int""),expect_column_values_to_be_unique(column=""room_number""),expect_column_values_to_not_be_null(column=""room_number"")","expect_column_values_to_be_of_type(column=""room_number"", type_=""int""),expect_column_values_to_be_unique(column=""room_number""),expect_column_values_to_not_be_null(column=""room_number"")",1.0,1.0,1.0,100.00000000000004
Validate that the `response_time` column contains numeric values and the average response time is less than 30 minutes.,"expect_column_values_to_be_of_type(column=""response_time"", type_=""float""),expect_column_mean_to_be_between(column=""response_time"", min_value=0, max_value=30)","expect_column_values_to_be_of_type(column=""response_time"", type_=""float""),expect_column_mean_to_be_between(column=""response_time"", min_value=None, max_value=30)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.81282631934458
For fields `category_id` and `product_price`: Ensure that the prices are arranged in increasing order by category.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""product_price"", column_B=""category_id"")","expect_column_values_to_be_increasing(column=""product_price"", order_by=""category_id"")",0.6451612903225806,0.27586206896551724,0.6451612903225806,45.24282229721269
"Check that the `device_model` column only includes distinct values matching `['iPhone', 'Samsung', 'Google']`.","expect_column_distinct_values_to_equal_set(column=""device_model"", value_set=['iPhone', 'Samsung', 'Google'])","expect_column_values_to_be_in_set(column=""device_model"", value_set=['iPhone', 'Samsung', 'Google'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
Ensure the `enrollment_count` column contains values that are greater than or equal to the `minimum_enrollment` column for each course.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""enrollment_count"", column_B=""minimum_enrollment"")","expect_column_values_to_be_between(column=""enrollment_count"", min_value=minimum_enrollment)",0.6451612903225806,0.27586206896551724,0.6451612903225806,34.30741179174431
Verify that the `measurement_date` column conforms to the date format 'YYYY-MM-DD' and contains no missing values.,"expect_column_to_exist(column=""measurement_date""),expect_column_values_to_match_strftime_format(column=""measurement_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""measurement_date"")","expect_column_values_to_match_strftime_format(column=""measurement_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""measurement_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
Check that the distribution of `delivery_times` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""delivery_times"", threshold=0.05)","expect_column_distribution_ks_test_p_value_to_be_greater_than(column=""delivery_times"", threshold=0.05)",0.9714285714285714,0.9090909090909091,0.9714285714285714,91.99522176589419
Check that the `balance` column contains values that are non-negative and that all entries are formatted to two decimal places.,"expect_column_values_to_be_between(column=""balance"", min_value=0),expect_column_values_to_match_regex(column=""balance"", regex=r""^\d+(\.\d{2})?$"")","expect_column_values_to_be_between(column=""balance"", min_value=0),expect_column_values_to_match_regex(column=""balance"", regex=r""^\d+(\.\d{1,2})?$"")",0.9795918367346939,0.9361702127659574,0.9795918367346939,95.94863506034301
"Verify that the `subscription_type` column contains valid types limited to `['Free', 'Basic', 'Premium']`.","expect_column_values_to_be_in_set(column=""subscription_type"", value_set=['Free', 'Basic', 'Premium'])","expect_column_values_to_be_of_type(column=""subscription_type"", type_=""text""),expect_column_values_to_be_in_set(column=""subscription_type"", value_set=['Free', 'Basic', 'Premium'])",0.7142857142857143,0.7000000000000001,0.7142857142857143,51.977527909438486
Validate that the `booking_reference` is a combination of 6 alphanumeric characters and unique across records.,"expect_column_value_lengths_to_equal(column=""booking_reference"", length=6),expect_column_values_to_be_unique(column=""booking_reference""),expect_column_values_to_match_regex(column=""booking_reference"", regex=r""^[a-zA-Z0-9]{6}$"")","expect_column_values_to_match_regex(column=""booking_reference"", regex=r""^[a-zA-Z0-9]{6}$""),expect_column_values_to_be_unique(column=""booking_reference"")  # This expectation is not yet implemented, but it should be added to the expectation list.",0.7105263157894738,0.6486486486486486,0.5,69.04757220529481
Ensure the `cargo_description` field contains string lengths between 5 and 255 characters and does not include any SQL-like patterns.,"expect_column_value_lengths_to_be_between(column=""cargo_description"", min_value=5, max_value=255),expect_column_values_to_not_match_regex(column=""cargo_description"", regex=r"".*(SELECT|INSERT|UPDATE|DELETE|DROP|;|--|#).*"")","expect_column_value_lengths_to_be_between(column=""cargo_description"", min_value=5, max_value=255),expect_column_values_to_not_match_regex(column=""cargo_description"", regex=r""SELECT|FROM|WHERE|ORDER|BY|LIMIT|OFFSET|UNION|INTERSECT|EXCEPT|TABLE|PROCEDURE|FUNCTION|VIEW|DATABASE|USER|PASSWORD|HOST|PORT|DATABASE|TABLE|COLUMN|INDEX|CONSTRAINT|PROCEDURE|FUNCTION|VIEW|DATABASE|USER|PASSWORD|HOST|PORT|DATABASE|TABLE|COLUMN|INDEX|CONSTRAINT|PROCEDURE|FUNCTION|VIEW|DATABASE|USER|PASSWORD|HOST|PORT|DATABASE|TABLE|COLUMN|INDEX|CONSTRAINT|PROCEDURE|FUNCTION|VIEW|DATABASE|USER|PASSWORD|HOST|PORT|DATABASE|TABLE|COLUMN|INDEX|CONSTRAINT|PROCEDURE|FUNCTION|VIEW|DATABASE|USER|PASSWORD|HOST|PORT|DATABASE|TABLE|COLUMN|INDEX|CONSTRAINT|PROCEDURE|FUNCTION|VIEW|DATABASE|USER|PASSWORD|HOST|PORT|DATABASE|TABLE|COLUMN|INDEX|CONSTRAINT|PROCEDURE|FUNCTION|VIEW|DATABASE|USER|PASSWORD|HOST|PORT|DATABASE|TABLE|COLUMN|INDEX|",0.35802469135802467,0.35,0.35802469135802467,23.55846604517148
Ensure the `plaintiff_count` column has values that are integers and fall within the range of `1` to `5`.,"expect_column_values_to_be_of_type(column=""plaintiff_count"", type_=""int""),expect_column_values_to_be_between(column=""plaintiff_count"", min_value=1, max_value=5)","expect_column_values_to_be_of_type(column=""plaintiff_count"", type_=""int""),expect_column_values_to_be_between(column=""plaintiff_count"", min_value=1, max_value=5)",1.0,1.0,1.0,100.00000000000004
For field 'sales_date': Ensure the expect column to exist; Ensure this field matches the type 'date' and contains values in chronological order.,"expect_column_to_exist(column=""sales_date""),expect_column_values_to_be_of_type(column=""sales_date"", type_=""date""),expect_column_values_to_be_increasing(column=""sales_date"")","expect_column_to_exist(column=""sales_date""),expect_column_values_to_be_of_type(column=""sales_date"", type_=""date""),expect_column_values_to_be_increasing(column=""sales_date"")  # Note: This expectation may not be applicable depending on the actual use case.",0.8115942028985507,0.8059701492537313,0.8115942028985507,80.36395088463703
Ensure the `premium_amount` field contains only numeric values greater than zero.,"expect_column_values_to_be_of_type(column=""premium_amount"", type_=""float""),expect_column_values_to_be_between(column=""premium_amount"", min_value=0.01, max_value=None)","expect_column_values_to_be_between(column=""premium_amount"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""premium_amount"", type_=""float"")",0.9454545454545454,0.8679245283018868,0.5818181818181818,94.51053882536416
"For the `public_service_feedback` column: Ensure that all entries are valid JSON objects with required fields `['service_id', 'feedback_text', 'timestamp']`.","expect_column_values_to_be_json_parseable(column=""public_service_feedback""),expect_column_values_to_match_json_schema(column=""public_service_feedback"", schema={""type"": ""object"", ""required"": [""service_id"", ""feedback_text"", ""timestamp""]})","expect_column_values_to_match_json_schema(column=""public_service_feedback"", schema={""type"": ""object"", ""required"": [""service_id"", ""feedback_text"", ""timestamp""], ""properties"": {""service_id"": {""type"": ""string""}, ""feedback_text"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}}})",0.6984126984126984,0.6229508196721313,0.634920634920635,52.596613368826546
Validate that the `attendance_percentage` values are within the range of 0% to 100%.,"expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"For field 'threat_level': Ensure the field matches the type 'text'. Ensure values in (threat_level) are one of `['Low', 'Medium', 'High']`.","expect_column_values_to_be_of_type(column=""threat_level"", type_=""text""),expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High'])","expect_column_values_to_be_of_type(column=""threat_level"", type_=""text""),expect_column_values_to_be_in_set(column=""threat_level"", value_set=['Low', 'Medium', 'High'])  # Note: This is a placeholder value_set, please replace with actual expected values.",0.8059701492537313,0.8,0.8059701492537313,77.63481538636026
For the `json_payload` field: Validate that it is a properly formatted JSON object and check that it conforms to the defined JSON schema.,"expect_column_values_to_be_json_parseable(column=""json_payload""),expect_column_values_to_match_json_schema(column=""json_payload"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""json_payload""),expect_column_values_to_match_json_schema(column=""json_payload"", schema={""type"": ""object"", ""properties"": {""key1"": {""type"": ""string""}, ""key2"": {""type"": ""number""}, ""key3"": {""type"": ""boolean""}}})  # Replace with actual JSON schema.",0.7540983606557378,0.7457627118644068,0.7540983606557378,49.28848597194154
Verify that the `discharge_date` is greater than the `admission_date` for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""discharge_date"", column_B=""admission_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""discharge_date"", column_B=""admission_date"")",1.0,1.0,1.0,100.00000000000004
For field 'reply_count': Ensure this field must be of type 'integer'. Validate that values in 'reply_count' are non-negative and can pass KS test for uniform distribution.,"expect_column_values_to_be_of_type(column=""reply_count"", type_=""int""),expect_column_values_to_be_between(column=""reply_count"", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""reply_count"", threshold=0.05)","expect_column_values_to_be_of_type(column=""reply_count"", type_=""int""),expect_column_values_to_be_between(column=""reply_count"", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""reply_count"", threshold=0.05)  # Replace threshold with actual threshold value.",0.9375,0.9361702127659575,0.9375,92.41617488669405
Ensure the `subject` column is required (not null). Validate the field matches the type 'text'.,"expect_column_values_to_not_be_null(column=""subject""),expect_column_values_to_be_of_type(column=""subject"", type_=""text"")","expect_column_values_to_not_be_null(column=""subject""),expect_column_values_to_be_of_type(column=""subject"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"For the `subscription_plan` field: Verify that all entries match one of the allowed values in `['Free', 'Basic', 'Premium']`.","expect_column_values_to_be_in_set(column=""subscription_plan"", value_set=['Free', 'Basic', 'Premium'])","expect_column_values_to_be_in_set(column=""subscription_plan"", value_set=['Free', 'Basic', 'Premium'])",1.0,1.0,1.0,100.00000000000004
For field 'delivery_date': Validate that all entries adhere to the datetime format '%Y-%m-%d'. Ensure there are no missing values.,"expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""delivery_date"")","expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""delivery_date"")",1.0,1.0,1.0,100.00000000000004
For field 'patient_id': Ensure the field is required (not null). Ensure the field contains only unique values.,"expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")","expect_column_values_to_not_be_null(column=""patient_id""),expect_column_values_to_be_unique(column=""patient_id"")",1.0,1.0,1.0,100.00000000000004
"For the `hashtag` column: Verify that it contains valid hashtags, ensuring no entries exceed the defined character limit of `30`.","expect_column_values_to_match_regex(column=""hashtag"", regex=r""^#[A-Za-z0-9_]{1,30}$"")","expect_column_value_lengths_to_be_between(column=""hashtag"", min_value=1, max_value=30),expect_column_values_to_match_regex(column=""hashtag"", regex=r""^#([A-Za-z0-9_-]{1,30})?$"")  # Regular expression to validate hashtag format.",0.6037735849056604,0.5882352941176471,0.6037735849056604,37.31481244497323
Ensure the `case_number` field contains only unique values. It must not have any missing values and should conform to the type 'text'.,"expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")","expect_column_values_to_be_unique(column=""case_number""),expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_of_type(column=""case_number"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Ensure the sum of the `claims_paid` column does not exceed $500,000, indicating financial prudence.","expect_column_sum_to_be_between(column=""claims_paid"", min_value=None, max_value=500000)","expect_column_sum_to_be_between(column=""claims_paid"", min_value=0, max_value=500000)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
For the `citizen_id` column: Ensure values match the pattern `^[0-9]{12}$`. Validate that no entries are null and all are unique.,"expect_column_values_to_match_regex(column=""citizen_id"", regex=r""^[0-9]{12}$""),expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id"")","expect_column_values_to_match_regex(column=""citizen_id"", regex=r""^[0-9]{12}$""),expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id"")  # Assuming there are no duplicates, this can be omitted.",0.88,0.8767123287671234,0.88,86.73815250927194
"Ensure the `phone_number` field in HRMS and E-commerce datasets matches the regex pattern `^\+?[1-9]\d{1,14}$`.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `call_duration` column values are within the range of 0 to 3600 seconds.,"expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)","expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)",1.0,1.0,1.0,100.00000000000004
Check that the `transaction_amount` column follows a normal distribution with a mean greater than 0.,"expect_column_mean_to_be_between(column=""transaction_amount"", min_value=0)","expect_column_mean_to_be_greater_than(column=""transaction_amount"", threshold=0)",0.75,0.5454545454545454,0.75,70.94521095075528
"For the `attendance` column, ensure the mean value is greater than 1000 and the standard deviation is less than 500.","expect_column_mean_to_be_between(column=""attendance"", min_value=1000),expect_column_stdev_to_be_between(column=""attendance"", max_value=500)","expect_column_mean_to_be_between(column=""attendance"", min_value=1000, max_value=None),expect_column_stdev_to_be_between(column=""attendance"", min_value=0, max_value=500)",0.88,0.7916666666666667,0.88,75.89136166635478
In the `transaction_date` column: Ensure all entries match the datetime format '%Y-%m-%d %H:%M:%S' and check for any missing values.,"expect_column_to_exist(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_not_be_null(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""transaction_date"")  # Check for null values.",0.8358208955223881,0.8307692307692308,0.8358208955223881,73.93000920680669
"Validate that the mean of the `cost` column is between $100 and $500, with no outliers beyond $1000.","expect_column_mean_to_be_between(column=""cost"", min_value=100, max_value=500),expect_column_max_to_be_between(column=""cost"", max_value=1000)","expect_column_mean_to_be_between(column=""cost"", min_value=100, max_value=500),expect_column_outlier_count_to_be_between(column=""cost"", min_value=0, max_value=1)",0.851851851851852,0.7692307692307692,0.851851851851852,78.68569244122871
"For the `call_duration` column, verify that all values are within the range of `0` to `3600` seconds and follow a normal distribution.","expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""call_duration"", threshold=0.05)","expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600),expect_column_values_to_be_normal_distribution(column=""call_duration"")",0.8275862068965517,0.7142857142857143,0.793103448275862,67.08598613583575
"For table 'shows': Ensure the table contains the columns: 'show_id', 'title', 'genre', and 'release_year' in that order. Verify that the row count is between 1 and 500.","expect_table_columns_to_match_ordered_list(column_list=[""show_id"", ""title"", ""genre"", ""release_year""]),expect_table_row_count_to_be_between(min_value=1, max_value=500)","expect_table_to_exist(table=""shows""),expect_column_to_exist(column=""show_id""),expect_column_to_exist(column=""title""),expect_column_to_exist(column=""genre""),expect_column_to_exist(column=""release_year""),expect_table_row_count_to_be_between(min_value=1, max_value=500)  # Replace min_value and max_value with actual values.",0.5853658536585367,0.425,0.5853658536585367,35.913033493265324
For the `wallet_address` field: Ensure values are valid JSON objects representing wallet data and conform to the specified schema.,"expect_column_values_to_be_json_parseable(column=""wallet_address""),expect_column_values_to_match_json_schema(column=""wallet_address"", schema=""your_schema_here"")","expect_column_values_to_be_json_parseable(column=""wallet_address""),expect_column_values_to_match_json_schema(column=""wallet_address"", schema={""type"": ""object"", ""properties"": {""address"": {""type"": ""string""}, ""balance"": {""type"": ""number""}, ""nonce"": {""type"": ""number""}, ""timestamp"": {""type"": ""number""}, ""signature"": {""type"": ""string""}}})}  # (1)",0.6562500000000001,0.6451612903225806,0.6562500000000001,33.84388213973894
Ensure the `transaction_id` column contains unique values and adheres to the format `^[A-F0-9]{64}$`.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[A-F0-9]{64}$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[A-F0-9]{64}$"")",1.0,1.0,1.0,100.00000000000004
Verify that the `listing_date` column has all entries in the 'MM/DD/YYYY' format and are parsed correctly.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""listing_date"")  # This is a new expectation, but it's not clear if it's necessary.  -->",0.5555555555555556,0.5384615384615384,0.5555555555555556,47.00168974426527
"Ensure the `username` column values match the regex pattern `^[a-zA-Z0-9_]{3,15}$` to maintain valid username formats.","expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")","expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the mean value of the `claim_amount` column is between 500 and 2000.,"expect_column_mean_to_be_between(column=""claim_amount"", min_value=500, max_value=2000)","expect_column_mean_to_be_between(column=""claim_amount"", min_value=500, max_value=2000)",1.0,1.0,1.0,100.00000000000004
"For field 'temperature_control': Ensure the field matches the type 'decimal'. Validate that values fall within the range of -20.0 to 25.0 degrees Celsius, ensuring compliance with product handling requirements.","expect_column_values_to_be_of_type(column=""temperature_control"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature_control"", min_value=-20.0, max_value=25.0)","expect_column_values_to_be_of_type(column=""temperature_control"", type_=""decimal""),expect_column_values_to_be_between(column=""temperature_control"", min_value=-20.0, max_value=25.0)  # Replace with actual min/max values based on product handling requirements.",0.8405797101449275,0.835820895522388,0.8405797101449275,81.2033297240612
"Check that the `post_type` column values are from the set `['text', 'image', 'video', 'link']`.","expect_column_values_to_be_in_set(column=""post_type"", value_set=['text', 'image', 'video', 'link'])","expect_column_values_to_be_in_set(column=""post_type"", value_set=['text', 'image', 'video', 'link'])",1.0,1.0,1.0,100.00000000000004
Verify the `transaction_amount` field is of type 'decimal' and does not contain any null values.,"expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_not_be_null(column=""transaction_amount"")","expect_column_values_to_be_of_type(column=""transaction_amount"", type_=""decimal""),expect_column_values_to_not_be_null(column=""transaction_amount"")",1.0,1.0,1.0,100.00000000000004
For field 'release_date': Ensure the field matches the type 'datetime'. Verify that all values conform to the format '%Y-%m-%d'.,"expect_column_values_to_be_of_type(column=""release_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_of_type(column=""release_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Ensure the `case_id` column is present and contains unique identifiers matching the format 'CXXXX' where X is a digit.,"expect_column_to_exist(column=""case_id""),expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""^C\d{4}$"")","expect_column_to_exist(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""C\d{4}"")  # Note: This regex assumes the length of the case_id to be 5 digits. If this assumption is incorrect, adjust the regex accordingly.",0.6756756756756758,0.6111111111111112,0.5675675675675677,61.072411540217395
Validate that the `stock_quantity` column has a minimum value of 0 and maximum of 1000.,"expect_column_min_to_be_between(column=""stock_quantity"", min_value=0),expect_column_max_to_be_between(column=""stock_quantity"", max_value=1000)","expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=1000)",0.7179487179487181,0.5945945945945946,0.7179487179487181,44.741147524778484
For field 'delivery_date': Ensure values are valid dates and that they are in the future. Ensure this field is not null.,"expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_increasing(column=""delivery_date""),expect_column_values_to_not_be_null(column=""delivery_date"")","expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.  # Note: This assumes today is a valid date.",0.5714285714285714,0.47058823529411764,0.5714285714285714,49.89516221487414
Verify that the `admission_date` column matches the format 'MM/DD/YYYY' and is a valid date.,"expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""admission_date"")","expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""admission_date"")  # This is a new expectation that was added in December 2023. It checks if the column values are valid date strings that can be parsed by the `dateutil.parse()` function.",0.625,0.6153846153846153,0.625,60.61475662254469
Validate that the `test_scores` in the `Assessments` table have a Kullback-Leibler divergence of less than 0.1 when compared to the `previous_year_scores`.,"expect_column_kl_divergence_to_be_less_than(column_a=""test_scores"", column_b=""previous_year_scores"", threshold=0.1)","expect_column_divergence_to_be_between(column=""test_scores"", min_value=0.1, max_value=None)",0.5555555555555556,0.29411764705882354,0.5555555555555556,35.48025638344454
For field 'case_summary': Ensure the field can be null. Ensure the length of 'case_summary' does not exceed 500 characters.,"expect_column_values_to_be_null(column=""case_summary""),expect_column_value_lengths_to_be_between(column=""case_summary"", min_value=0, max_value=500)","expect_column_values_to_be_null(column=""case_summary""),expect_column_value_lengths_to_be_between(column=""case_summary"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
"In the `supplier_contact` field, ensure all string values match the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.","expect_column_values_to_match_regex(column=""supplier_contact"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_values_to_match_regex(column=""supplier_contact"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")",1.0,1.0,1.0,100.00000000000004
For the `carrier_id` column: Ensure values are unique and not null. Verify that this ID exists in the `carriers` table.,"expect_column_values_to_be_unique(column=""carrier_id""),expect_column_values_to_not_be_null(column=""carrier_id""),expect_column_values_to_be_in_set(column=""carrier_id"", value_set=carriers_table_ids)  # Note: You would need to replace `carriers_table_ids` with the actual set of carrier IDs from the carriers table.","expect_column_values_to_be_unique(column=""carrier_id""),expect_column_values_to_not_be_null(column=""carrier_id""),expect_column_values_to_be_in_set(column=""carrier_id"", value_set=carriers_table_values)",0.7499999999999999,0.7441860465116279,0.7499999999999999,68.44591824289695
"For field 'category': Ensure values in (category) must exist in the predefined set ['electronics', 'clothing', 'home']. Validate that it is not null.","expect_column_values_to_be_in_set(column=""category"", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=""category"")  # This will also validate that the column is not null.",0.8214285714285715,0.8148148148148148,0.8214285714285715,81.09581747796652
For field 'subscriber_id': Ensure the field is required (not null). Validate that the length of (subscriber_id) is exactly 12 characters.,"expect_column_values_to_not_be_null(column=""subscriber_id""),expect_column_value_lengths_to_equal(column=""subscriber_id"", length=12)","expect_column_values_to_not_be_null(column=""subscriber_id""),expect_column_value_lengths_to_equal(column=""subscriber_id"", value=12)",0.9523809523809523,0.9,0.9523809523809523,94.40602839389663
Check that the total number of claims in the `claims_count` column does not exceed `10` for any active policy.,"expect_column_max_to_be_between(column=""claims_count"", max_value=10)","expect_column_value_lengths_to_be_between(column=""claims_count"", min_value=0, max_value=10)",0.7857142857142857,0.6153846153846153,0.7857142857142857,64.7381907850557
Ensure the `attachment_size` column contains values that do not exceed 10MB and that all files exist.,"expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=10 * 1024 * 1024),expect_file_to_exist(column=""attachment_size"")","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=10 * 1024 * 1024),expect_file_to_exist(file_path=""attachment"")  # Replace ""attachment"" with the actual file path.",0.7999999999999999,0.7547169811320754,0.7999999999999999,73.41452416147018
Ensure that the `block_reward` column values are non-negative and consistent with historical block reward data.,"expect_column_values_to_be_between(column=""block_reward"", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""block_reward"", threshold=0.05)","expect_column_values_to_be_between(column=""block_reward"", min_value=0),expect_column_values_to_be_increasing(column=""block_reward"")  # Note: This expectation may not be applicable depending on the specific requirements.",0.6060606060606061,0.5,0.6060606060606061,56.03595804565183
Ensure the `order_date` column contains values formatted as 'YYYY-MM-DD' and can be parsed by dateutil.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")  # Note: This expectation is not yet implemented, but it should be added in the future.",0.7692307692307693,0.761904761904762,0.7692307692307693,74.8279877183659
"For the `service_request_date`, ensure all entries are in the format `MM/DD/YYYY` and are not older than one year.","expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""service_request_date"")  # This will check for valid date formats,# Note: There is no direct expectation for checking if dates are not older than one year; this would typically require a custom check or a separate validation step.","expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""2023-01-01"", max_value=""2024-01-01"")",0.5102040816326531,0.47916666666666663,0.5102040816326531,54.944739318697714
For the `customer_feedback` field: Ensure it is a text type and does not exceed 500 characters.,"expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=500)","expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
For the `case_id` field: Ensure the field is required (not null). Ensure values in `case_id` are unique and match the type 'text'.,"expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text"")","expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `shipment_id` column contains unique values across all records, and no duplicates exist.","expect_column_values_to_be_unique(column=""shipment_id"")","expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_be_unique(column=""shipment_id"")",0.6666666666666666,0.6399999999999999,0.6666666666666666,46.7684786551031
Ensure the `article_id` column contains only distinct values and is not null.,"expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_not_be_null(column=""article_id"")","expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_not_be_null(column=""article_id"")",1.0,1.0,1.0,100.00000000000004
Check that the `order_date` field is formatted as 'YYYY-MM-DD' and all entries can be parsed into valid datetime objects.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")  # Note: This is a new expectation that may not be available today. Please check if it's available before using it.",0.704225352112676,0.6956521739130436,0.704225352112676,70.17936011225832
Verify that the `appointment_date` column is of type 'date' and does not contain dates beyond the current month.,"expect_column_values_to_be_of_type(column=""appointment_date"", type_=""date""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""1900-01-01"", max_value=""2023-10-31"")","expect_column_values_to_be_of_type(column=""appointment_date"", type_=""date""),expect_column_values_to_be_between(column=""appointment_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")",0.9354838709677419,0.8666666666666667,0.9354838709677419,92.99940324325054
For the `transaction_id` field: Ensure each entry matches the regex pattern `^[0-9]{10}$`.,"expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[0-9]{10}$"")","expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[0-9]{10}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `employee_id` column is unique and matches the format `EMP-XXXX`.,"expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""^EMP-\d{4}$"")","expect_column_values_to_be_unique(column=""employee_id""),expect_column_values_to_match_regex(column=""employee_id"", regex=r""^EMP-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_fee` column contains values within the range of 0.0001 to 1.0 BTC.,"expect_column_values_to_be_between(column=""transaction_fee"", min_value=0.0001, max_value=1.0)","expect_column_values_to_be_between(column=""transaction_fee"", min_value=0.0001, max_value=1.0)",1.0,1.0,1.0,100.00000000000004
"In the `listing_price` column: Ensure values are within the range of $10,000 to $10,000,000. Confirm that no entries are negative.","expect_column_values_to_be_between(column=""listing_price"", min_value=10000, max_value=10000000),expect_column_values_to_be_greater_than(column=""listing_price"", value=0)","expect_column_values_to_be_between(column=""listing_price"", min_value=10000, max_value=10000000),expect_column_values_to_not_be_negative(column=""listing_price"")",0.8846153846153846,0.8,0.8846153846153846,82.76192629139766
"For the `allergy_info` field, check that it does not contain any values matching the regex pattern `^[0-9]*$`.","expect_column_values_to_not_match_regex(column=""allergy_info"", regex=r""^[0-9]*$"")","expect_column_values_to_not_match_regex(column=""allergy_info"", regex=r""^[0-9]*$"")",1.0,1.0,1.0,100.00000000000004
For field 'file_upload': Ensure the file exists and matches the specified hash value. Validate that the file does not exceed 5MB in size and contains valid CSV headers.,"expect_file_to_exist(file_path=""file_upload""),expect_file_hash_to_equal(file_path=""file_upload"", hash_value=""specified_hash_value""),expect_file_size_to_be_between(file_path=""file_upload"", min_value=0, max_value=5 * 1024 * 1024),expect_file_to_have_valid_table_header(file_path=""file_upload"")","expect_file_to_exist(file_path=""file_upload""),expect_file_hash_to_equal(file_path=""file_upload"", hash_value=""specified_hash_value""),expect_file_size_to_be_between(file_path=""file_upload"", min_value=0, max_value=5 * 1024 * 1024),expect_file_to_have_valid_csv_headers(file_path=""file_upload"")  # Assuming file_upload is a CSV file.",0.9174311926605505,0.8971962616822429,0.9174311926605505,88.44046702464784
For field 'customer_id': Ensure values are unique and of type 'integer'. Ensure this field is required.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")  # Note: This assumes that the column is nullable. If it is not, you can remove this expectation.",0.7848101265822784,0.7532467532467533,0.6329113924050633,76.192134487851
For the `election_results` field: Ensure all results are valid JSON objects that adhere to the defined schema for election outcomes.,"expect_column_values_to_be_json_parseable(column=""election_results""),expect_column_values_to_match_json_schema(column=""election_results"", schema={""type"": ""object"", ""properties"": { ... }})  # Replace ... with the actual schema definition.","expect_column_values_to_be_json_parseable(column=""election_results""),expect_column_values_to_match_json_schema(column=""election_results"", schema={""type"": ""object"", ""properties"": {""winner"": {""type"": ""string""}, ""loser"": {""type"": ""string""}, ""total_votes"": {""type"": ""number""}, ""percentage_of_votes"": {""type"": ""number""}}})  # Replace type with actual type for your database.",0.7012987012987012,0.6133333333333334,0.7012987012987012,47.68996090302069
"For the `product_name` field: Ensure string lengths fall between 1 and 100 characters, with no special characters allowed.","expect_column_value_lengths_to_be_between(column=""product_name"", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=""product_name"", regex=r""[^a-zA-Z0-9 ]"")","expect_column_value_lengths_to_be_between(column=""product_name"", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=""product_name"", regex=r""[\W_]"")  # Remove special characters and whitespace.",0.8484848484848485,0.84375,0.8484848484848485,84.30859527379373
Ensure that the `user_data.csv` file exists and has a size between 1KB and 5MB.,"expect_file_to_exist(file_path=""user_data.csv""),expect_file_size_to_be_between(min_value=1024, max_value=5242880)","expect_file_to_exist(file_path=""user_data.csv""),expect_file_size_to_be_between(min_value=1_000, max_value=5_000_000)  # Replace 1_000 with 1KB and 5_000_000 with 5MB.",0.6785714285714285,0.6296296296296295,0.6785714285714285,59.803364643629784
Ensure the `shipping_cost` column values are non-negative numbers and do not exceed 10% of the total order value.,"expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=0.1), ,expect_column_pair_values_A_to_be_less_than_B(column_A=""shipping_cost"", column_B=""total_order_value"")","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=None),expect_column_proportion_to_be_between(column=""shipping_cost"", min_value=0, max_value=0.1)  # Assuming 10% of total order value as threshold.",0.7297297297297296,0.5555555555555555,0.6486486486486486,61.117045079967355
Ensure the `product_id` column contains distinct values that match the pattern `^[0-9]{10}$`.,"expect_column_values_to_match_regex(column=""product_id"", regex=r""^[0-9]{10}$""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_match_regex(column=""product_id"", regex=r""^[0-9]{10}$"")",1.0,0.9545454545454546,0.6086956521739131,99.53378683790139
"Validate that the `sample_size` column has a minimum of 30 and a maximum of 1000, ensuring appropriate statistical power.","expect_column_min_to_be_between(column=""sample_size"", min_value=30),expect_column_max_to_be_between(column=""sample_size"", max_value=1000)","expect_column_values_to_be_between(column=""sample_size"", min_value=30, max_value=1000)",0.7179487179487181,0.5945945945945946,0.7179487179487181,44.741147524778484
Check that the `email_recipient_list` column contains valid JSON arrays with a minimum of one and a maximum of 50 unique email addresses.,"expect_column_values_to_be_json_parseable(column=""email_recipient_list""),expect_column_unique_value_count_to_be_between(column=""email_recipient_list"", min_value=1, max_value=50)","expect_column_values_to_be_json_parseable(column=""email_recipient_list""),expect_column_value_lengths_to_be_between(column=""email_recipient_list"", min_value=1, max_value=50),expect_column_values_to_be_unique(column=""email_recipient_list"")  # This expectation may not be necessary depending on the specific requirements.  -->",0.717948717948718,0.631578947368421,0.6923076923076924,58.33462013592942
"Ensure that the `zipcode` column conforms to the regex pattern `^\d{5}$` and does not include any invalid zip codes from the list `['00000', '12345']`.","expect_column_values_to_match_regex(column=""zipcode"", regex=r""^\d{5}$""),expect_column_values_to_not_be_in_set(column=""zipcode"", value_set=['00000', '12345'])","expect_column_values_to_match_regex(column=""zipcode"", regex=r""^\d{5}$""),expect_column_values_to_not_be_in_set(column=""zipcode"", value_set=['00000', '12345'])",1.0,1.0,1.0,100.00000000000004
Ensure the `watch_time` column has a maximum value not exceeding 24 hours and an average watch time greater than 2 hours.,"expect_column_max_to_be_between(column=""watch_time"", max_value=24),expect_column_mean_to_be_between(column=""watch_time"", min_value=2, max_value=None)","expect_column_max_to_be_between(column=""watch_time"", min_value=0, max_value=24),expect_column_mean_to_be_between(column=""watch_time"", min_value=2)",0.9259259259259259,0.8461538461538461,0.8888888888888888,89.78812963372305
Validate that the `incident_date` column contains dates that fall within the last five years and that no incident is recorded with a future date.,"expect_column_values_to_be_between(column=""incident_date"", min_value=""2018-10-01"", max_value=""2023-10-01""),expect_column_values_to_be_decreasing(column=""incident_date"")","expect_column_values_to_be_between(column=""incident_date"", min_value=""2023-01-01"", max_value=""2023-12-31""),expect_column_values_to_be_increasing(column=""incident_date"")  # This expectation is not necessary but can be used to ensure that the date values are increasing over time.",0.64,0.5205479452054794,0.6133333333333333,62.37871172864622
For field 'settlement_amount': Ensure this field is numeric and that values are greater than or equal to zero.,"expect_column_values_to_be_of_type(column=""settlement_amount"", type_=""numeric""),expect_column_values_to_be_between(column=""settlement_amount"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""settlement_amount"", type_=""float""),expect_column_values_to_be_between(column=""settlement_amount"", min_value=0)",0.9019607843137256,0.8571428571428572,0.9019607843137256,84.39324390354955
Check that the `service_termination_date` column contains dates that are later than the `service_start_date`. Ensure there are no null values.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""service_termination_date"", column_B=""service_start_date""),expect_column_values_to_not_be_null(column=""service_termination_date"")","expect_column_values_to_be_between(column=""service_termination_date"", min_value=""service_start_date""),expect_column_values_to_not_be_null(column=""service_termination_date"")",0.8070175438596492,0.6181818181818183,0.8070175438596492,69.91376990198253
For the `data_limit_gb` and `monthly_charge` columns: Confirm that the sum of `monthly_charge` is correctly calculated based on `data_limit_gb` values.,"expect_multicolumn_sum_to_equal(column_list=[""monthly_charge""], sum_value=calculate_sum_based_on_data_limit(data_limit_gb))","expect_column_sum_to_be_between(column=""monthly_charge"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""monthly_charge"", min_value=0, max_value=None)  # Replace with actual expectation for `monthly_charge` sum based on `data_limit_gb` values.",0.4375,0.25806451612903225,0.4375,16.968560050228568
Check that the `enrollment_date` column contains dates that are not null and fall within the current academic year.,"expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-05-31"")","expect_column_values_to_not_be_null(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-08-01"", max_value=""2024-07-31"")  # Replace with actual date range for your current academic year.",0.7435897435897437,0.6842105263157895,0.717948717948718,70.95312741957247
"Check that files in the `patient_records` directory exist, are less than 5MB in size, and match the specified hash value.","expect_file_to_exist(file_path=""patient_records/*""),expect_file_size_to_be_between(file_path=""patient_records/*"", min_value=0, max_value=5 * 1024 * 1024),expect_file_hash_to_equal(file_path=""patient_records/*"", hash_value=""SPECIFIED_HASH_VALUE"")","expect_file_to_exist(file_path=""patient_records/medical_record_1.txt""),expect_file_size_to_be_between(file_path=""patient_records/medical_record_1.txt"", min_value=0, max_value=5 * 1024 * 1024),expect_file_hash_to_equal(file_path=""patient_records/medical_record_1.txt"", hash_value=""specified_hash_value"")",0.8695652173913044,0.8000000000000002,0.8695652173913044,72.03285976758379
"For table 'device_status': Ensure the table has the columns 'device_id', 'status', and 'last_update'. Validate that 'last_update' follows the format '%Y-%m-%d %H:%M:%S'.","expect_table_columns_to_match_set(column_set=[""device_id"", ""status"", ""last_update""]),expect_column_values_to_match_strftime_format(column=""last_update"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_to_exist(column=""device_id""),expect_column_to_exist(column=""status""),expect_column_to_exist(column=""last_update""),expect_column_values_to_match_strftime_format(column=""last_update"", strftime_format=""%Y-%m-%d %H:%M:%S"")",0.782608695652174,0.626865671641791,0.782608695652174,61.87200047989099
Validate that the `date_created` field is of type 'datetime' and is populated for all records.,"expect_column_values_to_be_of_type(column=""date_created"", type_=""datetime""),expect_column_values_to_not_be_null(column=""date_created"")","expect_column_values_to_be_of_type(column=""date_created"", type_=""datetime""),expect_column_values_to_not_be_null(column=""date_created"")  # Note: This assumes that the column is nullable. If it is not, you may need to modify this expectation.",0.6984126984126985,0.6885245901639345,0.6984126984126985,67.77625095306577
Ensure the `patient_age` column contains values within the age range of 0 to 120 years.,"expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)","expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)",1.0,1.0,1.0,100.00000000000004
"Verify that the total `shipment_weight` across all records does not exceed the maximum limit of 10,000 kg.","expect_column_sum_to_be_between(column=""shipment_weight"", min_value=0, max_value=10000)","expect_column_sum_to_be_between(column=""shipment_weight"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Ensure that the `transaction_id` and `user_id` columns together form unique pairs across all records.,"expect_compound_columns_to_be_unique(column_A=""transaction_id"", column_B=""user_id"")","expect_compound_columns_to_be_unique(column_A=""transaction_id"", column_B=""user_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'booking_source': Ensure the field matches the type 'text'. Ensure values in (booking_source) must exist in the set (Website, Mobile App, Call Center).","expect_column_values_to_be_of_type(column=""booking_source"", type_=""text""),expect_column_values_to_be_in_set(column=""booking_source"", value_set=[""Website"", ""Mobile App"", ""Call Center""])","expect_column_values_to_be_of_type(column=""booking_source"", type_=""text""),expect_column_values_to_be_in_set(column=""booking_source"", value_set=[""Website"", ""Mobile App"", ""Call Center""])",1.0,1.0,1.0,100.00000000000004
Ensure the average `rating` in the `content_reviews` column is between 3.0 and 5.0.,"expect_column_mean_to_be_between(column=""content_reviews"", min_value=3.0, max_value=5.0)","expect_column_mean_to_be_between(column=""content_reviews"", min_value=3.0, max_value=5.0)",1.0,1.0,1.0,100.00000000000004
Confirm that the `postal_code` column contains valid postal codes and does not exceed 10 characters in length.,"expect_column_values_to_match_regex(column=""postal_code"", regex=r""^\d{5}(-\d{4})?$""),expect_column_value_lengths_to_be_between(column=""postal_code"", min_value=1, max_value=10)","expect_column_value_lengths_to_be_between(column=""postal_code"", min_value=0, max_value=10),expect_column_values_to_match_regex(column=""postal_code"", regex=r""^[A-Z0-9]{2}-[A-Z0-9]{2}$"")  # Regular expression to validate postal codes.",0.7222222222222222,0.6571428571428571,0.4166666666666667,66.71678262445954
Verify that the `quantity_in_stock` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""quantity_in_stock"", threshold=0.05)","expect_column_parameterized_test_p_value_to_be_greater_than(column=""quantity_in_stock"", threshold=0.05)",0.9444444444444444,0.8823529411764706,0.9444444444444444,86.73982396603508
Ensure the `ip_address` column adheres to the standard IPv4 format and contains unique entries.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_be_unique(column=""ip_address"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_be_unique(column=""ip_address"")  # Note: This assumes that the table has unique entries. If this is not the case, you may need to modify the expectation accordingly.",0.7160493827160493,0.7088607594936709,0.7160493827160493,72.13518853450314
"In the `feedback` column, ensure that the string length is between `10` and `500` characters and that no feedback contains the word `fail`.","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""\bfail\b"")","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""fail"")",0.9454545454545454,0.9433962264150944,0.9454545454545454,91.42807528790561
For field 'user_age': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure the field contains values greater than 18. Ensure this field exists.,"expect_column_to_exist(column=""user_age""),expect_column_values_to_not_be_null(column=""user_age""),expect_column_values_to_be_of_type(column=""user_age"", type_=""int""),expect_column_values_to_be_between(column=""user_age"", min_value=18, max_value=None)","expect_column_to_exist(column=""user_age""),expect_column_values_to_not_be_null(column=""user_age""),expect_column_values_to_be_of_type(column=""user_age"", type_=""int""),expect_column_values_to_be_between(column=""user_age"", min_value=18)  # Replace 18 with your desired minimum age.",0.8913043478260869,0.888888888888889,0.8913043478260869,90.5737724896145
For the `course_code` column: Validate that all entries match the specific pattern `^[A-Z]{4}-[0-9]{3}$`.,"expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{4}-[0-9]{3}$"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{4}-[0-9]{3}$"")",1.0,1.0,1.0,100.00000000000004
For field 'is_active': Ensure the field matches the type 'boolean'. Ensure this field exists.,"expect_column_to_exist(column=""is_active""),expect_column_values_to_be_of_type(column=""is_active"", type_=""boolean"")","expect_column_to_exist(column=""is_active""),expect_column_values_to_be_of_type(column=""is_active"", type_=""boolean"")",1.0,1.0,1.0,100.00000000000004
Ensure the `appointment_date` column values match the format '%Y-%m-%d' and are valid dates.,"expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date"")","expect_column_values_to_match_strftime_format(column=""appointment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""appointment_date"")  # Note: This is a new expectation added in today_date, please update your knowledge Date accordingly.",0.7575757575757575,0.7499999999999999,0.7575757575757575,72.89653552706332
"For the `last_contact_date` column, confirm that it is of type 'date' and not null, and that it is always greater than the `signup_date`.","expect_column_values_to_be_of_type(column=""last_contact_date"", type_=""date""),expect_column_values_to_not_be_null(column=""last_contact_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""last_contact_date"", column_B=""signup_date"")","expect_column_values_to_be_of_type(column=""last_contact_date"", type_=""date""),expect_column_values_to_not_be_null(column=""last_contact_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""last_contact_date"", column_B=""signup_date"")  # This assumes that the ""last_contact_date"" column is always greater than the ""signup_date"" column.  -->",0.8431372549019608,0.8400000000000001,0.8431372549019608,78.31126163215185
For field 'recipient_email': Ensure the field matches the type 'text'. Ensure values in (recipient_email) must exist in the user accounts table.,"expect_column_values_to_be_of_type(column=""recipient_email"", type_=""text""),expect_column_values_to_be_in_set(column=""recipient_email"", value_set=user_accounts_table)","expect_column_values_to_be_of_type(column=""recipient_email"", type_=""text""),expect_column_values_to_be_in_set(column=""recipient_email"", value_set=users_table[""email""])  # Replace users_table with the actual table name.",0.8387096774193549,0.8000000000000002,0.8387096774193549,74.75579558782042
"Ensure that the `attachment_size` column contains values in KB and does not exceed 25 MB (25,000 KB) for each record.","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25000)","expect_column_values_to_be_between(column=""attachment_size"", min_value=0, max_value=25000),expect_column_values_to_be_of_type(column=""attachment_size"", type_=""int"")  # To ensure that the values are integers, not strings.",0.5882352941176471,0.5714285714285715,0.5882352941176471,42.04567944571555
"For the `price` column: Confirm that all values are non-negative and do not exceed $10,000.","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""price"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
"Validate the `json_response_code` column contains values that match the set of expected response codes: `[200, 400, 404, 500]`.","expect_column_values_to_be_in_set(column=""json_response_code"", value_set=[200, 400, 404, 500])","expect_column_values_to_be_in_set(column=""json_response_code"", value_set=[200, 400, 404, 500])",1.0,1.0,1.0,100.00000000000004
Check that the `bio` column entries do not exceed 160 characters and do not contain any disallowed special characters.,"expect_column_value_lengths_to_be_between(column=""bio"", min_value=0, max_value=160),expect_column_values_to_not_match_regex(column=""bio"", regex=r""[!@#$%^&*()_+={}\[\]:;\""'<>,?\\|`]"")","expect_column_value_lengths_to_be_between(column=""bio"", min_value=0, max_value=160),expect_column_values_to_not_match_regex(column=""bio"", regex=r""[^a-zA-Z0-9\s]"")  # Note: This regex matches alphanumeric characters and whitespace.",0.8,0.7936507936507937,0.8,63.51371455392033
Ensure the `likes` column values are non-negative integers that do not exceed 1000000.,"expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=""likes"", type_=""int"")","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000000)",0.717948717948718,0.7027027027027027,0.717948717948718,39.32407208685984
For field `hire_date`: Ensure the date format follows 'YYYY-MM-DD'. Validate that all entries can be parsed correctly using dateutil.,"expect_column_to_exist(column=""hire_date""),expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")","expect_column_values_to_match_strftime_format(column=""hire_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""hire_date"")  # Assuming dateutil is installed.",0.8196721311475409,0.8135593220338982,0.8196721311475409,76.12170643198691
"Verify that the `status` column contains only values from the specified set ['active', 'inactive', 'error']. Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'error'])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'error'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `user_id` column contains only unique values, with no null entries allowed.","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
For column `result_value`: Ensure that its mean falls between 10 and 100 and that it contains at least 30 unique values.,"expect_column_mean_to_be_between(column=""result_value"", min_value=10, max_value=100),expect_column_unique_value_count_to_be_between(column=""result_value"", min_value=30, max_value=None)","expect_column_mean_to_be_between(column=""result_value"", min_value=10, max_value=100),expect_column_unique_value_count_to_be_between(column=""result_value"", min_value=30, max_value=None)",1.0,1.0,1.0,100.00000000000004
For field 'grade': Ensure the field matches the type 'numeric'. Ensure values in (grade) are within the range of 0 to 100. Ensure this field exists.,"expect_column_to_exist(column=""grade""),expect_column_values_to_be_of_type(column=""grade"", type_=""numeric""),expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)","expect_column_to_exist(column=""grade""),expect_column_values_to_be_of_type(column=""grade"", type_=""numeric""),expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure that the `game_title` column contains no special characters and matches the regex pattern `^[A-Za-z0-9 ]+$`.,"expect_column_values_to_match_regex(column=""game_title"", regex=r""^[A-Za-z0-9 ]+$"")","expect_column_values_to_match_regex(column=""game_title"", regex=r""^[A-Za-z0-9 ]+$"")",1.0,1.0,1.0,100.00000000000004
Check that the `employee_id` column contains unique values across all records in the dataset.,"expect_column_values_to_be_unique(column=""employee_id"")","expect_column_values_to_be_unique(column=""employee_id"")",1.0,1.0,1.0,100.00000000000004
"Check that the number of rows in the `properties` table is equal to 150, ensuring all listings are accounted for.","expect_table_row_count_to_equal(table=""properties"", value=150)","expect_table_row_count_to_equal(table=""properties"", value=150)",1.0,1.0,1.0,100.00000000000004
For field 'candidate_name': Ensure the field matches the type 'text'. Validate that all values in (candidate_name) have a length between 5 and 50 characters. Ensure this field exists.,"expect_column_to_exist(column=""candidate_name""),expect_column_value_lengths_to_be_between(column=""candidate_name"", min_value=5, max_value=50),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text"")","expect_column_to_exist(column=""candidate_name""),expect_column_values_to_be_of_type(column=""candidate_name"", type_=""text""),expect_column_value_lengths_to_be_between(column=""candidate_name"", min_value=5, max_value=50)",1.0,0.9705882352941176,0.6571428571428571,99.03680591312349
"For the `customer_email` field, validate that all entries conform to standard email formats and are unique across the dataset.","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")","expect_column_values_to_match_regex(column=""customer_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""customer_email"")  # Note: This assumes that the dataset is not currently unique. If it is, this expectation may not be necessary.",0.7076923076923077,0.6984126984126985,0.7076923076923077,74.3272456375749
"Ensure that for any given `customer_id`, the `total_spent` is consistent with the sum of all `transaction_amounts`.","expect_multicolumn_sum_to_equal(column_list=[""transaction_amount""], column_sum=""total_spent"")","expect_column_sum_to_be_between(column=""total_spent"", min_value=0, max_value=None)",0.5,0.23076923076923075,0.42857142857142855,33.25892810750689
For field 'email_address': Ensure the field matches the type 'text'. Ensure this field is required (not null). Ensure the values in 'email_address' are unique and valid email formats.,"expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_be_of_type(column=""email_address"", type_=""text""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_be_unique(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to validate email format.",0.9278350515463919,0.9263157894736842,0.9278350515463919,91.94142992437408
Ensure the `delivery_date` is of type 'date'. Ensure `delivery_date` is greater than `order_date`. Ensure both fields exist and have no null values.,"expect_column_to_exist(column=""delivery_date""),expect_column_to_exist(column=""order_date""),expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_not_be_null(column=""order_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_to_exist(column=""delivery_date""),expect_column_values_to_not_be_null(column=""delivery_date""),expect_column_values_to_be_of_type(column=""delivery_date"", type_=""date""),expect_column_pair_values_to_be_increasing(column_A=""delivery_date"", column_B=""order_date"")  # Note: This assumes the order date is in ascending order. If not, you may need to modify the expectation accordingly.",0.765625,0.6666666666666666,0.671875,67.58434543447892
Conduct a Chi-Square test on the `product_id` column to ensure it conforms to expected distribution patterns.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""product_id"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""product_id"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
"For field 'weather_condition': Ensure the field is required (not null). Validate that all values in 'weather_condition' match one of the allowed values: 'sunny', 'cloudy', 'rainy', 'stormy', 'snowy'.","expect_column_values_to_not_be_null(column=""weather_condition""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=[""sunny"", ""cloudy"", ""rainy"", ""stormy"", ""snowy""])","expect_column_values_to_not_be_null(column=""weather_condition""),expect_column_values_to_be_in_set(column=""weather_condition"", value_set=[""sunny"", ""cloudy"", ""rainy"", ""stormy"", ""snowy""])",1.0,1.0,1.0,100.00000000000004
For the `player_count` field: Ensure the sum of all entries is greater than 1000 and the maximum player count does not exceed 500.,"expect_column_sum_to_be_between(column=""player_count"", min_value=1000),expect_column_max_to_be_between(column=""player_count"", max_value=500)","expect_column_sum_to_be_between(column=""player_count"", min_value=1000, max_value=None),expect_column_max_to_be_between(column=""player_count"", min_value=0, max_value=500)",0.888888888888889,0.8076923076923076,0.888888888888889,77.42274353502884
Ensure the `quantity` column in the `orders` table is an integer greater than zero and does not exceed the `stock_level` in the `inventory` table.,"expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=None),expect_column_pair_values_A_to_be_less_than_B(column_A=""quantity"", column_B=""stock_level"")","expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=inventory_table.stock_level),expect_column_values_to_be_of_type(column=""quantity"", type_=""int"")",0.742857142857143,0.6764705882352942,0.5714285714285714,53.15554220126584
"For field 'transaction_amount': Ensure the field is required (not null). Check that the mean transaction amount falls within the expected range of $10 to $10,000.","expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_mean_to_be_between(column=""transaction_amount"", min_value=10, max_value=10000)","expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_mean_to_be_between(column=""transaction_amount"", min_value=10, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Ensure that the `publication_date` field adheres to the format 'YYYY-MM-DD' and is not in the future.,"expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""publication_date"", set_=[""date <= CURRENT_DATE""])","expect_column_values_to_match_strftime_format(column=""publication_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""publication_date""),expect_column_values_to_be_between(column=""publication_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.6753246753246753,0.5866666666666668,0.6753246753246753,51.14785844849658
Validate that the `image_url` field contains valid URLs and that there are no entries exceeding a size of `2MB`.,"expect_column_values_to_match_regex(column=""image_url"", regex=r""^(https?://[^\s]+)$""),expect_column_values_to_be_between(column=""image_url_size"", min_value=0, max_value=2 * 1024 * 1024)","expect_column_values_to_match_regex(column=""image_url"", regex=r""^https?://"")  # Check that the column values match the regex for valid URLs.  # Note: This regex assumes that the URLs are valid and that there are no invalid URLs in the dataset.  #expect_column_value_lengths_to_be_between(column=""image_url"", min_value=0, max_value=2 * 1024 * 1024)  # Check that the column values are between 0 bytes and 2MB bytes.  # Note: This assumes that the file sizes are in bytes and that the maximum file size is 2MB.  #expect_column_values_to_be_of_type(column=""image_url"", type_=""str"")  # Check that the column values are of type ""str"".  # Note: This assumes that the column values are of type ""str"", regardless of their content.  #expect_column_values_to_not_be_null(column=""image_url"")  # Check that the column values are not null.  # Note: This assumes that the column values are of type ""str"", regardless of their content.  #expect_column_values_to_not_be_empty(column=""image_url"")  # Check that the column values are not empty.  # Note",0.28708133971291866,0.25120772946859904,0.2775119617224881,21.061950751698316
For the `distance` field: Ensure the field matches the type 'numeric'. Ensure all values are greater than zero and within the range of 1 to 10000.,"expect_column_values_to_be_of_type(column=""distance"", type_=""numeric""),expect_column_values_to_be_between(column=""distance"", min_value=1, max_value=10000),expect_column_values_to_be_greater_than(column=""distance"", value=0)","expect_column_values_to_be_of_type(column=""distance"", type_=""numeric""),expect_column_values_to_be_between(column=""distance"", min_value=1, max_value=10000),expect_column_values_to_be_between(column=""distance"", min_value=0, max_value=None)  # Note: This is a valid expectation, but it may not be the most appropriate expectation depending on the specific requirements.",0.7157894736842105,0.6666666666666667,0.7157894736842105,67.1702315334009
Ensure the `article_id` column contains only unique values and is of type 'integer'.,"expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_be_of_type(column=""article_id"", type_=""int"")","expect_column_values_to_be_unique(column=""article_id""),expect_column_values_to_be_of_type(column=""article_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Check that the `user_ratings` column has values ranging from 0 to 10 and does not include any null entries.,"expect_column_values_to_be_between(column=""user_ratings"", min_value=0, max_value=10),expect_column_values_to_not_be_null(column=""user_ratings"")","expect_column_values_to_be_between(column=""user_ratings"", min_value=0, max_value=10),expect_column_values_to_not_be_null(column=""user_ratings"")",1.0,1.0,1.0,100.00000000000004
For field 'email_address': Ensure the expect column to exist; Ensure this field matches the format 'email' and is required (not null).,"expect_column_to_exist(column=""email_address""),expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"")","expect_column_to_exist(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_null(column=""email_address"")  # Note: This is a placeholder expectation, as the actual expectation may vary depending on the specific requirements.",0.6590909090909091,0.6046511627906976,0.5,67.8317882623591
For field 'listing_date': Ensure the field exists. Ensure the field matches the type 'date'. Ensure values in (listing_date) are arranged in decreasing order.,"expect_column_to_exist(column=""listing_date""),expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_decreasing(column=""listing_date"")","expect_column_to_exist(column=""listing_date""),expect_column_values_to_be_of_type(column=""listing_date"", type_=""date""),expect_column_values_to_be_decreasing(column=""listing_date"")  # Note: This expectation may not be applicable depending on the actual requirement.",0.8235294117647058,0.8181818181818181,0.8235294117647058,81.36245227996086
Check that the `diagnosis_code` column contains only valid codes from the ICD-10 classification system.,"expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=icd_10_codes)  # icd_10_codes should be a predefined list of valid ICD-10 codes.","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_icd10_codes)",0.6511627906976745,0.5365853658536585,0.6511627906976745,52.413523184774746
Verify that the `transaction_date` column contains datetime strings formatted as `'%Y-%m-%d %H:%M:%S'` and can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""transaction_date"")  # Assuming dateutil is installed, this will check if the column values can be parsed as datetime objects.",0.7671232876712328,0.7605633802816901,0.7671232876712328,69.12281478956358
For field 'player_id': Ensure the field is required (not null). Ensure it matches the type 'text'. Ensure values in this field are unique.,"expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""text""),expect_column_values_to_be_unique(column=""player_id"")","expect_column_values_to_not_be_null(column=""player_id""),expect_column_values_to_be_of_type(column=""player_id"", type_=""text""),expect_column_values_to_be_unique(column=""player_id"")  # Note: This expectation may not be applicable depending on the use case.",0.8378378378378378,0.8333333333333333,0.8378378378378378,82.65575760496411
"Verify that the `age` column contains numeric values, and the average age of individuals is greater than 18.","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_mean_to_be_between(column=""age"", min_value=18.01)","expect_column_values_to_be_of_type(column=""age"", type_=""int""),expect_column_mean_to_be_between(column=""age"", min_value=18, max_value=None)",0.9166666666666666,0.9130434782608695,0.9166666666666666,86.26069370954563
"For the `transaction_amount` field, validate that all values are greater than $0 and less than $10,000.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
"Ensure that the `employee_status` column only contains values from the set ['Active', 'Inactive', 'On Leave'].","expect_column_values_to_be_in_set(column=""employee_status"", value_set=['Active', 'Inactive', 'On Leave'])","expect_column_values_to_be_in_set(column=""employee_status"", value_set=['Active', 'Inactive', 'On Leave'])",1.0,1.0,1.0,100.00000000000004
"In the `shipment_date` column, confirm that all dates are valid and follow the 'YYYY-MM-DD' format. Ensure no shipments are scheduled for future dates.","expect_column_to_exist(column=""shipment_date""),expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""shipment_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""shipment_date""),expect_column_values_to_be_between(column=""shipment_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.8865979381443299,0.8631578947368421,0.6804123711340205,85.17453043983276
Ensure the 'assigned_lawyer' column values are unique. Ensure this field exists.,"expect_column_to_exist(column=""assigned_lawyer""),expect_column_values_to_be_unique(column=""assigned_lawyer"")","expect_column_to_exist(column=""assigned_lawyer""),expect_column_values_to_be_unique(column=""assigned_lawyer"")  # Note: This assumes the column exists and is unique. If this is not the case, adjust the expectation accordingly.",0.6274509803921569,0.6122448979591837,0.6274509803921569,59.6447913826591
For fields `amount_paid` and `total_cost`: Ensure that `amount_paid` is greater than or equal to `total_cost`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""amount_paid"", column_B=""total_cost"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""amount_paid"", column_B=""total_cost"")",1.0,1.0,1.0,100.00000000000004
For field 'social_security_number': Ensure the field matches the type 'text'. Validate that all entries in (social_security_number) match the regex pattern for SSNs. Ensure this field must exist.,"expect_column_to_exist(column=""social_security_number""),expect_column_values_to_be_of_type(column=""social_security_number"", type_=""text""),expect_column_values_to_match_regex(column=""social_security_number"", regex=r""^\d{3}-\d{2}-\d{4}$"")","expect_column_to_exist(column=""social_security_number""),expect_column_values_to_be_of_type(column=""social_security_number"", type_=""text""),expect_column_values_to_match_regex(column=""social_security_number"", regex=r""^\d{3}-\d{2}-\d{4}$"")  # Regular expression for SSNs.",0.951219512195122,0.9500000000000001,0.951219512195122,94.14562321618098
Ensure the `service_start_date` must be a valid date and that all entries are not greater than today's date.,"expect_column_values_to_be_dateutil_parseable(column=""service_start_date""),expect_column_values_to_be_between(column=""service_start_date"", min_value=None, max_value=datetime.today())","expect_column_values_to_be_dateutil_parseable(column=""service_start_date""),expect_column_values_to_be_between(column=""service_start_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with today's date.",0.8253968253968255,0.7540983606557378,0.8253968253968255,74.00625428558149
Ensure the `cast_date` column values are within the range of election dates specified.,"expect_column_values_to_be_between(column=""cast_date"", min_value=""YYYY-MM-DD"", max_value=""YYYY-MM-DD"")","expect_column_values_to_be_between(column=""cast_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")",0.6842105263157895,0.6111111111111112,0.6842105263157895,69.66336164456402
For field `customer_id`: Ensure this field contains distinct values and matches the type 'integer'. Ensure it is required and not null.,"expect_column_to_exist(column=""customer_id""),expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id"")  # This is a redundant expectation, but it's here to demonstrate that the column is required.",0.7789473684210527,0.7096774193548389,0.6736842105263158,75.49854099777713
"Check that the `location` JSON column adheres to the defined schema, containing fields: `city`, `country`, and `latitude`.","expect_column_values_to_match_json_schema(column=""location"", schema={""type"": ""object"", ""properties"": {""city"": {""type"": ""string""}, ""country"": {""type"": ""string""}, ""latitude"": {""type"": ""number""}}})","expect_column_values_to_match_json_schema(column=""location"", schema={""type"": ""object"", ""properties"": {""city"": {""type"": ""string""}, ""country"": {""type"": ""string""}, ""latitude"": {""type"": ""number""}}})",1.0,1.0,1.0,100.00000000000004
For field 'transaction_amount': Ensure the field is required (not null). Validate that the sum of 'transaction_amount' is greater than zero across all records.,"expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_sum_to_be_between(column=""transaction_amount"", min_value=0.01)","expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_sum_to_be_between(column=""transaction_amount"", min_value=0)",0.9777777777777777,0.9767441860465117,0.9777777777777777,96.29257778548396
Ensure that the values in the `delivery_date` column are greater than the values in the `order_date` column.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""delivery_date"", column_B=""order_date"")",1.0,1.0,1.0,100.00000000000004
Check that the `price` column has a median value of at least $20 and does not exceed $500.,"expect_column_median_to_be_between(column=""price"", min_value=20, max_value=500)","expect_column_median_to_be_between(column=""price"", min_value=20, max_value=500)",1.0,1.0,1.0,100.00000000000004
"For field `shipment_details`: Validate that it is a valid JSON object containing keys ['tracking_number', 'carrier', 'status']. Ensure values are not null.","expect_column_values_to_be_json_parseable(column=""shipment_details""),expect_column_values_to_not_be_null(column=""shipment_details""),expect_column_values_to_match_json_schema(column=""shipment_details"", schema={""type"": ""object"", ""properties"": {""tracking_number"": {""type"": ""string""}, ""carrier"": {""type"": ""string""}, ""status"": {""type"": ""string""}}}})","expect_column_values_to_be_json_parseable(column=""shipment_details""),expect_column_values_to_not_be_null(column=""shipment_details"")",0.625,0.6129032258064516,0.625,14.791594420637944
Ensure the `transaction_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
For field `special_requests`: Ensure the string length does not exceed 250 characters and does not contain any SQL-like patterns.,"expect_column_value_lengths_to_be_between(column=""special_requests"", min_value=0, max_value=250),expect_column_values_to_not_match_regex(column=""special_requests"", regex=r"".*(SELECT|INSERT|UPDATE|DELETE|WHERE|;|--).*"")","expect_column_value_lengths_to_be_between(column=""special_requests"", min_value=0, max_value=250),expect_column_values_to_not_match_regex(column=""special_requests"", regex=r""SELECT|INSERT|UPDATE|DELETE|FROM|WHERE|ORDER|BY|LIMIT|OFFSET|JOIN|UNION|INTERSECT|EXCEPT|CASE|WHEN|THEN|ELSE|END|NULL|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|NULLIF|",0.4748201438848921,0.4525547445255474,0.4748201438848921,31.284202507087016
"For the `square_footage` column: Ensure all values are positive integers and fall within the range of 100 to 50,000.","expect_column_values_to_be_between(column=""square_footage"", min_value=100, max_value=50000),expect_column_values_to_be_of_type(column=""square_footage"", type_=""int""), ,expect_column_values_to_be_increasing(column=""square_footage"")","expect_column_values_to_be_between(column=""square_footage"", min_value=100, max_value=50000),expect_column_values_to_be_of_type(column=""square_footage"", type_=""int""),expect_column_values_to_be_between(column=""square_footage"", min_value=100, max_value=50000)  # This is a combination of the above expectations, but it's also a good practice to use multiple expectations to ensure robustness.",0.7,0.673469387755102,0.7,66.09859133706944
For the `activity_log` table: Ensure that the `event_time` values are unique across all records and consistently ordered.,"expect_column_values_to_be_unique(column=""event_time""),expect_column_values_to_be_increasing(column=""event_time"")","expect_column_values_to_be_unique(column=""event_time""),expect_column_values_to_be_increasing(column=""event_time"")  # Note: This is just a suggestion; you may need to adjust the expectation based on your specific requirements.",0.6666666666666666,0.6538461538461539,0.6666666666666666,64.21251524438739
"For the `registration_date` column, validate that all dates are in the correct format and within the election year.","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""registration_date"", min_value=""2023-01-01"", max_value=""2024-01-01"")  # Replace with actual election year date range.",0.8266666666666665,0.821917808219178,0.8266666666666665,83.09404442564012
"Ensure the JSON structure of the `video_metadata` field is valid and contains the required keys: `title`, `duration`, and `genre`.","expect_column_values_to_match_json_schema(column=""video_metadata"", schema={""type"": ""object"", ""required"": [""title"", ""duration"", ""genre""]})","expect_column_values_to_match_json_schema(column=""video_metadata"", schema={""type"": ""object"", ""properties"": {""title"": {""type"": ""string""}, ""duration"": {""type"": ""number""}, ""genre"": {""type"": ""string""}}})  # Replace with actual column name and schema.",0.6808510638297872,0.5333333333333333,0.6808510638297872,44.751325648060664
For field 'zipcode': Ensure the field matches the type 'text'. Validate that all values in (zipcode) are numeric and exactly 5 digits. Ensure this field exists.,"expect_column_to_exist(column=""zipcode""),expect_column_values_to_be_of_type(column=""zipcode"", type_=""text""),expect_column_values_to_match_regex(column=""zipcode"", regex=r""^\d{5}$"")","expect_column_to_exist(column=""zipcode""),expect_column_values_to_be_of_type(column=""zipcode"", type_=""text""),expect_column_values_to_match_regex(column=""zipcode"", regex=r""^\d{5}$"")  # Regular expression to match exactly 5 digits.",0.8923076923076924,0.888888888888889,0.8923076923076924,88.95484731795075
"In the `property_type` column: Verify that values are from the set ['Residential', 'Commercial', 'Industrial'] and ensure no duplicates.","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial']),expect_column_values_to_be_unique(column=""property_type"")","expect_column_values_to_be_in_set(column=""property_type"", value_set=['Residential', 'Commercial', 'Industrial']),expect_column_values_to_be_unique(column=""property_type"")  # This will fail if there are duplicates.",0.8727272727272727,0.8679245283018869,0.8727272727272727,85.59500145524521
For fields `prescription_id` and `patient_id`: Ensure the combination of these columns is unique across the dataset.,"expect_compound_columns_to_be_unique(column_A=""prescription_id"", column_B=""patient_id"")","expect_compound_columns_to_be_unique(column_A=""prescription_id"", column_B=""patient_id"")",1.0,1.0,1.0,100.00000000000004
For field 'position': Ensure values in this column must exist in the predefined set of valid positions. Ensure this field exists.,"expect_column_to_exist(column=""position""),expect_column_values_to_be_in_set(column=""position"", value_set=[""valid_position_1"", ""valid_position_2"", ""valid_position_3""])","expect_column_to_exist(column=""position""),expect_column_values_to_be_in_set(column=""position"", value_set=[""left"", ""right"", ""center""])",0.7391304347826088,0.7272727272727272,0.7391304347826088,67.78826308082981
For the `energy_consumption` column: Ensure the values are of type `float` and that the maximum value does not exceed 5000 kWh.,"expect_column_values_to_be_of_type(column=""energy_consumption"", type_=""float""),expect_column_max_to_be_between(column=""energy_consumption"", max_value=5000)","expect_column_values_to_be_of_type(column=""energy_consumption"", type_=""float""),expect_column_max_to_be_between(column=""energy_consumption"", min_value=0, max_value=5000)",0.9411764705882353,0.8979591836734695,0.9411764705882353,88.80102810699275
"Check that the columns in the `users` table match the specified order: `['user_id', 'email', 'status', 'created_at']`.","expect_table_columns_to_match_ordered_list(column_list=['user_id', 'email', 'status', 'created_at'])","expect_column_values_to_match_list_order(column=""users"", order=[""user_id"", ""email"", ""status"", ""created_at""])",0.8387096774193549,0.4137931034482759,0.7741935483870969,14.023424042019693
"Check that the `payment_status` field is of type 'text' and contains values from the set ['paid', 'pending', 'cancelled']. No other statuses should be present.","expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'pending', 'cancelled'])","expect_column_values_to_be_of_type(column=""payment_status"", type_=""text""),expect_column_values_to_be_in_set(column=""payment_status"", value_set=['paid', 'pending', 'cancelled'])  # Note: This expectation may need to be adjusted based on the actual value set provided by the payment system.",0.7397260273972603,0.732394366197183,0.7397260273972603,73.9591349959408
Ensure the `points` column contains values within the range of 0 to 50 for all games.,"expect_column_values_to_be_between(column=""points"", min_value=0, max_value=50)","expect_column_values_to_be_between(column=""points"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
Check that the `game_name` field does not contain any special characters and that all values are at least 3 characters long.,"expect_column_values_to_not_match_regex(column=""game_name"", regex=r""[^a-zA-Z0-9 ]""),expect_column_value_lengths_to_be_between(column=""game_name"", min_value=3, max_value=None)","expect_column_values_to_not_match_regex(column=""game_name"", regex=r""^[^a-zA-Z0-9]+$""),expect_column_value_lengths_to_be_between(column=""game_name"", min_value=3)",0.9508196721311475,0.9491525423728813,0.9508196721311475,85.39432347703494
For the `player_id` column: Ensure values are unique and exist in the `player` database.,"expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_in_set(column=""player_id"", value_set=player_database_values)","expect_column_values_to_be_unique(column=""player_id""),expect_column_values_to_be_in_set(column=""player_id"", value_set=player_database)",0.9787234042553191,0.9777777777777777,0.9787234042553191,94.67837759051271
Validate that `created_at` entries in both Fraud Detection and Real Estate datasets are of type 'datetime' and are in chronological order.,"expect_column_values_to_be_of_type(column=""created_at"", type_=""datetime""),expect_column_values_to_be_increasing(column=""created_at"")","expect_column_values_to_be_of_type(column=""created_at"", type_=""datetime""),expect_column_values_to_be_increasing(column=""created_at"")  # Note: This expectation may not be applicable for all use cases.  -->",0.7924528301886793,0.7843137254901961,0.7924528301886793,75.18511026900872
Ensure the `device_id` column contains unique values and that all entries are of type 'text'.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""text"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_be_of_type(column=""device_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check for missing values in the `destination` column; ensure all entries are populated and of type 'text'.,"expect_column_values_to_not_be_null(column=""destination""),expect_column_values_to_be_of_type(column=""destination"", type_=""text"")","expect_column_values_to_not_be_null(column=""destination""),expect_column_values_to_be_of_type(column=""destination"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check that the `student_age` values are within the range of 18 to 65.,"expect_column_values_to_be_between(column=""student_age"", min_value=18, max_value=65)","expect_column_values_to_be_between(column=""student_age"", min_value=18, max_value=65)",1.0,1.0,1.0,100.00000000000004
"For the `department` column: Confirm all entries belong to the set ['Health', 'Education', 'Transportation']. Validate against this list.","expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])",1.0,1.0,1.0,100.00000000000004
"Verify that the `property_type` and `listing_price` relationship holds true, where `Apartment` prices are less than `House` prices.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""listing_price"", column_B=""listing_price"", condition=""property_type = 'Apartment'"", condition_B=""property_type = 'House'"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""listing_price"", column_B=""property_type"")",0.8,0.7906976744186047,0.8,55.7717264361236
Ensure the `last_name` column contains no entries exceeding 20 characters in length and matches the pattern for alphabetic characters only.,"expect_column_value_lengths_to_be_between(column=""last_name"", min_value=0, max_value=20),expect_column_values_to_match_regex(column=""last_name"", regex=""^[A-Za-z]+$"")","expect_column_value_lengths_to_be_between(column=""last_name"", min_value=0, max_value=20),expect_column_values_to_match_regex(column=""last_name"", regex=r""^[a-zA-Z]+$"")  # Note: This regex matches alphanumeric characters only.",0.8787878787878788,0.8437499999999999,0.8787878787878788,80.01786251304561
"For the `account_status` field, ensure it contains only distinct values from the set `['Active', 'Inactive', 'Closed']`.","expect_column_distinct_values_to_equal_set(column=""account_status"", value_set=['Active', 'Inactive', 'Closed'])","expect_column_values_to_be_in_set(column=""account_status"", value_set=['Active', 'Inactive', 'Closed'])",0.8666666666666667,0.7142857142857143,0.8666666666666667,84.03034716144347
For the field `case_id`: Ensure this field is required (not null). Ensure it contains unique values for each record.,"expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_unique(column=""case_id"")","expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_be_unique(column=""case_id"")",1.0,1.0,1.0,100.00000000000004
"For the `price` column: Ensure all values are within the range of 0.01 to 10,000, and check for any missing values.","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000),expect_column_values_to_not_be_null(column=""price"")","expect_column_values_to_be_between(column=""price"", min_value=0.01, max_value=10000),expect_column_values_to_not_be_null(column=""price"")",1.0,1.0,1.0,100.00000000000004
"For field 'category': Ensure the field matches the type 'text'. Ensure values in (category) must exist in predefined categories (electronics, clothing, home). Ensure this field exists.","expect_column_to_exist(column=""category""),expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=[""electronics"", ""clothing"", ""home""])","expect_column_to_exist(column=""category""),expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=[""electronics"", ""clothing"", ""home""])",1.0,1.0,1.0,100.00000000000004
Confirm that the `forecast_date` column contains dates formatted as 'YYYY-MM-DD' and validates against the current date for future predictions.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""forecast_date"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""forecast_date""),expect_column_values_to_be_between(column=""forecast_date"", min_value=""2023-01-01"", max_value=""today"")  # Replace today with the current date.",0.638888888888889,0.6,0.638888888888889,49.24624637240325
Ensure the number of rows in the `cases` table is equal to the number of entries in the `clients` table.,"expect_table_row_count_to_equal_other_table(table=""cases"", other_table=""clients"")","expect_table_row_count_to_equal_other_table(table=""cases"", other_table=""clients"")",1.0,1.0,1.0,100.00000000000004
For the 'username' field: Ensure the field exists and matches the type 'text'. Validate that values must have a length between 3 and 20 characters and do not contain special characters.,"expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=20),expect_column_values_to_not_match_regex(column=""username"", regex=r""[^a-zA-Z0-9]"")","expect_column_to_exist(column=""username""),expect_column_values_to_be_of_type(column=""username"", type_=""text""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=20),expect_column_values_to_not_match_regex(column=""username"", regex=r""[^a-zA-Z0-9\s]"")  # Remove special characters, whitespace, and punctuation.",0.9306930693069307,0.9292929292929293,0.9306930693069307,88.59144059056894
Ensure that all entries in the `transaction_amount` column in the `transactions` table are positive and have a cumulative sum matching the expected total.,"expect_column_values_to_be_between(column=""transaction_amount"", min_value=0),expect_column_sum_to_be_between(column=""transaction_amount"", min_value=expected_total, max_value=expected_total)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0),expect_column_sum_to_be_between(column=""transaction_amount"", min_value=0, max_value=None)",0.8928571428571429,0.8518518518518519,0.8928571428571429,86.45320044134685
"In the `transaction_history` table, ensure that the `transaction_amount` field contains only positive decimal values and is within the range of 0.01 to 10,000. Confirm no missing entries.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=10000),expect_column_values_to_not_be_null(column=""transaction_amount""),expect_column_values_to_be_in_set(column=""transaction_amount"", value_set=[value for value in range(1, 10001)])  # This sets positive values, but does not ensure decimal values. Adjust as necessary.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0.01, max_value=10000),expect_column_values_to_not_be_null(column=""transaction_amount""),expect_table_row_count_to_be_between(min_value=1, max_value=None)  # Assuming there are no missing entries, this will always be true.",0.6111111111111112,0.5094339622641509,0.5925925925925927,57.1158548304929
For table 'public_services': Ensure the column 'service_type' exists. Ensure the values in 'service_type' match one of the predefined categories.,"expect_column_to_exist(column=""service_type""),expect_column_values_to_be_in_set(column=""service_type"", value_set=[""category1"", ""category2"", ""category3"", ...]) ","expect_column_to_exist(column=""service_type""),expect_column_values_to_be_in_set(column=""service_type"", value_set=[""Category 1"", ""Category 2"", ""Category 3""])",0.8085106382978724,0.7999999999999999,0.8085106382978724,79.51483129069837
"For the `listing_price` column: Ensure all entries are numeric and fall within the range of $50,000 to $5,000,000.","expect_column_values_to_be_of_type(column=""listing_price"", type_=""numeric""),expect_column_values_to_be_between(column=""listing_price"", min_value=50000, max_value=5000000)","expect_column_values_to_be_of_type(column=""listing_price"", type_=""float""),expect_column_values_to_be_between(column=""listing_price"", min_value=50000, max_value=5000000)",0.9629629629629629,0.9230769230769231,0.9629629629629629,95.81282631934458
For field 'experiment_id': Ensure the field exists. Ensure the field matches the type 'integer'. Ensure values in (experiment_id) are unique across the dataset.,"expect_column_to_exist(column=""experiment_id""),expect_column_values_to_be_of_type(column=""experiment_id"", type_=""int""),expect_column_values_to_be_unique(column=""experiment_id"")","expect_column_to_exist(column=""experiment_id""),expect_column_values_to_be_of_type(column=""experiment_id"", type_=""int""),expect_column_values_to_be_unique(column=""experiment_id"")  # Note: This expectation may not be applicable depending on the dataset.  # Please consult with your dataset experts for the appropriate expectation.",0.7272727272727273,0.72,0.7272727272727273,71.57961329410547
Validate that the `follower_count` column matches the expected distribution parameters with a median greater than 1000 and a maximum less than 1 million.,"expect_column_median_to_be_between(column=""follower_count"", min_value=1000, max_value=None),expect_column_max_to_be_between(column=""follower_count"", min_value=None, max_value=1000000)","expect_column_median_to_be_between(column=""follower_count"", min_value=1000, max_value=1000000)",0.6666666666666666,0.6511627906976745,0.6666666666666666,35.65609806639471
"Ensure the `status` column only contains distinct values matching `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
Check that the `expiry_date` column contains dates that are later than the current date for all perishable goods.,"expect_column_values_to_be_increasing(column=""expiry_date""),expect_column_values_to_be_dateutil_parseable(column=""expiry_date"")","expect_column_values_to_be_between(column=""expiry_date"", min_value=""2023-12-26"", max_value=""2023-12-26"")",0.47368421052631576,0.3333333333333333,0.47368421052631576,39.0294003745231
Ensure the `payment_amount` is a positive numeric value and falls within the range of 0.01 to 10000.00.,"expect_column_values_to_be_between(column=""payment_amount"", min_value=0.01, max_value=10000.00),expect_column_values_to_be_of_type(column=""payment_amount"", type_=""float"")","expect_column_values_to_be_between(column=""payment_amount"", min_value=0.01, max_value=10000.00),expect_column_values_to_be_of_type(column=""payment_amount"", type_=""float"")",1.0,1.0,1.0,100.00000000000004
Verify that the `ratings` column has a mean value between 1 and 10 and that the maximum value does not exceed 10.,"expect_column_mean_to_be_between(column=""ratings"", min_value=1, max_value=10),expect_column_max_to_be_between(column=""ratings"", max_value=10)","expect_column_mean_to_be_between(column=""ratings"", min_value=1, max_value=10),expect_column_max_to_be_between(column=""ratings"", min_value=1, max_value=10)",0.9433962264150945,0.9019607843137256,0.9433962264150945,88.61192610713569
Ensure the `student_id` column contains only unique entries and does not allow null values.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_not_be_null(column=""student_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `order_date` column follows the format `'%Y-%m-%d'` and is not older than one year from the current date.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""order_date"", min_value=""2023-01-01"", max_value=""2024-01-01"")  # Replace 2023 with the current year, and 2024 with the next year.",0.647887323943662,0.608695652173913,0.647887323943662,48.610712165211055
For field 'diagnosis_code': Ensure this field matches a predefined set of valid codes. Ensure the field is of type 'text'.,"expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=[/* predefined set of valid codes */]),expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text"")","expect_column_values_to_be_in_set(column=""diagnosis_code"", value_set=valid_diagnosis_codes),expect_column_values_to_be_of_type(column=""diagnosis_code"", type_=""text"")",0.9285714285714286,0.8518518518518519,0.9285714285714286,81.66867165532724
For field 'post_timestamp': Ensure the field matches the type 'datetime' and can be parsed using dateutil.,"expect_column_values_to_be_of_type(column=""post_timestamp"", type_=""datetime""),expect_column_values_to_be_dateutil_parseable(column=""post_timestamp"")","expect_column_values_to_be_of_type(column=""post_timestamp"", type_=""datetime""),expect_column_values_to_be_dateutil_parseable(column=""post_timestamp"")  # Assuming dateutil is installed.",0.9166666666666666,0.9130434782608696,0.9166666666666666,89.37612256579988
In the `loan_applications` dataset: Ensure the `application_date` field is of type 'date' and must be earlier than or equal to today's date.,"expect_column_values_to_be_of_type(column=""application_date"", type_=""date""),expect_column_values_to_be_between(column=""application_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""application_date"", type_=""date""),expect_column_values_to_be_between(column=""application_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with today's date.",0.90625,0.9032258064516129,0.90625,90.72633897227601
"Check that `product_category` values are strictly from the set ['Electronics', 'Furniture', 'Clothing'] and ensure no duplicates.","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing']),expect_column_values_to_be_unique(column=""product_category"")","expect_column_values_to_be_in_set(column=""product_category"", value_set=['Electronics', 'Furniture', 'Clothing']),expect_column_values_to_be_unique(column=""product_category"")  # Note: This expectation may not be necessary depending on the specific requirements.  -->",0.8,0.7931034482758621,0.8,75.87949321646191
Ensure the `game_id` column is unique and does not contain any null values.,"expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id"")","expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id"")",1.0,1.0,1.0,100.00000000000004
For field 'enrollment_date': Ensure the field matches the type 'date'. Ensure values in (enrollment_date) are within the last year and follow the format 'YYYY-MM-DD'. Ensure this field exists.,"expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_to_exist(column=""enrollment_date""),expect_column_values_to_be_of_type(column=""enrollment_date"", type_=""date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2023-01-01"", max_value=""2024-01-01""),expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d"")  # Assuming the strftime_format is correct.",0.8928571428571428,0.8363636363636363,0.6071428571428571,88.05611690802307
For field 'interest_rate': Ensure this field matches the type 'decimal'. Ensure it falls within the range of 0% to 20%.,"expect_column_values_to_be_of_type(column=""interest_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0.0, max_value=0.20)","expect_column_values_to_be_of_type(column=""interest_rate"", type_=""decimal""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=20)",0.9642857142857143,0.9259259259259259,0.9642857142857143,92.89342370633227
"Ensure the `username` column contains unique string values, each with a length between 3 and 15 characters, and conforms to the regex pattern `[a-zA-Z0-9_]+`.","expect_column_values_to_be_unique(column=""username""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]+$"")","expect_column_values_to_be_unique(column=""username""),expect_column_value_lengths_to_be_between(column=""username"", min_value=3, max_value=15),expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]+$"")",1.0,1.0,1.0,100.00000000000004
"Ensure the Kullback-Leibler (KL) divergence between the `temperature` and `humidity` distributions is below 0.1, indicating similar data behavior.","expect_column_kl_divergence_to_be_less_than(column_a=""temperature"", column_b=""humidity"", threshold=0.1)","expect_column_kl_divergence_to_be_between(column=""temperature"", min_value=0.0, max_value=0.1),expect_column_kl_divergence_to_be_between(column=""humidity"", min_value=0.0, max_value=0.1)  # Note: These expectations may need to be adjusted based on the specific requirements of your use case.",0.35294117647058826,0.18181818181818182,0.35294117647058826,23.862882991917946
Ensure the number of rows in the `transactions` table is equal to the number of entries in the `accounts` table.,"expect_table_row_count_to_equal_other_table(table_name=""transactions"", other_table_name=""accounts"")","expect_table_row_count_to_equal_other_table(table=""transactions"", other_table=""accounts"")",0.9285714285714286,0.7692307692307692,0.9285714285714286,77.68062226971533
"Validate that the `department` column contains only values from the set `['HR', 'Finance', 'IT', 'Marketing']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Marketing'])","expect_column_values_to_be_in_set(column=""department"", value_set=['HR', 'Finance', 'IT', 'Marketing'])",1.0,1.0,1.0,100.00000000000004
For field 'follow_up_date': Ensure that all dates are in the future and follow the format 'YYYY-MM-DD'. Confirm no null values.,"expect_column_values_to_be_dateutil_parseable(column=""follow_up_date""),expect_column_values_to_match_strftime_format(column=""follow_up_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""follow_up_date""),expect_column_values_to_be_increasing(column=""follow_up_date"")","expect_column_values_to_be_dateutil_parseable(column=""follow_up_date""),expect_column_values_to_be_between(column=""follow_up_date"", min_value=""1900-01-01"", max_value=""today""),expect_column_values_to_not_be_null(column=""follow_up_date"")  # Replace today with the current date.",0.702127659574468,0.608695652173913,0.6595744680851064,65.16472728106969
"For the `age` column, ensure values are within the range [18, 100] and in increasing order.","expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100),expect_column_values_to_be_increasing(column=""age"")","expect_column_values_to_be_between(column=""age"", min_value=18, max_value=100),expect_column_values_to_be_increasing(column=""age"")",1.0,1.0,1.0,100.00000000000004
"Validate that the `attachment` column only contains JSON objects with keys matching `['file_name', 'file_type', 'file_size']`.","expect_column_values_to_match_json_schema(column=""attachment"", schema={""type"": ""object"", ""properties"": {""file_name"": {""type"": ""string""}, ""file_type"": {""type"": ""string""}, ""file_size"": {""type"": ""number""}}, ""required"": [""file_name"", ""file_type"", ""file_size""]})","expect_column_values_to_match_json_schema(column=""attachment"", schema={""type"": ""object"", ""properties"": {""file_name"": {""type"": ""string""}, ""file_type"": {""type"": ""string""}, ""file_size"": {""type"": ""number""}}})",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.51642366424822
"Ensure the `room_type` column contains only distinct values from the list: `['Single', 'Double', 'Suite']`.","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])",1.0,1.0,1.0,100.00000000000004
For the `amount` column: Validate that all entries are positive numbers and the mean value exceeds $100.,"expect_column_values_to_be_between(column=""amount"", min_value=0),expect_column_mean_to_be_between(column=""amount"", lower_bound=100)","expect_column_values_to_be_between(column=""amount"", min_value=0),expect_column_mean_to_be_between(column=""amount"", min_value=100)",0.9090909090909091,0.8571428571428571,0.9090909090909091,90.91628937646658
"For the `policy_holder_email` column: Ensure all email addresses match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$` and that there are no duplicates.","expect_column_values_to_match_regex(column=""policy_holder_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""policy_holder_email"")","expect_column_values_to_match_regex(column=""policy_holder_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_be_unique(column=""policy_holder_email"")  # Note: This assumes that there are no duplicates in the dataset. If there are, you may need to modify this expectation.",0.7640449438202247,0.7586206896551725,0.7640449438202247,75.58372874603828
Ensure the `meter_id` field is unique and matches the type 'string'. Confirm that this field does not contain null values.,"expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string""),expect_column_values_to_not_be_null(column=""meter_id"")","expect_column_values_to_be_unique(column=""meter_id""),expect_column_values_to_be_of_type(column=""meter_id"", type_=""string""),expect_column_values_to_not_be_null(column=""meter_id"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `blood_pressure` column contains values in the format `systolic/diastolic` and conforms to the pattern `^\d{2,3}/\d{2,3}$`.","expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{2,3}/\d{2,3}$"")","expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{2,3}/\d{2,3}$""),expect_column_values_to_match_regex(column=""blood_pressure"", regex=r""^\d{2,3}/\d{2,3}$"")  # Double-checking for consistency.",0.6181818181818182,0.6037735849056604,0.6181818181818182,45.438506124127706
Ensure the `event_time` column exists and is in the format 'YYYY-MM-DD HH:MM:SS'. Validate that all entries are within the last 30 days.,"expect_column_to_exist(column=""event_time""),expect_column_values_to_match_strftime_format(column=""event_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""event_time"")  # This checks if the values can be parsed as dates,# Note: The validation for entries within the last 30 days would typically require a custom expectation, which is not listed in the accepted expectations.","expect_column_to_exist(column=""event_time""),expect_column_values_to_match_strftime_format(column=""event_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_between(column=""event_time"", min_value=""2023-10-01 00:00:00"", max_value=""2023-11-01 00:00:00"")  # Replace with actual date range based on your requirements.",0.5625,0.49206349206349204,0.5625,62.93810462712283
For field 'game_title': Ensure values in (game_title) are unique across records and match the length constraint of 1 to 100 characters.,"expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100)","expect_column_values_to_be_unique(column=""game_title""),expect_column_value_lengths_to_be_between(column=""game_title"", min_value=1, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure that the `response_time` column values are within the range of 1 to 60 minutes.,"expect_column_values_to_be_between(column=""response_time"", min_value=1, max_value=60)","expect_column_values_to_be_between(column=""response_time"", min_value=1, max_value=60)",1.0,1.0,1.0,100.00000000000004
For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text"")","expect_column_to_exist(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For the `team_score` column: Verify that all values fall within the range of 0 to 200. Ensure no missing values exist.,"expect_column_values_to_be_between(column=""team_score"", min_value=0, max_value=200),expect_column_values_to_not_be_null(column=""team_score"")","expect_column_values_to_be_between(column=""team_score"", min_value=0, max_value=200),expect_column_values_to_not_be_null(column=""team_score"")",1.0,1.0,1.0,100.00000000000004
"For the `order_status` field: confirm that values are limited to the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
Verify that the `course_duration` field contains only positive integers representing weeks.,"expect_column_values_to_be_of_type(column=""course_duration"", type_=""int""),expect_column_values_to_be_between(column=""course_duration"", min_value=1, max_value=None)","expect_column_values_to_be_between(column=""course_duration"", min_value=1, max_value=None)",0.7142857142857143,0.7000000000000001,0.7142857142857143,39.16056266767992
Check the `data_entry_date` column to ensure all entries are in the format 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""data_entry_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""data_entry_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For the `sent_time` field: Ensure the field matches the type 'datetime'. Validate that all timestamps are in chronological order.,"expect_column_values_to_be_of_type(column=""sent_time"", type_=""datetime""),expect_column_values_to_be_increasing(column=""sent_time"")","expect_column_values_to_be_of_type(column=""sent_time"", type_=""datetime""),expect_column_values_to_be_increasing(column=""sent_time"")  # Note: This assumes that the timestamps are in ascending order.",0.8076923076923077,0.8,0.8076923076923077,78.85386115511712
For field 'call_duration': Ensure the field matches the type 'integer'. Ensure this field is within the range of 0 to 36000 (in seconds). Ensure this field exists.,"expect_column_to_exist(column=""call_duration""),expect_column_values_to_be_of_type(column=""call_duration"", type_=""int""),expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=36000)","expect_column_to_exist(column=""call_duration""),expect_column_values_to_be_of_type(column=""call_duration"", type_=""int""),expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=36000)",1.0,1.0,1.0,100.00000000000004
Check that the `user_id` in the `transactions` table exists in the `users` table and confirm the data type is 'integer'.,"expect_column_values_to_be_in_set(column=""user_id"", value_set=users_table_user_ids),expect_column_values_to_be_of_type(column=""user_id"", type_=""int"")","expect_column_values_to_be_of_type(column=""user_id"", type_=""int""),expect_column_values_to_be_unique(column=""user_id"")  # Assuming there are no duplicate user IDs.",0.7857142857142857,0.6666666666666666,0.5714285714285714,71.27278538852673
Check that the `attack_type` column has a unique count greater than 5 but less than 50.,"expect_column_unique_value_count_to_be_between(column=""attack_type"", min_value=6, max_value=49)","expect_column_unique_value_count_to_be_between(column=""attack_type"", min_value=6, max_value=49)",1.0,1.0,1.0,100.00000000000004
Ensure the `ip_address` column contains valid IP addresses that match the regex pattern `^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-5][0-9]|[01]?[0-9][0-9]?)$"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"")",0.9841269841269841,0.967741935483871,0.9841269841269841,98.57740601266778
Ensure the 'experiment_id' column contains only unique values. Ensure it matches the type 'string'.,"expect_column_values_to_be_unique(column=""experiment_id""),expect_column_values_to_be_of_type(column=""experiment_id"", type_=""string"")","expect_column_values_to_be_unique(column=""experiment_id""),expect_column_values_to_be_of_type(column=""experiment_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Validate that the `purchase_date` column contains dates formatted as 'YYYY-MM-DD' and all values can be parsed using dateutil.,"expect_column_values_to_match_strftime_format(column=""purchase_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""purchase_date"")","expect_column_values_to_match_strftime_format(column=""purchase_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""purchase_date"")  # Note: This expectation is not yet implemented, but it should be added to the expectation library.",0.7575757575757575,0.7499999999999999,0.7575757575757575,73.84963370537889
Ensure the `created_at` field has entries only in the last 2 years.,"expect_column_values_to_be_between(column=""created_at"", min_value=""2021-01-01"", max_value=""2023-01-01"")","expect_column_values_to_be_between(column=""created_at"", min_value=""2022-01-01"", max_value=""2023-12-31"")",0.8421052631578947,0.7777777777777778,0.8421052631578947,84.36553195497824
For the `email_body` field: Verify that it contains valid JSON objects and conforms to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""email_body""),expect_column_values_to_match_json_schema(column=""email_body"", schema=your_json_schema_here)","expect_column_values_to_be_json_parseable(column=""email_body""),expect_column_values_to_match_json_schema(column=""email_body"", schema={""type"": ""object"", ""properties"": {""to"": {""type"": ""string""}, ""subject"": {""type"": ""string""}, ""body"": {""type"": ""string""}, ""attachments"": {""type"": ""array"", ""items"": {""type"": ""string""}}}}})",0.6562499999999999,0.6451612903225806,0.6562499999999999,34.511644032044195
Ensure the `wallet_address` column exists and that all values match the regex pattern '^0x[a-fA-F0-9]{40}$'.,"expect_column_to_exist(column=""wallet_address""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$"")","expect_column_to_exist(column=""wallet_address""),expect_column_values_to_match_regex(column=""wallet_address"", regex=r'^0x[a-fA-F0-9]{40}$')",1.0,1.0,1.0,89.92002034465379
For the `service_request_date` column: Ensure it matches the type 'date'. Check for missing values.,"expect_column_values_to_be_of_type(column=""service_request_date"", type_=""date""),expect_column_values_to_not_be_null(column=""service_request_date"")","expect_column_values_to_be_of_type(column=""service_request_date"", type_=""date""),expect_column_values_to_not_be_null(column=""service_request_date"")",1.0,1.0,1.0,100.00000000000004
For field 'humidity': Ensure the field matches the type 'integer'. Validate that all values in (humidity) are within the range of 0 to 100 percent.,"expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""humidity"", type_=""int""),expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For `transaction_date`: Ensure the field matches the type 'date' and contains values within the last five years.,"expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2018-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_of_type(column=""transaction_date"", type_=""date""),expect_column_values_to_be_between(column=""transaction_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")  # Replace with actual date range for last five years.",0.8450704225352113,0.8115942028985509,0.8450704225352113,83.79705125104921
"For field 'insurance_status': Ensure the field contains no missing values. Ensure it matches the type 'text' with values in ['insured', 'uninsured', 'underinsured'].","expect_column_values_to_not_be_null(column=""insurance_status""),expect_column_values_to_be_of_type(column=""insurance_status"", type_=""text""),expect_column_values_to_be_in_set(column=""insurance_status"", value_set=[""insured"", ""uninsured"", ""underinsured""])","expect_column_values_to_not_be_null(column=""insurance_status""),expect_column_values_to_be_of_type(column=""insurance_status"", type_=""text""),expect_column_values_to_be_in_set(column=""insurance_status"", value_set=['insured', 'uninsured', 'underinsured'])",1.0,1.0,1.0,87.01784579512386
Validate that the `ratings` column exhibits a uniform distribution across the range of 1 to 5 stars.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""ratings"", threshold=0.05)","expect_column_values_to_be_between(column=""ratings"", min_value=1, max_value=5)",0.45161290322580644,0.27586206896551724,0.45161290322580644,36.8082482778483
Ensure that the `file_size` of each document in the `uploads` folder is within the range of `1KB` to `10MB`.,"expect_file_size_to_be_between(file_size_range=(1024, 10485760))","expect_file_size_to_be_between(file_path=""uploads/*"", min_value=1024, max_value=10485760)",0.6923076923076923,0.5,0.6923076923076923,43.43078350207906
"For field 'department_code': Ensure the field matches the type 'text'. Ensure values in (department_code) exist in the predefined set ['HR', 'Finance', 'IT'].","expect_column_values_to_be_of_type(column=""department_code"", type_=""text""),expect_column_values_to_be_in_set(column=""department_code"", value_set=['HR', 'Finance', 'IT'])","expect_column_values_to_be_of_type(column=""department_code"", type_=""text""),expect_column_values_to_be_in_set(column=""department_code"", value_set=['HR', 'Finance', 'IT'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `freight_cost` column has unique values that fall within the defined range of $100 to $1,000.","expect_column_values_to_be_unique(column=""freight_cost""),expect_column_values_to_be_between(column=""freight_cost"", min_value=100, max_value=1000)","expect_column_values_to_be_unique(column=""freight_cost""),expect_column_values_to_be_between(column=""freight_cost"", min_value=100, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"Check that the `user_preferences` column contains valid JSON objects conforming to the schema: {'genres': ['string'], 'languages': ['string']}.","expect_column_values_to_match_json_schema(column=""user_preferences"", schema={'genres': ['string'], 'languages': ['string']})","expect_column_values_to_be_json_parseable(column=""user_preferences""),expect_column_values_to_match_json_schema(column=""user_preferences"", schema={""type"": ""object"", ""properties"": {""genres"": {""type"": ""array"", ""items"": {""type"": ""string""}}, ""languages"": {""type"": ""array"", ""items"": {""type"": ""string""}}}}})",0.5882352941176471,0.44897959183673464,0.5882352941176471,20.946136333817574
"For field 'currency_code': Ensure the field matches the type 'text'. Ensure values in (currency_code) exist in the predefined list ['USD', 'EUR', 'GBP'] and are not null.","expect_column_to_exist(column=""currency_code""),expect_column_values_to_be_of_type(column=""currency_code"", type_=""text""),expect_column_values_to_be_in_set(column=""currency_code"", value_set=['USD', 'EUR', 'GBP']),expect_column_values_to_not_be_null(column=""currency_code"")","expect_column_values_to_be_of_type(column=""currency_code"", type_=""text""),expect_column_values_to_be_in_set(column=""currency_code"", value_set=['USD', 'EUR', 'GBP']),expect_column_values_to_not_be_null(column=""currency_code"")  # This expectation is optional if you want to check for null values.",0.8387096774193548,0.7912087912087912,0.7956989247311828,83.65161628970043
Check that values in the `block_number` column are strictly increasing.,"expect_column_values_to_be_increasing(column=""block_number"")","expect_column_values_to_be_increasing(column=""block_number"")",1.0,1.0,1.0,100.00000000000004
For field 'country_code': Ensure all values match the format of a valid ISO 3166-1 alpha-2 code. Ensure this field exists.,"expect_column_to_exist(column=""country_code""),expect_column_values_to_match_regex(column=""country_code"", regex=r""^[A-Z]{2}$"")","expect_column_to_exist(column=""country_code""),expect_column_values_to_match_regex(column=""country_code"", regex=r""^[A-Z]{2}$"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `forecast_date` column contains unique dates and matches the `YYYY-MM-DD` format.,"expect_column_values_to_be_unique(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_unique(column=""forecast_date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
For field 'user_id': Ensure this field is required (not null). Verify that all user IDs are unique and match the type 'string'.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_of_type(column=""user_id"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
Validate that the `post_timestamp` column contains valid datetime entries in the format 'YYYY-MM-DD HH:MM:SS' and check if all timestamps are in the future.,"expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_increasing(column=""post_timestamp"")","expect_column_values_to_match_strftime_format(column=""post_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""post_timestamp""),expect_column_values_to_be_increasing(column=""post_timestamp"")  # Assuming that the timestamps are in ascending order.",0.7499999999999999,0.7428571428571429,0.7499999999999999,65.43903787387349
"Check that the `order_status` column contains only the values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_be_in_set(column=""order_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
For the `property_id` field: Ensure it is of type `integer` and contains only unique values.,"expect_column_values_to_be_of_type(column=""property_id"", type_=""integer""),expect_column_values_to_be_unique(column=""property_id"")","expect_column_values_to_be_of_type(column=""property_id"", type_=""integer""),expect_column_values_to_be_unique(column=""property_id"")  # Note: This assumes that the column values are unique. If this is not the case, you may need to modify the expectation accordingly.",0.6461538461538462,0.6349206349206349,0.6461538461538462,63.38861298744122
Verify that the distribution of `player_scores` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""player_scores"", threshold=0.05)","expect_column_distribution_ks_test_p_value_to_be_greater_than(column=""player_scores"", threshold=0.05)",0.9714285714285714,0.9090909090909091,0.9714285714285714,91.99522176589419
"Ensure that `quantity` values are integers and are greater than zero, and there are no negative values.","expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_greater_than(column=""quantity"", value=0)","expect_column_values_to_be_of_type(column=""quantity"", type_=""int""),expect_column_values_to_be_between(column=""quantity"", min_value=1, max_value=None),expect_column_values_to_not_be_null(column=""quantity"")  # This is optional, but recommended.",0.6229508196721312,0.5423728813559322,0.6229508196721312,50.40171637935395
For field 'date_of_birth': Ensure the field matches the type 'date'. Verify that all values are in the format 'YYYY-MM-DD' and are valid dates.,"expect_column_values_to_be_of_type(column=""date_of_birth"", type_=""date""),expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")","expect_column_values_to_be_of_type(column=""date_of_birth"", type_=""date""),expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")  # Optional, but recommended for robustness.",0.9411764705882353,0.9397590361445783,0.9411764705882353,92.03877302350543
Verify that the `order_date` column follows the `YYYY-MM-DD` format and all date entries are valid.,"expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")","expect_column_values_to_match_strftime_format(column=""order_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""order_date"")  # This is a new expectation that you can add to your test suite. It will check if the date entries are valid date strings.",0.6756756756756758,0.6666666666666666,0.6756756756756758,67.6574853697338
"For the `status` field: Ensure it contains only values from the specified set `['Open', 'Closed', 'Pending']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
For the `contact_date` field: Validate that all entries conform to the format '%Y-%m-%d'. Ensure this field is required (not null).,"expect_column_to_exist(column=""contact_date""),expect_column_values_to_match_strftime_format(column=""contact_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""contact_date"")","expect_column_values_to_match_strftime_format(column=""contact_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""contact_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
Ensure the `user_id` column values are from the specified set of valid user IDs.,"expect_column_values_to_be_in_set(column=""user_id"", value_set=valid_user_id_set)","expect_column_values_to_be_in_set(column=""user_id"", value_set=valid_user_ids)",0.9032258064516129,0.896551724137931,0.9032258064516129,88.49510227149936
For field 'tracking_number': Ensure the field matches the type 'text'. Validate that the length of values in (tracking_number) is exactly 12 characters and does not contain any special characters.,"expect_column_values_to_be_of_type(column=""tracking_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""tracking_number"", length=12),expect_column_values_to_not_match_regex(column=""tracking_number"", regex=r""[^a-zA-Z0-9]"")","expect_column_values_to_be_of_type(column=""tracking_number"", type_=""text""),expect_column_value_lengths_to_equal(column=""tracking_number"", value=12),expect_column_values_to_not_match_regex(column=""tracking_number"", regex=r""[\W_]"")  # Remove special characters and underscores.",0.8500000000000001,0.8205128205128205,0.8500000000000001,84.9570617866631
Ensure the `device_id` column contains only unique values and is not null.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
Check that the `customer_age` column values fall within the range of `18` to `65`.,"expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=65)","expect_column_values_to_be_between(column=""customer_age"", min_value=18, max_value=65)",1.0,1.0,1.0,100.00000000000004
Verify that the `release_date` column is in the format 'YYYY-MM-DD' and all release dates are in the past.,"expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_decreasing(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""release_date""),expect_column_values_to_be_increasing(column=""release_date"")  # Assuming that the release dates are in ascending order.",0.6865671641791045,0.6461538461538461,0.6865671641791045,58.7073657424617
For the `stock_quantity` column: Ensure values are non-negative integers and check for non-null entries.,"expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_not_be_null(column=""stock_quantity""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=""stock_quantity"")",0.8064516129032258,0.7666666666666666,0.5806451612903226,57.11966273431195
For the `sku` column: Ensure all entries match the regex pattern '^[A-Z0-9]{8}$' and are unique.,"expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8}$""),expect_column_values_to_be_unique(column=""sku"")","expect_column_values_to_match_regex(column=""sku"", regex=r""^[A-Z0-9]{8}$""),expect_column_values_to_be_unique(column=""sku"")  # Note: This assumes that the column is unique by default. If not, you may need to add additional expectations.",0.6984126984126985,0.6885245901639345,0.6984126984126985,68.20332118148613
Ensure the `property_id` field contains only distinct values and is of type 'integer'. This field must not contain null values.,"expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""integer"")","expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""int""),expect_column_values_to_not_be_null(column=""property_id"")",0.967741935483871,0.9333333333333333,0.8064516129032258,96.46458712936789
"For the `player_performance` metric, ensure the standard deviation is between 5 and 15, confirming consistency in player scoring.","expect_column_stdev_to_be_between(column=""player_performance"", min_value=5, max_value=15)","expect_column_stdev_to_be_between(column=""player_performance"", min_value=5, max_value=15)",1.0,1.0,1.0,100.00000000000004
For field 'premium_amount': Ensure the field matches the type 'numeric'. Ensure the values in 'premium_amount' are greater than 0 and less than 10000.,"expect_column_values_to_be_of_type(column=""premium_amount"", type_=""numeric""),expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_of_type(column=""premium_amount"", type_=""numeric""),expect_column_values_to_be_between(column=""premium_amount"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
"Verify that the `account_status` column contains only the values `['Active', 'Inactive', 'Pending']` and that it exists in the dataset.","expect_column_to_exist(column=""account_status""),expect_column_values_to_be_in_set(column=""account_status"", value_set=['Active', 'Inactive', 'Pending'])","expect_column_values_to_be_in_set(column=""account_status"", value_set=['Active', 'Inactive', 'Pending'])  # Check if the values are in the expected set.  #expect_column_to_exist(column=""account_status"")  # Check if the column exists.",0.7586206896551725,0.7142857142857142,0.5172413793103449,69.56026887705974
For field 'likes_count': Ensure this field matches the type 'integer'. Ensure values are within the range of 0 to 10000. Ensure this field exists.,"expect_column_to_exist(column=""likes_count""),expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=10000)","expect_column_to_exist(column=""likes_count""),expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_be_between(column=""likes_count"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
"For field 'department_name': Ensure the field matches the type 'text'. Validate that values match the predefined list ['HR', 'IT', 'Finance', 'Marketing'].","expect_column_values_to_be_of_type(column=""department_name"", type_=""text""),expect_column_values_to_be_in_set(column=""department_name"", value_set=['HR', 'IT', 'Finance', 'Marketing'])","expect_column_values_to_be_of_type(column=""department_name"", type_=""text""),expect_column_values_to_be_in_set(column=""department_name"", value_set=['HR', 'IT', 'Finance', 'Marketing'])",1.0,1.0,1.0,100.00000000000004
For field 'timestamp': Ensure the field matches the type 'datetime'. Validate that all entries in (timestamp) conform to the format '%Y-%m-%d %H:%M:%S'. Ensure this field exists.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format='%Y-%m-%d %H:%M:%S')","expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,93.59274198270062
For field `performance_score`: Verify that the distribution of performance scores passes the Chi-Square test with a p-value greater than 0.05.,"expect_column_chisquare_test_p_value_to_be_greater_than(column=""performance_score"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""performance_score"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field `course_completion`: Ensure that the average `course_completion` percentage is above 75%.,"expect_column_mean_to_be_between(column=""course_completion"", min_value=75)","expect_column_mean_to_be_between(column=""course_completion"", min_value=75)",1.0,1.0,1.0,100.00000000000004
Verify that the `completion_percentage` values are between 0% and 100% and check for any duplicates.,"expect_column_values_to_be_between(column=""completion_percentage"", min_value=0, max_value=100),expect_column_values_to_be_unique(column=""completion_percentage"")","expect_column_values_to_be_between(column=""completion_percentage"", min_value=0, max_value=100),expect_column_values_to_be_unique(column=""completion_percentage"")",1.0,1.0,1.0,100.00000000000004
"Check that the number of lines in the uploaded log file does not exceed 10,000.","expect_file_line_regex_match_count_to_be_between(file_path=""path/to/log/file"", min_value=0, max_value=10000)","expect_file_line_count_to_be_between(file_path=""uploaded_log_file"", min_value=0, max_value=10000)",0.8717948717948718,0.7567567567567567,0.8717948717948718,71.94804252589996
"Ensure that the `service_type` in Utilities matches the `utility_type` across the datasets, confirming both are distinct.","expect_column_pair_values_to_be_equal(column_A=""service_type"", column_B=""utility_type"")","expect_column_values_to_be_in_set(column=""service_type"", value_set=[""electricity"", ""gas"", ""water"", ""waste"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"", ""refuse"", ""recycling"",",0.18181818181818182,0.09302325581395349,0.18181818181818182,5.295216394471908
Validate that the `filing_date` column contains dates formatted as `YYYY-MM-DD` and that no entries are older than 10 years.,"expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""filing_date"", min_value=""2013-01-01"", max_value=""2023-12-31"")","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""filing_date"", min_value=""2023-01-01"", max_value=""2023-01-01"")",0.9117647058823528,0.8787878787878788,0.9117647058823528,91.62827972216586
For the `humidity` column: Verify that the mean value is between 20% and 100%.,"expect_column_mean_to_be_between(column=""humidity"", min_value=20, max_value=100)","expect_column_mean_to_be_between(column=""humidity"", min_value=20, max_value=100)",1.0,1.0,1.0,100.00000000000004
For the `customer_id` field: Ensure values are unique and of type 'integer'. Ensure this field cannot be null.,"expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int"")","expect_column_values_to_be_unique(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""int""),expect_column_values_to_not_be_null(column=""customer_id"")",1.0,0.9666666666666667,0.8064516129032258,99.64092777538484
"Check that the `quantity_ordered` values are within the range of `1` to `1000`, ensuring no zero or negative values.","expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=1000)","expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=1000),expect_column_values_to_not_be_null(column=""quantity_ordered"")  # To ensure that the column values are not null, this expectation can be added as well.",0.5357142857142857,0.5185185185185185,0.5357142857142857,42.04567944571555
Check if the `location` column has no missing values and that all entries match the specified set of regions.,"expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=[""region1"", ""region2"", ""region3"", ...])","expect_column_values_to_not_be_null(column=""location""),expect_column_values_to_be_in_set(column=""location"", value_set=regions)",0.909090909090909,0.9047619047619048,0.909090909090909,68.39225345940265
Verify that the `billing_date` column contains values that fall within the range of the last 12 months.,"expect_column_values_to_be_between(column=""billing_date"", min_value=""2022-10-01"", max_value=""2023-10-01"")","expect_column_values_to_be_between(column=""billing_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")",0.8421052631578947,0.7222222222222222,0.7894736842105263,81.20837642120138
Verify that the `post_created_at` column adheres to the ISO 8601 datetime format 'YYYY-MM-DDTHH:MM:SSZ'.,"expect_column_values_to_match_strftime_format(column=""post_created_at"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")","expect_column_values_to_match_strftime_format(column=""post_created_at"", strftime_format=""%Y-%m-%dT%H:%M:%SZ"")",1.0,1.0,1.0,100.00000000000004
Verify that the `release_date` values are in increasing order and fall within the last 5 years.,"expect_column_values_to_be_increasing(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""2018-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_increasing(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")",0.9642857142857143,0.9259259259259259,0.9642857142857143,96.0132862288073
For field 'claim_amount': Ensure the field is required (not null). Ensure the field matches the type 'decimal'. Ensure this field exists.,"expect_column_to_exist(column=""claim_amount""),expect_column_values_to_not_be_null(column=""claim_amount""),expect_column_values_to_be_of_type(column=""claim_amount"", type_=""decimal"")","expect_column_to_exist(column=""claim_amount""),expect_column_values_to_not_be_null(column=""claim_amount""),expect_column_values_to_be_of_type(column=""claim_amount"", type_=""decimal"")",1.0,1.0,1.0,100.00000000000004
"In the `category` column, ensure that values belong to the predefined list `['Electronics', 'Clothing', 'Home']` and that there are no duplicates.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_be_unique(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_be_unique(column=""category"")  # This expectation will fail if there are duplicates.",0.846153846153846,0.8400000000000001,0.846153846153846,83.18673937138549
Confirm that the `timestamp` column entries are in ISO 8601 format and exist for all records.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ"")","expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_not_be_null(column=""timestamp"")  # This assumes that the timestamp column is not nullable.",0.7666666666666666,0.6551724137931034,0.6,72.34601826241344
"For the `sale_date` field, confirm that all entries are in the format 'YYYY-MM-DD' and are not in the future.","expect_column_values_to_match_strftime_format(column=""sale_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""sale_date""),expect_column_values_to_be_between(column=""sale_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""sale_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""sale_date""),expect_column_values_to_be_between(column=""sale_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.9333333333333333,0.9318181818181819,0.9333333333333333,92.41617488669405
"For the `customer_data` field, ensure it conforms to the specified JSON schema, including all mandatory fields.","expect_column_values_to_match_json_schema(column=""customer_data"", schema=""your_json_schema_here"")","expect_column_values_to_match_json_schema(column=""customer_data"", schema={""type"": ""object"", ""required"": [""name"", ""email"", ""phone""], ""properties"": {""name"": {""type"": ""string""}, ""email"": {""type"": ""string""}, ""phone"": {""type"": ""string""}}})",0.5238095238095238,0.5,0.5238095238095238,23.49768853072512
"Validate that the `attendance_percentage` column values fall within the range of 0 to 100, with no null entries.","expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""attendance_percentage"")","expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""attendance_percentage"")",1.0,1.0,1.0,100.00000000000004
Ensure the `registration_date` column values are in the format `YYYY-MM-DD` and are valid dates.,"expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""registration_date"")","expect_column_values_to_match_strftime_format(column=""registration_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""registration_date"")  # Note: This is a new expectation added in December 2023. Please update your knowledge Date accordingly.",0.7575757575757575,0.7499999999999999,0.7575757575757575,73.84963370537889
For field 'transaction_type': Ensure the field matches the type 'text'. Validate that 'transaction_type' is either 'Transfer' or 'Exchange'. Ensure this field exists.,"expect_column_to_exist(column=""transaction_type""),expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Transfer"", ""Exchange""])","expect_column_to_exist(column=""transaction_type""),expect_column_values_to_be_of_type(column=""transaction_type"", type_=""text""),expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Transfer"", ""Exchange""])",1.0,1.0,1.0,100.00000000000004
"For field 'case_id': Ensure the field is unique and of type 'text'. Validate that it does not contain null values and matches the pattern 'CASE-\\d{3,6}'.","expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_be_of_type(column=""case_id"", type_=""text""),expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""^CASE-\d{3,6}$"")","expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_not_be_null(column=""case_id""),expect_column_values_to_match_regex(column=""case_id"", regex=r""^CASE-\d{3,6}$"")",0.85,0.846153846153846,0.85,68.07123983233856
"For the `service_type` field: Ensure the field contains only distinct values matching `['Electricity', 'Water', 'Gas']`. Validate that no values are null.","expect_column_values_to_be_in_set(column=""service_type"", value_set=['Electricity', 'Water', 'Gas']),expect_column_values_to_not_be_null(column=""service_type"")","expect_column_values_to_be_in_set(column=""service_type"", value_set=['Electricity', 'Water', 'Gas']),expect_column_values_to_not_be_null(column=""service_type"")",1.0,1.0,1.0,100.00000000000004
For field 'order_date': Ensure this field is required (not null). Ensure this field matches the type 'date'. Ensure all order dates are not in the future.,"expect_column_values_to_not_be_null(column=""order_date""),expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_be_between(column=""order_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_not_be_null(column=""order_date""),expect_column_values_to_be_of_type(column=""order_date"", type_=""date""),expect_column_values_to_be_between(column=""order_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.9285714285714286,0.9268292682926829,0.9285714285714286,91.95873923215356
For field 'interest_rate': Ensure the field exists. Validate that values in 'interest_rate' are numeric and fall within the range of 0.01 to 0.20. Ensure no interest rate is negative.,"expect_column_to_exist(column=""interest_rate""),expect_column_values_to_be_of_type(column=""interest_rate"", type_=""float""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0.01, max_value=0.20)","expect_column_to_exist(column=""interest_rate""),expect_column_values_to_be_of_type(column=""interest_rate"", type_=""float""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0.01, max_value=0.20),expect_column_values_to_not_be_null(column=""interest_rate""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0, max_value=0)  # This is a placeholder value to ensure the expectation is met. In reality, the expectation should be based on the actual min/max values of the interest rate.",0.576,0.5691056910569106,0.576,46.542751755069645
Verify that the `medication_list` column contains valid JSON objects conforming to the specified schema.,"expect_column_values_to_match_json_schema(column=""medication_list"")","expect_column_values_to_match_json_schema(column=""medication_list"", schema={""type"": ""object"", ""properties"": {""medication_name"": {""type"": ""string""}, ""dosage_form"": {""type"": ""string""}, ""route"": {""type"": ""string""}, ""frequency"": {""type"": ""string""}, ""strength"": {""type"": ""string""}, ""formulation"": {""type"": ""string""}, ""manufacturer"": {""type"": ""string""}, ""expiration_date"": {""type"": ""string""}, ""package_size"": {""type"": ""string""}, ""package_quantity"": {""type"": ""string""}, ""package_unit"": {""type"": ""string""}, ""package_type"": {""type"": ""string""}, ""package_sub_type"": {""type"": ""string""}, ""package_sub_sub_type"": {""type"": ""string""}, ""package_sub_sub_sub_type"": {""type"": ""string""}, ""package_sub_sub_sub_sub_type"": {""type"": ""string""}, ""package_sub_sub_sub_sub_sub_type"": {""type"": ""string""}, ""package_sub_sub_sub_sub_sub_sub_type"": {""type"": ""string""}, ""package_sub_sub_sub_sub_sub_sub_sub_type"": {""type"": ""string""}, ""package_sub_sub_sub_sub_sub_sub_sub_sub_type"": {""type"": ""string",0.14814814814814814,0.13533834586466167,0.14814814814814814,4.685429345358994
Verify that the `delivery_date` column contains future dates and is formatted correctly as 'YYYY-MM-DD'.,"expect_column_values_to_be_increasing(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_match_strftime_format(column=""delivery_date"", strftime_format=""%Y-%m-%d"")",0.9387755102040817,0.8936170212765957,0.9387755102040817,91.96822664155296
Ensure the `rating` column contains values within the range of 1 to 10.,"expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""rating"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
For field 'customer_feedback': Ensure the field matches the type 'text'. Validate that the length of values in (customer_feedback) falls within the range of 10 to 500 characters. Ensure this field exists.,"expect_column_to_exist(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500)","expect_column_to_exist(column=""customer_feedback""),expect_column_values_to_be_of_type(column=""customer_feedback"", type_=""text""),expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=10, max_value=500)",1.0,1.0,1.0,100.00000000000004
"Verify that the `room_type` column contains only the values `['Single', 'Double', 'Suite']` and that all entries are non-null.","expect_column_values_to_be_in_set(column=""room_type"", value_set=[""Single"", ""Double"", ""Suite""]),expect_column_values_to_not_be_null(column=""room_type"")","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=""room_type"")",1.0,1.0,1.0,80.15316328584778
For field 'block_height': Ensure this field contains only integer values. Validate that values are in increasing order without gaps.,"expect_column_values_to_be_of_type(column=""block_height"", type_=""int""),expect_column_values_to_be_increasing(column=""block_height"")","expect_column_values_to_be_of_type(column=""block_height"", type_=""int""),expect_column_values_to_be_increasing(column=""block_height""),expect_column_values_to_be_unique(column=""block_height"")",0.8235294117647058,0.8163265306122449,0.8235294117647058,69.77465485106245
For the `date_of_birth` column: Ensure all entries are valid dates and are formatted as '%Y-%m-%d'.,"expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth"")  # Note: This is a new expectation that is not yet supported by Cutting Knowledge Date: December 2023
Today Date: 26 July 2024",0.7105263157894737,0.6756756756756757,0.42105263157894735,69.63785199538361
For file 'weather_data.json': Ensure the file exists. Ensure the file matches the specified hash value. Ensure the JSON structure is valid and contains the required fields.,"expect_file_to_exist(file_path=""weather_data.json""),expect_file_hash_to_equal(file_path=""weather_data.json"", hash_value=""specified_hash_value""),expect_file_to_be_valid_json(file_path=""weather_data.json"")","expect_file_to_exist(file_path=""weather_data.json""),expect_file_hash_to_equal(file_path=""weather_data.json"", hash_value=""your_hash_value_here""),expect_json_to_be_valid(file_path=""weather_data.json""),expect_json_to_have_required_fields(file_path=""weather_data.json"", required_fields=[""latitude"", ""longitude"", ""temperature"", ""humidity"", ""pressure"", ""wind_speed"", ""wind_direction"", ""cloudiness"", ""precipitation"", ""weather_condition"", ""weather_description"", ""weather_date"", ""weather_time"", ""weather_location"", ""weather_source"", ""weather_provider"", ""weather_provider_version"", ""weather_provider_hash"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather_provider_hash_version"", ""weather",0.3417085427135678,0.2741116751269035,0.3316582914572865,16.586777462624305
"For field 'status': Ensure the field is required (not null). Ensure values in (status) must exist in the set ('Pending', 'In Transit', 'Delivered', 'Returned').","expect_column_values_to_not_be_null(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=[""Pending"", ""In Transit"", ""Delivered"", ""Returned""])","expect_column_values_to_not_be_null(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'In Transit', 'Delivered', 'Returned'])",1.0,1.0,1.0,73.02391781713118
For field 'block_number': Ensure this field exists. Validate that (block_number) is an integer and matches the condition that it must be greater than or equal to zero.,"expect_column_to_exist(column=""block_number""),expect_column_values_to_be_of_type(column=""block_number"", type_=""int""),expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=None)","expect_column_to_exist(column=""block_number""),expect_column_values_to_be_of_type(column=""block_number"", type_=""int""),expect_column_values_to_be_between(column=""block_number"", min_value=0, max_value=None)",1.0,1.0,1.0,100.00000000000004
Ensure the `invoice_date` column adheres to the datetime format '%d/%m/%Y' and contains no missing values.,"expect_column_to_exist(column=""invoice_date""),expect_column_values_to_match_strftime_format(column=""invoice_date"", strftime_format=""%d/%m/%Y""),expect_column_values_to_not_be_null(column=""invoice_date"")","expect_column_values_to_match_strftime_format(column=""invoice_date"", strftime_format=""%d/%m/%Y""),expect_column_values_to_not_be_null(column=""invoice_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,75.3268656454657
For field 'total_cases': Ensure this field exists. Validate that the values are integers and are within the range '0' to '10000'.,"expect_column_to_exist(column=""total_cases""),expect_column_values_to_be_of_type(column=""total_cases"", type_=""int""),expect_column_values_to_be_between(column=""total_cases"", min_value=0, max_value=10000)","expect_column_to_exist(column=""total_cases""),expect_column_values_to_be_of_type(column=""total_cases"", type_=""int""),expect_column_values_to_be_between(column=""total_cases"", min_value=0, max_value=10000)",1.0,1.0,1.0,100.00000000000004
Verify that the `timestamp` column contains values that are in increasing order without duplicates.,"expect_column_values_to_be_increasing(column=""timestamp""),expect_column_values_to_be_unique(column=""timestamp"")","expect_column_values_to_be_increasing(column=""timestamp""),expect_column_values_to_be_unique(column=""timestamp"")",1.0,1.0,1.0,100.00000000000004
For the `transaction_id` column: Ensure all values are unique and of type 'string'. Ensure this field cannot be null.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""string""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
For field 'review_rating': Ensure the field matches the type 'decimal'. Ensure the field contains values between 1.0 and 5.0. Ensure this field exists.,"expect_column_to_exist(column=""review_rating""),expect_column_values_to_be_of_type(column=""review_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""review_rating"", min_value=1.0, max_value=5.0)","expect_column_to_exist(column=""review_rating""),expect_column_values_to_be_of_type(column=""review_rating"", type_=""decimal""),expect_column_values_to_be_between(column=""review_rating"", min_value=1.0, max_value=5.0)",1.0,1.0,1.0,100.00000000000004
For the `release_date` column: Ensure all dates are within the range of '2000-01-01' to '2024-12-31'. Ensure this field exists.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""2000-01-01"", max_value=""2024-12-31"")","expect_column_to_exist(column=""release_date""),expect_column_values_to_be_between(column=""release_date"", min_value=""2000-01-01"", max_value=""2024-12-31"")",1.0,1.0,1.0,100.00000000000004
Check that the `email` column conforms to a valid email format and does not have any duplicates.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")  # Note: This assumes that the email column is unique. If this is not the case, you may need to modify the expectation accordingly.",0.6461538461538462,0.6349206349206349,0.6461538461538462,70.04827720133105
For field `usage_kwh`: Confirm that values are non-negative and that the average usage does not exceed 1000 kWh per month.,"expect_column_values_to_be_between(column=""usage_kwh"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""usage_kwh"", min_value=None, max_value=1000)","expect_column_values_to_be_between(column=""usage_kwh"", min_value=0),expect_column_mean_to_be_between(column=""usage_kwh"", min_value=0, max_value=1000)",0.912280701754386,0.8727272727272727,0.912280701754386,86.34794744107481
Confirm that the `date_of_birth` column values are valid dates formatted as 'MM/DD/YYYY' and are not in the future.,"expect_column_values_to_match_strftime_format(column=""date_of_birth"", format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""01/01/1900"", max_value=""today"")","expect_column_values_to_match_strftime_format(column=""date_of_birth"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.9263157894736842,0.8387096774193548,0.9052631578947369,84.71684270401339
Ensure that the `bedrooms` and `bathrooms` columns are both integers and that `bathrooms` is less than or equal to `bedrooms`.,"expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_of_type(column=""bathrooms"", type_=""int""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")","expect_column_values_to_be_of_type(column=""bedrooms"", type_=""int""),expect_column_values_to_be_between(column=""bathrooms"", min_value=0, max_value=""bedrooms"")",0.6349206349206348,0.5245901639344263,0.6349206349206348,45.84634990509202
For field 'supplier_email': Ensure this field exists. Validate that all email addresses in 'supplier_email' match the regular expression pattern for valid emails. Ensure there are no missing values in this field.,"expect_column_to_exist(column=""supplier_email""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""),expect_column_values_to_not_be_null(column=""supplier_email"")","expect_column_to_exist(column=""supplier_email""),expect_column_values_to_match_regex(column=""supplier_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_null(column=""supplier_email"")  # This assumes that null values are not valid email addresses.",0.6913580246913581,0.6582278481012659,0.6913580246913581,73.95678583057665
For the `researcher_email` field: Ensure all emails match the standard email regex pattern. Validate that there are no duplicates and no missing values.,"expect_column_values_to_match_regex(column=""researcher_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""researcher_email""),expect_column_values_to_not_be_null(column=""researcher_email"")","expect_column_values_to_match_regex(column=""researcher_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""researcher_email""),expect_column_values_to_not_be_null(column=""researcher_email"")",1.0,1.0,1.0,100.00000000000004
Check that the combination of `case_id` and `lawyer_id` is unique across all records in the `case_assignments` table.,"expect_compound_columns_to_be_unique(column_A=""case_id"", column_B=""lawyer_id"")","expect_compound_columns_to_be_unique(column_A=""case_id"", column_B=""lawyer_id""),expect_column_values_to_be_unique(column=""case_id""),expect_column_values_to_be_unique(column=""lawyer_id"")  # Note: This is just a suggestion; you may need to adjust the expectation based on your specific requirements.",0.43750000000000006,0.41935483870967744,0.43750000000000006,32.25568884882399
"Ensure the `country` column values are from the predefined set: `['USA', 'Canada', 'UK', 'Australia']`.","expect_column_values_to_be_in_set(column=""country"", value_set=['USA', 'Canada', 'UK', 'Australia'])","expect_column_values_to_be_in_set(column=""country"", value_set=['USA', 'Canada', 'UK', 'Australia'])",1.0,1.0,1.0,100.00000000000004
"Ensure that the `user_role` column contains only unique values for `admin`, `editor`, and `viewer`, and that the `last_login` timestamp is within the last year for every active user.","expect_column_values_to_be_in_set(column=""user_role"", value_set=[""admin"", ""editor"", ""viewer""]),expect_column_values_to_be_dateutil_parseable(column=""last_login""),expect_column_values_to_be_between(column=""last_login"", min_value=""2022-10-12"", max_value=""2023-10-12"")","expect_column_values_to_be_unique(column=""user_role""),expect_column_values_to_be_between(column=""last_login"", min_value=""2023-01-01"", max_value=""2024-01-01"")  # Replace with actual date range for today.",0.5569620253164557,0.4675324675324676,0.5316455696202532,43.4788804759738
Ensure the `product_sku` column has all distinct values and no missing entries.,"expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_not_be_null(column=""product_sku"")","expect_column_values_to_be_unique(column=""product_sku""),expect_column_values_to_not_be_null(column=""product_sku"")  # Note: This assumes that the column is not nullable. If it is nullable, you may need to modify the expectation accordingly.",0.6440677966101694,0.631578947368421,0.6440677966101694,61.46759386358617
Validate that the `ip_address` column contains unique values and matches the standard IPv4 format.,"expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")","expect_column_values_to_be_unique(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"")  # IPv4 format regular expression",0.9354838709677419,0.9333333333333333,0.9354838709677419,93.54699761203838
Ensure the `email_address` column matches the regex pattern for valid email addresses and contains no null values.,"expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_not_be_null(column=""email_address"")","expect_column_values_to_not_be_null(column=""email_address""),expect_column_values_to_match_regex(column=""email_address"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")",1.0,0.9565217391304348,0.5833333333333334,99.64092777538484
"For the `profile_description`, ensure that string lengths do not exceed 160 characters and contain no offensive words from the specified list.","expect_column_value_lengths_to_be_between(column=""profile_description"", min_value=0, max_value=160),expect_column_values_to_not_match_regex_list(column=""profile_description"", regex_list=[r""offensive_word1"", r""offensive_word2"", r""offensive_word3""])","expect_column_value_lengths_to_be_between(column=""profile_description"", min_value=0, max_value=160),expect_column_values_to_not_match_regex(column=""profile_description"", regex=r""offensive words"")  # Replace ""offensive words"" with your actual list of offensive words.",0.8205128205128205,0.6842105263157895,0.7948717948717949,68.98878421708177
Ensure the `created_at` timestamps are in 'YYYY-MM-DD HH:MM:SS' format and do not contain null values.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""created_at"")","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""created_at"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `session_duration` column passes the KS test with p-values greater than 0.05, indicating a consistent user session duration.","expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""session_duration"", threshold=0.05)","expect_column_p_value_to_be_greater_than(column=""session_duration"", threshold=0.05)",0.8750000000000001,0.8000000000000002,0.8750000000000001,72.87934895122054
For the `bedrooms` and `bathrooms` columns: Ensure that the number of bedrooms is greater than or equal to the number of bathrooms for all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""bedrooms"", column_B=""bathrooms"")",1.0,1.0,1.0,100.00000000000004
For field 'activation_date': Ensure the field is required (not null). Ensure the field matches the format 'YYYY-MM-DD'. Ensure this field exists.,"expect_column_to_exist(column=""activation_date""),expect_column_values_to_not_be_null(column=""activation_date""),expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""activation_date""),expect_column_values_to_not_be_null(column=""activation_date""),expect_column_values_to_match_strftime_format(column=""activation_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Check that the `request_date` field exists and is formatted as YYYY-MM-DD. Confirm that all dates are within the current calendar year.,"expect_column_to_exist(column=""request_date""),expect_column_values_to_match_strftime_format(column=""request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""request_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")","expect_column_to_exist(column=""request_date""),expect_column_values_to_match_strftime_format(column=""request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""request_date"", min_value=""2023-01-01"", max_value=""2023-12-31"")  # Replace 2023 with the current year.",0.9318181818181819,0.9302325581395349,0.9318181818181819,92.26959148976887
Ensure that the `response_time` column's variance does not exceed the predefined threshold of 10 seconds.,"expect_column_stdev_to_be_between(column=""response_time"", min_value=0, max_value=10)","expect_column_variance_to_be_between(column=""response_time"", min_value=0, max_value=10)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
"Check that the `status` column contains distinct values from the set `['Active', 'Inactive', 'Pending']`.","expect_column_distinct_values_to_equal_set(column=""status"", value_set=['Active', 'Inactive', 'Pending'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Active', 'Inactive', 'Pending'])",0.8571428571428571,0.6923076923076923,0.8571428571428571,82.93181259810136
"In the `coverage_type` column: Ensure values match the set `['Comprehensive', 'Third Party', 'Collision']` with no duplicates.","expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Comprehensive', 'Third Party', 'Collision']),expect_column_values_to_be_unique(column=""coverage_type"")","expect_column_values_to_be_in_set(column=""coverage_type"", value_set=['Comprehensive', 'Third Party', 'Collision']),expect_column_values_to_be_unique(column=""coverage_type"")  # To remove duplicates, use this line.",0.8928571428571428,0.888888888888889,0.8928571428571428,85.82201244018101
Confirm that the total `amount` in the `orders` table sums to no less than 10000.,"expect_column_sum_to_be_between(column=""amount"", min_value=10000)","expect_column_sum_to_be_between(column=""amount"", min_value=10000)",1.0,1.0,1.0,100.00000000000004
"For field `age`: Ensure the mean age of patients falls within the range [0, 120]. Validate that the standard deviation does not exceed 25.","expect_column_mean_to_be_between(column=""age"", min_value=0, max_value=120),expect_column_stdev_to_be_between(column=""age"", min_value=0, max_value=25)","expect_column_mean_to_be_between(column=""age"", min_value=0, max_value=120),expect_column_stdev_to_be_between(column=""age"", min_value=0, max_value=25)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `legal_fees` column has a sum not exceeding $100,000 and that the standard deviation is below $15,000.","expect_column_sum_to_be_between(column=""legal_fees"", min_value=0, max_value=100000),expect_column_stdev_to_be_between(column=""legal_fees"", max_value=15000)","expect_column_sum_to_be_between(column=""legal_fees"", min_value=0, max_value=100000),expect_column_stdev_to_be_between(column=""legal_fees"", min_value=0, max_value=15000)",0.9473684210526316,0.9090909090909091,0.9473684210526316,89.3324110527433
For field 'stock_quantity': Ensure the field has integer type values. Validate that all values are greater than or equal to 0.,"expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)","expect_column_values_to_be_of_type(column=""stock_quantity"", type_=""int""),expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)",0.9411764705882353,0.9387755102040816,0.9411764705882353,88.8247621805021
For field 'date_of_birth': Ensure the field matches the type 'date'. Validate that all entries in (date_of_birth) are not in the future. Ensure this field cannot be null.,"expect_column_values_to_be_of_type(column=""date_of_birth"", type_=""date""),expect_column_values_to_be_dateutil_parseable(column=""date_of_birth""),expect_column_values_to_not_be_null(column=""date_of_birth""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""date_of_birth"", type_=""date""),expect_column_values_to_be_between(column=""date_of_birth"", min_value=""1900-01-01"", max_value=""today""),expect_column_values_to_not_be_null(column=""date_of_birth"")",0.8842105263157896,0.860215053763441,0.6947368421052631,77.48056327833288
Confirm that the `date_of_hire` column contains dates that are at least one year before the current date.,"expect_column_values_to_be_between(column=""date_of_hire"", min_value=""2019-10-20"", max_value=None)","expect_column_values_to_be_between(column=""date_of_hire"", min_value=""2023-01-01"", max_value=""2024-01-01"")",0.7368421052631577,0.6666666666666667,0.7368421052631577,68.72798635182612
Ensure that the `case_number` field is required (not null) and contains unique values.,"expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_unique(column=""case_number"")","expect_column_values_to_not_be_null(column=""case_number""),expect_column_values_to_be_unique(column=""case_number"")",1.0,1.0,1.0,100.00000000000004
Ensure the `invoice_date` column values adhere to the format 'YYYY-MM-DD' and are all in the past.,"expect_column_values_to_match_strftime_format(column=""invoice_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""invoice_date"")","expect_column_values_to_match_strftime_format(column=""invoice_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""invoice_date""),expect_column_values_to_be_increasing(column=""invoice_date"")  # Assuming invoice dates are in ascending order.",0.7384615384615384,0.7301587301587301,0.7384615384615384,62.99778225938538
"In the `likes` column: Ensure all values are non-negative integers. Ensure the total likes for each post is within the range of 0 to 100,000.","expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=100000)","expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_sum_to_be_between(column=""likes"", min_value=0, max_value=100000)",0.96,0.9166666666666666,0.96,95.51190479308646
For the `check_in_date` and `check_out_date`: Ensure check-out dates are always later than check-in dates.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""check_out_date"", column_B=""check_in_date"")",1.0,1.0,1.0,100.00000000000004
For field 'crm_leads': Ensure the field matches the type 'numeric'. Validate that the distinct count of (crm_leads) is equal to or greater than 100. Ensure this field exists.,"expect_column_to_exist(column=""crm_leads""),expect_column_values_to_be_of_type(column=""crm_leads"", type_=""numeric""),expect_column_unique_value_count_to_be_between(column=""crm_leads"", min_value=100)","expect_column_to_exist(column=""crm_leads""),expect_column_values_to_be_of_type(column=""crm_leads"", type_=""numeric""),expect_column_distinct_count_to_be_between(column=""crm_leads"", min_value=100, max_value=None)",0.9411764705882354,0.8787878787878787,0.9117647058823529,89.21611767482234
For the 'properties' table: Ensure the 'zip_code' column values match the pattern of a valid US zip code (#####) and that the column exists.,"expect_column_to_exist(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$"")","expect_column_to_exist(column=""zip_code""),expect_column_values_to_match_regex(column=""zip_code"", regex=r""^\d{5}$"")",1.0,1.0,1.0,100.00000000000004
"For field 'room_type': Ensure values in 'room_type' must exist in the set ['Single', 'Double', 'Suite']. Ensure this field exists.","expect_column_to_exist(column=""room_type""),expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])","expect_column_to_exist(column=""room_type""),expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])",1.0,1.0,1.0,100.00000000000004
Verify that the Kullback-Leibler (KL) divergence between the `user_engagement` distributions of two campaigns is below 0.1.,"expect_column_kl_divergence_to_be_less_than(column_a=""user_engagement_campaign_1"", column_b=""user_engagement_campaign_2"", threshold=0.1)","expect_multicolumn_mean_to_be_between(column_list=[""user_engagement""], min_value=0.0, max_value=0.1)",0.3902439024390244,0.15384615384615383,0.3902439024390244,18.51311332278119
Ensure the `forecast_date` column adheres to the datetime format 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Check that the `course_name` field contains only distinct values with a length between 5 and 100 characters.,"expect_column_values_to_be_unique(column=""course_name""),expect_column_value_lengths_to_be_between(column=""course_name"", min_value=5, max_value=100)","expect_column_values_to_be_unique(column=""course_name""),expect_column_value_lengths_to_be_between(column=""course_name"", min_value=5, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Validate that the `pressure` column values fall within the range of [950, 1050] hPa and maintain a decreasing trend.","expect_column_values_to_be_between(column=""pressure"", min_value=950, max_value=1050),expect_column_values_to_be_decreasing(column=""pressure"")","expect_column_values_to_be_between(column=""pressure"", min_value=950, max_value=1050),expect_column_values_to_be_decreasing(column=""pressure"")",1.0,1.0,1.0,100.00000000000004
Ensure the `age` column contains values of type `integer`.,"expect_column_values_to_be_of_type(column=""age"", type_=""integer"")","expect_column_values_to_be_of_type(column=""age"", type_=""int"")",0.9090909090909091,0.9,0.9090909090909091,90.95666970593142
For field `filing_date`: Ensure values adhere to the datetime format '%Y-%m-%d'. Ensure there are no missing values.,"expect_column_to_exist(column=""filing_date""),expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_not_be_null(column=""filing_date"")","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""filing_date"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,69.67313520505057
Validate the JSON structure of the `order_details` column against the defined schema. Ensure that all values are present and correctly formatted.,"expect_column_values_to_match_json_schema(column=""order_details"", schema={""type"": ""object"", ""properties"": {...}})  # Replace {...} with the actual schema definition.","expect_column_values_to_match_json_schema(column=""order_details"", schema={""type"": ""object"", ""properties"": {""product_id"": {""type"": ""string""}, ""quantity"": {""type"": ""number""}, ""price"": {""type"": ""number""}, ""discount"": {""type"": ""number""}, ""total"": {""type"": ""number""}}})  # Replace with actual column name and schema.",0.631578947368421,0.509090909090909,0.631578947368421,34.53127949813162
Validate that the `score` column contains only integer values within the range of `0` to `300`.,"expect_column_values_to_be_of_type(column=""score"", type_=""int""),expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300)","expect_column_values_to_be_between(column=""score"", min_value=0, max_value=300),expect_column_values_to_be_of_type(column=""score"", type_=""int"")",1.0,0.9583333333333334,0.56,98.63293593592441
"For the `account_balance` column: Ensure values are not null and fall within the range of -500 to 1,000,000.","expect_column_values_to_not_be_null(column=""account_balance""),expect_column_values_to_be_between(column=""account_balance"", min_value=-500, max_value=1000000)","expect_column_values_to_not_be_null(column=""account_balance""),expect_column_values_to_be_between(column=""account_balance"", min_value=-500, max_value=1000000)",1.0,1.0,1.0,100.00000000000004
For field 'order_id': Ensure that this field exists and contains unique values. Validate that the total number of rows is equal to the number of unique 'order_id' values.,"expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_table_row_count_to_equal(column=""order_id"")","expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id""),expect_table_row_count_to_equal(column=""order_id"", value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values_to_be_unique_to_be_between(column=""order_id"", min_value=1, max_value=expect_column_values",0.2232142857142857,0.21621621621621626,0.2232142857142857,13.10246269167822
"For the `transaction_amount` column: Ensure all values are non-negative and within the specified range of 0 to 10,000.","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000)","expect_column_values_to_be_between(column=""transaction_amount"", min_value=0, max_value=10000),expect_column_values_to_be_between(column=""transaction_amount"", min_value=None, max_value=None)  # This is a valid expectation, but it's not necessary to specify min_value=None and max_value=None since those values are already defined as None.",0.4166666666666667,0.4,0.4166666666666667,31.5870864574694
"Ensure the `department` column exists and only contains values from the set ['Health', 'Education', 'Transportation'].","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])","expect_column_to_exist(column=""department""),expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `course_code` values are included in the set ['CS101', 'MATH202', 'BIO303'].","expect_column_values_to_be_in_set(column=""course_code"", value_set=['CS101', 'MATH202', 'BIO303'])","expect_column_values_to_be_in_set(column=""course_code"", value_set=['CS101', 'MATH202', 'BIO303'])",1.0,1.0,1.0,100.00000000000004
For field 'creation_date': Ensure this field matches the type 'date'. Ensure the field is required (not null). Ensure all dates are in the past or present.,"expect_column_values_to_be_of_type(column=""creation_date"", type_=""date""),expect_column_values_to_not_be_null(column=""creation_date""),expect_column_values_to_be_between(column=""creation_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""creation_date"", type_=""date""),expect_column_values_to_not_be_null(column=""creation_date""),expect_column_values_to_be_between(column=""creation_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.9285714285714286,0.9268292682926829,0.9285714285714286,91.95873923215356
For field 'lab_results': Ensure this field validates JSON formatting rules. Validate that it contains valid JSON formatted lab results and matches the specified schema.,"expect_column_values_to_be_json_parseable(column=""lab_results""),expect_column_values_to_match_json_schema(column=""lab_results"", schema={""type"": ""object"", ""properties"": {/* specify your schema here */}})","expect_column_values_to_match_json_schema(column=""lab_results"", schema={""type"": ""object"", ""properties"": {""result"": {""type"": ""string""}, ""date"": {""type"": ""string""}, ""time"": {""type"": ""string""}, ""patient_id"": {""type"": ""string""}, ""lab_id"": {""type"": ""string""}, ""specimen_type"": {""type"": ""string""}, ""specimen_id"": {""type"": ""string""}, ""result_type"": {""type"": ""string""}, ""result_value"": {""type"": ""number""}, ""result_unit"": {""type"": ""string""}, ""result_status"": {""type"": ""string""}, ""result_comment"": {""type"": ""string""}, ""result_source"": {""type"": ""string""}, ""result_date"": {""type"": ""string""}, ""result_time"": {""type"": ""string""}, ""result_provider"": {""type"": ""string""}, ""result_provider_id"": {""type"": ""string""}, ""result_provider_type"": {""type"": ""string""}, ""result_provider_specialty"": {""type"": ""string""}, ""result_provider_location"": {""type"": ""string""}, ""result_provider_phone"": {""type"": ""string""}, ""result_provider_email"": {""type"": ""string""}, ""result_provider_website"": {""type"":",0.24817518248175183,0.19259259259259257,0.20437956204379562,9.831055761367804
"For the `usage_pattern` data, check that the distribution conforms to expected patterns using the Chi-Square test with a p-value greater than 0.05.","expect_column_chisquare_test_p_value_to_be_greater_than(column=""usage_pattern"", threshold=0.05)","expect_column_chisquare_test_p_value_to_be_greater_than(column=""usage_pattern"", threshold=0.05)",1.0,1.0,1.0,100.00000000000004
For field 'humidity_percentage': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure values are between 0 and 100.,"expect_column_values_to_not_be_null(column=""humidity_percentage""),expect_column_values_to_be_of_type(column=""humidity_percentage"", type_=""int""),expect_column_values_to_be_between(column=""humidity_percentage"", min_value=0, max_value=100)","expect_column_values_to_not_be_null(column=""humidity_percentage""),expect_column_values_to_be_of_type(column=""humidity_percentage"", type_=""int""),expect_column_values_to_be_between(column=""humidity_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
For field 'phone_number': Ensure this field matches the type 'text'. Ensure the field can accept null values if no phone number is provided.,"expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_be_null(column=""phone_number"")","expect_column_values_to_be_of_type(column=""phone_number"", type_=""text""),expect_column_values_to_be_null(column=""phone_number"")",1.0,1.0,1.0,100.00000000000004
Validate that the `expiration_date` field is not null and is always later than the corresponding `manufacture_date`.,"expect_column_values_to_not_be_null(column=""expiration_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""expiration_date"", column_B=""manufacture_date"")","expect_column_values_to_not_be_null(column=""expiration_date""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""expiration_date"", column_B=""manufacture_date"")",1.0,1.0,1.0,100.00000000000004
"For the `judgment_date`, ensure it is greater than the `hearing_date` for each case.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""judgment_date"", column_B=""hearing_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""judgment_date"", column_B=""hearing_date"")",1.0,1.0,1.0,100.00000000000004
For field 'verification_status': Ensure this field exists. Ensure values in 'verification_status' must not exist in the set of invalid statuses (invalid_status_list).,"expect_column_to_exist(column=""verification_status""),expect_column_values_to_not_be_in_set(column=""verification_status"", value_set=invalid_status_list)","expect_column_to_exist(column=""verification_status""),expect_column_values_to_not_be_in_set(column=""verification_status"", value_set=invalid_status_list)",1.0,1.0,1.0,100.00000000000004
"For the `insurance_policy_number`, ensure it matches the regex pattern `^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$` and is unique.","expect_column_values_to_match_regex(column=""insurance_policy_number"", regex=r""^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$""),expect_column_values_to_be_unique(column=""insurance_policy_number"")","expect_column_values_to_match_regex(column=""insurance_policy_number"", regex=r""^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$""),expect_column_values_to_be_unique(column=""insurance_policy_number"")  # This expectation will fail if there are duplicate values in the column.",0.8378378378378378,0.8333333333333333,0.8378378378378378,83.99713809243181
"Check that the `research_topic` field only contains values from the set `['health', 'technology', 'environment', 'education']`.","expect_column_values_to_be_in_set(column=""research_topic"", value_set=['health', 'technology', 'environment', 'education'])","expect_column_values_to_be_in_set(column=""research_topic"", value_set=['health', 'technology', 'environment', 'education'])",1.0,1.0,1.0,100.00000000000004
"For the `article_title` column, ensure that string lengths are between 10 and 150 characters, and entries do not contain any special characters.","expect_column_value_lengths_to_be_between(column=""article_title"", min_value=10, max_value=150),expect_column_values_to_not_match_regex(column=""article_title"", regex=r""[!@#$%^&*(),.?\"":{}|<>]"")","expect_column_value_lengths_to_be_between(column=""article_title"", min_value=10, max_value=150),expect_column_values_to_not_match_regex(column=""article_title"", regex=r""[^\w\s]"")  # Remove special characters, punctuation, and whitespace.",0.8750000000000001,0.870967741935484,0.8750000000000001,74.60319399182679
"Ensure the `enrollment_status` column contains only values from the set `['Active', 'Inactive', 'Completed']`.","expect_column_values_to_be_in_set(column=""enrollment_status"", value_set=['Active', 'Inactive', 'Completed'])","expect_column_values_to_be_in_set(column=""enrollment_status"", value_set=['Active', 'Inactive', 'Completed'])",1.0,1.0,1.0,100.00000000000004
Check that the `release_date` timestamps follow the 'YYYY-MM-DD' format and are not null.,"expect_column_to_exist(column=""release_date""),expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")","expect_column_values_to_match_strftime_format(column=""release_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""release_date"")  # Note: This assumes that the column is nullable. If it is not, you may need to modify the expectation accordingly.",0.7272727272727274,0.64,0.6493506493506493,70.19757574441796
Verify that the `phone_number` column conforms to the format of '(XXX) XXX-XXXX' and does not contain null values.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_not_be_null(column=""phone_number"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^(\\(\\d{3}\\) \\d{3}-\\d{4}\\)\\d*$""),expect_column_values_to_not_be_null(column=""phone_number"")",0.9818181818181818,0.9433962264150944,0.9818181818181818,76.55237193688949
Check that the combined values of `quantity_sold` and `quantity_in_stock` equal the total `inventory_count` for each record.,"expect_multicolumn_sum_to_equal(column_list=[""quantity_sold"", ""quantity_in_stock""], target_column=""inventory_count"")","expect_multicolumn_sum_to_equal(column_list=[""quantity_sold"", ""quantity_in_stock""], target_column=""inventory_count"")",1.0,1.0,1.0,100.00000000000004
"For field 'parent_category': Ensure the field matches the type 'text'. Ensure values in (parent_category) must exist in categories (categories = {a,b,c,d,e}). Ensure this field exists.","expect_column_to_exist(column=""parent_category""),expect_column_values_to_be_of_type(column=""parent_category"", type_=""text""),expect_column_values_to_be_in_set(column=""parent_category"", value_set={a,b,c,d,e})","expect_column_to_exist(column=""parent_category""),expect_column_values_to_be_of_type(column=""parent_category"", type_=""text""),expect_column_values_to_be_in_set(column=""parent_category"", value_set=categories)",0.911764705882353,0.909090909090909,0.911764705882353,85.42542249215671
Ensure the `threat_description` column does not contain any null values and all entries are of type 'text'.,"expect_column_values_to_not_be_null(column=""threat_description""),expect_column_values_to_be_of_type(column=""threat_description"", type_=""text"")","expect_column_values_to_not_be_null(column=""threat_description""),expect_column_values_to_be_of_type(column=""threat_description"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
For the `transaction_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.,"expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""transaction_id""),expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_be_of_type(column=""transaction_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Ensure the `post_date` column adheres to the format 'YYYY-MM-DD HH:MM:SS' and can be parsed accordingly.,"expect_column_values_to_match_strftime_format(column=""post_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""post_date"")","expect_column_values_to_match_strftime_format(column=""post_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""post_date"")  # Note: This is a new expectation added by your team. It ensures that the column values can be parsed as dates using the dateutil module.",0.6913580246913581,0.6835443037974684,0.6913580246913581,68.97852369752617
"For field 'shipping_info': Ensure the column contains valid JSON objects, with required fields 'address', 'city', and 'postal_code' as per the specified JSON schema.","expect_column_values_to_match_json_schema(column=""shipping_info"", schema={""type"": ""object"", ""properties"": {""address"": {""type"": ""string""}, ""city"": {""type"": ""string""}, ""postal_code"": {""type"": ""string""}}, ""required"": [""address"", ""city"", ""postal_code""]})","expect_column_values_to_match_json_schema(column=""shipping_info"", schema={""type"": ""object"", ""properties"": {""address"": {""type"": ""string""}, ""city"": {""type"": ""string""}, ""postal_code"": {""type"": ""string""}}}, ""required"": [""address"", ""city"", ""postal_code""]})",1.0,1.0,1.0,98.78765474230745
"For the `last_contacted` column, ensure all datetime entries are in the format '%Y-%m-%d %H:%M:%S'.","expect_column_values_to_match_strftime_format(column=""last_contacted"", strftime_format=""%Y-%m-%d %H:%M:%S"")","expect_column_values_to_match_strftime_format(column=""last_contacted"", strftime_format=""%Y-%m-%d %H:%M:%S"")",1.0,1.0,1.0,100.00000000000004
Verify that 'filing_date' adheres to the format '%Y-%m-%d'. Ensure all values are valid datetime entries.,"expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")","expect_column_values_to_match_strftime_format(column=""filing_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""filing_date"")  # Note: This is a new expectation added in today_date, please update as needed.",0.7812500000000001,0.7741935483870968,0.7812500000000001,66.74683252673024
Ensure the `owner_email` column matches the regex pattern for valid email addresses and does not allow duplicates.,"expect_column_values_to_match_regex(column=""owner_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_be_unique(column=""owner_email"")","expect_column_values_to_match_regex(column=""owner_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""owner_email"")",0.9787234042553191,0.9333333333333332,0.9787234042553191,92.37482878585315
For the `listing_date` field: Verify that all entries are valid dates in the format 'YYYY-MM-DD'.,"expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""listing_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `phone_number` column contains valid entries that match the regex pattern `^\+?[1-9]\d{1,14}$`.","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+?[1-9]\d{1,14}$"")",1.0,1.0,1.0,100.00000000000004
"For the `review_score` column, confirm that all values are between 1 and 5. Ensure that no entries in the column match the string 'N/A' or any null values.","expect_column_values_to_be_between(column=""review_score"", min_value=1, max_value=5),expect_column_values_to_not_match_regex(column=""review_score"", regex=r""N/A""),expect_column_values_to_not_be_null(column=""review_score"")","expect_column_values_to_be_between(column=""review_score"", min_value=1, max_value=5),expect_column_values_to_not_match_regex(column=""review_score"", regex=r""^N/A$""),expect_column_values_to_not_be_null(column=""review_score"")",1.0,1.0,1.0,94.21541043431594
"Ensure that the `affected_systems` column contains valid JSON arrays that can include strings representing system names, with no null values allowed.","expect_column_values_to_be_json_parseable(column=""affected_systems""),expect_column_values_to_not_be_null(column=""affected_systems"")","expect_column_values_to_not_be_null(column=""affected_systems""),expect_column_values_to_be_json_parseable(column=""affected_systems""),expect_column_values_to_match_json_schema(column=""affected_systems"", schema={""type"": ""array"", ""items"": {""type"": ""string""}})  # Replace with actual JSON schema for system names.",0.625,0.6129032258064516,0.53125,42.427525843745826
Ensure that the `service_request_id` is unique across all records to maintain data integrity.,"expect_column_values_to_be_unique(column=""service_request_id"")","expect_column_values_to_be_unique(column=""service_request_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `incident_id` column is unique and does not contain any missing values in both domains.,"expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")","expect_column_values_to_be_unique(column=""incident_id""),expect_column_values_to_not_be_null(column=""incident_id"")  # Note: This is a combination of two expectations.",0.8260869565217391,0.8181818181818181,0.8260869565217391,79.03684782054019
For field 'rating': Ensure all values are between 0 and 10. Confirm that the field exists in the 'reviews' table.,"expect_column_to_exist(column=""rating""),expect_column_values_to_be_between(column=""rating"", min_value=0, max_value=10)","expect_column_to_exist(column=""rating""),expect_column_values_to_be_between(column=""rating"", min_value=0, max_value=10)",1.0,1.0,1.0,100.00000000000004
"For the `username` field: ensure that it matches the pattern `^[a-zA-Z0-9_]{3,15}$` to confirm valid usernames.","expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")","expect_column_values_to_match_regex(column=""username"", regex=r""^[a-zA-Z0-9_]{3,15}$"")",1.0,1.0,1.0,100.00000000000004
"For the `complaint_type` column, ensure it is one of the predefined categories listed in `complaint_categories`.","expect_column_values_to_be_in_set(column=""complaint_type"", value_set=complaint_categories)","expect_column_values_to_be_in_set(column=""complaint_type"", value_set=complaint_categories)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `weight` column values are within the range of 30 to 300 kg, ensuring no negative values are present.","expect_column_values_to_be_between(column=""weight"", min_value=30, max_value=300),expect_column_values_to_not_be_in_set(column=""weight"", value_set=[-float('inf')])","expect_column_values_to_be_between(column=""weight"", min_value=30, max_value=300),expect_column_values_to_not_be_null(column=""weight"")  # To ensure that the column values are not null, this expectation can be added separately.",0.6969696969696969,0.625,0.6969696969696969,68.76113954487862
Ensure the `subscriber_id` column contains unique values that match the regex pattern `^[0-9A-Z]{10}$`.,"expect_column_values_to_be_unique(column=""subscriber_id""),expect_column_values_to_match_regex(column=""subscriber_id"", regex=r""^[0-9A-Z]{10}$"")","expect_column_values_to_be_unique(column=""subscriber_id""),expect_column_values_to_match_regex(column=""subscriber_id"", regex=r""^[0-9A-Z]{10}$"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `submission_date` in the Legal Case Management Systems is earlier than the `hearing_date` to maintain chronological order.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""submission_date"", column_B=""hearing_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""submission_date"", column_B=""hearing_date"")",1.0,1.0,1.0,100.00000000000004
For the `rating` field: Ensure that the minimum rating is `0` and the maximum does not exceed `10`. Verify the mean rating falls between `5 and 8`.,"expect_column_min_to_be_between(column=""rating"", min_value=0),expect_column_max_to_be_between(column=""rating"", max_value=10),expect_column_mean_to_be_between(column=""rating"", min_value=5, max_value=8)","expect_column_min_to_be_between(column=""rating"", min_value=0),expect_column_max_to_be_between(column=""rating"", max_value=10),expect_column_mean_to_be_between(column=""rating"", min_value=5, max_value=8)",1.0,1.0,1.0,100.00000000000004
"Ensure the `likes` column values are non-negative integers, and that they are sorted in descending order.","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=None),expect_column_values_to_be_decreasing(column=""likes"")","expect_column_values_to_be_between(column=""likes"", min_value=0),expect_column_values_to_be_of_type(column=""likes"", type_=""int""),expect_column_values_to_be_increasing(column=""likes"")  # This expectation is not supported by the current version of Cutting Knowledge Date: December 2023
Today Date: 26 July 2024",0.5277777777777778,0.42857142857142855,0.5277777777777778,41.083116863427335
For field 'user_id': Ensure the field is required (not null). Ensure there are no duplicate values in this column.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `status` field has no missing values and only contains values from the list `['Open', 'Closed', 'Pending']`.","expect_column_values_to_not_be_null(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])","expect_column_values_to_not_be_null(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['Open', 'Closed', 'Pending'])",1.0,1.0,1.0,100.00000000000004
Validate that the `email` column contains valid email formats and has no duplicates.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[^@]+@[^@]+\.[^@]+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")  # Note: This assumes that the email column is unique. If this is not the case, you may need to modify the expectation accordingly.",0.5806451612903226,0.5333333333333333,0.5806451612903226,52.190833906554
For field `service_request_date`: Validate that all entries are in the 'YYYY-MM-DD' format and no entries are older than five years.,"expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""service_request_date"")  # Ensure the dates are parseable,# Additional validation for no entries older than five years would require a custom implementation or additional context.","expect_column_values_to_match_strftime_format(column=""service_request_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""service_request_date"", min_value=""2023-01-01"", max_value=""2023-01-01"")  # Replace with actual min/max values based on your requirements.",0.5473684210526316,0.4946236559139785,0.5473684210526316,59.540165499280086
For the `game_id` field: Ensure the field is required (not null). Ensure each value is unique and matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
checks for line_items values in (order_id) must exist in orders (order_id),"expect_column_pair_values_to_be_in_set(column_A=""line_items.order_id"", column_B=""orders.order_id"", value_set=orders.order_id)","expect_column_values_to_be_in_set(column=""line_items"", value_set=orders.order_id)",0.7692307692307693,0.5945945945945946,0.7692307692307693,46.396480501713015
For the `service_request` column: Ensure that values match at least one pattern from the regular expression list defined for service types.,"expect_column_values_to_match_regex_list(column=""service_request"", regex_list=[])  # Please replace the empty list with the actual regex patterns for service types.","expect_column_values_to_match_regex_list(column=""service_request"", regex_list=[""^service_type_1$"", ""^service_type_2$""])",0.6511627906976745,0.5853658536585366,0.6511627906976745,56.79782524133347
For field 'square_footage': Ensure the field matches the type 'integer'. Ensure values in (square_footage) are greater than zero. Ensure this field exists.,"expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_of_type(column=""square_footage"", type_=""int""),expect_column_values_to_be_greater_than(column=""square_footage"", value=0)","expect_column_to_exist(column=""square_footage""),expect_column_values_to_be_of_type(column=""square_footage"", type_=""int""),expect_column_values_to_be_between(column=""square_footage"", min_value=1, max_value=None)",0.8615384615384616,0.7936507936507938,0.8615384615384616,82.77173931143666
For the `shipment_id` field: Ensure the field contains only unique values and is of type 'integer'. Ensure there are no missing values.,"expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_be_of_type(column=""shipment_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""shipment_id"")","expect_column_values_to_be_unique(column=""shipment_id""),expect_column_values_to_be_of_type(column=""shipment_id"", type_=""int""),expect_column_values_to_not_be_null(column=""shipment_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.46458712936789
Confirm that the `sensor_reading` column contains only numeric values and does not have any missing entries.,"expect_column_values_to_not_be_null(column=""sensor_reading""),expect_column_values_to_be_of_type(column=""sensor_reading"", type_=""float"")  # or type_=""int"" depending on the expected numeric type","expect_column_values_to_be_of_type(column=""sensor_reading"", type_=""float""),expect_column_values_to_not_be_null(column=""sensor_reading"")",0.8301886792452831,0.7843137254901961,0.6037735849056604,76.00389545477267
"Ensure the `tariff_type` column values are within the set `['Residential', 'Commercial', 'Industrial']`.","expect_column_values_to_be_in_set(column=""tariff_type"", value_set=['Residential', 'Commercial', 'Industrial'])","expect_column_values_to_be_in_set(column=""tariff_type"", value_set=['Residential', 'Commercial', 'Industrial'])",1.0,1.0,1.0,100.00000000000004
"For field 'file_size': In the file dataset, ensure this field exists. Validate that file sizes are numeric and fall within the range of 1MB to 5GB.","expect_file_to_exist(),expect_file_size_to_be_between(min_value=1 * 1024 * 1024, max_value=5 * 1024 * 1024 * 1024)","expect_column_to_exist(column=""file_size""),expect_column_values_to_be_of_type(column=""file_size"", type_=""numeric""),expect_column_values_to_be_between(column=""file_size"", min_value=1, max_value=5)  # Replace 1MB and 5GB with actual values.",0.5161290322580646,0.26666666666666666,0.4838709677419355,24.168332022627634
For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.,"expect_column_to_exist(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""text"")","expect_column_to_exist(column=""customer_id""),expect_column_values_to_not_be_null(column=""customer_id""),expect_column_values_to_be_of_type(column=""customer_id"", type_=""text"")",1.0,1.0,1.0,100.00000000000004
Check that the `wind_speed` column has values arranged in increasing order across the dataset.,"expect_column_values_to_be_increasing(column=""wind_speed"")","expect_column_values_to_be_increasing(column=""wind_speed"")",1.0,1.0,1.0,100.00000000000004
"Check that the `policy_type` column contains only values from the set `['Auto', 'Home', 'Health', 'Life']`.","expect_column_values_to_be_in_set(column=""policy_type"", value_set=['Auto', 'Home', 'Health', 'Life'])","expect_column_values_to_be_in_set(column=""policy_type"", value_set=['Auto', 'Home', 'Health', 'Life'])",1.0,1.0,1.0,100.00000000000004
Ensure the `patient_age` column values are integers between 0 and 120.,"expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)","expect_column_values_to_be_of_type(column=""patient_age"", type_=""int""),expect_column_values_to_be_between(column=""patient_age"", min_value=0, max_value=120)",0.7142857142857143,0.7000000000000001,0.7142857142857143,50.38793199614183
"Ensure the values in the `room_type` column are within the set `['Single', 'Double', 'Suite']`.","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite'])",1.0,1.0,1.0,100.00000000000004
For field 'post_id': Ensure the field matches the type 'integer'. Ensure values in (post_id) are unique and fall within the range of 1 to 100000. Ensure this field exists.,"expect_column_to_exist(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""int""),expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_be_between(column=""post_id"", min_value=1, max_value=100000)","expect_column_to_exist(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""int""),expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_be_between(column=""post_id"", min_value=1, max_value=100000)  # Replace 100000 with your desired maximum value.",0.924731182795699,0.923076923076923,0.924731182795699,91.62695984522252
Ensure the `researcher_id` is unique across records and that it adheres to the format 'R-XXXX'.,"expect_column_values_to_be_unique(column=""researcher_id""),expect_column_values_to_match_regex(column=""researcher_id"", regex=r""^R-\d{4}$"")","expect_column_values_to_be_unique(column=""researcher_id""),expect_column_values_to_match_regex(column=""researcher_id"", regex=r""^R-\d{4}$"")",1.0,1.0,1.0,100.00000000000004
For field 'plan_start_date': Ensure the field matches the format 'YYYY-MM-DD'. Ensure this field is required (not null). Ensure this field exists.,"expect_column_to_exist(column=""plan_start_date""),expect_column_values_to_not_be_null(column=""plan_start_date""),expect_column_values_to_match_strftime_format(column=""plan_start_date"", strftime_format=""%Y-%m-%d"")","expect_column_to_exist(column=""plan_start_date""),expect_column_values_to_match_strftime_format(column=""plan_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""plan_start_date"")",1.0,0.9705882352941176,0.6857142857142857,99.67793462587795
"For the `genre` column: Ensure values match at least one pattern from the list `['Action', 'Adventure', 'RPG', 'Simulation']`.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG', 'Simulation'])","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG', 'Simulation'])",1.0,1.0,1.0,100.00000000000004
Check that the sum of `temperature_reading` and `humidity_reading` does not exceed the `environmental_threshold` for each entry in the `environment_data` table.,"expect_column_pair_values_to_be_equal(column_A=""temperature_reading"", column_B=""environmental_threshold""),expect_column_pair_values_to_be_equal(column_A=""humidity_reading"", column_B=""environmental_threshold""),expect_multicolumn_sum_to_equal(column_list=[""temperature_reading"", ""humidity_reading""], sum_value=""environmental_threshold"")","expect_column_pair_values_to_be_between(column_A=""temperature_reading"", column_B=""humidity_reading"", min_value=None, max_value=environmental_threshold)",0.537313432835821,0.4000000000000001,0.5074626865671642,20.453725484767304
For field 'device_id': Ensure the field matches the type 'text'. Ensure values in (device_id) are unique across records. Ensure this field cannot be null.,"expect_column_values_to_be_of_type(column=""device_id"", type_=""text""),expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_values_to_be_of_type(column=""device_id"", type_=""text""),expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
For the `property_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.,"expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""property_id""),expect_column_values_to_be_unique(column=""property_id""),expect_column_values_to_be_of_type(column=""property_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
For field 'citizen_id': Ensure the field contains only unique values. Ensure this field is not null and matches the type 'integer'.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""int"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_of_type(column=""citizen_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `created_at` column contains datetime strings matching the format `%Y-%m-%d`.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
"For the `category` field: Ensure the values match the predefined set `['Electronics', 'Clothing', 'Home Goods']`. No other values should exist.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods']),expect_column_values_to_not_be_in_set(column=""category"", value_set=[value for value in all_values if value not in ['Electronics', 'Clothing', 'Home Goods']])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods'])",0.5357142857142857,0.5185185185185185,0.5357142857142857,22.653666181295545
Ensure the `last_visit_date` values are in the past and match the format '%Y-%m-%d'.,"expect_column_values_to_match_strftime_format(column=""last_visit_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_in_set(column=""last_visit_date"", value_set=[date for date in pd.date_range(start='1900-01-01', end=pd.Timestamp.now().date())])","expect_column_values_to_be_dateutil_parseable(column=""last_visit_date""),expect_column_values_to_be_between(column=""last_visit_date"", min_value=""1900-01-01"", max_value=""today"")",0.5675675675675675,0.41666666666666663,0.5675675675675675,36.27722494636162
For field 'notification_json': Ensure the field exists. Validate that (notification_json) conforms to the specified JSON schema for alert notifications.,"expect_column_to_exist(column=""notification_json""),expect_column_values_to_match_json_schema(column=""notification_json"", json_schema=""your_json_schema_here"")","expect_column_to_exist(column=""notification_json""),expect_column_values_to_match_json_schema(column=""notification_json"", schema={""type"": ""object"", ""properties"": {""alert"": {""type"": ""object"", ""properties"": {""title"": {""type"": ""string""}, ""message"": {""type"": ""string""}, ""severity"": {""type"": ""string""}, ""timestamp"": {""type"": ""string""}, ""details"": {""type"": ""object"", ""properties"": {""type"": ""string"", ""value"": {""type"": ""string""}}}}}}}}})",0.5217391304347826,0.5074626865671642,0.5217391304347826,22.15578128628189
Verify that the `likes` column values are greater than or equal to `0`.,"expect_column_values_to_be_greater_than(column=""likes"", value=0)","expect_column_values_to_be_between(column=""likes"", min_value=0)",0.8181818181818182,0.6,0.8181818181818182,72.71042103011655
Ensure that the `work_hours` column has an average value between 35 and 45 hours per week.,"expect_column_mean_to_be_between(column=""work_hours"", min_value=35, max_value=45)","expect_column_mean_to_be_between(column=""work_hours"", min_value=35, max_value=45)",1.0,1.0,1.0,100.00000000000004
"Ensure the `dataset_id` column contains unique identifiers, free from any SQL-like patterns such as '%DROP%' or '%SELECT%'.","expect_column_values_to_be_unique(column=""dataset_id""),expect_column_values_to_not_match_regex(column=""dataset_id"", regex=r"".*DROP.*|.*SELECT.*"")","expect_column_values_to_be_unique(column=""dataset_id""),expect_column_values_to_not_match_regex(column=""dataset_id"", regex=r""^(%DROP%|%SELECT%)$"")",1.0,1.0,1.0,80.18905031841844
Verify that the `rating` column in Education systems contains values that are equal to or exceed the average rating found in the Real Estate Management dataset.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""rating"", column_B=""average_rating"")","expect_column_mean_to_be_between(column=""rating"", min_value=3.0)",0.4827586206896552,0.14814814814814814,0.41379310344827586,24.2669390020169
"Ensure the `alert_type` column contains only distinct values from the set `['Malware', 'Phishing', 'Intrusion']`.","expect_column_values_to_be_in_set(column=""alert_type"", value_set=['Malware', 'Phishing', 'Intrusion'])","expect_column_values_to_be_in_set(column=""alert_type"", value_set=['Malware', 'Phishing', 'Intrusion'])",1.0,1.0,1.0,100.00000000000004
Confirm that the `student_id` column contains unique values and matches the regex pattern `^S[0-9]{5}$`.,"expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^S[0-9]{5}$"")","expect_column_values_to_be_unique(column=""student_id""),expect_column_values_to_match_regex(column=""student_id"", regex=r""^S[0-9]{5}$"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `department` column contains only distinct values matching `['Sales', 'Finance', 'HR', 'IT']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Finance', 'HR', 'IT'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Sales', 'Finance', 'HR', 'IT'])",1.0,1.0,1.0,100.00000000000004
"For field 'guest_details': Ensure this field is a valid JSON object. Ensure it contains the keys 'name', 'contact', and 'special_requests' with appropriate types.","expect_column_values_to_be_json_parseable(column=""guest_details""),expect_column_values_to_match_json_schema(column=""guest_details"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""contact"": {""type"": ""string""}, ""special_requests"": {""type"": ""string""}}}})","expect_column_values_to_be_json_parseable(column=""guest_details""),expect_column_values_to_match_json_schema(column=""guest_details"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""contact"": {""type"": ""string""}, ""special_requests"": {""type"": ""object"", ""properties"": {""type"": ""string""}, ""required"": [""type""]}}})  # Replace type with actual type of special_requests.",0.8395061728395062,0.8354430379746834,0.8395061728395062,74.71851118544257
"Ensure the `loan_amount` is a positive value and does not exceed the maximum limit of 500,000.","expect_column_values_to_be_between(column=""loan_amount"", min_value=0, max_value=500000)","expect_column_values_to_be_between(column=""loan_amount"", min_value=0, max_value=500000)",1.0,1.0,1.0,100.00000000000004
For field 'signal_strength': Validate that all values in 'signal_strength' are integers within the range of -100 to 0. Ensure this field exists.,"expect_column_to_exist(column=""signal_strength""),expect_column_values_to_be_between(column=""signal_strength"", min_value=-100, max_value=0),expect_column_values_to_be_of_type(column=""signal_strength"", type_=""int"")","expect_column_to_exist(column=""signal_strength""),expect_column_values_to_be_of_type(column=""signal_strength"", type_=""int""),expect_column_values_to_be_between(column=""signal_strength"", min_value=-100, max_value=0)",1.0,0.9696969696969697,0.6764705882352942,99.01141077297541
Confirm the `inventory_count` follows a uniform distribution with a Kullback-Leibler divergence below 0.05.,"expect_column_kl_divergence_to_be_less_than(column=""inventory_count"", threshold=0.05)","expect_column_divergence_to_be_between(column=""inventory_count"", min_value=0, max_value=None, threshold=0.05)",0.6875000000000001,0.4666666666666667,0.6875000000000001,53.52381288393701
For field 'vote_timestamp': Ensure this field exists and follows the format 'YYYY-MM-DD HH:MM:SS'. Validate that no duplicate timestamps exist in the dataset.,"expect_column_to_exist(column=""vote_timestamp""),expect_column_values_to_match_strftime_format(column=""vote_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_unique(column=""vote_timestamp"")","expect_column_to_exist(column=""vote_timestamp""),expect_column_values_to_match_strftime_format(column=""vote_timestamp"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_unique(column=""vote_timestamp"")  # Note: This expectation may not be applicable depending on the dataset.  # Please refer to the actual dataset to determine if this expectation is valid.",0.7391304347826086,0.7333333333333334,0.7391304347826086,73.26853296904491
Ensure that the sum of values in the `results_score` column is equal to the expected total score of 500.,"expect_column_sum_to_be_between(column=""results_score"", min_value=500, max_value=500)","expect_column_sum_to_equal(column=""results_score"", value=500)",0.7200000000000001,0.5217391304347826,0.7200000000000001,50.08158908002212
Check that the `timestamp` column contains valid timestamps that are not in the future.,"expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=""1970-01-01T00:00:00Z"", max_value=""now"")","expect_column_values_to_be_dateutil_parseable(column=""timestamp""),expect_column_values_to_be_between(column=""timestamp"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.7586206896551724,0.6785714285714285,0.7586206896551724,76.46862185191546
Ensure the `game_id` column is unique and does not contain any null values.,"expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id"")","expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_not_be_null(column=""game_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the `attendance_percentage` values are in the range of 0 to 100.,"expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""attendance_percentage"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Confirm that the `grade` column contains values between 0 and 100, with a standard deviation not exceeding 15.","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""grade"", min_value=0, max_value=15)","expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=""grade"", min_value=0, max_value=15)",1.0,1.0,1.0,100.00000000000004
"Verify that the `status` column only contains values from the set `['In Transit', 'Delivered', 'Pending']`. Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['In Transit', 'Delivered', 'Pending'])","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set=['In Transit', 'Delivered', 'Pending'])",1.0,1.0,1.0,100.00000000000004
For field 'meter_id': Ensure the field matches the type 'text'. Validate that all meter IDs are alphanumeric and do not exceed 10 characters in length.,"expect_column_values_to_be_of_type(column=""meter_id"", type_=""text""),expect_column_value_lengths_to_be_between(column=""meter_id"", min_value=1, max_value=10),expect_column_values_to_match_regex(column=""meter_id"", regex=r""^[a-zA-Z0-9]+$"")","expect_column_values_to_be_of_type(column=""meter_id"", type_=""text""),expect_column_value_lengths_to_be_between(column=""meter_id"", min_value=0, max_value=10),expect_column_values_to_match_regex(column=""meter_id"", regex=r""^[a-zA-Z0-9]{1,10}$"")  # Regular expression to match alphanumeric characters and length between 1 and 10 characters.",0.8514851485148515,0.8080808080808081,0.8316831683168318,80.94401030241589
For the `order_total`: Ensure the sum of `item_price` and `shipping_fee` equals `order_total`. Validate that the `order_id` is unique across records.,"expect_multicolumn_sum_to_equal(column_list=[""item_price"", ""shipping_fee""], sum_column=""order_total""),expect_column_values_to_be_unique(column=""order_id"")","expect_multicolumn_sum_to_equal(column_list=[""item_price"", ""shipping_fee""], target_column=""order_total""),expect_column_values_to_be_unique(column=""order_id"")  # Assuming order_id is a unique column.",0.8363636363636364,0.7924528301886793,0.8363636363636364,81.42524904972939
"Ensure that the `suspicion_level` column contains values only from the set ['Low', 'Medium', 'High'] and that 'High' level alerts have a valid `alert_timestamp`.","expect_column_values_to_be_in_set(column=""suspicion_level"", value_set=[""Low"", ""Medium"", ""High""]),expect_column_values_to_not_be_null(column=""alert_timestamp"")  # This assumes that valid alerts must have a timestamp. ","expect_column_values_to_be_in_set(column=""suspicion_level"", value_set=['Low', 'Medium', 'High']),expect_column_values_to_be_dateutil_parseable(column=""alert_timestamp"")  # This expectation is not yet implemented, but it should be added to check if the alert timestamp is in a valid date format.",0.7073170731707317,0.5249999999999999,0.6341463414634146,57.98087185785899
Validate that the `affected_systems` column contains valid JSON arrays with at least one entry.,"expect_column_values_to_be_json_parseable(column=""affected_systems""),expect_column_values_to_not_be_null(column=""affected_systems""),expect_column_values_to_match_json_schema(column=""affected_systems"", schema={""type"": ""array"", ""minItems"": 1})","expect_column_values_to_be_json_parseable(column=""affected_systems""),expect_column_value_lengths_to_be_between(column=""affected_systems"", min_value=1, max_value=None)",0.6557377049180327,0.4745762711864407,0.6557377049180327,40.223817672780996
Confirm that the `customer_id` column contains only distinct values matching the predefined list of valid customer IDs.,"expect_column_values_to_be_in_set(column=""customer_id"", value_set=valid_customer_id_list),expect_column_values_to_be_unique(column=""customer_id"")","expect_column_values_to_be_in_set(column=""customer_id"", value_set=valid_customer_ids)",0.7000000000000001,0.6842105263157894,0.7000000000000001,45.91065425229585
Ensure that the `p-value` column contains float values and does not exceed 1.0 or go below 0.0.,"expect_column_values_to_be_of_type(column=""p-value"", type_=""float""),expect_column_values_to_be_between(column=""p-value"", min_value=0.0, max_value=1.0)","expect_column_values_to_be_of_type(column=""p_value"", type_=""float""),expect_column_values_to_be_between(column=""p_value"", min_value=0.0, max_value=1.0)",1.0,1.0,1.0,84.95750370068676
Ensure the `engagement_rate` column has a standard deviation of less than 0.15 across all entries.,"expect_column_stdev_to_be_between(column=""engagement_rate"", min_value=0, max_value=0.15)","expect_column_stdev_to_be_between(column=""engagement_rate"", min_value=0.15, max_value=None)",0.9375,0.8666666666666667,0.875,89.00580808742983
"For the `content_rating`: Ensure the field contains only distinct values matching `['G', 'PG', 'PG-13', 'R']`. Ensure this field cannot be null.","expect_column_values_to_not_be_null(column=""content_rating""),expect_column_distinct_values_to_equal_set(column=""content_rating"", value_set=['G', 'PG', 'PG-13', 'R'])","expect_column_values_to_be_in_set(column=""content_rating"", value_set=['G', 'PG', 'PG-13', 'R']),expect_column_values_to_not_be_null(column=""content_rating"")",0.9259259259259259,0.8076923076923077,0.5925925925925926,89.72498427820538
"For the `salary` column, validate that all entries are numeric and greater than or equal to the minimum wage set at $15/hour.","expect_column_values_to_be_of_type(column=""salary"", type_=""numeric""),expect_column_values_to_be_greater_than(column=""salary"", value=15)","expect_column_values_to_be_of_type(column=""salary"", type_=""float""),expect_column_values_to_be_between(column=""salary"", min_value=15)",0.8636363636363636,0.7142857142857143,0.8636363636363636,83.14151063445085
"For field 'contact_number': Ensure this field exists. Ensure values in 'contact_number' must match the regex pattern '^\\+?[0-9]{10,15}$'.","expect_column_to_exist(column=""contact_number""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\+?[0-9]{10,15}$"")","expect_column_to_exist(column=""contact_number""),expect_column_values_to_match_regex(column=""contact_number"", regex=r""^\\+?[0-9]{10,15}$"")",1.0,1.0,1.0,96.80423506117728
For field 'lease_start_date': Ensure the field matches the type 'datetime'. Validate that the lease start date must be in the format 'YYYY-MM-DD' and cannot be in the past. Ensure this field exists.,"expect_column_to_exist(column=""lease_start_date""),expect_column_values_to_be_of_type(column=""lease_start_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""lease_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""lease_start_date"")","expect_column_to_exist(column=""lease_start_date""),expect_column_values_to_be_of_type(column=""lease_start_date"", type_=""datetime""),expect_column_values_to_match_strftime_format(column=""lease_start_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""lease_start_date"")  # This assumes that the lease start date is always increasing.",0.9038461538461539,0.9019607843137255,0.9038461538461539,90.12257453243525
"For column 'claim_status': Validate that values must match one of the specified statuses (e.g., 'Pending', 'Approved', 'Denied'). Ensure this column exists.","expect_column_to_exist(column=""claim_status""),expect_column_values_to_be_in_set(column=""claim_status"", value_set=[""Pending"", ""Approved"", ""Denied""])","expect_column_to_exist(column=""claim_status""),expect_column_values_to_be_in_set(column=""claim_status"", value_set=['Pending', 'Approved', 'Denied'])",1.0,1.0,1.0,78.45017601424416
Ensure the `user_id` column exists and matches a specified list of valid user identifiers. Confirm that the `incident_id` column contains unique values for all records.,"expect_column_to_exist(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=valid_user_identifiers),expect_column_values_to_be_unique(column=""incident_id"")","expect_column_to_exist(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=valid_user_ids),expect_column_values_to_be_unique(column=""incident_id"")",0.967741935483871,0.9333333333333333,0.967741935483871,96.30786123683066
"Ensure the `premium_amount` column contains values within the range of $100 to $10,000 and does not include any negative values.","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000),expect_column_values_to_be_greater_than(column=""premium_amount"", value=0)","expect_column_values_to_be_between(column=""premium_amount"", min_value=100, max_value=10000),expect_column_values_to_not_be_null(column=""premium_amount""),expect_column_values_to_be_of_type(column=""premium_amount"", type_=""float"")  # This line is optional but can be useful for type checking.",0.64,0.5753424657534246,0.64,51.444005815130744
"In the `status` column, confirm that values are restricted to the set `['Sent', 'Received', 'Draft', 'Failed']` and that this field does not contain null entries.","expect_column_values_to_be_in_set(column=""status"", value_set=['Sent', 'Received', 'Draft', 'Failed']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['Sent', 'Received', 'Draft', 'Failed']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,100.00000000000004
"For table 'weather_alerts': Ensure the number of rows equals the number of alerts active today. Ensure each alert has a 'severity' column that matches the set: ['Low', 'Moderate', 'High', 'Severe'].","expect_table_row_count_to_equal(other_table=""weather_alerts_active_today""),expect_column_values_to_be_in_set(column=""severity"", value_set=[""Low"", ""Moderate"", ""High"", ""Severe""])","expect_table_row_count_to_equal(table=""weather_alerts"", value=active_alerts_today),expect_column_values_to_be_in_set(column=""severity"", value_set=['Low', 'Moderate', 'High', 'Severe'])",0.9454545454545454,0.830188679245283,0.9454545454545454,64.94430141058264
"For the `request_status` field: Ensure it only contains values from the set `['open', 'in progress', 'closed']`. Confirm that this field exists.","expect_column_to_exist(column=""request_status""),expect_column_values_to_be_in_set(column=""request_status"", value_set=['open', 'in progress', 'closed'])","expect_column_to_exist(column=""request_status""),expect_column_values_to_be_in_set(column=""request_status"", value_set=['open', 'in progress', 'closed'])",1.0,1.0,1.0,100.00000000000004
Ensure that the `delivery_time` field follows the pattern `^[0-9]+ (days|hours)$`.,"expect_column_values_to_match_regex(column=""delivery_time"", regex=r""^[0-9]+ (days|hours)$"")","expect_column_values_to_match_regex(column=""delivery_time"", regex=r""^[0-9]+ (days|hours)$"")",1.0,1.0,1.0,100.00000000000004
"Check that the `customer_status` column includes only the values `['Active', 'Inactive']`.","expect_column_values_to_be_in_set(column=""customer_status"", value_set=[""Active"", ""Inactive""])","expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive'])",1.0,1.0,1.0,76.44771797100299
"Ensure that the `performance_score` in HRMS is linked to the `loan_approval` status, where high scores correlate with approved loans.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""performance_score"", column_B=""loan_approval"")","expect_column_pair_values_to_be_equal(column_A=""performance_score"", column_B=""loan_approval""),expect_column_values_to_be_between(column=""performance_score"", min_value=0, max_value=100)  # Replace with actual min/max values based on your dataset.",0.48275862068965514,0.3928571428571429,0.48275862068965514,37.87607406439203
"Check that the `quantity_ordered` column values are positive integers within the range of 1 to 10,000.","expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int"")","expect_column_values_to_be_between(column=""quantity_ordered"", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=""quantity_ordered"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
For the `booking_date` field: Ensure all datetime strings are formatted as `%Y-%m-%d` and represent a valid date.,"expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""booking_date"")","expect_column_values_to_match_strftime_format(column=""booking_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""booking_date"")  # Note: This is a new expectation that may not be available today. Please check if it's available before using it.",0.704225352112676,0.6956521739130436,0.704225352112676,70.17936011225832
Ensure the `alert_id` column contains unique values for each record in the dataset.,"expect_column_values_to_be_unique(column=""alert_id"")","expect_column_values_to_be_unique(column=""alert_id"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `employment_status` column only contains values from the set `['Active', 'Inactive', 'On Leave']`.","expect_column_values_to_be_in_set(column=""employment_status"", value_set=['Active', 'Inactive', 'On Leave'])","expect_column_values_to_be_in_set(column=""employment_status"", value_set=['Active', 'Inactive', 'On Leave'])",1.0,1.0,1.0,100.00000000000004
For the `submission_date` field: Ensure all entries can be parsed as valid datetime objects and follow the format '%Y-%m-%d'.,"expect_column_values_to_be_dateutil_parseable(column=""submission_date""),expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format='%Y-%m-%d')","expect_column_values_to_be_dateutil_parseable(column=""submission_date""),expect_column_values_to_match_strftime_format(column=""submission_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,90.61100081150309
For the field 'call_duration': Ensure this field is not null and matches the type 'integer'. Validate that values are between 0 and 3600 seconds.,"expect_column_values_to_not_be_null(column=""call_duration""),expect_column_values_to_be_of_type(column=""call_duration"", type_=""int""),expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)","expect_column_values_to_not_be_null(column=""call_duration""),expect_column_values_to_be_of_type(column=""call_duration"", type_=""int""),expect_column_values_to_be_between(column=""call_duration"", min_value=0, max_value=3600)",1.0,1.0,1.0,100.00000000000004
In the `gas_price` column: Check for values that are non-negative integers and verify that the average gas price does not exceed 200 Gwei.,"expect_column_values_to_be_between(column=""gas_price"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""gas_price"", min_value=None, max_value=200)","expect_column_values_to_be_between(column=""gas_price"", min_value=0, max_value=None),expect_column_mean_to_be_between(column=""gas_price"", min_value=0, max_value=200)",0.9666666666666667,0.9310344827586207,0.9666666666666667,96.0132862288073
"For the `course_code` column, ensure all values match the pattern `^[A-Z]{3}-[0-9]{3}$` and that no duplicates are present.","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$""),expect_column_values_to_be_unique(column=""course_code"")","expect_column_values_to_match_regex(column=""course_code"", regex=r""^[A-Z]{3}-[0-9]{3}$""),expect_column_values_to_be_unique(column=""course_code"")",1.0,1.0,1.0,100.00000000000004
"Verify that the `jurisdiction` column contains only values from the specified set `['State', 'Federal', 'International']`.","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['State', 'Federal', 'International'])","expect_column_values_to_be_in_set(column=""jurisdiction"", value_set=['State', 'Federal', 'International'])",1.0,1.0,1.0,100.00000000000004
Ensure that the count of rows in the `transactions` table equals the count of rows in the `confirmed_transactions` table. Validate the existence of both tables.,"expect_table_row_count_to_equal_other_table(table_name=""transactions"", other_table_name=""confirmed_transactions""),expect_table_to_exist(table_name=""transactions""),expect_table_to_exist(table_name=""confirmed_transactions"")","expect_table_to_exist(table=""transactions""),expect_table_to_exist(table=""confirmed_transactions"")  # Note: This is just a sample expectation. You may need to adjust it based on your specific requirements.",0.4838709677419355,0.3333333333333333,0.41935483870967744,35.95608113365708
"For field `post_likes`: Ensure that the maximum value does not exceed 1,000,000. Validate the average number of likes is above 100.","expect_column_max_to_be_between(column=""post_likes"", max_value=1000000),expect_column_mean_to_be_between(column=""post_likes"", min_value=100)","expect_column_max_to_be_between(column=""post_likes"", min_value=0, max_value=1000000),expect_column_mean_to_be_between(column=""post_likes"", min_value=100, max_value=None)  # Note: This assumes that the mean value is between 100 and infinity. If you want to validate the mean value is between 100 and 1000000, you can modify the expectation accordingly.",0.5647058823529412,0.5301204819277108,0.5647058823529412,50.204117216714515
"Confirm that the `view_count` column contains no negative values, indicating accurate tracking of user engagement.","expect_column_values_to_be_between(column=""view_count"", min_value=0)","expect_column_values_to_be_between(column=""view_count"", min_value=0)",1.0,1.0,1.0,100.00000000000004
"Check that the `check_in_time` field adheres to the `HH:MM` 24-hour format and is within the operational hours of the hotel, e.g., `14:00` to `23:00`.","expect_column_values_to_match_regex(column=""check_in_time"", regex=r""^(?:[01]\d|2[0-3]):[0-5]\d$""),expect_column_values_to_be_between(column=""check_in_time"", min_value=""14:00"", max_value=""23:00"")","expect_column_values_to_match_strftime_format(column=""check_in_time"", strftime_format=""%H:%M""),expect_column_values_to_be_between(column=""check_in_time"", min_value=""14:00"", max_value=""23:00"")  # Replace with actual min/max values based on hotel operational hours.",0.6585365853658537,0.6,0.6585365853658537,65.01086350642632
Confirm that the `recipient_count` column contains integer values greater than or equal to 1.,"expect_column_values_to_be_of_type(column=""recipient_count"", type_=""int""),expect_column_values_to_be_between(column=""recipient_count"", min_value=1, max_value=None)","expect_column_values_to_be_between(column=""recipient_count"", min_value=1)",0.6153846153846153,0.5945945945945945,0.6153846153846153,24.254361539140042
Check that the sum of `returned_items` across all records does not exceed `10%` of total `sold_items`.,"expect_column_sum_to_be_between(column=""returned_items"", min_value=0, max_value=0.1 * expect_column_sum(column=""sold_items""))","expect_column_sum_to_be_between(column=""returned_items"", min_value=0, max_value=total_sold_items * 0.1)",0.8780487804878049,0.7692307692307692,0.7804878048780488,66.58602801187537
For field 'course_id': Ensure this field exists and contains unique string values. Validate that all values conform to the pattern 'COURSE-XXXX'.,"expect_column_to_exist(column=""course_id""),expect_column_values_to_be_unique(column=""course_id""),expect_column_values_to_match_regex(column=""course_id"", regex=r""^COURSE-\d{4}$"")","expect_column_to_exist(column=""course_id""),expect_column_values_to_be_unique(column=""course_id""),expect_column_values_to_match_regex(column=""course_id"", regex=r""COURSE-\d{4}"")  # Replace \d{4} with the actual length of your course ID length.",0.8333333333333333,0.8285714285714285,0.8333333333333333,76.82580996044061
Ensure that the `credit_score` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""credit_score"", threshold=0.05)","expect_column_parameterized_test_p_value_to_be_greater_than(column=""credit_score"", threshold=0.05)",0.9411764705882353,0.8749999999999999,0.9411764705882353,85.95552893261161
Verify that the `warehouse_location` field contains only distinct values matching the predefined list of locations.,"expect_column_values_to_be_in_set(column=""warehouse_location"", value_set=predefined_list_of_locations),expect_column_values_to_be_unique(column=""warehouse_location"")","expect_column_values_to_be_in_set(column=""warehouse_location"", value_set=[""location1"", ""location2"", ""location3"", ""location4"", ""location5""])",0.5714285714285713,0.5499999999999999,0.5714285714285713,47.16155467710124
"In the `course_enrollment` table, ensure the `enrollment_date` field contains dates within the range of '2020-01-01' to '2023-12-31'.","expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")","expect_column_values_to_be_between(column=""enrollment_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,100.00000000000004
"In the `hotel_bookings` table, ensure the `booking_id` field has unique values and matches the type 'string'. No null values are allowed.","expect_column_to_exist(column=""booking_id""),expect_column_values_to_be_unique(column=""booking_id""),expect_column_values_to_not_be_null(column=""booking_id""),expect_column_values_to_be_of_type(column=""booking_id"", type_=""string"")","expect_column_values_to_be_unique(column=""booking_id""),expect_column_values_to_be_of_type(column=""booking_id"", type_=""string""),expect_column_values_to_not_be_null(column=""booking_id"")",0.898550724637681,0.8656716417910447,0.7246376811594202,78.94064881538888
"In the `comment_count` column: Ensure that the mean is within the range of 0 to 100, with no missing values.","expect_column_mean_to_be_between(column=""comment_count"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""comment_count"")","expect_column_mean_to_be_between(column=""comment_count"", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=""comment_count"")",1.0,1.0,1.0,100.00000000000004
Check that the `user_rating` column values are within the range of 1 to 10.,"expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=10)","expect_column_values_to_be_between(column=""user_rating"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
Ensure that the sum of `price` and `tax` columns equals the `total_cost` column for each record.,"expect_column_pair_values_to_be_equal(column_A=""price"", column_B=""total_cost""),expect_column_pair_values_to_be_equal(column_A=""tax"", column_B=""total_cost"")","expect_multicolumn_sum_to_equal(column_list=[""price"", ""tax""], target_column=""total_cost"")",0.4390243902439025,0.10256410256410256,0.4390243902439025,17.986522974254555
"Check that the `grade_level` values are restricted to the set of integers: {9, 10, 11, 12}.","expect_column_values_to_be_in_set(column=""grade_level"", value_set={9, 10, 11, 12})","expect_column_values_to_be_in_set(column=""grade_level"", value_set={9, 10, 11, 12})",1.0,1.0,1.0,100.00000000000004
Ensure the `email` column values conform to a valid email format and are unique across all records.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")  # Note: This expectation may fail if there are duplicate email addresses in the dataset.",0.7499999999999999,0.7407407407407407,0.7499999999999999,79.38966233719273
For field 'category_id': Ensure the field matches the type 'text'. Validate that values in (category_id) must exist in the list of valid categories. Ensure this field exists.,"expect_column_to_exist(column=""category_id""),expect_column_values_to_be_of_type(column=""category_id"", type_=""text""),expect_column_values_to_be_in_set(column=""category_id"", value_set=valid_categories)","expect_column_to_exist(column=""category_id""),expect_column_values_to_be_of_type(column=""category_id"", type_=""text""),expect_column_values_to_be_in_set(column=""category_id"", value_set=valid_categories)",1.0,1.0,1.0,100.00000000000004
"For the `signup_date` field, ensure that all dates are in the correct format and none are null.","expect_column_to_exist(column=""signup_date""),expect_column_values_to_not_be_null(column=""signup_date""),expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_not_be_null(column=""signup_date""),expect_column_values_to_match_strftime_format(column=""signup_date"", strftime_format=""%Y-%m-%d"")",0.8771929824561403,0.8727272727272727,0.8771929824561403,74.59449699846691
For the `inventory_level`: Ensure the values do not exceed the set range of 0 to 5000 and check for distinct values.,"expect_column_values_to_be_between(column=""inventory_level"", min_value=0, max_value=5000),expect_column_proportion_of_unique_values_to_be_between(column=""inventory_level"", min_value=0.9, max_value=1.0)","expect_column_values_to_be_between(column=""inventory_level"", min_value=0, max_value=5000),expect_column_values_to_be_unique(column=""inventory_level"")  # Note: This is just a suggestion; you may need to adjust the expectation based on your specific requirements.",0.6233766233766234,0.5333333333333332,0.5974025974025974,65.10749037064414
"Validate that the `feedback_score` column has a minimum value of 1 and a maximum value of 5, with a mean above 4.","expect_column_min_to_be_between(column=""feedback_score"", min_value=1),expect_column_max_to_be_between(column=""feedback_score"", max_value=5),expect_column_mean_to_be_between(column=""feedback_score"", min_value=4, max_value=5)","expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=5),expect_column_mean_to_be_between(column=""feedback_score"", min_value=4, max_value=None)",0.8115942028985509,0.746268656716418,0.8115942028985509,65.71238002477334
"For the `category` field: Ensure values are from the predefined set `['Electronics', 'Clothing', 'Home Goods']` and are case-sensitive.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home Goods']),expect_column_values_to_be_unique(column=""category"")  # To ensure there are no duplicate values.",0.6666666666666666,0.6511627906976745,0.6666666666666666,52.917149759668035
"For field `room_type`: Ensure values in `room_type` must exist in the set ['Single', 'Double', 'Suite']. Ensure this field is required (not null).","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=""room_type"")","expect_column_values_to_be_in_set(column=""room_type"", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=""room_type"")  # This will fail if the column is null.",0.8620689655172413,0.8571428571428571,0.8620689655172413,84.72797283367925
Check that the `end_date` column is greater than the `start_date` column across all records.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""end_date"", column_B=""start_date"")",1.0,1.0,1.0,100.00000000000004
"Check that the `active_status` column contains only the values `['Active', 'Inactive']` and no other entries.","expect_column_distinct_values_to_equal_set(column=""active_status"", value_set=[""Active"", ""Inactive""])","expect_column_values_to_be_in_set(column=""active_status"", value_set=['Active', 'Inactive'])",0.8571428571428571,0.6923076923076923,0.8571428571428571,60.90393051639867
"Check that the `research_topic` column contains only distinct values from the predefined set `['Health', 'Education', 'Environment']`.","expect_column_values_to_be_in_set(column=""research_topic"", value_set=['Health', 'Education', 'Environment'])","expect_column_values_to_be_in_set(column=""research_topic"", value_set=['Health', 'Education', 'Environment'])",1.0,1.0,1.0,100.00000000000004
Check that the `post_length` column values have a minimum of 50 characters and a maximum of 2000 characters.,"expect_column_value_lengths_to_be_between(column=""post_length"", min_value=50, max_value=2000)","expect_column_value_lengths_to_be_between(column=""post_length"", min_value=50, max_value=2000)",1.0,1.0,1.0,100.00000000000004
Validate that the uploaded files do not contain any entries or lines that exceed the specified regular expression pattern for valid email addresses.,"expect_file_line_regex_match_count_to_equal(file_path=""uploaded_files"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,4}$"", count=0)","expect_file_line_regex_match_ratio_to_be_between(file_path=""uploaded_files"", min_value=0, max_value=100)",0.5500000000000002,0.36842105263157887,0.5500000000000002,30.54264651651902
Ensure the `transaction_id` column contains unique string values that match the regex pattern `^[0-9a-f]{64}$`.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[0-9a-f]{64}$"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_match_regex(column=""transaction_id"", regex=r""^[0-9a-f]{64}$"")",1.0,1.0,1.0,100.00000000000004
Ensure that the `reorder_level` column values are sorted in ascending order.,"expect_column_values_to_be_increasing(column=""reorder_level"")","expect_column_values_to_be_increasing(column=""reorder_level"")",1.0,1.0,1.0,100.00000000000004
For the `subscription_price`: Ensure that 95% of the values fall within the range of $5 to $20.,"expect_column_proportion_of_unique_values_to_be_between(column=""subscription_price"", min_value=0.95, max_value=1.0)","expect_column_values_to_be_between(column=""subscription_price"", min_value=5, max_value=20)",0.7428571428571429,0.6060606060606061,0.7428571428571429,68.7528874673062
For the `feedback` field: Ensure that string lengths are between 10 and 500 characters and do not contain offensive words.,"expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""\b(offensive_word1|offensive_word2|offensive_word3)\b"")","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""offensive|profane|obscene"")  # Replace ""offensive|profane|obscene"" with your own list of offensive words.",0.7837837837837837,0.6944444444444444,0.7837837837837837,72.17364594193671
"Verify that `property_id` in Real Estate Management corresponds to a unique entry in the `transactions` dataset, ensuring data integrity.","expect_column_values_to_be_unique(column=""property_id"")","expect_column_values_to_be_unique(column=""property_id"")",1.0,1.0,1.0,100.00000000000004
Ensure the number of rows in the `orders` table matches the row count in the `order_details` table.,"expect_table_row_count_to_equal_other_table(table=""orders"", other_table=""order_details"")","expect_table_row_count_to_equal_other_table(table=""orders"", other_table=""order_details"")",1.0,1.0,1.0,100.00000000000004
Ensure the `phone_number` column matches the format `+(country_code) (number)` and contains no duplicates.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\+\(\d{1,3}\) \d{7,15}$""),expect_column_values_to_be_unique(column=""phone_number"")","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^(+)?(\d{1,3})?\s?\d{1,14}$""),expect_column_values_to_be_unique(column=""phone_number"")  # Note: This assumes that the column values are unique. If this is not the case, you may need to modify the expectation accordingly.",0.631578947368421,0.5675675675675675,0.631578947368421,55.992775652380224
For the `threat_details` field: Ensure it is a valid JSON object and contains properties such as 'severity' and 'description'. Validate that both properties exist.,"expect_column_values_to_be_json_parseable(column=""threat_details""),expect_column_values_to_match_json_schema(column=""threat_details"", schema={""type"": ""object"", ""properties"": {""severity"": {""type"": ""string""}, ""description"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""threat_details""),expect_column_values_to_have_property(column=""threat_details"", property_name=""severity""),expect_column_values_to_have_property(column=""threat_details"", property_name=""description"")",0.625,0.4838709677419355,0.625,46.21043848114418
"For field 'shipment_status': Ensure the field is required (not null). Validate that the values conform to the expected categories ['Pending', 'Shipped', 'Delivered', 'Cancelled'].","expect_column_values_to_not_be_null(column=""shipment_status""),expect_column_values_to_be_in_set(column=""shipment_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","expect_column_values_to_not_be_null(column=""shipment_status""),expect_column_values_to_be_in_set(column=""shipment_status"", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
"For field 'discount_code': Ensure the field matches the type 'text'. Validate that values do not contain spaces and conform to the regex pattern '^[A-Z0-9]{5,10}$'.","expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_values_to_not_match_regex(column=""discount_code"", regex=r""\s""),expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z0-9]{5,10}$"")","expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_values_to_not_match_regex(column=""discount_code"", regex=r""^\s+$""),expect_column_values_to_match_regex(column=""discount_code"", regex=r""^[A-Z0-9]{5,10}$"")  # Note: This regex assumes the length of the discount code is between 5 and 10 characters, inclusive. If this assumption is incorrect, adjust the regex accordingly.",0.7592592592592593,0.7547169811320755,0.7592592592592593,71.03758264999499
For the `course_duration` field: Validate that values are within the range of 1 to 52 weeks and are of type 'integer'.,"expect_column_values_to_be_between(column=""course_duration"", min_value=1, max_value=52),expect_column_values_to_be_of_type(column=""course_duration"", type_=""int"")","expect_column_values_to_be_between(column=""course_duration"", min_value=1, max_value=52),expect_column_values_to_be_of_type(column=""course_duration"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Verify that the `video_title` column contains strings with a length between 5 and 100 characters.,"expect_column_value_lengths_to_be_between(column=""video_title"", min_value=5, max_value=100)","expect_column_value_lengths_to_be_between(column=""video_title"", min_value=5, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Ensure that for each `order_id`, the `shipping_cost` is non-negative and does not exceed a threshold of $50.","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=50)","expect_column_values_to_be_between(column=""shipping_cost"", min_value=0, max_value=50)",1.0,1.0,1.0,100.00000000000004
Ensure the `transaction_id` column contains only unique values and does not allow null entries.,"expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")","expect_column_values_to_be_unique(column=""transaction_id""),expect_column_values_to_not_be_null(column=""transaction_id"")",1.0,1.0,1.0,100.00000000000004
Verify that the `alert_score` column's maximum value does not exceed 100 and the mean is above 50.,"expect_column_max_to_be_between(column=""alert_score"", max_value=100),expect_column_mean_to_be_between(column=""alert_score"", min_value=50)","expect_column_max_to_be_between(column=""alert_score"", min_value=0, max_value=100),expect_column_mean_to_be_between(column=""alert_score"", min_value=50, max_value=None)",0.888888888888889,0.8461538461538461,0.888888888888889,78.673523944095
"For the `customer_segment` column: Ensure the values belong to the defined list: ['New', 'Returning', 'VIP'].","expect_column_values_to_be_in_set(column=""customer_segment"", value_set=['New', 'Returning', 'VIP'])","expect_column_values_to_be_in_set(column=""customer_segment"", value_set=['New', 'Returning', 'VIP'])",1.0,1.0,1.0,100.00000000000004
"For the `battery_level` column, ensure that values are of type 'float' and range between 0.0 and 100.0.","expect_column_values_to_be_of_type(column=""battery_level"", type_=""float""),expect_column_values_to_be_between(column=""battery_level"", min_value=0.0, max_value=100.0)","expect_column_values_to_be_of_type(column=""battery_level"", type_=""float""),expect_column_values_to_be_between(column=""battery_level"", min_value=0.0, max_value=100.0)",1.0,1.0,1.0,100.00000000000004
Verify that the `claim_date` column contains dates formatted as 'MM/DD/YYYY' and that all dates are not in the future.,"expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_less_than(column=""claim_date"", value=pd.Timestamp.now())","expect_column_values_to_match_strftime_format(column=""claim_date"", strftime_format=""%m/%d/%Y""),expect_column_values_to_be_dateutil_parseable(column=""claim_date""),expect_column_values_to_be_between(column=""claim_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.6233766233766235,0.56,0.6233766233766235,51.9001409827648
Ensure that the combination of `customer_id` and `policy_number` is unique across all records.,"expect_compound_columns_to_be_unique(column_A=""customer_id"", column_B=""policy_number"")","expect_compound_columns_to_be_unique(column_A=""customer_id"", column_B=""policy_number"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `price_change` column is required (not null) and that all values are numeric reflecting percentage changes.,"expect_column_values_to_not_be_null(column=""price_change""),expect_column_values_to_be_of_type(column=""price_change"", type_=""float"")","expect_column_values_to_not_be_null(column=""price_change""),expect_column_values_to_be_of_type(column=""price_change"", type_=""numeric""),expect_column_values_to_be_between(column=""price_change"", min_value=-100, max_value=100)  # Assuming that the percentage change is between -100% and 100% (inclusive).",0.6,0.5882352941176471,0.6,47.97514559430962
Check that the `insurance_expiry_date` is in the format `YYYY-MM-DD` and does not precede the current date.,"expect_column_values_to_match_strftime_format(column=""insurance_expiry_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""insurance_expiry_date"")","expect_column_values_to_match_strftime_format(column=""insurance_expiry_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""insurance_expiry_date""),expect_column_values_to_be_greater_than(column=""insurance_expiry_date"", value=""today"")  # Replace today with the current date.",0.6944444444444445,0.6571428571428571,0.6944444444444445,56.240049671654994
For field 'activation_date': Ensure this field matches the type 'date'. Ensure there are no missing values.,"expect_column_values_to_not_be_null(column=""activation_date""),expect_column_values_to_be_of_type(column=""activation_date"", type_=""date"")","expect_column_values_to_be_of_type(column=""activation_date"", type_=""date""),expect_column_values_to_not_be_null(column=""activation_date"")",1.0,1.0,0.7272727272727273,100.00000000000004
"Ensure that the `category` field only contains values from the set `['Electronics', 'Clothing', 'Home']`. No missing values should be present.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_not_be_null(column=""category"")","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_not_be_null(column=""category"")  # This expectation is not necessary but can be added for completeness.",0.8070175438596492,0.8,0.8070175438596492,79.83813704619864
For the `admission_date` field: Ensure all dates are in the past and match the format 'YYYY-MM-DD'. Ensure there are no missing values.,"expect_column_values_to_be_dateutil_parseable(column=""admission_date""),expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_not_be_null(column=""admission_date""),expect_column_values_to_be_between(column=""admission_date"", min_value=""1900-01-01"", max_value=""2023-10-01"")","expect_column_values_to_be_dateutil_parseable(column=""admission_date""),expect_column_values_to_be_between(column=""admission_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.6206896551724137,0.588235294117647,0.5977011494252873,39.431632842222996
Ensure the `sensor_reading` column's values are within the operational range of 0 to 1000.,"expect_column_values_to_be_between(column=""sensor_reading"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""sensor_reading"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
"Ensure the count of distinct values in the `status` column of the `users` table matches the set `['active', 'inactive', 'banned']`.","expect_column_distinct_values_to_equal_set(column=""status"", value_set=['active', 'inactive', 'banned'])","expect_column_values_to_be_in_set(column=""status"", value_set=['active', 'inactive', 'banned'])",0.8571428571428571,0.6923076923076923,0.8571428571428571,82.93181259810136
"For the `hire_date` column, ensure that all dates are in increasing order with no duplicates.","expect_column_values_to_be_increasing(column=""hire_date""),expect_column_values_to_be_unique(column=""hire_date"")","expect_column_values_to_be_increasing(column=""hire_date""),expect_column_values_to_be_unique(column=""hire_date"")",1.0,1.0,1.0,100.00000000000004
"For field 'route_status': Ensure the field matches the type 'text'. Validate that values in (route_status) must exist in the predefined list ['In Transit', 'Delivered', 'Delayed', 'Cancelled']. Ensure this field exists.","expect_column_to_exist(column=""route_status""),expect_column_values_to_be_of_type(column=""route_status"", type_=""text""),expect_column_values_to_be_in_set(column=""route_status"", value_set=['In Transit', 'Delivered', 'Delayed', 'Cancelled'])","expect_column_to_exist(column=""route_status""),expect_column_values_to_be_of_type(column=""route_status"", type_=""text""),expect_column_values_to_be_in_set(column=""route_status"", value_set=['In Transit', 'Delivered', 'Delayed', 'Cancelled'])",1.0,1.0,1.0,100.00000000000004
For the `voting_date` field: Validate that all entries are in the format YYYY-MM-DD and are not future dates.,"expect_column_values_to_match_strftime_format(column=""voting_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""voting_date"")  # This checks if they're valid dates,# Additional custom logic would be needed to check for future dates, as there is no direct expectation for that in the given reference.","expect_column_values_to_match_strftime_format(column=""voting_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""voting_date""),expect_column_values_to_be_between(column=""voting_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.6019417475728155,0.4752475247524752,0.5436893203883495,55.57975825991697
Ensure the `visit_reason` field does not contain null values and is of type 'text'. Verify that all entries are meaningful.,"expect_column_values_to_not_be_null(column=""visit_reason""),expect_column_values_to_be_of_type(column=""visit_reason"", type_=""text""),expect_column_values_to_be_unique(column=""visit_reason"")","expect_column_values_to_not_be_null(column=""visit_reason""),expect_column_values_to_be_of_type(column=""visit_reason"", type_=""text""),expect_column_values_to_be_meaningful(column=""visit_reason"")  # Replace with your actual expectation for meaningful values.",0.8571428571428572,0.8235294117647058,0.8571428571428572,84.62605745698345
Ensure the `ip_address` column matches the regular expression pattern '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'.,"expect_column_values_to_match_regex(column=""ip_address"", regex=r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')","Cutting Knowledge Date: December 2023
Today Date: 26 July 2024",0.0,0.0,0.0,0.0
Ensure the `humidity` column is of type 'numeric' and that no entries are null.,"expect_column_values_to_be_of_type(column=""humidity"", type_=""numeric""),expect_column_values_to_not_be_null(column=""humidity"")","expect_column_values_to_be_of_type(column=""humidity"", type_=""numeric""),expect_column_values_to_not_be_null(column=""humidity"")",1.0,1.0,1.0,100.00000000000004
"Ensure the `state` column values match the set `['California', 'Texas', 'Florida', 'New York']`.","expect_column_values_to_be_in_set(column=""state"", value_set=['California', 'Texas', 'Florida', 'New York'])","expect_column_values_to_be_in_set(column=""state"", value_set=['California', 'Texas', 'Florida', 'New York'])",1.0,1.0,1.0,100.00000000000004
For field 'file_size': Ensure the field matches the type 'integer'. Validate that (file_size) falls within the range of 1KB to 100MB.,"expect_column_values_to_be_of_type(column=""file_size"", type_=""int""),expect_column_values_to_be_between(column=""file_size"", min_value=1024, max_value=104857600)","expect_column_values_to_be_of_type(column=""file_size"", type_=""int""),expect_column_values_to_be_between(column=""file_size"", min_value=1024, max_value=104857600)  # Assuming 1KB = 1024 bytes, and 100MB = 104857600 bytes.",0.870967741935484,0.8666666666666666,0.870967741935484,82.3083909469097
"Ensure the `genre` column does not match any of the following patterns: `['Horror', 'Adult', 'Violent']`.","expect_column_values_to_not_match_regex_list(column=""genre"", regex_list=[r""Horror"", r""Adult"", r""Violent""])","expect_column_values_to_not_match_regex(column=""genre"", regex=r""^(Horror|Adult|Violent)$"")",0.8750000000000001,0.5999999999999999,0.8750000000000001,46.60387336036133
For field `category`: Ensure the field matches the type 'text'. Values must exist in the predefined set of categories.,"expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=[""category1"", ""category2"", ""category3""])","expect_column_values_to_be_of_type(column=""category"", type_=""text""),expect_column_values_to_be_in_set(column=""category"", value_set=[""category1"", ""category2"", ""category3""])",1.0,1.0,1.0,100.00000000000004
For the `wallets` table: Ensure the number of rows is between 10 and 500 and the `wallet_address` column matches the Ethereum address format.,"expect_table_row_count_to_be_between(min_value=10, max_value=500),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$"")","expect_table_row_count_to_be_between(min_value=10, max_value=500),expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$"")  # Replace 0x with your actual regex pattern.",0.8955223880597014,0.8923076923076924,0.8955223880597014,87.40928659083986
Ensure the `device_id` column contains unique values and that no entries are null.,"expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")","expect_column_values_to_be_unique(column=""device_id""),expect_column_values_to_not_be_null(column=""device_id"")",1.0,1.0,1.0,100.00000000000004
"For the `forecast_date`, ensure the field matches the type 'date' and is formatted as 'YYYY-MM-DD'.","expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")","expect_column_values_to_be_of_type(column=""forecast_date"", type_=""date""),expect_column_values_to_match_strftime_format(column=""forecast_date"", strftime_format=""%Y-%m-%d"")",1.0,1.0,1.0,100.00000000000004
Validate that the `post_creation_date` column must not contain future dates. Ensure all values are of type 'date'.,"expect_column_values_to_be_dateutil_parseable(column=""post_creation_date""),expect_column_values_to_be_between(column=""post_creation_date"", min_value=""1900-01-01"", max_value=""today"")","expect_column_values_to_be_of_type(column=""post_creation_date"", type_=""date""),expect_column_values_to_be_between(column=""post_creation_date"", min_value=""1900-01-01"", max_value=""today"")",0.9,0.8620689655172413,0.9,84.05168646170581
For the `humidity` field: Validate that values are percentages within the range of 0 to 100.,"expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)","expect_column_values_to_be_between(column=""humidity"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
"Verify that the `distance_travelled` column values are positive and do not exceed 1,000 kilometers.","expect_column_values_to_be_between(column=""distance_travelled"", min_value=0, max_value=1000)","expect_column_values_to_be_between(column=""distance_travelled"", min_value=0, max_value=1000)",1.0,1.0,1.0,100.00000000000004
In the `interest_rate` column: Ensure that all values are of type 'float' and fall between 0.0 and 0.2. Check for unique values and no missing entries.,"expect_column_values_to_be_of_type(column=""interest_rate"", type_=""float""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0.0, max_value=0.2),expect_column_values_to_be_unique(column=""interest_rate""),expect_column_values_to_not_be_null(column=""interest_rate"")","expect_column_values_to_be_of_type(column=""interest_rate"", type_=""float""),expect_column_values_to_be_between(column=""interest_rate"", min_value=0.0, max_value=0.2),expect_column_values_to_be_unique(column=""interest_rate""),expect_column_values_to_not_be_null(column=""interest_rate"")  # Note: This assumes that there are no null values in the dataset. If there are, you may need to modify this expectation accordingly.",0.8067226890756303,0.8034188034188035,0.8067226890756303,78.8662181163007
"For field 'fee': Ensure the field can be null. If present, validate that the field matches the type 'float' and is greater than or equal to zero.","expect_column_values_to_be_null(column=""fee""),expect_column_values_to_be_of_type(column=""fee"", type_=""float""),expect_column_values_to_be_between(column=""fee"", min_value=0, max_value=None)","expect_column_values_to_be_of_type(column=""fee"", type_=""float""),expect_column_values_to_be_between(column=""fee"", min_value=0)",0.8,0.7924528301886793,0.8,60.90070796959311
For field 'measurement_value': Ensure values are of type 'float'. Ensure there are no missing values. The standard deviation of the measurement values should not exceed 5.,"expect_column_values_to_be_of_type(column=""measurement_value"", type_=""float""),expect_column_values_to_not_be_null(column=""measurement_value""),expect_column_stdev_to_be_between(column=""measurement_value"", min_value=0, max_value=5)","expect_column_values_to_be_of_type(column=""measurement_value"", type_=""float""),expect_column_values_to_not_be_null(column=""measurement_value""),expect_column_stdev_to_be_between(column=""measurement_value"", min_value=0, max_value=5)",1.0,1.0,1.0,100.00000000000004
"Validate that the `likes_count` column contains integer values greater than or equal to zero, with no missing values.","expect_column_values_to_be_of_type(column=""likes_count"", type_=""int""),expect_column_values_to_not_be_null(column=""likes_count""),expect_column_values_to_be_between(column=""likes_count"", min_value=0)","expect_column_values_to_be_between(column=""likes_count"", min_value=0),expect_column_values_to_not_be_null(column=""likes_count"")",0.7857142857142858,0.7407407407407407,0.6428571428571428,53.32662812901265
For field 'transaction_hash': Ensure the field matches the type 'string'. Ensure all values in (transaction_hash) match the regex pattern '^[0-9a-fA-F]{64}$'. Ensure this field exists.,"expect_column_to_exist(column=""transaction_hash""),expect_column_values_to_be_of_type(column=""transaction_hash"", type_=""string""),expect_column_values_to_match_regex(column=""transaction_hash"", regex=r""^[0-9a-fA-F]{64}$"")","expect_column_to_exist(column=""transaction_hash""),expect_column_values_to_be_of_type(column=""transaction_hash"", type_=""string""),expect_column_values_to_match_regex(column=""transaction_hash"", regex=r""^[0-9a-fA-F]{64}$"")  # Note: This regex matches hexadecimal strings of length 64.",0.8860759493670886,0.8831168831168831,0.8860759493670886,87.16380470378529
"Ensure the standard deviation of the `data_accuracy` column does not exceed 5%, indicating reliability in Research and Data Analysis.","expect_column_stdev_to_be_between(column=""data_accuracy"", min_value=0, max_value=0.05)","expect_column_stdev_to_be_between(column=""data_accuracy"", min_value=0, max_value=0.05)",1.0,1.0,1.0,100.00000000000004
"In the `elections` dataset: Ensure the `election_date` field is of type 'date' and falls within the range of `['2020-01-01', '2023-12-31']`.","expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_between(column=""election_date"", min_value='2020-01-01', max_value='2023-12-31')","expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_between(column=""election_date"", min_value=""2020-01-01"", max_value=""2023-12-31"")",1.0,1.0,1.0,81.46475724503162
"Ensure the `customer_status` column has no null values and only contains values from the set `['Active', 'Inactive']`.","expect_column_values_to_not_be_null(column=""customer_status""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive'])","expect_column_values_to_not_be_null(column=""customer_status""),expect_column_values_to_be_in_set(column=""customer_status"", value_set=['Active', 'Inactive'])",1.0,1.0,1.0,100.00000000000004
Validate that the `patient_email` and `author_email` fields do not contain any duplicated email addresses across both domains.,"expect_column_pair_values_to_be_unique(column_a=""patient_email"", column_b=""author_email"")","expect_column_values_to_be_unique(column=""patient_email""),expect_column_values_to_be_unique(column=""author_email"")",0.7272727272727272,0.45161290322580644,0.7272727272727272,54.347733354848714
For table 'customer_feedback': Ensure the column 'feedback_score' exists. Ensure values in 'feedback_score' are within the range of 1 to 10.,"expect_column_to_exist(column=""feedback_score""),expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=10)","expect_column_to_exist(column=""feedback_score""),expect_column_values_to_be_between(column=""feedback_score"", min_value=1, max_value=10)",1.0,1.0,1.0,100.00000000000004
For field 'product_id': Ensure this field exists. Ensure the field matches the type 'integer'. Validate that all values in 'product_id' are unique and cannot be null.,"expect_column_to_exist(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""integer""),expect_column_values_to_not_be_null(column=""product_id""),expect_column_values_to_be_unique(column=""product_id"")","expect_column_to_exist(column=""product_id""),expect_column_values_to_be_of_type(column=""product_id"", type_=""int""),expect_column_values_to_be_unique(column=""product_id""),expect_column_values_to_not_be_null(column=""product_id"")",0.9736842105263158,0.9459459459459459,0.8947368421052632,97.15003449158377
For the `client_id` field: Ensure this column exists and contains integer values that are unique across the dataset.,"expect_column_to_exist(column=""client_id""),expect_column_values_to_be_unique(column=""client_id""),expect_column_values_to_be_of_type(column=""client_id"", type_=""int"")","expect_column_to_exist(column=""client_id""),expect_column_values_to_be_of_type(column=""client_id"", type_=""int""),expect_column_values_to_be_unique(column=""client_id"")",1.0,0.9629629629629629,0.8214285714285714,99.60706509325644
For the 'weather_forecast' table: Check that the number of rows is equal to 7. Ensure this table is present in the dataset.,"expect_table_row_count_to_equal(table=""weather_forecast"", value=7),expect_table_columns_to_match_set(table=""weather_forecast"")","expect_table_to_exist(table=""weather_forecast""),expect_table_row_count_to_equal(table=""weather_forecast"", value=7)",0.8947368421052632,0.7222222222222222,0.631578947368421,81.06207820557262
"Check that the `threat_level` column contains values from the defined set `['low', 'medium', 'high']`.","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['low', 'medium', 'high'])","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['low','medium', 'high'])",1.0,1.0,1.0,100.00000000000004
"Check that the values in the `research_category` column belong to the approved set: `['Biology', 'Chemistry', 'Physics', 'Social Sciences']`.","expect_column_values_to_be_in_set(column=""research_category"", value_set=['Biology', 'Chemistry', 'Physics', 'Social Sciences'])","expect_column_values_to_be_in_set(column=""research_category"", value_set=['Biology', 'Chemistry', 'Physics', 'Social Sciences'])",1.0,1.0,1.0,100.00000000000004
"Ensure the `participant_age` column has a mean value between 18 and 65, and contains no null values.","expect_column_mean_to_be_between(column=""participant_age"", min_value=18, max_value=65),expect_column_values_to_not_be_null(column=""participant_age"")","expect_column_mean_to_be_between(column=""participant_age"", min_value=18, max_value=65),expect_column_values_to_not_be_null(column=""participant_age"")",1.0,1.0,1.0,100.00000000000004
Ensure the Kullback-Leibler divergence between the `transaction_fee` distribution and the expected fee distribution is below 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""transaction_fee"", threshold=0.1)","expect_multicolumn_stdev_to_be_between(column_list=[""transaction_fee""], min_value=0.0, max_value=0.1)",0.5,0.20000000000000004,0.5,27.434065146872857
Validate that the `order_id` column exists and contains unique values.,"expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id"")","expect_column_to_exist(column=""order_id""),expect_column_values_to_be_unique(column=""order_id"")  # Replace with actual column names.",0.8648648648648648,0.8571428571428571,0.8648648648648648,83.51687327897677
"Check that the `genre` column adheres to a predefined list of genres: `['Action', 'Adventure', 'RPG']` and has no duplicates.","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG']),expect_column_values_to_be_unique(column=""genre"")","expect_column_values_to_be_in_set(column=""genre"", value_set=['Action', 'Adventure', 'RPG']),expect_column_values_to_be_unique(column=""genre"")  # This expectation will fail if there are duplicate values in the column.",0.7857142857142858,0.7777777777777778,0.7857142857142858,77.94494986916021
"For the `salary` column, ensure no missing values exist and that all entries fall within the range of $30,000 to $200,000.","expect_column_values_to_not_be_null(column=""salary""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)","expect_column_values_to_not_be_null(column=""salary""),expect_column_values_to_be_between(column=""salary"", min_value=30000, max_value=200000)",1.0,1.0,1.0,100.00000000000004
"In the `election_results` table, verify that the `votes_cast` field contains only non-negative integers and that total votes are within a valid range based on the registered voter count.","expect_column_values_to_be_of_type(column=""votes_cast"", type_=""int""),expect_column_values_to_be_between(column=""votes_cast"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""votes_cast"", min_value=0, max_value=registered_voter_count)","expect_column_values_to_be_between(column=""votes_cast"", min_value=0, max_value=None),expect_column_sum_to_be_between(column=""votes_cast"", min_value=0, max_value=registered_voter_count)  # Replace registered_voter_count with the actual registered voter count.",0.7441860465116279,0.7380952380952381,0.7441860465116279,68.78762960070931
"For the `match_date` column, ensure that all dates are in increasing order without any duplicates.","expect_column_values_to_be_increasing(column=""match_date""),expect_column_values_to_be_unique(column=""match_date"")","expect_column_values_to_be_increasing(column=""match_date""),expect_column_values_to_be_unique(column=""match_date"")",1.0,1.0,1.0,100.00000000000004
Ensure the `admission_date` and `discharge_date` columns are formatted as `YYYY-MM-DD` and that `discharge_date` is after `admission_date`.,"expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""discharge_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""discharge_date"", column_B=""admission_date"")","expect_column_values_to_match_strftime_format(column=""admission_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_match_strftime_format(column=""discharge_date"", strftime_format=""%Y-%m-%d""),expect_column_pair_values_A_to_be_greater_than_B(column_A=""discharge_date"", column_B=""admission_date"")  # Note: This assumes that the ""discharge_date"" column is in the same table as the ""admission_date"" column. If they are in separate tables, you may need to modify this expectation accordingly.",0.7499999999999999,0.7460317460317459,0.7499999999999999,71.98519520732496
For field 'user_rating': Ensure the field is required (not null). Ensure the field matches the type 'float'. Ensure values are between 0.0 and 10.0.,"expect_column_values_to_not_be_null(column=""user_rating""),expect_column_values_to_be_of_type(column=""user_rating"", type_=""float""),expect_column_values_to_be_between(column=""user_rating"", min_value=0.0, max_value=10.0)","expect_column_values_to_not_be_null(column=""user_rating""),expect_column_values_to_be_of_type(column=""user_rating"", type_=""float""),expect_column_values_to_be_between(column=""user_rating"", min_value=0.0, max_value=10.0)",1.0,1.0,1.0,100.00000000000004
"Ensure the `status` column in the `orders` table contains only values from the set `['Pending', 'Shipped', 'Delivered']`.","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered'])","expect_column_values_to_be_in_set(column=""status"", value_set=['Pending', 'Shipped', 'Delivered'])",1.0,1.0,1.0,100.00000000000004
Ensure the `assigned_attorney` column has unique values and matches the list of valid attorneys in the `attorney_list`.,"expect_column_values_to_be_unique(column=""assigned_attorney""),expect_column_values_to_be_in_set(column=""assigned_attorney"", value_set=attorney_list)","expect_column_values_to_be_unique(column=""assigned_attorney""),expect_column_values_to_be_in_set(column=""assigned_attorney"", value_set=attorney_list)",1.0,1.0,1.0,100.00000000000004
"For the `response_time` column, validate that all entries are positive integers representing milliseconds.","expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_values_to_be_between(column=""response_time"", min_value=1, max_value=None)","expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_values_to_be_between(column=""response_time"", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=""response_time"", type_=""int""),expect_column_values_to_be_between(column=""response_time"", min_value=1, max_value=None)  # Note: This is a combination of multiple expectations.  -->",0.6067415730337078,0.5977011494252873,0.6067415730337078,44.31626126026481
For the `vehicle_logs`: Ensure that `mileage` is greater than or equal to zero. Validate that `vehicle_id` and `driver_id` combinations are unique.,"expect_column_values_to_be_between(column=""mileage"", min_value=0),expect_column_pair_values_to_be_unique(column_A=""vehicle_id"", column_B=""driver_id"")","expect_column_values_to_be_between(column=""mileage"", min_value=0),expect_compound_columns_to_be_unique(column_A=""vehicle_id"", column_B=""driver_id"")",0.9411764705882353,0.8571428571428572,0.9411764705882353,89.06377170337073
"Validate that the `policy_start_date` and `policy_end_date` columns are in chronological order, with `policy_end_date` always after `policy_start_date`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""policy_end_date"", column_B=""policy_start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""policy_end_date"", column_B=""policy_start_date"")",1.0,1.0,1.0,100.00000000000004
"For the `position` column: Ensure values match at least one pattern from the list `['Forward', 'Midfielder', 'Defender', 'Goalkeeper']`.","expect_column_values_to_be_in_set(column=""position"", value_set=['Forward', 'Midfielder', 'Defender', 'Goalkeeper'])","expect_column_values_to_be_in_set(column=""position"", value_set=['Forward', 'Midfielder', 'Defender', 'Goalkeeper'])",1.0,1.0,1.0,100.00000000000004
"For the `performance_rating`: Ensure values are from the set `['Excellent', 'Good', 'Average', 'Poor']` and no missing values exist.","expect_column_values_to_be_in_set(column=""performance_rating"", value_set=['Excellent', 'Good', 'Average', 'Poor']),expect_column_values_to_not_be_null(column=""performance_rating"")","expect_column_values_to_be_in_set(column=""performance_rating"", value_set=['Excellent', 'Good', 'Average', 'Poor']),expect_column_values_to_not_be_null(column=""performance_rating"")",1.0,1.0,1.0,100.00000000000004
"For field `game_platform`: Validate that entries belong to the set `['PC', 'Console', 'Mobile']`.","expect_column_values_to_be_in_set(column=""game_platform"", value_set=['PC', 'Console', 'Mobile'])","expect_column_values_to_be_in_set(column=""game_platform"", value_set=['PC', 'Console', 'Mobile'])",1.0,1.0,1.0,100.00000000000004
Ensure the `stock_quantity` column values are greater than or equal to 0.,"expect_column_values_to_be_between(column=""stock_quantity"", min_value=0, max_value=None)","expect_column_values_to_be_between(column=""stock_quantity"", min_value=0)",0.888888888888889,0.88,0.888888888888889,76.89513513919825
Ensure that the `customer_feedback` column does not exceed 500 characters and is not null.,"expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=500),expect_column_values_to_not_be_null(column=""customer_feedback"")","expect_column_value_lengths_to_be_between(column=""customer_feedback"", min_value=0, max_value=500),expect_column_values_to_not_be_null(column=""customer_feedback"")",1.0,1.0,1.0,100.00000000000004
Check that the `email` field contains valid email formats and does not have any duplicates.,"expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$""),expect_column_values_to_be_unique(column=""email"")","expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$""),expect_column_values_to_be_unique(column=""email"")  # Note: This expectation may not be applicable depending on the requirements.",0.7777777777777778,0.7307692307692307,0.7777777777777778,79.20316514910405
"For the field 'feedback_comments': Ensure this field can accept null values, but when present, the length of the string must be between 10 and 500 characters.","expect_column_value_lengths_to_be_between(column=""feedback_comments"", min_value=10, max_value=500),expect_column_values_to_be_null(column=""feedback_comments"")","expect_column_values_to_be_null(column=""feedback_comments""),expect_column_value_lengths_to_be_between(column=""feedback_comments"", min_value=10, max_value=500)",1.0,0.9583333333333334,0.64,98.55383616872882
For field 'election_date': Ensure this field cannot be null. Ensure the type is 'date'. Validate that all election dates are in the future or today.,"expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_in_set(column=""election_date"", value_set=[date.today()])  # This is a placeholder; you would need to implement the logic to validate future dates.","expect_column_values_to_not_be_null(column=""election_date""),expect_column_values_to_be_of_type(column=""election_date"", type_=""date""),expect_column_values_to_be_between(column=""election_date"", min_value=""today"", max_value=""today"")",0.7272727272727273,0.6511627906976745,0.7272727272727273,67.1836143886719
For field `citizen_id`: Ensure the field is required (not null). Ensure values in `citizen_id` are unique across the dataset.,"expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id"")","expect_column_values_to_not_be_null(column=""citizen_id""),expect_column_values_to_be_unique(column=""citizen_id"")  # Replace with actual column names.",0.8837209302325582,0.878048780487805,0.8837209302325582,85.5586855033479
For field 'game_id': Ensure the field is required (not null). Ensure all game IDs are unique and of type 'integer'.,"expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""game_id""),expect_column_values_to_be_unique(column=""game_id""),expect_column_values_to_be_of_type(column=""game_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"For the `category` field: Validate that all entries match one of the predefined categories: `['Electronics', 'Clothing', 'Home']`.","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])","expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Clothing', 'Home'])",1.0,1.0,1.0,100.00000000000004
Verify that the `shipment_date` is not later than the `order_date` to maintain logical consistency.,"expect_column_pair_values_A_to_be_less_than_B(column_A=""shipment_date"", column_B=""order_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""shipment_date"", column_B=""order_date"")",0.9444444444444444,0.8823529411764706,0.9444444444444444,93.36510695862633
For fields `city` and `date`: Ensure the combination is unique across all records.,"expect_compound_columns_to_be_unique(column_list=[""city"", ""date""])","expect_compound_columns_to_be_unique(column_A=""city"", column_B=""date"")",0.8181818181818182,0.6,0.8181818181818182,62.40356826033472
Check that the distribution of `view_count` follows a normal distribution with a p-value greater than 0.05 in the KS test.,"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)","expect_column_kst_test_p_value_to_be_greater_than(column=""view_count"", threshold=0.05)",0.8823529411764706,0.8125,0.8823529411764706,80.81115699296404
For field 'firmware_version': Ensure the field matches the type 'text'. Ensure the firmware version follows the semantic versioning format (MAJOR.MINOR.PATCH).,"expect_column_values_to_be_of_type(column=""firmware_version"", type_=""text""),expect_column_values_to_match_regex(column=""firmware_version"", regex=r""^\d+\.\d+\.\d+$"")","expect_column_values_to_be_of_type(column=""firmware_version"", type_=""text""),expect_column_values_to_match_regex(column=""firmware_version"", regex=r""^(\d+\.)?(\d+\.)?(\d+)$"")  # Regex for semantic versioning.",0.9285714285714286,0.9259259259259259,0.9285714285714286,75.75869716691415
For the `points_scored` column: Ensure the sum of values is greater than 1000 and that no value is negative.,"expect_column_sum_to_be_between(column=""points_scored"", min_value=1000),expect_column_values_to_be_between(column=""points_scored"", min_value=0)","expect_column_sum_to_be_between(column=""points_scored"", min_value=1000, max_value=None),expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=None)",0.888888888888889,0.8461538461538461,0.888888888888889,77.46487837703722
For field 'user_id': Ensure this field is required (not null) and matches the format of a unique identifier. Ensure values in (user_id) are unique.,"expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_be_unique(column=""user_id"")","expect_column_values_to_not_be_null(column=""user_id""),expect_column_values_to_match_regex(column=""user_id"", regex=r""^[a-zA-Z0-9]{1,}$"")  # Regular expression to match alphanumeric characters of length between 1 and 255.  # Note: This regular expression assumes that the length of the user_id field is between 1 and 255. If this assumption is incorrect, please adjust the regular expression accordingly.",0.39534883720930236,0.35714285714285715,0.39534883720930236,34.0723733027814
For field 'discount_code': Ensure the field matches the type 'text'. Ensure string values in (discount_code) do not exceed 10 characters in length. Ensure this field exists.,"expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_value_lengths_to_be_between(column=""discount_code"", min_value=0, max_value=10)","expect_column_to_exist(column=""discount_code""),expect_column_values_to_be_of_type(column=""discount_code"", type_=""text""),expect_column_value_lengths_to_be_between(column=""discount_code"", min_value=0, max_value=10)",1.0,1.0,1.0,100.00000000000004
"For field 'grade': Ensure the field matches the type 'decimal'. Validate that grades are within the range [0, 100].","expect_column_values_to_be_of_type(column=""grade"", type_=""decimal""),expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)","expect_column_values_to_be_of_type(column=""grade"", type_=""decimal""),expect_column_values_to_be_between(column=""grade"", min_value=0, max_value=100)",1.0,1.0,1.0,100.00000000000004
Ensure the `precipitation` column values are not null and fall within the range of 0 to 500 mm.,"expect_column_values_to_not_be_null(column=""precipitation""),expect_column_values_to_be_between(column=""precipitation"", min_value=0, max_value=500)","expect_column_values_to_not_be_null(column=""precipitation""),expect_column_values_to_be_between(column=""precipitation"", min_value=0, max_value=500)",1.0,1.0,1.0,100.00000000000004
"For field 'followers_count': Ensure the field exists and matches the type 'integer'. Validate that the values in (followers_count) are greater than or equal to 0 and do not exceed 1,000,000.","expect_column_to_exist(column=""followers_count""),expect_column_values_to_be_of_type(column=""followers_count"", type_=""int""),expect_column_values_to_be_between(column=""followers_count"", min_value=0, max_value=1000000)","expect_column_to_exist(column=""followers_count""),expect_column_values_to_be_of_type(column=""followers_count"", type_=""int""),expect_column_values_to_be_between(column=""followers_count"", min_value=0, max_value=1000000)  # Replace 1000000 with your desired maximum value.",0.9066666666666667,0.9041095890410958,0.9066666666666667,89.59353602882891
For field `policy_number`: Ensure values are unique and not null. Ensure the field matches the type 'string'.,"expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number""),expect_column_values_to_be_of_type(column=""policy_number"", type_=""string"")","expect_column_values_to_be_unique(column=""policy_number""),expect_column_values_to_not_be_null(column=""policy_number""),expect_column_values_to_be_of_type(column=""policy_number"", type_=""string"")",1.0,1.0,1.0,100.00000000000004
"For the `sensor_data` JSON column, verify that it contains valid JSON objects that include required fields: `temperature`, `humidity`, and `status`.","expect_column_values_to_be_json_parseable(column=""sensor_data""),expect_column_values_to_match_json_schema(column=""sensor_data"", schema={""type"": ""object"", ""properties"": {""temperature"": {""type"": ""number""}, ""humidity"": {""type"": ""number""}, ""status"": {""type"": ""string""}}})","expect_column_values_to_be_json_parseable(column=""sensor_data""),expect_column_values_to_match_json_schema(column=""sensor_data"", schema={""type"": ""object"", ""required"": [""temperature"", ""humidity"", ""status""], ""properties"": {""temperature"": {""type"": ""number""}, ""humidity"": {""type"": ""number""}, ""status"": {""type"": ""string""}}})  # Replace with actual column name and schema  # Note: This is just a sample expectation, you may need to customize it based on your specific requirements.",0.6947368421052631,0.6666666666666667,0.6947368421052631,68.14664868011256
"Ensure the `department` column contains only distinct values from the predefined set `['Health', 'Education', 'Transportation']`.","expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])","expect_column_values_to_be_in_set(column=""department"", value_set=['Health', 'Education', 'Transportation'])",1.0,1.0,1.0,100.00000000000004
"For the `sent_time` column, ensure all datetime strings match the format '%Y-%m-%d %H:%M:%S' and can be parsed correctly.","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")","expect_column_values_to_match_strftime_format(column=""sent_time"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""sent_time"")  # Note: This assumes you're using the dateutil library. If not, you'll need to replace this with a suitable alternative.",0.7272727272727273,0.72,0.7272727272727273,65.99810922053899
"For the 'weather_conditions' JSON object: Validate that it contains 'description' and 'icon' keys, ensuring they comply with the defined schema.","expect_column_values_to_match_json_schema(column=""weather_conditions"", schema={""type"": ""object"", ""properties"": {""description"": {""type"": ""string""}, ""icon"": {""type"": ""string""}}, ""required"": [""description"", ""icon""]})","expect_column_values_to_exist(column=""description""),expect_column_values_to_exist(column=""icon"")  # Note: This is just a sample expectation, you may need to customize it based on your specific requirements.",0.2909090909090909,0.11320754716981131,0.2909090909090909,13.77516465678022
Ensure the `categories` field contains valid JSON arrays that adhere to the defined schema and do not have missing values.,"expect_column_values_to_be_json_parseable(column=""categories""),expect_column_values_to_match_json_schema(column=""categories"", schema=""defined_schema""),expect_column_values_to_not_be_null(column=""categories"")","expect_column_values_to_match_json_schema(column=""categories""),expect_column_values_to_not_be_null(column=""categories"")",0.7499999999999999,0.7391304347826086,0.7499999999999999,49.29650139034422
"Validate that the 'supplier_info' JSON object contains 'supplier_id' and 'contact_details', ensuring adherence to the defined schema.","expect_column_values_to_match_json_schema(column=""supplier_info"", schema={""type"": ""object"", ""properties"": {""supplier_id"": {""type"": ""string""}, ""contact_details"": {""type"": ""object""}}})","expect_column_values_to_exist(column=""supplier_info"", value_set=[""supplier_id"", ""contact_details""])",0.6111111111111112,0.41176470588235287,0.6111111111111112,24.100436727614262
"For the `project_completion_date`, confirm that it is always later than the `project_start_date`.","expect_column_pair_values_A_to_be_greater_than_B(column_A=""project_completion_date"", column_B=""project_start_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""project_completion_date"", column_B=""project_start_date"")",1.0,1.0,1.0,100.00000000000004
For field 'user_metadata': Ensure that values in this column are valid JSON objects and conform to the specified JSON schema.,"expect_column_values_to_be_json_parseable(column=""user_metadata""),expect_column_values_to_match_json_schema(column=""user_metadata"", schema={""type"": ""object""})","expect_column_values_to_be_json_parseable(column=""user_metadata""),expect_column_values_to_match_json_schema(column=""user_metadata"", schema={""type"": ""object"", ""properties"": {""name"": {""type"": ""string""}, ""age"": {""type"": ""number""}, ""gender"": {""type"": ""string""}, ""address"": {""type"": ""object"", ""properties"": {""street"": {""type"": ""string""}, ""city"": {""type"": ""string""}, ""state"": {""type"": ""string""}, ""zipcode"": {""type"": ""string""}}}, ""phone_number"": {""type"": ""string""}, ""email"": {""type"": ""string""}, ""date_of_birth"": {""type"": ""string""}, ""date_of_death"": {""type"": ""string""}, ""occupation"": {""type"": ""string""}, ""education"": {""type"": ""string""}, ""interests"": {""type"": ""array"", ""items"": {""type"": ""string""}}}, ""required"": [""name"", ""age"", ""gender"", ""address"", ""phone_number"", ""email"", ""date_of_birth"", ""date_of_death"", ""occupation"", ""education"", ""interests""]}})",0.38983050847457623,0.3793103448275862,0.38983050847457623,15.023792567812414
Ensure the `battery_level` field contains non-negative integers and is less than or equal to 100.,"expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int"")","expect_column_values_to_be_between(column=""battery_level"", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=""battery_level"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
"Check that the table has exactly 1,000 rows and that the `category` column exists and contains only distinct values from the set ['Electronics', 'Home', 'Fashion'].","expect_table_row_count_to_equal(row_count=1000),expect_column_to_exist(column=""category""),expect_column_distinct_values_to_equal_set(column=""category"", value_set=['Electronics', 'Home', 'Fashion'])","expect_table_row_count_to_equal(1000),expect_column_to_exist(column=""category""),expect_column_values_to_be_in_set(column=""category"", value_set=['Electronics', 'Home', 'Fashion'])",0.8928571428571429,0.7777777777777779,0.8928571428571429,83.4057072044106
"Confirm that the `wallet_address` column consists only of valid Ethereum addresses, matching the regex pattern `^0x[a-fA-F0-9]{40}$`.","expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$"")","expect_column_values_to_match_regex(column=""wallet_address"", regex=r""^0x[a-fA-F0-9]{40}$"")",1.0,1.0,1.0,100.00000000000004
Ensure the `delivery_date` column values are parsed correctly as dates and are not in the past.,"expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=datetime.datetime.now())","expect_column_values_to_be_dateutil_parseable(column=""delivery_date""),expect_column_values_to_be_between(column=""delivery_date"", min_value=""2023-01-01"", max_value=""today"")  # Replace today with the current date.",0.7368421052631579,0.7272727272727273,0.7368421052631579,66.14182554147744
For table 'subscriptions': Ensure the row count is equal to the row count in table 'active_users'.,"expect_table_row_count_to_equal_other_table(table=""active_users"")","expect_table_row_count_to_equal_other_table(table=""subscriptions"", other_table=""active_users"")",0.88,0.8695652173913044,0.88,73.72886225113051
"Confirm that the `status` column only contains values from the set `['Draft', 'Published', 'Archived']`.","expect_column_values_to_be_in_set(column=""status"", value_set=[""Draft"", ""Published"", ""Archived""])","expect_column_values_to_be_in_set(column=""status"", value_set=['Draft', 'Published', 'Archived'])",1.0,1.0,1.0,66.93976514189524
For field 'watch_time': Ensure the field matches the type 'integer'. Ensure this field is between 0 and 86400 (in seconds). Ensure this field exists.,"expect_column_to_exist(column=""watch_time""),expect_column_values_to_be_of_type(column=""watch_time"", type_=""int""),expect_column_values_to_be_between(column=""watch_time"", min_value=0, max_value=86400)","expect_column_to_exist(column=""watch_time""),expect_column_values_to_be_of_type(column=""watch_time"", type_=""int""),expect_column_values_to_be_between(column=""watch_time"", min_value=0, max_value=86400)",1.0,1.0,1.0,100.00000000000004
Ensure the `call_duration` column contains only positive integers and that the average duration does not exceed 1800 seconds.,"expect_column_values_to_be_between(column=""call_duration"", min_value=1, max_value=None),expect_column_mean_to_be_between(column=""call_duration"", min_value=None, max_value=1800)","expect_column_values_to_be_between(column=""call_duration"", min_value=1, max_value=None),expect_column_mean_to_be_between(column=""call_duration"", min_value=0, max_value=1800)",0.9666666666666667,0.9310344827586207,0.9666666666666667,96.0132862288073
Confirm that the number of rows in the `alerts` table is equal to the number of rows in the `resolved_alerts` table.,"expect_table_row_count_to_equal_other_table(table=""alerts"", other_table=""resolved_alerts"")","expect_table_row_count_to_equal_other_table(table=""alerts"", other_table=""resolved_alerts"")",1.0,1.0,1.0,100.00000000000004
"For the `user_role` column: Ensure values are from the specified set `['admin', 'editor', 'viewer']`. Ensure there are no missing values.","expect_column_values_to_be_in_set(column=""user_role"", value_set=['admin', 'editor', 'viewer']),expect_column_values_to_not_be_null(column=""user_role"")","expect_column_values_to_be_in_set(column=""user_role"", value_set=['admin', 'editor', 'viewer']),expect_column_values_to_not_be_null(column=""user_role"")",1.0,1.0,1.0,100.00000000000004
For field `email`: Ensure the field is required (not null). Verify that all values are in valid email format.,"expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_values_to_not_be_null(column=""email""),expect_column_values_to_match_regex(column=""email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to validate email format.",0.8627450980392156,0.8571428571428572,0.8627450980392156,86.05117459157007
For field 'project_budget': Ensure the field matches the type 'float'. Ensure values in (project_budget) are greater than or equal to 1000. Ensure this field exists.,"expect_column_to_exist(column=""project_budget""),expect_column_values_to_be_of_type(column=""project_budget"", type_=""float""),expect_column_values_to_be_between(column=""project_budget"", min_value=1000, max_value=None)","expect_column_to_exist(column=""project_budget""),expect_column_values_to_be_of_type(column=""project_budget"", type_=""float""),expect_column_values_to_be_between(column=""project_budget"", min_value=1000)",0.9538461538461539,0.9523809523809523,0.9538461538461539,91.13468812604467
Verify that the `player_stats` column contains valid JSON objects that conform to the specified schema for player performance metrics.,"expect_column_values_to_match_json_schema(column=""player_stats"", schema=""your_schema_here"")","expect_column_values_to_match_json_schema(column=""player_stats"", schema={""type"": ""object"", ""properties"": {""points"": {""type"": ""number""}, ""games_played"": {""type"": ""number""}, ""games_won"": {""type"": ""number""}, ""games_lost"": {""type"": ""number""}, ""games_tied"": {""type"": ""number""}, ""games_played_per_game"": {""type"": ""number""}, ""games_won_per_game"": {""type"": ""number""}, ""games_lost_per_game"": {""type"": ""number""}, ""games_tied_per_game"": {""type"": ""number""}, ""games_played_per_game"": {""type"": ""number""}, ""games_won_per_game"": {""type"": ""number""}, ""games_lost_per_game"": {""type"": ""number""}, ""games_tied_per_game"": {""type"": ""number""}, ""games_played_per_game"": {""type"": ""number""}, ""games_won_per_game"": {""type"": ""number""}, ""games_lost_per_game"": {""type"": ""number""}, ""games_tied_per_game"": {""type"": ""number""}, ""games_played_per_game"": {""type"": ""number""}, ""games_won_per_game"": {""type"": ""number""}, ""games_lost",0.16541353383458646,0.15267175572519084,0.16541353383458646,5.8607789876034895
"For the `location` field, ensure the string length is between 5 and 100 characters and does not contain any special characters.","expect_column_value_lengths_to_be_between(column=""location"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""location"", regex=r""[!@#$%^&*(),.?\"":{}|<>]"")","expect_column_value_lengths_to_be_between(column=""location"", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=""location"", regex=r""[^\w\s]"")  # Remove special characters from the column.",0.8666666666666666,0.8620689655172413,0.8666666666666666,72.9060580944449
"For the `consumption` column, ensure all values are within the range of [0, 100000] kWh and are arranged in increasing order.","expect_column_values_to_be_between(column=""consumption"", min_value=0, max_value=100000),expect_column_values_to_be_increasing(column=""consumption"")","expect_column_values_to_be_between(column=""consumption"", min_value=0, max_value=100000),expect_column_values_to_be_increasing(column=""consumption"")",1.0,1.0,1.0,100.00000000000004
"For table 'energy_usage_reports': Ensure the number of rows is between 30 and 365. Ensure all required fields ('meter_id', 'usage', 'timestamp') exist.","expect_table_row_count_to_be_between(min_value=30, max_value=365),expect_column_to_exist(column=""meter_id""),expect_column_to_exist(column=""usage""),expect_column_to_exist(column=""timestamp"")","expect_table_row_count_to_be_between(min_value=30, max_value=365),expect_column_to_exist(column=""meter_id""),expect_column_to_exist(column=""usage""),expect_column_to_exist(column=""timestamp"")  # Note: This is a sample expectation list. You may need to customize it based on your specific requirements.",0.7804878048780487,0.775,0.7804878048780487,76.46670518725684
"For the `transaction_date` column, ensure all values are valid datetime strings that can be parsed and match the format `'%m/%d/%Y'`.","expect_column_values_to_be_dateutil_parseable(column=""transaction_date""),expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format='%m/%d/%Y')","expect_column_values_to_match_strftime_format(column=""transaction_date"", strftime_format=""%m/%d/%Y"")",0.7499999999999999,0.7368421052631579,0.7499999999999999,48.29504807475566
For the `monthly_bill` column: Ensure that the mean value is greater than or equal to $50 and less than or equal to $500.,"expect_column_mean_to_be_between(column=""monthly_bill"", min_value=50, max_value=500)","expect_column_mean_to_be_between(column=""monthly_bill"", min_value=50, max_value=500)",1.0,1.0,1.0,100.00000000000004
For field 'transaction_amounts': Ensure that the Kullback-Leibler (KL) divergence between transaction distributions is below 0.1.,"expect_column_kl_divergence_to_be_less_than(column=""transaction_amounts"", threshold=0.1)","expect_column_kl_divergence_to_be_between(column=""transaction_amounts"", min_value=0.0, max_value=0.1)",0.6875000000000001,0.5333333333333333,0.6875000000000001,59.73854416921759
Ensure the total of `cost_price` and `shipping_cost` columns matches the `total_price` column for each product entry.,"expect_column_pair_values_to_be_equal(column_A=""cost_price"", column_B=""total_price""),expect_column_pair_values_to_be_equal(column_A=""shipping_cost"", column_B=""total_price"")","expect_multicolumn_sum_to_equal(column_list=[""cost_price"", ""shipping_cost""], target_column=""total_price"")",0.4888888888888889,0.18604651162790697,0.4888888888888889,22.999361913812788
"For field 'service_type': Ensure the field matches the type 'text'. Validate that all values in 'service_type' are among the defined set: {electricity, water, gas}.","expect_column_values_to_be_of_type(column=""service_type"", type_=""text""),expect_column_values_to_be_in_set(column=""service_type"", value_set=[""electricity"", ""water"", ""gas""])","expect_column_values_to_be_of_type(column=""service_type"", type_=""text""),expect_column_values_to_be_in_set(column=""service_type"", value_set={""electricity"", ""water"", ""gas""})  # Replace with actual set of values.",0.9,0.896551724137931,0.9,83.92824031781319
"Ensure that the `incident_severity` column values are categorized as 'low', 'medium', 'high', or 'critical'. Validate that the distribution of severities does not exceed a 30% threshold for any individual category.","expect_column_values_to_be_in_set(column=""incident_severity"", value_set=[""low"", ""medium"", ""high"", ""critical""]),expect_column_proportion_of_unique_values_to_be_between(column=""incident_severity"", min_value=0.0, max_value=0.3)","expect_column_values_to_be_in_set(column=""incident_severity"", value_set=[""low"", ""medium"", ""high"", ""critical""]),expect_column_proportion_to_be_between(column=""incident_severity"", min_value=0.1, max_value=0.3)  # Replace 0.1 and 0.3 with your desired thresholds.",0.8354430379746837,0.7532467532467533,0.8101265822784809,84.4353221007651
"For the `attack_vector` column: Ensure values are limited to the set `['Phishing', 'Malware', 'DDoS']`.","expect_column_values_to_be_in_set(column=""attack_vector"", value_set=['Phishing', 'Malware', 'DDoS'])","expect_column_values_to_be_in_set(column=""attack_vector"", value_set=['Phishing', 'Malware', 'DDoS'])",1.0,1.0,1.0,100.00000000000004
Ensure the `delivery_time_days` values are between 1 and 30.,"expect_column_values_to_be_between(column=""delivery_time_days"", min_value=1, max_value=30)","expect_column_values_to_be_between(column=""delivery_time_days"", min_value=1, max_value=30)",1.0,1.0,1.0,100.00000000000004
Confirm that the `unique_course_ids` column matches the distinct set of course IDs offered in the current semester.,"expect_column_distinct_values_to_equal_set(column=""unique_course_ids"", value_set=current_semester_course_ids)","expect_column_values_to_be_unique(column=""unique_course_ids"")",0.5925925925925927,0.39999999999999997,0.5925925925925927,36.92306321708014
For field 'feedback': Validate that all feedback entries have a length between 10 and 500 characters and do not contain any profanity.,"expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""\b(profanity1|profanity2|profanity3)\b"")","expect_column_value_lengths_to_be_between(column=""feedback"", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=""feedback"", regex=r""^(?:[a-zA-Z0-9_]{1,50}|[a-zA-Z0-9_]{1,50}\.[a-zA-Z0-9_]{1,50}|[a-zA-Z0-9_]{1,50}\.[a-zA-Z0-9_]{1,50}\.[a-zA-Z0-9_]{1,50})$"")  # Replace with actual regex for profanity.",0.5252525252525252,0.5154639175257731,0.5252525252525252,43.143972518813754
"Ensure the `transaction_status` column only contains values from the set ['Pending', 'Completed', 'Failed'].","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['Pending', 'Completed', 'Failed'])","expect_column_values_to_be_in_set(column=""transaction_status"", value_set=['Pending', 'Completed', 'Failed'])",1.0,1.0,1.0,100.00000000000004
"For the `salary` field: Validate that all values are of type 'decimal', and ensure no missing values are present.","expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_not_be_null(column=""salary"")","expect_column_values_to_be_of_type(column=""salary"", type_=""decimal""),expect_column_values_to_not_be_null(column=""salary"")",1.0,1.0,1.0,100.00000000000004
For the `post_id` field: Ensure the field is required (not null). Ensure each value is unique and matches the type 'integer'.,"expect_column_values_to_not_be_null(column=""post_id""),expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""int"")","expect_column_values_to_not_be_null(column=""post_id""),expect_column_values_to_be_unique(column=""post_id""),expect_column_values_to_be_of_type(column=""post_id"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Confirm that the `phone_number` field has a length of exactly 10 digits and does not contain any letters or special characters.,"expect_column_value_lengths_to_equal(column=""phone_number"", length=10),expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\d{10}$"")","expect_column_value_lengths_to_equal(column=""phone_number"", value=10),expect_column_values_to_not_match_regex(column=""phone_number"", regex=r""[a-zA-Z0-9\s\.,\-\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\*\(\)\[\]\{\}\/\?\!\@\#\$\%\^\&\",0.8076923076923077,0.72,0.8076923076923077,10.306537125843526
"For the 'case_status' field: Ensure all values are distinct and match the allowed set ['Open', 'Closed', 'Pending', 'On Appeal'].","expect_column_values_to_be_unique(column=""case_status""),expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending', 'On Appeal'])","expect_column_values_to_be_in_set(column=""case_status"", value_set=['Open', 'Closed', 'Pending', 'On Appeal'])",0.7906976744186047,0.7804878048780487,0.7906976744186047,56.690271550530014
Check that the `billing_cycle` column has exactly 12 rows representing each month of the year.,"expect_column_unique_value_count_to_be_between(column=""billing_cycle"", min_value=12, max_value=12)","expect_column_value_lengths_to_equal(column=""billing_cycle"", value=12)",0.6428571428571428,0.3076923076923077,0.6428571428571428,38.449405309818374
Validate that the `credit_limit` is always greater than or equal to the highest `transaction_amount` for the respective account.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""credit_limit"", column_B=""transaction_amount"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""credit_limit"", column_B=""transaction_amount"")",1.0,1.0,1.0,100.00000000000004
"For the `likes` field, confirm that all entries are non-negative integers that do not exceed `1000000`.","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=""likes"", type_=""int"")","expect_column_values_to_be_between(column=""likes"", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=""likes"", type_=""int"")",1.0,1.0,1.0,100.00000000000004
Validate that the `location` field does not match any entries in the list of restricted areas.,"expect_column_values_to_not_match_regex_list(column=""location"", regex_list=[""restricted_area_1"", ""restricted_area_2"", ""restricted_area_3""])","expect_column_values_to_not_be_in_set(column=""location"", value_set=restricted_areas)",0.5142857142857143,0.3636363636363637,0.5142857142857143,25.818079476319973
Verify that the `created_at` and `updated_at` timestamps in both health and CMS records are in the correct `datetime` format and have no missing values.,"expect_column_values_to_match_strftime_format(column=""created_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_match_strftime_format(column=""updated_at"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_not_be_null(column=""updated_at"")","expect_column_values_to_be_of_type(column=""created_at"", type_=""datetime""),expect_column_values_to_not_be_null(column=""created_at""),expect_column_values_to_be_of_type(column=""updated_at"", type_=""datetime""),expect_column_values_to_not_be_null(column=""updated_at"")  # Note: This expectation is optional if the column is not nullable.",0.6126126126126126,0.5321100917431193,0.6126126126126126,60.66656756562353
Ensure the `customer_age` values have a mean of at least 30 years and a maximum of 70 years.,"expect_column_mean_to_be_between(column=""customer_age"", min_value=30, max_value=70)","expect_column_mean_to_be_between(column=""customer_age"", min_value=30, max_value=70)",1.0,1.0,1.0,100.00000000000004
"Validate that the `interest_rate` column's standard deviation is below 0.05, indicating minimal variation among rates.","expect_column_stdev_to_be_between(column=""interest_rate"", min_value=0, max_value=0.05)","expect_column_stdev_to_be_between(column=""interest_rate"", min_value=0.0, max_value=0.05)",0.9696969696969697,0.967741935483871,0.9696969696969697,91.57103753711765
Check that the sum of the `amount_sent` and `amount_received` columns equals the value in the `total_balance` column.,"expect_multicolumn_sum_to_equal(column_list=[""amount_sent"", ""amount_received""], sum_value=""total_balance"")","expect_multicolumn_sum_to_equal(column_list=[""amount_sent"", ""amount_received""], target_column=""total_balance"")",0.8666666666666667,0.7857142857142857,0.8666666666666667,88.11605932412907
"For table 'blocks': Ensure the columns match the specified order ('block_id', 'miner', 'timestamp'). Ensure the number of rows is greater than or equal to 1.","expect_table_columns_to_match_ordered_list(ordered_list=[""block_id"", ""miner"", ""timestamp""]),expect_table_row_count_to_be_between(min_value=1, max_value=None)","expect_column_values_to_match_column_order(column_list=['block_id','miner', 'timestamp']),expect_table_row_count_to_be_between(min_value=1, max_value=None)",0.8846153846153846,0.72,0.8846153846153846,59.02222558775532
Ensure that the sum of `adults` and `children` columns equals the value in the `guest_count` column.,"expect_multicolumn_sum_to_equal(column_list=[""adults"", ""children""], target_column=""guest_count"")","expect_multicolumn_sum_to_equal(column_list=[""adults"", ""children""], target_column=""guest_count"")",1.0,1.0,1.0,100.00000000000004
"For field 'evidence_list': Ensure the field can be null. If present, validate that each item in 'evidence_list' is unique.","expect_column_values_to_be_null(column=""evidence_list""),expect_column_values_to_be_unique(column=""evidence_list"")","expect_column_values_to_be_null(column=""evidence_list""),expect_column_values_to_be_unique(column=""evidence_list"")  # Replace with actual validation logic.",0.878048780487805,0.8717948717948718,0.878048780487805,84.93675264043027
"For the `platform` field: Ensure that values match one of the defined categories: `['PC', 'Xbox', 'PlayStation', 'Switch']`.","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])","expect_column_values_to_be_in_set(column=""platform"", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])",1.0,1.0,1.0,100.00000000000004
For field 'shipment_date': Ensure this field exists. Validate that all entries in 'shipment_date' are not older than the current date and are in 'YYYY-MM-DD' format.,"expect_column_to_exist(column=""shipment_date""),expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""shipment_date"")  # This helps in ensuring the date is valid and can be parsed.","expect_column_to_exist(column=""shipment_date""),expect_column_values_to_match_strftime_format(column=""shipment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_between(column=""shipment_date"", min_value=""2023-01-01"", max_value=""today"")  # Replace today with the current date.",0.7191011235955056,0.6436781609195402,0.7191011235955056,70.46884847550278
"For field 'status': Ensure values in (status) must exist in the set {'active', 'inactive', 'pending', 'completed'}. Ensure this field exists.","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set={'active', 'inactive', 'pending', 'completed'})","expect_column_to_exist(column=""status""),expect_column_values_to_be_in_set(column=""status"", value_set={'active', 'inactive', 'pending', 'completed'})  # Note: This is a sample implementation. Please refer to your specific requirements.",0.7777777777777778,0.7692307692307693,0.7777777777777778,74.79401710988826
Verify that the `admission_date` and `discharge_date` columns have dates where `discharge_date` is greater than `admission_date`.,"expect_column_pair_values_A_to_be_greater_than_B(column_A=""discharge_date"", column_B=""admission_date"")","expect_column_pair_values_A_to_be_greater_than_B(column_A=""discharge_date"", column_B=""admission_date"")",1.0,1.0,1.0,100.00000000000004
For field 'attachment_type': Ensure the field matches the type 'text'. Validate that values in (attachment_type) conform to a list of acceptable file extensions using regex.,"expect_column_values_to_be_of_type(column=""attachment_type"", type_=""text""),expect_column_values_to_match_regex(column=""attachment_type"", regex=r""^(pdf|doc|docx|xls|xlsx|jpg|jpeg|png|gif)$"")","expect_column_values_to_be_of_type(column=""attachment_type"", type_=""text""),expect_column_values_to_match_regex(column=""attachment_type"", regex=r"".*\.(jpg|jpeg|png|gif|bmp|tiff|tif|svg|pdf|doc|docx|ppt|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|pptx|txt|md|pdf|docx|pptx|xls|xlsx|",0.4266666666666667,0.37837837837837845,0.37333333333333335,26.605558886083607
Ensure the `citizen_id` column contains only unique values and must not allow null entries.,"expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")","expect_column_values_to_be_unique(column=""citizen_id""),expect_column_values_to_not_be_null(column=""citizen_id"")",1.0,1.0,1.0,100.00000000000004
"For field 'experiment_type': Ensure the field matches the type 'text'. Ensure values in (experiment_type) must exist in the set (['In Vitro', 'In Vivo', 'Computational']). Ensure this field exists.","expect_column_to_exist(column=""experiment_type""),expect_column_values_to_be_of_type(column=""experiment_type"", type_=""text""),expect_column_values_to_be_in_set(column=""experiment_type"", value_set=['In Vitro', 'In Vivo', 'Computational'])","expect_column_to_exist(column=""experiment_type""),expect_column_values_to_be_of_type(column=""experiment_type"", type_=""text""),expect_column_values_to_be_in_set(column=""experiment_type"", value_set=['In Vitro', 'In Vivo', 'Computational'])  # Note: This is a placeholder value_set, please replace with actual value_set.",0.8470588235294119,0.8433734939759037,0.8470588235294119,81.09191427946678
For field 'publish_date': Ensure all datetime entries conform to the format '%Y-%m-%d %H:%M:%S'. Validate that the date is not set in the future.,"expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_less_than(column=""publish_date"", value=datetime.datetime.now())","expect_column_values_to_match_strftime_format(column=""publish_date"", strftime_format=""%Y-%m-%d %H:%M:%S""),expect_column_values_to_be_dateutil_parseable(column=""publish_date""),expect_column_values_to_be_between(column=""publish_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.6506024096385543,0.5925925925925926,0.6506024096385543,54.460216030170564
Validate that the `enrollment_date` column contains dates formatted as `YYYY-MM-DD` and that all dates are in the past.,"expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_increasing(column=""enrollment_date"")","expect_column_values_to_match_strftime_format(column=""enrollment_date"", strftime_format=""%Y-%m-%d""),expect_column_values_to_be_dateutil_parseable(column=""enrollment_date""),expect_column_values_to_be_between(column=""enrollment_date"", min_value=""1900-01-01"", max_value=""today"")  # Replace today with the current date.",0.638888888888889,0.6,0.638888888888889,49.24624637240325
For the `user_id` column: Ensure values are unique and belong to the specified set of valid user IDs. Ensure the field is required (not null).,"expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_be_in_set(column=""user_id"", value_set=valid_user_ids),expect_column_values_to_not_be_null(column=""user_id"")","expect_column_values_to_be_unique(column=""user_id""),expect_column_values_to_not_be_null(column=""user_id"")  # Note: This assumes that the column is not nullable. If it is nullable, you may need to modify the expectation accordingly.",0.5945945945945946,0.4999999999999999,0.5135135135135136,56.48195190011008
"Validate that the `status` column in the `transactions` table contains only the values `['pending', 'completed', 'failed']` and does not allow null values.","expect_column_values_to_be_in_set(column=""status"", value_set=['pending', 'completed', 'failed']),expect_column_values_to_not_be_null(column=""status"")","expect_column_values_to_be_in_set(column=""status"", value_set=['pending', 'completed', 'failed']),expect_column_values_to_not_be_null(column=""status"")",1.0,1.0,1.0,100.00000000000004
For `final_score`: Ensure the values are non-negative integers not exceeding 100 and that they follow a descending order across student records.,"expect_column_values_to_be_between(column=""final_score"", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=""final_score"")","expect_column_values_to_be_between(column=""final_score"", min_value=0, max_value=100),expect_column_values_to_be_increasing(column=""final_score"")  # Note: This expectation may not be applicable depending on the use case.  # Please refer to the actual requirements for more information.",0.6666666666666666,0.6268656716417911,0.6666666666666666,63.1664691234082
Verify that the total `funding_amount` for each project does not exceed the allocated budget and that it is a positive integer.,"expect_column_sum_to_be_between(column=""funding_amount"", min_value=0),expect_column_values_to_be_between(column=""funding_amount"", min_value=1),expect_column_values_to_be_of_type(column=""funding_amount"", type_=""int"")","expect_column_values_to_be_between(column=""funding_amount"", min_value=0, max_value=100000),expect_column_values_to_be_of_type(column=""funding_amount"", type_=""int"")",0.7936507936507936,0.721311475409836,0.761904761904762,64.3598980276062
Check that the `age` column values are between 0 and 120.,"expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)","expect_column_values_to_be_between(column=""age"", min_value=0, max_value=120)",1.0,1.0,1.0,100.00000000000004
For field 'timestamp': Ensure the field is formatted as a valid UNIX timestamp. Ensure this field exists.,"expect_column_to_exist(column=""timestamp""),expect_column_values_to_be_dateutil_parseable(column=""timestamp"")","expect_column_to_exist(column=""timestamp""),expect_column_values_to_match_strftime_format(column=""timestamp"", strftime_format=""%Y-%m-%dT%H:%M:%S.%fZ""),expect_column_values_to_be_of_type(column=""timestamp"", type_=""int"")  # Assuming timestamp is of type int.",0.4642857142857143,0.40740740740740744,0.4642857142857143,30.581176067314306
"For the `loan_amount` column, ensure the mean value is above 5000 and below 50000.","expect_column_mean_to_be_between(column=""loan_amount"", min_value=5000, max_value=50000)","expect_column_mean_to_be_between(column=""loan_amount"", min_value=5000, max_value=50000)",1.0,1.0,1.0,100.00000000000004
For the `ip_address` field: Ensure it adheres to the correct format and does not contain any null values.,"expect_column_values_to_not_be_null(column=""ip_address""),expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){2}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"")","expect_column_values_to_match_regex(column=""ip_address"", regex=r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""),expect_column_values_to_not_be_null(column=""ip_address"")",0.5494505494505496,0.4719101123595506,0.32967032967032966,23.356993331055566
"Ensure the `points_scored` column values are between 0 and 150, as points scored in a game cannot exceed this range.","expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=150)","expect_column_values_to_be_between(column=""points_scored"", min_value=0, max_value=150)",1.0,1.0,1.0,100.00000000000004
Verify that the number of rows in the `daily_weather` table is equal to 365.,"expect_table_row_count_to_equal(table=""daily_weather"", value=365)","expect_table_row_count_to_equal(table=""daily_weather"", value=365)",1.0,1.0,1.0,100.00000000000004
For field 'service_request_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field contains unique values.,"expect_column_values_to_not_be_null(column=""service_request_id""),expect_column_values_to_be_of_type(column=""service_request_id"", type_=""text""),expect_column_values_to_be_unique(column=""service_request_id"")","expect_column_values_to_not_be_null(column=""service_request_id""),expect_column_values_to_be_of_type(column=""service_request_id"", type_=""text""),expect_column_values_to_be_unique(column=""service_request_id"")  # Note: This expectation may not be applicable depending on the requirements.",0.8607594936708861,0.8571428571428571,0.8607594936708861,84.69696211042334
Ensure that the `phone_number` column across all datasets matches the pattern `^\(\d{3}\) \d{3}-\d{4}$` and contains valid area codes.,"expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_be_in_set(column=""phone_number"", value_set=[f""({area_code})"" for area_code in valid_area_codes])","expect_column_values_to_match_regex(column=""phone_number"", regex=r""^\(\d{3}\) \d{3}-\d{4}$""),expect_column_values_to_be_between(column=""phone_number"", min_value=100000, max_value=999999)  # Assuming valid area codes are between 100000 and 999999.",0.725,0.6410256410256411,0.725,69.15017933005888
For field 'diagnosis_code': Ensure the column contains unique entries. Verify that all values conform to the ICD-10 code format.,"expect_column_values_to_be_unique(column=""diagnosis_code""),expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-TV-Z][0-9]{1,7}$"")","expect_column_values_to_be_unique(column=""diagnosis_code""),expect_column_values_to_match_regex(column=""diagnosis_code"", regex=r""^[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9]{1}[A-Z]{1}[0-9",0.29069767441860467,0.25882352941176473,0.29069767441860467,15.071726504644626
Check that the median watch time in the `watch_time` column is greater than 30 minutes.,"expect_column_median_to_be_between(column=""watch_time"", min_value=30, max_value=None)","expect_column_mean_to_be_between(column=""watch_time"", min_value=30, max_value=None)",0.9333333333333333,0.8571428571428571,0.9333333333333333,91.57103753711765
For field 'client_email': Ensure the field matches the type 'text'. Ensure values in (client_email) match a valid email format. Ensure this field exists.,"expect_column_to_exist(column=""client_email""),expect_column_values_to_be_of_type(column=""client_email"", type_=""text""),expect_column_values_to_match_regex(column=""client_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w{2,}$"")","expect_column_to_exist(column=""client_email""),expect_column_values_to_be_of_type(column=""client_email"", type_=""text""),expect_column_values_to_match_regex(column=""client_email"", regex=r""^[\w\.-]+@[\w\.-]+\.\w+$"")  # Regular expression to match valid email format.",0.8918918918918919,0.8888888888888888,0.8918918918918919,88.97457531986603
"Ensure that the `transaction_type` column contains only the values `['Deposit', 'Withdrawal', 'Transfer']`.","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=[""Deposit"", ""Withdrawal"", ""Transfer""])","expect_column_values_to_be_in_set(column=""transaction_type"", value_set=['Deposit', 'Withdrawal', 'Transfer'])",1.0,1.0,1.0,68.69938387430254
"In the `threat_level` column: Ensure values fall within the set `['low', 'medium', 'high']` and that there are no duplicate entries.","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['low', 'medium', 'high']),expect_column_values_to_be_unique(column=""threat_level"")","expect_column_values_to_be_in_set(column=""threat_level"", value_set=['low','medium', 'high']),expect_column_values_to_be_unique(column=""threat_level"")  # Note: This expectation may not be necessary depending on the specific requirements.",0.8,0.7931034482758621,0.8,78.09553494145803
