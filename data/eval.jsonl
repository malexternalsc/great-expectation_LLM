{"user_prompt":"For field `feedback_json`: Ensure values in `feedback_json` are valid JSON objects and conform to the specified schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"feedback_json\"),expect_column_values_to_match_json_schema(column=\"feedback_json\", schema=\"your_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify the `shipment_date` format is 'YYYY-MM-DD' and all values are parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"shipment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `wind_speed` column values do not exceed 150 km\/h.","generated_expectations":"expect_column_max_to_be_between(column=\"wind_speed\", min_value=None, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_start_date` column: Ensure it is of type 'datetime' and adheres to the format 'YYYY-MM-DD'. Validate that no readings are null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"service_start_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"service_start_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"service_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the distribution of `scores` in the `quiz_results` table passes the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"scores\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_type`: Ensure this field contains only values from the set `['Apartment', 'Condo', 'Single Family', 'Townhouse']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"property_type\", value_set=['Apartment', 'Condo', 'Single Family', 'Townhouse'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `quiz_scores` column has a mean score that is greater than or equal to 70.","generated_expectations":"expect_column_mean_to_be_between(column=\"quiz_scores\", min_value=70)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `rating` column: Validate that the mean rating does not exceed 10 and that all values are numeric.","generated_expectations":"expect_column_mean_to_be_between(column=\"rating\", min_value=None, max_value=10),expect_column_values_to_be_of_type(column=\"rating\", type_=\"float\")  # Assuming ratings are float; change to \"int\" if necessary.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `arrival_time`: Ensure values are parsed correctly and fall within the expected delivery window.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"arrival_time\"),expect_column_values_to_be_between(column=\"arrival_time\", min_value=\"2023-01-01T00:00:00\", max_value=\"2023-12-31T23:59:59\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `temperature_reading` and `humidity_reading` columns: Assess that the Kullback-Leibler divergence between their distributions is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column_a=\"temperature_reading\", column_b=\"humidity_reading\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'monthly_fee': Validate that the monthly fee is within the range of [20, 100] and that the total revenue from all plans does not exceed 10,000.","generated_expectations":"expect_column_values_to_be_between(column=\"monthly_fee\", min_value=20, max_value=100),expect_column_sum_to_be_between(column=\"monthly_fee\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `created_at` timestamps are in chronological order across the dataset.","generated_expectations":"expect_column_values_to_be_increasing(column=\"created_at\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `student_id` column exists and that all values are unique and match the format 'S123456'.","generated_expectations":"expect_column_to_exist(column=\"student_id\"),expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_match_regex(column=\"student_id\", regex=r\"^S\\d{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `message_length` column contains values within the range of 1 to 5000 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"message_length\", min_value=1, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `product_code` column: Ensure all values conform to the regex pattern `^[A-Z]{3}-[0-9]{4}$` and are unique within the dataset.","generated_expectations":"expect_column_values_to_match_regex(column=\"product_code\", regex=r\"^[A-Z]{3}-[0-9]{4}$\"),expect_column_values_to_be_unique(column=\"product_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check if the `wallet_balance` column values are in decreasing order, reflecting proper transaction history.","generated_expectations":"expect_column_values_to_be_decreasing(column=\"wallet_balance\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `content` field does not exceed 5000 characters and contains no null values.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"content\", min_value=0, max_value=5000),expect_column_values_to_not_be_null(column=\"content\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'views': Ensure the sum of views is greater than 0. Check that the average views per video is within the range of 100 to 1,000,000.","generated_expectations":"expect_column_sum_to_be_between(column=\"views\", min_value=0.01, max_value=None),expect_column_mean_to_be_between(column=\"views\", min_value=100, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `filing_date`, verify that all entries are within the last five years and formatted as 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_be_between(column=\"filing_date\", min_value=\"2018-01-01\", max_value=\"2023-12-31\"),expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that all values in the `hire_date` column are formatted as 'YYYY-MM-DD' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `meter_reading` column contains only numeric values and is within the range of 0 to 5000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"meter_reading\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"meter_reading\", min_value=0, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `call_duration` values are within the range of 0 to 3600 seconds, indicating durations in hours.","generated_expectations":"expect_column_values_to_be_between(column=\"call_duration\", min_value=0, max_value=3600)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `data_file` asset exists and matches the specified hash value. Ensure the file size is within the range of 1MB to 10MB.","generated_expectations":"expect_file_to_exist(data_asset=\"data_file\"),expect_file_hash_to_equal(data_asset=\"data_file\", expected_hash=\"your_expected_hash_value_here\"),expect_file_size_to_be_between(data_asset=\"data_file\", min_size=1*1024*1024, max_size=10*1024*1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of lines in the file specified in `weather_data_file` matches the expected count based on the dataset requirements.","generated_expectations":"expect_file_line_regex_match_count_to_equal(file_path=\"weather_data_file\", match_count=EXPECTED_COUNT)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `absentee_ballot_request` field: Confirm that the request dates are formatted as 'YYYY-MM-DD' and fall within the range of the election campaign period.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"absentee_ballot_request\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"absentee_ballot_request\", min_value=\"start_date\", max_value=\"end_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `reservation_id` column, ensure all entries are unique and of type `string`.","generated_expectations":"expect_column_values_to_be_unique(column=\"reservation_id\"),expect_column_values_to_be_of_type(column=\"reservation_id\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure the field is required (not null). Ensure values in this field are unique across the 'user_profiles' table.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_id\"),expect_select_column_values_to_be_unique_within_record(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column contains only unique values and matches the type 'integer'. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_be_of_type(column=\"product_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `total_calls` and `total_texts`: Ensure the sum of both fields for each customer matches the expected total in the `usage_summary` column.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"total_calls\", \"total_texts\"], target_column=\"usage_summary\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'products': Ensure the column 'price' exists and contains positive numeric values. Validate that the total row count is greater than 100.","generated_expectations":"expect_column_to_exist(column=\"price\"),expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=None),expect_table_row_count_to_be_greater_than(value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `created_at` field: Ensure all datetime values are in UTC and conform to the 'YYYY-MM-DD HH:MM:SS' format.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"created_at\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"created_at\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column contains unique values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_not_be_null(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_quality_score': Ensure the field exists. Validate that values in (data_quality_score) fall within the range of 1 to 10.","generated_expectations":"expect_column_to_exist(column=\"data_quality_score\"),expect_column_values_to_be_between(column=\"data_quality_score\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `view_count` is a non-negative integer and is arranged in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"view_count\", min_value=0, max_value=None),expect_column_values_to_be_increasing(column=\"view_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `temperature` column, ensure all values are within the range of -50 to 50 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `origin` and `destination` columns: Ensure that every `origin` value has a corresponding `destination` value within the set of valid locations, ensuring no null entries.","generated_expectations":"expect_column_values_to_not_be_null(column=\"origin\"),expect_column_values_to_not_be_null(column=\"destination\"),expect_column_pair_values_to_be_in_set(column_A=\"origin\", column_B=\"destination\", value_set=valid_locations)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column contains no duplicate entries across the dataset.","generated_expectations":"expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `last_sold_price` column contains no negative values and is not null.","generated_expectations":"expect_column_values_to_be_between(column=\"last_sold_price\", min_value=0),expect_column_values_to_not_be_null(column=\"last_sold_price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_time` column values are in the format 'HH:MM:SS' and fall within the range of '00:00:00' to '23:59:59'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_time\", strftime_format=\"%H:%M:%S\"),expect_column_values_to_be_between(column=\"transaction_time\", min_value=\"00:00:00\", max_value=\"23:59:59\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `voter_id` column contains only unique values and cannot be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"voter_id\"),expect_column_values_to_not_be_null(column=\"voter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `data_file` exists, matches the specified MD5 hash, and complies with the line count and regular expression check.","generated_expectations":"expect_file_to_exist(file_path=\"data_file\"),expect_file_hash_to_equal(file_path=\"data_file\", hash_value=\"your_md5_hash_here\"),expect_file_line_regex_match_count_to_equal(file_path=\"data_file\", regex=\"your_regex_here\", count=your_count_here)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `symptoms` column has string lengths that do not exceed `255` characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"symptoms\", min_value=0, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ballot_type` field contains only values from the set ['Mail-in', 'In-person', 'Provisional']. No missing values allowed.","generated_expectations":"expect_column_values_to_be_in_set(column=\"ballot_type\", value_set=['Mail-in', 'In-person', 'Provisional']),expect_column_values_to_not_be_null(column=\"ballot_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `game_session_start` and `game_session_end` columns contain datetime values that correctly represent the start and end of gaming sessions.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"game_session_start\"),expect_column_values_to_be_dateutil_parseable(column=\"game_session_end\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"game_session_start\", column_B=\"game_session_end\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the counts of unique `student_ids` in `Education` and `player_ids` in `Sports Analytics` are equal for those enrolled in dual programs.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"Education.student_ids\", column_B=\"Sports Analytics.player_ids\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the distribution of `signal_strength` passes the KS test for normality with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"signal_strength\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `termination_date` field: Ensure it is null for active employees and of type 'date' when populated.","generated_expectations":"expect_column_values_to_be_null(column=\"termination_date\"),expect_column_values_to_be_of_type(column=\"termination_date\", type_=\"date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'fraud_flag': Ensure this field is a boolean. Validate that all entries in (fraud_flag) are either 'True' or 'False'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"fraud_flag\", type_=\"boolean\"),expect_column_values_to_be_in_set(column=\"fraud_flag\", value_set=[True, False])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `citizen_id` column in the `application_records` table is unique and corresponds to valid entries in the `citizens` table.","generated_expectations":"expect_column_values_to_be_unique(column=\"citizen_id\"),expect_column_pair_values_to_be_in_set(column_A=\"citizen_id\", column_B=\"citizens\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `last_contact_date` column contains valid datetime strings and is not null.","generated_expectations":"expect_column_to_exist(column=\"last_contact_date\"),expect_column_values_to_be_dateutil_parseable(column=\"last_contact_date\"),expect_column_values_to_not_be_null(column=\"last_contact_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `video_id` column contains only unique values. Ensure this field is required (not null). Ensure the field matches the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"video_id\"),expect_column_values_to_not_be_null(column=\"video_id\"),expect_column_values_to_be_of_type(column=\"video_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'filing_date': Ensure the field matches the type 'datetime'. Verify that all values conform to the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"filing_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `UV_index` values are between 0 and 10, indicating safe exposure levels.","generated_expectations":"expect_column_values_to_be_between(column=\"UV_index\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `temperature` column: Ensure all values are real numbers within the range of [-50, 50] degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipping_country': Ensure the field matches the type 'text'. Ensure values in (shipping_country) must exist in the set of valid countries (country_list). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"shipping_country\"),expect_column_values_to_be_of_type(column=\"shipping_country\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"shipping_country\", value_set=country_list)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `temperature` column contains only values within the range of -50 to 50 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `message_length` column values are in an increasing order across the dataset.","generated_expectations":"expect_column_values_to_be_increasing(column=\"message_length\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'student_id': Ensure this field exists. Ensure that the values in (student_id) are unique and match the regex pattern for valid student IDs.","generated_expectations":"expect_column_to_exist(column=\"student_id\"),expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_match_regex(column=\"student_id\", regex=r\"^S\\d{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `price` column values are sorted in decreasing order and all fall within the range of 0 to 10000.","generated_expectations":"expect_column_values_to_be_decreasing(column=\"price\"),expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `battery_level` field: Validate that the values are between 0 and 100. Perform KL divergence checks to ensure consistency with historical data distributions.","generated_expectations":"expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100),expect_column_kl_divergence_to_be_less_than(column=\"battery_level\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `purchase_order_amount` falls within the range of `100` to `10000`.","generated_expectations":"expect_column_values_to_be_between(column=\"purchase_order_amount\", min_value=100, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `weight` column values are all greater than 0 and less than 10000 kg.","generated_expectations":"expect_column_values_to_be_between(column=\"weight\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the total number of rows in the `employee_records` table matches the number of rows in the `department_records` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"department_records\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `email_body` column contains valid JSON objects conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"email_body\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `team_id` column: Ensure values must be one of the set `['TeamA', 'TeamB', 'TeamC']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"team_id\", value_set=['TeamA', 'TeamB', 'TeamC'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `appointment_date`: Ensure the field matches the datetime format 'YYYY-MM-DD'. Ensure no missing values exist.","generated_expectations":"expect_column_to_exist(column=\"appointment_date\"),expect_column_values_to_match_strftime_format(column=\"appointment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"appointment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `developer_id` field: Ensure that it matches the type 'integer'. Ensure each value is unique and exists in the `developers` table.","generated_expectations":"expect_column_values_to_be_of_type(column=\"developer_id\", type_=\"integer\"),expect_column_values_to_be_unique(column=\"developer_id\"),expect_select_column_values_to_be_unique_within_record(column=\"developer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `client_id` in the `clients` table is referenced correctly in the `cases` table without any missing references.","generated_expectations":"expect_column_pair_values_to_be_equal(column_a=\"cases.client_id\", column_b=\"clients.client_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `hire_date` column does not have any future dates.","generated_expectations":"expect_column_values_to_be_less_than(column=\"hire_date\", value=\"2023-10-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `price` column: Validate that all entries are positive decimals within the range of 1.00 to 10000.00.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=1.00, max_value=10000.00),expect_column_values_to_be_increasing(column=\"price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure `content_release_date` follows the format 'MM\/DD\/YYYY' and that all dates are in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"content_release_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_increasing(column=\"content_release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `purchase_date` column has no future dates and all entries are within the last 5 years.","generated_expectations":"expect_column_values_to_be_between(column=\"purchase_date\", min_value=\"2018-10-01\", max_value=\"2023-10-01\"),expect_column_values_to_be_decreasing(column=\"purchase_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_date` field: Ensure it exists and follows the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_to_exist(column=\"forecast_date\"),expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `application_date` column follows the `MM\/DD\/YYYY` format and contains no incorrect date entries.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"application_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"application_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_usage': Ensure it is numeric and between 0 and the maximum allowed for the subscription type. Validate that 'data_usage' is less than or equal to 'data_limit'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"data_usage\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"data_usage\", min_value=0, max_value=\"max_allowed_for_subscription\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"data_usage\", column_B=\"data_limit\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `purchase_amount`, ensure the standard deviation is below 500 and mean is above 100.","generated_expectations":"expect_column_stdev_to_be_between(column=\"purchase_amount\", min_value=0, max_value=500),expect_column_mean_to_be_between(column=\"purchase_amount\", min_value=100, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `tracking_info` field is a valid JSON object and ensures it includes 'location', 'timestamp', and 'status'.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"tracking_info\"),expect_column_values_to_match_json_schema(column=\"tracking_info\", schema={\"type\": \"object\", \"properties\": {\"location\": {\"type\": \"string\"}, \"timestamp\": {\"type\": \"string\"}, \"status\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_id': Ensure the field is required (not null). Ensure the field contains only unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"transaction_id\"),expect_column_values_to_be_unique(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the p-values in the `statistical_tests` column pass the Chi-Square test with a threshold of 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"statistical_tests\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price_per_night` column, ensure that values are within the range of 50 to 1500 and that no values are negative.","generated_expectations":"expect_column_values_to_be_between(column=\"price_per_night\", min_value=50, max_value=1500),expect_column_values_to_be_greater_than(column=\"price_per_night\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `timestamp` column: Verify that all entries are of type 'datetime'. Ensure values are chronologically ordered without gaps.","generated_expectations":"expect_column_values_to_be_of_type(column=\"timestamp\", type_=\"datetime\"),expect_column_values_to_be_increasing(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `course_duration` column has a standard deviation under `5` weeks.","generated_expectations":"expect_column_stdev_to_be_between(column=\"course_duration\", min_value=0, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'vote_date': Ensure all entries are valid datetime strings formatted as '%Y-%m-%d'. Ensure no vote dates are set in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"vote_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"vote_date\"),expect_column_values_to_be_between(column=\"vote_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_role` values are restricted to the set ['student', 'instructor', 'admin'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=['student', 'instructor', 'admin'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `post_date` field: Ensure all values are in the format 'YYYY-MM-DD HH:MM:SS'. Validate that there are no missing values and all dates are in the past.","generated_expectations":"expect_column_to_exist(column=\"post_date\"),expect_column_values_to_match_strftime_format(column=\"post_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"post_date\"),expect_column_values_to_be_decreasing(column=\"post_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `service_type` column consists solely of values from the set `['Healthcare', 'Education', 'Transportation']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"service_type\", value_set=['Healthcare', 'Education', 'Transportation'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'product_code' field: Ensure the field exists and matches the type 'text'. Validate that all values conform to the regex pattern '^PROD-[0-9]{4}$' and are unique.","generated_expectations":"expect_column_to_exist(column=\"product_code\"),expect_column_values_to_be_of_type(column=\"product_code\", type_=\"text\"),expect_column_values_to_match_regex(column=\"product_code\", regex=r\"^PROD-[0-9]{4}$\"),expect_column_values_to_be_unique(column=\"product_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_id` column contains distinct values and follows the format 'PROP-YYYY-NNNN'.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_match_regex(column=\"property_id\", regex=r\"^PROP-\\d{4}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `player_id` column contains only unique values with no duplicates across the dataset.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'guest_count': Ensure this field exists. Validate that the values are integers between 1 and 5.","generated_expectations":"expect_column_to_exist(column=\"guest_count\"),expect_column_values_to_be_between(column=\"guest_count\", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=\"guest_count\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'voter_id': Ensure the field matches the type 'integer'. Validate that all values in (voter_id) are unique and not null. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"voter_id\"),expect_column_values_to_not_be_null(column=\"voter_id\"),expect_column_values_to_be_unique(column=\"voter_id\"),expect_column_values_to_be_of_type(column=\"voter_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'json_data': Validate that values in (json_data) are valid JSON objects and conform to the specified JSON schema. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"json_data\"),expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", json_schema=your_json_schema)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `user_agent` strings do not match any SQL injection patterns from the list `['%;', 'OR 1=1', '--']`.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"user_agent\", regex_list=[r\"%;\", r\"OR 1=1\", r\"--\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `file_data` asset: Validate that the file exists, matches the specified hash value, and is within the size range of 1MB to 10MB.","generated_expectations":"expect_file_to_exist(),expect_file_hash_to_equal(expected_hash_value),expect_file_size_to_be_between(min_value=1 * 1024 * 1024, max_value=10 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `attack_timestamp` field is formatted correctly as `YYYY-MM-DD HH:MM:SS` and is not null.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"attack_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"attack_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `budget` column values are non-negative and do not exceed the `max_budget` threshold.","generated_expectations":"expect_column_values_to_be_between(column=\"budget\", min_value=0),expect_column_values_to_be_less_than(column=\"budget\", max_value=\"max_budget\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `timestamp` field adheres to the ISO 8601 format and does not contain any null entries.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S%z\"),expect_column_values_to_not_be_null(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `research_topic` column contains values that match the regex pattern '^(Climate|Health|Technology)$'. Ensure all values are distinct.","generated_expectations":"expect_column_values_to_match_regex(column=\"research_topic\", regex=\"^(Climate|Health|Technology)$\"),expect_column_values_to_be_unique(column=\"research_topic\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `weather_condition` column contains only distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"weather_condition\", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `account_balance` column contains values greater than or equal to 0.","generated_expectations":"expect_column_values_to_be_between(column=\"account_balance\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `account_opened_date` column contains dates in the format '%d-%m-%Y' and all entries are before the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"account_opened_date\", strftime_format=\"%d-%m-%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"account_opened_date\"),expect_column_values_to_be_between(column=\"account_opened_date\", min_value=None, max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'election_date': Ensure the field is required (not null). Ensure the field matches the format 'YYYY-MM-DD'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"election_date\"),expect_column_values_to_not_be_null(column=\"election_date\"),expect_column_values_to_match_strftime_format(column=\"election_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `insurance_provider` column contains values from the set `['Medicare', 'Medicaid', 'Private']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"insurance_provider\", value_set=['Medicare', 'Medicaid', 'Private'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `download_count` column, confirm that the sum of values does not exceed 1 million and validate against the expected distribution using KS test.","generated_expectations":"expect_column_sum_to_be_between(column=\"download_count\", min_value=0, max_value=1000000),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"download_count\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `attendance_percentage`: Ensure values are between `0` and `100` and that the average attendance for each course exceeds `75%`.","generated_expectations":"expect_column_values_to_be_between(column=\"attendance_percentage\", min_value=0, max_value=100),expect_column_mean_to_be_between(column=\"attendance_percentage\", min_value=75, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sales_date': Ensure the expect column values to be in set; Ensure this field matches the type 'date' and contains values in chronological order.","generated_expectations":"expect_column_values_to_be_in_set(column=\"sales_date\", value_set=...),  # Specify the set of expected values,expect_column_values_to_be_of_type(column=\"sales_date\", type_=\"date\"),expect_column_values_to_be_increasing(column=\"sales_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'recipient_email': Ensure the field matches the type 'text'. Validate that all emails conform to a valid email format and are not on the blacklist.","generated_expectations":"expect_column_values_to_be_of_type(column=\"recipient_email\", type_=\"text\"),expect_column_values_to_match_regex(column=\"recipient_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_not_match_regex(column=\"recipient_email\", regex=r\"blacklisted_email@example\\.com\")  # Example blacklist regex, replace with actual blacklist if available.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_number': Ensure the field exists. Validate that (case_number) matches the pattern 'C\\\\d{4}-\\\\d{6}'.","generated_expectations":"expect_column_to_exist(column=\"case_number\"),expect_column_values_to_match_regex(column=\"case_number\", regex=r\"C\\d{4}-\\d{6}\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `like_count` column: Verify that all values are non-negative integers and check for any duplicates.","generated_expectations":"expect_column_values_to_be_of_type(column=\"like_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"like_count\", min_value=0, max_value=None),expect_column_values_to_be_unique(column=\"like_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `emission_data` column contains valid JSON objects conforming to the specified schema for greenhouse gas reporting.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"emission_data\", schema=\"specified_schema_for_greenhouse_gas_reporting\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `file` associated with the `data_asset` exists, matches the specified hash, and does not exceed 5MB in size.","generated_expectations":"expect_file_to_exist(file_path=\"your_file_path_here\"),expect_file_hash_to_equal(file_path=\"your_file_path_here\", hash_value=\"your_expected_hash_here\"),expect_file_size_to_be_between(file_path=\"your_file_path_here\", min_value=0, max_value=5000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `view_count`: Confirm that the sum of views across all videos is above 1,000,000.","generated_expectations":"expect_column_sum_to_be_between(column=\"view_count\", min_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `orders` table, confirm that the total number of rows is between 100 and 1000.","generated_expectations":"expect_table_row_count_to_be_between(min_value=100, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `currency_type` field: Ensure it contains only distinct values from the set `['BTC', 'ETH', 'LTC']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"currency_type\", value_set=['BTC', 'ETH', 'LTC'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `discount_percentage` column values do not exceed 100% and are all within the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"discount_percentage\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `zip_code` field: Ensure the field matches the type 'text'. Ensure all zip codes are unique and follow the format '#####'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"zip_code\", type_=\"text\"),expect_column_values_to_be_unique(column=\"zip_code\"),expect_column_values_to_match_regex(column=\"zip_code\", regex=r\"^\\d{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the mean value of the `blood_pressure` column is between 80 and 120.","generated_expectations":"expect_column_mean_to_be_between(column=\"blood_pressure\", min_value=80, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_code` column contains at least these values: `['A1', 'B2']`.","generated_expectations":"expect_column_values_to_contain_set(column=\"product_code\", value_set=[\"A1\", \"B2\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `match_date` field: Ensure the field exists and matches the type 'date'. Ensure no entries are missing.","generated_expectations":"expect_column_to_exist(column=\"match_date\"),expect_column_values_to_not_be_null(column=\"match_date\"),expect_column_values_to_be_of_type(column=\"match_date\", type_=\"date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_score` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"user_score\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `court_date` field: Ensure this field is required (not null). Ensure values are in the future and the type is 'date'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"court_date\"),expect_column_values_to_be_of_type(column=\"court_date\", type_=\"date\"),expect_column_values_to_be_increasing(column=\"court_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_duration` column, ensure that all values are greater than zero and less than 52 weeks.","generated_expectations":"expect_column_values_to_be_between(column=\"course_duration\", min_value=0, max_value=52)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `json_data` column: Validate that all entries are valid JSON objects and match the specified JSON schema for user data.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", schema=\"user_data_schema\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `mining_date` column contains valid datetime strings that can be parsed to ensure they are not in the future.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"mining_date\"),expect_column_values_to_be_between(column=\"mining_date\", min_value=\"1900-01-01\", max_value=\"current_datetime\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `registration_date` is in the format 'YYYY-MM-DD' and is not later than the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"registration_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"registration_date\", min_value=\"1900-01-01\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `salary` column's mean does not fall below the minimum wage and the maximum does not exceed $200,000.","generated_expectations":"expect_column_mean_to_be_between(column=\"salary\", min_value=min_wage, max_value=200000),expect_column_max_to_be_between(column=\"salary\", max_value=200000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the file 'shipping_records.txt' contains at least 50 lines, with each line matching the regex pattern for valid shipping labels.","generated_expectations":"expect_file_to_exist(file_path=\"shipping_records.txt\"),expect_file_line_regex_match_count_to_be_between(file_path=\"shipping_records.txt\", min_value=50, max_value=None),expect_file_line_regex_match_count_to_equal(file_path=\"shipping_records.txt\", regex=r\"^.*[valid shipping label regex pattern].*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column contains unique values and is not null for all records.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_not_be_null(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `distance_km` column values are in increasing order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"distance_km\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `weather_condition`: Ensure the field contains only distinct values matching `['sunny', 'cloudy', 'rainy', 'stormy']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"weather_condition\", value_set=['sunny', 'cloudy', 'rainy', 'stormy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `temperature` column: Validate that all values are within the range of -50 to 150 degrees Celsius and ensure no missing values are present.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=150),expect_column_values_to_not_be_null(column=\"temperature\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` column in the insurance dataset, ensure that it corresponds to the `confirmation_status` in the blockchain dataset for claims above $500.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"status\", column_B=\"confirmation_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `delivery_time` and `estimated_arrival_time`: Validate that `estimated_arrival_time` is greater than `delivery_time`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"estimated_arrival_time\", column_B=\"delivery_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `policy_number` column contains unique values and follows the specified format 'PN-XXXX-XXXX'.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_match_regex(column=\"policy_number\", regex=r\"^PN-\\d{4}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_rating` column contains integer values between 1 and 5.","generated_expectations":"expect_column_values_to_be_between(column=\"customer_rating\", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=\"customer_rating\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `wind_speed` column values adhere to the regular expression pattern `^\\d+(\\.\\d+)?$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"wind_speed\", regex=r\"^\\d+(\\.\\d+)?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `delivery_date` column contains dates that are not in the past and are formatted as 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"delivery_date\"),expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"delivery_date\", min_value=datetime.datetime.now().date(), max_value=datetime.datetime.max.date())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `email_subject` column does not contain null values and adheres to a maximum character length of 255.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_subject\"),expect_column_value_lengths_to_be_between(column=\"email_subject\", min_value=0, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `expiry_date` column: Ensure all values match the datetime format 'YYYY-MM-DD' and are not in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"expiry_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"expiry_date\")  # To ensure they are valid dates,# Additional check for not in the past would typically require a custom validation, as it is not a standard expectation in Great Expectations.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the total `amount_paid` in the `payments` column equals the sum of `room_price` and `additional_fees`.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"room_price\", \"additional_fees\"], sum_column=\"amount_paid\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `completion_time` for courses is arranged in increasing order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"completion_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `order_id` and `customer_id` are unique pairs across the `orders` dataset.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"order_id\", column_B=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'vote_status': Ensure values are one of the specified set: ['cast', 'pending', 'rejected']. Validate that this field exists.","generated_expectations":"expect_column_to_exist(column=\"vote_status\"),expect_column_values_to_be_in_set(column=\"vote_status\", value_set=['cast', 'pending', 'rejected'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `view_count` column has a valid range of 0 to 1,000,000 and that it does not contain null values.","generated_expectations":"expect_column_values_to_be_between(column=\"view_count\", min_value=0, max_value=1000000),expect_column_values_to_not_be_null(column=\"view_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_id` column contains only unique values that match the format `PROP[0-9]{4}`.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_match_regex(column=\"property_id\", regex=r\"^PROP[0-9]{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `player_username` column holds unique values and does not contain special characters.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_username\"),expect_column_values_to_not_match_regex(column=\"player_username\", regex=r\"[^a-zA-Z0-9_]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'barcode': Ensure the field matches the type 'text'. Ensure this field contains unique values and matches a specific pattern of 12 digits.","generated_expectations":"expect_column_values_to_be_of_type(column=\"barcode\", type_=\"text\"),expect_column_values_to_be_unique(column=\"barcode\"),expect_column_values_to_match_regex(column=\"barcode\", regex=r\"^\\d{12}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `transaction_id`: Ensure the field is required (not null). Ensure values in `transaction_id` are unique across all records.","generated_expectations":"expect_column_values_to_not_be_null(column=\"transaction_id\"),expect_column_values_to_be_unique(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_usage': Ensure the field is required (not null). Validate that 'data_usage' is an integer value between 0 and 10000 (in MB). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"data_usage\"),expect_column_values_to_not_be_null(column=\"data_usage\"),expect_column_values_to_be_between(column=\"data_usage\", min_value=0, max_value=10000),expect_column_values_to_be_of_type(column=\"data_usage\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `threat_events` table is between 100 and 1000.","generated_expectations":"expect_table_row_count_to_be_between(min_value=100, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `feedback` column contains string values of at least 10 characters and does not match any of the following patterns: `['spam', 'offensive']`.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"feedback\", min_value=10),expect_column_values_to_not_match_regex_list(column=\"feedback\", regex_list=[r\"spam\", r\"offensive\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `installation_date` column contains dates that are not in the future and are formatted as `YYYY-MM-DD`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"installation_date\"),expect_column_values_to_match_strftime_format(column=\"installation_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"installation_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `data_usage` column has no missing values and all entries are greater than or equal to zero.","generated_expectations":"expect_column_values_to_not_be_null(column=\"data_usage\"),expect_column_values_to_be_between(column=\"data_usage\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `send_date` column contains datetime entries formatted as '%Y-%m-%d %H:%M:%S' and are within the range of the last 30 days.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"send_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_between(column=\"send_date\", min_value=(datetime.now() - timedelta(days=30)).strftime(\"%Y-%m-%d %H:%M:%S\"), max_value=datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `room_type` field: Ensure this is a categorical field with distinct values from the set `['Single', 'Double', 'Suite']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `quantity_on_hand`: Ensure the field matches the type 'integer'. Validate that the `quantity_on_hand` values have a minimum of 0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"quantity_on_hand\", type_=\"integer\"),expect_column_min_to_be_between(column=\"quantity_on_hand\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'registration_date': Ensure the field matches the type 'date'. Ensure the field contains values less than or equal to the current date. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"registration_date\")\r,expect_column_values_to_be_of_type(column=\"registration_date\", type_=\"date\")\r,expect_column_values_to_be_between(column=\"registration_date\", min_value=None, max_value=datetime.datetime.now().date())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `zip_code` column matches the pattern of five-digit numbers and does not contain any invalid entries.","generated_expectations":"expect_column_values_to_match_regex(column=\"zip_code\", regex=r\"^\\d{5}$\"),expect_column_values_to_not_match_regex(column=\"zip_code\", regex=r\"[^0-9]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `stock_quantity` column contains only non-negative integers and does not allow null entries.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"stock_quantity\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `article_id` field contains only unique values. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"article_id\"),expect_column_values_to_not_be_null(column=\"article_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the Kullback-Leibler divergence between the `temperature_readings` and `humidity_readings` distributions is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column_A=\"temperature_readings\", column_B=\"humidity_readings\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the combination of `policy_number` and `claim_id` is unique across the `claims` table.","generated_expectations":"expect_compound_columns_to_be_unique(column_names=[\"policy_number\", \"claim_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'grade': Ensure that values in 'grade' are within the range of 0 to 100. Confirm that this field is of type 'integer'.","generated_expectations":"expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"grade\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'attack_timestamp': Ensure the field matches the type 'datetime'. Validate that the values are formatted as 'YYYY-MM-DD HH:MM:SS'. Ensure this field exists and is not null.","generated_expectations":"expect_column_to_exist(column=\"attack_timestamp\"),expect_column_values_to_not_be_null(column=\"attack_timestamp\"),expect_column_values_to_be_of_type(column=\"attack_timestamp\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"attack_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'email' column, ensure all values match the pattern 'user@domain.com' and that all entries are unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\"),expect_column_values_to_be_unique(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'discount_percentage': Ensure this field matches type 'integer' and is within the range of 0-100. Ensure there are no negative values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"discount_percentage\", type_=\"int\"),expect_column_values_to_be_between(column=\"discount_percentage\", min_value=0, max_value=100),expect_column_values_to_not_be_in_set(column=\"discount_percentage\", value_set=[-1])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the Kullback-Leibler divergence between the distributions of `sent_amount` and `received_amount` is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column_A=\"sent_amount\", column_B=\"received_amount\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `station_id` column contains unique values and does not include any null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"station_id\"),expect_column_values_to_not_be_null(column=\"station_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `enrollment_date` column only contains dates that are on or before today and no more than `30` days in the future.","generated_expectations":"expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"today\", max_value=\"today + 30 days\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `bedrooms` column contains integer values within the range of 1 to 10.","generated_expectations":"expect_column_values_to_be_between(column=\"bedrooms\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_date': Ensure all entries conform to the format 'YYYY-MM-DD'. Ensure this field is parsed correctly using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"shipment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `player_score` is greater than or equal to `minimum_score` and less than or equal to `maximum_score`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"player_score\", column_B=\"minimum_score\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"player_score\", column_B=\"maximum_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `discount_percentage` column values are between 0 and 100 and are arranged in decreasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"discount_percentage\", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=\"discount_percentage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'study_id': Ensure all values are unique and of type 'integer'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"study_id\"),expect_column_values_to_be_unique(column=\"study_id\"),expect_column_values_to_be_of_type(column=\"study_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `data_entries` column contains only valid JSON objects and that they can be parsed without errors.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"data_entries\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `product_code` column contains unique values and matches the specified alphanumeric format.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_code\"),expect_column_values_to_match_regex(column=\"product_code\", regex=r\"^[a-zA-Z0-9]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combination of `listing_id` and `location` is unique across all records for property listings.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"listing_id\", column_B=\"location\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `block_timestamp` column: Ensure values are in ISO 8601 format and are not more than 1 hour in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"block_timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_be_dateutil_parseable(column=\"block_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipping_address': Ensure the field exists. Validate that 'shipping_address' does not exceed 200 characters.","generated_expectations":"expect_column_to_exist(column=\"shipping_address\"),expect_column_value_lengths_to_be_between(column=\"shipping_address\", min_value=0, max_value=200)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sku` column: Ensure all entries are unique and match the specified set of valid SKUs: ['SKU001', 'SKU002', 'SKU003'].","generated_expectations":"expect_column_values_to_be_unique(column=\"sku\"),expect_column_values_to_be_in_set(column=\"sku\", value_set=['SKU001', 'SKU002', 'SKU003'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `block_height` values are in increasing order without any gaps.","generated_expectations":"expect_column_values_to_be_increasing(column=\"block_height\"),expect_column_values_to_not_be_null(column=\"block_height\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'attachment_file_size': Ensure values are integers and fall within the range of 0 to 25,000,000 bytes.","generated_expectations":"expect_column_values_to_be_of_type(column=\"attachment_file_size\", type_=\"int\"),expect_column_values_to_be_between(column=\"attachment_file_size\", min_value=0, max_value=25000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `threat_logs` file: Confirm that the file matches the specified hash value and falls within a size range of 100KB to 1MB.","generated_expectations":"expect_file_hash_to_equal(file_path=\"threat_logs\", expected_hash_value=\"your_expected_hash_value\"),expect_file_size_to_be_between(file_path=\"threat_logs\", min_value=100 * 1024, max_value=1 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the mean of the `response_time` column is between 1.5 and 3.0 seconds.","generated_expectations":"expect_column_mean_to_be_between(column=\"response_time\", min_value=1.5, max_value=3.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `property_id`: Ensure this field is required (not null). Verify that it contains unique values across the dataset.","generated_expectations":"expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_unique(column=\"property_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `response_time` field: Ensure all values are positive integers representing milliseconds and fall within the range of 0 to 5000. Confirm that there are no missing entries.","generated_expectations":"expect_column_values_to_be_between(column=\"response_time\", min_value=0, max_value=5000),expect_column_values_to_not_be_null(column=\"response_time\"),expect_column_values_to_be_of_type(column=\"response_time\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `timestamp` field: Validate that datetime strings match the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of `debit_amount` and `credit_amount` equals the `balance` for each record.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"debit_amount\", \"credit_amount\"], target_column=\"balance\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `timestamp` column values are compatible with the `'%Y-%m-%d %H:%M:%S'` format.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `file_size` in the `DataFile` asset: Ensure the size falls within the range of [1KB, 10MB]. Ensure this field is required (not null).","generated_expectations":"expect_file_size_to_be_between(min_value=1024, max_value=10485760),expect_column_values_to_not_be_null(column=\"file_size\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate the `enrollment_date` column for valid datetime entries and ensure they do not precede the course start date.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"enrollment_date\"),expect_column_values_to_be_greater_than(column=\"enrollment_date\", value=\"course_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the distribution of `player_scores` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"player_scores\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `tags` column contains valid JSON objects that conform to the specified JSON schema for tags.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"tags\", schema=\"your_json_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `booking_source` column only includes distinct values from `['Website', 'App', 'Phone']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"booking_source\", value_set=['Website', 'App', 'Phone'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `energy_cost_per_kWh` field: Validate that the mean value is within the range of $0.05 to $0.20. Check for any outliers in the dataset.","generated_expectations":"expect_column_mean_to_be_between(column=\"energy_cost_per_kWh\", min_value=0.05, max_value=0.20),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"energy_cost_per_kWh\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'user_rating' field: Ensure the field exists and matches the type 'decimal'. Validate that all values fall within the range of 0.0 to 10.0.","generated_expectations":"expect_column_to_exist(column=\"user_rating\"),expect_column_values_to_be_of_type(column=\"user_rating\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"user_rating\", min_value=0.0, max_value=10.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'claim_status': Ensure the field matches the type 'text'. Ensure values in 'claim_status' do not match the pattern 'Resolved|Rejected'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"claim_status\"),expect_column_values_to_be_of_type(column=\"claim_status\", type_=\"text\"),expect_column_values_to_not_match_regex(column=\"claim_status\", regex=r\"Resolved|Rejected\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_status` column only contains values from the set `['Open', 'Closed', 'In Progress']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"case_status\", value_set=['Open', 'Closed', 'In Progress'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `post_id` column contains unique values for all blog posts.","generated_expectations":"expect_column_values_to_be_unique(column=\"post_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `user_reviews` table matches the number of entries in the `movies` table.","generated_expectations":"expect_table_row_count_to_equal(other_table=\"movies\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `premium_amount`: Verify that the average premium amount is between $100 and $1,000.","generated_expectations":"expect_column_mean_to_be_between(column=\"premium_amount\", min_value=100, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `tags` column contains valid JSON arrays conforming to the specified JSON schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"tags\", schema={\"type\": \"array\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `category` column contains only values from the defined set: ['Electronics', 'Apparel', 'Home Goods'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Apparel', 'Home Goods'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `platform` column contains only values from the set `['PC', 'Xbox', 'PlayStation']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Xbox', 'PlayStation'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `delivery_date`: Validate that all entries are in the format `YYYY-MM-DD` and represent future dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"delivery_date\"),expect_column_values_to_be_between(column=\"delivery_date\", min_value=\"2023-10-01\", max_value=\"9999-12-31\")  # Adjust min_value as needed for future dates","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `project_start_date` and `project_end_date` columns contain dates where `project_end_date` is always after `project_start_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"project_end_date\", column_B=\"project_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of unique entries in the `recipient_list` column is at least 5.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"recipient_list\", min_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'item_weight': Ensure this field matches the type 'decimal'. Validate that all values are greater than zero and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"item_weight\", type_=\"decimal\"),expect_column_values_to_not_be_null(column=\"item_weight\"),expect_column_values_to_be_greater_than(column=\"item_weight\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'contact_method': Ensure the field matches the type 'text'. Validate that values in (contact_method) must include at least one entry from the predefined set: 'email', 'phone', 'SMS'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"contact_method\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"contact_method\", value_set=[\"email\", \"phone\", \"SMS\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `admission_date` column contains dates in the format `YYYY-MM-DD` and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"admission_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"admission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` column, ensure values are either 'active' or 'inactive', and no other values are present.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=[\"active\", \"inactive\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `usage_category` column contains only distinct values matching `['Residential', 'Commercial', 'Industrial']`. Validate that this column is non-null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"usage_category\", value_set=['Residential', 'Commercial', 'Industrial']),expect_column_values_to_not_be_null(column=\"usage_category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all values in (case_id) are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_id\"),expect_column_values_to_be_of_type(column=\"case_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"case_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of `water_usage` and `electricity_usage` columns equals the `total_usage` in the `usage_summary` table.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"water_usage\", \"electricity_usage\"], target_column=\"total_usage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `booking_id` field: Ensure the field matches the type 'integer'. Ensure all values are unique and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"booking_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"booking_id\"),expect_column_values_to_be_unique(column=\"booking_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `room_type` field: Ensure this field exists and matches one of the specified values in `['Single', 'Double', 'Suite']`.","generated_expectations":"expect_column_to_exist(column=\"room_type\"),expect_column_values_to_be_in_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `sent_time` values are all within the last 30 days and follow the datetime format `%Y-%m-%d %H:%M:%S`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"sent_time\"),expect_column_values_to_match_strftime_format(column=\"sent_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_between(column=\"sent_time\", min_value=\"2023-09-22 00:00:00\", max_value=\"2023-10-22 23:59:59\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `medication` column: Ensure that the unique value count matches the predefined set of approved medications.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"medication\", value_set=approved_medications_set)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the sum of `item_cost` and `shipping_cost` equals `total_cost` for each order.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"item_cost\", column_B=\"total_cost\"),expect_column_pair_values_to_be_equal(column_A=\"shipping_cost\", column_B=\"total_cost\"),expect_multicolumn_sum_to_equal(column_list=[\"item_cost\", \"shipping_cost\"], sum_column=\"total_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `registration_timestamp` field follows the strftime format '%Y-%m-%d %H:%M:%S' and is not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"registration_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_in_set(column=\"registration_timestamp\", value_set=[...])  # Note: This requires a specific implementation to check against the current date\/time.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_id` column contains unique identifiers that match the format `CUST-[0-9]{4}`.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_match_regex(column=\"customer_id\", regex=r\"^CUST-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_status` column matches the pattern `['Active', 'Inactive', 'Pending']` and contains no other values.","generated_expectations":"expect_column_values_to_equal_set(column=\"service_status\", value_set=[\"Active\", \"Inactive\", \"Pending\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_number` column contains only distinct values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"account_number\"),expect_column_values_to_not_be_null(column=\"account_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'check_in_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure that the date is not in the past.","generated_expectations":"expect_column_values_to_not_be_null(column=\"check_in_date\"),expect_column_values_to_be_of_type(column=\"check_in_date\", type_=\"date\"),expect_column_values_to_be_increasing(column=\"check_in_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `monthly_income` values are at least double the `monthly_expenses` across all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"monthly_income\", column_B=\"monthly_expenses\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `account_creation_date`: Ensure the field is in the correct datetime format 'MM\/DD\/YYYY' and is not a future date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"account_creation_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_decreasing(column=\"account_creation_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `location` field: Ensure it is of type 'text' and that all entries correspond to valid geographic coordinates.","generated_expectations":"expect_column_values_to_be_of_type(column=\"location\", type_=\"text\"),expect_column_values_to_match_regex(column=\"location\", regex=r\"^-?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?)\\s*,\\s*-?((1[0-7]\\d(\\.\\d+)?)|([1-9]?\\d(\\.\\d+)?|0))$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'contract_end_date': Ensure this field matches the type 'date'. Ensure this field is required (not null). Ensure this date is in the future.","generated_expectations":"expect_column_to_exist(column=\"contract_end_date\"),expect_column_values_to_be_of_type(column=\"contract_end_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"contract_end_date\"),expect_column_values_to_be_between(column=\"contract_end_date\", min_value=\"2023-10-01\", max_value=None)  # Assuming today's date is October 1, 2023. Adjust as needed.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'watch_time': Ensure the field exists. Validate that 'watch_time' is a positive integer and that the average watch time does not exceed 300 minutes.","generated_expectations":"expect_column_to_exist(column=\"watch_time\"),expect_column_values_to_be_of_type(column=\"watch_time\", type_=\"int\"),expect_column_mean_to_be_between(column=\"watch_time\", min_value=0, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `product_code` column: Ensure all codes are exactly 10 characters in length.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"product_code\", length=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `case_status` column only contains values from the set `['Open', 'Closed', 'Pending']`. Ensure there are no missing entries.","generated_expectations":"expect_column_values_to_be_in_set(column=\"case_status\", value_set=['Open', 'Closed', 'Pending']),expect_column_values_to_not_be_null(column=\"case_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `claim_amount` column for non-negative values and ensure the sum of all claims does not exceed the total insured value.","generated_expectations":"expect_column_values_to_be_between(column=\"claim_amount\", min_value=0),expect_column_sum_to_be_between(column=\"claim_amount\", min_value=0, max_value=total_insured_value)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_date` field: Ensure the field is of type 'date'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"forecast_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `hire_date` column contains datetime entries that can be parsed and match the format `'%Y-%m-%d'`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"hire_date\"),expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format='%Y-%m-%d')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'publication_date': Validate that all dates in (publication_date) match the format '%Y\/%m\/%d' and are not future dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"publication_date\", strftime_format=\"%Y\/%m\/%d\"),expect_column_values_to_be_dateutil_parseable(column=\"publication_date\")  # This expectation checks if dates are parseable; further validation for future dates should be handled separately.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'release_date': Ensure values are within the range '2000-01-01' to '2023-12-31'. Ensure this field is not null.","generated_expectations":"expect_column_values_to_be_between(column=\"release_date\", min_value=\"2000-01-01\", max_value=\"2023-12-31\"),expect_column_values_to_not_be_null(column=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'student_id': Ensure the expect column to exist; Ensure this field is a primary key with unique values and is required (not null).","generated_expectations":"expect_column_to_exist(column=\"student_id\"),expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_not_be_null(column=\"student_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `voter_status` column contains only values from the set `['Registered', 'Unregistered', 'Expired']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"voter_status\", value_set=['Registered', 'Unregistered', 'Expired'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email_address` column contains unique entries and matches the format of valid email addresses, with no null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"email_address\"),expect_column_values_to_not_be_null(column=\"email_address\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `message_length` column, check that all entries fall within the range of 1 to 1000 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"message_length\", min_value=1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm the `last_name` column values are not empty and have a length between 1 and 50 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"last_name\"),expect_column_value_lengths_to_be_between(column=\"last_name\", min_value=1, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_agent': Ensure the field matches the type 'text'. Validate that all values in (user_agent) do not match any patterns from a list of known malicious user agents.","generated_expectations":"expect_column_values_to_be_of_type(column=\"user_agent\", type_=\"text\"),expect_column_values_to_not_match_regex_list(column=\"user_agent\", regex_list=[r\"malicious_pattern_1\", r\"malicious_pattern_2\", r\"malicious_pattern_3\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `threat_severity` column: Ensure the unique values are within the set `['Low', 'Medium', 'High', 'Critical']`. Ensure the field is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_severity\", value_set=['Low', 'Medium', 'High', 'Critical']),expect_column_values_to_not_be_null(column=\"threat_severity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `response_time` column has a standard deviation of less than 15 days across all service requests.","generated_expectations":"expect_column_stdev_to_be_between(column=\"response_time\", min_value=0, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `humidity` values have a mean greater than 30% and less than 90%.","generated_expectations":"expect_column_mean_to_be_between(column=\"humidity\", min_value=30, max_value=90)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `plan_type` column contains only values from the set `['Prepaid', 'Postpaid']`, ensuring no null values are present.","generated_expectations":"expect_column_values_to_be_in_set(column=\"plan_type\", value_set=['Prepaid', 'Postpaid']),expect_column_values_to_not_be_null(column=\"plan_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `inventory` table is equal to the number of distinct `product_id` entries.","generated_expectations":"expect_table_row_count_to_equal(column=\"product_id\"),expect_column_unique_value_count_to_be_equal(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `location_id` in the `device_data` column exists in the predefined `location` set.","generated_expectations":"expect_column_values_to_be_in_set(column=\"location_id\", value_set=predefined_location_set)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `meta_description` column values are no longer than 160 characters, and the average length is within this limit.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"meta_description\", min_value=0, max_value=160),expect_column_mean_to_be_between(column=\"meta_description\", min_value=0, max_value=160)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `claim_id` column contains only unique values and is of type `integer`. Ensure this field cannot contain null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"claim_id\"),expect_column_values_to_be_of_type(column=\"claim_id\", type_=\"integer\"),expect_column_values_to_not_be_null(column=\"claim_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_score` column: Ensure that values fall within the range of 0 to 100 and the average score is above 70.","generated_expectations":"expect_column_values_to_be_between(column=\"customer_score\", min_value=0, max_value=100),expect_column_mean_to_be_between(column=\"customer_score\", min_value=70, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `in_game_purchase` column contains only boolean values (true\/false) and that at least 60% of entries are true.","generated_expectations":"expect_column_values_to_be_of_type(column=\"in_game_purchase\", type_=\"bool\"),expect_column_proportion_of_unique_values_to_be_between(column=\"in_game_purchase\", min_value=0.6, max_value=1.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'message_id': Ensure all values in 'message_id' are unique. Ensure the field matches the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"message_id\"),expect_column_values_to_be_of_type(column=\"message_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `product_name` column contains strings with a maximum length of 100 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"product_name\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that `post_content` fields do not exceed 2000 characters in length.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"post_content\", min_value=0, max_value=2000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'election_results' table: Check that the 'total_votes' column exists and that all values are greater than or equal to zero.","generated_expectations":"expect_column_to_exist(column=\"total_votes\"),expect_column_values_to_be_between(column=\"total_votes\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `weight` column values are in the range of 30 to 300 kilograms.","generated_expectations":"expect_column_values_to_be_between(column=\"weight\", min_value=30, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `room_type`: Ensure the field contains only distinct values from ['Single', 'Double', 'Suite']. Ensure there are no missing values.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=\"room_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'skills': Ensure values in 'skills' adhere to the specified format as a valid JSON array. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"skills\"),expect_column_values_to_be_json_parseable(column=\"skills\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'transactions_history': Ensure that the number of rows is equal to the number of completed transactions in the 'transactions' table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"transactions_history\", other_table=\"transactions\", column=\"completed_transactions\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'device_id': Ensure 'device_id' values are unique across the dataset to prevent duplication.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `submission_date` column contains dates that can be parsed according to ISO 8601 standards.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"submission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `threat_level` column values are within the range of `['low', 'medium', 'high']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_level\", value_set=['low', 'medium', 'high'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `employee_id` column has unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\"),expect_column_values_to_not_be_null(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field `plan_type`: Validate that the values belong to the set `['Prepaid', 'Postpaid', 'Family', 'Corporate']` and are not null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"plan_type\", value_set=['Prepaid', 'Postpaid', 'Family', 'Corporate']),expect_column_values_to_not_be_null(column=\"plan_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'gas_fee': Validate that the field is a numeric type. Ensure values in (gas_fee) are greater than 0 and less than 10. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"gas_fee\"),expect_column_values_to_be_of_type(column=\"gas_fee\", type_=\"float\"),expect_column_values_to_be_between(column=\"gas_fee\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields 'latitude' and 'longitude': Ensure both fields match the type 'float'. Validate that 'latitude' is between -90 and 90, and 'longitude' is between -180 and 180. Ensure these fields cannot be null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"latitude\", type_=\"float\"),expect_column_values_to_be_of_type(column=\"longitude\", type_=\"float\"),expect_column_values_to_be_between(column=\"latitude\", min_value=-90, max_value=90),expect_column_values_to_be_between(column=\"longitude\", min_value=-180, max_value=180),expect_column_values_to_not_be_null(column=\"latitude\"),expect_column_values_to_not_be_null(column=\"longitude\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'salary': Ensure this field is required (not null). Ensure this field matches the type 'decimal'. Ensure values are greater than or equal to 0.","generated_expectations":"expect_column_values_to_not_be_null(column=\"salary\"),expect_column_values_to_be_of_type(column=\"salary\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"salary\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `team` field contains values exclusively from the set `['Team A', 'Team B', 'Team C']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"team\", value_set=['Team A', 'Team B', 'Team C'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `quiz_scores` column follows a uniform distribution with a mean of 75 and a standard deviation of 5, verified via the KS test with a p-value threshold of 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"quiz_scores\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_type` column, ensure all values are from the set `['Deposit', 'Withdrawal', 'Transfer']` and check for any null values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=['Deposit', 'Withdrawal', 'Transfer']),expect_column_values_to_not_be_null(column=\"transaction_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'salary': Ensure the field matches the type 'decimal'. Ensure values in (salary) are greater than or equal to the minimum wage in the respective country.","generated_expectations":"expect_column_values_to_be_of_type(column=\"salary\", type_=\"decimal\"),expect_column_values_to_be_greater_than(column=\"salary\", value=minimum_wage_value)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `enrollment_status`: Ensure the field contains only distinct values matching `['enrolled', 'completed', 'dropped']`. Ensure the field is required (not null).","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"enrollment_status\", value_set=['enrolled', 'completed', 'dropped']),expect_column_values_to_not_be_null(column=\"enrollment_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'amount': Ensure the field exists and values in (amount) must be greater than zero. Validate that this field is of type 'float'.","generated_expectations":"expect_column_to_exist(column=\"amount\"),expect_column_values_to_be_greater_than(column=\"amount\", value=0),expect_column_values_to_be_of_type(column=\"amount\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'fraud_score': Ensure the mean value does not exceed the threshold of 100. Ensure standard deviation remains within acceptable limits.","generated_expectations":"expect_column_mean_to_be_between(column=\"fraud_score\", min_value=None, max_value=100),expect_column_stdev_to_be_between(column=\"fraud_score\", min_value=None, max_value=<acceptable_limit>)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `json_data` field contains valid JSON objects and conforms to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'square_footage': Ensure the field exists. Validate that all values are numeric and that they are greater than 100.","generated_expectations":"expect_column_to_exist(column=\"square_footage\"),expect_column_values_to_be_of_type(column=\"square_footage\", type_=\"float\"),  # Assuming numeric includes float,expect_column_values_to_be_greater_than(column=\"square_footage\", value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `consumption_category`: Validate that all values exist within the set `['Residential', 'Commercial', 'Industrial']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"consumption_category\", value_set=['Residential', 'Commercial', 'Industrial'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'block_timestamp': Ensure values are in valid datetime format matching '%Y-%m-%d %H:%M:%S'. Confirm there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"block_timestamp\"),expect_column_values_to_match_strftime_format(column=\"block_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"block_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `transaction_date` column contains valid datetime strings formatted as 'YYYY-MM-DD HH:MM:SS'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `asset_type` field: Validate that all entries are constrained to the set `['token', 'coin']`. Ensure there are no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"asset_type\", value_set=['token', 'coin']),expect_column_values_to_be_unique(column=\"asset_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For file `user_data.csv`: Ensure the file contains valid headers: `user_id`, `username`, `email`, `signup_date`. Validate that the number of lines does not exceed 10,000.","generated_expectations":"expect_file_to_have_valid_table_header(file=\"user_data.csv\"),expect_file_line_regex_match_count_to_be_between(file=\"user_data.csv\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `points_scored` column passes the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"points_scored\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `data_quality_score` column has values ranging from 0 to 100. Ensure there are no missing values and that the average score aligns with expected quality standards.","generated_expectations":"expect_column_values_to_be_between(column=\"data_quality_score\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"data_quality_score\"),expect_column_mean_to_be_between(column=\"data_quality_score\", min_value=expected_min_average, max_value=expected_max_average)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `payment_status` field: Ensure that values are from the set `['Paid', 'Pending', 'Overdue']` and confirm no nulls.","generated_expectations":"expect_column_values_to_be_in_set(column=\"payment_status\", value_set=['Paid', 'Pending', 'Overdue']),expect_column_values_to_not_be_null(column=\"payment_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `platform` column: Ensure that values are unique and match the set `['PC', 'Console', 'Mobile']`.","generated_expectations":"expect_column_values_to_be_unique(column=\"platform\"),expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Console', 'Mobile'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_type` column contains valid JSON objects and conforms to the specified schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"device_type\"),expect_column_values_to_match_json_schema(column=\"device_type\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'genre': Ensure this field is required (not null). Ensure the field matches the type 'text'. Ensure values are from the predefined list ['Action', 'Adventure', 'Puzzle', 'RPG'].","generated_expectations":"expect_column_values_to_not_be_null(column=\"genre\"),expect_column_values_to_be_of_type(column=\"genre\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"genre\", value_set=['Action', 'Adventure', 'Puzzle', 'RPG'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_id` column contains unique values and matches the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `participant_age`: Ensure that values are within the range of 18 to 65 years.","generated_expectations":"expect_column_values_to_be_between(column=\"participant_age\", min_value=18, max_value=65)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `weight` column contains numeric values that do not exceed the maximum weight limit of 1000 kg.","generated_expectations":"expect_column_values_to_be_between(column=\"weight\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the sum of the `comments_count` across all records does not exceed 500,000.","generated_expectations":"expect_column_sum_to_be_between(column=\"comments_count\", min_value=None, max_value=500000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `customer_feedback` column: Ensure all entries are non-null and valid JSON objects conforming to the defined schema.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_feedback\"),expect_column_values_to_be_json_parseable(column=\"customer_feedback\"),expect_column_values_to_match_json_schema(column=\"customer_feedback\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `location_coordinates` column contains valid JSON objects with keys `latitude` and `longitude` conforming to the specified JSON schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"location_coordinates\", schema={\"type\": \"object\", \"properties\": {\"latitude\": {\"type\": \"number\"}, \"longitude\": {\"type\": \"number\"}}, \"required\": [\"latitude\", \"longitude\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `block_number` field: Ensure all values are unique integers and that there are no null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"block_number\"),expect_column_values_to_not_be_null(column=\"block_number\"),expect_column_values_to_be_of_type(column=\"block_number\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'booking_status': Ensure the field matches the type 'text'. Ensure values in (booking_status) must exist in statuses (['Confirmed', 'Pending', 'Cancelled']).","generated_expectations":"expect_column_values_to_be_of_type(column=\"booking_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"booking_status\", value_set=['Confirmed', 'Pending', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `meter_number` column contains distinct values that match the regex pattern `^[A-Z]{2}[0-9]{6}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"meter_number\", regex=r\"^[A-Z]{2}[0-9]{6}$\"),expect_column_values_to_be_unique(column=\"meter_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `delivery_date` column values follow the datetime format `'%Y-%m-%d'`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `email` column contains valid email formats and does not exceed 255 characters.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\"),expect_column_value_lengths_to_be_between(column=\"email\", min_value=0, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'username': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that all usernames are unique and between 3 to 15 characters in length.","generated_expectations":"expect_column_values_to_not_be_null(column=\"username\"),expect_column_values_to_be_of_type(column=\"username\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"username\", min_value=3, max_value=15),expect_column_values_to_be_unique(column=\"username\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'citizenship_status': Ensure the field matches the type 'text'. Ensure values in (citizenship_status) must exist in the set ('citizen', 'permanent resident', 'temporary resident'). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"citizenship_status\"),expect_column_values_to_be_of_type(column=\"citizenship_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"citizenship_status\", value_set=[\"citizen\", \"permanent resident\", \"temporary resident\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status': Ensure the field matches the type 'text'. Ensure values match one of the predefined statuses: ('active', 'inactive', 'suspended').","generated_expectations":"expect_column_values_to_be_of_type(column=\"status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"status\", value_set=['active', 'inactive', 'suspended'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `interactions` dataset: Ensure the `interaction_date` field is of type 'date' and falls within the range of `['2020-01-01', '2023-12-31']`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"interaction_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"interaction_date\", min_value='2020-01-01', max_value='2023-12-31')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the standard deviation of the `customer_ratings` column is below 1.5.","generated_expectations":"expect_column_stdev_to_be_between(column=\"customer_ratings\", min_value=None, max_value=1.5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'delivery_date': Ensure the field matches the type 'date'. Ensure values in 'delivery_date' are greater than '2023-01-01'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"delivery_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"delivery_date\", min_value=\"2023-01-01\", max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `subscription_start_date`: Ensure the field has no missing values and matches the type 'date'. Validate that all dates are in the past.","generated_expectations":"expect_column_values_to_not_be_null(column=\"subscription_start_date\"),expect_column_values_to_be_of_type(column=\"subscription_start_date\", type_=\"date\"),expect_column_values_to_be_increasing(column=\"subscription_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'player_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"player_id\"),expect_column_values_to_not_be_null(column=\"player_id\"),expect_column_values_to_be_of_type(column=\"player_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'promotion_code': Ensure the field matches the type 'text'. Ensure the field contains unique values. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"promotion_code\")\r,expect_column_values_to_be_of_type(column=\"promotion_code\", type_=\"text\")\r,expect_column_values_to_be_unique(column=\"promotion_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_email` field: Validate that all entries match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$` and are distinct.","generated_expectations":"expect_column_values_to_match_regex(column=\"customer_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_be_unique(column=\"customer_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the total number of transactions in the `daily_transactions` table matches the expected count in the `weekly_summary` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"daily_transactions\", other_table=\"weekly_summary\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email` column contains values that conform to the standard email format and do not contain any null entries.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_not_be_null(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'commission_rate': Ensure the field exists and matches the type 'decimal'. Validate that the values in (commission_rate) are between 0.01 and 0.10, inclusive.","generated_expectations":"expect_column_to_exist(column=\"commission_rate\"),expect_column_values_to_be_of_type(column=\"commission_rate\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"commission_rate\", min_value=0.01, max_value=0.10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'stock_quantity': Ensure the minimum stock quantity is not less than 0. Ensure the average stock quantity is greater than 10.","generated_expectations":"expect_column_min_to_be_between(column=\"stock_quantity\", min_value=0),expect_column_mean_to_be_between(column=\"stock_quantity\", min_value=10, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status': Ensure values in 'status' must exist in the set ['Active', 'Inactive', 'Pending']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Active\", \"Inactive\", \"Pending\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_feedback` column contains distinct values and check for missing entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_feedback\"),expect_column_values_to_not_be_null(column=\"customer_feedback\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains unique values and matches the format of a SHA-256 hash.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^[a-f0-9]{64}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `unique_users` column has a count that aligns with the expected number of registered users, ensuring data integrity.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"unique_users\", min_value=expected_min_value, max_value=expected_max_value)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Data quality requirements for field 'order_id': duplicate_count(order_id) = 0.","generated_expectations":"expect_column_values_to_be_unique(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `discount` column values are greater than or equal to the `original_price` column values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"discount\", column_B=\"original_price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'customer_name': Ensure this field matches the type 'text'. Validate that the length of each name is between 3 and 50 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"customer_name\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"customer_name\", min_value=3, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `network_type` column contains only distinct values matching `['4G', '5G', 'LTE', '3G']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"network_type\", value_set=['4G', '5G', 'LTE', '3G'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `vehicle_id` column contains only unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"vehicle_id\"),expect_column_values_to_not_be_null(column=\"vehicle_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `cancellation_policy` field exists and contains only distinct entries from the set `['Flexible', 'Moderate', 'Strict']`.","generated_expectations":"expect_column_to_exist(column=\"cancellation_policy\"),expect_column_distinct_values_to_equal_set(column=\"cancellation_policy\", value_set=['Flexible', 'Moderate', 'Strict'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `square_footage` column has a maximum value of 10,000 and a minimum value of 500.","generated_expectations":"expect_column_max_to_be_between(column=\"square_footage\", min_value=500, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'research_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field contains unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"research_id\"),expect_column_values_to_be_of_type(column=\"research_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"research_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_number` column contains only unique values and follows the format `CASE-YYYY-XXXX`.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_number\"),expect_column_values_to_match_regex(column=\"case_number\", regex=r\"^CASE-\\d{4}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `gender` column only includes values from the set: `['Male', 'Female', 'Non-Binary']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"gender\", value_set=['Male', 'Female', 'Non-Binary'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `tags` column contains valid JSON arrays and conforms to the expected JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"tags\"),expect_column_values_to_match_json_schema(column=\"tags\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `email_open_rate` column exhibits a p-value greater than 0.05 in the Chi-Square test for the past month.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"email_open_rate\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `country_code` column contains valid ISO 3166-1 alpha-2 country codes.","generated_expectations":"expect_column_values_to_match_regex(column=\"country_code\", regex=r\"^[A-Z]{2}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'publication_date': Ensure the field matches the type 'date'. Ensure this field does not contain future dates.","generated_expectations":"expect_column_values_to_be_of_type(column=\"publication_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"publication_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `event_time` column contains datetime strings that match the `'%Y\/%m\/%d %H:%M'` format, ensuring correct logging of event occurrences.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"event_time\", strftime_format=\"%Y\/%m\/%d %H:%M\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `department_code` column contains only distinct values from the list `['HR', 'Finance', 'IT']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"department_code\", value_set=['HR', 'Finance', 'IT'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_id` column contains unique entries, and all entries exist in the master customer database.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_be_in_set(column=\"customer_id\", value_set=master_customer_database)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that `student_age` values are integers within the range of 18 to 100 and that they follow a consistent ascending order.","generated_expectations":"expect_column_values_to_be_between(column=\"student_age\", min_value=18, max_value=100),expect_column_values_to_be_increasing(column=\"student_age\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'file_upload': Ensure the field matches the type 'text'. Validate that the file path must point to a valid file format (pdf, docx) and not exceed 5MB in size. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"file_upload\"),expect_column_values_to_be_of_type(column=\"file_upload\", type_=\"text\"),expect_file_to_exist(file_path=\"file_upload\"),expect_file_size_to_be_between(file_path=\"file_upload\", min_value=0, max_value=5 * 1024 * 1024),  # size in bytes,expect_column_values_to_match_regex(column=\"file_upload\", regex=r\".*\\.(pdf|docx)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `departure_time` in the Transportation domain is earlier than the `arrival_time` in the same dataset.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"departure_time\", column_B=\"arrival_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'filing_date': Ensure that values in 'filing_date' are in increasing order. Ensure no dates are missing.","generated_expectations":"expect_column_values_to_be_increasing(column=\"filing_date\"),expect_column_values_to_not_be_null(column=\"filing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `invoice_date` column: Check that all entries can be parsed into valid datetime objects and match the strftime format '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"invoice_date\"),expect_column_values_to_match_strftime_format(column=\"invoice_date\", strftime_format='%Y-%m-%d')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'articles': Ensure the column 'author_id' exists and corresponds to valid IDs in the 'authors' table. Ensure the row count is equal to the number of published articles.","generated_expectations":"expect_column_to_exist(column=\"author_id\"),expect_select_column_values_to_be_unique_within_record(column=\"author_id\"),expect_table_row_count_to_equal(other_table=\"published_articles\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `contract_end_date` in the `contracts` table is always greater than the `contract_start_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"contract_end_date\", column_B=\"contract_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'account_creation_date': Ensure the field exists. Validate that all values in 'account_creation_date' conform to the format 'YYYY-MM-DD'. Check that no account was created more than five years ago.","generated_expectations":"expect_column_to_exist(column=\"account_creation_date\"),expect_column_values_to_match_strftime_format(column=\"account_creation_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"account_creation_date\"),expect_column_values_to_be_between(column=\"account_creation_date\", min_value=\"2018-01-01\", max_value=\"2023-01-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_rating': Ensure the field matches the type 'float'. Verify that ratings are between 0.0 and 10.0, inclusive.","generated_expectations":"expect_column_values_to_be_of_type(column=\"user_rating\", type_=\"float\"),expect_column_values_to_be_between(column=\"user_rating\", min_value=0.0, max_value=10.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure this field is required (not null). Ensure all values in 'patient_id' are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_unique(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the total count of records in the weather data file does not exceed 100,000 lines, ensuring manageable file size.","generated_expectations":"expect_file_line_regex_match_count_to_be_between(file_path=\"path\/to\/weather_data_file\", min_value=0, max_value=100000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'purchase_date': Ensure the field matches the type 'date'. Validate that all dates are in the past and there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"purchase_date\", type_=\"date\"),expect_column_values_to_be_null(column=\"purchase_date\"),expect_column_values_to_be_between(column=\"purchase_date\", min_value=\"1900-01-01\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `source_ip` and `destination_ip` columns contain valid IP addresses and are not empty.","generated_expectations":"expect_column_values_to_not_be_null(column=\"source_ip\"),expect_column_values_to_match_regex(column=\"source_ip\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"),expect_column_values_to_not_be_null(column=\"destination_ip\"),expect_column_values_to_match_regex(column=\"destination_ip\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'post_slug': Ensure the field matches the type 'text'. Validate that (post_slug) does not contain any spaces or special characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"post_slug\", type_=\"text\"),expect_column_values_to_not_match_regex(column=\"post_slug\", regex=r\"[^\\w-]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'voter_id': Ensure the field exists. Validate that all values in 'voter_id' match the pattern '^[A-Z0-9]{5,10}$'.","generated_expectations":"expect_column_to_exist(column=\"voter_id\"),expect_column_values_to_match_regex(column=\"voter_id\", regex=r\"^[A-Z0-9]{5,10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email': Ensure the field matches the type 'text'. Validate that all entries conform to the pattern of a standard email format (e.g., user@example.com). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"email\"),expect_column_values_to_be_of_type(column=\"email\", type_=\"text\"),expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combination of `case_id` and `client_id` is unique across all records.","generated_expectations":"expect_compound_columns_to_be_unique(column_a=\"case_id\", column_b=\"client_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `shared_count` field: Ensure the total count falls within the range of 0 to 1000, and all entries are integers.","generated_expectations":"expect_column_sum_to_be_between(column=\"shared_count\", min_value=0, max_value=1000),expect_column_values_to_be_of_type(column=\"shared_count\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `room_price` column has a median value between $50 and $300 and that no prices exceed $1000.","generated_expectations":"expect_column_median_to_be_between(column=\"room_price\", min_value=50, max_value=300),expect_column_max_to_be_between(column=\"room_price\", max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `age` column contains only integer values between 0 and 120, with no null values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"age\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"age\"),expect_column_values_to_be_between(column=\"age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sensor_data': Ensure that values in 'sensor_data' are valid JSON objects and conform to the defined schema for 'sensor_readings'.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"sensor_data\"),expect_column_values_to_match_json_schema(column=\"sensor_data\", schema=\"sensor_readings\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `team_name` column contains only distinct values matching the predefined list of active team names.","generated_expectations":"expect_column_values_to_be_in_set(column=\"team_name\", value_set=[\"list_of_active_team_names\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sender_address` and `receiver_address` columns: Ensure that the combination of sender and receiver addresses is unique across all records.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"sender_address\", column_B=\"receiver_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `platform` field, ensure all entries match the set of allowed values: `['PC', 'Xbox', 'PlayStation', 'Switch']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'clients' table: Confirm that the 'social_security_number' column matches the pattern of a valid SSN (###-##-####) and that it does not contain any duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"social_security_number\", regex=r\"^\\d{3}-\\d{2}-\\d{4}$\"),expect_column_values_to_be_unique(column=\"social_security_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `credit_score` column: Ensure all values are integers between 300 and 850.","generated_expectations":"expect_column_values_to_be_between(column=\"credit_score\", min_value=300, max_value=850),expect_column_values_to_be_of_type(column=\"credit_score\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_feedback` column, validate that the string length falls between 10 and 500 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=10, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `invoice_number` column exists and contains only unique values.","generated_expectations":"expect_column_to_exist(column=\"invoice_number\"),expect_column_values_to_be_unique(column=\"invoice_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `check_in_date` values are less than the corresponding `check_out_date` values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"check_in_date\", column_B=\"check_out_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_date` column contains valid date formats and is not null.","generated_expectations":"expect_column_to_exist(column=\"transaction_date\"),expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\"),expect_column_values_to_not_be_null(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `user_id` field contains only values present in the reference `users` table. Validate that the row count matches the number of transactions logged.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_id\", value_set=users_table_user_ids),expect_table_row_count_to_equal(other_table=\"transactions_table\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the KL divergence between the `sales` distributions across different regions is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"sales\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'listing_date': Ensure all entries conform to the format 'YYYY-MM-DD'. Ensure this field is parsed correctly using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"listing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_requests` column contains valid JSON objects that conform to the specified service schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"service_requests\", schema=\"specified_service_schema\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `fraud_detection_date` column contains datetime values that match the format '%d-%b-%Y'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"fraud_detection_date\", strftime_format=\"%d-%b-%Y\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `sku` field is unique and contains no null values. This field type must be 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"sku\"),expect_column_values_to_not_be_null(column=\"sku\"),expect_column_values_to_be_of_type(column=\"sku\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'forecast_date': Ensure that all dates match the strftime format 'YYYY-MM-DD'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"forecast_date\"),expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'date_collected': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and follows the format '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"date_collected\"),expect_column_values_to_be_of_type(column=\"date_collected\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"date_collected\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'block_id': Ensure values in (block_id) must exist in the blocks table. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"block_id\"),expect_column_values_to_be_in_set(column=\"block_id\", value_set=blocks_table_values)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `location` column contains valid JSON objects that conform to the schema: {'latitude': 'float', 'longitude': 'float', 'altitude': 'float'}.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"location\", schema={'latitude': 'float', 'longitude': 'float', 'altitude': 'float'})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `grades` column, ensure that the average grade is between `0.0` and `4.0` and that no grade exceeds `4.0`.","generated_expectations":"expect_column_mean_to_be_between(column=\"grades\", min_value=0.0, max_value=4.0),expect_column_max_to_be_between(column=\"grades\", max_value=4.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `enrollment_date` column contains dates in the format 'YYYY-MM-DD' and that all dates are before the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"enrollment_date\"),expect_column_values_to_be_increasing(column=\"enrollment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `date_of_birth` field: Ensure all entries are of type 'date' and that there are no missing values. Validate that all dates are before the current date.","generated_expectations":"expect_column_values_to_be_of_type(column=\"date_of_birth\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"date_of_birth\"),expect_column_values_to_be_before(column=\"date_of_birth\", reference_date=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_hash': Ensure the field exists. Validate that the string length is exactly 64 characters.","generated_expectations":"expect_column_to_exist(column=\"transaction_hash\"),expect_column_value_lengths_to_equal(column=\"transaction_hash\", length=64)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `discount_percentage` values are less than or equal to 100 and greater than or equal to 0.","generated_expectations":"expect_column_values_to_be_between(column=\"discount_percentage\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `course_id` column exists and contains values that match the set of defined course identifiers.","generated_expectations":"expect_column_to_exist(column=\"course_id\"),expect_column_values_to_be_in_set(column=\"course_id\", value_set=defined_course_identifiers)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_file': Ensure this field validates file integrity by checking that the file exists and does not exceed 5MB in size.","generated_expectations":"expect_file_to_exist(file_path=\"data_file\"),expect_file_size_to_be_between(file_path=\"data_file\", min_value=0, max_value=5 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `product_id` column is of type `string` and contains no missing or duplicate values. Each entry must be unique.","generated_expectations":"expect_column_values_to_be_of_type(column=\"product_id\", type_=\"string\"),expect_column_values_to_not_be_null(column=\"product_id\"),expect_column_values_to_be_unique(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `meter_reading` column contains only unique values and is of type 'float'. This field must not contain null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"meter_reading\"),expect_column_values_to_be_of_type(column=\"meter_reading\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"meter_reading\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `case_type` column contains only distinct values matching `['Criminal', 'Civil', 'Family']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"case_type\", value_set=[\"Criminal\", \"Civil\", \"Family\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `viewing_time` column is formatted correctly as 'HH:MM:SS' and does not exceed 24 hours.","generated_expectations":"expect_column_values_to_match_regex(column=\"viewing_time\", regex=r\"^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$\"),expect_column_values_to_be_between(column=\"viewing_time\", min_value=\"00:00:00\", max_value=\"24:00:00\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `student_id`: Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values in `student_id` are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"student_id\"),expect_column_values_to_be_of_type(column=\"student_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"student_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_date': Ensure the field matches the type 'datetime'. Verify that all values conform to the format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"transaction_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"transaction_date\", format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the sum of `deductibles` and `co-pays` does not exceed the `maximum_out_of_pocket` limit for each record.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"deductibles\", \"co-pays\"], target_column=\"maximum_out_of_pocket\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `salary` column values are within the range of $30,000 to $250,000 and are arranged in descending order.","generated_expectations":"expect_column_values_to_be_between(column=\"salary\", min_value=30000, max_value=250000),expect_column_values_to_be_decreasing(column=\"salary\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `zip_code` column contains values that are valid US ZIP codes and that there are no duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"zip_code\", regex=r\"^\\d{5}(-\\d{4})?$\"),expect_column_values_to_be_unique(column=\"zip_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `policy_start_date` column values are earlier than the corresponding `policy_end_date` values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"policy_start_date\", column_B=\"policy_end_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` column: Ensure it contains only distinct values from the set `['active', 'inactive', 'suspended']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['active', 'inactive', 'suspended'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'recipient_list': Ensure that the field contains unique email addresses. Validate that the list does not exceed 50 entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"recipient_list\"),expect_column_values_to_be_between(column=\"recipient_list\", min_value=0, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` field: Ensure the minimum value is greater than 0. Ensure this field matches the type 'float'.","generated_expectations":"expect_column_min_to_be_between(column=\"salary\", min_value=0.01),expect_column_values_to_be_of_type(column=\"salary\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `start_date` and `end_date`: Ensure `end_date` is greater than `start_date` for all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"end_date\", column_B=\"start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the number of rows in the 'energy_readings' table is equal to the number of rows in the 'billing_records' table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"energy_readings\", other_table_name=\"billing_records\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `cost` column values are sorted in ascending order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the correlation coefficient between `variable_a` and `variable_b` is less than 0.5.","generated_expectations":"expect_column_pair_cramers_phi_value_to_be_less_than(column_a=\"variable_a\", column_b=\"variable_b\", threshold=0.5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_weight': Ensure the field matches the type 'decimal'. Ensure the field contains values greater than 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"shipment_weight\")\r,expect_column_values_to_be_of_type(column=\"shipment_weight\", type_=\"decimal\")\r,expect_column_values_to_be_between(column=\"shipment_weight\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `tariff_code` matches a specified pattern of 3 uppercase letters followed by 2 digits (e.g., 'ABC12').","generated_expectations":"expect_column_values_to_match_regex(column=\"tariff_code\", regex=r\"^[A-Z]{3}\\d{2}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `transaction_details`: Validate that it is a valid JSON object that includes keys ['amount', 'currency', 'description'].'","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"transaction_details\"),expect_column_values_to_match_json_schema(column=\"transaction_details\", schema={\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\"}, \"currency\": {\"type\": \"string\"}, \"description\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `temperature_reading` values are within the range of -30 to 50 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature_reading\", min_value=-30, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `team` column: Ensure values are from the set `['Team A', 'Team B', 'Team C', 'Team D']` and confirm this field is not null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"team\", value_set=[\"Team A\", \"Team B\", \"Team C\", \"Team D\"]),expect_column_values_to_not_be_null(column=\"team\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'supplier_id': Ensure the field matches the type 'integer'. Ensure values in (supplier_id) are unique and not null. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"supplier_id\"),expect_column_values_to_be_of_type(column=\"supplier_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"supplier_id\"),expect_column_values_to_be_unique(column=\"supplier_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that `game_tags` are represented as valid JSON arrays and do not exceed 5 tags per game.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"game_tags\"),expect_column_values_to_not_match_regex(column=\"game_tags\", regex=r\"^(?:(?:\\[[^]]*\\],?){0,5})$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `weather_conditions` field: Ensure it is of type 'text' and contains only valid values from the set `['Sunny', 'Rainy', 'Cloudy', 'Stormy']`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"weather_conditions\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"weather_conditions\", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the standard deviation of the `price_per_night` column to be below $50, ensuring price consistency.","generated_expectations":"expect_column_stdev_to_be_between(column=\"price_per_night\", max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `team` column values are from the defined set: `['Team A', 'Team B', 'Team C']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"team\", value_set=['Team A', 'Team B', 'Team C'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'student_id': Ensure the expect column values to be in set student.student_id; Ensure this field is a primary key with unique values and is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"student_id\", value_set=student.student_id),expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_not_be_null(column=\"student_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `major` field matches one of the values in the predefined set ['Engineering', 'Arts', 'Science'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"major\", value_set=['Engineering', 'Arts', 'Science'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `delivery_time` column follows an exponential distribution with a mean delivery time of less than 5 days.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"delivery_time\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_type': Ensure all entries match the type 'text'. Ensure the field contains only distinct values from the predefined list ['Prepaid', 'Postpaid', 'Family Plan'].","generated_expectations":"expect_column_values_to_be_of_type(column=\"service_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"service_type\", value_set=['Prepaid', 'Postpaid', 'Family Plan'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `source_ip` field: Validate that all entries match the regex pattern for valid IPv4 addresses.","generated_expectations":"expect_column_values_to_match_regex(column=\"source_ip\", regex=r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `course_feedback` column contains only the values from the set `['Excellent', 'Good', 'Average', 'Poor']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"course_feedback\", value_set=['Excellent', 'Good', 'Average', 'Poor'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'publish_date': Ensure that values in (publish_date) are not later than the current date and are in chronological order.","generated_expectations":"expect_column_values_to_be_decreasing(column=\"publish_date\"),expect_column_values_to_be_between(column=\"publish_date\", min_value=None, max_value=datetime.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_date` field: Ensure all dates are in the past and match the format 'YYYY-MM-DD'. Ensure this field is required.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\"),expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"transaction_date\"),expect_column_values_to_be_between(column=\"transaction_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `average_engagement_rate` column has a mean above 0.05.","generated_expectations":"expect_column_mean_to_be_between(column=\"average_engagement_rate\", min_value=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `coverage_start_date` to ensure all dates are in the past and formatted as `YYYY-MM-DD`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"coverage_start_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_decreasing(column=\"coverage_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `amount` field: Ensure all entries are numeric and fall within the specified range of [0, 10000]. No negative values should be present.","generated_expectations":"expect_column_values_to_be_of_type(column=\"amount\", type_=\"float\"),expect_column_values_to_be_between(column=\"amount\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `address` field: Ensure there are no missing values. Validate that all entries comply with the format 'Street, City, State, Zip'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"address\"),expect_column_values_to_match_regex(column=\"address\", regex=r\"^[\\w\\s]+,\\s*[\\w\\s]+,\\s*[A-Z]{2},\\s*\\d{5}(-\\d{4})?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `game_release_date` column contains dates that do not exceed the current date.","generated_expectations":"expect_column_values_to_be_between(column=\"game_release_date\", min_value=None, max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `date_closed` values are all greater than or equal to their corresponding `filing_date` values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"date_closed\", column_B=\"filing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `alert_id` field: Validate that this field contains unique identifiers and no missing values. Ensure this field is of type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"alert_id\"),expect_column_values_to_not_be_null(column=\"alert_id\"),expect_column_values_to_be_of_type(column=\"alert_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_id` column: Ensure that all values are unique and of type 'integer'. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_of_type(column=\"property_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `created_at` datetime column adheres to the format 'YYYY-MM-DD HH:MM:SS' and contains no null entries.","generated_expectations":"expect_column_to_exist(column=\"created_at\"),expect_column_values_to_match_strftime_format(column=\"created_at\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"created_at\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `complaint_description` is between 10 and 500 characters and contains no SQL-like patterns.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"complaint_description\", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=\"complaint_description\", regex=r\".*(SELECT|INSERT|UPDATE|DELETE|WHERE|DROP|TABLE|--|;).*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` column: Ensure all values are numeric and greater than zero, and no null values are allowed.","generated_expectations":"expect_column_values_to_be_of_type(column=\"price\", type_=\"numeric\"),expect_column_values_to_be_greater_than(column=\"price\", value=0),expect_column_values_to_not_be_null(column=\"price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `teacher_id` column in the `classes` table contains unique identifiers for each instructor.","generated_expectations":"expect_column_values_to_be_unique(column=\"teacher_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `video_id` column contains unique values that match the pattern `^[a-zA-Z0-9]{11}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"video_id\"),expect_column_values_to_match_regex(column=\"video_id\", regex=r\"^[a-zA-Z0-9]{11}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'string'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"transaction_id\"),expect_column_values_to_not_be_null(column=\"transaction_id\"),expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `ip_address` field contains valid IP format and that there are no duplicate entries.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"),expect_column_values_to_be_unique(column=\"ip_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_usage': Ensure the field matches the type 'float'. Validate that all values are non-negative and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"data_usage\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"data_usage\"),expect_column_values_to_be_between(column=\"data_usage\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'wallet_address': Ensure the field matches the type 'text'. Validate that the values conform to the regex pattern `^0x[a-fA-F0-9]{40}$`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"wallet_address\", type_=\"text\"),expect_column_values_to_match_regex(column=\"wallet_address\", regex=r\"^0x[a-fA-F0-9]{40}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_fee': Ensure this field exists. Confirm that the values are of type 'decimal'. Validate that all values are greater than or equal to '0.00'.","generated_expectations":"expect_column_to_exist(column=\"service_fee\"),expect_column_values_to_be_of_type(column=\"service_fee\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"service_fee\", min_value=0.00)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the mean value of the `credit_score` column is between 650 and 750.","generated_expectations":"expect_column_mean_to_be_between(column=\"credit_score\", min_value=650, max_value=750)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_type` column contains only distinct values from the set `['Prepaid', 'Postpaid', 'Hybrid']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"service_type\", value_set=['Prepaid', 'Postpaid', 'Hybrid'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_id` column contains only unique values. Ensure this field is required (not null) and matches the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'delivery_time_estimate': Ensure this field is not null and matches the type 'integer'. Validate that values are between 1 and 72 hours.","generated_expectations":"expect_column_values_to_not_be_null(column=\"delivery_time_estimate\"),expect_column_values_to_be_of_type(column=\"delivery_time_estimate\", type_=\"int\"),expect_column_values_to_be_between(column=\"delivery_time_estimate\", min_value=1, max_value=72)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `department` column: Ensure values match at least one pattern from the list `['HR', 'Finance', 'IT', 'Marketing']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"department\", value_set=['HR', 'Finance', 'IT', 'Marketing'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `weather_data` table has a row count equal to the `forecast_data` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"weather_data\", other_table=\"forecast_data\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_type` column contains only distinct values from the set `['Purchase', 'Refund', 'Transfer']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=['Purchase', 'Refund', 'Transfer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `timestamp` column: Validate that all values match the ISO 8601 format and ensure this field has no null entries.","generated_expectations":"expect_column_to_exist(column=\"timestamp\"),expect_column_values_to_match_strftime_format(column=\"timestamp\", format=\"%Y-%m-%dT%H:%M:%S%z\"),expect_column_values_to_not_be_null(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `job_title` column contains specific titles in the order: `['Manager', 'Senior', 'Junior']`.","generated_expectations":"expect_column_values_to_match_ordered_list(column=\"job_title\", value_list=['Manager', 'Senior', 'Junior'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `view_count` for videos has a median greater than 100 and less than 1,000,000.","generated_expectations":"expect_column_median_to_be_between(column=\"view_count\", min_value=100, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `utility_account_number` column contains distinct values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"utility_account_number\"),expect_column_values_to_not_be_null(column=\"utility_account_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `game_id` column contains unique identifiers and is of type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"game_id\"),expect_column_values_to_be_of_type(column=\"game_id\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the sum of the `budget` and `expenses` columns equals the value in the `total_funding` column for each record.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"budget\", \"expenses\"], target_column=\"total_funding\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `stock_quantity` column contains values within the range of 0 to 1000.","generated_expectations":"expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `media_files` dataset: Ensure all filenames in the `file_name` column do not contain any SQL-like patterns from the list `['DROP', 'SELECT', 'INSERT']`.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"file_name\", regex_list=[r\".*DROP.*\", r\".*SELECT.*\", r\".*INSERT.*\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `final_exam_score` column does not contain any duplicate entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"final_exam_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `amount` column: Validate that all amounts are greater than zero and of type 'float'.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"amount\", value=0),expect_column_values_to_be_of_type(column=\"amount\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `session_duration` field, validate that the mean session time is between 5 and 120 minutes and that no session time is recorded as negative.","generated_expectations":"expect_column_mean_to_be_between(column=\"session_duration\", min_value=5, max_value=120),expect_column_values_to_be_between(column=\"session_duration\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `credit_score` column values are always greater than or equal to the `requested_loan_amount` divided by 1000.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"credit_score\", column_B=\"requested_loan_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `timestamp` entries in the `log` table are unique and fall within the last year.","generated_expectations":"expect_column_values_to_be_unique(column=\"timestamp\"),expect_column_values_to_be_between(column=\"timestamp\", min_value=\"2022-10-01\", max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure the field is required (not null). Ensure the field contains unique values of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `content` field does not contain any SQL-like patterns from the list `['%INSERT%', '%DELETE%']`.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"content\", regex_list=[r\"%INSERT%\", r\"%DELETE%\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `game_date`, validate that all entries are in the format `YYYY-MM-DD` and represent past dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"game_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"game_date\"),expect_column_values_to_be_between(column=\"game_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `billing_cycle` column contains values that match the pattern `^[0-9]{1,2} months$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"billing_cycle\", regex=r\"^[0-9]{1,2} months$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'interactions' table: Ensure the 'interaction_date' column is in the format YYYY-MM-DD and that all dates are within the last two years.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"interaction_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"interaction_date\", min_value=\"2021-10-19\", max_value=\"2023-10-19\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `properties` table equals the number of entries in the `owners` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"properties\", other_table=\"owners\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `start_time` and `end_time`, ensure that `end_time` is always greater than `start_time` for each record.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"end_time\", column_B=\"start_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `premium_amount` column values are non-negative and do not exceed a specified maximum amount.","generated_expectations":"expect_column_values_to_be_between(column=\"premium_amount\", min_value=0, max_value=specific_maximum_value)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `discharge_date` is always later than the corresponding `admission_date` for every patient record.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"discharge_date\", column_B=\"admission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `match_duration` column: Ensure all values are greater than `0` and less than or equal to `120` minutes.","generated_expectations":"expect_column_values_to_be_between(column=\"match_duration\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `sensor_id` column contains unique values across all records, ensuring that each sensor's data is represented only once.","generated_expectations":"expect_column_values_to_be_unique(column=\"sensor_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `player_stats`: Ensure all entries are valid JSON objects that conform to the specified JSON schema for player performance metrics.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"player_stats\"),expect_column_values_to_match_json_schema(column=\"player_stats\", schema=your_json_schema_here)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'candidate_votes': Ensure this column is required (not null). Ensure all values are integers and sum to the total votes cast.","generated_expectations":"expect_column_values_to_not_be_null(column=\"candidate_votes\"),expect_column_values_to_be_of_type(column=\"candidate_votes\", type_=\"int\"),expect_column_sum_to_be_between(column=\"candidate_votes\", min_value=0)  # Assuming total votes cast is a non-negative integer, replace min_value with actual total votes cast if known.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sent_timestamp': Ensure this field cannot be null. Ensure that all timestamps are valid and fall within the last five years.","generated_expectations":"expect_column_values_to_not_be_null(column=\"sent_timestamp\"),expect_column_values_to_be_dateutil_parseable(column=\"sent_timestamp\"),expect_column_values_to_be_between(column=\"sent_timestamp\", min_value=\"2018-01-01T00:00:00\", max_value=\"2023-10-01T00:00:00\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `listing_price` column has a mean value greater than $100,000 and does not exceed $5,000,000, with no null entries.","generated_expectations":"expect_column_mean_to_be_between(column=\"listing_price\", min_value=100000, max_value=5000000),expect_column_values_to_not_be_null(column=\"listing_price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `shipment_date` field: Confirm that all entries are valid dates in the format 'YYYY-MM-DD' and occur before the `delivery_date`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"shipment_date\", column_B=\"delivery_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'research_id': Ensure the field matches the type 'text'. Ensure the length of 'research_id' is exactly 10 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"research_id\"),expect_column_values_to_be_of_type(column=\"research_id\", type_=\"text\"),expect_column_value_lengths_to_equal(column=\"research_id\", length=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'last_contact_date': Ensure that no values are null and that all entries are within the last five years.","generated_expectations":"expect_column_values_to_not_be_null(column=\"last_contact_date\"),expect_column_values_to_be_between(column=\"last_contact_date\", min_value=\"2018-01-01\", max_value=\"2023-01-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `score` column values are within the range of 0 to 300. Ensure the `team_id` column exists and matches against a predefined list of team identifiers.","generated_expectations":"expect_column_values_to_be_between(column=\"score\", min_value=0, max_value=300),expect_column_to_exist(column=\"team_id\"),expect_column_values_to_be_in_set(column=\"team_id\", value_set=[\"team_id_1\", \"team_id_2\", \"team_id_3\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'square_footage': Ensure the field matches the type 'integer'. Ensure values in (square_footage) are greater than 500.","generated_expectations":"expect_column_values_to_be_of_type(column=\"square_footage\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"square_footage\", value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `bio` field: Ensure that string lengths are between 0 and 160 characters and that no entries contain the word 'spam'.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"bio\", min_value=0, max_value=160),expect_column_values_to_not_match_regex(column=\"bio\", regex=r\"\\bspam\\b\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `department`: Ensure that values in this column are non-null and match the type 'text'. Ensure the field contains only distinct values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"department\"),expect_column_values_to_be_of_type(column=\"department\", type_=\"text\"),expect_column_values_to_be_unique(column=\"department\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `genre` column, ensure it matches the regex pattern `^(Action|Comedy|Drama|Documentary)$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"genre\", regex=r\"^(Action|Comedy|Drama|Documentary)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_request_id': Ensure the field matches the type 'string'. Ensure values in (service_request_id) do not match any SQL-like pattern from the list ('%;', '--', '\/*'). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"service_request_id\"),expect_column_values_to_be_of_type(column=\"service_request_id\", type_=\"string\"),expect_column_values_to_not_match_regex_list(column=\"service_request_id\", regex_list=[r\"%;\", r\"--\", r\"\/\\*\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `height` column in the healthcare domain is greater than zero and less than 300 cm.","generated_expectations":"expect_column_values_to_be_between(column=\"height\", min_value=0, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `age` column, ensure values are integers greater than or equal to 0 and less than or equal to 120.","generated_expectations":"expect_column_values_to_be_between(column=\"age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_id` column contains distinct entries and matches a specified set of existing shipment IDs.","generated_expectations":"expect_column_values_to_be_unique(column=\"shipment_id\"),expect_column_values_to_be_in_set(column=\"shipment_id\", value_set=specified_set_of_shipment_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'property_status': Ensure the field matches the type 'text'. Validate that all values in 'property_status' are among the defined set: {active, sold, under_contract, withdrawn}.","generated_expectations":"expect_column_values_to_be_of_type(column=\"property_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"property_status\", value_set={\"active\", \"sold\", \"under_contract\", \"withdrawn\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `description` column does not exceed 500 characters and is not empty.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"description\", min_value=1, max_value=500),expect_column_values_to_not_be_null(column=\"description\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `match_duration` field, ensure that values are greater than zero and do not exceed 120 minutes.","generated_expectations":"expect_column_values_to_be_between(column=\"match_duration\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `likes_count` column follows a normal distribution with p-values greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"likes_count\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'enrollment_date': Ensure the field matches the type 'date'. Validate that all values in (enrollment_date) are within the range of '2021-01-01' to '2023-12-31'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"enrollment_date\"),expect_column_values_to_be_of_type(column=\"enrollment_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"2021-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `p_value` column values are within the range of `0` to `1`.","generated_expectations":"expect_column_values_to_be_between(column=\"p_value\", min_value=0, max_value=1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `transaction_type` column contains only values from the list ['purchase', 'refund', 'transfer'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=['purchase', 'refund', 'transfer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `publish_date`: Ensure all entries are in the format 'YYYY-MM-DD' and are not set in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"publish_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"publish_date\"),expect_column_values_to_be_between(column=\"publish_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `battery_level` column does not contain any missing values and that all values are integers.","generated_expectations":"expect_column_values_to_not_be_null(column=\"battery_level\"),expect_column_values_to_be_of_type(column=\"battery_level\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `category` field contains values that match the predefined list `['Technology', 'Health', 'Lifestyle']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Technology', 'Health', 'Lifestyle'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `signup_date` field: Ensure all entries match the format 'YYYY-MM-DD' and are not future dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"signup_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"signup_date\")  # This ensures dates are parseable,# Additional check for future dates would need a custom expectation, ,# but as per the expectations reference, we cannot define it here.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `config.json` file contains valid JSON formatting and has a key `version` present with a numerical value.","generated_expectations":"expect_file_to_be_valid_json(file_path=\"config.json\"),expect_column_values_to_match_json_schema(column=\"version\", schema={\"type\": \"number\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `temperature` field: Ensure it is of type 'float'. Validate that values are within the range of -50 to 150 degrees Celsius.","generated_expectations":"expect_column_values_to_be_of_type(column=\"temperature\", type_=\"float\"),expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `timestamp` column values are sequential and do not contain any duplicates to maintain data integrity.","generated_expectations":"expect_column_values_to_be_increasing(column=\"timestamp\"),expect_column_values_to_be_unique(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `interest_rate` column, validate that the p-value from the KS test is greater than 0.05, indicating no significant deviation from expected distribution.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"interest_rate\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'platform' field, ensure that values match the set ['PC', 'Xbox', 'PlayStation', 'Nintendo']. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=[\"PC\", \"Xbox\", \"PlayStation\", \"Nintendo\"]),expect_column_values_to_not_be_null(column=\"platform\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'client_feedback_score': Ensure the field matches the type 'numeric'. Validate that the mean of (client_feedback_score) falls within the range of 1 to 5. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"client_feedback_score\"),expect_column_values_to_be_of_type(column=\"client_feedback_score\", type_=\"numeric\"),expect_column_mean_to_be_between(column=\"client_feedback_score\", min_value=1, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the total `order_amount` is calculated accurately across all records, with a sum not exceeding $10,000.","generated_expectations":"expect_column_sum_to_be_between(column=\"order_amount\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `candidate_id` column matches the list of registered candidates and contains no null values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"candidate_id\", value_set=registered_candidates_list),expect_column_values_to_not_be_null(column=\"candidate_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `battery_level` column: Check that values are integers and fall within the range of [0, 100]. No duplicate battery levels should exist.","generated_expectations":"expect_column_values_to_be_of_type(column=\"battery_level\", type_=\"int\"),expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100),expect_column_values_to_be_unique(column=\"battery_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_type': Ensure the field matches the type 'text'. Ensure the values in 'case_type' conform to the pattern '^[A-Z]{3}-[0-9]{3}$'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"case_type\"),expect_column_values_to_be_of_type(column=\"case_type\", type_=\"text\"),expect_column_values_to_match_regex(column=\"case_type\", regex=r\"^[A-Z]{3}-[0-9]{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `enrollment` table is between 100 and 1000.","generated_expectations":"expect_table_row_count_to_be_between(min_value=100, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column exists and contains unique values that are not null.","generated_expectations":"expect_column_to_exist(column=\"product_id\"),expect_column_values_to_not_be_null(column=\"product_id\"),expect_column_values_to_be_unique(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `bedrooms` column contains only non-negative integers and no missing values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"bedrooms\"),expect_column_values_to_be_of_type(column=\"bedrooms\", type_=\"int\"),expect_column_values_to_be_between(column=\"bedrooms\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `filing_date` field: Ensure all values conform to the format 'YYYY-MM-DD' and are valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"filing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'gpa': Ensure the expect column pair values A to be greater than B; Ensure this field matches the type 'decimal' with values between 0.0 and 4.0.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"gpa\", column_B=\"other_column\"),expect_column_values_to_be_of_type(column=\"gpa\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"gpa\", min_value=0.0, max_value=4.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `product_code` column matches the specific pattern `P\\d{5}` and contains only unique values.","generated_expectations":"expect_column_values_to_match_regex(column=\"product_code\", regex=r\"P\\d{5}\"),expect_column_values_to_be_unique(column=\"product_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that `department` values in the `employees` table must exist in the predefined list: ['HR', 'Finance', 'Engineering', 'Sales'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"department\", value_set=['HR', 'Finance', 'Engineering', 'Sales'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `forecast_time` column values can be parsed using dateutil and conform to the expected datetime format.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"forecast_time\"),expect_column_values_to_match_strftime_format(column=\"forecast_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `alert_description` field does not exceed 255 characters and does not contain any SQL-like patterns.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"alert_description\", min_value=0, max_value=255),expect_column_values_to_not_match_regex(column=\"alert_description\", regex=r\".*(SELECT|INSERT|UPDATE|DELETE|WHERE|DROP|CREATE|ALTER).*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `diagnosis_code`: Ensure this field exists as a string and contains codes that match the specified set `['A00', 'B99', 'C00']`.","generated_expectations":"expect_column_to_exist(column=\"diagnosis_code\"),expect_column_values_to_be_of_type(column=\"diagnosis_code\", type_=\"str\"),expect_column_values_to_be_in_set(column=\"diagnosis_code\", value_set=['A00', 'B99', 'C00'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_description': Ensure the field matches the type 'text'. Ensure string lengths in (case_description) are between 1 and 1000 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"case_description\"),expect_column_values_to_be_of_type(column=\"case_description\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"case_description\", min_value=1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `purchase_amount` column follows a uniform distribution with a mean of 100 and standard deviation of 20.","generated_expectations":"expect_column_mean_to_be_between(column=\"purchase_amount\", min_value=80, max_value=120),expect_column_stdev_to_be_between(column=\"purchase_amount\", min_value=0, max_value=20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `username`: Ensure the field is required (not null). Ensure all values in `username` are unique and match the valid username format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"username\"),expect_column_values_to_be_unique(column=\"username\"),expect_column_values_to_match_regex(column=\"username\", regex=r\"^[a-zA-Z0-9_]{3,20}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'timestamp': Ensure the field is required (not null). Ensure the field matches the type 'datetime'. Validate that all timestamps are in the past.","generated_expectations":"expect_column_values_to_not_be_null(column=\"timestamp\"),expect_column_values_to_be_of_type(column=\"timestamp\", type_=\"datetime\"),expect_column_values_to_be_between(column=\"timestamp\", min_value=None, max_value=datetime.datetime.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `policy_number` column contains unique values and follows the specified alphanumeric format.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_match_regex(column=\"policy_number\", regex=r\"^[a-zA-Z0-9]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `cholesterol_level` column: Ensure that values do not exceed 300 mg\/dL.","generated_expectations":"expect_column_values_to_be_between(column=\"cholesterol_level\", min_value=None, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `location` field contains unique string values and does not match any SQL-like patterns from the list `['%'; '--'; ';']`.","generated_expectations":"expect_column_values_to_be_unique(column=\"location\"),expect_column_values_to_not_match_like_pattern_list(column=\"location\", patterns=['%', '--', ';'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_status': Ensure this field contains values from the set ['Sent', 'Failed', 'Pending']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"email_status\"),expect_column_values_to_be_in_set(column=\"email_status\", value_set=['Sent', 'Failed', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `research_id` column: Ensure all values are unique and not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"research_id\"),expect_column_values_to_not_be_null(column=\"research_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'review_date' field: Ensure the field exists and matches the datetime format 'YYYY-MM-DD'. Validate that all review dates are after the 'release_date'.","generated_expectations":"expect_column_to_exist(column=\"review_date\"),expect_column_values_to_match_strftime_format(column=\"review_date\", strftime_format=\"%Y-%m-%d\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"review_date\", column_B=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `category` column only contains values from the set `['Electronics', 'Clothing', 'Home & Garden']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Clothing', 'Home & Garden'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `attack_type` column has no null values and that every value belongs to the set `['Phishing', 'Malware', 'Ransomware']`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"attack_type\"),expect_column_values_to_be_in_set(column=\"attack_type\", value_set=['Phishing', 'Malware', 'Ransomware'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `citizen_complaint` field: Ensure it is a valid JSON object conforming to a predefined schema, including properties like 'complaint_type' and 'details'. Validate the existence of both properties.","generated_expectations":"expect_column_to_exist(column=\"citizen_complaint\"),expect_column_values_to_be_json_parseable(column=\"citizen_complaint\"),expect_column_values_to_match_json_schema(column=\"citizen_complaint\", schema={\"type\": \"object\", \"properties\": {\"complaint_type\": {\"type\": \"string\"}, \"details\": {\"type\": \"string\"}}, \"required\": [\"complaint_type\", \"details\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `termination_date` column has valid datetime entries that can be parsed using dateutil.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"termination_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `hire_date` field conforms to the format 'YYYY-MM-DD' and is parsable using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `alert_id` column: Ensure all values are unique and of type 'string'. No null values are allowed.","generated_expectations":"expect_column_values_to_be_unique(column=\"alert_id\"),expect_column_values_to_not_be_null(column=\"alert_id\"),expect_column_values_to_be_of_type(column=\"alert_id\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_date` column values match the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `student_name` column consists of distinct values and matches the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"student_name\"),expect_column_values_to_be_of_type(column=\"student_name\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'report_date': Ensure the field matches the type 'datetime'. Validate that 'report_date' is formatted as 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"report_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"report_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `ip_address` field: Validate that all entries match the IPv4 format and do not belong to known proxy servers.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"),expect_column_values_to_not_be_in_set(column=\"ip_address\", value_set=[\"known_proxy_ip_1\", \"known_proxy_ip_2\", \"known_proxy_ip_3\"])  # replace with actual proxy IPs","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_id` field: Ensure the field must be unique and not null. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_unique(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `subject` field, validate that all subject lines are between 5 and 100 characters in length and match the regular expression pattern for valid subject lines.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"subject\", min_value=5, max_value=100),expect_column_values_to_match_regex(column=\"subject\", regex=r\"^[\\w\\s\\W]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_start_date`, ensure that all dates are in the past and formatted as `YYYY-MM-DD`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"service_start_date\"),expect_column_values_to_match_strftime_format(column=\"service_start_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"service_start_date\", min_value=None, max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `bedrooms` column contains integers within the range of `1` to `10`, with values outside this range flagged.","generated_expectations":"expect_column_values_to_be_between(column=\"bedrooms\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_role` column values are from the set `['admin', 'user', 'guest']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=['admin', 'user', 'guest'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `age` column contains integer values greater than or equal to 18, with no null values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"age\", type_=\"int\"),expect_column_values_to_be_between(column=\"age\", min_value=18, max_value=None),expect_column_values_to_not_be_null(column=\"age\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `invoice_date` and `payment_due_date`, ensure `payment_due_date` is always greater than `invoice_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"payment_due_date\", column_B=\"invoice_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `policy_number` field: Ensure all values are unique strings with no null entries. Validate the format as 'POLY-XXXX-YYYY'.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_not_be_null(column=\"policy_number\"),expect_column_values_to_match_regex(column=\"policy_number\", regex=r\"^POLY-\\d{4}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `discount` column only accepts values from the set `['0%', '5%', '10%', '15%', '20%']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"discount\", value_set=['0%', '5%', '10%', '15%', '20%'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price_per_night` column: Confirm that the values are numeric and fall between $50 and $1,500.","generated_expectations":"expect_column_values_to_be_of_type(column=\"price_per_night\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"price_per_night\", min_value=50, max_value=1500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `supplier_name`: Ensure the field matches the type 'text'. Ensure values in `supplier_name` must exist in the list of approved suppliers. Ensure no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"supplier_name\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"supplier_name\", value_set=approved_suppliers_list),expect_column_values_to_not_be_null(column=\"supplier_name\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `listing_price` is greater than or equal to the `minimum_price` for each property in the `properties` table.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"listing_price\", column_B=\"minimum_price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `coverage_start_date` column contains valid dates and all entries are in the past.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"coverage_start_date\"),expect_column_values_to_be_less_than(column=\"coverage_start_date\", value=\"now\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure the field matches the type 'text'. Validate that all values in (user_id) are unique and match the format 'USER-XXXX' where 'XXXX' is a 4-digit number.","generated_expectations":"expect_column_values_to_be_of_type(column=\"user_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_match_regex(column=\"user_id\", regex=r\"^USER-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that `user_id` in the `reviews` table exists in the `users` table.","generated_expectations":"expect_column_pair_values_to_be_in_set(column_A=\"reviews.user_id\", column_B=\"users.user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `tags` column contains unique tags that do not exceed 30 characters and match the regex pattern for alphanumeric characters and underscores.","generated_expectations":"expect_column_values_to_be_unique(column=\"tags\"),expect_column_value_lengths_to_be_between(column=\"tags\", min_value=1, max_value=30),expect_column_values_to_match_regex(column=\"tags\", regex=r\"^[\\w]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the number of rows in the `blocks` table is equal to the number of unique `block_height` values.","generated_expectations":"expect_table_row_count_to_equal(column=\"block_height\"),expect_column_unique_value_count_to_be_equal(column=\"block_height\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `delivery_time` column values fall within the expected range of 1 to 30 days.","generated_expectations":"expect_column_values_to_be_between(column=\"delivery_time\", min_value=1, max_value=30)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `policy_number` column contains only unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_not_be_null(column=\"policy_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the values in the `order_date` column are prior to the `delivery_date` values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"order_date\", column_B=\"delivery_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of the `quantity` sold in the `sales` table equals the total in the `inventory` table for the corresponding products.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"quantity\"], table_name=\"sales\", target_column_list=[\"total_quantity\"], target_table_name=\"inventory\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `content_length` column reflects the number of words in the `article_body` column, with a sum of `content_length` matching the actual total word count.","generated_expectations":"expect_column_sum_to_be_between(column=\"content_length\", min_value=0), ,expect_column_most_common_value_to_be_in_set(column=\"content_length\", value_set=[len(article_body.split()) for article_body in df['article_body']]) ,# This assumes that df is a DataFrame containing the article_body and is a placeholder for actual implementation. ,# The most_common_value expectation may need to be replaced with a different one if the actual requirement is to check for equality. ,expect_column_pair_values_A_to_be_equal_B(column_A=\"content_length\", column_B=\"article_body\")  # This checks if content_length matches the word count of article_body.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `case_priority` column only contains values from the set `['High', 'Medium', 'Low']`. Ensure this field exists and has no missing values.","generated_expectations":"expect_column_to_exist(column=\"case_priority\"),expect_column_values_to_not_be_null(column=\"case_priority\"),expect_column_values_to_be_in_set(column=\"case_priority\", value_set=['High', 'Medium', 'Low'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `insured_item` column: Ensure it matches one of the allowed categories in `['Home', 'Auto', 'Health']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"insured_item\", value_set=['Home', 'Auto', 'Health'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `price` column values are formatted as currency and fall within the range of $1 to $1,000.","generated_expectations":"expect_column_values_to_match_regex(column=\"price\", regex=r\"^\\$[0-9,]+(\\.[0-9]{2})?$\"),expect_column_values_to_be_between(column=\"price\", min_value=1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `score` field: Validate that scores are non-negative integers. Ensure the distribution of scores follows a normal distribution with a mean greater than 100.","generated_expectations":"expect_column_values_to_be_between(column=\"score\", min_value=0, max_value=None),expect_column_mean_to_be_between(column=\"score\", min_value=100, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"score\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_id` field: Ensure the field is required (not null) and all values are unique across the dataset.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_unique(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_number': Ensure this field is required (not null). Ensure values in 'case_number' are unique and match the type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_number\"),expect_column_values_to_be_unique(column=\"case_number\"),expect_column_values_to_be_of_type(column=\"case_number\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `zip_code` column, confirm that all entries match the regex pattern `^\\d{5}(-\\d{4})?$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"zip_code\", regex=r\"^\\d{5}(-\\d{4})?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_id': Ensure the expect column values to be in set; Ensure the expect column parameterized distribution ks test p value to be greater than\u00c2\u00a0*; Ensure this field is a primary key with unique values and is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"product_id\", value_set=[...]),  # Replace [...] with the actual set of valid product IDs,expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"product_id\", threshold=0.05),  # Replace 0.05 with the actual threshold value,expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_not_be_null(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `warehouse_location` column contains only distinct values matching the predefined list of warehouse names.","generated_expectations":"expect_column_values_to_be_in_set(column=\"warehouse_location\", value_set=predefined_warehouse_names)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` column: Ensure all values are greater than 0 and less than or equal to 1000.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'players' table: Validate that the 'username' column matches a specified pattern and does not exceed 15 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"username\", min_value=1, max_value=15),expect_column_values_to_match_regex(column=\"username\", regex=r\"^[a-zA-Z0-9_]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `vote_cast` column only contains values from the set `['Yes', 'No']`. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"vote_cast\", value_set=['Yes', 'No']),expect_column_values_to_not_be_null(column=\"vote_cast\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `order_date`: Validate that all entries are of type 'datetime' and that there are no null values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"order_date\"),expect_column_values_to_be_of_type(column=\"order_date\", type_=\"datetime\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'social_security_number': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that all values conform to the SSN format (###-##-####).","generated_expectations":"expect_column_values_to_not_be_null(column=\"social_security_number\"),expect_column_values_to_be_of_type(column=\"social_security_number\", type_=\"text\"),expect_column_values_to_match_regex(column=\"social_security_number\", regex=r\"^\\d{3}-\\d{2}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `battery_level` column contains values that are not null and fall within the set of acceptable values: [0, 1, 2, 3, 4, 5], where 0 indicates no charge and 5 indicates full charge.","generated_expectations":"expect_column_values_to_not_be_null(column=\"battery_level\"),expect_column_values_to_be_in_set(column=\"battery_level\", value_set=[0, 1, 2, 3, 4, 5])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `account_number` field: Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure this field contains unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"account_number\"),expect_column_values_to_be_of_type(column=\"account_number\", type_=\"numeric\"),expect_column_values_to_be_unique(column=\"account_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'account_number': Ensure the field matches the type 'text'. Ensure the field has a fixed length of 10. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"account_number\")\r,expect_column_values_to_be_of_type(column=\"account_number\", type_=\"text\")\r,expect_column_value_lengths_to_equal(column=\"account_number\", target_length=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'loyalty_points': Ensure the expect column parameterized distribution ks test p value to be greater than\u00c2\u00a0*; Ensure the expect column values to be in in range 1-10; Ensure this field matches the type 'integer' and contains values greater than 0.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"loyalty_points\", threshold=0.05),expect_column_values_to_be_between(column=\"loyalty_points\", min_value=1, max_value=10),expect_column_values_to_be_of_type(column=\"loyalty_points\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"loyalty_points\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_type` column: Ensure values are from the set `['Apartment', 'House', 'Condo']`. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"property_type\"),expect_column_values_to_be_in_set(column=\"property_type\", value_set=['Apartment', 'House', 'Condo'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `payment_status` column includes only values from the set `['Paid', 'Pending', 'Cancelled']` and that no invalid statuses are present.","generated_expectations":"expect_column_values_to_be_in_set(column=\"payment_status\", value_set=['Paid', 'Pending', 'Cancelled']),expect_column_values_to_not_be_in_set(column=\"payment_status\", value_set=['InvalidStatus1', 'InvalidStatus2'])  # Replace with actual invalid statuses if known.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the standard deviation of the `price` column is less than 100.","generated_expectations":"expect_column_stdev_to_be_between(column=\"price\", max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ballot_submission_time` column follows the 'YYYY-MM-DD HH:MM:SS' format and all timestamps are valid.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"ballot_submission_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"ballot_submission_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'post_visibility': Ensure values in 'post_visibility' must exist in the set ('public', 'private', 'friends'). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"post_visibility\"),expect_column_values_to_be_in_set(column=\"post_visibility\", value_set=[\"public\", \"private\", \"friends\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'routing_number': Ensure the field exists. Validate that 'routing_number' matches the pattern '^\\d{9}$' and does not belong to any of the lists of known invalid routing numbers.","generated_expectations":"expect_column_to_exist(column=\"routing_number\"),expect_column_values_to_match_regex(column=\"routing_number\", regex=r\"^\\d{9}$\"),expect_column_values_to_not_be_in_set(column=\"routing_number\", value_set=known_invalid_routing_numbers)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `performance_metrics` field contains valid JSON objects conforming to the specified schema, including keys like 'points', 'assists', and 'rebounds'.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"performance_metrics\", schema={ \"type\": \"object\", \"properties\": { \"points\": { \"type\": \"number\" }, \"assists\": { \"type\": \"number\" }, \"rebounds\": { \"type\": \"number\" } }, \"required\": [\"points\", \"assists\", \"rebounds\"] })","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `hashtags` column contains valid JSON objects and conforms to the specified schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"hashtags\"),expect_column_values_to_match_json_schema(column=\"hashtags\", schema=my_json_schema)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transport_data.json` file contains valid JSON formatting and has no more than 5000 lines.","generated_expectations":"expect_file_to_be_valid_json(file_path=\"transport_data.json\"),expect_file_line_regex_match_count_to_be_between(file_path=\"transport_data.json\", min_value=0, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `profile_picture` column contains valid URLs that match the regex pattern `^https?:\\\/\\\/.*\\.(jpg|jpeg|png)$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"profile_picture\", regex=r\"^https?:\\\/\\\/.*\\.(jpg|jpeg|png)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `pickup_location` field is a valid JSON object conforming to the specified schema for location data.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"pickup_location\", schema={...})  # Replace {...} with the actual JSON schema for location data","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `delivery_date` values are not in the past and follow the format `YYYY-MM-DD`.","generated_expectations":"expect_column_values_to_be_increasing(column=\"delivery_date\"),expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the count of unique values in the `user_id` column matches the number of distinct users in the `users` table.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"user_id\", min_value=<number_of_distinct_users>, max_value=<number_of_distinct_users>)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_age': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure the field contains values greater than 18. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"user_age\")\r,expect_column_values_to_not_be_null(column=\"user_age\")\r,expect_column_values_to_be_of_type(column=\"user_age\", type_=\"int\")\r,expect_column_values_to_be_greater_than(column=\"user_age\", value=18)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `published_date` field, ensure all datetime values match the format 'YYYY-MM-DD HH:MM:SS' and are not set in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"published_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"published_date\"),expect_column_values_to_be_between(column=\"published_date\", min_value=\"1900-01-01 00:00:00\", max_value=\"now\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `effective_date`: Ensure the field is required (not null) and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_not_be_null(column=\"effective_date\"),expect_column_values_to_be_dateutil_parseable(column=\"effective_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `researcher_id` column exists and that all values are unique across records.","generated_expectations":"expect_column_to_exist(column=\"researcher_id\"),expect_column_values_to_be_unique(column=\"researcher_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that `loan_amount` in the Banking table is less than or equal to `collateral_value`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"loan_amount\", column_B=\"collateral_value\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `enrollment_date` column contains valid date formats and no missing values.","generated_expectations":"expect_column_to_exist(column=\"enrollment_date\"),expect_column_values_to_be_dateutil_parseable(column=\"enrollment_date\"),expect_column_values_to_not_be_null(column=\"enrollment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_address': Ensure this field is required (not null). Validate that all values conform to the expected address format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_address\"),expect_column_values_to_match_regex(column=\"user_address\", regex=r\"^\\d+\\s[A-z]+\\s[A-z]+\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `research_type` field: Ensure values are from the set `['quantitative', 'qualitative', 'mixed']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"research_type\", value_set=['quantitative', 'qualitative', 'mixed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_id` column only contains values from the predefined set `['C001', 'C002', 'C003']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"customer_id\", value_set=['C001', 'C002', 'C003'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'insurance_number': Ensure this field matches the type 'text'. Ensure values in 'insurance_number' must be unique.","generated_expectations":"expect_column_values_to_be_of_type(column=\"insurance_number\", type_=\"text\"),expect_column_values_to_be_unique(column=\"insurance_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'phone_number': Ensure that the column contains unique values. Verify that the field matches the type 'text' and follows the format '(XXX) XXX-XXXX'.","generated_expectations":"expect_column_values_to_be_unique(column=\"phone_number\"),expect_column_values_to_be_of_type(column=\"phone_number\", type_=\"text\"),expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\(\\d{3}\\) \\d{3}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table `customer_interactions`: Ensure the number of rows is equal to the number of unique customer_ids in the `customers` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"customers\", column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `account_balance` column values are greater than or equal to the corresponding `minimum_balance` column for all accounts.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"account_balance\", column_B=\"minimum_balance\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `termination_date` is always greater than the `date_of_hire` for all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"termination_date\", column_B=\"date_of_hire\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate the `device_id` field to ensure it matches the regex pattern `^device-[0-9]{3,5}$` for consistent formatting.","generated_expectations":"expect_column_values_to_match_regex(column=\"device_id\", regex=r\"^device-[0-9]{3,5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that `last_updated` timestamps are in ISO 8601 format and contain no null values.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"last_updated\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_not_be_null(column=\"last_updated\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `attendance` dataset, confirm that the `attendance_percentage` field is a numeric type and falls within the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_of_type(column=\"attendance_percentage\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"attendance_percentage\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `threat_score` values follow a normal distribution with a mean between 50 and 80, and a standard deviation less than 10.","generated_expectations":"expect_column_mean_to_be_between(column=\"threat_score\", min_value=50, max_value=80),expect_column_stdev_to_be_between(column=\"threat_score\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'region_name': Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"region_name\")\r,expect_column_values_to_be_of_type(column=\"region_name\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `rating` column contains floating-point numbers within the range of 0.0 to 10.0.","generated_expectations":"expect_column_values_to_be_between(column=\"rating\", min_value=0.0, max_value=10.0),expect_column_values_to_be_of_type(column=\"rating\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_status': Ensure the field matches the type 'text'. Validate that values in (customer_status) must exist in the set ['Active', 'Inactive', 'Pending']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_status\"),expect_column_values_to_be_of_type(column=\"customer_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"customer_status\", value_set=['Active', 'Inactive', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `transaction_date` column contains only dates in the format `YYYY-MM-DD` and falls within the last `365` days.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"transaction_date\", min_value=\"2022-10-25\", max_value=\"2023-10-25\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the distribution of `price` values passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"price\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'blood_type': Ensure values are restricted to the valid set ['A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-']. Ensure uniqueness.","generated_expectations":"expect_column_values_to_be_in_set(column=\"blood_type\", value_set=['A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-']),expect_column_values_to_be_unique(column=\"blood_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `price` column values are within the range of $0.01 to $10,000.00.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0.01, max_value=10000.00)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_completion_status` field, validate that the values are from the set `['Completed', 'In Progress', 'Not Started']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"course_completion_status\", value_set=['Completed', 'In Progress', 'Not Started'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'renewal_date': Ensure the field matches the type 'date'. Validate that all renewal dates are formatted as 'YYYY-MM-DD' and that they are greater than the service start date.","generated_expectations":"expect_column_values_to_be_of_type(column=\"renewal_date\", type_=\"date\"),expect_column_values_to_match_strftime_format(column=\"renewal_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_greater_than(column=\"renewal_date\", value=\"service_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `release_date` column entries conform to the `YYYY-MM-DD` format.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify the `alert_count` column values are non-negative integers.","generated_expectations":"expect_column_values_to_be_of_type(column=\"alert_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"alert_count\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_role` column: Ensure values are from the set `['Admin', 'User', 'Guest']`. Verify that no entries fall outside this set.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=['Admin', 'User', 'Guest']),expect_column_values_to_not_be_in_set(column=\"user_role\", value_set=['Admin', 'User', 'Guest'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `risk_score` values in the `risk_analysis` table do not exceed 100 and are integers.","generated_expectations":"expect_column_values_to_be_between(column=\"risk_score\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"risk_score\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the mean of the `view_count` column is greater than or equal to 100.","generated_expectations":"expect_column_mean_to_be_between(column=\"view_count\", min_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `registration_date` is earlier than the `last_login` date for all records in the `user_accounts` table.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"registration_date\", column_B=\"last_login\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `game_title` field, ensure that all titles are unique and contain between 3 and 50 characters.","generated_expectations":"expect_column_values_to_be_unique(column=\"game_title\"),expect_column_value_lengths_to_be_between(column=\"game_title\", min_value=3, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `comment` column matches at least one of the allowed regex patterns for acceptable language use and does not contain any harmful content.","generated_expectations":"expect_column_values_to_match_regex_list(column=\"comment\", regex_list=[r\"allowed_pattern_1\", r\"allowed_pattern_2\", r\"allowed_pattern_3\"]),expect_column_values_to_not_match_regex(column=\"comment\", regex=r\"harmful_content_pattern\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `age` field: Ensure values are integers and within the range of [0, 120]. Any anomalies should be reported.","generated_expectations":"expect_column_values_to_be_of_type(column=\"age\", type_=\"int\"),expect_column_values_to_be_between(column=\"age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that for every entry in the `appointments` table, the `doctor_id` exists in the `doctors` table.","generated_expectations":"expect_column_pair_values_to_be_in_set(column_A=\"appointments.doctor_id\", column_B=\"doctors.doctor_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `order_date` column contains valid datetime entries that can be parsed using dateutil.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_code`: Ensure the field is required (not null). Ensure all entries are unique and match the type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"course_code\"),expect_column_values_to_be_unique(column=\"course_code\"),expect_column_values_to_be_of_type(column=\"course_code\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'owner_email': Ensure the field matches the type 'text'. Validate that the email addresses conform to the standard email format using regular expressions.","generated_expectations":"expect_column_values_to_be_of_type(column=\"owner_email\", type_=\"text\"),expect_column_values_to_match_regex(column=\"owner_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'game_location': Ensure the field matches the type 'text'. Ensure the field does not exceed 100 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"game_location\"),expect_column_value_lengths_to_be_between(column=\"game_location\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"game_location\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_code': Ensure the field matches the type 'text'. Validate that all values in (product_code) conform to the pattern '^[A-Z]{3}-[0-9]{3}$' and are unique.","generated_expectations":"expect_column_values_to_be_of_type(column=\"product_code\", type_=\"text\"),expect_column_values_to_match_regex(column=\"product_code\", regex=r\"^[A-Z]{3}-[0-9]{3}$\"),expect_column_values_to_be_unique(column=\"product_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `quantity` column contains only integer values and does not allow negative numbers.","generated_expectations":"expect_column_values_to_be_of_type(column=\"quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `resolution_date` column values are greater than the `filing_date` values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"resolution_date\", column_B=\"filing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `voter_id` column contains only unique values and no null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"voter_id\"),expect_column_values_to_not_be_null(column=\"voter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `premium_amount` field is of type 'decimal' and does not include any negative values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"premium_amount\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"premium_amount\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `supplier_info` column values are valid JSON objects that adhere to the specified JSON schema for supplier details.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"supplier_info\", schema={\"type\": \"object\", \"properties\": { ... }})  # You would replace the '...' with the actual JSON schema for supplier details.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `p_value` field: validate that all entries are less than 0.05.","generated_expectations":"expect_column_values_to_be_between(column=\"p_value\", min_value=None, max_value=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For file 'threat_intelligence_feed.json': Ensure the file exists. Validate the JSON structure includes keys: ['threat_id', 'description', 'level'].","generated_expectations":"expect_file_to_exist(file_path=\"threat_intelligence_feed.json\"),expect_file_to_have_valid_table_header(file_path=\"threat_intelligence_feed.json\")  # This checks for the presence of the keys, though it doesn't validate the structure directly.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `amenities` JSON field: Validate that it adheres to the specified JSON schema, ensuring all necessary amenities are listed.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"amenities\", schema=\"your_json_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'citation_count': Ensure this field matches the type 'integer'. Confirm that values are non-negative and validate that the standard deviation is below 10.","generated_expectations":"expect_column_values_to_be_of_type(column=\"citation_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"citation_count\", min_value=0, max_value=None),expect_column_stdev_to_be_between(column=\"citation_count\", max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `delivery_date` column is formatted as 'YYYY-MM-DD' and all values can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"delivery_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_time` field, confirm that all timestamps are in the ISO 8601 format and within the next 7 days.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_time\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_be_between(column=\"forecast_time\", min_value=\"current_timestamp\", max_value=\"current_timestamp + interval '7 days'\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `participant_age` column only includes integer values between 18 and 65.","generated_expectations":"expect_column_values_to_be_between(column=\"participant_age\", min_value=18, max_value=65),expect_column_values_to_be_of_type(column=\"participant_age\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `title` column does not exceed 255 characters in length.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"title\", min_value=0, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `case_priority` column contains a maximum of three unique values and that the proportion of each value adheres to specified thresholds.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"case_priority\", min_value=1, max_value=3),expect_column_proportion_of_unique_values_to_be_between(column=\"case_priority\", min_value=0.1, max_value=0.9)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `subscriber_id` field: Ensure all values are unique and of type 'integer'. Ensure no null values exist.","generated_expectations":"expect_column_values_to_be_unique(column=\"subscriber_id\"),expect_column_values_to_not_be_null(column=\"subscriber_id\"),expect_column_values_to_be_of_type(column=\"subscriber_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_amount` column values are strictly positive and within the expected range.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"transaction_amount\", value=0),expect_column_values_to_be_between(column=\"transaction_amount\", min_value=expected_min_value, max_value=expected_max_value)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"shipment_id\"),expect_column_values_to_not_be_null(column=\"shipment_id\"),expect_column_values_to_be_of_type(column=\"shipment_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that `shipment_date` values match the 'YYYY-MM-DD' format and do not exceed the `estimated_arrival_date`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"shipment_date\", column_B=\"estimated_arrival_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'delivery_date': Ensure the field matches the type 'datetime'. Confirm that all values are in the format 'YYYY-MM-DD' and represent future dates.","generated_expectations":"expect_column_values_to_be_of_type(column=\"delivery_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_in_set(column=\"delivery_date\", value_set=some_future_date_logic)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'expiration_date': Ensure all dates are in the future and the field is required (not null).","generated_expectations":"expect_column_values_to_be_increasing(column=\"expiration_date\"),expect_column_values_to_not_be_null(column=\"expiration_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `forecast_date` column matches the format 'YYYY-MM-DD' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `incident_timestamp` column matches the format 'YYYY-MM-DD HH:MM:SS' and can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"incident_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"incident_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'address': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"address\"),expect_column_values_to_not_be_null(column=\"address\"),expect_column_values_to_be_of_type(column=\"address\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure the field is required (not null). Verify uniqueness across the dataset and confirm the type is 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `battery_level` column values are between 0 and 100, representing valid battery percentages.","generated_expectations":"expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_profile': Ensure the field is a valid JSON object. Validate that it contains required fields as specified in the JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"user_profile\"),expect_column_values_to_match_json_schema(column=\"user_profile\", schema={\"required\": [\"field1\", \"field2\"]})  # Replace with actual required fields in the schema.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'network_type': Ensure that values in 'network_type' are from the set ['2G', '3G', '4G', '5G']. Validate that this column does not contain any null values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"network_type\", value_set=['2G', '3G', '4G', '5G']),expect_column_values_to_not_be_null(column=\"network_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `discount_percentage` column: Ensure values are between 0 and 100 and that there are no null values.","generated_expectations":"expect_column_values_to_be_between(column=\"discount_percentage\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"discount_percentage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `content_length` column has a mean value of at least 100 characters and does not contain any negative values.","generated_expectations":"expect_column_mean_to_be_between(column=\"content_length\", min_value=100),expect_column_values_to_be_between(column=\"content_length\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `medical_records` file exists, matches the specified hash value, and contains no more than 500 lines of data in a proper CSV format.","generated_expectations":"expect_file_to_exist(file_path=\"medical_records\"),expect_file_hash_to_equal(file_path=\"medical_records\", expected_hash_value=\"your_expected_hash_value_here\"),expect_file_line_regex_match_count_to_be_between(file_path=\"medical_records\", min_value=0, max_value=500),expect_file_to_have_valid_table_header(file_path=\"medical_records\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `data_log` file: Ensure it matches the expected JSON structure and contains the key `sensor_data`.","generated_expectations":"expect_file_to_be_valid_json(file_path=\"data_log\"),expect_column_values_to_match_json_schema(column=\"sensor_data\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `ratings` column, ensure the values are distributed normally with a mean between 3 and 5.","generated_expectations":"expect_column_mean_to_be_between(column=\"ratings\", min_value=3, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status': Ensure that values in 'status' are from the set ['Pending', 'Shipped', 'Delivered', 'Returned']. Confirm that this field does not contain null values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Pending', 'Shipped', 'Delivered', 'Returned']),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `category` column contains values exclusively from the set `['Electronics', 'Apparel', 'Home']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Apparel', 'Home'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `unique_product_count` column has at least `100` distinct values.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"unique_product_count\", min_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `profile_picture_url` column contains valid URLs and does not exceed 255 characters in length.","generated_expectations":"expect_column_values_to_match_regex(column=\"profile_picture_url\", regex=r\"^(https?|ftp):\/\/[^\\s\/$.?#].[^\\s]*$\"),expect_column_value_lengths_to_be_between(column=\"profile_picture_url\", min_value=0, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `timestamp` column contains valid datetime values and is sorted in increasing order without missing entries.","generated_expectations":"expect_column_to_exist(column=\"timestamp\"),expect_column_values_to_be_dateutil_parseable(column=\"timestamp\"),expect_column_values_to_be_increasing(column=\"timestamp\"),expect_column_values_to_not_be_null(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `timestamp` column contains datetime values parsed according to the format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `player_id` column contains unique values. Validate that it matches the type 'text' and not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_id\"),expect_column_values_to_not_be_null(column=\"player_id\"),expect_column_values_to_be_of_type(column=\"player_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `election_date` column contains dates that are not in the future.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"election_date\"),expect_column_values_to_be_between(column=\"election_date\", min_value=None, max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `discount_code` column: Ensure values are 10-character strings that start with 'SAVE'.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"discount_code\", length=10),expect_column_values_to_match_regex(column=\"discount_code\", regex=r\"^SAVE.*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `rating` column: Ensure values are within the range of 0 to 10, with no missing entries.","generated_expectations":"expect_column_values_to_be_between(column=\"rating\", min_value=0, max_value=10),expect_column_values_to_not_be_null(column=\"rating\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `reaction_count` column values are always greater than or equal to the `like_count` column.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"reaction_count\", column_B=\"like_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `device_type` in the IoT table only includes values from the set `['sensor', 'actuator']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"device_type\", value_set=['sensor', 'actuator'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `username` field: Ensure the field is required (not null). Validate that the length of each username is between 3 and 15 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"username\", min_value=3, max_value=15),expect_column_values_to_not_be_null(column=\"username\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ip_address` column contains only valid IPv4 addresses and no duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\"),expect_column_values_to_be_unique(column=\"ip_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `distance` column values are greater than 0 and within the range of 1 to 10000 kilometers.","generated_expectations":"expect_column_values_to_be_between(column=\"distance\", min_value=1, max_value=10000),expect_column_values_to_be_greater_than(column=\"distance\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status': Ensure that the 'status' column contains only values from the set ['Pending', 'Confirmed', 'Failed']. Validate that there are no missing values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Pending\", \"Confirmed\", \"Failed\"]),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `supplier_rating` column, check that all values are integers within the range of 1 to 5.","generated_expectations":"expect_column_values_to_be_between(column=\"supplier_rating\", min_value=1, max_value=5),expect_column_values_to_be_of_type(column=\"supplier_rating\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `user_id` column has a unique count that matches the total number of transactions recorded.","generated_expectations":"expect_column_unique_value_count_to_be_equal(column=\"user_id\", value=\"total_transactions_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For multi-column validation: Ensure the `end_time` column is greater than the `start_time` column for all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"end_time\", column_B=\"start_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `temperature` column values are between -30 and 50 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-30, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `incidents` column, ensure values are arranged in decreasing order based on severity.","generated_expectations":"expect_column_values_to_be_decreasing(column=\"incidents\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `data_usage` column values are in decreasing order, reflecting the reduction of data consumption over time.","generated_expectations":"expect_column_values_to_be_decreasing(column=\"data_usage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `message_length` column contains values between 0 and 1500 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"message_length\", min_value=0, max_value=1500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that unique values in the `branch_code` column match the defined set of valid branch codes.","generated_expectations":"expect_column_values_to_be_in_set(column=\"branch_code\", value_set=valid_branch_codes)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `outcome_code` must be one of the set `['Win', 'Lose', 'Pending']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"outcome_code\", value_set=['Win', 'Lose', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `outage_start_time`, check that all entries adhere to the format `%Y-%m-%d %H:%M:%S` and do not contain missing values.","generated_expectations":"expect_column_to_exist(column=\"outage_start_time\"),expect_column_values_to_match_strftime_format(column=\"outage_start_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"outage_start_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `total_amount` and `tax`: Ensure that `total_amount` equals the sum of `item_total` and `tax` for each order.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"total_amount\", column_B=\"item_total + tax\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `post_tags` column: Ensure the field contains only distinct values from the specified set of allowed tags. Validate that no entry is null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"post_tags\", value_set=[\"allowed_tag1\", \"allowed_tag2\", \"allowed_tag3\"]),expect_column_values_to_not_be_null(column=\"post_tags\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that 'observation_time' field dates are not in the future and match the expected datetime format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"observation_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"observation_time\"),expect_column_values_to_be_in_set(column=\"observation_time\", value_set=[date for date in observation_time if date <= datetime.now()])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For file 'delivery_log.txt': Validate that the file exists and contains no more than 500 lines. Check that all entries match the required format for delivery records.","generated_expectations":"expect_file_to_exist(file_path=\"delivery_log.txt\"),expect_file_line_regex_match_count_to_be_between(file_path=\"delivery_log.txt\", min_value=0, max_value=500),expect_file_to_have_valid_table_header(file_path=\"delivery_log.txt\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email': Ensure the field matches the type 'text'. Validate that all values conform to the standard email format defined by the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"email\", type_=\"text\"),expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'citizen_id': Ensure the field is required (not null). Ensure the values in this field are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"citizen_id\"),expect_column_values_to_be_unique(column=\"citizen_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `transaction_amount` column values are greater than zero and less than the maximum allowable transaction limit.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0, max_value=max_transaction_limit)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields 'plaintiff_id' and 'defendant_id': Ensure these values are unique within the dataset and that they exist in the 'party_information' table.","generated_expectations":"expect_column_values_to_be_unique(column=\"plaintiff_id\"),expect_column_values_to_be_unique(column=\"defendant_id\"),expect_select_column_values_to_be_unique_within_record(column_set=[\"plaintiff_id\", \"defendant_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `candidate_id` column contains only values from the set `['CAND1', 'CAND2', 'CAND3']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"candidate_id\", value_set=['CAND1', 'CAND2', 'CAND3'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `hypothesis` field is not null and contains text data, ensuring all entries provide a valid hypothesis statement.","generated_expectations":"expect_column_values_to_not_be_null(column=\"hypothesis\"),expect_column_values_to_be_of_type(column=\"hypothesis\", type_=\"text\"),expect_column_values_to_match_like_pattern(column=\"hypothesis\", pattern=\"*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `election_date` field: Ensure it matches the type 'date'. Verify that the date is not null and is greater than today's date.","generated_expectations":"expect_column_values_to_be_of_type(column=\"election_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"election_date\"),expect_column_values_to_be_greater_than(column=\"election_date\", value=\"2023-10-01\")  # Replace with today's date dynamically as needed.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `customer_feedback`: Validate that each entry is a valid JSON object and follows the required schema for feedback structure.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"customer_feedback\"),expect_column_values_to_match_json_schema(column=\"customer_feedback\", schema={\"type\": \"object\", \"properties\": {\"feedback\": {\"type\": \"string\"}, \"rating\": {\"type\": \"number\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `post_title` column has a string length between 5 and 100 characters and does not contain special characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"post_title\", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=\"post_title\", regex=r\"[^a-zA-Z0-9\\s]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'content_length': Ensure the field matches the type 'integer'. Ensure values in (content_length) are greater than 0 and do not exceed 50000 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"content_length\"),expect_column_values_to_be_of_type(column=\"content_length\", type_=\"int\"),expect_column_values_to_be_between(column=\"content_length\", min_value=1, max_value=50000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the relationship between the `temperature` and `humidity` columns shows a correlation coefficient below 0.7.","generated_expectations":"expect_column_pair_cramers_phi_value_to_be_less_than(column_A=\"temperature\", column_B=\"humidity\", threshold=0.7)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `location` column contains only unique values and matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"location\"),expect_column_values_to_be_unique(column=\"location\"),expect_column_values_to_be_of_type(column=\"location\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Evaluate that the `monthly_bill` column has a median value between $50 and $150.","generated_expectations":"expect_column_median_to_be_between(column=\"monthly_bill\", min_value=50, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `complaint_status` field: Ensure it is of type 'text' and contains unique values with no nulls.","generated_expectations":"expect_column_values_to_be_of_type(column=\"complaint_status\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"complaint_status\"),expect_column_values_to_be_unique(column=\"complaint_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `plan_type`: Ensure values in `plan_type` match distinct values from the list `['Basic', 'Standard', 'Premium']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"plan_type\", value_set=['Basic', 'Standard', 'Premium'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'billing_amount': Ensure the field matches the type 'decimal'. Validate that the maximum billing amount does not exceed $1000 and that the median billing amount is above $100.","generated_expectations":"expect_column_values_to_be_of_type(column=\"billing_amount\", type_=\"decimal\"),expect_column_max_to_be_between(column=\"billing_amount\", max_value=1000),expect_column_median_to_be_between(column=\"billing_amount\", min_value=100, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `bedrooms` column has only integer values in the set {1, 2, 3, 4, 5}.","generated_expectations":"expect_column_values_to_be_in_set(column=\"bedrooms\", value_set=[1, 2, 3, 4, 5])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `block_height` column values are non-negative integers and do not exceed the current blockchain height.","generated_expectations":"expect_column_values_to_be_between(column=\"block_height\", min_value=0, max_value=current_blockchain_height),expect_column_values_to_be_of_type(column=\"block_height\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'result_value': Ensure the field is of type 'float'. Validate that it does not contain null values and falls within the specified range of 0.0 to 100.0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"result_value\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"result_value\"),expect_column_values_to_be_between(column=\"result_value\", min_value=0.0, max_value=100.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `genre` column: Ensure that values exist within the set `['Drama', 'Comedy', 'Action', 'Horror']`. No other genres should be present.","generated_expectations":"expect_column_values_to_be_in_set(column=\"genre\", value_set=['Drama', 'Comedy', 'Action', 'Horror'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'course_code': Ensure this field is alphanumeric and matches a valid course pattern.","generated_expectations":"expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^[A-Za-z0-9]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_id` in the `claims` table matches existing values from the `customers` table.","generated_expectations":"expect_column_pair_values_to_be_in_set(column_A=\"claims.customer_id\", column_B=\"customers.customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `resume` file size for each candidate does not exceed 2MB and contains valid content.","generated_expectations":"expect_file_size_to_be_between(column=\"resume\", min_value=0, max_value=2097152),expect_file_to_be_valid_json(column=\"resume\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'stock_level': Ensure values in 'stock_level' are greater than or equal to 0 and do not exceed 1000.","generated_expectations":"expect_column_values_to_be_between(column=\"stock_level\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the table 'smart_contracts': Ensure the number of rows is equal to the row count in 'active_contracts'. Ensure 'contract_address' is unique.","generated_expectations":"expect_table_row_count_to_equal(other_table=\"active_contracts\"),expect_column_values_to_be_unique(column=\"contract_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `citizen_feedback` JSON column to confirm it adheres to the specified schema, including fields `['rating', 'comments']`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"citizen_feedback\", schema={\"type\": \"object\", \"properties\": {\"rating\": {\"type\": \"number\"}, \"comments\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `account_number` column: Ensure all values are unique and match the type 'text'. Validate that the length of each account number is 10 to 12 characters.","generated_expectations":"expect_column_values_to_be_unique(column=\"account_number\"),expect_column_values_to_be_of_type(column=\"account_number\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"account_number\", min_value=10, max_value=12)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'evidence' field: Ensure that it matches the type 'text'. Ensure this field can accept null values if no evidence is present.","generated_expectations":"expect_column_values_to_be_of_type(column=\"evidence\", type_=\"text\"),expect_column_values_to_be_null(column=\"evidence\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_date` column follows the format 'YYYY-MM-DD'. Verify that all dates can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"shipment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'post_title': Ensure the field matches the type 'text'. Validate that the title length is between 5 and 100 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"post_title\"),expect_column_value_lengths_to_be_between(column=\"post_title\", min_value=5, max_value=100),expect_column_values_to_be_of_type(column=\"post_title\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_activity` table: Ensure that the `login_time` is always earlier than `logout_time` for each record.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"login_time\", column_B=\"logout_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'address': Ensure the field matches the type 'text'. Validate that all entries are non-empty and conform to a valid address format.","generated_expectations":"expect_column_values_to_be_of_type(column=\"address\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"address\"),expect_column_values_to_match_regex(column=\"address\", regex=r\"^\\d+\\s[A-z]+\\s[A-z]+\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `weather_condition` column includes only the distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"weather_condition\", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `weather_conditions` column contains valid JSON objects representing weather statuses.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"weather_conditions\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'genre': Ensure the field matches the type 'text'. Validate that the length of string values does not exceed 30 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"genre\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"genre\", min_value=0, max_value=30)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `performance_score` in the `Sports Analytics Platform`, ensure that values are within the range of '0' to '100' and that no entries are missing.","generated_expectations":"expect_column_values_to_be_between(column=\"performance_score\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"performance_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of the `income` and `expenses` columns in each record equals the `net_profit` column.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"income\", \"expenses\"], target_column=\"net_profit\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'premium_due_date': Ensure the field contains datetime values that are not in the past. Ensure this field is required.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"premium_due_date\"),expect_column_values_to_not_be_null(column=\"premium_due_date\"),expect_column_values_to_be_between(column=\"premium_due_date\", min_value=\"2023-10-10\", max_value=None)  # Adjust the min_value as needed to represent the current date.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_type` column contains only distinct values from the set `['Prepaid', 'Postpaid', 'Enterprise']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"service_type\", value_set=['Prepaid', 'Postpaid', 'Enterprise'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the multi-column check on 'case_priority' and 'client_satisfaction_score': Ensure that higher 'case_priority' correlates with a higher 'client_satisfaction_score'.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"case_priority\", column_B=\"client_satisfaction_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `goals_scored` and `assists`: Ensure that the value of `goals_scored` is greater than or equal to `assists`. Ensure both fields are of type 'integer' and not null.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"goals_scored\", column_B=\"assists\"),expect_column_values_to_be_of_type(column=\"goals_scored\", type_=\"int\"),expect_column_values_to_be_of_type(column=\"assists\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"goals_scored\"),expect_column_values_to_not_be_null(column=\"assists\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` column: Ensure it contains values from the set `['active', 'inactive', 'maintenance']` and does not contain null entries.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['active', 'inactive', 'maintenance']),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `research_title` field contains no missing values and has a length between 5 and 150 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"research_title\"),expect_column_value_lengths_to_be_between(column=\"research_title\", min_value=5, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that JSON data in the `sensor_data` column adheres to the specified schema, containing fields `temperature`, `humidity`, and `timestamp`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"sensor_data\", schema={\"type\": \"object\", \"properties\": {\"temperature\": {\"type\": \"number\"}, \"humidity\": {\"type\": \"number\"}, \"timestamp\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `amount` column: Ensure the sum of all transactions is positive and that the average amount exceeds $100.","generated_expectations":"expect_column_sum_to_be_between(column=\"amount\", min_value=0.01, max_value=None),expect_column_mean_to_be_between(column=\"amount\", min_value=100, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `amenities` column contains valid JSON arrays conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"amenities\", schema={\"type\": \"array\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_type` column contains distinct values from the set `['Purchase', 'Return', 'Exchange']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"transaction_type\", value_set=['Purchase', 'Return', 'Exchange'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `subscription_start`: Ensure this field is of type 'date'. Ensure `subscription_start` is not null and is less than or equal to `subscription_end`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"subscription_start\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"subscription_start\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"subscription_start\", column_B=\"subscription_end\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_date` column values can be parsed using dateutil and are not in the future.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"shipment_date\"),expect_column_values_to_be_between(column=\"shipment_date\", min_value=\"1970-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'message_length': Ensure values are greater than or equal to 1 and less than or equal to 5000 characters. Validate that string lengths fall within this specified range.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"message_length\", min_value=1, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the maximum `temperature` recorded in the last month does not exceed the threshold of 100 degrees Fahrenheit.","generated_expectations":"expect_column_max_to_be_between(column=\"temperature\", max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `registration_date` column includes datetime values that can be parsed and correspond to the last 12 months.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"registration_date\"),expect_column_values_to_be_between(column=\"registration_date\", min_value=\"2022-10-01\", max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `supplier_id` in the `orders` table references existing `supplier_id`s in the `suppliers` table.","generated_expectations":"expect_column_pair_values_to_be_in_set(column_A=\"supplier_id\", column_B=\"supplier_id\", set_=\"suppliers.supplier_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `message_length` column: Ensure values are within the range of 1 to 5000 characters, inclusive.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"message_length\", min_value=1, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `interest_rate` column values are between 0 and 20%.","generated_expectations":"expect_column_values_to_be_between(column=\"interest_rate\", min_value=0, max_value=20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `hire_date` field: Ensure values are within the range of '2000-01-01' to the current date and are in chronological order.","generated_expectations":"expect_column_values_to_be_between(column=\"hire_date\", min_value=\"2000-01-01\", max_value=\"current_date\"),expect_column_values_to_be_increasing(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_date` field: Ensure all dates are in the format 'YYYY-MM-DD' and are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_in_set(column=\"forecast_date\", value_set=[date for date in pd.date_range(start=\"1970-01-01\", end=pd.Timestamp.today().date())])  # This part is conceptual; you would need to implement the logic accordingly.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `price` column contains only positive values and that the `discount` column does not exceed the `price` values.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"discount\", column_B=\"price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'SKU': Ensure the field is required (not null). Ensure the field matches the type 'string'. Ensure all values are unique within this column.","generated_expectations":"expect_column_to_exist(column=\"SKU\"),expect_column_values_to_not_be_null(column=\"SKU\"),expect_column_values_to_be_of_type(column=\"SKU\", type_=\"string\"),expect_column_values_to_be_unique(column=\"SKU\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `release_date` values conform to the format 'YYYY-MM-DD' and are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"release_date\")  # This checks if dates are valid,# Additional check to ensure dates are not in the future would require custom logic, as it is not covered by the provided expectations.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `coverage_amount`, validate that all values are greater than the corresponding `premium_amount`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"coverage_amount\", column_B=\"premium_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `room_type` column contains only values from the set `['Single', 'Double', 'Suite']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `release_date` column matches the format 'YYYY-MM-DD' and all values are valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `date_reported` field: Ensure all dates are valid and within the range of the last two years. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"date_reported\"),expect_column_values_to_be_between(column=\"date_reported\", min_value=\"2021-10-01\", max_value=\"2023-10-01\"),expect_column_values_to_not_be_null(column=\"date_reported\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `product_price` and `discounted_price` columns, ensure that `discounted_price` is always less than `product_price`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"product_price\", column_B=\"discounted_price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `merchant_id` is of type 'text' and must not contain any null values. Ensure that all entries are valid.","generated_expectations":"expect_column_values_to_be_of_type(column=\"merchant_id\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"merchant_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'billing_cycle': Ensure the field matches the type 'text'. Validate that column values are either 'Monthly' or 'Quarterly'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"billing_cycle\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"billing_cycle\", value_set=[\"Monthly\", \"Quarterly\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_ids` in the `orders` table must exist in the `customers` table. Ensure both tables are present.","generated_expectations":"expect_table_row_count_to_be_between(table_name=\"orders\", min_value=0), ,expect_table_row_count_to_be_between(table_name=\"customers\", min_value=0),expect_column_values_to_be_in_set(column=\"customer_ids\", value_set=customers_table_customer_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `creation_date` is earlier than the `last_update_date` for each post.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"last_update_date\", column_B=\"creation_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'inventory_count': Ensure this field matches the type 'integer'. Validate that all values are non-negative and not null. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"inventory_count\"),expect_column_values_to_not_be_null(column=\"inventory_count\"),expect_column_values_to_be_of_type(column=\"inventory_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"inventory_count\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sunrise_time` field: Ensure it is in the format 'HH:MM AM\/PM' and is accurate relative to the `forecast_date`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"sunrise_time\", strftime_format=\"%I:%M %p\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"sunrise_time\", column_B=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of `home_runs` and `away_runs` in the `games` table equals the `total_runs` for each entry.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"home_runs\", \"away_runs\"], target_column=\"total_runs\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'stock_quantity': Ensure the field matches the type 'integer'. Ensure values in (stock_quantity) are within the range of 0 to 1000. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"stock_quantity\"),expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the sum of `hours_worked` and `overtime_hours` in the `employee_timesheets` table matches the total `billing_hours` for each employee.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"hours_worked\", \"overtime_hours\"], target_column=\"billing_hours\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `customer_age` column values fall within the range of 18 to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"customer_age\", min_value=18, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `incident_date` field: Verify that all datetime values follow the format '%Y-%m-%d %H:%M:%S'. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"incident_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"incident_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `download_count`: Ensure that the sum of download counts is greater than 100000 and no individual count exceeds 50000.","generated_expectations":"expect_column_sum_to_be_between(column=\"download_count\", min_value=100001, max_value=None),expect_column_max_to_be_between(column=\"download_count\", min_value=None, max_value=50000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'date_of_birth': Ensure the field is required (not null). Validate that all dates are in the format 'YYYY-MM-DD'. Ensure there are no future dates.","generated_expectations":"expect_column_values_to_not_be_null(column=\"date_of_birth\"),expect_column_values_to_match_strftime_format(column=\"date_of_birth\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"date_of_birth\"),expect_column_values_to_be_between(column=\"date_of_birth\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the values in the `release_year` column are greater than or equal to 2000.","generated_expectations":"expect_column_values_to_be_between(column=\"release_year\", min_value=2000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `case_documents` field: Ensure that all file paths are valid, exist, and contain no more than 10 files per case.","generated_expectations":"expect_column_values_to_match_regex(column=\"case_documents\", regex=r\"^.+\\..+$\"),expect_file_to_exist(column=\"case_documents\"),expect_column_unique_value_count_to_be_between(column=\"case_documents\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `date_of_birth` follows the format `YYYY-MM-DD` and all dates are in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"date_of_birth\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_less_than(column=\"date_of_birth\", value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'cargo_weight': Ensure the field matches the type 'float'. Validate that all values are greater than zero and formatted correctly with two decimal places.","generated_expectations":"expect_column_values_to_be_of_type(column=\"cargo_weight\", type_=\"float\"),expect_column_values_to_be_greater_than(column=\"cargo_weight\", value=0),expect_column_values_to_match_regex(column=\"cargo_weight\", regex=r\"^\\d+(\\.\\d{2})?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `platform` column only contains values from the set `['PC', 'Xbox', 'PlayStation']` and is not null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Xbox', 'PlayStation']),expect_column_values_to_not_be_null(column=\"platform\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `lead_status` column contains only distinct values from the set ['New', 'Contacted', 'Qualified', 'Converted'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"lead_status\", value_set=['New', 'Contacted', 'Qualified', 'Converted'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_id` column exists and contains unique identifiers for each shipment recorded.","generated_expectations":"expect_column_to_exist(column=\"shipment_id\"),expect_column_values_to_be_unique(column=\"shipment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` column: Check that all values are greater than 0 and that the average price per `location` is within the specified range.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"price\", value=0),expect_column_mean_to_be_between(column=\"price\", min_value=<min_value>, max_value=<max_value>)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'booking_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'booking_id' are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"booking_id\"),expect_column_values_to_be_of_type(column=\"booking_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"booking_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `service_type` column: Confirm that all entries are from the set `['utility', 'transportation', 'health']` and that there are no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"service_type\", value_set=['utility', 'transportation', 'health']),expect_column_values_to_be_unique(column=\"service_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `humidity` column contains only distinct values within the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100),expect_column_values_to_be_unique(column=\"humidity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `listing_date` field: Ensure it exists and is formatted as YYYY-MM-DD. Validate that there are no future listing dates present.","generated_expectations":"expect_column_to_exist(column=\"listing_date\"),expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"listing_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'message_length': Ensure the field matches the type 'integer'. Ensure values in (message_length) are greater than 0 and do not exceed 500. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"message_length\"),expect_column_values_to_be_of_type(column=\"message_length\", type_=\"int\"),expect_column_values_to_be_between(column=\"message_length\", min_value=1, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `research_papers` table is between 50 and 200 and that it matches the count in the `publications` table.","generated_expectations":"expect_table_row_count_to_be_between(table=\"research_papers\", min_value=50, max_value=200),expect_table_row_count_to_equal_other_table(table=\"research_papers\", other_table=\"publications\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'aggregate_sales': Ensure that the total sales figure is within the range of [10,000, 1,000,000] and that no outliers exist in the monthly sales data.","generated_expectations":"expect_column_sum_to_be_between(column=\"aggregate_sales\", min_value=10000, max_value=1000000),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"aggregate_sales\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `application_date` field contains valid date formats and does not include future dates.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"application_date\"),expect_column_values_to_be_between(column=\"application_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'subscription_start_date': Ensure the field exists and matches the datetime format 'YYYY-MM-DD'. Validate that the date is not in the future.","generated_expectations":"expect_column_to_exist(column=\"subscription_start_date\"),expect_column_values_to_match_strftime_format(column=\"subscription_start_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"subscription_start_date\"),expect_column_values_to_be_between(column=\"subscription_start_date\", min_value=\"2000-01-01\", max_value=datetime.datetime.now().strftime(\"%Y-%m-%d\"))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `policy_number` column has a length of exactly `12` characters and follows the format `^[A-Z]{3}[0-9]{9}$`.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"policy_number\", target_value=12),expect_column_values_to_match_regex(column=\"policy_number\", regex=r\"^[A-Z]{3}[0-9]{9}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `listing_date` field: Ensure all entries are formatted as valid dates and contain no null values.","generated_expectations":"expect_column_to_exist(column=\"listing_date\"),expect_column_values_to_be_dateutil_parseable(column=\"listing_date\"),expect_column_values_to_not_be_null(column=\"listing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check if the `request_id` column contains unique values and must not be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"request_id\"),expect_column_values_to_not_be_null(column=\"request_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'destination_location': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"destination_location\"),expect_column_values_to_not_be_null(column=\"destination_location\"),expect_column_values_to_be_of_type(column=\"destination_location\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `threat_level`, verify that values are within the set ['Low', 'Medium', 'High'] and that there are no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_level\", value_set=['Low', 'Medium', 'High']),expect_column_values_to_be_unique(column=\"threat_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `malware_type` column contains only distinct entries and matches the specified set `['Virus', 'Trojan', 'Worm']`.","generated_expectations":"expect_column_values_to_be_unique(column=\"malware_type\"),expect_column_values_to_be_in_set(column=\"malware_type\", value_set=['Virus', 'Trojan', 'Worm'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'insurance_details': Ensure the field contains valid JSON objects that conform to the specified JSON schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"insurance_details\", schema=json_schema)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the average `years_of_experience` in the `experience` column is at least 3 years.","generated_expectations":"expect_column_mean_to_be_between(column=\"experience\", min_value=3)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the combination of `experiment_id` and `subject_id` fields are unique across records to maintain data integrity.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"experiment_id\", column_B=\"subject_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the average value in the `monthly_cost` column falls between 50 and 300.","generated_expectations":"expect_column_mean_to_be_between(column=\"monthly_cost\", min_value=50, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `delivery_status` field: Ensure that values must be one of the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"delivery_status\", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `release_timestamp` column adheres to the `YYYY-MM-DDTHH:MM:SS` format and is valid.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"release_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `block_number` values are unique and represent a positive integer in the `blockchain_data` table.","generated_expectations":"expect_column_values_to_be_unique(column=\"block_number\"),expect_column_values_to_be_of_type(column=\"block_number\", type_=\"int\"),expect_column_values_to_be_between(column=\"block_number\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `response_time` column: Validate that all entries are numeric and fall within the range of 0 to 300 seconds, ensuring there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"response_time\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"response_time\", min_value=0, max_value=300),expect_column_values_to_not_be_null(column=\"response_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of the `interest_rate` column in the `financial_products` table is equal to 5% of the total loan amount.","generated_expectations":"expect_column_sum_to_be_between(column=\"interest_rate\", min_value=total_loan_amount * 0.05, max_value=total_loan_amount * 0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'experiment_id': Ensure all values are unique. Ensure the field matches the type 'text'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_unique(column=\"experiment_id\"),expect_column_values_to_be_of_type(column=\"experiment_id\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"experiment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_id` column contains only distinct values and is of type 'integer'. This field must not contain null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_of_type(column=\"property_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `category` column has a predefined set of values: `['Electronics', 'Fashion', 'Home']` and contains no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Fashion', 'Home']),expect_column_values_to_be_unique(column=\"category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `order_status` column contains valid entries from the set `['pending', 'shipped', 'delivered', 'returned']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"order_status\", value_set=['pending', 'shipped', 'delivered', 'returned'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `publish_date` is greater than the `creation_date` for all content entries.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"publish_date\", column_B=\"creation_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_number` column contains unique values and matches the format 'ACCT-XXXXXX', where X is a digit.","generated_expectations":"expect_column_values_to_be_unique(column=\"account_number\"),expect_column_values_to_match_regex(column=\"account_number\", regex=r\"^ACCT-\\d{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'content_id': Ensure values in (content_id) must exist in the dataset of available content IDs. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"content_id\"),expect_column_values_to_be_in_set(column=\"content_id\", value_set=available_content_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `sales` column passes the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"sales\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `order_date`, validate that all entries are in the format `YYYY-MM-DD` and are not older than two years.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"order_date\")  # This ensures the dates are parseable,# For validating that dates are not older than two years, a custom implementation may be needed as there is no direct expectation for this.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category': Ensure the field matches the type 'text'. Ensure values in (category) must exist in the set ['blog', 'news', 'tutorial', 'review']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"category\"),expect_column_values_to_be_of_type(column=\"category\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"category\", value_set=['blog', 'news', 'tutorial', 'review'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'contact_number': Ensure this field exists. Validate that all values match the pattern '^\\+?[0-9]{10,15}$'.","generated_expectations":"expect_column_to_exist(column=\"contact_number\"),expect_column_values_to_match_regex(column=\"contact_number\", regex=r\"^\\+?[0-9]{10,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `salary` column contains only numeric values greater than zero and that the total sum of salaries does not exceed 1,000,000.","generated_expectations":"expect_column_values_to_be_between(column=\"salary\", min_value=0, max_value=None),expect_column_sum_to_be_between(column=\"salary\", min_value=None, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `registration_date` column, confirm that all datetime entries follow the format '%Y-%m-%d' and fall within the last five years.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"registration_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"registration_date\", min_value=\"2018-01-01\", max_value=\"2023-01-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `diagnosis_code` is not null and matches a predefined set of valid codes.","generated_expectations":"expect_column_values_to_not_be_null(column=\"diagnosis_code\"),expect_column_values_to_be_in_set(column=\"diagnosis_code\", value_set=valid_codes)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'policy_number': Ensure the field matches the type 'text'. Validate that all values conform to the pattern of a 10-digit numeric string.","generated_expectations":"expect_column_values_to_be_of_type(column=\"policy_number\", type_=\"text\"),expect_column_values_to_match_regex(column=\"policy_number\", regex=r\"^\\d{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `csv_data` file: Validate that it contains a header row and that the number of lines does not exceed `1000`.","generated_expectations":"expect_file_to_have_valid_table_header(file=\"csv_data\"),expect_file_line_regex_match_count_to_be_between(file=\"csv_data\", min_value=1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `submission_time` field: Ensure datetime strings can be parsed using dateutil and match the format `%H:%M:%S`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"submission_time\"),expect_column_values_to_match_strftime_format(column=\"submission_time\", strftime_format=\"%H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `sender_id` in the `emails` table must exist in the `users` table and is unique across the dataset.","generated_expectations":"expect_column_values_to_be_unique(column=\"sender_id\"),expect_column_pair_values_to_be_in_set(column_A=\"sender_id\", column_B=\"users\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_id` column exists and contains unique values formatted as 'CUST-####'.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_match_regex(column=\"customer_id\", regex=r\"^CUST-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the mean value of the `purchase_amount` column falls within the range of 50 to 200 and that the median is greater than 75.","generated_expectations":"expect_column_mean_to_be_between(column=\"purchase_amount\", min_value=50, max_value=200),expect_column_median_to_be_between(column=\"purchase_amount\", min_value=75, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `price` column contains values that fall within the range of `$100,000` to `$5,000,000`.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=100000, max_value=5000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `video_id` column contains only distinct values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"video_id\"),expect_column_values_to_not_be_null(column=\"video_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_type` column only contains values from the set `['Deposit', 'Withdrawal', 'Transfer']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=['Deposit', 'Withdrawal', 'Transfer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `wind_speed` column has a standard deviation that does not exceed 20 km\/h.","generated_expectations":"expect_column_stdev_to_be_between(column=\"wind_speed\", min_value=0, max_value=20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `account_type` field: Ensure that values must be one of the specified options: `['Savings', 'Checking', 'Investment']`. This field cannot contain null values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"account_type\", value_set=['Savings', 'Checking', 'Investment']),expect_column_values_to_not_be_null(column=\"account_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category': Ensure the field matches the type 'text'. Ensure that all values conform to the pattern of valid category names using regex.","generated_expectations":"expect_column_values_to_be_of_type(column=\"category\", type_=\"text\"),expect_column_values_to_match_regex(column=\"category\", regex=r\"^[A-Za-z0-9_ ]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `image_url`, confirm that it matches the regular expression `^(http|https):\/\/[a-zA-Z0-9.\/]+\\\\.(jpg|jpeg|png|gif)$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"image_url\", regex=r\"^(http|https):\/\/[a-zA-Z0-9.\/]+\\.(jpg|jpeg|png|gif)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_id`: Ensure this field includes only unique identifiers that match the defined set of active user IDs.","generated_expectations":"expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_be_in_set(column=\"user_id\", value_set=active_user_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the 'guest_email' column matches the regular expression pattern for valid email addresses. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"guest_email\"),expect_column_values_to_match_regex(column=\"guest_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `load_weight` field: Ensure the field is required (not null). Ensure the values adhere to a consistent distribution, passing the KS test with a p-value greater than 0.05.","generated_expectations":"expect_column_values_to_not_be_null(column=\"load_weight\"),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"load_weight\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_feedback` column does not contain any entries matching the regex pattern `^.*(?:bad|poor|awful).*$`.","generated_expectations":"expect_column_values_to_not_match_regex(column=\"customer_feedback\", regex=r\"^.*(?:bad|poor|awful).*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `hire_date` column values are formatted as 'YYYY-MM-DD' and fall within the range of the last five years.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"hire_date\", min_value=\"2018-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure the field exists. Ensure the values in (user_id) are unique and not null.","generated_expectations":"expect_column_to_exist(column=\"user_id\"),expect_column_values_to_not_be_null(column=\"user_id\"),expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'vehicle_type': Ensure it is of type 'text' and contains only values from the set ['Truck', 'Van', 'Bicycle']. Ensure it is not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"vehicle_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"vehicle_type\", value_set=['Truck', 'Van', 'Bicycle']),expect_column_values_to_not_be_null(column=\"vehicle_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `user_role` values are from the set ['Admin', 'User', 'Guest'] and ensure there are no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=['Admin', 'User', 'Guest']),expect_column_values_to_be_unique(column=\"user_role\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure the expect column values to be unique; Ensure this field is a primary key with unique values and is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `check_in_date` and `check_out_date` columns contain valid JSON objects adhering to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"check_in_date\", schema={}),expect_column_values_to_match_json_schema(column=\"check_out_date\", schema={})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `account_number` field: Ensure values are unique and match the type 'string'. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"account_number\"),expect_column_values_to_not_be_null(column=\"account_number\"),expect_column_values_to_be_of_type(column=\"account_number\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `device_id` and `location_id` combination is unique across records.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"device_id\", column_B=\"location_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `final_grade` column contains values between 0 and 100, adhering to the specified range.","generated_expectations":"expect_column_values_to_be_between(column=\"final_grade\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_date': Ensure the field exists. Validate that all values in 'transaction_date' match the format 'YYYY-MM-DD HH:MM:SS'. Ensure there are no future transaction dates.","generated_expectations":"expect_column_to_exist(column=\"transaction_date\"),expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_less_than(column=\"transaction_date\", value=\"now\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the total number of rows in the `weather_records` table equals 365.","generated_expectations":"expect_table_row_count_to_equal(column=\"weather_records\", value=365)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'hire_date': Ensure the field matches the type 'datetime'. Confirm that all dates are in the format 'YYYY-MM-DD' and are not in the future.","generated_expectations":"expect_column_values_to_be_of_type(column=\"hire_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_in_set(column=\"hire_date\", set_=list(pd.date_range(start='1900-01-01', end=pd.Timestamp.now())))  # Assuming a range from a historical date to now.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `client_id` column has no missing values and that all entries are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"client_id\"),expect_column_values_to_be_unique(column=\"client_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'ip_address': Ensure all addresses match the regular expression pattern '^((25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])\\\\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])))$'.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r'^((25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])\\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])))$')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'claim_amount' column: Ensure values are non-negative and that there are no missing entries.","generated_expectations":"expect_column_values_to_be_between(column=\"claim_amount\", min_value=0),expect_column_values_to_not_be_null(column=\"claim_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_rating': Ensure the field matches the type 'float'. Validate that all values in (user_rating) fall within the range of 0.0 to 10.0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"user_rating\", type_=\"float\"),expect_column_values_to_be_between(column=\"user_rating\", min_value=0.0, max_value=10.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `user_reviews` column does not contain any entries with a review length exceeding 500 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"user_reviews\", min_value=0, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `enrollment_date` column is formatted as 'MM\/DD\/YYYY' and is not a future date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_in_set(column=\"enrollment_date\", value_set=[date for date in range(datetime.datetime.now().year)])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `quantity_shipped` field: Validate that the mean value is above 0 and that no entries are negative.","generated_expectations":"expect_column_mean_to_be_between(column=\"quantity_shipped\", min_value=0),expect_column_values_to_be_between(column=\"quantity_shipped\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `feedback_score` column to ensure it follows a uniform distribution with a KL divergence below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"feedback_score\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'employee_id': Ensure this field is required (not null). Ensure the field matches the type 'integer'. Ensure values are unique across the database.","generated_expectations":"expect_column_values_to_not_be_null(column=\"employee_id\"),expect_column_values_to_be_of_type(column=\"employee_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_feedback': Ensure this field exists. Validate that the length of strings in 'customer_feedback' is between 5 and 1000 characters.","generated_expectations":"expect_column_to_exist(column=\"customer_feedback\"),expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=5, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `age` column: Verify that the mean age of patients falls within 0 to 120 years and that the standard deviation does not exceed 15 years.","generated_expectations":"expect_column_mean_to_be_between(column=\"age\", min_value=0, max_value=120),expect_column_stdev_to_be_between(column=\"age\", min_value=0, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `match_date` field, validate that all entries conform to the ISO 8601 format `YYYY-MM-DD`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"match_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `publish_date` and `last_updated` fields: Ensure `last_updated` is always greater than `publish_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"last_updated\", column_B=\"publish_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `document_size` in the file matches specified hash values and falls within the range of 1 KB to 10 MB.","generated_expectations":"expect_file_hash_to_equal(file_hash), ,expect_file_size_to_be_between(min_value=1024, max_value=10485760)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_date`, ensure all entries are in the format 'MM\/DD\/YYYY' and are valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the size of the `weather_data.xlsx` file falls within the range of 1 MB to 10 MB.","generated_expectations":"expect_file_size_to_be_between(filepath=\"weather_data.xlsx\", min_value=1 * 1024 * 1024, max_value=10 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `game_date` column contains datetime values that match the strftime format '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"game_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `quantity_sold` column only contains integer values greater than 0. Validate that the total quantity sold does not exceed the `inventory_count` across all products.","generated_expectations":"expect_column_values_to_be_of_type(column=\"quantity_sold\", type_=\"int\"),expect_column_values_to_be_between(column=\"quantity_sold\", min_value=1, max_value=None),expect_column_sum_to_be_between(column=\"quantity_sold\", min_value=None, max_value=\"inventory_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the sum of the `price` and `shipping_cost` columns equals the `total_cost` column for all records.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"price\", column_B=\"total_cost\", condition=\"column_A + shipping_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `booking_id` field: Ensure this field is required (not null). Ensure all values are unique and of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"booking_id\"),expect_column_values_to_be_unique(column=\"booking_id\"),expect_column_values_to_be_of_type(column=\"booking_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `course_completion` column has binary values (0 or 1) indicating whether each course was completed.","generated_expectations":"expect_column_values_to_be_in_set(column=\"course_completion\", value_set=[0, 1])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `age` column values are within the range of 0 to 120 years.","generated_expectations":"expect_column_values_to_be_between(column=\"age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `comments` table is equal to 1500. Ensure this table exists.","generated_expectations":"expect_table_row_count_to_equal(table=\"comments\", value=1500),expect_table_to_exist(table=\"comments\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `candidate_id`: Ensure unique values are present and that it is of type 'text'. No null values should exist.","generated_expectations":"expect_column_values_to_be_unique(column=\"candidate_id\"),expect_column_values_to_be_of_type(column=\"candidate_id\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"candidate_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `email`: Ensure that all values match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$` and contain no missing values.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_not_be_null(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the average `monthly_bill` in the dataset is between $30 and $100, and the total sum does not exceed $10,000.","generated_expectations":"expect_column_mean_to_be_between(column=\"monthly_bill\", min_value=30, max_value=100),expect_column_sum_to_be_between(column=\"monthly_bill\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `platform` column contains only distinct values matching `['PC', 'Console', 'Mobile']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=[\"PC\", \"Console\", \"Mobile\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `job_title` column contains only distinct values from the list `['Manager', 'Developer', 'HR']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"job_title\", value_set=['Manager', 'Developer', 'HR'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `delivery_status` column, confirm that all values are either `['Pending', 'In Transit', 'Delivered']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"delivery_status\", value_set=['Pending', 'In Transit', 'Delivered'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `messages` table is between 50 and 1000.","generated_expectations":"expect_table_row_count_to_be_between(min_value=50, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `transaction_date` column: Validate that all entries are in the format 'YYYY-MM-DDTHH:MM:SSZ' and are non-null.","generated_expectations":"expect_column_to_exist(column=\"transaction_date\"),expect_column_values_to_not_be_null(column=\"transaction_date\"),expect_column_values_to_match_regex(column=\"transaction_date\", regex=r\"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `votes_cast` column follows a normal distribution. Conduct a KS test with a p-value threshold of 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"votes_cast\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `assignment_title` column entries are at least 5 characters long and do not contain special characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"assignment_title\", min_value=5, max_value=None),expect_column_values_to_not_match_regex(column=\"assignment_title\", regex=r\"[!@#$%^&*(),.?\\\":{}|<>]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `review_score` column: Ensure values are within the range of `1` to `5` and are in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"review_score\", min_value=1, max_value=5),expect_column_values_to_be_increasing(column=\"review_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `content_length` column has a median value greater than 500 characters.","generated_expectations":"expect_column_median_to_be_between(column=\"content_length\", min_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `hire_date`: Ensure that all dates are formatted as 'YYYY-MM-DD' and that they are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\"),expect_column_values_to_be_less_than(column=\"hire_date\", value=\"now\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'date_of_birth': Ensure the field matches the type 'date'. Ensure all values in (date_of_birth) are before the current date. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"date_of_birth\"),expect_column_values_to_be_of_type(column=\"date_of_birth\", type_=\"date\"),expect_column_values_to_be_less_than(column=\"date_of_birth\", value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `forecast_date` column values match the format 'DD\/MM\/YYYY' and can be successfully parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%d\/%m\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `guest_email` field: Ensure that all entries are valid email formats and contain no null values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"guest_email\"),expect_column_values_to_match_regex(column=\"guest_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `sample_size` field is greater than 30 and within the range of [31, 1000].","generated_expectations":"expect_column_max_to_be_between(column=\"sample_size\", min_value=31, max_value=1000),expect_column_mean_to_be_between(column=\"sample_size\", min_value=31, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email` column in `users` table adheres to proper JSON formatting and is unique.","generated_expectations":"expect_column_to_exist(column=\"email\"),expect_column_values_to_be_json_parseable(column=\"email\"),expect_column_values_to_be_unique(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `currency_type` column includes only values from the set `['BTC', 'ETH', 'LTC']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"currency_type\", value_set=['BTC', 'ETH', 'LTC'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `weight` column: Ensure values fall within the range of 0 to 1000 kilograms and are sorted in ascending order.","generated_expectations":"expect_column_values_to_be_between(column=\"weight\", min_value=0, max_value=1000),expect_column_values_to_be_increasing(column=\"weight\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'upload_timestamp': Ensure all entries are in the datetime format 'YYYY-MM-DD HH:MM:SS' and are in the past relative to the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"upload_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"upload_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `followers_count` field: Validate that all entries are integers and are arranged in increasing order.","generated_expectations":"expect_column_values_to_be_of_type(column=\"followers_count\", type_=\"int\"),expect_column_values_to_be_increasing(column=\"followers_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `device_type` column contains only distinct values including ['Sensor', 'Actuator', 'Controller'].","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"device_type\", value_set=['Sensor', 'Actuator', 'Controller'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'payment_amount': Ensure this field matches the type 'decimal'. Validate that all values are greater than zero and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"payment_amount\", type_=\"decimal\"),expect_column_values_to_not_be_null(column=\"payment_amount\"),expect_column_values_to_be_greater_than(column=\"payment_amount\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `content_length` field: Check that values are greater than 100 characters. Ensure there are no null entries.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"content_length\", value=100),expect_column_values_to_not_be_null(column=\"content_length\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'stock_quantity': Verify the sum of 'stock_quantity' is greater than 500. Ensure that the unique value count aligns with the expected number of products.","generated_expectations":"expect_column_sum_to_be_between(column=\"stock_quantity\", min_value=501),expect_column_unique_value_count_to_be_between(column=\"stock_quantity\", min_value=expected_number_of_products, max_value=expected_number_of_products)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `unsubscribe_reason` column contains values from the predefined set `['Too many emails', 'Content not relevant', 'Other']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"unsubscribe_reason\", value_set=['Too many emails', 'Content not relevant', 'Other'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `researcher_id`: Ensure this field contains unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"researcher_id\"),expect_column_values_to_not_be_null(column=\"researcher_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `platform` column only includes values from the set `['PC', 'Xbox', 'PlayStation', 'Nintendo']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Xbox', 'PlayStation', 'Nintendo'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `release_date` column contains datetime strings that match the format `%Y-%m-%d`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `sample_size` column values are greater than or equal to 30 for valid statistical analysis.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"sample_size\", value=30)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'battery_level': Validate that values are integers ranging from 0 to 100. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"battery_level\"),expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"battery_level\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `device_status`: Ensure the field contains only distinct values matching `['online', 'offline', 'malfunctioning']`. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"device_status\", value_set=[\"online\", \"offline\", \"malfunctioning\"]),expect_column_values_to_not_be_null(column=\"device_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_status': Ensure the field is required (not null). Ensure values in 'case_status' must exist in the set ('open', 'closed', 'pending').","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_status\"),expect_column_values_to_be_in_set(column=\"case_status\", value_set=[\"open\", \"closed\", \"pending\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure the field is required (not null). Ensure values in (user_id) must exist in the user database.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_id\"),expect_column_values_to_be_in_set(column=\"user_id\", set={\"list_of_valid_user_ids\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the combination of `user_id` and `post_id` is unique across the dataset.","generated_expectations":"expect_compound_columns_to_be_unique(column_list=[\"user_id\", \"post_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `email_subject` field is not empty and contains between 5 and 100 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_subject\"),expect_column_value_lengths_to_be_between(column=\"email_subject\", min_value=5, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `performance_stats` file: Validate the presence of appropriate headers and ensure the file size is between 500KB and 2MB.","generated_expectations":"expect_file_to_have_valid_table_header(file=\"performance_stats\"),expect_file_size_to_be_between(file=\"performance_stats\", min_value=500 * 1024, max_value=2 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure there are no missing values in the `enrollment_date` column. Validate that the type is 'date' and all dates are in the past.","generated_expectations":"expect_column_values_to_not_be_null(column=\"enrollment_date\"),expect_column_values_to_be_of_type(column=\"enrollment_date\", type_=\"date\"),expect_column_values_to_be_decreasing(column=\"enrollment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `attachment_size` column contains numeric values that do not exceed 25MB.","generated_expectations":"expect_column_values_to_be_between(column=\"attachment_size\", min_value=0, max_value=25 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `case_number` field: Ensure that all entries are alphanumeric strings with a length between 10 and 15 characters.","generated_expectations":"expect_column_values_to_match_regex(column=\"case_number\", regex=r\"^[a-zA-Z0-9]{10,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `expense_report` field contains valid JSON objects and adheres to the specified schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"expense_report\"),expect_column_values_to_match_json_schema(column=\"expense_report\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'date_of_birth': Ensure the field matches the type 'date'. Validate that all dates in (date_of_birth) are before the current date.","generated_expectations":"expect_column_values_to_be_of_type(column=\"date_of_birth\", type_=\"date\"),expect_column_values_to_be_between(column=\"date_of_birth\", min_value=None, max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'account_number': Ensure the field matches the type 'integer'. Ensure values in (account_number) are unique and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"account_number\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"account_number\"),expect_column_values_to_be_unique(column=\"account_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `assignment_score` column values are within the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"assignment_score\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `timestamp` field, ensure the values are in increasing order without any duplicates.","generated_expectations":"expect_column_values_to_be_increasing(column=\"timestamp\"),expect_column_values_to_be_unique(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `category` column: Ensure it does not contain values from the set `['discontinued', 'inactive']`.","generated_expectations":"expect_column_values_to_not_be_in_set(column=\"category\", value_set=['discontinued', 'inactive'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'student_id': Ensure the field is required (not null). Ensure the values in 'student_id' are unique. Ensure this field matches the type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"student_id\"),expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_be_of_type(column=\"student_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `forecast_date` column: Ensure all entries are in 'YYYY-MM-DD' format and that there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"forecast_date\"),expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `product_category` column contains only unique values from the predefined list: `['Electronics', 'Clothing', 'Grocery']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"product_category\", value_set=['Electronics', 'Clothing', 'Grocery'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `attorney_name` field only includes entries that match the specified set of licensed attorney names.","generated_expectations":"expect_column_values_to_be_in_set(column=\"attorney_name\", value_set=licensed_attorney_names_set)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `game_details` table: Ensure the `genre` column matches the specified set `['Action', 'Adventure', 'RPG']` in the correct order.","generated_expectations":"expect_table_columns_to_match_ordered_list(column_list=[\"genre\"]),expect_column_values_to_be_in_set(column=\"genre\", value_set=['Action', 'Adventure', 'RPG'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `timestamp` column values in the `block_data` table are formatted as 'YYYY-MM-DD HH:MM:SS' and are in chronological order.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_increasing(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `tracking_number` column matches the regex pattern `^[A-Z0-9]{10}$` for all entries.","generated_expectations":"expect_column_values_to_match_regex(column=\"tracking_number\", regex=r\"^[A-Z0-9]{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_id': Ensure this field exists. Ensure the field matches the type 'string'. Ensure values in 'transaction_id' are unique.","generated_expectations":"expect_column_to_exist(column=\"transaction_id\"),expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"string\"),expect_column_values_to_be_unique(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `attack_vector` column values do not match the SQL-like patterns `['DROP', 'SELECT *']`.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"attack_vector\", regex_list=[r\"DROP\", r\"SELECT \\*\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_id': Ensure this field exists, is of type 'text', and contains unique values. Validate that no entries are null.","generated_expectations":"expect_column_to_exist(column=\"shipment_id\"),expect_column_values_to_be_of_type(column=\"shipment_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"shipment_id\"),expect_column_values_to_not_be_null(column=\"shipment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combination of `booking_id` and `guest_id` is unique. No duplicates should be present.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"booking_id\", column_B=\"guest_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `delivery_date` is formatted as 'YYYY-MM-DD' and occurs after the `order_date`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"delivery_date\", column_B=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `content` column: Ensure all entries do not exceed 5000 characters. Validate that this column exists and adheres to this limit.","generated_expectations":"expect_column_to_exist(column=\"content\"),expect_column_value_lengths_to_be_between(column=\"content\", min_value=0, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_id` is unique across all records and matches the pattern `^[C]{1}[0-9]{6}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_id\"),expect_column_values_to_match_regex(column=\"case_id\", regex=r\"^[C]{1}[0-9]{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'wind_speed': Ensure the field matches the type 'float'. Ensure values in 'wind_speed' are non-negative and do not exceed 150 km\/h.","generated_expectations":"expect_column_values_to_be_of_type(column=\"wind_speed\", type_=\"float\"),expect_column_values_to_be_between(column=\"wind_speed\", min_value=0, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `insurance_policy` column contains unique values that match the set ['Medicare', 'Medicaid', 'Private', 'Uninsured'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"insurance_policy\", value_set=['Medicare', 'Medicaid', 'Private', 'Uninsured']),expect_column_values_to_be_unique(column=\"insurance_policy\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `suspicion_level` column: Ensure that all values are of type 'integer' and fall within the range of 1 to 5. Check for unique values and no missing entries.","generated_expectations":"expect_column_values_to_be_of_type(column=\"suspicion_level\", type_=\"int\"),expect_column_values_to_be_between(column=\"suspicion_level\", min_value=1, max_value=5),expect_column_values_to_be_unique(column=\"suspicion_level\"),expect_column_values_to_not_be_null(column=\"suspicion_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `enrollment_date` field: Ensure values are in the `MM\/DD\/YYYY` format and that all dates are within the current academic year. Validate that no future dates are present.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"enrollment_date\"),expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"2023-08-01\", max_value=\"2024-05-31\")  # Assuming the current academic year is from August 1, 2023, to May 31, 2024,expect_column_values_to_be_less_than(column=\"enrollment_date\", value=\"2024-01-01\")  # Adjust the date accordingly to ensure no future dates are present","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `booking_reference` field exists and matches the required format of `^[A-Z0-9]{8}$`.","generated_expectations":"expect_column_to_exist(column=\"booking_reference\"),expect_column_values_to_match_regex(column=\"booking_reference\", regex=r\"^[A-Z0-9]{8}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_id` field: Ensure all entries are unique and not null. This field should match the type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_not_be_null(column=\"user_id\"),expect_column_values_to_be_of_type(column=\"user_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `supplier_rating` field: Validate that all values are within the set `['Excellent', 'Good', 'Average', 'Poor']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"supplier_rating\", value_set=['Excellent', 'Good', 'Average', 'Poor'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'follower_count': Ensure the mean follower count per user is greater than 100. Check for any missing values in this field.","generated_expectations":"expect_column_mean_to_be_between(column=\"follower_count\", min_value=100),expect_column_values_to_not_be_null(column=\"follower_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'payment_status': Ensure this field exists and matches the type 'text'. Validate that values are one of ['Pending', 'Completed', 'Cancelled'].","generated_expectations":"expect_column_to_exist(column=\"payment_status\"),expect_column_values_to_be_of_type(column=\"payment_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"payment_status\", value_set=['Pending', 'Completed', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_details` JSON object: Validate that it conforms to the specified JSON schema, ensuring structural integrity and required fields are present.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"transaction_details\", schema={\"type\": \"object\", \"properties\": { ... }, \"required\": [...]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `average_rating` column has a mean value between `0` and `10`.","generated_expectations":"expect_column_mean_to_be_between(column=\"average_rating\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` field: Ensure all values are within the range of 0 to 10000, and no null values are present.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=10000),expect_column_values_to_not_be_null(column=\"price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `email` field, confirm that all entries match the format specified by the regular expression: `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_amount` field: Check that all values are numeric and fall within the range of 0.01 to 1,000,000. Validate that this column has no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"transaction_amount\", type_=\"float\"),expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0.01, max_value=1000000),expect_column_values_to_not_be_null(column=\"transaction_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column contains only unique values and does not have missing entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_not_be_null(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `employee_id` column contains unique values and does not contain any null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\"),expect_column_values_to_not_be_null(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the 'enrollment_date' column matches the datetime format '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_category` column contains only distinct values matching `['Electronics', 'Fashion', 'Home']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"product_category\", set_=[\"Electronics\", \"Fashion\", \"Home\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `published_date`, confirm that all entries are valid dates and are not in the future.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"published_date\"),expect_column_values_to_be_between(column=\"published_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'last_update': Ensure all timestamps match the ISO 8601 format. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"last_update\"),expect_column_values_to_match_strftime_format(column=\"last_update\", strftime_format=\"%Y-%m-%dT%H:%M:%SZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'comment_content': Ensure this field matches the type 'text'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"comment_content\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"comment_content\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the standard deviation of the `lead_time` column is less than 15 days, indicating consistency in delivery times.","generated_expectations":"expect_column_stdev_to_be_between(column=\"lead_time\", min_value=0, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `genre` column only contains values from the set `['Action', 'Drama', 'Comedy', 'Horror']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"genre\", value_set=['Action', 'Drama', 'Comedy', 'Horror'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `customer_id` column contains only distinct values and matches the type `integer`. Ensure there are no null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_status` column only contains values from the set ['Open', 'Closed', 'Pending'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"case_status\", value_set=['Open', 'Closed', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email` column contains only valid email formats and does not include any domain from the disallowed list `['example.com', 'test.com']`.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_not_match_regex_list(column=\"email\", regex_list=[r\"@example\\.com$\", r\"@test\\.com$\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `keywords` column does not contain any SQL-like injection patterns such as `'; DROP TABLE`.","generated_expectations":"expect_column_values_to_not_match_regex(column=\"keywords\", regex=r\";\\s*DROP\\s*TABLE\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_hash': Ensure the field matches the type 'text'. Validate that the hash is a 64-character hexadecimal string. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"transaction_hash\"),expect_column_values_to_be_of_type(column=\"transaction_hash\", type_=\"text\"),expect_column_values_to_match_regex(column=\"transaction_hash\", regex=r\"^[0-9a-f]{64}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of values in the `treatment_cost` and `medication_cost` columns equals the value in `total_cost`.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"treatment_cost\", \"medication_cost\"], target_value=\"total_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `client_email` field conforms to the standard email format defined by the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"client_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `genre` column only includes values from the set `['Action', 'Adventure', 'Puzzle']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"genre\", value_set=['Action', 'Adventure', 'Puzzle'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `json_data` column contains valid JSON objects that adhere to the defined schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `last_login` column contains datetime strings that comply with the format `'%Y-%m-%d'` and reflect logins within the last 30 days.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"last_login\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"last_login\"),expect_column_values_to_be_between(column=\"last_login\", min_value=(datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'), max_value=datetime.now().strftime('%Y-%m-%d'))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `attendance_percentage` value is greater than or equal to 0 and less than or equal to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"attendance_percentage\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'weather_condition': Ensure the field matches the type 'text'. Validate that values in (weather_condition) must exist in the set ['Sunny', 'Rainy', 'Cloudy', 'Snowy']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"weather_condition\"),expect_column_values_to_be_of_type(column=\"weather_condition\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"weather_condition\", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `timestamp` field contains valid datetime strings formatted as 'YYYY-MM-DDTHH:MM:SSZ'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%SZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `grade` column values fall within the range of `0` to `100` and are integers.","generated_expectations":"expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"grade\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'json_feedback': Ensure values in (json_feedback) conform to the specified JSON schema for feedback structure.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"json_feedback\", schema={\"type\": \"object\", \"properties\": {\"feedback\": {\"type\": \"string\"}, \"rating\": {\"type\": \"number\"}}, \"required\": [\"feedback\", \"rating\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `date_of_birth` entries do not contain future dates and are in the range of 18 to 65 years for current employees.","generated_expectations":"expect_column_values_to_be_between(column=\"date_of_birth\", min_value=(current_date - timedelta(days=65*365)), max_value=(current_date - timedelta(days=18*365))),expect_column_values_to_be_dateutil_parseable(column=\"date_of_birth\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `vote_cast` column: Validate that values are from the set `['Yes', 'No']`. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"vote_cast\", value_set=['Yes', 'No']),expect_column_values_to_not_be_null(column=\"vote_cast\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `stock_quantity` field only contains non-negative integers.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `username`: Validate that all usernames conform to the pattern `^[a-zA-Z0-9._]{3,15}$` and are unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"username\", regex=r\"^[a-zA-Z0-9._]{3,15}$\"),expect_column_values_to_be_unique(column=\"username\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `carbon_copy` (CC) field contains valid email addresses, ensuring no duplicates within the same message.","generated_expectations":"expect_column_values_to_match_regex(column=\"carbon_copy\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_select_column_values_to_be_unique_within_record(column=\"carbon_copy\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `publication_year` column values fall within the range of 2000 to 2023, inclusive.","generated_expectations":"expect_column_values_to_be_between(column=\"publication_year\", min_value=2000, max_value=2023)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'parent_category': Ensure the field matches the type 'text'. Ensure values in (parent_category) must exist in categories (category_name). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"parent_category\")\r,expect_column_values_to_be_of_type(column=\"parent_category\", type_=\"text\")\r,expect_column_values_to_be_in_set(column=\"parent_category\", value_set=[\"category_name\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `duration` column is greater than 0 and less than the `max_duration` column across the `video_library` dataset.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"duration\", column_B=\"0\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"duration\", column_B=\"max_duration\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'property_id': Ensure the field exists. Validate that 'property_id' is unique and follows the pattern 'PROP-\\d{5}'.","generated_expectations":"expect_column_to_exist(column=\"property_id\"),expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_match_regex(column=\"property_id\", regex=r\"^PROP-\\d{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `p_value` in the `results` column is less than or equal to 0.05 for statistically significant findings.","generated_expectations":"expect_column_values_to_be_between(column=\"results\", min_value=None, max_value=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `order_quantity` field, confirm that all entries are of type `integer` and non-null, ensuring values are greater than zero.","generated_expectations":"expect_column_values_to_not_be_null(column=\"order_quantity\"),expect_column_values_to_be_of_type(column=\"order_quantity\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"order_quantity\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `ip_address` field: Ensure all entries are valid IPv4 addresses and contain no duplicates. Ensure this field does not allow null values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"ip_address\"),expect_column_values_to_be_unique(column=\"ip_address\"),expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `meter_reading` field: Validate that all entries are numeric. Ensure there are no missing values and that readings are within the range of 0 to 99999.","generated_expectations":"expect_column_values_to_be_of_type(column=\"meter_reading\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"meter_reading\"),expect_column_values_to_be_between(column=\"meter_reading\", min_value=0, max_value=99999)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'contact_phone': Ensure the field matches the type 'text'. Validate that the string length of (contact_phone) is exactly 10 digits. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"contact_phone\"),expect_column_values_to_be_of_type(column=\"contact_phone\", type_=\"text\"),expect_column_value_lengths_to_equal(column=\"contact_phone\", length=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `player_count`: Ensure the field is required (not null) and contains only integer values. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"player_count\"),expect_column_values_to_not_be_null(column=\"player_count\"),expect_column_values_to_be_of_type(column=\"player_count\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` column: Validate that entries exist within the set `['Active', 'Expired', 'Pending']`. Ensure values are unique.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Active', 'Expired', 'Pending']),expect_column_values_to_be_unique(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `court_fee` field: Ensure the values are all positive and the maximum fee does not exceed 5000.","generated_expectations":"expect_column_values_to_be_between(column=\"court_fee\", min_value=0, max_value=5000),expect_column_max_to_be_between(column=\"court_fee\", max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column exists and contains unique identifiers for all products.","generated_expectations":"expect_column_to_exist(column=\"product_id\"),expect_column_values_to_be_unique(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the standard deviation of the `sales` column is less than 20.","generated_expectations":"expect_column_stdev_to_be_between(column=\"sales\", min_value=None, max_value=20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `age` column values are within the range of 18 to 100 and follow a normal distribution.","generated_expectations":"expect_column_values_to_be_between(column=\"age\", min_value=18, max_value=100),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"age\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_status` column only contains values from the set `['Active', 'Inactive', 'Prospect']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"customer_status\", value_set=['Active', 'Inactive', 'Prospect'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `years_of_service` column values are uniformly distributed with a p-value greater than 0.05 in the KS test.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"years_of_service\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `student_id`: Ensure the field is required (not null). Validate that all values are unique and of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"student_id\"),expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_be_of_type(column=\"student_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the total of the `claims_paid` column matches the expected value for each `policy_number` across records.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"policy_number\", column_B=\"claims_paid\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'supplier_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in (supplier_id) must exist in the set of registered supplier IDs.","generated_expectations":"expect_column_values_to_not_be_null(column=\"supplier_id\"),expect_column_values_to_be_of_type(column=\"supplier_id\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"supplier_id\", value_set=registered_supplier_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `plan_type` column contains distinct values from the defined set `['Prepaid', 'Postpaid', 'Family']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"plan_type\", value_set=['Prepaid', 'Postpaid', 'Family'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_rating` field: Ensure that values are between 1 and 5, inclusive. Validate that the average rating does not exceed 4.5.","generated_expectations":"expect_column_values_to_be_between(column=\"user_rating\", min_value=1, max_value=5),expect_column_mean_to_be_between(column=\"user_rating\", min_value=None, max_value=4.5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_data` column contains valid JSON objects conforming to the schema `{ 'amount': 'number', 'location': 'string' }`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"transaction_data\", schema={\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\"}, \"location\": {\"type\": \"string\"}}, \"required\": [\"amount\", \"location\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'date_joined': Ensure all values in (date_joined) match the format 'YYYY-MM-DD'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"date_joined\"),expect_column_values_to_match_strftime_format(column=\"date_joined\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `consumption` column contains values that fall within the range of 0 to 1000 kWh, with an average consumption of 500 kWh.","generated_expectations":"expect_column_values_to_be_between(column=\"consumption\", min_value=0, max_value=1000),expect_column_mean_to_be_between(column=\"consumption\", min_value=500, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_email` column matches the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$` for valid patient emails.","generated_expectations":"expect_column_values_to_match_regex(column=\"patient_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `case_priority` column values are not null and fall within the defined set `['High', 'Medium', 'Low']` in the Legal Case Management System.","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_priority\"),expect_column_values_to_be_in_set(column=\"case_priority\", value_set=['High', 'Medium', 'Low'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'rating': Ensure this field exists. Validate that all values are numeric and fall within the range of 1 to 10.","generated_expectations":"expect_column_to_exist(column=\"rating\"),expect_column_values_to_be_of_type(column=\"rating\", type_=\"float\"),expect_column_values_to_be_between(column=\"rating\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `user_agent` field does not match the specified patterns of known bot user agents, defined in the list `['bot'; 'crawler'; 'spider']`.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"user_agent\", regex_list=[r\"bot\", r\"crawler\", r\"spider\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `supplier_id` column exists and corresponds to an existing supplier in the `suppliers` table.","generated_expectations":"expect_column_to_exist(column=\"supplier_id\"),expect_column_values_to_be_in_set(column=\"supplier_id\", value_set=suppliers_table)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `quantity_ordered` column has no missing values and is of type 'integer' greater than zero.","generated_expectations":"expect_column_values_to_not_be_null(column=\"quantity_ordered\"),expect_column_values_to_be_of_type(column=\"quantity_ordered\", type_=\"int\"),expect_column_values_to_be_between(column=\"quantity_ordered\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_code` column: Ensure all entries match the pattern `^[A-Z]{3}-[0-9]{4}$` to validate proper course identifiers.","generated_expectations":"expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^[A-Z]{3}-[0-9]{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `vehicle_type` column only contains values from the specified set `['Truck', 'Van', 'Bicycle']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"vehicle_type\", value_set=['Truck', 'Van', 'Bicycle'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `alert_timestamp` field: Validate that all values are of type 'datetime' and conform to the specified format 'ISO 8601'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"alert_timestamp\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"alert_timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'diagnosis_code': Ensure all values conform to the ICD-10 format and that this field exists in the 'medical_records' table.","generated_expectations":"expect_column_to_exist(column=\"diagnosis_code\"),expect_column_values_to_match_regex(column=\"diagnosis_code\", regex=r\"^(A00-Z99|[A-Z]\\d{2}(\\.\\d{1,})?)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'score': Ensure values are numeric and greater than or equal to zero. Validate that 'score' is less than or equal to the maximum score defined in 'max_score' for each match.","generated_expectations":"expect_column_values_to_be_of_type(column=\"score\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"score\", min_value=0, max_value=None),expect_column_pair_values_A_to_be_less_than_B(column_A=\"score\", column_B=\"max_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `weather_condition` column contains no null entries and that all values are from the set `['Sunny', 'Rainy', 'Cloudy', 'Stormy']`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"weather_condition\"),expect_column_values_to_be_in_set(column=\"weather_condition\", value_set=['Sunny', 'Rainy', 'Cloudy', 'Stormy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_email` column values do not match any SQL-like patterns from the list `['%admin%', '%test%']`.","generated_expectations":"expect_column_values_to_not_match_like_pattern_list(column=\"customer_email\", patterns=['%admin%', '%test%'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the total sum of `salary` in the `employees` table matches the total budget allocated in the `departments` table.","generated_expectations":"expect_column_sum_to_be_between(column=\"salary\", min_value=0),expect_multicolumn_sum_to_equal(column_A=\"salary\", column_B=\"allocated_budget\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `release_date` field: Ensure all values are in the format `YYYY-MM-DD` and do not exceed the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_less_than(column=\"release_date\", value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `location` column values do not match any patterns from the list of restricted regions.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"location\", regex_list=restricted_regions_patterns)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_id` column contains only unique values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'tax_rate': Ensure the field matches the type 'decimal'. Ensure the field contains values between 0.0 and 1.0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"tax_rate\")\r,expect_column_values_to_be_of_type(column=\"tax_rate\", type_=\"decimal\")\r,expect_column_values_to_be_between(column=\"tax_rate\", min_value=0.0, max_value=1.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `threat_level` column contains only valid values from the set `['Low', 'Medium', 'High']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_level\", value_set=['Low', 'Medium', 'High'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `reorder_date`: Ensure all entries adhere to the datetime format 'YYYY-MM-DD'. Ensure this field can be null.","generated_expectations":"expect_column_to_exist(column=\"reorder_date\"),expect_column_values_to_match_strftime_format(column=\"reorder_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_null(column=\"reorder_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `user_role`: Ensure values conform to the set `['admin', 'user', 'guest']`. Ensure no invalid roles are present.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=['admin', 'user', 'guest']),expect_column_values_to_not_be_in_set(column=\"user_role\", value_set=['admin', 'user', 'guest'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `blockchain_data` table is equal to 1000.","generated_expectations":"expect_table_row_count_to_equal(table=\"blockchain_data\", value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'residence_status': Ensure this field exists. Validate that the values are in the set ('Resident', 'Non-Resident').","generated_expectations":"expect_column_to_exist(column=\"residence_status\"),expect_column_values_to_be_in_set(column=\"residence_status\", value_set=['Resident', 'Non-Resident'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'agent_email': Ensure the field exists and matches the type 'text'. Validate that all values in (agent_email) conform to a valid email format.","generated_expectations":"expect_column_to_exist(column=\"agent_email\"),expect_column_values_to_be_of_type(column=\"agent_email\", type_=\"text\"),expect_column_values_to_match_regex(column=\"agent_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `resolution_time` column values are greater than the `submission_time` values in corresponding records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"resolution_time\", column_B=\"submission_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `sensor_data` entries have timestamps that are in chronological order for each `device_id`.","generated_expectations":"expect_column_values_to_be_increasing(column=\"sensor_data.timestamp\", mostly=True)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_id` column contains only unique values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_not_be_null(column=\"property_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the average wind speed in the `wind_speed` column does not exceed 30 km\/h.","generated_expectations":"expect_column_mean_to_be_between(column=\"wind_speed\", min_value=None, max_value=30)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `grade` column contains values within the range of 0 to 100, reflecting valid scores.","generated_expectations":"expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `patient_id` field: Ensure the field is required (not null). Ensure each value is unique and matches the type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'inventory_count': Ensure the field matches the type 'integer'. Ensure values in (inventory_count) are greater than or equal to 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"inventory_count\"),expect_column_values_to_be_of_type(column=\"inventory_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"inventory_count\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'quantity': Ensure the field is required (not null). Validate that all values are integers greater than zero.","generated_expectations":"expect_column_values_to_not_be_null(column=\"quantity\"),expect_column_values_to_be_between(column=\"quantity\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `customer_id` column has no missing values and is of type string.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"str\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `last_restocked` column adheres to the format `YYYY-MM-DD` and contains valid dates only.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"last_restocked\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"last_restocked\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `feedback` column, ensure that each entry does not exceed 500 characters and contains no special characters other than periods, commas, or spaces.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"feedback\", min_value=0, max_value=500),expect_column_values_to_match_regex(column=\"feedback\", regex=r\"^[a-zA-Z0-9., ]*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `tags` field: Ensure that values are valid JSON arrays and conform to the specified JSON schema for tags.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"tags\"),expect_column_values_to_match_json_schema(column=\"tags\", schema=\"specified JSON schema for tags\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `voter_id` column contains only unique values, with no missing entries, and that each entry is of type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"voter_id\"),expect_column_values_to_not_be_null(column=\"voter_id\"),expect_column_values_to_be_of_type(column=\"voter_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `major` column: Validate that it contains only distinct values from the predefined list: ['Computer Science', 'Mathematics', 'English']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"major\"),expect_column_values_to_be_in_set(column=\"major\", value_set=['Computer Science', 'Mathematics', 'English'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `reservation_status` column contains only distinct values matching `['confirmed', 'canceled', 'pending']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"reservation_status\", value_set=[\"confirmed\", \"canceled\", \"pending\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `balance` column values are numeric and greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"balance\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"balance\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `performance_score` has a standard deviation that does not exceed 1.5.","generated_expectations":"expect_column_stdev_to_be_between(column=\"performance_score\", max_value=1.5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the sum of `total_amount` and `discount` columns equals the `final_price` column for each record.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"total_amount\", column_B=\"final_price\", condition=\"total_amount + discount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `number_of_guests` is always greater than 0 and less than or equal to 10.","generated_expectations":"expect_column_values_to_be_between(column=\"number_of_guests\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_ssn': Ensure the field matches the type 'text'. Validate that 'customer_ssn' adheres to the pattern of a 9-digit Social Security Number format (e.g., XXX-XX-XXXX). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_ssn\"),expect_column_values_to_be_of_type(column=\"customer_ssn\", type_=\"text\"),expect_column_values_to_match_regex(column=\"customer_ssn\", regex=r\"^\\d{3}-\\d{2}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `recipient_list` column contains valid JSON arrays and conforms to the specified JSON schema for email recipients.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"recipient_list\"),expect_column_values_to_match_json_schema(column=\"recipient_list\", schema={...})  # Replace {...} with the actual schema.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `wallet_balance` column: Ensure the sum of all balances matches the expected total of 10,000,000 units.","generated_expectations":"expect_column_sum_to_be_between(column=\"wallet_balance\", min_value=10000000, max_value=10000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `cholesterol_level` column values are arranged in increasing order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"cholesterol_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `battery_level` field exists and validate that values are between 0% and 100%.","generated_expectations":"expect_column_to_exist(column=\"battery_level\"),expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `humidity` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"humidity\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `outcome` column contains only distinct values from the set `['Pending', 'Closed', 'Appealed']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"outcome\", value_set=['Pending', 'Closed', 'Appealed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `timestamp` column follows the ISO 8601 format: `'%Y-%m-%dT%H:%M:%S'`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `client_id` column, ensure that all values are numeric and exist in the `clients` table.","generated_expectations":"expect_column_values_to_be_of_type(column=\"client_id\", type_=\"int\"),  # Assuming client_id is an integer,expect_column_values_to_be_in_set(column=\"client_id\", value_set=clients_table_client_ids)  # Replace with actual set of client_ids from the clients table","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `reported_by` and `incident_id`: Ensure there are no duplicate combinations across records.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"reported_by\", column_B=\"incident_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of `freight_cost` and `insurance_cost` columns equals the `total_cost` column for each shipment record.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"freight_cost\", \"insurance_cost\"], target_column=\"total_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check if the `plaintiff_id` column corresponds to valid entries in the `plaintiffs` table.","generated_expectations":"expect_column_values_to_be_in_set(column=\"plaintiff_id\", value_set=plaintiffs_table_ids)  # Here, `plaintiffs_table_ids` should be a predefined set of valid plaintiff IDs from the plaintiffs table.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `experiment_date` column consists of valid date entries. Ensure there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"experiment_date\"),expect_column_values_to_be_dateutil_parseable(column=\"experiment_date\"),expect_column_values_to_not_be_null(column=\"experiment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the file size of the `customer_data.csv` falls within the range of 1KB to 5MB, and that it contains valid headers.","generated_expectations":"expect_file_size_to_be_between(file_path=\"customer_data.csv\", min_value=1024, max_value=5242880),expect_file_to_have_valid_table_header(file_path=\"customer_data.csv\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `warehouse_location` column contains values from the specified set `['North', 'South', 'East', 'West']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"warehouse_location\", value_set=['North', 'South', 'East', 'West'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `monthly_bill` column has a minimum value of $0 and a maximum value of $500, ensuring reasonable billing.","generated_expectations":"expect_column_min_to_be_between(column=\"monthly_bill\", min_value=0),expect_column_max_to_be_between(column=\"monthly_bill\", max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'property_id': Ensure the field is required (not null). Ensure values are unique and of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_be_of_type(column=\"property_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combination of `supplier_id` and `product_id` is unique across all records in the supply chain dataset.","generated_expectations":"expect_compound_columns_to_be_unique(column_names=[\"supplier_id\", \"product_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For columns 'order_id' and 'customer_id': Ensure the combination of these fields is unique to prevent duplicate orders.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"order_id\", column_B=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `humidity` column, confirm that all values are percentages between 0% and 100% and that there are no missing entries.","generated_expectations":"expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"humidity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_number` column is unique and matches the regex pattern `^[A-Z]{2}\\d{4}-\\d{3}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_number\"),expect_column_values_to_match_regex(column=\"case_number\", regex=r\"^[A-Z]{2}\\d{4}-\\d{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sent_time': Ensure the field matches the type 'datetime'. Confirm that values are in the correct format 'YYYY-MM-DD HH:MM:SS' and are not in the future.","generated_expectations":"expect_column_values_to_be_of_type(column=\"sent_time\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"sent_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_increasing(column=\"sent_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `incident_reports` table is equal to the `resolved_incidents` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"resolved_incidents\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `timestamp` column contains no missing values and follows the UTC format 'YYYY-MM-DD HH:MM:SS'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"timestamp\"),expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values are unique across records.","generated_expectations":"expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `views` column, ensure the average number of views per post is greater than or equal to 100 and less than or equal to 10,000.","generated_expectations":"expect_column_mean_to_be_between(column=\"views\", min_value=100, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the total number of rows in the `players` table is between 100 and 1000.","generated_expectations":"expect_table_row_count_to_be_between(min_value=100, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `email_address` column: Ensure that all entries are unique and match the expected format of a valid email address.","generated_expectations":"expect_column_values_to_be_unique(column=\"email_address\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_id` column contains unique identifiers and does not allow null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_not_be_null(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_quantity` values are within the range of `1` to `1000` and are arranged in ascending order.","generated_expectations":"expect_column_values_to_be_between(column=\"order_quantity\", min_value=1, max_value=1000),expect_column_values_to_be_increasing(column=\"order_quantity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'firmware_version': Ensure the field matches the type 'text'. Validate that the firmware version follows the pattern 'X.Y.Z' where X, Y, and Z are integers (^(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)$). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"firmware_version\"),expect_column_values_to_be_of_type(column=\"firmware_version\", type_=\"text\"),expect_column_values_to_match_regex(column=\"firmware_version\", regex=r\"^(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_amount` column: Ensure all values are numeric and conform to the range of 0.01 to 10,000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"transaction_amount\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0.01, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `genre` column: Ensure that values are non-null and contain only distinct values from the predefined set ['Action', 'Adventure', 'Puzzle']. No duplicates are allowed.","generated_expectations":"expect_column_values_to_not_be_null(column=\"genre\"),expect_column_values_to_be_in_set(column=\"genre\", value_set=[\"Action\", \"Adventure\", \"Puzzle\"]),expect_column_values_to_be_unique(column=\"genre\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `delivery_date` column entries match the format 'YYYY-MM-DD' and are all in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"delivery_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `booking_id` column contains only unique values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"booking_id\"),expect_column_values_to_not_be_null(column=\"booking_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `assignment_submissions` column: Validate that all entries are valid JSON objects and conform to the specified schema of `{'student_id': 'string', 'submission_date': 'datetime'}`.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"assignment_submissions\"),expect_column_values_to_match_json_schema(column=\"assignment_submissions\", schema={'student_id': 'string', 'submission_date': 'datetime'})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"patient_id\"),expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `platform` column: Ensure this field exists and contains unique values that match the set ['PC', 'Xbox', 'PlayStation', 'Switch'].","generated_expectations":"expect_column_to_exist(column=\"platform\"),expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Xbox', 'PlayStation', 'Switch']),expect_column_values_to_be_unique(column=\"platform\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_request` table, ensure the number of rows is equal to the number of unique `request_ids`.","generated_expectations":"expect_table_row_count_to_equal(column=\"request_ids\"),expect_column_unique_value_count_to_be_equal(column=\"request_ids\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `block_timestamp` column contains timestamps formatted as `YYYY-MM-DD HH:MM:SS` and are in the correct chronological order.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"block_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_increasing(column=\"block_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `ratings` column contains valid JSON objects representing user feedback with fields that adhere to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"ratings\"),expect_column_values_to_match_json_schema(column=\"ratings\", schema={\"type\": \"object\", \"properties\": {\"user\": {\"type\": \"string\"}, \"feedback\": {\"type\": \"string\"}, \"rating\": {\"type\": \"number\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `author_id` column: Ensure all values are unique and correspond to existing ids in the `users` table. Validate that this column exists.","generated_expectations":"expect_column_to_exist(column=\"author_id\"),expect_column_values_to_be_unique(column=\"author_id\"),expect_select_column_values_to_be_unique_within_record(column=\"author_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'item_description': Ensure this field exists. Validate that all descriptions in 'item_description' are between 10 and 255 characters in length.","generated_expectations":"expect_column_to_exist(column=\"item_description\"),expect_column_value_lengths_to_be_between(column=\"item_description\", min_value=10, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `admission_date` entries are all prior to the `discharge_date` and are formatted as 'YYYY-MM-DD'.","generated_expectations":"expect_column_pair_values_A_to_be_less_than_B(column_A=\"admission_date\", column_B=\"discharge_date\"),expect_column_values_to_match_strftime_format(column=\"admission_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `inventory_count` column contains values that are not negative and the maximum inventory count does not exceed 10,000.","generated_expectations":"expect_column_values_to_be_between(column=\"inventory_count\", min_value=0, max_value=10000),expect_column_max_to_be_between(column=\"inventory_count\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_code` field: Check that values are of type 'string' and match the pattern '^[A-Z]{3}-[0-9]{3}$'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"course_code\", type_=\"string\"),expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^[A-Z]{3}-[0-9]{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that `amount` for flagged transactions is greater than zero and that `transaction_status` is either 'Pending' or 'Resolved'.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"amount\", column_B=\"zero\"),expect_column_values_to_be_in_set(column=\"transaction_status\", value_set=[\"Pending\", \"Resolved\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_agent` column contains strings that meet a minimum length of 10 characters and match at least one predefined pattern.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"user_agent\", min_value=10, max_value=None),expect_column_values_to_match_regex(column=\"user_agent\", regex=\"YOUR_REGEX_PATTERN_HERE\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'order_status': Ensure the field matches the type 'text'. Ensure values in (order_status) must exist in the set ('pending', 'shipped', 'delivered', 'canceled'). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"order_status\"),expect_column_values_to_be_of_type(column=\"order_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"order_status\", value_set=['pending', 'shipped', 'delivered', 'canceled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_balance` column values are within the range of -1000 to 1,000,000, and no values exceed this limit.","generated_expectations":"expect_column_values_to_be_between(column=\"account_balance\", min_value=-1000, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains only unique values and matches the specified format of a hexadecimal string.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^[0-9a-fA-F]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_number': Ensure the field matches the type 'text'. Validate that all case numbers follow the format 'YYYY-XXX-0001'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"case_number\", type_=\"text\"),expect_column_values_to_match_regex(column=\"case_number\", regex=r\"^\\d{4}-[A-Z]{3}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'score': Ensure the field matches the type 'integer'. Ensure values in 'score' are within the range of 0 to 300.","generated_expectations":"expect_column_values_to_be_of_type(column=\"score\", type_=\"int\"),expect_column_values_to_be_between(column=\"score\", min_value=0, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `status` column contains only the values `['active', 'inactive', 'suspended']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=[\"active\", \"inactive\", \"suspended\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'ip_address': Ensure this field exists. Validate that (ip_address) matches the regex pattern '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'.","generated_expectations":"expect_column_to_exist(column=\"ip_address\"),expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `delivery_date` is always later than the `order_date`, and both are in `YYYY-MM-DD` format.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"delivery_date\", column_B=\"order_date\"),expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_feedback': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 1000. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_feedback\")\r,expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=0, max_value=1000)\r,expect_column_values_to_be_of_type(column=\"customer_feedback\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'supplier_id': Ensure the field contains only distinct values representing unique suppliers. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"supplier_id\"),expect_column_values_to_be_unique(column=\"supplier_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'geo_location': Ensure the field can be null. Ensure the field matches the type 'text'. Validate that the format corresponds to valid geographical coordinates.","generated_expectations":"expect_column_values_to_be_null(column=\"geo_location\"),expect_column_values_to_be_of_type(column=\"geo_location\", type_=\"text\"),expect_column_values_to_match_regex(column=\"geo_location\", regex=r\"^\\-?\\d{1,3}\\.\\d+,\\s*\\-?\\d{1,3}\\.\\d+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` column: Ensure that values are of type 'decimal'. Check for any missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"salary\", type_=\"decimal\"),expect_column_values_to_not_be_null(column=\"salary\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'error_message': Ensure the field matches the type 'text'. Ensure this field exists only if the 'status_code' is 'error'. Ensure this field is not null when applicable.","generated_expectations":"expect_column_to_exist(column=\"error_message\"),expect_column_values_to_be_of_type(column=\"error_message\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"error_message\")  # This would be conditional based on the status_code condition which is not directly representable in Great Expectations.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `data_format` field: Validate that it is of type 'text' and conforms to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_of_type(column=\"data_format\", type_=\"text\"),expect_column_values_to_match_json_schema(column=\"data_format\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `price` column has at least 10 unique values and that the average price is within the range of 100,000 to 1,000,000.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"price\", min_value=10, max_value=None),expect_column_mean_to_be_between(column=\"price\", min_value=100000, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'phone_number': Ensure the field matches the type 'string'. Ensure all values in (phone_number) match the pattern '^\\(\\d{3}\\) \\d{3}-\\d{4}$'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"phone_number\"),expect_column_values_to_be_of_type(column=\"phone_number\", type_=\"string\"),expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\(\\d{3}\\) \\d{3}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `guest_email` column contains valid email formats and does not match any entries from a list of banned domains.","generated_expectations":"expect_column_values_to_match_regex(column=\"guest_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_not_match_regex_list(column=\"guest_email\", regex_list=[r\"@banned-domain1\\.com$\", r\"@banned-domain2\\.com$\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_duration` field, validate that all values are within the range of 1 to 52 weeks and are presented in numeric format.","generated_expectations":"expect_column_values_to_be_between(column=\"course_duration\", min_value=1, max_value=52),expect_column_values_to_be_of_type(column=\"course_duration\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For column 'category': Ensure the values match the set ['Electronics', 'Fashion', 'Home']. Validate that this column exists.","generated_expectations":"expect_column_to_exist(column=\"category\"),expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Fashion', 'Home'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `last_contacted` column to confirm that all dates are in the format 'YYYY-MM-DD' and are parsable using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"last_contacted\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"last_contacted\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `sample_id` field for uniqueness. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"sample_id\"),expect_column_values_to_not_be_null(column=\"sample_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_id` field in all tables, ensure that it exists and is of type 'integer'. Validate that all values are unique across the database.","generated_expectations":"expect_column_to_exist(column=\"user_id\"),expect_column_values_to_be_of_type(column=\"user_id\", type_=\"integer\"),expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `team_name` column: Validate that it matches at least one value from `['Team A', 'Team B', 'Team C']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"team_name\", value_set=['Team A', 'Team B', 'Team C'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'timestamp': Ensure all entries match the datetime format 'ISO 8601'. Verify that the timestamps are in chronological order.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_be_increasing(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `room_type` column has distinct values from the set `['Single', 'Double', 'Suite']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email_address` column contains valid email formats using the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_feedback': Ensure the field contains valid JSON objects and conforms to the specified JSON schema for feedback records.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"customer_feedback\"),expect_column_values_to_match_json_schema(column=\"customer_feedback\", schema=\"specified_json_schema_for_feedback_records\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `user_rating` column values are between 1 and 5 and that their distribution meets expected parameters.","generated_expectations":"expect_column_values_to_be_between(column=\"user_rating\", min_value=1, max_value=5),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"user_rating\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `weather_conditions` field: Verify that values exist in the set `['sunny', 'rainy', 'cloudy', 'snow']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"weather_conditions\", value_set=['sunny', 'rainy', 'cloudy', 'snow'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `rating` column only contains values within the range of 1 to 5, inclusive, with no missing values.","generated_expectations":"expect_column_values_to_be_between(column=\"rating\", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=\"rating\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_id` column has distinct values and that it does not contain any null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_not_be_null(column=\"property_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `hire_date` column: Ensure all datetime values are formatted as 'YYYY-MM-DD'. Validate that there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"hire_date\"),expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'subscription_plan': Ensure the field matches the type 'text'. Ensure values match one of the following: ('Free', 'Basic', 'Premium').","generated_expectations":"expect_column_values_to_be_of_type(column=\"subscription_plan\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"subscription_plan\", value_set=['Free', 'Basic', 'Premium'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'suspicious_activity': Ensure the 'activity_description' column exists. Ensure that the length of 'activity_description' does not exceed 500 characters.","generated_expectations":"expect_column_to_exist(column=\"activity_description\"),expect_column_value_lengths_to_be_between(column=\"activity_description\", min_value=0, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'experiment_results': Ensure the field contains valid JSON objects and adheres to the specified JSON schema, ensuring all necessary metrics are recorded.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"experiment_results\"),expect_column_values_to_match_json_schema(column=\"experiment_results\", json_schema={})  # Note: You need to provide the actual JSON schema in place of {}.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `prescription_date` column has no missing values and is of type `date`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"prescription_date\"),expect_column_values_to_be_of_type(column=\"prescription_date\", type_=\"date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `slug` field values match the regex pattern `^[a-z0-9]+(?:-[a-z0-9]+)*$` to ensure proper URL formatting.","generated_expectations":"expect_column_values_to_match_regex(column=\"slug\", regex=r\"^[a-z0-9]+(?:-[a-z0-9]+)*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `network_type` column contains only distinct values matching `['4G', '5G', '3G']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"network_type\", value_set=['4G', '5G', '3G'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure this field exists. Validate that values conform to the standard email format (e.g., user@example.com) based on the regex pattern: ^[\\\\w-.]+@[\\\\w-]+\\\\.[a-z]{2,}$.","generated_expectations":"expect_column_to_exist(column=\"email_address\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w-.]+@[\\w-]+\\.[a-z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'guest_count': Ensure this field matches the type 'integer'. Ensure values are greater than or equal to 1.","generated_expectations":"expect_column_values_to_be_of_type(column=\"guest_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"guest_count\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `block_number` field: Ensure this field is of type 'integer' and that all values are positive and unique. Validate that there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"block_number\", type_=\"int\"),expect_column_values_to_be_unique(column=\"block_number\"),expect_column_values_to_not_be_null(column=\"block_number\"),expect_column_values_to_be_between(column=\"block_number\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `published_date` column: Ensure values match the 'YYYY-MM-DD' format. Verify that there are no missing values.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"published_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"published_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_type': Ensure the field exists. Validate that 'transaction_type' matches one of the specified values: (Deposit, Withdrawal, Transfer).","generated_expectations":"expect_column_to_exist(column=\"transaction_type\"),expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=[\"Deposit\", \"Withdrawal\", \"Transfer\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'project_id': Ensure this field matches the type 'text'. Ensure values in (project_id) must exist in the projects table.","generated_expectations":"expect_column_values_to_be_of_type(column=\"project_id\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"project_id\", value_set=projects_table_project_ids)  # Assuming projects_table_project_ids contains the valid project IDs from the projects table.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `phone_number` column contains only unique values and matches the format '(XXX) XXX-XXXX'. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"phone_number\"),expect_column_values_to_not_be_null(column=\"phone_number\"),expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\(\\d{3}\\) \\d{3}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'customer_records': Ensure the number of rows is equal to 1000. Ensure the columns 'subscriber_id', 'name', and 'phone_number' exist in that order.","generated_expectations":"expect_table_row_count_to_equal(table=\"customer_records\", value=1000),expect_table_columns_to_match_ordered_list(table=\"customer_records\", column_list=[\"subscriber_id\", \"name\", \"phone_number\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `block_number` column, confirm that values are integers and sorted in ascending order.","generated_expectations":"expect_column_values_to_be_of_type(column=\"block_number\", type_=\"int\"),expect_column_values_to_be_increasing(column=\"block_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `stock_quantity` column, ensure that all values are integers within the range of 0 to 1000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `follow_up_date` is greater than the `admission_date` and follows the format `YYYY-MM-DD`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"follow_up_date\", column_B=\"admission_date\"),expect_column_values_to_match_strftime_format(column=\"follow_up_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `expiration_date` column contains dates in the format 'YYYY-MM-DD' and is in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"expiration_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"expiration_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'last_update': Ensure the field exists. Validate that (last_update) can be parsed and is less than the current date.","generated_expectations":"expect_column_to_exist(column=\"last_update\"),expect_column_values_to_be_dateutil_parseable(column=\"last_update\"),expect_column_values_to_be_between(column=\"last_update\", min_value=None, max_value=datetime.datetime.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `plaintiff_id` and `defendant_id` fields are of type integer and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"plaintiff_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"plaintiff_id\"),expect_column_values_to_be_of_type(column=\"defendant_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"defendant_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `issue_type` field in Government Services contains values only from the set `['Query', 'Complaint', 'Suggestion']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"issue_type\", value_set=['Query', 'Complaint', 'Suggestion'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_price': Ensure this field matches the type 'decimal'. Ensure the field is required (not null) and greater than zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"product_price\", type_=\"decimal\"),expect_column_values_to_not_be_null(column=\"product_price\"),expect_column_values_to_be_greater_than(column=\"product_price\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `price` column values are within the range of $5 to $500.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=5, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `price` column values are within the range of $50,000 to $5,000,000.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=50000, max_value=5000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `hire_date` field: Validate that all dates are in the format 'YYYY-MM-DD' and fall before the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\"),expect_column_values_to_be_between(column=\"hire_date\", min_value=\"1900-01-01\", max_value=your_current_date)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `jurisdiction` column contains only values from the defined set `['State', 'Federal', 'Local']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"jurisdiction\", value_set=['State', 'Federal', 'Local'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `order_date` and `delivery_date` columns, ensure that `delivery_date` is always greater than `order_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"delivery_date\", column_B=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `currency` field has distinct values from the set `['BTC', 'ETH', 'USDT']` and that none are null.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"currency\", value_set=['BTC', 'ETH', 'USDT']),expect_column_values_to_not_be_null(column=\"currency\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_number` column has unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_number\"),expect_column_values_to_not_be_null(column=\"case_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `case_status` field only contains values from the set ['Open', 'In Progress', 'Closed']. Validate that the `closure_date` is later than `case_open_date`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"case_status\", value_set=[\"Open\", \"In Progress\", \"Closed\"]),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"closure_date\", column_B=\"case_open_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_id` and `conversation_id` columns: Ensure that the combination of these two fields remains unique across the dataset.","generated_expectations":"expect_compound_columns_to_be_unique(column_a=\"user_id\", column_b=\"conversation_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `response_time` field, ensure it contains numeric values representing milliseconds and validates that all values are positive.","generated_expectations":"expect_column_values_to_be_of_type(column=\"response_time\", type_=\"int\"),expect_column_values_to_be_between(column=\"response_time\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `insured_value` field: Verify that values are within the range of $1,000 to $1,000,000. Check for any null entries.","generated_expectations":"expect_column_values_to_be_between(column=\"insured_value\", min_value=1000, max_value=1000000),expect_column_values_to_not_be_null(column=\"insured_value\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `session_duration` field: Validate that the mean value is greater than 60 seconds and less than 3600 seconds.","generated_expectations":"expect_column_mean_to_be_between(column=\"session_duration\", min_value=60, max_value=3600)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `experiment_id` column contains only unique values that match the format `EXP-[0-9]{4}`.","generated_expectations":"expect_column_values_to_be_unique(column=\"experiment_id\"),expect_column_values_to_match_regex(column=\"experiment_id\", regex=r\"^EXP-[0-9]{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `order_id` column is unique and matches the format 'ORD-XXXX' where 'X' is a digit.","generated_expectations":"expect_column_values_to_be_unique(column=\"order_id\"),expect_column_values_to_match_regex(column=\"order_id\", regex=r\"^ORD-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure the field matches the type 'text'. Ensure values in (patient_id) conform to the pattern '^[A-Z0-9]{10}$'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"text\"),expect_column_values_to_match_regex(column=\"patient_id\", regex=r\"^[A-Z0-9]{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `department_id` column exists and matches the predefined list of department IDs.","generated_expectations":"expect_column_to_exist(column=\"department_id\"),expect_column_values_to_be_in_set(column=\"department_id\", value_set=[\/* predefined list of department IDs *\/])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `district_id` column exists and contains unique values. Validate that it matches a predefined set of district IDs.","generated_expectations":"expect_column_to_exist(column=\"district_id\"),expect_column_values_to_be_unique(column=\"district_id\"),expect_column_values_to_be_in_set(column=\"district_id\", value_set=[\/* predefined set of district IDs *\/])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `transaction_id` column consists of valid JSON objects and adheres to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"transaction_id\"),expect_column_values_to_match_json_schema(column=\"transaction_id\", schema=\"your_json_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'block_number': Ensure the field matches the type 'integer'. Validate that 'block_number' is greater than 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"block_number\"),expect_column_values_to_be_of_type(column=\"block_number\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"block_number\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_source': Ensure this field validates file integrity by checking that the file exists and matches a specified hash value.","generated_expectations":"expect_file_to_exist(file_path=\"data_source\"),expect_file_hash_to_equal(file_path=\"data_source\", hash_value=\"specified_hash_value\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `priority_level` field: Ensure values are distinct and match `['High', 'Medium', 'Low']`. Ensure the field is required.","generated_expectations":"expect_column_values_to_be_unique(column=\"priority_level\"),expect_column_values_to_be_in_set(column=\"priority_level\", value_set=[\"High\", \"Medium\", \"Low\"]),expect_column_values_to_not_be_null(column=\"priority_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field `listing_date`: Verify that all values are in the format `YYYY-MM-DD` and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"listing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_description': Ensure the field matches the type 'text'. Ensure the length does not exceed 500 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"product_description\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"product_description\", min_value=0, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `origin` and `destination` columns, ensure that the unique values in `destination` match the predefined list of valid locations.","generated_expectations":"expect_column_values_to_be_in_set(column=\"destination\", value_set=[\"valid_location_1\", \"valid_location_2\", \"valid_location_3\"]),expect_column_values_to_be_unique(column=\"origin\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `supplier_email` field matches the regex pattern for valid email addresses and is unique across records.","generated_expectations":"expect_column_values_to_match_regex(column=\"supplier_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_be_unique(column=\"supplier_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_subject': Ensure that the field is required (not null). Validate that all values have a length of at least 5 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_subject\"),expect_column_value_lengths_to_be_between(column=\"email_subject\", min_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column exists and contains unique values for all products. Validate that the `price` column only contains positive numeric values.","generated_expectations":"expect_column_to_exist(column=\"product_id\"),expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category': Ensure values in 'category' must exist in the set ['News', 'Blog', 'Tutorial']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"category\"),expect_column_values_to_be_in_set(column=\"category\", value_set=[\"News\", \"Blog\", \"Tutorial\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column connects to valid records in the `users` table, confirming the existence of associated data.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_id\", value_set=get_user_ids_from_users_table())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `ballot_submission_time` field: Confirm that all datetime values are formatted as 'YYYY-MM-DD HH:MM:SS' and fall within the range of the election day.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"ballot_submission_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_between(column=\"ballot_submission_time\", min_value=\"2023-11-08 00:00:00\", max_value=\"2023-11-08 23:59:59\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_type` column contains only values from the set: `['Deposit', 'Withdrawal', 'Transfer']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=['Deposit', 'Withdrawal', 'Transfer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'block_number': Ensure the field contains only integer values within the range of 0 to 9999999.","generated_expectations":"expect_column_values_to_be_between(column=\"block_number\", min_value=0, max_value=9999999),expect_column_values_to_be_of_type(column=\"block_number\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of `purchase_amount` and `discount_amount` equals `total_amount` for each record. Flag discrepancies.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"purchase_amount\", column_B=\"total_amount\", column_C=\"discount_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_date` column values are valid datetime strings that can be parsed using dateutil.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `data_collection_date`: Ensure values are in the format 'MM\/DD\/YYYY' and are valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"data_collection_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"data_collection_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `enrollment_date` column, validate that all dates are within the current academic year.","generated_expectations":"expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'destination_zip': Ensure the field exists. Validate that all values in (destination_zip) match the regex pattern '^\\d{5}(-\\d{4})?$' for US ZIP codes.","generated_expectations":"expect_column_to_exist(column=\"destination_zip\"),expect_column_values_to_match_regex(column=\"destination_zip\", regex=r\"^\\d{5}(-\\d{4})?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check if the `reading_time` is always less than the `timestamp` for each record.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"timestamp\", column_B=\"reading_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `post_length` field, validate that the character counts fall within the range of 0 to 280.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"post_length\", min_value=0, max_value=280)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_status': Ensure the field matches the type 'text'. Validate that values do not exceed 50 characters and belong to the set of predefined statuses.","generated_expectations":"expect_column_values_to_be_of_type(column=\"case_status\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"case_status\", min_value=0, max_value=50),expect_column_values_to_be_in_set(column=\"case_status\", value_set=[\"status1\", \"status2\", \"status3\", ...])  # Replace ... with actual predefined statuses","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `sent_time` column contains no missing values and follows the format `YYYY-MM-DD HH:MM:SS`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"sent_time\"),expect_column_values_to_match_strftime_format(column=\"sent_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `sample_size` column values maintain a normal distribution, with a Kullback-Leibler divergence below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"sample_size\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that for every entry in the `leases` table, the `tenant_id` exists in the `tenants` table.","generated_expectations":"expect_column_pair_values_to_be_in_set(column_A=\"leases.tenant_id\", column_B=\"tenants.tenant_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_type` column only contains values from the list `['Residential', 'Commercial', 'Industrial']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"property_type\", value_set=['Residential', 'Commercial', 'Industrial'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `quantity`: Ensure that all entries are of type 'integer' and fall within the range of 1 to 10000. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"quantity\", min_value=1, max_value=10000),expect_column_values_to_not_be_null(column=\"quantity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `research_date` column: Ensure all entries are valid datetime values conforming to the format `%Y-%m-%d` and that no future dates exist.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"research_date\"),expect_column_values_to_match_strftime_format(column=\"research_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"research_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the number of rows in the `users` table is greater than 100 and less than 10,000.","generated_expectations":"expect_table_row_count_to_be_between(table=\"users\", min_value=101, max_value=9999)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `customer_id` field has a length of exactly `10` characters and matches the pattern `^[A-Z0-9]{10}$`.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"customer_id\", length=10),expect_column_values_to_match_regex(column=\"customer_id\", regex=\"^[A-Z0-9]{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of the `fees` column matches the expected total of 5000 for all cases. Validate that this field exists.","generated_expectations":"expect_column_sum_to_be_between(column=\"fees\", min_value=5000, max_value=5000),expect_column_to_exist(column=\"fees\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_request_date` column contains datetime values matching the format `%d\/%m\/%Y`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"service_request_date\", strftime_format=\"%d\/%m\/%Y\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `temperature`: Ensure the minimum temperature is above -50\u00b0C and the maximum temperature is below 60\u00b0C.","generated_expectations":"expect_column_min_to_be_between(column=\"temperature\", min_value=-50),expect_column_max_to_be_between(column=\"temperature\", max_value=60)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `post_time` column values are in valid datetime format and correspond to UTC timezone.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"post_time\"),expect_column_values_to_match_strftime_format(column=\"post_time\", strftime_format=\"%Y-%m-%dT%H:%M:%SZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure the field matches the type 'integer'. Ensure values in (user_id) are unique across the dataset. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"user_id\"),expect_column_values_to_be_of_type(column=\"user_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Perform a Kolmogorov-Smirnov test on the `block_time` distribution to ensure it meets expected behavior for the given blockchain.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"block_time\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_amount` column values are greater than zero and less than or equal to 1,000,000.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `warehouse_location` column contains only entries listed in the predefined `['Warehouse A', 'Warehouse B', 'Warehouse C']` set.","generated_expectations":"expect_column_values_to_be_in_set(column=\"warehouse_location\", value_set=['Warehouse A', 'Warehouse B', 'Warehouse C'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_status` column contains only values from the set `['Pending', 'Shipped', 'Delivered', 'Returned']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"shipment_status\", value_set=['Pending', 'Shipped', 'Delivered', 'Returned'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `quantity` column only contains values within the range of 0 to 1000. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_between(column=\"quantity\", min_value=0, max_value=1000),expect_column_values_to_not_be_null(column=\"quantity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `claim_date`: Ensure values are of type 'date' and that no claims are recorded before the policy start date.","generated_expectations":"expect_column_values_to_be_of_type(column=\"claim_date\", type_=\"date\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"claim_date\", column_B=\"policy_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `reviews`: Ensure the field is valid JSON. Ensure it conforms to the specified JSON schema for review objects. Ensure this field can be null.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"reviews\"),expect_column_values_to_match_json_schema(column=\"reviews\", schema=\"specified_JSON_schema\"),expect_column_values_to_be_null(column=\"reviews\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `monthly_fee` column has values with a mean between $30 and $100.","generated_expectations":"expect_column_mean_to_be_between(column=\"monthly_fee\", min_value=30, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `purchase_amount` column contains values within the range [0, 10000] and that each entry is of type 'float'.","generated_expectations":"expect_column_values_to_be_between(column=\"purchase_amount\", min_value=0, max_value=10000),expect_column_values_to_be_of_type(column=\"purchase_amount\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `election_date` column contains dates within the range between '2020-01-01' and '2023-12-31'. Ensure there are no null values.","generated_expectations":"expect_column_values_to_be_between(column=\"election_date\", min_value=\"2020-01-01\", max_value=\"2023-12-31\"),expect_column_values_to_not_be_null(column=\"election_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `delivery_date` field, verify that all dates are in the format 'YYYY-MM-DD' and are not in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_greater_than(column=\"delivery_date\", value=\"2023-10-10\")  # Replace with the current date as needed","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `user_email` column in the `users` table contains only unique values and matches the standard email format.","generated_expectations":"expect_column_values_to_be_unique(column=\"user_email\"),expect_column_values_to_match_regex(column=\"user_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `attendance_percentage` column has a median value of at least 75%.","generated_expectations":"expect_column_median_to_be_between(column=\"attendance_percentage\", min_value=75, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` field contains unique values and is of type 'string', with no null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_be_of_type(column=\"product_id\", type_=\"string\"),expect_column_values_to_not_be_null(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `transaction_category` field: Ensure that all values match one of the allowed categories: `['Deposit', 'Withdrawal', 'Transfer']`. Verify that this column contains no missing values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_category\", value_set=[\"Deposit\", \"Withdrawal\", \"Transfer\"]),expect_column_values_to_not_be_null(column=\"transaction_category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `lab_results` column values pass the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"lab_results\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'payment_method': Ensure values are from the specified set ['Credit Card', 'Debit Card', 'PayPal']. Ensure this field is not null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"payment_method\", value_set=[\"Credit Card\", \"Debit Card\", \"PayPal\"]),expect_column_values_to_not_be_null(column=\"payment_method\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `signup_date` column values match the strftime format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"signup_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `interest_rate` values are between 0% and 20%, and the distribution passes the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_values_to_be_between(column=\"interest_rate\", min_value=0, max_value=20),expect_column_chisquare_test_p_value_to_be_greater_than(column=\"interest_rate\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `player_id` column has unique values and is of type 'integer'. There should be no null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_id\"),expect_column_values_to_be_of_type(column=\"player_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"player_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sample_size` field: Ensure this field is of type 'integer' and contains only positive values. Validate there are no missing entries.","generated_expectations":"expect_column_values_to_be_of_type(column=\"sample_size\", type_=\"int\"),expect_column_values_to_be_between(column=\"sample_size\", min_value=1, max_value=None),expect_column_values_to_not_be_null(column=\"sample_size\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `order_quantity` values are greater than 0 and do not exceed 5000.","generated_expectations":"expect_column_values_to_be_between(column=\"order_quantity\", min_value=1, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `customer_type` column contains values only in the set ['Individual', 'Business'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"customer_type\", value_set=['Individual', 'Business'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `policy_number` column: Ensure the values are unique and match the regular expression pattern `^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_match_regex(column=\"policy_number\", regex=r\"^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `purchase_date` column includes only valid dates that can be parsed with dateutil.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"purchase_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `case_status` field contains only distinct values from the set ['Open', 'Closed', 'Pending'].","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"case_status\", value_set=['Open', 'Closed', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `duration` column contains values formatted as 'HH:MM:SS' and that all durations are greater than 0.","generated_expectations":"expect_column_values_to_match_regex(column=\"duration\", regex=r\"^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$\"),expect_column_values_to_be_greater_than(column=\"duration\", value=\"00:00:00\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_name': Ensure the field matches the type 'text'. Validate that string lengths of (customer_name) fall within the range of 1 to 100 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"customer_name\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"customer_name\", min_value=1, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `voter_id` column only contains unique identifiers and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"voter_id\"),expect_column_values_to_not_be_null(column=\"voter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'content_json': Ensure that each content entry is a valid JSON object and conforms to the required schema for content structure.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"content_json\"),expect_column_values_to_match_json_schema(column=\"content_json\", schema=\"required_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `meter_reading` column, ensure that all values are positive integers and that the sum of readings matches the expected total for the billing period.","generated_expectations":"expect_column_values_to_be_between(column=\"meter_reading\", min_value=1, max_value=None),expect_column_sum_to_be_between(column=\"meter_reading\", min_value=expected_total, max_value=expected_total)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `case_number` column: Ensure values are unique and match the pattern `^C[0-9]{5}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_number\"),expect_column_values_to_match_regex(column=\"case_number\", regex=r\"^C[0-9]{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the 'file_hash' for uploaded data files matches the expected hash value to ensure data integrity.","generated_expectations":"expect_file_hash_to_equal(expected_hash_value)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `user_id` column contains only values that exist in the `users` table.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_id\", value_set=users_table_user_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `loan_amount` values have a standard deviation not exceeding $5,000.","generated_expectations":"expect_column_stdev_to_be_between(column=\"loan_amount\", min_value=0, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `amenities` column contains valid JSON arrays conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"amenities\", schema={...})  # Replace {...} with the actual schema definition.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_timestamp` column values match the format 'ISO 8601' and can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_be_dateutil_parseable(column=\"transaction_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"product_id\"),expect_column_values_to_not_be_null(column=\"product_id\"),expect_column_values_to_be_of_type(column=\"product_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_id` column contains only unique identifiers that match the pattern `^[A-F0-9]{16}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_match_regex(column=\"device_id\", regex=r\"^[A-F0-9]{16}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `wind_speed` column: Verify that all values are non-negative and within the range of 0 to 150 km\/h.","generated_expectations":"expect_column_values_to_be_between(column=\"wind_speed\", min_value=0, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `review_score` column has a median value of at least 4.0.","generated_expectations":"expect_column_median_to_be_between(column=\"review_score\", min_value=4.0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `platform` field contains only values from the set `['PC', 'Xbox', 'PlayStation', 'Switch']` and that there are no null entries.","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Xbox', 'PlayStation', 'Switch']),expect_column_values_to_not_be_null(column=\"platform\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `delivery_dates` column: Ensure all dates are in increasing order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"delivery_dates\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `delivery_date` is greater than the `order_date` for all records in the shipments table.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"delivery_date\", column_B=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields 'employee_id' and 'department_id': Ensure both fields match the type 'text'. Validate that (employee_id) must exist in the list of employees and (department_id) must exist in the list of departments. Ensure these fields exist.","generated_expectations":"expect_column_to_exist(column=\"employee_id\"),expect_column_to_exist(column=\"department_id\"),expect_column_values_to_be_of_type(column=\"employee_id\", type_=\"text\"),expect_column_values_to_be_of_type(column=\"department_id\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"employee_id\", value_set=list_of_employees),expect_column_values_to_be_in_set(column=\"department_id\", value_set=list_of_departments)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure that 'customer_id' values are unique across records to maintain customer integrity.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'temperature': Validate that all temperature values are within the range of -50 to 50 degrees Celsius and match the type 'float'.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50),expect_column_values_to_be_of_type(column=\"temperature\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_id` field contains only unique values and does not allow null.","generated_expectations":"expect_column_values_to_be_unique(column=\"shipment_id\"),expect_column_values_to_not_be_null(column=\"shipment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the unique count of entries in the `department` column is greater than or equal to 5.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"department\", min_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_id` column exists and contains only unique values.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_be_unique(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `order_date` column is formatted as YYYY-MM-DD and contains no null values, ensuring accurate order tracking.","generated_expectations":"expect_column_to_exist(column=\"order_date\"),expect_column_values_to_not_be_null(column=\"order_date\"),expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_amount` column passes the Kolmogorov-Smirnov test with p-values greater than 0.05 across relevant datasets.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"transaction_amount\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` column, ensure the minimum value is above 50,000 and the maximum does not exceed 5,000,000.","generated_expectations":"expect_column_min_to_be_between(column=\"price\", min_value=50001),expect_column_max_to_be_between(column=\"price\", max_value=5000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `game_title` column does not exceed a length of 100 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"game_title\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `response_time` field: Ensure that the average response time is less than 30 minutes and that all entries are numeric.","generated_expectations":"expect_column_mean_to_be_between(column=\"response_time\", min_value=0, max_value=30),expect_column_values_to_be_of_type(column=\"response_time\", type_=\"int\")  # Assuming response_time is in minutes,or,expect_column_values_to_be_of_type(column=\"response_time\", type_=\"float\")  # If response_time can be a float","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `project_id` column exists in both the `research_projects` and `task_assignments` tables, and matches the same set of values.","generated_expectations":"expect_column_to_exist(column=\"project_id\"),expect_select_column_values_to_be_unique_within_record(column=\"project_id\"),expect_column_pair_values_to_be_equal(column_A=\"research_projects.project_id\", column_B=\"task_assignments.project_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'read_receipt': Validate that values in (read_receipt) are either 'Yes' or 'No'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"read_receipt\"),expect_column_values_to_be_in_set(column=\"read_receipt\", value_set=[\"Yes\", \"No\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `message_length`: Verify that the lengths of messages are within the range of 1 to 10,000 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"message_length\", min_value=1, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'player_stats': Ensure that (player_stats) contains valid JSON objects and matches the specified JSON schema for player information.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"player_stats\"),expect_column_values_to_match_json_schema(column=\"player_stats\", schema={\"type\": \"object\", \"properties\": {}})  # Replace the empty properties with the actual schema for player information.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` column: Check that the distribution follows a normal distribution with a p-value greater than 0.05 from the KS test.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"salary\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `grades` column, ensure that the mean is between 70 and 100 and standard deviation does not exceed 15.","generated_expectations":"expect_column_mean_to_be_between(column=\"grades\", min_value=70, max_value=100),expect_column_stdev_to_be_between(column=\"grades\", min_value=0, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the number of rows in the `device_data` table is equal to the number of entries in the `registered_devices` table.","generated_expectations":"expect_table_row_count_to_equal(column=\"device_data\", other_table=\"registered_devices\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `departure_time` column values are valid datetime strings and can be parsed according to the specified format.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"departure_time\"),expect_column_values_to_match_strftime_format(column=\"departure_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `listing_price` column: Validate that values are greater than or equal to 0 and do not exceed 10,000,000.","generated_expectations":"expect_column_values_to_be_between(column=\"listing_price\", min_value=0, max_value=10000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sensor_readings` column, check that the readings are normally distributed and pass the Kolmogorov-Smirnov test.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"sensor_readings\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the number of posts in the `posts` table matches the user count in the `users` table to ensure each user has at least one post.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"posts\", other_table=\"users\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'citizen_status': Ensure the field matches the type 'text'. Ensure values in 'citizen_status' must be one of the predefined categories: ['citizen', 'permanent resident', 'temporary resident']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"citizen_status\"),expect_column_values_to_be_of_type(column=\"citizen_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"citizen_status\", value_set=['citizen', 'permanent resident', 'temporary resident'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_data` column contains valid JSON objects representing transaction details as per the defined schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"transaction_data\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_name': Ensure the field matches the type 'text'. Validate that the length of (product_name) is between 3 and 100 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"product_name\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"product_name\", min_value=3, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'price_change_percentage': Validate that the field is a numeric type. Ensure values in (price_change_percentage) are within the range of -100 to 100. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"price_change_percentage\"),expect_column_values_to_be_of_type(column=\"price_change_percentage\", type_=\"float\"),  # Assuming numeric type is float,expect_column_values_to_be_between(column=\"price_change_percentage\", min_value=-100, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `election_date` field matches the format 'MM\/DD\/YYYY' and is a future date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"election_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_increasing(column=\"election_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `temperature` column values fall within the range of -50 to 50 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `square_footage` column contains values that are greater than `100` and less than `10,000`.","generated_expectations":"expect_column_values_to_be_between(column=\"square_footage\", min_value=100, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `platform` column: Validate that all entries are unique and match the regex pattern '^(PC|Xbox|PlayStation|Switch)$'.","generated_expectations":"expect_column_values_to_be_unique(column=\"platform\"),expect_column_values_to_match_regex(column=\"platform\", regex=r\"^(PC|Xbox|PlayStation|Switch)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `budget_item` column contains values that are unique within the `budget` table.","generated_expectations":"expect_column_values_to_be_unique(column=\"budget_item\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `employee_id` field contains unique integer values that match the specified range of 1000 to 9999.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\"),expect_column_values_to_be_between(column=\"employee_id\", min_value=1000, max_value=9999)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'citizen_id': Ensure this field exists and contains unique identifiers. Validate that all values match the format of a citizen ID number.","generated_expectations":"expect_column_to_exist(column=\"citizen_id\"),expect_column_values_to_be_unique(column=\"citizen_id\"),expect_column_values_to_match_regex(column=\"citizen_id\", regex=r\"^[A-Z]{2}\\d{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_email': Ensure the expect column value lengths to be between;  Ensure this field matches the format 'email' and is required (not null).","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"customer_email\", min_value=5, max_value=254),expect_column_values_to_match_regex(column=\"customer_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_not_be_null(column=\"customer_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that all entries in the `citizen_feedback` field are valid JSON objects conforming to the specified JSON schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"citizen_feedback\", schema=\"specified_json_schema\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `title` field has a length between 10 and 100 characters and does not contain any special characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"title\", min_value=10, max_value=100),expect_column_values_to_not_match_regex(column=\"title\", regex=r\"[^a-zA-Z0-9\\s]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `description` column contains strings that are at least `20` characters long and do not exceed `500` characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"description\", min_value=20, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `last_active` column contains dates that are no older than 30 days from the current date.","generated_expectations":"expect_column_values_to_be_between(column=\"last_active\", min_value=(current_date - timedelta(days=30)), max_value=current_date)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_date': Ensure the field is required (not null). Validate that the date format matches 'YYYY-MM-DD' and that it is not in the future.","generated_expectations":"expect_column_values_to_not_be_null(column=\"shipment_date\"),expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_less_than(column=\"shipment_date\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `block_number` column contains only positive integers and that the sum of all entries is less than or equal to 1,000,000.","generated_expectations":"expect_column_values_to_be_between(column=\"block_number\", min_value=1, max_value=None),expect_column_sum_to_be_between(column=\"block_number\", min_value=None, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'attachment_size': Ensure this field is required (not null). Ensure all values are integers within the range of 0 to 50,000 KB.","generated_expectations":"expect_column_values_to_not_be_null(column=\"attachment_size\"),expect_column_values_to_be_between(column=\"attachment_size\", min_value=0, max_value=50000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `release_date` column contains dates that are not in the future and conform to the `YYYY-MM-DD` format.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"release_date\"),expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"release_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
