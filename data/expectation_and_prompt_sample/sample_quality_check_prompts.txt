For field 'author_email': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that values in (author_email) match the regex pattern for valid email addresses.
For field 'post_title': Ensure the field is required (not null). Validate that the length of (post_title) is between 5 and 100 characters.
For field 'category_id': Ensure this field exists. Validate that values in (category_id) must exist in categories (category_name).
For field 'post_slug': Ensure the field matches the type 'text'. Validate that (post_slug) does not contain any spaces or special characters.
For field 'publish_date': Ensure the field is required (not null). Validate that (publish_date) is in the format 'YYYY-MM-DD' and that it is a valid date.
For field 'student_id': Ensure this field exists. Ensure that the values in (student_id) are unique and match the regex pattern for valid student IDs.
For field 'course_code': Ensure the field is required (not null). Validate that (course_code) matches the regex pattern '^[A-Z]{3}-[0-9]{3}$'.
For field 'enrollment_date': Ensure the field is required (not null). Validate that the length of (enrollment_date) is exactly 10 characters and follows the format 'YYYY-MM-DD'.
For field 'grade': Ensure the field matches the type 'text'. Validate that values in (grade) only match the patterns 'A', 'B', 'C', 'D', or 'F'.
For field 'assignment_name': Ensure this field exists. Validate that the length of (assignment_name) falls within 2 to 50 characters.
For field 'product_sku': Ensure this field exists. Validate that (product_sku) is unique and matches the regex pattern '^[A-Z0-9-]+$'.
For field 'stock_quantity': Ensure the field is required (not null). Validate that (stock_quantity) is an integer that is greater than or equal to zero.
For field 'product_name': Ensure the field matches the type 'text'. Validate that the length of (product_name) is between 3 and 100 characters.
For field 'category_id': Ensure this field exists. Validate that values in (category_id) must exist in the categories table (category_name), ensuring referential integrity.
For field 'price': Ensure the field is required (not null). Validate that (price) is a decimal number with two decimal places.
For field 'wallet_address': Ensure this field exists. Validate that (wallet_address) matches the regex pattern for valid cryptocurrency wallet addresses.
For field 'transaction_id': Ensure the field is required (not null). Validate that (transaction_id) matches the regex pattern '^[0-9a-fA-F]{64}$'.
For field 'transaction_amount': Ensure the field matches the type 'decimal'. Validate that (transaction_amount) is greater than zero.
For field 'block_number': Ensure this field exists. Validate that (block_number) is an integer and matches the condition that it must be greater than or equal to zero.
For field 'timestamp': Ensure the field is required (not null). Validate that the length of (timestamp) is exactly 19 characters and follows the format 'YYYY-MM-DD HH:MM:SS'.
For field 'description': Ensure the field is required (not null). Validate that the length of (description) is between 10 and 500 characters.
For field 'user_role': Ensure this field exists. Validate that values in (user_role) match at least one pattern from the list: 'admin', 'editor', 'viewer'.
For field 'image_url': Ensure the field matches the type 'text'. Validate that (image_url) matches the regex pattern for valid URLs.
For field 'status': Ensure the field is required (not null). Validate that values in (status) do not match any pattern from the list: 'archived', 'deleted'.
For field 'created_at': Ensure the field is required (not null). Validate that (created_at) is in the format 'YYYY-MM-DD HH:MM:SS' and is a valid timestamp.
For table 'property_listings': Ensure the column 'property_id' exists. Ensure the values in 'property_id' are unique across all rows.
For table 'leases': Ensure the number of rows is between 1 and 100. Ensure the column 'lease_start_date' exists and is formatted as 'YYYY-MM-DD'.
For table 'owners': Ensure the 'email' column exists. Ensure values in 'email' match the format of a valid email address.
For table 'property_sales': Ensure the column 'sale_price' exists. Ensure all values in 'sale_price' are greater than zero.
For table 'maintenance_requests': Ensure the number of rows is equal to the number of properties listed in 'property_listings'.
For table 'citizen_feedback': Ensure the column 'feedback_id' exists and values are unique. Ensure the number of rows is between 10 and 500.
For table 'public_services': Ensure the column 'service_type' exists. Ensure the values in 'service_type' match one of the predefined categories.
For table 'elections': Ensure the column 'election_date' exists. Validate that 'election_date' is not a future date.
For table 'community_events': Ensure the 'event_location' column exists. Ensure that all values in 'event_location' are non-empty strings.
For table 'resource_allocations': Ensure the sum of 'allocated_funds' does not exceed the 'total_budget' specified in the table.
For table 'articles': Ensure the column 'author_id' exists and corresponds to valid IDs in the 'authors' table. Ensure the row count is equal to the number of published articles.
For table 'comments': Ensure the 'comment_text' column exists. Ensure that the number of rows does not exceed 1000.
For table 'media_assets': Ensure the column 'file_size' exists. Ensure that all 'file_size' values are within the range of 1KB to 10MB.
For table 'tags': Ensure the 'tag_name' column exists. Validate the 'tag_name' for uniqueness across all entries.
For table 'categories': Ensure the column 'parent_category_id' exists. Ensure all parent category IDs correspond to existing categories.
For table 'game_releases': Ensure the 'release_date' column exists and is formatted correctly. Ensure that the number of rows matches the number of games released this year.
For table 'players': Ensure the column 'player_id' exists and contains unique values. Ensure the 'player_score' column exists and all values are non-negative.
For table 'reviews': Ensure that the 'review_text' column exists. Validate that all reviews contain at least 20 characters.
For table 'events': Ensure the 'event_date' column exists. Ensure all 'event_date' values are in the future.
For table 'in-game_purchases': Ensure the 'purchase_amount' column exists. Ensure that all values in 'purchase_amount' are greater than zero.
For table 'transactions': Ensure the 'transaction_id' column exists and is unique. Ensure the number of rows is equal to the number of transactions processed today.
For table 'alerts': Ensure the 'alert_type' column exists. Ensure that values in 'alert_type' match predefined categories.
For table 'user_profiles': Ensure the 'last_login' column exists. Validate that all 'last_login' dates are not in the future.
For table 'suspicious_activity': Ensure the 'activity_description' column exists. Ensure that the length of 'activity_description' does not exceed 500 characters.
For table 'investigations': Ensure the column 'investigation_id' exists and is unique. Ensure that the number of investigations is between 1 and 50.
For the `voter_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.
For the `election_date` column: Ensure all dates are within the range of '2020-01-01' to '2024-12-31'. Ensure this field exists.
For the `polling_location` field: Ensure the field matches the type 'text'. Ensure values in `polling_location` exist in the predefined list of valid locations.
For the `registration_status` column: Ensure values are from the set `['registered', 'unregistered', 'pending']`. Ensure the field is required (not null).
For the `vote_cast` field: Ensure that the field contains unique values. Ensure the field is of type 'boolean'.
For the `property_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.
For the `listing_price` column: Ensure values are within the range of $1000 to $10,000,000. Ensure the field matches the type 'decimal'.
For the `property_type` field: Ensure values are from the set `['residential', 'commercial', 'land']`. Ensure the field is required (not null).
For the `square_footage` column: Ensure all values are positive integers and fall within the range of 100 to 50,000.
For the `zip_code` field: Ensure the field matches the type 'text'. Ensure all zip codes are unique and follow the format '#####'.
For the `product_id` field: Ensure the field is required (not null). Ensure values are unique and of type 'integer'.
For the `stock_quantity` column: Ensure all values are non-negative integers and within the range of 0 to 10,000.
For the `category` field: Ensure values are from the set `['electronics', 'furniture', 'clothing']`. Ensure the field is required (not null).
For the `price` field: Ensure all prices are positive decimals and fall within the range of $0.01 to $1,000.00.
For the `discount_percentage` column: Ensure values are within the range of 0% to 100%. Ensure this field exists.
For the `transaction_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.
For the `transaction_amount` column: Ensure all values are positive decimals and within the range of $0.01 to $1,000,000.
For the `transaction_type` field: Ensure values are from the set `['purchase', 'refund', 'transfer']`. Ensure the field is required (not null).
For the `user_id` column: Ensure values are unique and belong to the specified set of valid user IDs. Ensure the field is required (not null).
For the `timestamp` field: Ensure the field is of type 'datetime'. Ensure all timestamps are in the past and not null.
For the `game_id` field: Ensure the field is required (not null). Ensure values are unique and of type 'integer'.
For the `release_date` column: Ensure all dates are within the range of '2000-01-01' to '2024-12-31'. Ensure this field exists.
For the `genre` field: Ensure values are from the set `['action', 'adventure', 'strategy', 'puzzle']`. Ensure the field is required (not null).
For the `rating` column: Ensure values are within the range of 1 to 10. Ensure this field is required (not null).
For the `platform` field: Ensure values are from the set `['PC', 'Console', 'Mobile']`. Ensure the field is of type 'text' and not null.
For field 'subscriber_id': Ensure the field is required (not null). Verify that the field matches the type 'integer'. Ensure this field exists.
For field 'phone_number': Ensure that the column contains unique values. Verify that the field matches the type 'text' and follows the format '(XXX) XXX-XXXX'.
For field 'plan_start_date': Ensure the field is required (not null). Verify that the values in this column are valid datetime strings in the format 'YYYY-MM-DD'.
For field 'service_type': Ensure all entries match the type 'text'. Ensure the field contains only distinct values from the predefined list ['Prepaid', 'Postpaid', 'Family Plan'].
For field 'data_usage': Ensure the column can only contain numeric values and that there are no missing values.
For field 'patient_id': Ensure the field is required (not null). Verify uniqueness across the dataset and confirm the type is 'integer'.
For field 'appointment_date': Ensure all entries match the type 'datetime'. Verify that the values conform to the format 'YYYY-MM-DD HH:MM:SS'.
For field 'medical_record': Ensure this field is required (not null). Validate that the values are valid JSON objects adhering to the specified schema.
For field 'doctor_id': Ensure that values in this field must exist in the 'doctor' dataset. Ensure the field matches the type 'integer' and is not null.
For field 'diagnosis_code': Ensure the column contains unique entries. Verify that all values conform to the ICD-10 code format.
For field 'post_id': Ensure the field is required (not null) and contains unique values. Verify that the field matches the type 'integer'.
For field 'publish_date': Ensure all entries are required (not null) and match the type 'datetime' in the format 'YYYY-MM-DD'.
For field 'category': Ensure the field contains only distinct values from the list ['News', 'Blog', 'Tutorial']. Validate there are no missing values.
For field 'metadata': Ensure this field is a valid JSON object. Verify that it conforms to the specified JSON schema and does not allow null values.
For field 'author_id': Ensure the field matches the type 'integer'. Validate that all values exist in the 'authors' dataset, ensuring no duplicates.
For field 'meter_id': Ensure this field is required (not null) and contains unique values. Verify that it matches the type 'string'.
For field 'reading_date': Ensure that all entries match the type 'datetime' and follow the format 'MM-DD-YYYY'.
For field 'consumption': Ensure this column only contains numeric values. Verify that there are no missing values and that it is not null.
For field 'service_type': Ensure the column contains distinct values, specifically ['Electricity', 'Water', 'Gas']. Validate that the field is not null.
For field 'billing_info': Ensure this field contains valid JSON objects. Verify that the data adheres to the specified schema and does not contain null entries.
For field 'transaction_id': Ensure this field is required (not null) and contains unique values. Verify that the field matches the type 'integer'.
For field 'transaction_date': Ensure all entries match the type 'datetime'. Validate that the values adhere to the format 'YYYY-MM-DD HH:MM:SS'.
For field 'user_data': Ensure this field is a valid JSON object. Verify that it conforms to the specified JSON schema and does not allow null values.
For field 'email_address': Ensure this field is required (not null). Verify that it contains unique values and follows the standard email format.
For field 'status_code': Ensure the column contains distinct values from the list ['Active', 'Inactive', 'Pending']. Validate that the field is not null.
For the `product_id` field: Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values are unique.
Ensure the `stock_quantity` column contains no missing values. Validate that all entries are of type 'integer' and greater than or equal to zero.
Ensure the standard deviation of the `price` column is below 20. Validate that all prices are of type 'decimal' and contain no missing values.
For the `supplier_id` field: Ensure the field is required (not null). Ensure it contains only unique values and is of type 'integer'.
Validate that the `category` column must only contain values from the predefined list ['Electronics', 'Clothing', 'Food']. Ensure this field contains no missing values.
For the `student_id`: Ensure the field is required (not null). Validate that all values are unique and of type 'integer'.
Ensure there are no missing values in the `enrollment_date` column. Validate that the type is 'date' and all dates are in the past.
Validate that the average score in the `exam_scores` column follows a normal distribution with a mean between 70 and 85.
For the `course_code`: Ensure the field is required (not null). Ensure all entries are unique and match the type 'text'.
Ensure the `completion_status` column contains only distinct values from ['Completed', 'In Progress', 'Not Started']. Verify there are no missing entries.
For the `user_id` field: Ensure this field is required (not null). Ensure all values are unique and are of type 'integer'.
Ensure the `likes` column contains no missing values. Validate that all entries are of type 'integer' and greater than or equal to zero.
Validate that the `post_creation_date` column must not contain future dates. Ensure all values are of type 'date'.
For the `post_type`: Ensure the column contains only distinct values from ['Image', 'Video', 'Text']. Ensure there are no missing values.
Ensure the standard deviation of the `engagement_rate` column is below 0.3. Validate that it follows a uniform distribution.
For the `order_id` field: Ensure this field is required (not null). Ensure all values are unique and are of type 'integer'.
Ensure the `delivery_date` column contains no missing values. Validate that all entries are of type 'date' and are in the future.
Validate that the `inventory_level` column follows a normal distribution, with a mean that does not exceed 1000 units.
For the `supplier_name`: Ensure the field matches the type 'text'. Ensure values in `supplier_name` must exist in the list of approved suppliers. Ensure no missing values.
Ensure the `shipping_cost` column contains values that are all greater than or equal to zero. Validate that there are no missing entries.
For the `booking_id` field: Ensure this field is required (not null). Ensure all values are unique and of type 'integer'.
Ensure the `check_in_date` column contains no missing values. Validate that all entries are of type 'date' and in the future.
Validate that the average `customer_rating` in the `reviews` column follows a normal distribution with a mean greater than or equal to 4.
For the `room_type`: Ensure the field contains only distinct values from ['Single', 'Double', 'Suite']. Ensure there are no missing values.
Ensure the `number_of_guests` column contains no missing values. Validate that all entries are of type 'integer' and are greater than zero.
For field `employee_id`: Ensure the field is required (not null). Ensure values in `employee_id` are unique across the dataset.
For field `invoice_amount`: Ensure the field matches the type 'decimal'. Ensure values in `invoice_amount` must be greater than zero.
For fields `start_date` and `end_date`: Ensure `end_date` is always greater than `start_date`. Ensure both fields are not null.
For field `supplier_id`: Ensure the field is required (not null). Ensure values in `supplier_id` are unique and exist in the `supplier` table.
For the combination of `product_id` and `warehouse_id`: Ensure this combination is unique across records.
For field `citizen_id`: Ensure the field is required (not null). Ensure values in `citizen_id` are unique across the dataset.
For field `birthdate`: Ensure the field matches the type 'date'. Ensure values in `birthdate` are not null and are less than the current date.
For fields `application_date` and `approval_date`: Ensure `approval_date` is always greater than `application_date`.
For field `zipcode`: Ensure the field matches the type 'text'. Ensure values in `zipcode` must exist in the defined list of valid zip codes.
For the combination of `service_type` and `citizen_id`: Ensure this combination is unique across records.
For field `booking_id`: Ensure the field is required (not null). Ensure values in `booking_id` are unique across the dataset.
For field `check_out_date`: Ensure the field matches the type 'date'. Ensure values in `check_out_date` must be greater than `check_in_date`.
For field `room_number`: Ensure the field is required (not null). Ensure values in `room_number` are unique within the same `hotel_id`.
For fields `total_cost` and `deposit`: Ensure the sum of `deposit` is less than or equal to `total_cost`.
For field `customer_email`: Ensure the field matches the type 'text'. Ensure values in `customer_email` are unique and valid email formats.
For field `game_title`: Ensure the field is required (not null). Ensure values in `game_title` are unique across the dataset.
For field `release_date`: Ensure the field matches the type 'date'. Ensure values in `release_date` are not null and are less than the current date.
For fields `rating` and `review_count`: Ensure the `rating` is greater than or equal to zero and less than or equal to 10.
For field `platform_id`: Ensure the field is required (not null). Ensure values in `platform_id` must exist in the `platform` table.
For the combination of `user_id` and `game_title`: Ensure this combination is unique across records.
For field `user_id`: Ensure the field is required (not null). Ensure values in `user_id` are unique across the dataset.
For field `sent_date`: Ensure the field matches the type 'date'. Ensure values in `sent_date` must be less than or equal to the current date.
For fields `email_subject` and `email_body`: Ensure that for every record, both fields must not be null and `email_subject` must be unique within the same `user_id`.
For field `attachment_size`: Ensure the field matches the type 'integer'. Ensure values in `attachment_size` must be greater than or equal to zero.
For the combination of `recipient_id` and `message_id`: Ensure this combination is unique across records.
For field 'product_price': Validate that the field is a numeric type. Ensure values in (product_price) are greater than 0 and less than 10,000. Ensure this field exists.
For field 'product_category': Ensure the field matches the type 'text'. Ensure values in (product_category) must exist in the predefined set of categories (category_list). Ensure this field exists.
For field 'stock_quantity': Validate that the field is an integer type. Ensure values in (stock_quantity) are within the range of 0 to 1,000. Ensure this field exists.
For field 'product_sku': Validate that the field matches the type 'string'. Ensure all values in (product_sku) have a length of exactly 8 characters. Ensure this field exists.
For field 'discount_code': Ensure the field matches the type 'string'. Ensure values in (discount_code) match the regex pattern '^DISCOUNT[0-9]{4}$'. Ensure this field exists.
For field 'shipping_country': Ensure the field matches the type 'text'. Ensure values in (shipping_country) must exist in the set of valid countries (country_list). Ensure this field exists.
For field 'customer_email': Validate that the field matches the type 'string'. Ensure values in (customer_email) match the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'. Ensure this field exists.
For field 'order_status': Ensure the field matches the type 'text'. Ensure values in (order_status) must exist in the set (['Pending', 'Shipped', 'Delivered', 'Cancelled']). Ensure this field exists.
For field 'payment_method': Ensure the field matches the type 'text'. Ensure values in (payment_method) must not match the set of invalid methods (['Cash', 'Check']). Ensure this field exists.
For field 'customer_phone': Validate that the field matches the type 'string'. Ensure values in (customer_phone) match the regex pattern '^\\+?[0-9]{10,15}$'. Ensure this field exists.
For field 'block_height': Validate that the field is an integer type. Ensure values in (block_height) are greater than 0 and are in increasing order. Ensure this field exists.
For field 'transaction_hash': Ensure the field matches the type 'string'. Ensure all values in (transaction_hash) match the regex pattern '^[0-9a-fA-F]{64}$'. Ensure this field exists.
For field 'wallet_address': Validate that the field matches the type 'string'. Ensure values in (wallet_address) match the regex pattern '^(0x)?[0-9a-fA-F]{40}$'. Ensure this field exists.
For field 'timestamp': Ensure the field matches the type 'datetime'. Ensure values in (timestamp) are within the range of the last 30 days. Ensure this field exists.
For field 'gas_fee': Validate that the field is a numeric type. Ensure values in (gas_fee) are greater than 0 and less than 10. Ensure this field exists.
For field 'crypto_symbol': Ensure the field matches the type 'string'. Ensure values in (crypto_symbol) must exist in the set of valid symbols (['BTC', 'ETH', 'LTC']). Ensure this field exists.
For field 'market_cap': Validate that the field is a numeric type. Ensure values in (market_cap) are greater than 1,000,000. Ensure this field exists.
For field 'trading_volume': Ensure the field matches the type 'numeric'. Ensure values in (trading_volume) are within the range of 0 to 1,000,000,000. Ensure this field exists.
For field 'price_change_percentage': Validate that the field is a numeric type. Ensure values in (price_change_percentage) are within the range of -100 to 100. Ensure this field exists.
For field 'exchange_name': Ensure the field matches the type 'text'. Ensure values in (exchange_name) do not match any SQL-like pattern from the list (['SELECT', 'DROP', 'INSERT']). Ensure this field exists.
For field 'user_id': Validate that the field matches the type 'string'. Ensure all values in (user_id) have a length of exactly 36 characters. Ensure this field exists.
For field 'trade_type': Ensure the field matches the type 'text'. Ensure values in (trade_type) must exist in the set (['Buy', 'Sell']). Ensure this field exists.
For field 'status_code': Validate that the field is an integer type. Ensure values in (status_code) must exist in the predefined set (['200', '400', '500']). Ensure this field exists.
For field 'ip_address': Ensure the field matches the type 'string'. Ensure values in (ip_address) match the regex pattern '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'. Ensure this field exists.
For field 'referral_code': Validate that the field matches the type 'string'. Ensure values in (referral_code) match the regex pattern '^[A-Z0-9]{6}$'. Ensure this field exists.
For the `voter_id` field: Ensure the values conform to a specified set of valid voter IDs, which should be unique and not empty.
In the `election_date` column: Validate that all dates are within the range of `2020-01-01` to `2024-12-31` and are formatted as 'YYYY-MM-DD'.
Ensure the `voter_status` column contains only values from the set `['active', 'inactive', 'pending']` and does not include any duplicates.
For the `ballot_submission_time` field: Confirm that all datetime values are formatted as 'YYYY-MM-DD HH:MM:SS' and fall within the range of the election day.
In the `polling_location` column: Ensure all entries are valid JSON objects that conform to the specified JSON schema for location details.
For the `candidates` field: Ensure the values are arranged in increasing order based on `candidate_id` and that no candidate appears more than once.
For the `registration_date` column: Validate that all dates are in the past and match the 'YYYY-MM-DD' format.
In the `vote_count` field: Ensure that all counts are non-negative integers and fall within the range of `0` to `10,000`.
For the `election_type` field: Confirm that all values are from the set `['primary', 'general', 'special']` and do not contain any nulls.
Ensure the `submission_format` column contains only valid JSON strings that can be parsed without errors.
In the `voting_method` column: Validate that the values are from the set `['in-person', 'mail-in', 'early voting']` and that there are no duplicates.
For the `results_published_date` field: Ensure all dates are formatted as 'YYYY-MM-DD' and are post-election dates.
In the `district_number` column: Validate that all entries are integers within the range of `1` to `100`.
For the `election_results` field: Ensure all results are valid JSON objects that adhere to the defined schema for election outcomes.
In the `absentee_ballot_request` field: Confirm that the request dates are formatted as 'YYYY-MM-DD' and fall within the range of the election campaign period.
For the `public_service_feedback` column: Ensure that all entries are valid JSON objects with required fields `['service_id', 'feedback_text', 'timestamp']`.
In the `service_request_date` column: Validate that all dates are in the past and conform to the 'YYYY-MM-DD' format.
For the `employee_id` field: Ensure that all values are unique and fall within the specified set of valid employee IDs.
In the `service_type` column: Confirm that all entries are from the set `['utility', 'transportation', 'health']` and that there are no duplicates.
For the `complaint_resolution_date` field: Validate that all dates are formatted as 'YYYY-MM-DD' and occur after the `complaint_date`.
In the `citizen_feedback` column: Ensure all entries are valid JSON objects that conform to the specified schema for feedback submissions.
For the `service_request_id` field: Confirm that all IDs are unique and match the specified pattern of alphanumeric characters.
In the `public_meeting_date` column: Validate that the dates are in the future and formatted as 'YYYY-MM-DD' with no duplicates.
For the `budget_amount` field: Ensure all values are positive numbers and fall within the range of `1000` to `10,000,000`.
In the `service_completion_time` column: Confirm that all datetime values are formatted as 'YYYY-MM-DD HH:MM:SS' and occur after the `service_request_time`.
Ensure the `patient_age` column values are between 0 and 120.
Verify that the `diagnosis_code` column contains only distinct values from the set `['A00', 'B00', 'C00']`.
Check that the `treatment_cost` values are non-negative and do not exceed $100,000.
Ensure the `appointment_date` column contains dates that are in the past or today, and none are future dates.
Validate that the `blood_pressure` readings are within the range of 90/60 to 180/120.
Confirm that the `medication_dosage` column contains values in the set `['5mg', '10mg', '20mg']`.
Ensure the `length_of_stay` column contains integer values that are greater than or equal to 1.
Check that the `cholesterol_level` values have a mean between 150 and 200 and a standard deviation less than 50.
Verify that the `patient_gender` column only includes values from the set `['Male', 'Female', 'Other']`.
Ensure the `weight` column values are arranged in decreasing order for the list of patients.
Check that the `student_grade` values are between 0 and 100.
Ensure the `course_code` column contains only distinct values from the set `['MATH101', 'ENG202', 'SCI303']`.
Validate that the `attendance_percentage` values are within the range of 0% to 100%.
Confirm that the `enrollment_date` column contains dates that are all before the current academic year.
Ensure the `final_grade` column has a median value of at least 75.
Verify that the `student_id` column contains unique values that match the provided set of IDs.
Check that the `homework_score` values are integers that are greater than or equal to 0.
Ensure the `class_size` column has a mean that does not exceed 30 students.
Validate that the `course_duration` column contains values that are within the range of 4 to 16 weeks.
Confirm that the `subject` column includes values from the defined set `['Mathematics', 'Science', 'Literature']`.
Ensure the `login_frequency` column values are integers that are at least 1 and do not exceed 365.
Check that the `module_completion_rate` values are percentages between 0% and 100%.
Validate that the `user_role` column contains only distinct values from the set `['Admin', 'Instructor', 'Student']`.
Confirm that the `quiz_score` column has a standard deviation that is less than 15.
Ensure the `course_feedback` column contains only the values from the set `['Excellent', 'Good', 'Average', 'Poor']`.
For the `consumption` column, ensure all values are within the range of [0, 100000] kWh and are arranged in increasing order.
For the `meter_reading_date` column, ensure all entries are unique and fall within the last 12 months.
Ensure the `utility_type` column contains only values from the set `['Electricity', 'Water', 'Gas']`.
For fields `peak_demand` and `off_peak_demand`, ensure that `peak_demand` is always greater than `off_peak_demand` for each record.
For the `customer_id` column, ensure all values are unique and exist in the `customers` table.
Ensure the `policy_start_date` and `policy_end_date` columns are unique and that `policy_end_date` is greater than `policy_start_date`.
For the `premium_amount` column, ensure all values are within the range of [100, 10000] and that they are arranged in decreasing order.
For the `claim_status` column, ensure values are from the set `['Pending', 'Approved', 'Rejected']`.
For fields `insured_value` and `premium_amount`, ensure that `insured_value` is always greater than `premium_amount`.
Ensure that the combination of `policy_number` and `customer_id` is unique across all records.
For the `stock_quantity` column, ensure all values are greater than or equal to 0 and that they are arranged in increasing order.
For the `product_category` column, ensure values must exist in the set `['Electronics', 'Clothing', 'Home & Garden']`.
Ensure that the `purchase_date` column contains only dates within the last 30 days and that all entries are unique.
For fields `unit_price` and `quantity`, ensure that the total value calculated as `unit_price * quantity` matches the `total_price` column.
For the `supplier_id` column, ensure all values are unique and must exist in the `suppliers` table.
For the `transaction_amount` column, ensure all values are within the range of [0.01, 100000] and sorted in decreasing order.
For the `wallet_address` column, ensure that all values are unique and conform to the valid address format.
Ensure the `transaction_status` column only contains values from the set `['Pending', 'Completed', 'Failed']`.
For fields `block_number` and `transaction_fee`, ensure that `transaction_fee` is always less than or equal to a fixed percentage of the `block_number` value.
For the `user_id` and `transaction_id` combination, ensure that it is unique across all records.
For the `date_of_transaction` column, ensure all dates are within the last year and that they are sorted in increasing order.
Ensure the `location` column contains only values from the set `['North', 'South', 'East', 'West']`.
For fields `start_time` and `end_time`, ensure that `end_time` is always greater than `start_time` for each record.
For the `item_code` column, ensure that each value is unique and exists in the `item_master` table.
For the `customer_feedback_score` column, ensure all values are within the range of [1, 5] and that they are arranged in increasing order.
For field 'voter_id': Ensure the field matches the type 'integer'. Ensure values in (voter_id) are unique and fall within the range of 100000 to 999999. Ensure this field exists.
For field 'election_date': Ensure the field matches the type 'date'. Ensure values in (election_date) are not in the past and follow the format 'YYYY-MM-DD'. Ensure this field exists.
For field 'state_code': Ensure the field matches the type 'text'. Ensure values in (state_code) must exist in the set ['CA', 'TX', 'NY', 'FL', 'IL']. Ensure this field exists.
For field 'candidate_votes': Ensure the field matches the type 'integer'. Ensure values in (candidate_votes) are greater than or equal to 0. Ensure this field exists.
For field 'polling_location': Confirm that the field is required (not null). Ensure values in (polling_location) must exist in the set of valid locations.
For field 'student_id': Ensure the field matches the type 'integer'. Ensure values in (student_id) are unique and fall within the range of 1000 to 9999. Ensure this field exists.
For field 'course_code': Ensure the field matches the type 'text'. Ensure values in (course_code) must exist in the set ['CS101', 'MATH201', 'ENG202']. Ensure this field exists.
For field 'enrollment_date': Ensure the field matches the type 'date'. Ensure values in (enrollment_date) are within the last year and follow the format 'YYYY-MM-DD'. Ensure this field exists.
For field 'grade': Ensure the field matches the type 'decimal'. Ensure values in (grade) fall within the range of 0.0 to 4.0. Ensure this field exists.
For field 'assignment_submission': Confirm that the field is required (not null). Ensure the format in (assignment_submission) meets the specified regular expression for valid file types.
For field 'email_address': Ensure the field matches the type 'text'. Ensure values in (email_address) conform to the standard email format and are unique. Ensure this field exists.
For field 'message_length': Ensure the field matches the type 'integer'. Ensure values in (message_length) are greater than 0 and do not exceed 500. Ensure this field exists.
For field 'attachment_size': Ensure the field matches the type 'integer'. Ensure values in (attachment_size) are within the range of 0 to 10485760 bytes (10 MB). Ensure this field exists.
For field 'sent_time': Ensure the field matches the type 'timestamp'. Ensure values in (sent_time) are not in the future and follow the format 'YYYY-MM-DD HH:MM:SS'. Ensure this field exists.
For field 'email_status': Ensure the field matches the type 'text'. Ensure values in (email_status) must exist in the set ['sent', 'draft', 'failed']. Ensure this field exists.
For field 'post_id': Ensure the field matches the type 'integer'. Ensure values in (post_id) are unique and fall within the range of 1 to 100000. Ensure this field exists.
For field 'category': Ensure the field matches the type 'text'. Ensure values in (category) must exist in the set ['blog', 'news', 'tutorial', 'review']. Ensure this field exists.
For field 'publish_date': Ensure the field matches the type 'date'. Ensure values in (publish_date) are not in the future and follow the format 'YYYY-MM-DD'. Ensure this field exists.
For field 'content_length': Ensure the field matches the type 'integer'. Ensure values in (content_length) are greater than 0 and do not exceed 50000 characters. Ensure this field exists.
For field 'tags': Confirm that the field is required (not null). Ensure values in (tags) are distinct and do not exceed 5 entries.
For field 'user_id': Ensure the field matches the type 'integer'. Ensure values in (user_id) are unique and fall within the range of 10000 to 99999. Ensure this field exists.
For field 'video_id': Ensure the field matches the type 'text'. Ensure values in (video_id) must exist in the set of valid identifiers. Ensure this field exists.
For field 'duration': Ensure the field matches the type 'integer'. Ensure values in (duration) are greater than 0 and within the range of 1 to 7200 seconds. Ensure this field exists.
For field 'view_count': Ensure the field matches the type 'integer'. Ensure values in (view_count) are greater than or equal to 0. Ensure this field exists.
For field 'release_date': Ensure the field matches the type 'date'. Ensure values in (release_date) are not in the future and follow the format 'YYYY-MM-DD'. Ensure this field exists.
For field 'supplier_id': Ensure the field matches the type 'text'. Validate that the length of values in (supplier_id) is exactly 10 characters. Ensure this field exists.
For field 'delivery_date': Ensure the field matches the type 'datetime'. Validate that all values conform to the format 'YYYY-MM-DD' and are in the future. Ensure this field exists.
For field 'product_code': Ensure the field matches the type 'text'. Validate that values in (product_code) do not match any patterns from the list ['^TEST.*$', '^DEMO.*$']. Ensure this field exists.
For field 'order_quantity': Ensure the field matches the type 'integer'. Validate that all values are greater than zero and do not contain any special characters.
For field 'shipment_status': Ensure the field matches the type 'text'. Validate that values in (shipment_status) must exist in the predefined status list ['Pending', 'Shipped', 'Delivered', 'Cancelled']. Ensure this field exists.
For field 'email_address': Ensure the field matches the type 'text'. Validate that all values conform to the email pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'. Ensure this field exists.
For field 'customer_since': Ensure the field matches the type 'datetime'. Validate that all values match the format 'YYYY-MM-DD' and are not future dates. Ensure this field exists.
For field 'phone_number': Ensure the field matches the type 'text'. Validate that values in (phone_number) must match the pattern '^[0-9]{10}$'. Ensure this field exists.
For field 'customer_feedback': Ensure the field matches the type 'text'. Validate that the length of values in (customer_feedback) falls within the range of 10 to 500 characters. Ensure this field exists.
For field 'account_status': Ensure the field matches the type 'text'. Validate that values in (account_status) must exist in the list ['Active', 'Inactive', 'Suspended']. Ensure this field exists.
For field 'tracking_number': Ensure the field matches the type 'text'. Validate that the length of values in (tracking_number) is exactly 12 characters and does not contain any special characters.
For field 'departure_time': Ensure the field matches the type 'datetime'. Validate that all values conform to the format 'YYYY-MM-DD HH:MM' and are not in the past. Ensure this field exists.
For field 'vehicle_id': Ensure the field matches the type 'text'. Validate that values in (vehicle_id) do not match any patterns from the list ['^OLD.*$', '^RENTAL.*$']. Ensure this field exists.
For field 'cargo_weight': Ensure the field matches the type 'float'. Validate that all values are greater than zero and formatted correctly with two decimal places.
For field 'route_status': Ensure the field matches the type 'text'. Validate that values in (route_status) must exist in the predefined list ['In Transit', 'Delivered', 'Delayed', 'Cancelled']. Ensure this field exists.
For field 'product_name': Ensure the field matches the type 'text'. Validate that the length of values in (product_name) falls within the range of 1 to 150 characters. Ensure this field exists.
For field 'stock_quantity': Ensure the field matches the type 'integer'. Validate that all values are non-negative integers and do not contain any special characters.
For field 'price': Ensure the field matches the type 'float'. Validate that all values are greater than zero and formatted correctly with two decimal places.
For field 'restock_date': Ensure the field matches the type 'datetime'. Validate that all values match the format 'YYYY-MM-DD' and are in the future. Ensure this field exists.
For field 'category_id': Ensure the field matches the type 'text'. Validate that values in (category_id) must exist in categories (category_name). Ensure this field exists.
For field 'booking_reference': Ensure the field matches the type 'text'. Validate that the length of values in (booking_reference) is exactly 8 characters and does not contain any special characters.
For field 'check_in_date': Ensure the field matches the type 'datetime'. Validate that all values conform to the format 'YYYY-MM-DD' and are not in the past. Ensure this field exists.
For field 'customer_review': Ensure the field matches the type 'text'. Validate that the length of values in (customer_review) falls within the range of 10 to 300 characters. Ensure this field exists.
For field 'room_number': Ensure the field matches the type 'text'. Validate that values in (room_number) match the pattern '^[A-Z][0-9]{3}$'. Ensure this field exists.
For field 'payment_status': Ensure the field matches the type 'text'. Validate that values in (payment_status) must exist in the predefined list ['Pending', 'Completed', 'Failed']. Ensure this field exists.
Verify that the `sku` column contains string values of exactly 8 characters in length and conforms to the pattern `^[A-Z0-9]{8}$`.
Ensure that the `supplier_id` column contains only distinct string values matching the pattern `^SUP-[0-9]{4}$`.
For the `delivery_date` field, ensure that all entries conform to the date format `YYYY-MM-DD` and do not contain any future dates.
Validate that the `product_category` column contains only unique values from the predefined list: `['Electronics', 'Clothing', 'Grocery']`.
Ensure that the `order_status` field does not include any values outside the allowed set: `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.
Check that the `unit_price` column has a mean value greater than or equal to 10 and less than or equal to 1000.
For the `inventory_count` field, validate that its minimum value is not less than 0 and that the standard deviation does not exceed 50.
Confirm that the `location_code` column consists of strings matching the regex pattern `^[A-Z]{3}-[0-9]{3}$`.
Ensure the `order_quantity` field contains only integer values and that the unique count of values is at least 5.
Validate that the `shipping_cost` column has a maximum value of 50 and that at least 75% of entries are below 30.
Ensure that the `game_id` column contains string values matching the pattern `^GAME-[0-9]{6}$` with no duplicates.
For the `release_date` field, confirm that all entries are formatted as `YYYY-MM-DD` and are not in the future.
Validate that the `user_rating` column has a mean value between 1 and 5 and that the most common rating is `5`.
Check that the `platform` column contains only distinct values from the set: `['PC', 'PlayStation', 'Xbox', 'Nintendo']`.
Ensure the `genre` column does not match any of the following patterns: `['Horror', 'Adult', 'Violent']`.
For the `download_size` field, validate that its maximum value does not exceed 50 GB and that the standard deviation is below 10 GB.
Confirm that the `developer_name` column contains string values of length between 5 and 30 characters.
Ensure that the `in_game_purchase` column contains only boolean values (true/false) and that at least 60% of entries are true.
Validate that the `release_year` column contains integers within the range of 2000 to 2023.
Check that the `game_name` field does not contain any special characters and that all values are at least 3 characters long.
Ensure that the `student_id` column contains unique string values following the pattern `^STU-[0-9]{5}$`.
For the `course_code` field, validate that all entries are formatted as `^COURSE-[A-Z]{3}-[0-9]{3}$`.
Confirm that the `enrollment_date` column contains only valid dates and that no entry is dated after the current date.
Validate that the `grade` column has a mean value between 0 and 100, with at least 80% of entries above 50.
Check that the `feedback` column contains string values of at least 10 characters and does not match any of the following patterns: `['spam', 'offensive']`.
For the `patient_id` field: Ensure the field matches the type 'integer'. Validate that all values are positive integers, with a maximum length of 10 digits.
For the `email` column: Ensure all entries conform to the pattern `^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$`. Validate that this field does not contain any null values.
For the `diagnosis_code` column: Ensure that the values match the standard ICD-10 format. Validate that entries do not exceed 7 characters in length and do not contain any special characters.
For the `date_of_birth` field: Validate that the entries are formatted as `YYYY-MM-DD`. Ensure values fall within a reasonable range indicating valid human ages (e.g., 1900-2023).
For the `phone_number` field: Ensure that values match the pattern `^\+?[1-9]\d{1,14}$`. Validate that all entries are exactly 10 digits long for domestic numbers.
For the `employee_id` column: Ensure that all values are unique and follow the pattern `EMP-\d{5}`. Validate that there are no null entries.
For the `hire_date` field: Ensure that the format is `YYYY-MM-DD` and that all dates are within the last 20 years. Validate that no hire dates are in the future.
For the `email` column: Ensure it matches the regex `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`. Validate that the field does not contain duplicate entries.
For the `salary` field: Validate that all entries are non-negative integers. Ensure the average salary does not exceed $200,000.
For the `department_code` column: Ensure all entries match the pattern `^[A-Z]{3}-\d{3}$`. Validate that this field does not contain any null values.
For the `citizen_id` column: Ensure values match the pattern `^[0-9]{12}$`. Validate that no entries are null and all are unique.
For the `service_request_date` field: Ensure that values are formatted as `DD/MM/YYYY` and validate that no future dates are present.
For the `zipcode` field: Validate that it matches the pattern `^\d{5}(-\d{4})?$`. Ensure the distribution of zip codes adheres to the expected geographical distribution.
For the `complaint_description` field: Validate that string lengths do not exceed 500 characters and do not contain any offensive language as defined by the regex `(?:badword1|badword2|badword3)`.
For the `status` column: Ensure the values belong to the set `['Open', 'In Progress', 'Closed']`. Validate that there are no entries that do not conform to these statuses.
For the `video_id` field: Ensure it matches the pattern `^[a-zA-Z0-9]{11}$`. Validate that all entries are unique.
For the `genre` column: Validate that values belong to the list `['Action', 'Comedy', 'Drama', 'Documentary']`. Ensure there are no null entries.
For the `upload_date` field: Ensure the format is `YYYY-MM-DD` and that all dates are within the last 5 years. Validate that no uploads have future dates.
For the `user_rating` field: Ensure that values are between 1 and 5, inclusive. Validate that the average rating does not exceed 4.5.
For the `title` field: Validate that string lengths are between 1 and 100 characters and do not contain any special characters except for hyphens and apostrophes.
For the `course_code` column: Ensure values match the pattern `^[A-Z]{3}-\d{3}$`. Validate that there are no duplicate entries.
For the `enrollment_date` field: Ensure values are in the `MM/DD/YYYY` format and that all dates are within the current academic year. Validate that no future dates are present.
For the `student_email` column: Ensure that all entries match the regex `^[\w-\.]+@([\w-]+\.)+edu$`. Validate that there are no null values.
For the `grade` field: Ensure all entries are numerical values between 0 and 100. Validate that the average grade does not drop below 50.
For the `feedback` column: Validate that string lengths do not exceed 250 characters and that entries do not contain any words from the restricted list defined by the regex `(?:badword1|badword2)`.
Ensure the `sensor_reading_timestamp` column matches the strftime format '%Y-%m-%d %H:%M:%S' and all values can be parsed using dateutil.
Ensure the `temperature` column contains values with a mean between 15 and 25 degrees Celsius and a maximum value not exceeding 30 degrees Celsius.
For field `device_status`: Ensure the field contains only distinct values matching `['active', 'inactive', 'malfunction']`.
Ensure the `battery_level` column values are between 0 and 100, and the standard deviation does not exceed 10.
Ensure the `data_payload` column contains valid JSON objects conforming to the schema `{ 'data': 'string', 'timestamp': 'string' }`.
Ensure the `meter_reading_timestamp` column matches the strftime format '%Y-%m-%d %H:%M:%S' and can be parsed using dateutil.
Ensure the `energy_consumption` column has a sum that falls within the range of 1000 to 5000 kWh for the reporting period.
For field `utility_type`: Ensure the field contains only distinct values matching `['electricity', 'water', 'gas']`.
Ensure the `cost_per_kWh` column contains values that have a mean between 0.10 and 0.15, with a maximum value not exceeding 0.20.
Ensure the `billing_details` column contains valid JSON objects conforming to the schema `{ 'amount': 'number', 'due_date': 'string' }`.
Ensure the `forecast_timestamp` column matches the strftime format '%Y-%m-%d %H:%M:%S' and all values can be parsed using dateutil.
Ensure the `precipitation` column values have a standard deviation not exceeding 5 mm and a maximum value of 50 mm.
For field `weather_condition`: Ensure the field contains only distinct values matching `['sunny', 'cloudy', 'rainy', 'stormy']`.
Ensure the `temperature` column values are between -30 and 50 degrees Celsius, and the mean is within the range of 10 to 30 degrees Celsius.
Ensure the `forecast_data` column contains valid JSON objects conforming to the schema `{ 'temperature': 'number', 'condition': 'string' }`.
Ensure the `call_timestamp` column matches the strftime format '%Y-%m-%d %H:%M:%S' and can be parsed using dateutil.
Ensure the `call_duration` column values have a mean between 60 and 180 seconds, with a maximum value not exceeding 600 seconds.
For field `call_type`: Ensure the field contains only distinct values matching `['incoming', 'outgoing', 'missed']`.
Ensure the `data_usage` column contains values between 0 and 5000 MB, with a standard deviation not exceeding 1000 MB.
Ensure the `call_details` column contains valid JSON objects conforming to the schema `{ 'caller': 'string', 'duration': 'number' }`.
Ensure the `transaction_timestamp` column matches the strftime format '%Y-%m-%d %H:%M:%S' and all values can be parsed using dateutil.
Ensure the `transaction_amount` column has a sum that falls within the range of 1000 to 100000 dollars for the reporting period.
For field `transaction_type`: Ensure the field contains only distinct values matching `['credit', 'debit', 'refund']`.
Ensure the `risk_score` column values are between 0 and 100, and the mean is not less than 50.
Ensure the `transaction_data` column contains valid JSON objects conforming to the schema `{ 'amount': 'number', 'location': 'string' }`.
For the `departure_time` field: Ensure that all datetime values match the format '%Y-%m-%d %H:%M:%S'. Validate that `arrival_time` is always greater than `departure_time`.
Check that the `vehicle_id` is unique across all records. Ensure that the `status` field contains only values from the set ['Active', 'Inactive', 'Under Maintenance'].
For the `shipment_date` field: Validate that all datetime strings can be parsed using dateutil. Ensure that `delivery_date` is always greater than `shipment_date`.
For the `route` field: Ensure it adheres to a valid JSON schema defining properties such as 'origin' and 'destination'. Validate that both properties exist.
Verify that the `total_weight` is greater than zero and that the sum of `weight_loaded` and `weight_empty` equals `total_weight` for each record.
For the `delivery_status` column: Ensure values are either 'Pending', 'Completed', or 'Cancelled'. Validate that the `expected_delivery` datetime is after the `order_date`.
Check that `tracking_number` is unique across all records and adheres to the specified format of 10 alphanumeric characters.
For the `pickup_time` field: Validate that all datetime values follow the format '%Y-%m-%d %H:%M:%S'. The `pickup_time` must precede `delivery_time`.
For the `incident_time` field: Ensure that all datetime strings can be parsed using dateutil. Validate that `resolution_time` is always greater than `incident_time`.
Check that the `alert_type` field contains only distinct values from the set ['Malware', 'Phishing', 'DDoS', 'Data Breach']. Ensure this field is always populated.
Validate that the `source_ip` field contains valid IP addresses and that the `destination_ip` field adheres to the same validation rules.
For the `threat_details` field: Ensure it is a valid JSON object and contains properties such as 'severity' and 'description'. Validate that both properties exist.
Ensure that for each record, the `risk_level` field must be greater than or equal to the `impact_score` field.
Check that the `response_time` is a positive integer and that the sum of `detection_time` and `response_time` equals `total_time`.
For the `user_id` field: Ensure it is unique across records and corresponds to valid entries in the `users` table.
For the `incident_reported` field: Validate that all datetime strings match the format '%Y-%m-%d'. Ensure `incident_resolved` is always greater than `incident_reported`.
Check that `service_request_id` is unique and that it follows the specified alphanumeric format of 12 characters.
For the `citizen_complaint` field: Ensure it is a valid JSON object conforming to a predefined schema, including properties like 'complaint_type' and 'details'. Validate the existence of both properties.
Ensure that the `case_status` field only contains values from the set ['Open', 'In Progress', 'Closed']. Validate that the `closure_date` is later than `case_open_date`.
Check that the `budget_allocation` is a positive number and that the sum of `project_costs` must equal `budget_allocation` for each project.
For the `report_date` field: Validate that all datetime values can be parsed using dateutil. The `report_date` must be before the `review_date`.
Ensure that the `department_id` is unique across records and corresponds to valid entries in the `departments` table.
Validate that the `service_type` field contains only distinct values from the set ['Healthcare', 'Education', 'Public Safety']. Ensure this field is always populated.
For the `incident_type` field: Ensure its values match a specific JSON schema defining properties such as 'description' and 'date_reported'. Validate both properties exist.
Check that the `request_status` field contains only values from the set ['Pending', 'Approved', 'Rejected'] and that `review_date` is always after `request_date`.
Ensure the mean of the `response_time` column is between 1.5 and 3.0 seconds.
Verify that the `participant_age` column contains unique values with a minimum count of 100 distinct ages.
Ensure the sum of the `budget` and `expenses` columns equals the value in the `total_funding` column for each record.
Validate that the maximum value in the `experiment_duration` column does not exceed 365 days.
Check that the `publication_year` column values fall within the range of 2000 to 2023, inclusive.
Ensure the proportion of unique values in the `study_type` column is at least 75%.
Validate that the `sample_size` column is greater than or equal to the `minimum_sample_size` column for all records.
Ensure the standard deviation of the `results_score` column is below 15 to confirm consistent results across experiments.
Verify that the median value of the `data_points` column is at least 50 to reflect sufficient data collection.
Ensure that the `gender` column only contains values from the set `['Male', 'Female', 'Other']`.
Ensure the maximum value in the `transaction_fee` column does not exceed 0.01 ETH for any transaction.
Check that the sum of the `amount_sent` and `amount_received` columns equals the value in the `total_balance` column.
Validate that the `block_number` column contains distinct values that fall within the range of 1 to 1000000.
Ensure the `transaction_timestamp` values in the `block_time` column are unique across records.
Verify that the average `gas_price` in the `gas_fees` column is between 20 and 80 Gwei.
Ensure that the `currency_type` column includes only values from the set `['BTC', 'ETH', 'LTC']`.
Check that the value in the `withdrawal_amount` column is less than or equal to the value in the `available_balance` column for each user.
Validate that the proportion of unique `wallet_address` values in the `transactions` table is at least 90%.
Ensure the `transaction_status` column contains values only from the set `['Pending', 'Completed', 'Failed']`.
Verify that the average transaction volume in the `transaction_volume` column is greater than 5 ETH.
Ensure the mean value in the `order_total` column is between $20 and $500.
Check that the `product_category` column contains distinct values that match the set `['Electronics', 'Clothing', 'Home']`.
Validate that the sum of the `item_price` and `shipping_cost` columns equals the `final_order_amount` for each transaction.
Ensure the `customer_rating` column has a standard deviation below 1.5 to reflect consistent customer feedback.
Verify that the `purchase_date` values in the `order_history` table fall within the last 12 months.
Ensure the `customer_age` column has a mean value between 25 and 50 years and a standard deviation not exceeding 10 years.
Verify that the `email` column contains valid email formats and that the unique value count is greater than 1000.
Ensure the `purchase_amount` column values are between $10 and $5000, with a median value above $100.
For field 'customer_id': Ensure this field matches the type 'string'. Ensure the distinct values include `['CUST_001', 'CUST_002', 'CUST_003']`.
Confirm that the `loyalty_points` column sums to a value greater than or equal to 10000 and that the minimum value is not less than 0.
Ensure the `case_priority` column contains only values from the set `['High', 'Medium', 'Low']`.
Verify that the `case_duration_days` column has a maximum value not exceeding 365 days and that the average is at least 30 days.
For field 'filing_date': Ensure this field exists and contains valid date formats. Ensure the dates are in the past.
Ensure the `case_status` column has a distinct count of at least 5 unique statuses and that 'Open' is included.
Confirm that the `legal_fees` column has a sum not exceeding $100,000 and that the standard deviation is below $15,000.
Ensure the `account_balance` column's minimum value is not less than $0 and the mean balance is above $1000.
Verify that the `transaction_date` column contains only valid dates and that all dates are within the current year.
For field 'interest_rate': Ensure this field matches the type 'decimal'. Ensure it falls within the range of 0% to 20%.
Confirm that the `loan_amount` column has a maximum value less than or equal to $1,000,000 and that the sum of all loans exceeds $5,000,000.
Ensure the `customer_id` column is unique with no duplicates and matches the defined set of existing customer IDs.
Ensure the `room_price` column has a median value between $50 and $300 and that no prices exceed $1000.
Verify that the `check_in_date` field contains valid dates and that all dates are in the future.
For field 'guest_count': Ensure this field matches the type 'integer'. Ensure values are greater than or equal to 1.
Confirm that the `booking_status` column contains only values from the set `['Confirmed', 'Pending', 'Cancelled']`.
Ensure the `loyalty_program` column has a unique count of values that matches or exceeds the specified set `['Silver', 'Gold', 'Platinum']`.
Ensure the `watch_time` column has a maximum value not exceeding 24 hours and an average watch time greater than 2 hours.
Verify that the `subscription_type` column contains valid types limited to `['Free', 'Basic', 'Premium']`.
For field 'user_feedback_score': Ensure this field matches the type 'integer'. Ensure scores are between 1 and 10.
Confirm that the `video_quality` column has a distinct value count that includes `['SD', 'HD', '4K']`.
Ensure the `view_count` column has a sum greater than 100,000 and that the minimum value is not less than 0.
Ensure the `billing_amount` column values follow a normal distribution with a p-value greater than 0.05 in the Kolmogorov-Smirnov test.
Ensure the sum of the `consumption` and `production` columns equals the `net_usage` for each record.
Verify that the `contract_start_date` is always earlier than the `contract_end_date` for each record.
Ensure the `meter_reading` column values are within the expected range of 0 to 1000 for all entries.
Ensure the KL divergence between `peak_usage` and `off_peak_usage` distributions is below 0.1.
Ensure the `patient_age` column has a mean value greater than 30 and less than 80.
Verify that the `treatment_cost` column has no outliers beyond 1.5 times the interquartile range.
Ensure the combination of `patient_id` and `visit_date` is unique across records.
Check that the values in the `blood_pressure_systolic` column are consistently greater than those in the `blood_pressure_diastolic` column.
Ensure the `diagnosis_code` column adheres to the expected categorical distribution with p-values above 0.05 in the Chi-Square test.
Ensure that the `transaction_amount` column values follow a Poisson distribution with a p-value greater than 0.05.
Verify that the combination of `user_id` and `transaction_date` remains unique across the dataset.
Ensure the `fraud_indicator` column is binary with only values of 0 or 1, and represents distinct counts of fraud cases.
Check that the `transaction_amount` is less than or equal to the `account_balance` for each record.
Ensure the Cramér's Phi between `transaction_type` and `fraud_indicator` is below 0.1.
Ensure the `student_score` column has a median value between 60 and 90.
Verify that the `enrollment_date` is always before the `completion_date` for each course entry.
Ensure the `course_category` column contains only distinct values matching `['Science', 'Arts', 'Commerce']`.
Check that the sum of the `attendance_days` and `absent_days` equals the `total_days` for each student record.
Ensure that the distribution of grades in the `final_exam_score` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Verify that the `post_length` column has a standard deviation between 50 and 200.
Ensure the `author_id` and `post_id` combination remains unique across the database.
Check that the `publish_date` is greater than the `creation_date` for all content entries.
Ensure that the `category` column values exist within the predefined set of `['Blog', 'News', 'Review']`.
Ensure the KL divergence between the `views` and `likes` distributions is below 0.05.
Ensure the `player_id` column contains only distinct values and matches the expected range of player identifiers.
Verify that the `points_scored` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05, indicating a normal distribution.
For the `team_name` field: Ensure the field is required (not null) and that it contains only values from the predefined list of teams.
Check the `game_date` column to confirm all dates fall within the current season's schedule and are formatted as YYYY-MM-DD.
Validate that the `player_age` column has a mean value between 20 and 35 years, ensuring consistency with the age range of active players.
Ensure the `temperature` column values are within a valid range of -50 to 50 degrees Celsius.
Check that the `precipitation` column passes the Chi-Square test with a p-value greater than 0.05, confirming expected distribution patterns.
For the `forecast_date` field: Ensure it is formatted correctly as YYYY-MM-DD and contains no null values.
Validate that the total count of records in the weather data file does not exceed 100,000 lines, ensuring manageable file size.
Ensure the `humidity` column's standard deviation is below 15%, indicating consistent moisture levels across observations.
Ensure the `student_id` column contains unique identifiers, with no duplicates or missing values.
Verify that the `grades` column distribution passes the KS test, with a p-value greater than 0.05 for normality.
For the `course_title` field: Ensure it matches the type 'text' and that it contains no special characters.
Check the `enrollment_date` column to confirm all entries are in the correct date format (YYYY-MM-DD) and fall within the current academic year.
Validate that the `attendance_rate` column values are between 0 and 100, ensuring valid percentage representation.
Ensure the `research_topic` field is required (not null) and matches the type 'text' with no special characters.
Verify that the `sample_size` column has a mean value greater than 30 to ensure statistical relevance.
For the `data_source` column: Ensure all entries are valid URLs and that the column contains no null values.
Check that the `publication_year` column contains only entries within the last 20 years, ensuring relevancy of research.
Validate that the `confidence_interval` column values are within the range of 0.01 to 0.99, indicating proper statistical reporting.
Ensure the `product_id` column contains unique identifiers, with no duplicates present.
Verify that the `price` column values pass the Chi-Square test with a p-value greater than 0.05, indicating conformity to expected pricing models.
For the `category` field: Ensure it matches the type 'text' and that it contains only values from the predefined list of product categories.
Check that the `inventory_count` column does not contain negative values, ensuring valid stock levels.
Validate that the `order_date` column is formatted as YYYY-MM-DD and contains no null values, ensuring accurate order tracking.
Verify that the `sensor_id` column contains unique values across all records, ensuring that each sensor's data is represented only once.
Check that the `timestamp` column values are sequential and do not contain any duplicates to maintain data integrity.
Ensure that the `temperature` readings in the `sensor_data` column are all greater than the minimum threshold of -30°C.
For the `battery_level` column, confirm that all values are less than or equal to 100% and greater than or equal to 0%.
Validate that the sum of `data_points` for each `device_id` equals the expected total of active readings for that device.
Verify that the `location_id` in the `device_data` column exists in the predefined `location` set.
Check that each `device_id` has a corresponding `device_type` entry, ensuring that no device is unclassified.
Ensure that the `price` column contains only positive values and that the `discount` column does not exceed the `price` values.
For the `order_date` and `shipping_date` columns, confirm that `shipping_date` is always greater than or equal to `order_date`.
Validate that every `product_id` is unique within the `product_inventory` table and that it matches an entry in the `order_details` table.
Ensure that the `category_id` corresponds with valid entries in the `categories` table, maintaining referential integrity.
Check that the cumulative `item_quantity` for each `order_id` does not exceed 100 items to prevent oversized orders.
For the `customer_id` column, verify that each ID corresponds to a valid entry in the `customers` database.
Ensure that the values in the `payment_status` column are restricted to `['Paid', 'Pending', 'Failed']`.
Verify that the `player_id` column contains only unique identifiers for each athlete across all records.
Check that the `game_date` is always earlier than the `end_date` for each match entry in the `match_schedule` table.
Ensure that the combined `points` and `assists` columns for each player in a game do not exceed the maximum value of 200.
For the `team_id` column, confirm that each team is associated with a valid entry in the `teams` reference table.
Validate that the `player_age` values are within the range of 18 to 40 years for all athletes listed in the `roster`.
Ensure that the `score` column contains integer values only and that they are greater than or equal to zero.
Check that the `listing_price` is greater than or equal to the `minimum_price` for each property in the `properties` table.
Ensure that the `property_id` is unique within the `listings` and matches a valid entry in the `property_details` database.
For the `lease_start_date` and `lease_end_date`, confirm that `lease_end_date` is always later than `lease_start_date`.
Validate that the sum of `monthly_rent` across all `units` for each `property_id` matches the `total_rent` field.
Ensure that the values in the `property_type` column are restricted to `['Residential', 'Commercial', 'Industrial']` to maintain consistency.
For field `voter_id`: Ensure the field exists. Validate that all values are unique and not null.
Check `election_date`: Ensure the field exists. Validate that the date is in the format `YYYY-MM-DD` and falls within the range of the current year.
For field `candidate_name`: Ensure the field is required (not null). Validate that all values are distinct and match the type 'text'.
For table `voter_registration`: Ensure the number of rows is equal to the total number of registered voters in the system.
For field `vote_choice`: Ensure values belong to the set `['Candidate A', 'Candidate B', 'Candidate C']`. Validate that no votes are recorded for values outside this set.
For field `game_id`: Ensure the field exists. Validate that all values are unique and match the type 'integer'.
Check `release_date`: Ensure the field exists. Validate that the date is not null and is in the format `YYYY-MM-DD`.
For field `genre`: Ensure the field matches the type 'text'. Validate that values fall within the set `['Action', 'Adventure', 'Puzzle', 'RPG']`.
For table `game_reviews`: Ensure the number of rows is equal to the number of games in the `games` table.
For field `rating`: Ensure values are within the range of 1 to 10 and are not null.
For field `product_id`: Ensure the field exists. Validate that all values are unique and match the type 'integer'.
Check `delivery_date`: Ensure the field exists. Validate that the date is not null and that it is later than the `order_date`.
For field `supplier_id`: Ensure values in `supplier_id` must exist in the `suppliers` table. Validate that the field matches the type 'integer'.
For table `inventory`: Ensure the number of rows is between 50 and 500, representing all products in stock.
For field `quantity`: Ensure values are within the range of 0 to 1000 and are not null.
For field `item_code`: Ensure the field exists. Validate that all values are unique and match the type 'text'.
Check `price`: Ensure the field exists. Validate that prices are greater than 0 and are formatted correctly as decimal values.
For field `category`: Ensure the field matches the type 'text'. Validate that values must exist in the set `['Electronics', 'Clothing', 'Home Goods', 'Toys']`.
For table `sales`: Ensure the number of rows is equal to the total number of sales transactions recorded.
For field `stock_level`: Ensure values are within the range of 0 to 500 and are not null.
For field `customer_id`: Ensure the field exists. Validate that all values are unique and match the type 'integer'.
Check `email`: Ensure the field is required (not null). Validate that the email addresses are formatted correctly.
For field `status`: Ensure values in `status` must exist in the set `['Active', 'Inactive', 'Prospective']`.
For table `customer_interactions`: Ensure the number of rows is equal to the number of unique customer_ids in the `customers` table.
For field `last_purchase_date`: Ensure the field exists. Validate that the date is not null and is in the past.
For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure the values are unique across the dataset.
For field 'appointment_date': Ensure the field is required (not null). Ensure the field follows the date format 'YYYY-MM-DD'. Ensure there are no future dates present.
For field 'diagnosis_code': Ensure the field matches the type 'text'. Ensure this field exists. Ensure values conform to the pattern '^[A-Z]{1}[0-9]{2,3}$' (ICD-10 format).
For field 'medication_name': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 100 characters. Ensure values are unique.
For field 'treatment_notes': Ensure the field can be null. Ensure the field matches the type 'text'. Ensure the length does not exceed 500 characters.
For field 'temperature': Ensure the field is required (not null). Ensure the field matches the type 'float'. Ensure values are within the range of -50 to 50 degrees Celsius.
For field 'humidity_percentage': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure values are between 0 and 100.
For field 'forecast_date': Ensure the field is required (not null). Ensure the field follows the date format 'YYYY-MM-DD'. Ensure no duplicate dates exist in the dataset.
For field 'weather_condition': Ensure the field matches the type 'text'. Ensure values match one of the predefined conditions: ('Sunny', 'Rainy', 'Cloudy', 'Snowy').
For field 'wind_speed': Ensure the field can be null. Ensure the field matches the type 'float'. Ensure values are greater than or equal to 0.
For field 'game_title': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values are unique and do not exceed 150 characters.
For field 'release_date': Ensure the field is required (not null). Ensure the field follows the date format 'YYYY-MM-DD'. Ensure all dates are in the past.
For field 'game_genre': Ensure the field matches the type 'text'. Ensure this field exists. Ensure values conform to the predefined list: ('Action', 'Adventure', 'Strategy', 'RPG').
For field 'user_rating': Ensure the field is required (not null). Ensure the field matches the type 'float'. Ensure values are between 0.0 and 10.0.
For field 'platform': Ensure the field is required (not null). Ensure values match one of the patterns: ('PC', 'Xbox', 'PlayStation', 'Switch'). Ensure the values are case-sensitive.
For field 'user_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure the values are unique across the dataset.
For field 'content_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure values are unique and exist in the content library.
For field 'watch_date': Ensure the field is required (not null). Ensure the field follows the date format 'YYYY-MM-DD'. Ensure all dates are in the past.
For field 'duration_minutes': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure values are greater than 0.
For field 'subscription_plan': Ensure the field matches the type 'text'. Ensure values match one of the following: ('Free', 'Basic', 'Premium').
For field 'email_address': Ensure this field exists. Ensure the field matches the type 'text'. Validate that it conforms to the pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.
For field 'contact_number': Ensure this field exists. Ensure the field matches the type 'text'. Validate that it conforms to the pattern '^\\+?[0-9]{10,15}$' for international formats.
For field 'status': Ensure the field matches the type 'text'. Ensure values match one of the predefined statuses: ('active', 'inactive', 'suspended').
For field 'description': Ensure the field can be null. Ensure the field matches the type 'text'. Ensure the length does not exceed 250 characters.
For field 'login_timestamp': Ensure the field is required (not null). Ensure the field follows the timestamp format 'YYYY-MM-DD HH:MM:SS'. Ensure all entries are in the past.
For field 'sensor_id': Ensure the field is required (not null). Ensure it matches the type 'text'. Ensure this field exists.
For field 'temperature_reading': Ensure the field is of type 'float'. Ensure that values in this field cannot be null.
Ensure the 'device_status' column contains only distinct values that match ['active', 'inactive', 'error'].
For field 'timestamp': Ensure the field matches the correct datetime format '%Y-%m-%dT%H:%M:%S'. Ensure this field exists.
Verify that the 'location' column contains valid JSON objects conforming to the schema { 'latitude': 'number', 'longitude': 'number' }.
For field 'citizen_id': Ensure the field is required (not null). Ensure the values in this field are unique.
For field 'service_request_date': Ensure that the dates match the format '%Y-%m-%d'. Ensure this field exists.
Ensure the 'status' column contains only distinct values that match ['pending', 'completed', 'rejected'].
For field 'service_details': Ensure the field matches the type 'text'. Ensure this field can accept null values.
Verify that the 'request_metadata' column contains valid JSON objects conforming to the specified schema.
For field 'game_id': Ensure the field is required (not null). Ensure this field matches the type 'text'. Ensure values are unique.
For field 'release_date': Ensure the field matches the correct datetime format '%Y-%m-%d'. Ensure this field exists.
Ensure the 'genre' column contains only distinct values from the set ['action', 'adventure', 'puzzle'].
For field 'player_statistics': Ensure this field contains valid JSON objects conforming to the schema { 'kills': 'number', 'deaths': 'number' }.
For field 'player_id': Ensure the field is required (not null). Ensure it matches the type 'text'. Ensure values in this field are unique.
For field 'order_id': Ensure the field is required (not null). Ensure values in this field are unique.
For field 'shipment_date': Ensure that the dates match the format '%Y-%m-%d'. Ensure this field exists.
Ensure the 'supplier_name' column contains only distinct values matching the expected supplier list.
For field 'inventory_count': Ensure the field matches the type 'integer'. Ensure values in this field cannot be null.
Verify that the 'order_details' column contains valid JSON objects conforming to the specified schema.
Ensure that the row count in the 'sensor_data' table is equal to the row count in the 'device_registry' table.
For field 'user_id': Ensure the field is required (not null). Ensure values in this field are unique across the 'user_profiles' table.
Ensure the 'transaction_date' column contains values that can be parsed using dateutil for all entries.
For field 'metadata': Ensure the field contains valid JSON objects and that parsing does not raise exceptions.
Ensure the 'location_id' column in the 'supplier_data' table exists and matches the location data in the 'inventory_data' table.
Ensure the `case_id` column contains unique values and matches the type 'text'. This field must not contain null values.
For field `filing_date`: Ensure this field exists and matches the type 'date'. Ensure there are no missing values in this column.
Verify that the `status` column only contains values from the set `['Open', 'Closed', 'Pending']`. Ensure this field exists.
Check that the number of rows in the `cases` table is equal to 100. Ensure this table exists.
For the `plaintiff_id` column: Ensure values are unique and not null. Verify that this ID exists in the `clients` table.
Ensure the `defendant_id` column contains unique values and matches the type 'text'. Values must not be null.
For fields `case_type` and `court`: Ensure that the combination of these columns is unique across records.
Verify that the `hearing_date` is greater than the `filing_date` for all records. Ensure both fields exist.
Check that the `case_priority` column only contains values from the set `['High', 'Medium', 'Low']`. Ensure this field exists and has no missing values.
Ensure that the sum of the `fees` column matches the expected total of 5000 for all cases. Validate that this field exists.
For the `service_request` table, ensure that the `request_id` column contains unique values and is of type 'integer'.
Ensure that the `service_type` column only contains values from the set `['Repair', 'Inspection', 'Consultation']`. Validate that this column exists.
Verify that the count of rows in the `citizen_complaints` table is between 50 and 200. Ensure this table exists.
For the `complaint_date` field: Ensure the field matches the type 'date' and contains no missing values.
Check that the `resolution_time` in days is greater than zero for all records. Ensure this field exists.
Ensure the `citizen_id` column is unique and matches the type 'text'. Values must not be null.
For fields `category` and `status`: Ensure that the combination of these columns is unique across records.
Verify that the `priority` column only contains values from the set `['High', 'Normal', 'Low']`. Ensure this field exists.
Ensure that the `assigned_officer_id` exists in the `officers` table. Validate that this field contains no null values.
Check that the sum of `expenditures` matches the expected total of 100000 for all service requests. Validate that this field exists.
Ensure the `user_id` column contains unique values and matches the type 'text'. This field must not contain null values.
For the `post_date`: Ensure this field exists and matches the type 'datetime'. Ensure there are no missing values in this column.
Verify that the `post_type` column only contains values from the set `['Image', 'Video', 'Text']`. Ensure this field exists.
Check that the number of rows in the `comments` table is equal to 1500. Ensure this table exists.
For the `likes` and `shares` columns: Ensure that the sum of these two columns matches the expected total engagement for each post. Validate that both fields exist.
Ensure the `shipment_id` column contains unique values and matches the type 'text'. This field must not contain null values.
For the `departure_date`: Ensure this field exists and matches the type 'date'. Ensure there are no missing values in this column.
Verify that the `status` column only contains values from the set `['In Transit', 'Delivered', 'Pending']`. Ensure this field exists.
Check that the number of rows in the `deliveries` table is between 200 and 500. Ensure this table exists.
For the `origin` and `destination` fields: Ensure that the combination of these columns is unique across records.
Ensure that the `weight` column contains only positive values. Validate that this field exists and has no null values.
Verify that the `delivery_date` is greater than the `departure_date` for all records. Ensure both fields exist.
For the `carrier_id` column: Ensure values are unique and not null. Verify that this ID exists in the `carriers` table.
Ensure the `shipping_cost` column matches the expected type 'numeric' and contains no missing values.
Check that the sum of the `total_deliveries` matches the expected total of 1000 for all shipments. Validate that this field exists.
Ensure the `product_id` column exists and contains unique values across all rows.
Ensure the `price` column values are greater than 0 and less than or equal to 10,000.
Verify that the `category` column contains values exclusively from the set `['Electronics', 'Apparel', 'Home']`.
Ensure the `stock_quantity` column has values that are whole numbers and are greater than or equal to 0.
For the `discount_percentage`: Ensure values range from 0 to 100 and are arranged in decreasing order.
Ensure the `supplier_id` column exists and corresponds to an existing supplier in the `suppliers` table.
Ensure that the `order_date` column has values within the range of '2020-01-01' to today's date.
Verify that the `quantity_ordered` and `quantity_shipped` columns have a relationship where `quantity_shipped` is always less than or equal to `quantity_ordered`.
Ensure the `item_category` column values are from the set `['Food', 'Beverage', 'Electronics']` and are arranged alphabetically.
For `inventory_value`: Ensure it is calculated as the product of `price` and `stock_quantity`, and matches the expected value.
Ensure the `alert_id` column contains unique values for each record in the dataset.
Verify that the `threat_level` column contains values in the set `['Low', 'Medium', 'High']`.
Ensure the `timestamp` column contains valid datetime values and that all timestamps are within the last 30 days.
For `incident_type`: Ensure that it corresponds to an existing type in the `incident_types` table.
Ensure that the `source_ip` and `destination_ip` columns contain valid IP addresses and are not empty.
Ensure the `meter_reading` column has values within the range of 0 to 10,000.
Verify that the `usage_date` column contains dates that are all unique and fall within the last year.
Ensure the `energy_type` column values are from the set `['Electricity', 'Gas', 'Water']`.
For the `total_cost`: Ensure it matches the calculated sum of `usage_amount` multiplied by `rate_per_unit`.
Ensure the `customer_id` column contains only distinct values that exist in the `customers` table.
Ensure the `temperature` column values are within the range of -50 to 50 degrees Celsius.
Verify that the `precipitation` column includes values that are greater than or equal to 0 and less than or equal to 500 mm.
Ensure the `forecast_date` column has unique values and is in the future relative to today's date.
For `humidity`: Ensure values are within the range of 0 to 100 and are arranged in increasing order.
Ensure the `weather_condition` column contains values from the set `['Clear', 'Cloudy', 'Rain', 'Snow']` and matches predefined conditions in the `conditions` table.
For field 'shipment_id': Ensure the field exists. Validate that shipment_id is a string of exactly 10 characters long and does not match any SQL-like patterns from the specified list.
For field 'departure_date': Ensure this field exists and matches the format '%Y-%m-%d'. Validate that all dates in (departure_date) are in the future.
For field 'destination_zip': Ensure the field exists. Validate that all values in (destination_zip) match the regex pattern '^\d{5}(-\d{4})?$' for US ZIP codes.
For table 'cargo_details': Ensure the number of rows is between 1 and 100. Validate that columns (cargo_type, weight, dimensions) exist and are correctly populated.
For field 'vehicle_registration': Ensure this field exists. Validate that (vehicle_registration) matches the regex pattern '^[A-Z]{1,3}-\d{1,6}$' and does not contain any invalid characters.
For field 'loading_time': Ensure this field exists and matches the format '%H:%M:%S'. Validate that all values in (loading_time) are within a 24-hour range.
For field 'tracking_number': Ensure the field exists. Validate that (tracking_number) is a string of 12 characters and does not match any disallowed regex patterns.
For field 'eta': Ensure this field exists. Validate that all values in (eta) can be parsed using dateutil and are not in the past.
For table 'transportation_orders': Ensure the column (order_id) exists. Validate that the number of rows equals the row count in the associated 'customer_orders' table.
For field 'cargo_value': Ensure this field exists. Validate that all values in (cargo_value) are integers greater than zero.
For field 'account_number': Ensure the field exists. Validate that (account_number) is a string of 12 digits and does not match any SQL-like patterns from the specified list.
For field 'transaction_date': Ensure this field exists and matches the format '%Y-%m-%d'. Validate that all dates in (transaction_date) are not more than 30 days in the past.
For field 'interest_rate': Ensure this field exists. Validate that all values in (interest_rate) are decimal numbers between 0.0 and 1.0.
For table 'loan_applications': Ensure the number of rows is between 1 and 50. Validate that columns (applicant_id, loan_amount, status) exist and are correctly populated.
For field 'ssn': Ensure this field exists. Validate that (ssn) matches the regex pattern '^\d{3}-\d{2}-\d{4}$' and is unique across all records.
For field 'account_balance': Ensure this field exists. Validate that all values in (account_balance) are non-negative integers.
For field 'transaction_id': Ensure the field exists. Validate that (transaction_id) is a string of exactly 16 characters and does not match any disallowed patterns.
For field 'payment_date': Ensure this field exists and matches the format '%Y-%m-%d'. Validate that all values in (payment_date) are valid future dates.
For table 'financial_statements': Ensure the column (statement_id) exists. Validate that the number of rows equals the row count in the associated 'audit_reports' table.
For field 'currency': Ensure this field exists. Validate that all values in (currency) match the regex pattern '^[A-Z]{3}$' for ISO currency codes.
For field 'user_email': Ensure the field exists. Validate that (user_email) matches the regex pattern '^[\w\.-]+@[\w\.-]+\.\w{2,}$' and is unique across all records.
For field 'login_timestamp': Ensure this field exists and matches the format '%Y-%m-%d %H:%M:%S'. Validate that all values in (login_timestamp) are within the last 24 hours.
For field 'ip_address': Ensure this field exists. Validate that (ip_address) matches the regex pattern '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'.
For table 'suspicious_transactions': Ensure the number of rows is greater than 0. Validate that columns (transaction_id, user_id, flagged_reason) exist and are populated.
For field 'fraud_score': Ensure this field exists. Validate that all values in (fraud_score) are integers ranging from 0 to 100.
For field 'policy_number': Ensure this field exists. Validate that all values match the pattern '^[A-Z]{3}-[0-9]{6}$'.
For field 'customer_id': Ensure this field exists. Validate that the length of string values is exactly 10 characters.
For field 'claim_amount': Ensure the column contains numeric values only. Validate that the average claim amount falls within the range of $100 to $10,000.
For field 'policy_start_date': Ensure this field exists and is of type 'date'. Validate that all date values are not in the future.
For table 'claims': Ensure the number of rows is greater than or equal to 1. Validate that the field 'claim_status' contains only values from the set {'Pending', 'Approved', 'Denied'}.
For field 'research_id': Ensure all values match the pattern '^[R][0-9]{4}$'. Ensure this field exists.
For field 'data_quality_score': Validate that the maximum value does not exceed 100 and the minimum value is at least 0.
For field 'publication_date': Ensure this field exists and is of type 'date'. Validate that all publication dates are within the last 10 years.
For table 'research_data': Ensure the columns match the specified set {'research_id', 'data_quality_score', 'publication_date'} in that order.
For field 'keywords': Validate that the length of string values is between 5 and 100 characters.
For field 'user_id': Ensure this field exists. Validate that all values are 12 characters long and match the pattern '^[A-Z0-9]{12}$'.
For field 'subscription_start_date': Ensure this field exists and is of type 'date'. Validate that all dates are in the past.
For field 'watch_time': Validate that the sum of all watch times in the column does not exceed 500 hours.
For table 'subscriptions': Ensure the row count is equal to the row count in table 'active_users'.
For field 'content_rating': Ensure this field exists. Validate that the values match one of the allowed ratings: {'G', 'PG', 'PG-13', 'R'}.
For field 'employee_id': Ensure this field exists. Validate that all values match the pattern '^[E][0-9]{5}$'.
For field 'email': Validate that all email addresses conform to the pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'.
For field 'joining_date': Ensure this field exists and is of type 'date'. Validate that all joining dates are before the current date.
For table 'employees': Ensure the table contains at least 100 rows. Validate that the distinct values in 'department' field match the set {'HR', 'Finance', 'IT', 'Marketing'}.
For field 'salary': Validate that the mean salary of employees does not fall below $30,000.
For field 'status_code': Ensure this field exists. Validate that values are strictly from the set {200, 404, 500}.
For field 'description': Validate that the string length of values is between 10 and 250 characters.
For field 'phone_number': Validate that all phone numbers match the pattern '^\+?[1-9]\d{1,14}$' and ensure this field exists.
For table 'transactions': Ensure the columns match the specified set {'transaction_id', 'user_id', 'amount', 'date'} in that order.
For field 'feedback_rating': Ensure this field exists. Validate that the average rating is greater than or equal to 3 and less than or equal to 5.
Ensure the `voter_id` column contains only distinct values and matches a specified format of 10 digits.
Verify that the `election_date` column contains dates in the format 'YYYY-MM-DD' and that all dates are in the future.
Ensure the `total_votes` column has a row count equal to the number of candidates recorded in the `candidates` table.
For the `district` column: Ensure it exists and contains only values from the defined set `['District A', 'District B', 'District C']`.
Check that the `registration_timestamp` column is in the ISO 8601 format and can be parsed using dateutil.
Ensure the `post_status` column contains only distinct values matching `['draft', 'published', 'archived']`.
Verify that the `created_at` column values are in the format 'YYYY-MM-DD HH:MM:SS' and all timestamps are in the past.
Check that the `word_count` column has a mean value greater than 300 and a maximum value of 5000.
For the `author_id` column: Ensure this column exists and that all values correspond to valid entries in the `authors` table.
Ensure that the `tags` column contains valid JSON objects that conform to the specified JSON schema for tags.
Ensure the `call_duration` column has values between 0 and 3600 seconds.
Verify that the `timestamp` column contains values in the format 'YYYY-MM-DDTHH:MM:SSZ' and can be parsed with dateutil.
Check that the unique value count in the `plan_type` column matches the expected set of values `['prepaid', 'postpaid']`.
For the `billing_amount` column: Ensure the sum is less than or equal to 5000 and the average is between 50 and 200.
Ensure that the `customer_data` column contains valid JSON objects that conform to the specified JSON schema.
Ensure the `viewer_count` column has a minimum value of 0 and a maximum value of 1,000,000.
Verify that the `release_date` column contains dates in the format 'YYYY-MM-DD' and that all dates are not in the future.
Check that the `genre` column contains only distinct values matching `['Action', 'Drama', 'Comedy', 'Thriller']`.
For the `rating` column: Ensure the average rating is between 1 and 5, and that no ratings are null.
Ensure that the `metadata` column contains valid JSON objects that conform to the specified JSON schema for media content.
Ensure the `user_id` column exists and contains only distinct values that correlate to entries in the `users` table.
Verify that the `transaction_date` column is in the format 'YYYY-MM-DD' and contains only past dates.
Check that the `feedback_score` column has a standard deviation that does not exceed 1.5.
For the `email` column: Ensure values are valid email formats and do not include duplicates.
Ensure the `description` column has a maximum character count of 500 and contains no null values.
Ensure the `email` column contains valid email formats as per RFC 5322 specifications.
Verify that the `timestamp` column values are in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
Check that the number of rows in the `user_activity` table is between 50 and 500.
Ensure the `message_length` column contains values between 0 and 1500 characters.
Validate that the `attachment` column only contains JSON objects with keys matching `['file_name', 'file_type', 'file_size']`.
Confirm that the distribution of `response_time` adheres to a normal distribution with a mean of 30 seconds and a standard deviation of 5 seconds.
Ensure that the `status` column only contains values from the set `['sent', 'received', 'failed']`.
Verify that all values in the `email_content` column are less than 10,000 characters.
Check that the `sent_at` column contains datetime strings that can be parsed using dateutil.
Ensure the `user_id` column contains unique identifiers that match the length of 36 characters.
Ensure the `forecast_date` column follows the `YYYY-MM-DD` format and contains no future dates.
Verify that the temperature values in the `temperature` column are recorded in Celsius and fall within the range of -50 to 50.
Check that the `humidity` column values are between 0 and 100 percent.
Confirm that the number of rows in the `daily_forecasts` table is equal to 7.
Ensure the `weather_conditions` column contains only valid entries from the set `['sunny', 'rainy', 'cloudy', 'snowy']`.
Validate that the distribution of `wind_speed` values passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure that the `precipitation` column contains only non-negative values.
Verify that the `last_updated` column contains datetime strings in RFC 3339 format.
Check that the `location` column contains valid JSON objects conforming to the schema: `{'city': string, 'country': string}`.
Confirm that the maximum value in the `uv_index` column does not exceed 12.
Ensure the `view_count` column contains only non-negative integers.
Verify that the `release_date` column is formatted as `MM-DD-YYYY` and does not contain future dates.
Check that the number of rows in the `user_reviews` table matches the number of entries in the `movies` table.
Ensure that the `genre` column contains only distinct values from the set `['Action', 'Drama', 'Comedy', 'Thriller']`.
Validate that the distribution of `ratings` in the `movie_ratings` column has a Kullback-Leibler divergence below 0.1 when compared to the expected distribution of ratings.
For table 'case_records': Ensure the column 'case_id' exists and contains unique values. Verify that the total row count is greater than 50.
For field 'filing_date': Ensure all values conform to the specified datetime format '%Y-%m-%d'. Validate that no dates are in the future.
For column 'status': Ensure values are limited to the predefined set ['Open', 'Closed', 'Pending']. Confirm that the column exists.
For table 'evidence': Ensure the row count equals the row count of table 'case_records'. Validate that each row has a non-null 'case_id' that corresponds to existing case records.
For field 'client_contact': Validate that the column contains valid JSON objects conforming to the specified schema that includes 'email' and 'phone_number'.
For table 'contacts': Ensure the column 'email' exists, matches a valid email format, and contains no duplicates.
For field 'last_contacted': Ensure values adhere to the datetime format '%d-%m-%Y'. Validate that there are no future dates.
For column 'customer_segment': Ensure values are within the set ['VIP', 'Regular', 'New']. Confirm that this field is not null.
For table 'interactions': Verify the number of rows is between 10 and 100. Ensure the column 'interaction_type' exists and contains allowed values.
For field 'customer_data': Ensure that the JSON data is valid and contains 'customer_id', 'name', and 'preferences' fields per the specified JSON schema.
For table 'products': Ensure the column 'price' exists and contains positive numeric values. Validate that the total row count is greater than 100.
For field 'creation_date': Ensure all entries match the datetime format '%Y/%m/%d'. Confirm that no entries are older than 5 years.
For column 'category': Ensure the values match the set ['Electronics', 'Fashion', 'Home']. Validate that this column exists.
For table 'orders': Ensure the row count equals that of table 'customers'. Validate that each order has a corresponding 'customer_id' in the customers' table.
For field 'shipping_info': Ensure the column contains valid JSON objects, with required fields 'address', 'city', and 'postal_code' as per the specified JSON schema.
For table 'posts': Ensure the column 'post_id' exists and contains unique identifiers. Validate that the total row count exceeds 1000.
For field 'timestamp': Ensure all values adhere to the datetime format '%Y-%m-%dT%H:%M:%S'. Confirm that no timestamps are from the future.
For column 'post_type': Ensure values conform to the set ['text', 'image', 'video']. Validate that this column exists.
For table 'comments': Verify the number of rows is at least equal to the number of posts. Ensure that each comment has a non-null 'post_id' that references the posts table.
For field 'user_data': Ensure that the JSON is valid and includes 'user_id', 'username', and 'preferences' fields as required by the JSON schema.
For table 'players': Ensure the column 'player_id' exists and contains unique values. Validate that the row count is exactly 30.
For field 'match_date': Ensure all entries conform to the datetime format '%d/%m/%Y'. Confirm that no match dates are in the future.
For column 'team': Ensure values match the set ['Team A', 'Team B', 'Team C']. Validate that this field is not null.
For table 'matches': Ensure the row count equals that of table 'teams'. Validate that each match entry has a corresponding 'team_id' in the teams table.
For field 'performance_metrics': Ensure the column contains valid JSON objects, confirming the presence of 'score', 'assists', and 'rebounds' fields per the specified JSON schema.
Ensure the `study_id` column contains unique identifiers for each study and is not null.
Ensure the number of rows in the `participant_data` table is equal to 150, reflecting our sample size requirement.
Verify that the `age` column values are normally distributed, with a mean between 25 and 35 years.
Check that the `response_time` column has a standard deviation less than 15 seconds, indicating consistency in participant responses.
Ensure the `gender` column contains values only from the set `['Male', 'Female', 'Non-binary']`.
Ensure the `email_subject` column includes only distinct subjects and does not exceed 255 characters.
Verify that the count of `sent_emails` in the `user_activity` table is between 50 and 200 for active users.
Ensure that the `email_open_rate` column exhibits a p-value greater than 0.05 in the Chi-Square test for the past month.
Check that the `click_through_rate` column has a KL divergence of less than 0.1 compared to the previous quarter's data.
Verify that the `unsubscribe_reason` column contains values from the predefined set `['Too many emails', 'Content not relevant', 'Other']`.
Ensure the `employee_id` column contains unique entries and is not null for all records.
Check that the total number of rows in the `salary_data` table is equal to the number of active employees in the `employee_records` table.
Ensure that the `performance_score` column values have a median greater than or equal to 3.5.
Verify that the `years_of_service` column values are uniformly distributed with a p-value greater than 0.05 in the KS test.
Ensure that the combined values of the `base_salary` and `bonus` columns equal the total compensation for each employee.
Ensure the `account_number` column contains unique identifiers and has no null values.
Check that the count of transactions in the `monthly_transactions` table is between 100 and 500.
Verify that the `transaction_amount` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure that the `loan_amount` column values have a KL divergence of less than 0.05 when compared to the approved loan amounts from last year.
Verify that the `credit_score` column values are always greater than or equal to the `requested_loan_amount` divided by 1000.
Ensure that the `registration_date` is earlier than the `last_login` date for all records in the `user_accounts` table.
Check that the sum of `deposits` and `withdrawals` in the `account_transactions` table equals the `current_balance` for each account.
Ensure that the values in the `job_title` column are unique combinations when paired with the `department` column.
Verify that the `total_expenditure` is greater than the `total_income` for all records in the `monthly_budget` table.
Ensure that the values in the `transaction_type` column belong to the set `['Deposit', 'Withdrawal', 'Transfer']` and are unique per transaction date.
Ensure the `customer_id` column exists and contains unique values without duplicates across all rows.
For field `contact_email`: Verify that this field is required (not null) and matches the format of a valid email address.
Verify that the `account_status` column contains only the values `['Active', 'Inactive', 'Pending']` and that it exists in the dataset.
Ensure the number of rows in the `customer_data` table is between 100 and 1000. Raise an alert if it falls outside this range.
For the `purchase_date` field: Validate that all entries are in the format `YYYY-MM-DD` and check for null values.
Check that the `customer_segment` column has distinct values and matches the expected categories `['New', 'Returning', 'Loyal']`.
For field `signup_date`: Ensure that this field is not null and that all dates are before the current date.
Verify that the `address` field contains valid entries, ensuring no null values and adherence to a specified length limit of 255 characters.
Ensure that the `customer_feedback` column does not exceed 500 characters and is not null.
For the `loyalty_points` field: Validate that this field contains only non-negative integer values and exists in the dataset.
For the `transaction_amount` column: Ensure all values are non-negative and within the specified range of 0 to 10,000.
Verify that the `account_number` field exists and contains a unique identifier for each account without duplicates.
Ensure the `transaction_date` field is populated for all records and that it adheres to the `YYYY-MM-DD` format.
For the `interest_rate` column: Validate that all entries are within the range of 0.01 to 0.15 and are not null.
Ensure that the number of rows in the `loan_applications` table is equal to the number of rows in the `approved_loans` table.
Check that the `customer_age` field is an integer and falls within the range of 18 to 120 years.
For the `account_balance` field: Verify that all entries are numeric and not null, and that the average balance is greater than 100.
Ensure that the `transaction_type` column contains only the values `['Deposit', 'Withdrawal', 'Transfer']`.
For the `credit_score` field: Validate that scores fall within 300 to 850 and check for null entries.
Ensure the `bank_branch` field exists and that its values correspond to the list of active branches in the `branches` table.
Ensure the `email_subject` field exists and contains a maximum of 255 characters without any null values.
For the `recipient_list` column: Validate that it contains valid email addresses and that none exceed 100 entries.
Check that the `email_body` field does not exceed 2000 characters and is not null.
Verify that the `send_date` field adheres to the `YYYY-MM-DD` format and that all dates are in the past.
Ensure the `attachment_size` column contains values that do not exceed 10MB and that all files exist.
For field 'case_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field is unique for each case.
For field 'plaintiff_name': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure the length of 'plaintiff_name' is between 5 and 50 characters.
For field 'case_status': Ensure the field is required (not null). Ensure values in 'case_status' must exist in the set ('open', 'closed', 'pending').
For field 'filing_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure 'filing_date' is not in the future.
For field 'jurisdiction': Ensure the field is required (not null). Ensure values in 'jurisdiction' must exist in the predefined list of jurisdictions.
For field 'case_summary': Ensure the field can be null. Ensure the length of 'case_summary' does not exceed 500 characters.
For field 'associated_lawyers': Ensure the field matches the type 'text'. Ensure values in 'associated_lawyers' must not match any SQL-like patterns indicating injection attacks.
For field 'case_type': Ensure the field is required (not null). Ensure values in 'case_type' must exist in the set ('civil', 'criminal', 'family', 'business').
For field 'research_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field is unique for each research study.
For field 'data_collection_method': Ensure the field is required (not null). Ensure values in 'data_collection_method' must exist in the set ('survey', 'experiment', 'observation').
For field 'sample_size': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure 'sample_size' is within the range of 30 to 1000.
For field 'publication_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure 'publication_date' is not a future date.
For field 'research_topic': Ensure the field can be null. Ensure the length of 'research_topic' is between 3 and 100 characters.
For field 'data_format': Ensure the field is required (not null). Ensure values in 'data_format' must exist in the set ('CSV', 'JSON', 'XML').
For field 'researcher_email': Ensure the field is required (not null). Ensure that 'researcher_email' matches the pattern of a valid email address.
For field 'voter_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field is unique for each voter.
For field 'registration_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure 'registration_date' is not in the future.
For field 'voting_method': Ensure the field is required (not null). Ensure values in 'voting_method' must exist in the set ('in-person', 'absentee', 'mail-in').
For field 'district_code': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure 'district_code' conforms to the pattern of three uppercase letters followed by three digits.
For field 'candidate_votes': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure 'candidate_votes' is within the range of 0 to 1,000,000.
For field 'voter_email': Ensure the field is required (not null). Ensure that 'voter_email' matches the pattern of a valid email address.
For field 'election_year': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure 'election_year' is within the range of 2000 to the current year.
For field 'identifier': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field is unique across all datasets.
For field 'comments': Ensure the field can be null. Ensure the length of 'comments' does not exceed 250 characters.
For field 'status_code': Ensure the field is required (not null). Ensure values in 'status_code' must exist in the set ('active', 'inactive', 'suspended').
Ensure the `SKU` column contains only unique values and does not allow null entries.
For the `price` field, validate that all values are numeric and within the range of `$0.01` to `$10,000.00`.
Check that the `stock_quantity` column contains only non-negative integers and does not allow null values.
Verify that the `category` field contains values only from the predefined set `['Electronics', 'Clothing', 'Home Goods']`.
Ensure each entry in the `expiration_date` column adheres to the format `YYYY-MM-DD` and is in the future.
Ensure the `student_id` field contains only unique values and is not null.
For the `enrollment_date`, confirm all entries are valid datetime strings in the format `YYYY-MM-DD`.
Check that the `grade` column includes values from the set `['A', 'B', 'C', 'D', 'F']` and does not allow null entries.
Verify that the `course_duration` field contains only positive integers representing weeks.
Ensure the `completion_status` field contains values exclusively from the set `['Completed', 'In Progress', 'Not Started']`.
For the `case_number` field, ensure all entries are unique and not null.
Verify that the `filing_date` matches the `YYYY-MM-DD` format and all dates are in the past.
Check that the `jurisdiction` field contains only values from the set `['Federal', 'State', 'Local']`.
Ensure the `case_status` field includes only non-null values from the predefined set `['Open', 'Closed', 'Pending']`.
Validate that the `plaintiff_id` and `defendant_id` fields are of type integer and not null.
Ensure the `player_id` column contains unique values and does not allow null entries.
Check that the `points_scored` field contains only non-negative integers within the range of `0` to `100`.
For the `game_date`, validate that all entries are in the format `YYYY-MM-DD` and represent past dates.
Verify that the `team` field contains values exclusively from the set `['Team A', 'Team B', 'Team C']`.
Ensure the `assist_count` column contains only integers and is within the range of `0` to `50`.
Ensure the `shipment_id` field contains only unique values and does not allow null.
For the `delivery_date`, confirm all entries are valid datetime strings in the format `YYYY-MM-DD` and are in the future.
Check that the `status` field includes values only from the set `['Pending', 'Shipped', 'Delivered', 'Returned']`.
Verify that the `quantity_ordered` column contains only non-negative integers and does not allow null values.
Ensure the `warehouse_location` field contains values that match the set `['Warehouse 1', 'Warehouse 2', 'Warehouse 3']`.
For the `citizen_id` field: Ensure this field contains unique values. Verify that it does not allow null entries and is of type 'integer'.
For the `application_status` column: Ensure values are from the set `['Approved', 'Pending', 'Rejected']`. Values must not deviate from this set.
For the `date_of_birth` field: Ensure all entries are of type 'date' and that there are no missing values. Validate that all dates are before the current date.
For the `zipcode` field: Ensure values fall within the range of valid US zip codes (00001 to 99999). Ensure there are no missing values.
For the `submission_date` column: Verify that the mean submission date does not exceed 30 days from the current date. Ensure it contains no null entries.
For the `email_address` field: Ensure all entries are of type 'text' and contain valid email format. Verify that this field contains unique values.
For the `message_length` column: Ensure all values are within the range of 1 to 5000 characters. Validate that none are null.
For the `sent_time` field: Ensure values are of type 'timestamp' and that all entries are in chronological order.
For the `user_role` column: Ensure values are from the set `['Admin', 'User', 'Guest']`. Verify that no entries fall outside this set.
For the `attachment_size` field: Ensure the maximum size does not exceed 25MB and that all entries are numeric.
For the `threat_level` column: Ensure values are from the set `['Low', 'Medium', 'High']`. Verify that there are no missing values.
For the `incident_date` field: Ensure all dates are valid and are of type 'date'. Validate that no future dates are recorded.
For the `ip_address` field: Ensure all entries are valid IPv4 addresses and contain no duplicates. Ensure this field does not allow null values.
For the `alert_severity` column: Ensure values fall within the range of 1 to 5, where 1 is the lowest and 5 is the highest. Validate the absence of nulls.
For the `response_time` field: Ensure that the average response time is less than 30 minutes and that all entries are numeric.
For the `product_id` field: Ensure this field contains unique values. Verify that it does not allow null entries and is of type 'integer'.
For the `order_status` column: Ensure values are from the set `['Pending', 'Completed', 'Cancelled']`. Validate that no entries fall outside this set.
For the `purchase_date` field: Ensure all entries are of type 'date' and that there are no missing values. Validate that all dates are within the last year.
For the `quantity` field: Ensure all values are greater than zero and that no entries are null. Validate that the sum of quantities does not exceed the maximum stock limit.
For the `price` column: Ensure all entries are numeric and within the range of $1 to $10,000. Validate that no entries are null.
For the `username` field: Ensure this field contains unique values and does not allow null entries. Validate that it matches the type 'text'.
For the `last_login` column: Ensure values are of type 'timestamp' and that all entries are in chronological order. Verify that there are no missing values.
For the `feedback_score` field: Ensure values fall within the range of 1 to 10 and that the average score is above 5.
For the `service_category` column: Ensure values are from the set `['IT', 'Finance', 'HR', 'Sales']`. Validate that no entries are null.
For the `transaction_id` field: Ensure this field contains unique values and does not allow null entries. Validate that it is of type 'varchar'.
For the `vehicle_id` field: Ensure the field matches the type 'text'. Ensure all values in `vehicle_id` are unique and not null.
For the `delivery_date` field: Ensure the field is required (not null). Ensure all dates are within the range of the current date to one year from now.
For the `status` column: Ensure the values are from the set `['Pending', 'In Transit', 'Delivered', 'Cancelled']`. Ensure no null values exist.
For the `distance` field: Ensure the field matches the type 'numeric'. Ensure all values are greater than zero and within the range of 1 to 10000.
For the `load_weight` field: Ensure the field is required (not null). Ensure the values adhere to a consistent distribution, passing the KS test with a p-value greater than 0.05.
For the `author_id` column: Ensure the field matches the type 'text'. Ensure that `author_id` values are unique and not null.
For the `published_date` field: Ensure all dates are in the past and formatted as 'YYYY-MM-DD'. Ensure there are no missing values.
For the `tags` field: Ensure the field contains only distinct values. Ensure each tag is from the set of predefined tags.
For the `view_count` field: Ensure the field matches the type 'integer'. Ensure all values are non-negative and within a reasonable range (0 to 1000000).
For the `content_length` field: Ensure that the values adhere to a normal distribution, with a mean length between 200 and 2000 characters.
For the `property_id` field: Ensure all values are unique and not null. Ensure the field matches the type 'text'.
For the `listing_price` field: Ensure the field is required (not null). Ensure all prices are greater than zero and within the range of 50000 to 10000000.
For the `bedrooms` column: Ensure all values are integers and within the range of 1 to 10. Ensure there are no missing values.
For the `type` field: Ensure the values are from the set `['Apartment', 'House', 'Condo', 'Townhouse']`. Ensure no null values exist.
For the `listing_date` field: Ensure all dates are within the last five years. Ensure the distribution of listing dates passes the Chi-Square test with a p-value greater than 0.05.
For the `product_id` field: Ensure the field matches the type 'text'. Ensure all values are unique and not null.
For the `stock_quantity` field: Ensure the field is required (not null). Ensure all values are integers and non-negative, adhering to a logical range (0 to 10000).
For the `category` field: Ensure the values are from the set `['Electronics', 'Clothing', 'Home', 'Beauty']`. Ensure there are no null values.
For the `price` column: Ensure the field matches the type 'float'. Ensure all values are greater than zero and within the range of 1.0 to 5000.0.
For the `rating` field: Ensure the values are within the range of 1 to 5. Ensure the distribution of ratings conforms to expected behavior, verified by KS test results.
For the `incident_id` field: Ensure all values are unique and not null. Ensure the field matches the type 'text'.
For the `date_reported` field: Ensure all dates are valid and within the range of the last two years. Ensure there are no missing values.
For the `threat_type` field: Ensure the values are from the set `['Phishing', 'Malware', 'Ransomware', 'DDoS']`. Ensure there are no null values.
For the `impact_score` field: Ensure the field matches the type 'integer'. Ensure all values are within the range of 1 to 10 and non-negative.
For the `response_time` field: Ensure the values are in a reasonable range (within 0 to 72 hours). Ensure the distribution of response times passes the Chi-Square test with a p-value greater than 0.05.
Ensure the `case_number` field contains only unique values. It must not have any missing values and should conform to the type 'text'.
For field `filing_date`: Ensure the dates are within the range of '01-01-2000' to '12-31-2023'. Ensure this field cannot be null.
Verify that the `case_status` column only contains values from the set `['Open', 'Closed', 'Pending']`. Ensure there are no missing entries.
For the combination of `lawyer_id` and `case_number`: Ensure that this pairing is unique across all records.
Ensure the `client_id` field is of the type 'integer'. Verify that no values are missing and that all values are unique.
For field `email`: Ensure the field matches the type 'text'. Ensure all email addresses are valid and unique, with no missing values.
Verify that the `customer_since` dates are in chronological order, with no gaps in the dates. Ensure none of the values are null.
For the field `customer_type`, verify that values only belong to the set `['Regular', 'VIP', 'New']` and there are no missing entries.
Ensure that the sum of `purchase_amount` and `discount_amount` equals `total_amount` for each record. Flag discrepancies.
For field `country_code`: Ensure that values are from the predefined set of valid country codes and that all records contain this field.
Ensure that the `player_id` field is unique across all records. Verify that it contains no missing values and is of the type 'integer'.
For field `match_date`: Ensure all dates fall within the range of '01-01-2020' to '12-31-2023'. Ensure this field cannot be null.
Verify that the `score` column contains only positive integer values and that there are no missing entries.
For the combination of `team_id` and `season`: Ensure that this pairing is unique across records, with no duplicates.
Ensure that values in the `position` field belong to the set `['Forward', 'Midfielder', 'Defender', 'Goalkeeper']` and that there are no null values.
For field `product_id`: Ensure the field contains only unique values. Confirm it is of type 'integer' and has no missing values.
Verify that the `stock_quantity` is within the range of '0' to '1000'. Ensure there are no null values in this column.
Ensure that the `category` field only contains values from the set `['Electronics', 'Clothing', 'Home']`. No missing values should be present.
For the combination of `supplier_id` and `product_id`: Ensure that this combination is unique across all records, with no duplicates.
Ensure the `purchase_price` is greater than the `sale_price` for each record. Flag any inconsistencies.
For field `transaction_date`: Ensure all entries are of the type 'date' and fall within the last three years. No missing values should exist.
Verify that the `user_id` in the `Legal Case Management` and `CRM` systems are unique and do not contain any null values.
Ensure that the sum of `total_revenue` and `total_expenses` in the `Retail and Inventory Management` system equals `net_profit` for each record.
For the `performance_score` in the `Sports Analytics Platform`, ensure that values are within the range of '0' to '100' and that no entries are missing.
Verify that the `feedback_rating` in the `CRM` system falls within the set `['1', '2', '3', '4', '5']` and contains no null values.
For field 'temperature': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure temperature values are within the range of -50 to 50 degrees Celsius.
For field 'humidity': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure humidity percentage values are within the range of 0 to 100.
For field 'forecast_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure all forecast dates are in the future.
For field 'weather_condition': Ensure the field is required (not null). Ensure values in (weather_condition) must exist in the set ('Sunny', 'Rainy', 'Cloudy', 'Snowy').
For field 'wind_speed': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure wind speed values are non-negative and do not exceed 200 km/h.
For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all patient IDs are unique.
For field 'appointment_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure appointment dates are not in the past.
For field 'diagnosis_code': Ensure the field is required (not null). Ensure values in (diagnosis_code) must exist in the set of valid ICD-10 codes.
For field 'prescription_amount': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure prescription amounts are within the range of 1 to 1000.
For field 'doctor_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all doctor IDs are unique.
For field 'vehicle_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all vehicle IDs are unique.
For field 'delivery_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure delivery dates are scheduled at least 24 hours in the future.
For field 'weight': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure weight values are within the range of 0 to 15000 kg.
For field 'tracking_number': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all tracking numbers are unique.
For field 'status': Ensure the field is required (not null). Ensure values in (status) must exist in the set ('Pending', 'In Transit', 'Delivered', 'Returned').
For field 'product_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all product IDs are unique.
For field 'supplier_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in (supplier_id) must exist in the set of registered supplier IDs.
For field 'quantity': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure quantity values are non-negative.
For field 'order_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure order dates are not in the future.
For field 'delivery_time': Ensure the field is required (not null). Ensure the field matches the type 'time'. Ensure delivery times are within the range of 08:00 to 18:00.
For file 'sales_data.csv': Ensure the file exists. Ensure the file size is within the range of 1KB to 10MB. Ensure the first line contains valid CSV headers.
For file 'weather_data.json': Ensure the file exists. Ensure the file matches the specified hash value. Ensure the JSON structure is valid and contains the required fields.
For file 'logistics_report.txt': Ensure the file exists. Ensure the line count does not exceed 1000. Ensure all lines match the specified regular expression for log entries.
For file 'inventory_data.xlsx': Ensure the file exists. Ensure the file size is within the range of 1KB to 5MB. Ensure the first sheet contains valid table headers.
For file 'patient_records.xml': Ensure the file exists. Ensure the file matches the specified hash value. Ensure the XML structure is valid and contains all required patient fields.
For the `customer_id` field: Ensure the field is required (not null). Ensure all values are unique integers representing customer identifiers.
For the `meter_reading` field: Validate that all entries are numeric. Ensure there are no missing values and that readings are within the range of 0 to 99999.
For the `billing_period` field: Ensure the field matches the type 'date'. Validate that all values fall within the last 12 months and are unique.
For the `service_type` field: Ensure the field contains only distinct values matching `['Electricity', 'Water', 'Gas']`. Validate that no values are null.
For the `tariff_rate` field: Validate that all entries are positive decimal numbers. Ensure that the column has no missing values.
For the `account_status` field: Ensure values in this field are restricted to the set `['Active', 'Inactive', 'Suspended']`. Validate that all values are unique.
For the `installation_date` field: Ensure that the format is `YYYY-MM-DD`. Validate that no values are null and that all dates are in the past.
For the `energy_consumption` field: Validate that values conform to a normal distribution with a mean of 500 and a standard deviation of 50. Conduct a KS test with a significance level of 0.05.
For the `customer_feedback` field: Ensure string lengths are between 5 and 500 characters. Validate that all entries are required and do not contain special characters.
For the `utility_company_id` field: Ensure that it matches the type 'text'. Validate that it must exist in the `companies` table and is unique.
For the `student_email` field: Validate that all entries match the regular expression pattern for email addresses. Ensure there are no duplicates and that the field is not null.
For the `course_code` field: Ensure values conform to the pattern `^[A-Z]{3}[0-9]{3}$`. Validate that all entries are unique and not null.
For the `enrollment_date` field: Ensure this field matches the type 'date'. Validate that dates are within the current academic year and that all values are present.
For the `grade` column: Validate that all entries are either `A`, `B`, `C`, `D`, or `F`. Ensure there are no missing values or duplicates.
For the `assignment_description` field: Ensure that all string values are limited to 1000 characters and do not contain HTML tags or special characters.
For the `student_id` field: Ensure all values are unique integers and not null. Validate that it matches the type 'integer'.
For the `attendance_percentage` field: Validate that values are within the range of 0 to 100. Ensure that the distribution passes the Chi-Square test with a p-value greater than 0.05.
For the `course_material` field: Ensure it contains valid URLs. Validate that no entries are null and that all strings are not longer than 255 characters.
For the `wallet_address` field: Ensure all entries match the regular expression for valid cryptocurrency addresses. Validate that all values are unique and not null.
For the `transaction_amount` field: Validate that all entries are positive decimal numbers. Ensure that the distribution of amounts fits within expected parameters with a KS test p-value > 0.05.
For the `block_hash` field: Ensure it matches the format of a SHA-256 hash. Validate that there are no null values and all entries are unique.
For the `user_id` field: Ensure values are unique and match the type 'integer'. Validate that all entries must exist in the `users` table.
For the `timestamp` field: Ensure all entries are in UTC format and that there are no duplicate timestamps. Validate that all entries are not null.
For the `transaction_type` field: Ensure the field contains only values from the set `['Deposit', 'Withdrawal', 'Transfer']`. Validate that no values are null.
For the `fee` field: Validate that all entries are non-negative decimal values. Ensure the distribution passes statistical tests, confirming alignment with expected transaction fee patterns.
For the `booking_id` field: Ensure all values are unique and not null. Ensure this field matches the type 'integer'.
For the `departure_date` field: Ensure the values adhere to the format '%Y-%m-%d'. Ensure this field cannot be null.
For the `guest_count` field: Ensure values are greater than 0. Ensure this field matches the type 'integer'.
For the `room_type` field: Ensure values are within the set ['Single', 'Double', 'Suite']. Ensure this field exists.
For the `payment_status` field: Ensure it can only contain values from ['Pending', 'Completed', 'Cancelled']. Ensure this field cannot be null.
For the `post_slug` field: Ensure all values are unique and formatted in lowercase. Ensure this field cannot be null.
For the `published_at` field: Ensure values match the datetime format '%Y-%m-%d %H:%M:%S'. Ensure this field cannot be null.
For the `author_id` field: Ensure all values exist in the `users` table. Ensure this field cannot be null.
For the `tags` field: Ensure it contains valid JSON objects that conform to the defined JSON schema. Ensure this field exists.
For the `views_count` field: Ensure the sum of values is within the range [0, 100000]. Ensure this field matches the type 'integer'.
For the `forecast_date` field: Ensure values are formatted as '%Y-%m-%d'. Ensure this field cannot be null.
For the `temperature` field: Ensure the mean value falls within the range [-30, 50]. Ensure this field matches the type 'float'.
For the `humidity` field: Ensure values are between 0 and 100. Ensure this field matches the type 'integer' and cannot be null.
For the `weather_conditions` field: Ensure all values are one of ['Sunny', 'Rainy', 'Cloudy', 'Snowy']. Ensure this field exists.
For the `wind_speed` field: Ensure values are non-negative. Ensure this field matches the type 'float'.
For the `employee_id` field: Ensure all values are unique and not null. Ensure this field matches the type 'integer'.
For the `date_of_hire` field: Ensure values are formatted as '%Y-%m-%d'. Ensure this field cannot be null.
For the `salary` field: Ensure the minimum value is greater than 0. Ensure this field matches the type 'float'.
For the `job_title` field: Ensure values are among the set ['Manager', 'Developer', 'Designer', 'Analyst']. Ensure this field exists.
For the `benefits` field: Ensure it contains valid JSON structures that conform to the specified JSON schema. Ensure this field exists.
For the `game_id` field: Ensure all values are unique and not null. Ensure this field matches the type 'integer'.
For the `release_date` field: Ensure values conform to the format '%Y-%m-%d'. Ensure this field cannot be null.
For the `rating` field: Ensure the values are within the range [0, 10]. Ensure this field matches the type 'float' and cannot be null.
For the `platform` field: Ensure it contains only values from ['PC', 'Xbox', 'PlayStation', 'Switch']. Ensure this field exists.
For the `reviews` field: Ensure it contains valid JSON objects that conform to the defined JSON schema. Ensure this field exists.
For the `account_number` field: Ensure the field is required (not null). Ensure the field contains only unique values that are alphanumeric and follow the specified format of 10-12 characters.
In the `transaction_date` column: Verify that all datetime values adhere to the format '%Y-%m-%d %H:%M:%S'. Ensure there are no missing values in this column.
For the `customer_id` field: Ensure that this field contains only distinct values, with no duplicates allowed. It must not be null.
In the `balance` column: Verify that all values are of type 'float' and are greater than or equal to zero. Ensure there are no missing values.
For the `transaction_amount` field: Check that all values are numeric and fall within the range of 0.01 to 1,000,000. Validate that this column has no missing values.
In the `account_type` field: Ensure that values must be one of the specified options: `['Savings', 'Checking', 'Investment']`. This field cannot contain null values.
For the `created_at` column: Verify that all datetime values can be parsed using dateutil and conform to the format '%Y-%m-%d'. Ensure this field is not null.
In the `interest_rate` column: Ensure that all values are of type 'float' and fall between 0.0 and 0.2. Check for unique values and no missing entries.
For the `email_address` field: Ensure the field contains valid email formats and is required (not null). Verify that all entries are unique.
In the `transaction_id` column: Verify that all entries are unique and are of type 'string'. Ensure there are no missing values.
For the `loan_application` JSON object: Validate that it conforms to the specified JSON schema, ensuring all required fields are present and correctly formatted.
In the `last_payment_date` field: Ensure that all datetime entries match the format '%Y-%m-%d' and that there are no null values.
For the `credit_score` column: Check that all values are integers between 300 and 850. Ensure this field is required (not null) and contains unique values.
In the `transaction_category` field: Ensure that all values match one of the allowed categories: `['Deposit', 'Withdrawal', 'Transfer']`. Verify that this column contains no missing values.
For the `statement_generated_at` field: Verify that all datetime entries can be parsed using dateutil and are not null.
In the `fraud_score` column: Ensure that all values are numeric and fall within the range of 0 to 100. Check for unique values and no missing entries.
For the `incident_date` field: Verify that all datetime values follow the format '%Y-%m-%d %H:%M:%S'. Ensure this field is required (not null).
In the `user_id` column: Ensure this field contains only unique values, with no duplicates allowed. Verify that it cannot be null.
For the `transaction_details` JSON object: Validate that it conforms to the specified JSON schema, ensuring structural integrity and required fields are present.
In the `alert_timestamp` field: Ensure that all datetime values can be parsed using dateutil and are not null. Verify that they are in the format '%Y-%m-%d %H:%M:%S'.
For the `location` field: Ensure that all entries are of type 'string' and follow a specified format (e.g., 'City, Country'). Verify that there are no missing values.
In the `suspicion_level` column: Ensure that all values are of type 'integer' and fall within the range of 1 to 5. Check for unique values and no missing entries.
For the `user_agent` field: Ensure the field contains valid user agent strings and is required (not null). Verify that all entries are unique.
In the `response_time` column: Ensure that all values are of type 'float' and are greater than or equal to zero. Check for unique values and no missing entries.
For the `fraudulent` column: Verify that values are boolean and ensure that this field is required (not null). Validate that the distribution of values is consistent with expected behavior (e.g., p-value > 0.05 in a Chi-Square test).
Ensure the `meter_reading` column contains only unique values and does not have any missing entries. The values should be of type 'float'.
For the `billing_date` field: Ensure all entries match the format '%Y-%m-%d'. Ensure this field is not null.
Verify that the `account_id` in the `usage_records` table is unique and corresponds to a valid `customer_id` in the `customers` table.
For the `tariff_rate` column: Ensure values are of type 'decimal'. Ensure this field is required (not null) and does not contain duplicate entries.
Ensure that the `consumption` column values are greater than zero and match the type 'integer'. Check for any missing values.
Check that the `subscription_start_date` field adheres to the format '%Y-%m-%d %H:%M:%S' and does not contain any null values.
For the `user_id`: Ensure the values are unique and exist in the `users` table. The type should be 'UUID'.
Validate that the combined values of `season_number` and `episode_number` in the `episodes` table are unique within each `show_id`.
Ensure that the `content_rating` column contains only distinct values from the set `['G', 'PG', 'PG-13', 'R']`.
For the `view_timestamp` field: Ensure all entries can be parsed as valid datetime objects, and ensure there are no missing values.
Ensure the `device_id` in the `sensor_data` table is unique and corresponds to a valid entry in the `devices` table.
For the `timestamp` column: Validate that all values match the ISO 8601 format and ensure this field has no null entries.
Check that the sum of `temperature_reading` and `humidity_reading` does not exceed the `environmental_threshold` for each entry in the `environment_data` table.
Ensure that the `battery_level` column values are of type 'integer' and fall within the range [0, 100]. No missing values are allowed.
For the `location_coordinates` field: Ensure all entries are valid JSON objects conforming to the specified schema for latitude and longitude.
Ensure the `email_address` column contains unique entries and matches the format of valid email addresses, with no null values.
For the `contact_date` field: Validate that all entries conform to the format '%Y-%m-%d'. Ensure this field is required (not null).
Verify that the combination of `customer_id` and `interaction_type` in the `customer_interactions` table is unique.
For the `customer_status` field: Ensure that the values are limited to the set `['active', 'inactive', 'prospect']` and are not null.
Check that the `feedback_score` column values are integers ranging from 1 to 5, with no missing entries.
Ensure the `citizen_id` column in the `application_records` table is unique and corresponds to valid entries in the `citizens` table.
For the `submission_date` field: Ensure all entries can be parsed as valid datetime objects and follow the format '%Y-%m-%d'.
Verify that the sum of `approved_funds` and `disbursed_funds` does not exceed `allocated_funds` for each record in the `funding_requests` table.
Ensure that the `service_request_type` column only contains distinct values from the predefined list `['complaint', 'request', 'inquiry']`.
For the `status_code` field: Validate that all entries are valid JSON objects and conform to the specified schema for statuses.
Ensure the `device_id` column contains only unique values and is not null.
Check that the `temperature_reading` values are within the range of -30 to 50 degrees Celsius.
For the `battery_level` field: Ensure it is required (not null) and contains only integer values between 0 and 100.
Validate that the mean of `sensor_data` is above 10 and the standard deviation does not exceed 5.
Ensure the `firmware_version` column contains no missing values and matches the pattern 'vX.Y.Z'.
Verify that the `transaction_id` column contains only unique values and does not have null entries.
Ensure the total sum of `transaction_amount` is greater than 1,000,000 units for compliance checks.
For the `block_timestamp` field: Ensure it is required (not null) and has a valid date format.
Check that the proportion of unique values in the `wallet_address` column is at least 95%.
Ensure the `gas_price` column maintains a mean value not exceeding 50 gwei.
Ensure the `citizen_id` column has unique values and does not contain null entries.
Check that the `age` column values fall within the range of 18 to 100.
For the `service_request_date` field: Ensure it is required (not null) and is formatted correctly as 'YYYY-MM-DD'.
Validate that the median of `response_time` does not exceed 30 days.
Ensure that the `complaint_type` column contains only distinct values from the predefined set: ['Noise', 'Traffic', 'Waste'].
Ensure the `user_id` column contains unique values and is not null.
Check that the `post_likes` column values are non-negative integers.
For the `user_email` field: Ensure it is required (not null) and follows a valid email format.
Validate that the average `engagement_rate` is at least 2% across all posts.
Ensure that the `hashtag` column contains no missing values and includes only distinct hashtags.
Ensure the `transaction_id` column contains unique values and does not have any null values.
Check that the sum of `transaction_amount` values flagged as fraudulent exceeds 100,000 currency units.
For the `user_ip` field: Ensure it is required (not null) and matches the valid IP address format.
Validate that the standard deviation of `transaction_time` does not exceed 15 minutes for high-risk transactions.
Ensure the `fraud_score` column values are constrained between 0 and 100, with no missing entries.
Ensure the `user_id` column contains unique values with no missing entries, and that it matches the type 'integer'.
For field `subscription_start_date`: Ensure the field has no missing values and matches the type 'date'. Validate that all dates are in the past.
Verify that the `watch_time_minutes` column contains only non-negative values and conforms to the type 'integer'.
Ensure the `genre` column contains only distinct values from the defined set `['Action', 'Drama', 'Comedy', 'Thriller']`.
For field `rating`: Ensure the field is of type 'float' and that all values are within the range [0.0, 10.0].
For the `platform` field: Ensure it contains no missing values and matches the type 'text'. Verify that values are included in the set `['Netflix', 'Hulu', 'Amazon Prime']`.
Ensure the `episode_count` column is of type 'integer', contains no missing values, and that the mean is greater than 5.
For fields `view_count` and `likes_count`: Ensure the sum of both fields across all records equals or exceeds 1000.
Verify that the combination of `user_id` and `show_id` is unique across records, meaning a user should not watch the same show more than once.
For the `subscription_type` column: Ensure it only contains values from the set `['Free', 'Basic', 'Premium']` and that each user has exactly one subscription type.
Ensure the `phone_number` field contains unique values with no missing entries and matches the type 'string'.
For the `service_activation_date`: Ensure the field is of type 'date' and that all entries are not null and fall within the last 5 years.
Verify that the `monthly_fee` column contains only non-negative values and conforms to the type 'float'.
Ensure the `plan_type` column contains distinct values from the defined set `['Prepaid', 'Postpaid', 'Family']`.
For field `data_usage_gb`: Ensure all values are non-negative integers and that the maximum value does not exceed 100.
For the `customer_id` field: Ensure it contains no missing values and matches the type 'integer'. Validate that all IDs are unique.
Ensure the `contract_duration_months` column is of type 'integer', contains no missing values, and that the average duration is at least 12 months.
For fields `total_calls` and `total_texts`: Ensure the sum of both fields for each customer matches the expected total in the `usage_summary` column.
Verify that the combination of `customer_id` and `plan_type` is unique, ensuring no customer has multiple active plans of the same type.
For the `billing_cycle` field: Ensure it contains values from the set `['Monthly', 'Quarterly', 'Yearly']` and that no entries are null.
Ensure the `player_id` column contains unique values with no missing entries and matches the type 'integer'.
For the `match_date`: Ensure the field has no missing values and matches the type 'date'. Validate that all dates are in the past.
Verify that the `goals_scored` column contains only non-negative values and conforms to the type 'integer'.
Ensure the `team_name` column contains distinct values from the defined set of teams in the league.
For field `matches_played`: Ensure the mean is greater than 10, and values are of type 'integer' with no missing entries.
For field 'transaction_id': Ensure the field is required (not null). Ensure the field contains only unique values.
For field 'amount': Ensure the field matches the type 'decimal'. Ensure the minimum value is greater than 0.
For field 'user_id': Ensure the field is required (not null). Ensure values in (user_id) must exist in the user database.
For field 'transaction_date': Ensure the field matches the type 'date'. Ensure there are no missing values in the column.
For field 'fraud_score': Ensure the mean value does not exceed the threshold of 100. Ensure standard deviation remains within acceptable limits.
For field 'patient_id': Ensure the field is required (not null). Ensure the field contains only unique values.
For field 'diagnosis_code': Ensure this field matches a predefined set of valid codes. Ensure the field is of type 'text'.
For field 'treatment_date': Ensure the field matches the type 'date'. Ensure there are no future dates in the column.
For field 'insurance_status': Ensure the field contains no missing values. Ensure it matches the type 'text' with values in ['insured', 'uninsured', 'underinsured'].
For field 'age': Ensure the average age falls within the range of 0 to 120. Ensure there are no null values.
For field 'ip_address': Ensure the field is required (not null). Ensure values are valid IP addresses.
For field 'threat_level': Ensure the field matches the type 'integer'. Ensure values are within the range of 1 to 5.
For field 'timestamp': Ensure the field matches the type 'datetime'. Ensure there are no duplicates in this column.
For field 'alert_type': Ensure the field contains only unique values. Ensure it matches the type 'text' and includes values from a defined set.
For field 'incident_reported': Verify that the proportion of unique values is consistent with expected reporting rates.
For field 'user_id': Ensure the field is required (not null). Ensure there are no duplicate values in this column.
For field 'watch_time': Ensure the field matches the type 'integer'. Ensure that the sum of watch_time does not exceed 24 hours per user per day.
For field 'content_id': Ensure the field matches the type 'text'. Ensure all values exist in the content library.
For field 'subscription_status': Ensure the field contains no missing values. Ensure values are one of ['active', 'inactive', 'canceled'].
For field 'rating': Ensure the average rating is between 1 and 5. Ensure there are no null values in this column.
For field 'property_id': Ensure the field is required (not null). Ensure the field contains only unique values.
For field 'listing_price': Ensure the field matches the type 'decimal'. Ensure that the minimum price is greater than zero.
For field 'location': Ensure the field contains no missing values. Ensure it matches the type 'text' and includes valid location identifiers.
For field 'square_footage': Ensure the average square footage falls within the range of 500 to 50000. Ensure there are no null values.
For field 'listing_date': Ensure the field matches the type 'date'. Ensure there are no future dates in the column.
For the field `case_id`: Ensure this field is required (not null). Ensure it contains unique values for each record.
For the field `filing_date`: Ensure this field matches the type 'date'. Ensure there are no missing values in this column.
For the field `client_id`: Ensure values in `client_id` must exist in the `clients` table. Ensure this field is required (not null).
Ensure the `status` column contains only distinct values matching `['Open', 'Closed', 'Pending']`.
For fields `start_date` and `end_date`: Ensure `end_date` is always greater than `start_date`. Ensure both fields match the type 'date'.
For the field `product_sku`: Ensure this field is required (not null). Ensure it contains unique values for each product.
For the `price` column: Ensure that all values are of type 'decimal'. Check that no values are negative.
Ensure the `category_id` must exist in the `categories` table. Ensure this field is required (not null).
For fields `quantity` and `sold`: Ensure the sum of `quantity` and `sold` equals `inventory_count`.
For the `discount` column: Ensure that values do not exceed 100% and are of type 'decimal'. Check for any missing values.
For the field `research_id`: Ensure this field contains unique values. Ensure it is required (not null).
For the `result_value` column: Ensure it matches the type 'float'. Check for missing values.
Ensure the `experiment_date` column consists of valid date entries. Ensure there are no missing values.
For fields `group_a` and `group_b`: Ensure that the means of both groups fall within an expected range (e.g., 0 to 100).
For the `sample_size` column: Ensure values are greater than zero and that they match the type 'integer'.
For the field `employee_id`: Ensure this field is required (not null). Ensure it contains unique values for each employee.
For the `salary` column: Ensure that values are of type 'decimal'. Check for any missing values.
Ensure values in `department_id` must exist in the `departments` table. Ensure this field is required (not null).
For fields `purchase_order_total` and `payment_received`: Ensure that `payment_received` is less than or equal to `purchase_order_total`.
For the `transaction_date` column: Ensure it consists of valid date entries. Check that it does not contain future dates.
For the field `citizen_id`: Ensure this field contains unique values. Ensure it is required (not null).
For the `service_request_date` column: Ensure it matches the type 'date'. Check for missing values.
For the `status` column: Ensure it contains only distinct values matching `['Open', 'In Progress', 'Closed']`.
For fields `response_time` and `resolution_time`: Ensure `resolution_time` is always greater than `response_time`.
For the `budget` column: Ensure values are of type 'decimal'. Ensure there are no negative values and check for missing entries.
For the `citizen_id` field: Ensure the field is required (not null). Ensure the field contains unique values and matches the type 'integer'.
For the `date_of_birth` field: Ensure this field cannot be null. Ensure it matches the type 'date' and contains valid date entries.
For the `address` field: Ensure there are no missing values. Validate that all entries comply with the format 'Street, City, State, Zip'.
For the `voter_status` field: Ensure the field contains distinct values matching `['Active', 'Inactive', 'Pending']`.
For the `income` field: Validate that the data adheres to a distribution with a mean of at least 50,000. Perform a KS test to check for normality with a p-value threshold of 0.05.
For the `sensor_id` field: Ensure the field is required (not null). Ensure values are unique and match the type 'string'.
For the `temperature_readings` field: Ensure there are no missing values and that readings fall within the expected range of -40 to 125 degrees Celsius.
For the `battery_level` field: Validate that the values are between 0 and 100. Perform KL divergence checks to ensure consistency with historical data distributions.
For the `timestamp` field: Ensure the field cannot be null. Validate that all entries follow the ISO 8601 format.
For the `device_status` field: Ensure values are distinct and match `['Online', 'Offline', 'Error']`. Ensure the field is required.
For the `email_address` field: Ensure the field is required (not null). Validate that all entries match the standard email format and are unique.
For the `message_body` field: Ensure there are no missing values. Validate that the content does not exceed 5000 characters.
For the `attachment_size` field: Validate that all entries are within the size limit of 10MB. Ensure this field cannot be null.
For the `sent_time` field: Ensure the field matches the type 'datetime'. Validate that all timestamps are in chronological order.
For the `priority_level` field: Ensure values are distinct and match `['High', 'Medium', 'Low']`. Ensure the field is required.
For the `player_id` field: Ensure the field is required (not null). Ensure values are unique and match the type 'string'.
For the `score` field: Validate that scores are non-negative integers. Ensure the distribution of scores follows a normal distribution with a mean greater than 100.
For the `game_level` field: Ensure values are distinct and match the type 'integer'. Validate that levels are within the range of 1 to 100.
For the `session_duration` field: Ensure this field cannot be null. Validate that the duration is recorded in minutes and does not exceed 180 minutes.
For the `release_date` field: Ensure the field matches the type 'date'. Validate that all entries correspond to actual release dates in the past.
For the `user_id` field (across all domains): Ensure this field is required (not null). Ensure values are unique and match the type 'integer'.
For the `status` field (across all domains): Ensure values are distinct and match a predefined set of statuses. Ensure this field cannot be null.
For the `created_at` field (across all domains): Ensure the field matches the type 'datetime'. Validate that all timestamps are in descending order.
For the `location` field (IoT and Government): Ensure there are no missing values. Validate that the entries are in the format 'Latitude, Longitude'.
For the `description` field (across all domains): Ensure there are no missing values. Validate that the content does not exceed 1000 characters.
For field 'account_balance': Ensure the field matches the type 'decimal'. Validate that all values in (account_balance) are within the range of $0.00 to $1,000,000.00.
For field 'transaction_date': Ensure the field matches the type 'datetime'. Validate that all values in (transaction_date) conform to the format 'YYYY-MM-DD HH:MM:SS' and are within the last 12 months.
For field 'account_number': Ensure the field matches the type 'text'. Validate that (account_number) consists of exactly 10 numeric characters and does not contain any letters or special characters.
For field 'transaction_type': Ensure the field matches the type 'text'. Validate that all values in (transaction_type) must exist in the set ['Deposit', 'Withdrawal', 'Transfer'].
For field 'customer_id': Ensure the field matches the type 'text'. Validate that (customer_id) is a string of 8 characters, beginning with 'CUST' followed by 4 digits.
For field 'booking_date': Ensure the field matches the type 'datetime'. Validate that all values in (booking_date) conform to the format 'YYYY-MM-DD' and occur in the future.
For field 'room_type': Ensure the field matches the type 'text'. Validate that all values in (room_type) must exist in the set ['Single', 'Double', 'Suite'].
For field 'check_in_date': Ensure the field matches the type 'datetime'. Validate that (check_in_date) is not earlier than the current date and occurs before (check_out_date).
For field 'guest_email': Ensure the field matches the type 'text'. Validate that all values in (guest_email) conform to the pattern of a valid email address and do not contain any SQL-like patterns.
For field 'special_requests': Ensure the field matches the type 'text'. Validate that string lengths in (special_requests) do not exceed 250 characters.
For field 'transaction_amount': Ensure the field matches the type 'decimal'. Validate that all values in (transaction_amount) are within the range of $0.01 to $10,000.00.
For field 'ip_address': Ensure the field matches the type 'text'. Validate that all values in (ip_address) match the regular expression pattern for valid IP addresses and do not match any patterns from a list of known proxies.
For field 'fraud_flag': Ensure the field matches the type 'boolean'. Validate that all values in (fraud_flag) are either 'true' or 'false' and that there are no null values.
For field 'transaction_timestamp': Ensure the field matches the type 'datetime'. Validate that (transaction_timestamp) conforms to the format 'YYYY-MM-DDTHH:MM:SSZ' and is in UTC.
For field 'user_id': Ensure the field matches the type 'text'. Validate that all values in (user_id) are unique and match the format 'USER-XXXX' where 'XXXX' is a 4-digit number.
For field 'sensor_id': Ensure the field matches the type 'text'. Validate that all values in (sensor_id) conform to the pattern 'SENSOR-XXXXXX' where 'XXXXXX' is a 6-digit alphanumeric code.
For field 'temperature_reading': Ensure the field matches the type 'decimal'. Validate that all values in (temperature_reading) are within the range of -50.0 to 150.0 degrees Celsius.
For field 'device_status': Ensure the field matches the type 'text'. Validate that all values in (device_status) must exist in the set ['Active', 'Inactive', 'Malfunctioning'].
For field 'data_timestamp': Ensure the field matches the type 'datetime'. Validate that (data_timestamp) adheres to the format 'YYYY-MM-DD HH:MM:SS' and is no older than 30 days from the current date.
For field 'json_payload': Ensure the field matches the type 'text'. Validate that all values in (json_payload) are valid JSON objects and conform to the specified JSON schema.
For field 'customer_feedback': Ensure the field matches the type 'text'. Validate that string lengths in (customer_feedback) fall within the range of 10 to 500 characters.
For field 'payment_method': Ensure the field matches the type 'text'. Validate that all values in (payment_method) must exist in the set ['Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer'].
For field 'booking_id': Ensure the field matches the type 'text'. Validate that all values in (booking_id) match the pattern 'BOOK-YYYYMMDD-XXXX' where 'YYYYMMDD' is the date and 'XXXX' is a 4-digit sequence.
For field 'location_coordinates': Ensure the field matches the type 'text'. Validate that all values in (location_coordinates) conform to the pattern 'Latitude,Longitude' where both are valid decimal values.
For field 'user_agent': Ensure the field matches the type 'text'. Validate that all values in (user_agent) do not match any patterns from a list of known malicious user agents.
Ensure the `patient_id` column contains only distinct values that conform to the specified pattern of alphanumeric strings with a length of 10.
For the `appointment_date` field, ensure all values match the format 'YYYY-MM-DD' and are not in the past.
Ensure the `blood_pressure` column values are within the range of 90 to 180 mmHg for systolic and 60 to 120 mmHg for diastolic readings.
For the `medication` field, ensure all entries are valid JSON objects that conform to the provided schema, including 'name', 'dosage', and 'frequency'.
Ensure the `diagnosis_code` column contains only values from the specified set of valid ICD-10 codes.
Ensure the `employee_id` column contains distinct values that are not null and adhere to the pattern 'EMP-XXXX' where X is a digit.
For the `hire_date` column, ensure all dates match the format 'MM/DD/YYYY' and are not later than today's date.
Ensure the `salary` column values are within the range of $30,000 to $150,000 and are arranged in increasing order.
For the `benefits` field, ensure all entries are valid JSON objects and include 'health', 'dental', and 'vision' as required fields.
Ensure the `department` column contains only values from the specified set: ['HR', 'Finance', 'Engineering', 'Sales'].
Ensure the `post_id` column contains unique values with the format 'PST-YYYY-MM-DD-XXXX' where X is a digit.
For the `published_date` field, ensure all datetime values match the format 'YYYY-MM-DD HH:MM:SS' and are not set in the future.
Ensure the `views` column values follow a normal distribution with a mean of at least 100 and a standard deviation not exceeding 50.
For the `tags` field, ensure all entries are valid JSON arrays containing only strings from the specified set: ['news', 'technology', 'health', 'finance'].
Ensure the `status` column values are limited to 'draft', 'published', or 'archived' and do not contain any other values.
Ensure the `account_number` column contains unique alphanumeric values with a length of 12.
For the `transaction_date` field, verify all datetime entries match the format 'DD/MM/YYYY' and are valid dates.
Ensure the `transaction_amount` column values are within the range of $0.01 to $1,000,000 and are arranged in decreasing order.
For the `transaction_details` field, ensure all entries are valid JSON objects with fields 'description', 'amount', and 'date' that conform to the specified schema.
Ensure the `currency` column contains only values from the specified set: ['USD', 'EUR', 'GBP', 'JPY'].
Ensure the `email` column contains values that conform to the standard email format and do not contain any null entries.
For the `phone_number` column, ensure values match the format '(XXX) XXX-XXXX' and are not empty.
Ensure the `age` column values are within the range of 18 to 100 and follow a normal distribution.
For the `json_data` field, ensure all entries are valid JSON objects that conform to the provided schema.
Ensure the `status` column values only include 'active', 'inactive', or 'pending' and do not contain any null values.
Ensure the `threat_level` column contains only valid values from the set `['Low', 'Medium', 'High']`.
For the `attack_date` field: Validate that all datetime strings conform to the format `'%Y-%m-%d %H:%M:%S'`.
Verify that the `ip_address` field contains only valid IPv4 addresses, and check that they do not exceed the reserved range.
Ensure the `incident_id` is unique and consists of alphanumeric characters only, matching the regex pattern `^[a-zA-Z0-9]+$`.
For `response_time`: Confirm that all entries are within the range of `0` to `300` seconds, and are arranged in increasing order.
Ensure the `payload_size` column contains values that are numeric and do not exceed the maximum limit of `65536` bytes.
For the `json_payload` field: Validate that all entries are valid JSON objects and conform to the specified schema.
Check that the `source_port` values are within the valid range of `1024` to `65535`.
Validate that the `timestamp` field entries can be parsed using dateutil and are not in the future.
Ensure the `alert_type` column contains only distinct values from the set `['Malware', 'Phishing', 'Intrusion']`.
Ensure the `temperature` values are within the range of `-50` to `50` degrees Celsius and are recorded in ascending order.
For the `forecast_date` field: Verify that all datetime strings match the format `'%Y-%m-%d'` and are not more than 7 days in the future.
Check that the `humidity` values are percentages and fall within the valid range of `0` to `100`.
Ensure the `precipitation` column contains only valid values from the set `['None', 'Rain', 'Snow', 'Sleet']`.
For the `wind_speed` field: Validate that entries are numeric and within the range of `0` to `150` km/h.
Ensure the `weather_conditions` column has no entries exceeding `50` characters and conforms to the specified condition types.
Check the `json_forecast` entries to ensure they are valid JSON objects and follow the designated schema.
Verify that the `pressure` values are numeric and fall within the range of `950` to `1050` hPa.
For the `observation_time` field: Confirm that all datetime entries are recorded in UTC and can be parsed correctly.
Ensure the `location_code` is unique and matches the regex pattern `^[A-Z]{3}$`.
Verify that the file `logs.csv` exists, matches the hash value `abc123`, and is less than `5MB`.
Ensure that the content of `data.json` is properly formatted as JSON and contains a valid table header.
For the file `weather_data.txt`: Check that it has no more than `1000` lines and conforms to the specified regex pattern for valid entries.
Ensure the `threat_reports.pdf` file exists and is greater than `1KB` but less than `10MB`.
Verify that the `alerts.csv` file contains valid headers and that each entry in the `alert_id` column is unique and matches the expected pattern.
Ensure the `course_id` column contains only distinct values matching the set `['C001', 'C002', 'C003']`.
Verify that the values in the `enrollment_date` column are within the range of `2020-01-01` to `2023-12-31`.
Ensure the `student_grade` column has a mean value between `70` and `90`.
Check that the `completion_time` for courses is arranged in increasing order.
Confirm that the `feedback_score` column contains no values outside the set `[1, 2, 3, 4, 5]`.
Ensure the `unique_student_count` column contains a minimum of `50` unique entries.
Verify that the median value of the `assignment_scores` column is above `75`.
Check that the `attendance_rate` for each course is not less than `80%`.
Ensure the `course_duration` column has a standard deviation under `5` weeks.
Confirm that the distribution of `final_exam_scores` passes the Chi-Square test with a p-value greater than `0.05`.
Ensure the `product_category` column contains only values from the set `['Electronics', 'Clothing', 'Home Goods']`.
Verify that the `price` column contains values that fall within the range of `$10` to `$1,000`.
Check that the sum of `sales` for the last quarter exceeds `$50,000`.
Confirm that the `discount_percentage` column only contains values from the set `[0, 5, 10, 15, 20]`.
Ensure the `customer_rating` column has a mean rating of at least `4.0`.
Check that the `order_quantity` for each product is listed in decreasing order.
Verify that the standard deviation of the `shipping_cost` column is no more than `$15`.
Ensure that the `unique_product_count` column has at least `100` distinct values.
Confirm that the distribution of `purchase_amounts` has a Kullback-Leibler divergence below `0.1`.
Check that the `return_rate` for products is less than `10%`.
Ensure that the `course_feedback` column has unique values that match the set `['Excellent', 'Good', 'Average', 'Poor']`.
Verify that the values in the `order_date` column are within the range of `2021-01-01` to `2023-12-31`.
Confirm that the median of `student_satisfaction` scores is above `4`.
Check that the `inventory_level` for each product is arranged in increasing order.
Ensure the `transaction_fee` column has a standard deviation of less than `$5`.
Ensure the `device_status` column contains only distinct values matching `['Active', 'Inactive', 'Faulty']`.
Ensure values in the `battery_level` column are within the range of 0 to 100, and the distribution is in decreasing order.
Verify that the average `temperature_reading` in the last 24 hours does not exceed 75 degrees Fahrenheit.
For the `device_id` and `timestamp` columns: Ensure the combination is unique within each record.
Ensure the `signal_strength` values are not less than -100 dBm and not greater than -50 dBm.
Ensure the `student_grade` column values are between 0 and 100, and the median is at least 75.
Verify that the `course_id` values exist in the predefined set of course identifiers: `['CS101', 'MATH202', 'BIO303']`.
For the `enrollment_date` and `completion_date` columns: Ensure `completion_date` is always greater than `enrollment_date`.
Ensure the `attendance_percentage` column has a standard deviation of less than 10%.
Ensure the total `credits_completed` for each `student_id` matches the expected value of 120.
Ensure the `transaction_type` column contains only values from the set `['Deposit', 'Withdrawal', 'Transfer']`.
Verify that the `transaction_amount` values are above 0 and below 1,000,000 for all records.
For the `wallet_balance` column: Ensure the sum of all balances matches the expected total of 10,000,000 units.
Ensure that the `timestamp` field is in increasing order across all transactions.
Verify that the `user_id` and `transaction_id` combination is unique within each record.
Ensure the `humidity` column values are between 0 and 100, and the average humidity is not greater than 70%.
Verify that the `temperature` readings are consistent with the expected values from the weather model in the `expected_temperature` column.
For the `wind_speed` and `temperature` columns: Ensure that wind speed is always less than or equal to temperature in miles per hour.
Ensure that the `precipitation` column contains distinct values matching the set `['None', 'Light', 'Moderate', 'Heavy']`.
Verify that the maximum `temperature` recorded in the last month does not exceed the threshold of 100 degrees Fahrenheit.
For the `user_activity` and `login_time` columns: Ensure that all `login_time` values are greater than the `last_logout_time` values.
Ensure the `product_price` and `discount` columns: The final price after discount must not be less than 0.
Verify that the combined total of `sales` and `returns` does not exceed the `inventory` count in the respective records.
Ensure that the average `response_time` in the `support_tickets` dataset is less than 24 hours.
For the `age` and `income` columns: Ensure that the average income is positively correlated with age across the dataset.
Ensure the `sensor_id` column contains only unique values that match the predefined set of active sensor IDs: `['SENSOR_001', 'SENSOR_002', 'SENSOR_003']`.
For the `temperature` field: Ensure values are within the range of -40 to 125 degrees Celsius and are arranged in increasing order.
Verify that the `battery_level` column contains values that are not less than 0% and not greater than 100%.
For the `device_status` field: Ensure all entries are from the set `['active', 'inactive', 'maintenance']`.
Ensure that the `data_timestamp` column contains timestamps that are within the last 30 days.
For the `game_rating` column: Ensure that all ratings fall within the range of 1 to 10, and check that the average rating does not drop below 7.
Verify that the `platform` field contains only distinct values from the set `['PC', 'Console', 'Mobile']`.
Ensure the `release_date` column contains dates that are in chronological order and do not exceed the current date.
For the `player_count` field: Ensure the sum of all entries is greater than 1000 and the maximum player count does not exceed 500.
Check that the `download_size` column contains sizes that fall within the range of 50 MB to 5 GB.
For the `course_id` field: Ensure it contains unique values that correspond to an existing set of course identifiers.
Ensure the `enrollment_count` column has values that are greater than or equal to 0 and the average enrollment count does not exceed 100.
Verify that the `completion_percentage` values are between 0% and 100% and check for any duplicates.
For the `feedback_score` column: Ensure the mean score is at least 4 and the standard deviation does not exceed 1.5.
Check that the `assignment_submission_date` column contains all dates that are not in the future and are in increasing order.
For the `customer_id` column: Ensure it contains only unique values that match the predefined set of active customer IDs.
Verify that the `call_duration` values are within the range of 0 to 3600 seconds and the sum of all durations exceeds 1000 hours.
Ensure the `plan_type` field contains only values from the set `['basic', 'premium', 'family']`.
For the `monthly_bill` column: Ensure all entries are greater than 0 and check that the average bill does not exceed $150.
Check that the `data_usage` column contains values that are within the range of 0 to 500 GB.
For the `invoice_number` column: Ensure all entries are unique and follow the regex pattern of `INV-[0-9]{4}`.
Verify that the `total_amount` field contains values that are greater than 0 and the sum of all amounts does not exceed $1,000,000.
Ensure the `employee_id` column contains values from the set of active employee IDs and there are no duplicates.
For the `order_date` column: Ensure all dates are in chronological order and do not exceed the current date.
Check that the `inventory_count` column contains values that are not negative and the maximum inventory count does not exceed 10,000.
Verify that the `temperature` column contains only values within the range of [-50, 50] degrees Celsius.
Ensure the `humidity` percentage in the `humidity` column lies between [0, 100] and is presented in increasing order over time.
For the `precipitation` column: Confirm that all values are non-negative and do not exceed 300 mm.
Check that the `wind_speed` values in the column are from the predefined set `['Calm', 'Breezy', 'Windy', 'Stormy']`.
Ensure that the `weather_condition` column contains distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']` and does not include any other conditions.
Validate that the `pressure` column values fall within the range of [950, 1050] hPa and maintain a decreasing trend.
For the `forecast_time` field, confirm that all timestamps are in the ISO 8601 format and within the next 7 days.
Ensure that the `region` column contains valid entries from the set `['North', 'South', 'East', 'West']` and that there are no duplicates.
Verify the `visibility` values are within the range of [0, 100] kilometers and do not include any outliers.
Check that the `UV_index` column only contains values from the set `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`.
Ensure the `video_duration` field only includes values in the range of [0, 7200] seconds.
For the `user_rating` column, confirm that all ratings are within the defined set of `[1, 2, 3, 4, 5]`.
Validate that the `release_year` values in the column are within the range [2000, 2023] and are presented in increasing order.
Check that the `content_genres` field contains values from the set `['Action', 'Drama', 'Comedy', 'Horror', 'Documentary']`.
Ensure that the `subscription_tiers` column contains distinct values from the set `['Free', 'Basic', 'Premium']`.
For the `view_count` column, ensure that all values are non-negative integers and do not exceed 1,000,000.
Verify that the `user_id` column contains unique identifiers and does not include any duplicates.
Check that the `video_quality` values are from the set `['144p', '360p', '480p', '720p', '1080p']`.
Ensure the JSON structure of the `video_metadata` field is valid and contains the required keys: `title`, `duration`, and `genre`.
Validate that the `upload_date` field contains timestamps in the format 'YYYY-MM-DD' and are within the last 5 years.
Verify that the `post_type` column contains only values from the set `['Text', 'Image', 'Video']`.
Ensure the `likes_count` field contains only non-negative integers and does not exceed 10,000.
For the `followers_count` column, confirm that all values are within the range [0, 1,000,000] and are in increasing order.
Check that the `post_date` field contains valid timestamps and all entries are within the last 30 days.
Validate that the `usernames` column contains unique usernames and does not exceed 15 characters in length.
Ensure the `patient_age` column contains only values within the range of 0 to 120.
For field `medication_dosage`: Ensure values are from the set `['5mg', '10mg', '20mg']` and not null.
For the `appointment_date` and `follow_up_date` fields: Ensure `follow_up_date` is always greater than `appointment_date`.
Verify that the `diagnosis_code` in the `patient_records` table consists of valid codes only from the set `['A00', 'B01', 'C02']`.
Check that the sum of values in the `treatment_cost` and `medication_cost` columns equals the value in `total_cost`.
Ensure the `case_status` field only contains values from the set `['Open', 'Closed', 'Pending']`.
For the `filing_date` and `hearing_date` fields: Ensure `hearing_date` is always greater than `filing_date`.
Check that the combination of `case_id` and `lawyer_id` is unique across all records in the `case_assignments` table.
Verify that the `case_type` column contains valid entries from the set `['Civil', 'Criminal', 'Family']`.
Ensure the `evidence_file` exists and matches the expected hash value `abc123xyz`.
For the `meter_reading` column: Ensure values are within the range of 0 to 10,000.
Verify that the `energy_consumption` column contains only entries from the set `['Low', 'Medium', 'High']`.
Ensure that the `start_date` and `end_date` in the `billing_period` are in increasing order.
Check that the sum of `water_usage` and `electricity_usage` columns equals the `total_usage` in the `usage_summary` table.
For the `service_status`: Ensure it contains only values from the set `['Active', 'Inactive', 'Suspended']`.
Ensure the `post_category` column contains only distinct values from the set `['News', 'Blog', 'Tutorial']`.
For the `publish_date` and `last_updated` fields: Ensure `last_updated` is always greater than `publish_date`.
Verify that the `author_id` and `post_id` combination is unique within the `posts` table.
Check that the `tags` field contains valid tags only from the set `['Technology', 'Health', 'Education']`.
For the `content_file`: Ensure the file exists and does not exceed a size of 5MB.
Ensure that the `email_address` in both `users` and `patients` tables are unique across the datasets.
For the `submission_date` in legal cases and `registration_date` in healthcare: Ensure `submission_date` is greater than `registration_date`.
Verify that the `energy_price` in the energy management system is within the range of $0.05 to $0.50.
For the `document_version` in CMS, ensure it follows a numeric sequence without gaps across all documents.
Check that the `file_format` in the `uploads` table matches the expected values from the set `['PDF', 'DOCX', 'TXT']`.
Ensure the `student_email` column contains valid email formats by confirming values match the regex pattern `^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$`.
For the `course_code` field: Validate that all entries are exactly 6 characters long and match the pattern `^[A-Z]{3}[0-9]{3}$`.
Ensure the `enrollment_date` field contains dates in the format `YYYY-MM-DD` and does not include any future dates.
For the `grade` column: Validate that values are within the range of 0 to 100 and that the average grade does not exceed 90.
Confirm that the `student_id` column contains unique values and matches the regex pattern `^S[0-9]{5}$`.
Ensure the `product_sku` column contains distinct values and matches the regex pattern `^[A-Za-z0-9]{8,12}$`.
For the `price` column: Validate that the mean price is greater than 10 and less than 500, with a standard deviation not exceeding 100.
Ensure the `discount_code` column does not contain values that match the pattern `^(.*admin.*|.*test.*)$`.
Validate that the `order_date` field contains dates in the format `MM/DD/YYYY` and does not include any entries older than five years.
For the `category` column: Ensure it contains only values from the defined set `['Electronics', 'Clothing', 'Home']`.
Ensure the `employee_id` column contains unique identifiers matching the pattern `^E[0-9]{4}$`.
Validate the `hire_date` field to ensure all dates are in the format `YYYY-MM-DD` and fall within the last 20 years.
For the `salary` column: Confirm that the maximum salary recorded does not exceed $200,000 and the average salary is greater than $50,000.
Ensure the `department` field contains values from the defined list `['HR', 'IT', 'Sales']` and does not include any null entries.
For the `performance_rating` column: Validate that all values fall within the range of 1 to 5 and that the median rating is at least 3.
Ensure the `product_name` column does not contain values that match the regex pattern `.*[^a-zA-Z0-9\s].*`.
Validate that the `stock_quantity` column contains only positive integers and that the total stock does not exceed 10,000.
For the `supplier_id` field: Ensure all entries are unique and match the pattern `^SUP[0-9]{3}$`.
Check that the `price_per_unit` field has a mean value greater than $5 and a standard deviation less than $2.
Ensure the `category` column contains only values from the distinct set `['Food', 'Beverage', 'Electronics']`.
Validate that the `email` column across all domains matches the format defined by the regex pattern `^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$`.
Ensure the `phone_number` field in HRMS and E-commerce datasets matches the regex pattern `^\+?[1-9]\d{1,14}$`.
For the `created_at` date fields across all domains, validate they are in the standard format `YYYY-MM-DD HH:MM:SS` and not in the future.
Ensure that the `review_score` column in E-commerce and LMS data sets contains only integer values between 1 and 5.
For the `transaction_id` field across domains, ensure that it matches the regex pattern `^TX[0-9]{8}$` and that all entries are unique.
For field 'employee_id': Ensure the field matches the type 'integer'. Ensure values in (employee_id) are unique across records within the dataset.
For field 'email_address': Ensure the field matches the type 'text'. Validate that all values in (email_address) conform to the standard email format using the regex pattern '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}' and are not null.
For fields 'start_date' and 'end_date': Ensure that values in (end_date) are greater than values in (start_date) for all records.
For field 'department': Ensure the field matches the type 'text'. Ensure values in (department) must exist in the predefined list ['Sales', 'HR', 'IT', 'Finance'].
For field 'phone_number': Validate that all string values in (phone_number) conform to the pattern '^\\+?[0-9]{10,15}$' and do not contain any letters.
For field 'wallet_address': Ensure the field matches the type 'text'. Validate that all values in (wallet_address) conform to the regex pattern '^(0x)?[0-9a-fA-F]{40}$' and are not null.
For fields 'transaction_amount' and 'transaction_fee': Ensure that the values in (transaction_fee) are less than or equal to values in (transaction_amount) for all records.
For field 'block_number': Ensure the field matches the type 'integer'. Validate that values in (block_number) are unique and greater than zero.
For field 'timestamp': Validate that all values in (timestamp) conform to the format 'YYYY-MM-DD HH:MM:SS' and are not in the future.
For field 'currency_type': Ensure the field matches the type 'text'. Ensure values in (currency_type) must exist in the predefined list ['BTC', 'ETH', 'LTC'].
For field 'content_id': Ensure the field matches the type 'uuid'. Ensure values in (content_id) are unique and follow the UUID format.
For field 'duration': Ensure the values in (duration) are greater than zero and less than 300 minutes.
For field 'release_date': Validate that all values in (release_date) are in the format 'YYYY-MM-DD' and are not in the future.
For field 'genre': Ensure the field matches the type 'text'. Ensure values in (genre) must exist in the predefined list ['Drama', 'Comedy', 'Action', 'Documentary'].
For fields 'view_count' and 'like_count': Ensure the values in (view_count) are greater than or equal to values in (like_count) for all records.
For field 'product_code': Ensure the field matches the type 'text'. Validate that all values in (product_code) conform to the pattern '^[A-Z]{3}-[0-9]{3}$' and are unique.
For fields 'order_date' and 'delivery_date': Ensure that values in (delivery_date) are greater than values in (order_date) for all records.
For field 'supplier_id': Ensure the field matches the type 'integer'. Ensure values in (supplier_id) must exist in the list of valid supplier IDs and are not null.
For field 'quantity': Validate that all values in (quantity) are integers greater than zero.
For field 'shipping_method': Ensure the field matches the type 'text'. Ensure values in (shipping_method) must exist in the predefined list ['Air', 'Sea', 'Land'].
For field 'player_id': Ensure the field matches the type 'integer'. Validate that values in (player_id) are unique and greater than zero.
For field 'match_date': Ensure the field matches the type 'date'. Validate that all values in (match_date) are in the format 'YYYY-MM-DD' and are not in the future.
For fields 'home_score' and 'away_score': Ensure that the values in (home_score) and (away_score) are non-negative integers and that they sum to a maximum of 300 across all records.
For field 'team_name': Ensure the field matches the type 'text'. Ensure values in (team_name) must exist in the predefined list ['Team A', 'Team B', 'Team C'].
For field 'performance_rating': Validate that all values in (performance_rating) are within the range of 0 to 10 and of type 'float'.
Ensure the `forecast_date` column adheres to the datetime format 'YYYY-MM-DD'.
Ensure that the `temperature` column values fall within the range of -50 to 50 degrees Celsius.
For the `precipitation` column: Ensure the mean value is between 0 and 100 mm.
Ensure that the `humidity` percentage values are unique and fall within the range of 0 to 100.
Ensure the `weather_condition` column contains only distinct values from `['Sunny', 'Rain', 'Snow']`.
For the `wind_speed` column: Ensure the standard deviation is less than or equal to 15 km/h.
Ensure that the `sent_time` column matches the strftime format '%Y-%m-%d %H:%M:%S'.
Ensure that the `email_body` column contains valid JSON objects conforming to the specified schema.
Ensure the `attachment_size` column has values with a maximum sum not exceeding 50 MB.
For the `read_status` column: Ensure the unique value count matches `['Read', 'Unread']`.
Ensure that the `response_time` values have a median less than or equal to 24 hours.
Ensure that the distribution of `spam_score` passes the Chi-Square test with a p-value greater than 0.05.
Ensure the `check_in_date` column adheres to the datetime format 'YYYY-MM-DD'.
Ensure that the `room_rate` column has values with a minimum of $50 and a maximum of $500.
For the `guest_count` column: Ensure the mean value is between 1 and 10.
Ensure the `amenities` column contains valid JSON arrays conforming to the specified schema.
Ensure that the `booking_source` column only includes distinct values from `['Website', 'App', 'Phone']`.
Ensure the standard deviation of the `customer_rating` column is less than or equal to 1.5.
Ensure the `departure_time` column matches the strftime format '%Y-%m-%d %H:%M:%S'.
Ensure that the `shipment_weight` column has values that fall within the range of 1 to 2000 kg.
For the `delivery_status` column: Ensure the distribution passes the KS test with a p-value greater than 0.05.
Ensure that the `tracking_number` column contains unique values formatted as valid JSON strings.
Ensure that the `route_distance` column's sum does not exceed 1000 km for any given month.
Ensure the unique value count of the `vehicle_type` column matches `['Truck', 'Van', 'Bicycle']`.
For the `arrival_time`: Ensure values are parsed correctly and fall within the expected delivery window.
Ensure the `match_date` column contains valid datetime strings conforming to the format 'YYYY-MM-DD HH:MM:SS'.
Ensure the `player_stats` column values are valid JSON objects and conform to the specified schema, including keys for `points`, `assists`, and `rebounds`.
Check that the `player_age` values are greater than zero and less than or equal to 50.
For field `team_id`: Ensure all values in `team_id` exist in the reference `teams` table.
Verify that the distribution of `player_scores` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `enrollment_date` column values match the datetime format 'YYYY-MM-DD'.
Check that the `grades` column contains values that fall within the range of 0 to 100.
Ensure that for every `course_id`, the combination of `student_id` and `course_id` is unique within the dataset.
Validate that the `assignment_submissions` column contains valid JSON objects that include keys for `submission_time` and `feedback`.
Check that the average `student_scores` across all courses conforms to a normal distribution with a significance level of 0.05.
Ensure the `delivery_date` column contains valid datetime values that are not in the past.
Validate that the values in the `route_data` column are valid JSON objects, conforming to the specified schema, including keys for `start_location` and `end_location`.
Ensure that the `weight` column values are non-negative and do not exceed 5000 kg.
For field `vehicle_id`: Ensure all values in `vehicle_id` exist in the reference `vehicles` table.
Check that the sum of `item_weight` and `packaging_weight` equals the total `shipment_weight` for each record.
Ensure the `policy_start_date` conforms to the datetime format 'YYYY-MM-DD'.
Validate that the `claims` column contains valid JSON objects, with structures that include `claim_id`, `claim_amount`, and `claim_date`.
Check that the `premium_amount` is greater than zero and less than or equal to the maximum defined limit.
For field `insured_item_id`: Ensure that each `insured_item_id` matches an existing record in the `items` table.
Verify that the distribution of `claim_amounts` passes the Chi-Square test with a significance level of 0.05.
Ensure the `transaction_date` column values are valid datetime strings that can be parsed using dateutil.
Validate that the `transaction_details` column contains valid JSON objects with keys such as `amount` and `merchant_id`.
Ensure that the `transaction_amount` is greater than zero and falls within the expected range of transaction values.
For field `user_id`: Ensure that the combination of `user_id` and `transaction_date` is unique across records.
Check that the Kullback-Leibler divergence between `transaction_amount` distributions for different user segments is below 0.1.
Ensure the `release_date` column matches the format 'YYYY-MM-DD' and all values are valid dates.
Verify that the `game_rating` column contains only valid JSON objects that conform to the specified schema, including fields like 'rating' and 'review_count'.
Ensure the average playtime in the `play_time` column falls within the range of 1 to 500 hours.
For the `player_scores` column: Ensure all entries are integers and are within the range of 0 to 100.
Check that the `platforms` column contains distinct values from the set ['PC', 'Xbox', 'PlayStation', 'Nintendo'] and is not null.
Ensure the `order_date` column adheres to the 'YYYY-MM-DD HH:MM:SS' format and contains no invalid dates.
Verify that the `product_details` column contains valid JSON objects with required keys such as 'name', 'price', and 'description'.
Check that the distribution of `purchase_amount` follows a normal distribution with a mean greater than $20.
Ensure the `customer_feedback` column contains text responses that do not exceed 500 characters in length.
For the `product_id` column: Ensure all values are unique and follow the specified alphanumeric pattern.
Ensure the `case_opened` column matches the format 'YYYY-MM-DD' and all dates are in the past or present.
Verify that the `evidence` column consists of valid JSON objects that include required fields like 'type' and 'description'.
Check that the `case_outcome` column values are uniformly distributed across the categories: ['Won', 'Lost', 'Settled']. Ensure no category has more than 70% of total cases.
Ensure the `hearing_date` column contains dates that are all in the future and match the 'YYYY-MM-DD' format.
For the `case_id` column: Ensure all entries are unique, match the defined UUID format, and are not null.
Ensure the `ballot_submission_time` column follows the 'YYYY-MM-DD HH:MM:SS' format and all timestamps are valid.
Verify that the `voter_information` column contains valid JSON objects with required keys like 'name' and 'voter_id'.
Check the distribution of `votes_cast` to ensure that the results pass the Chi-Square test with a p-value greater than 0.05.
Ensure the `polling_station` column contains distinct values from the predefined list of valid polling locations.
For the `voter_age` column: Ensure all values are integers between 18 and 120.
Ensure all files listed in the `data_files` column exist and match the specified SHA-256 hash.
Verify that the lines in the `logs` file do not exceed 1000 characters and include valid headers.
Check the size of the `transaction_data.csv` file is between 1KB and 10MB and that it contains valid CSV formatting.
Ensure that the JSON data in the `config` column adheres to the specified JSON schema, with no missing required fields.
For the `user_activity` file: Validate that all timestamps are in ISO 8601 format and are not from the future.
Ensure the `property_type` column contains only distinct values matching `['Apartment', 'House', 'Condo']`.
Ensure the mean value of the `listing_price` column is between $250,000 and $500,000.
Ensure the `number_of_bedrooms` column values are greater than or equal to 1.
Ensure the sum of the `square_footage` and `lot_size` columns matches the expected total area of the property.
Ensure the `year_built` column has a minimum value of 1900 and a maximum value of the current year.
Ensure the `delivery_time` column values are between 1 and 30 days.
Ensure the standard deviation of the `shipment_weight` column is below 100 kg.
Ensure the `origin_state` and `destination_state` columns have unique combinations across records.
Ensure the `freight_cost` column has unique values that fall within the defined range of $100 to $1,000.
Ensure the `estimated_arrival` dates are always later than the `dispatch_date`.
Ensure the `employment_type` column contains only distinct values matching `['Full-time', 'Part-time', 'Contract']`.
Ensure the median of the `employee_age` column is between 30 and 45.
Ensure the sum of the `base_salary` and `bonus` columns matches the `total_compensation` column for each employee.
Ensure the unique value count of the `department` column is equal to the number of distinct departments defined in the organization.
Ensure the `hire_date` column values are all prior to the `termination_date` for active employees.
Ensure the maximum temperature values in the `temperature` column do not exceed 50 degrees Celsius.
Ensure the mean of the `precipitation_mm` column is greater than or equal to 0 across all recorded days.
Ensure the unique values in the `weather_condition` column match the defined set: `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.
Ensure the `humidity` column values are within the range of 0% to 100%.
Ensure the `wind_speed` column has a standard deviation that does not exceed 20 km/h.
Ensure the data file for `real_estate_listings.csv` exists and matches the specified hash value.
Ensure the `transport_data.json` file contains valid JSON formatting and has no more than 5000 lines.
Ensure the header of the `employee_records.csv` file contains valid columns: `['employee_id', 'name', 'department', 'hire_date']`.
Ensure the size of the `weather_data.xlsx` file falls within the range of 1 MB to 10 MB.
Ensure that the `forecast_data.csv` file contains at least one record for each day of the past year.
Ensure the `customer_id` column contains only unique values and is of type 'integer'. Ensure this field is required (not null).
For the `email` field: Ensure all entries match the format of a valid email address and do not contain any null values.
Verify that the `signup_date` field contains only valid datetime entries formatted as 'YYYY-MM-DD'. Ensure there are no missing values.
Check that the `status` column contains only values from the set `['Active', 'Inactive', 'Pending']` and is of type 'text'.
For the `phone_number` field: Ensure values are numeric and follow the format '(XXX) XXX-XXXX'. Ensure this field is required (not null).
Ensure the `case_number` column has a unique value for each entry and is of type 'text'. Ensure there are no null values.
For the `filing_date` field: Verify that all entries adhere to the 'MM/DD/YYYY' format and check for any missing values.
Check that the `jurisdiction` column contains only values from the specified set `['Federal', 'State', 'Local']` and is not nullable.
Ensure the `case_status` field only contains the values `['Open', 'Closed', 'Pending', 'Dismissed']` and is of type 'text'.
For the `client_id` field: Ensure this column exists and contains integer values that are unique across the dataset.
Ensure the `property_id` column contains only distinct values and is of type 'integer'. This field must not contain null entries.
For the `listing_date` field: Validate that all entries are formatted as 'YYYY-MM-DD' and check for any missing values.
Check that the `property_type` column contains only allowed values from the set `['Residential', 'Commercial', 'Industrial']`.
Ensure the `price` field contains only numeric values within the range of $0 to $10,000,000 and is not nullable.
For the `location` field: Ensure it is of type 'text' and contains no missing values.
Ensure the `device_id` column contains only unique values and is of type 'text'. Ensure there are no null entries.
For the `timestamp` field: Verify that all entries are valid datetime strings matching the format 'YYYY-MM-DD HH:MM:SS' and check for missing values.
Check that the `sensor_type` column contains only values from the set `['Temperature', 'Humidity', 'Pressure']`.
Ensure the `value` field contains only numeric entries within the range of -100 to 100 and is not nullable.
For the `location` field: Ensure it exists and that values must adhere to the format of valid GPS coordinates.
Ensure the `subscriber_id` column has unique values and is of type 'integer'. This field must not contain null values.
For the `activation_date` field: Validate that all entries are formatted as 'DD-MM-YYYY' and check for any missing values.
Check that the `plan_type` column contains only values from the specified set `['Prepaid', 'Postpaid']`.
Ensure the `data_limit` field contains only numeric values greater than 0 and is not nullable.
For the `contact_number` field: Ensure this column exists and contains values formatted as '(XXX) XXX-XXXX', with no null entries.
Ensure the `customer_id` column contains unique values with no null entries.
Check that the `signup_date` column has values in the format 'YYYY-MM-DD' and contains no missing values.
For the `customer_status` field: Ensure this field exists and contains only values from the set `['Active', 'Inactive', 'Prospect']`.
Ensure the number of rows in the `customer_orders` table is equal to the number of entries in the `customers` table.
Ensure the `email` column values are in a valid format and contain no duplicates.
For the `player_id` field: Ensure this field exists and contains only unique values.
Ensure the `games_played` column values are within the range of 0 to 82, inclusive.
Verify that the distribution of `points_scored` follows a normal distribution with a p-value greater than 0.05.
Ensure the `team_id` column contains values that exist in the `teams` table.
Check that the `injury_status` column can only contain values from the set `['Healthy', 'Injured', 'Suspended']`.
Ensure the `product_id` column contains unique values and does not include any null entries.
Verify that the `stock_quantity` values are between 0 and 1000.
For the `category` field: Ensure this field matches the type 'text' and contains only values from the set `['Electronics', 'Clothing', 'Groceries']`.
Ensure the `purchase_date` column has values in the correct date format and contains no missing values.
Check that the `price` column values have a mean greater than 10 and less than 500, ensuring a reasonable distribution.
Ensure the `game_id` column contains unique values and exists without null entries.
Verify that the `release_date` is within the last two years and formatted as 'YYYY-MM-DD'.
For the `genre` field: Ensure this field exists and contains values from the set `['Action', 'Adventure', 'Role-playing']`.
Check that the `user_rating` column values are within the range of 1 to 10.
Ensure that the distribution of `playtime_hours` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure that the `transaction_id` column in the `sales` table contains unique values and matches the column in `payments` table.
For the `age` field: Ensure this field exists and contains values within the range of 18 to 65.
Check the `feedback_score` column to ensure it follows a uniform distribution with a KL divergence below 0.1.
Ensure the `subscription_type` field has only values from the set `['Free', 'Basic', 'Premium']`.
Verify that the `event_date` column in the `events` table contains valid dates and is not empty.
Ensure the `device_id` column contains only unique values and does not allow null entries.
For the `temperature_reading` field: Ensure the values are within the range of -50 to 150 degrees Celsius.
Verify that the number of rows in the `sensor_data` table is equal to the number of entries in the `devices` table.
Ensure the `battery_level` column does not contain any missing values and that all values are integers.
For the `timestamp` field, ensure the values are in increasing order without any duplicates.
Ensure the `customer_id` field contains only unique values and is of type 'text'.
For the `usage_kwh` column: Ensure all values are greater than or equal to zero and do not contain nulls.
Verify that the `billing_date` column contains values that fall within the range of the last 12 months.
Ensure the `meter_reading` values are arranged in decreasing order across the `meter_id` column.
For the `contract_start_date` and `contract_end_date`, ensure that all `contract_end_date` values are greater than their corresponding `contract_start_date` values.
Ensure the `case_number` column has unique values and does not allow null entries.
For the `case_status` field: Ensure the values are from the set `['Open', 'Closed', 'Pending']`.
Verify that the number of rows in the `court_cases` table matches the number of entries in the `clients` table.
Ensure the `filing_date` column is of type 'date' and contains no missing values.
For the `judgment_amount`, ensure the sum of values across all records matches the expected total amount for the current year.
Ensure the `video_id` column contains only distinct values and does not allow null entries.
For the `view_count` field: Ensure the values are integers and greater than or equal to zero.
Verify that the `release_date` values are in increasing order and fall within the last 5 years.
Ensure the `category` column contains only values from the specified set `['Action', 'Drama', 'Comedy', 'Documentary']`.
For the `rating` column, ensure all values are within the range of 1 to 5 and are not null.
Ensure the `transaction_id` column contains unique values and is of type 'text'.
For the `amount` field: Ensure all values are positive numbers and do not contain missing values.
Verify that the `timestamp` column contains values that are in increasing order without duplicates.
Ensure the `currency_type` values are from the specified set `['BTC', 'ETH', 'XRP', 'LTC']`.
For the `sender_address` and `receiver_address`, ensure that combinations of these values are unique within the transaction records.
For field 'order_id': Ensure this field exists. Ensure the field matches the type 'integer'. Ensure values in 'order_id' are unique.
For the table 'inventory': Ensure the number of rows is between 100 and 1000. Ensure the column 'product_id' exists and matches the type 'text'.
For field 'delivery_date': Ensure this field is not null. Ensure values in 'delivery_date' are in the date format 'YYYY-MM-DD'.
For field 'supplier_location': Ensure this field matches the type 'text'. Ensure the values in 'supplier_location' must exist in the set of valid locations (location_list).
For the table 'purchase_orders': Ensure the columns match the specified set ('order_id', 'product_id', 'quantity', 'order_date') in that order.
For field 'quantity': Ensure the values in 'quantity' are within the range of 1 to 1000. Ensure this field exists.
For the table 'shipping_logs': Ensure the number of rows is equal to the row count in 'inventory'. Ensure that 'tracking_number' is unique.
For field 'product_category': Ensure this field exists. Ensure values in 'product_category' must not exist in the set of invalid categories (invalid_category_list).
For field 'transaction_id': Ensure this field exists. Ensure the field matches the type 'string'. Ensure values in 'transaction_id' are unique.
For the table 'block_data': Ensure the number of rows is between 1 and 10000. Ensure the column 'block_number' exists and matches the type 'integer'.
For field 'timestamp': Ensure this field is not null. Ensure values in 'timestamp' are in the format 'UNIX epoch time'.
For field 'coin_type': Ensure this field matches the type 'text'. Ensure values in 'coin_type' must exist in the set of valid cryptocurrencies (cryptocurrency_list).
For the table 'wallet_balances': Ensure the columns match the specified set ('wallet_address', 'balance', 'last_updated') in that order.
For field 'balance': Ensure the values in 'balance' are within the range of 0 to 1,000,000. Ensure this field exists.
For the table 'smart_contracts': Ensure the number of rows is equal to the row count in 'active_contracts'. Ensure 'contract_address' is unique.
For field 'user_id': Ensure this field exists. Ensure the field matches the type 'string'. Ensure values in 'user_id' are unique.
For the table 'transaction_logs': Ensure the number of rows is between 500 and 5000. Ensure the column 'transaction_amount' exists and matches the type 'float'.
For field 'transaction_date': Ensure this field is not null. Ensure values in 'transaction_date' are in the date format 'YYYY-MM-DD'.
For field 'fraud_flag': Ensure this field matches the type 'boolean'. Ensure values in 'fraud_flag' must exist in the set {true, false}.
For the table 'alerts': Ensure the columns match the specified set ('alert_id', 'user_id', 'alert_type', 'created_at') in that order.
For field 'transaction_amount': Ensure the values in 'transaction_amount' are within the range of 0 to 10,000. Ensure this field exists.
For the table 'user_activity': Ensure the number of rows is equal to the row count in 'suspicious_activity'. Ensure 'activity_id' is unique.
For field 'verification_status': Ensure this field exists. Ensure values in 'verification_status' must not exist in the set of invalid statuses (invalid_status_list).
For file 'transactions.csv': Ensure the file exists and matches the hash value 'abc123xyz'. Ensure the file size is between 1KB and 5MB.
For file 'users.json': Ensure the file exists. Ensure the JSON structure has valid table headers and contains no more than 1000 entries.
Ensure the `property_id` column contains only unique values and does not include null entries.
Verify that the `listing_date` column values adhere to the format 'YYYY-MM-DD' and can be successfully parsed using dateutil.
Check that the number of rows in the `properties` table is equal to 150, ensuring all listings are accounted for.
Ensure that the `price` column values are numeric and fall within the range of 50,000 to 5,000,000.
For the `location` field: Verify that it is of type 'text' and contains no missing values.
Ensure the `research_id` column contains only distinct values and is not null.
Verify that the `publication_date` column values are in the format 'MM-DD-YYYY' and can be parsed correctly.
Check that the count of rows in the `studies` table matches the row count in the `results` table.
Ensure that the `response_time` column values are within the range of 1 to 60 minutes.
For the `data_format` field: Validate that it is of type 'text' and conforms to the specified JSON schema.
Ensure the `account_number` column contains unique values and no null entries.
Verify that the `transaction_date` column values match the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.
Check that the total number of rows in the `transactions` table falls between 1,000 and 10,000.
Ensure that the `balance` column values are numeric and greater than or equal to zero.
For the `transaction_type` field: Ensure it matches the type 'text' and only includes values from the set `['Debit', 'Credit']`.
Ensure that the `voter_id` column contains only unique values and is not null.
Verify that the `election_date` column values are in the format 'YYYY-MM-DD' and can be parsed correctly.
Check that the count of rows in the `voter_registration` table is equal to the count in the `votes_cast` table.
Ensure that the `age` column values are numeric and fall within the range of 18 to 120.
For the `ballot_data` field: Validate that it is a valid JSON object and conforms to the specified JSON schema.
Ensure the `station_id` column contains unique values and does not include any null entries.
Verify that the `forecast_date` column values match the format 'DD/MM/YYYY' and can be successfully parsed using dateutil.
Check that the number of rows in the `temperature_readings` table is between 365 and 730, accounting for daily readings over two years.
Ensure that the `precipitation` column values are numeric and fall within the range of 0 to 500 mm.
For the `weather_conditions` field: Ensure it is of type 'text' and contains only valid values from the set `['Sunny', 'Rainy', 'Cloudy', 'Stormy']`.
For field 'transaction_id': Ensure this field exists. Verify that it contains unique values and is of type 'text'.
For field 'block_timestamp': Ensure values are in valid datetime format matching '%Y-%m-%d %H:%M:%S'. Confirm there are no missing values.
For field 'user_address': Ensure this field is required (not null). Validate that all values conform to the expected address format.
Verify that the 'transactions' table has exactly 1000 rows. Ensure this matches the count in the 'verified_transactions' table.
For field 'gas_price': Ensure the field matches the type 'float'. Confirm that all values are non-negative and not null.
For field 'order_id': Ensure this field exists and contains unique values. Verify it matches the type 'text'.
For field 'order_date': Validate that all entries are valid datetime strings conforming to '%Y-%m-%d'. Ensure there are no missing values.
For field 'customer_email': Ensure it is required (not null) and matches the type 'text'. Validate that all values are in correct email format.
Ensure the 'products' table has at least 50 rows and that no rows are duplicated based on 'product_id'.
For field 'payment_status': Ensure this field only contains values from the set ['Pending', 'Completed', 'Failed']. Ensure it is not null.
For field 'shipment_id': Ensure this field exists and contains unique values. Verify it matches the type 'text'.
For field 'delivery_date': Validate that all entries adhere to the datetime format '%Y-%m-%d'. Ensure there are no missing values.
For field 'tracking_number': Ensure this field is required (not null) and that all values conform to the expected tracking number format.
Ensure the 'shipments' table has a row count between 100 and 500 and that there are no duplicate 'shipment_id' values.
For field 'vehicle_type': Ensure it is of type 'text' and contains only values from the set ['Truck', 'Van', 'Bicycle']. Ensure it is not null.
For field 'citizen_id': Ensure this field exists and contains unique values. Verify it matches the type 'text'.
For field 'registration_date': Validate that all entries are valid datetime strings matching '%Y-%m-%d'. Ensure there are no missing values.
For field 'service_request': Ensure this field is required (not null). Validate that values are of type 'text' and conform to expected formats.
Ensure the 'citizen_services' table has exactly 500 rows. Verify this count aligns with the 'completed_requests' table.
For field 'status': Ensure it only contains values from the set ['Open', 'In Progress', 'Closed']. Ensure all entries are not null.
For field 'supplier_id': Ensure this field exists and contains unique values. Verify it matches the type 'text'.
For field 'delivery_schedule': Validate that all entries conform to the datetime format '%Y-%m-%d %H:%M:%S'. Ensure there are no missing values.
For field 'product_quantity': Ensure this field is required (not null) and contains only integer values. Validate that all are non-negative.
Ensure the 'inventory' table has at least 200 rows and that all 'product_id' values are unique.
For field 'shipment_details': Ensure values are valid JSON objects and conform to the specified JSON schema. Confirm there are no empty entries.
Ensure the `citizen_id` column contains only unique values and does not allow null entries.
For the `service_requests` table, verify that the number of rows is within the range of 100 to 1000.
Ensure the `request_date` field is of type 'date' and contains no missing values.
For the `department` column, validate that all values are among the defined set `['Health', 'Education', 'Public Safety']`.
Check that the `population` column has a mean value greater than 500,000 and a standard deviation not exceeding 100,000.
Ensure the `property_id` column contains only distinct values and is not null.
Verify that the `listing_date` field is of type 'date' and has no missing values.
For the `price` column, ensure the minimum value is above 50,000 and the maximum does not exceed 5,000,000.
Check that the `property_type` column includes only values from the set `['Apartment', 'House', 'Commercial']`.
Ensure that the sum of `monthly_rent` and `utilities` equals the `total_cost` for each record.
Ensure the `product_id` column contains only unique values and is not null.
Verify that the `created_at` field is of type 'timestamp' and contains no missing values.
For the `sales` column, check that the total sales amount is greater than 10,000 and the average sales value is above 100.
Ensure the `category` column only contains values from the specified set `['Electronics', 'Clothing', 'Home']`.
Check that the `discount_price` is less than the `original_price` for all records.
Ensure the `temperature` column contains no null values and is of type 'float'.
Verify that the number of rows in the `daily_weather` table is equal to 365.
For the `humidity` column, check that the mean value is between 30 and 70 percent.
Ensure the `weather_condition` column only includes values from the defined set `['Sunny', 'Rainy', 'Cloudy']`.
Check that the sum of `daytime_temperature` and `nighttime_temperature` is equal to `average_temperature`.
For the `age` and `income` columns, ensure that `age` is greater than 18 and `income` is greater than 30,000.
Check that the combination of `state` and `city` columns is unique across all records.
For the columns `start_date` and `end_date`, ensure that `end_date` is always greater than `start_date`.
Verify that the sum of `item_quantity` and `returned_quantity` does not exceed the `total_quantity` for each record.
Ensure that the values in the `delivery_date` column are greater than the values in the `order_date` column.
Ensure the `employee_id` column contains unique values and matches the specified set: `['E001', 'E002', 'E003']`.
Verify that the `hire_date` column values are formatted as `'YYYY-MM-DD'` and can be parsed using dateutil.
Check that the `salary` column values are within the range of 30000 to 150000.
Confirm the `department` column contains only values from the set: `['HR', 'IT', 'Finance']`.
Ensure the number of rows in the `employee_records` table equals 100.
Validate that the `performance_rating` column values are sorted in descending order.
Ensure the `termination_date` column adheres to the datetime format of `'YYYY-MM-DD'` and is later than the `hire_date`.
Check that the `gender` column only includes values from the set: `['Male', 'Female', 'Non-Binary']`.
Confirm that the `job_title` column contains no null values and matches a specific set of valid titles.
Verify that the average `salary` in the `employee_records` table falls within the range of 50000 to 100000.
Ensure the `address` column contains valid JSON objects conforming to the specified schema.
Confirm that the `hours_worked` column contains only integer values between 0 and 80.
Ensure the `date_of_birth` column values are valid dates and all employees are above 18 years old.
Check that the `voluntary_exit` column contains only boolean values (True/False).
Confirm that the row count in the `employee_records` table equals the row count in the `payroll` table.
Ensure the `product_id` column contains unique values and matches the specified set: `['P001', 'P002', 'P003']`.
Verify that the `delivery_date` column values are formatted as `'YYYY-MM-DD'` and can be parsed using dateutil.
Check that the `quantity` column values are within the range of 1 to 500.
Confirm the `supplier` column contains only values from the set: `['Supplier A', 'Supplier B', 'Supplier C']`.
Ensure the number of rows in the `inventory` table is between 50 and 200.
Validate that the `cost` column values are sorted in ascending order.
Ensure the `order_date` column adheres to the datetime format of `'YYYY-MM-DD'` and is not a future date.
Check that the `status` column only includes values from the set: `['Pending', 'Shipped', 'Delivered']`.
Confirm that the total `amount` in the `orders` table sums to no less than 10000.
Ensure that the `product_details` column contains valid JSON objects conforming to the specified schema.
Ensure the `shipment_date` column values match the format 'YYYY-MM-DD' and can be parsed correctly.
Ensure the `product_id` column contains only distinct values that exist in the `products` table.
Ensure the number of rows in the `orders` table is equal to the number of rows in the `deliveries` table.
Verify that the `quantity` column values are within the range of 1 to 1000.
Ensure the `supplier_rating` column values follow a normal distribution with a mean greater than 4.
For the `policy_start_date`, ensure values match the strftime format '%Y-%m-%d' and are parsed correctly.
Ensure the `premium_amount` column values are all greater than or equal to 100.
Ensure the `claim_status` column contains only values from the set `['Pending', 'Approved', 'Denied']`.
Verify that the `insured_value` column has a standard deviation below 5000.
Ensure the `policy_number` column contains unique values and follows the specified alphanumeric format.
Ensure the `temperature` column contains values within the range of -30 to 50 degrees Celsius.
For the `forecast_date`, ensure the field matches the type 'date' and is formatted as 'YYYY-MM-DD'.
Ensure the `precipitation` column values are non-negative and sorted in increasing order.
Verify that the `humidity` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `wind_speed` column values are valid JSON objects conforming to the specified JSON schema.
Ensure the `check_in_date` column values match the format 'YYYY-MM-DD' and can be parsed without errors.
Ensure the `room_type` column contains only distinct values from the set `['Single', 'Double', 'Suite']`.
Verify that the `guest_count` column has values within the range of 1 to 5.
Ensure the `reservation_id` column contains unique values and has a length of exactly 10 characters.
Ensure the `customer_feedback_score` column follows a uniform distribution across the range of 1 to 10.
Ensure the `customer_id` column contains only distinct values that exist in the `customers` table.
For the `contact_date`, ensure values are formatted as 'YYYY-MM-DD HH:MM:SS' and can be parsed correctly.
Verify that the `purchase_amount` column values are non-negative and sorted in decreasing order.
Ensure the `customer_status` column has no null values and only contains values from the set `['Active', 'Inactive']`.
Ensure the `interaction_score` column has a Kullback-Leibler divergence below 0.1 compared to the expected distribution.
Ensure the `threat_level` column contains values exclusively from the set `['Low', 'Medium', 'High']`.
Verify that the `timestamp` column contains datetime values parsed according to the format '%Y-%m-%d %H:%M:%S'.
Check that the `incident_id` column contains unique values across all rows in the dataset.
Ensure the `attack_type` column has no null values and that every value belongs to the set `['Phishing', 'Malware', 'Ransomware']`.
Confirm that the number of rows in the `alerts` table is equal to the number of rows in the `resolved_alerts` table.
Ensure the `supplier_rating` column contains values within the range of 1 to 5.
For the `delivery_date` field, verify that all dates are in the format 'YYYY-MM-DD' and are not in the past.
Check that the `order_status` column contains only the values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.
Confirm that the sum of `quantity_ordered` and `quantity_delivered` matches the expected total in the `order_summary` table.
Ensure that the `product_id` and `supplier_id` combination is unique across all records.
Verify that the `transaction_amount` column contains only positive values greater than 0.
Ensure the `block_timestamp` column adheres to the ISO 8601 format for datetime values.
Check that the `wallet_address` column contains valid addresses conforming to the specified address format.
Confirm that the `status` column has values exclusively from the set `['Pending', 'Completed', 'Failed']`.
Ensure that the sums of `incoming_transactions` and `outgoing_transactions` in the `wallet_summary` table match the balance.
Ensure the `case_number` column contains unique identifiers for each case without duplicates.
Verify that the `filing_date` column contains dates in the format 'MM/DD/YYYY' and are not future dates.
Check that the `status` column values belong to the set `['Open', 'Closed', 'Pending']` and do not contain null entries.
Confirm that the `plaintiff_id` and `defendant_id` pairs are unique within each case record.
Ensure that the `hearing_date` column contains valid dates that are later than the `filing_date`.
Ensure the `genre` column contains values from the set `['Action', 'Comedy', 'Drama', 'Documentary']` without duplicates.
Verify that the `release_year` column contains integer values within the range of 1900 to the current year.
Check that the `duration` column contains values formatted as 'HH:MM:SS' and that all durations are greater than 0.
Confirm that the combination of `show_id` and `season_number` is unique across all records in the dataset.
Ensure that the `view_count` column contains non-negative integers and is sorted in descending order.
Ensure the `property_type` column contains only distinct values matching `['Apartment', 'House', 'Condo']`.
For the `listing_date` field: Verify that all entries conform to the format `%Y-%m-%d` and can be parsed using dateutil.
Ensure the `price` column contains values within the range of `$100,000` to `$10,000,000`.
For the `location` column: Verify it contains valid entries from the specified set `['New York', 'Los Angeles', 'Chicago']`.
Check that the `agent_id` column exists and all values correspond to valid entries in the `agents` table.
For the `order_date` field: Ensure all entries are in the format `%Y-%m-%d` and can be parsed correctly.
Ensure the `product_category` column contains distinct values from the set `['Electronics', 'Books', 'Clothing']`.
Verify that the `discount_percentage` column contains values that are in the range of `0` to `50`.
For the `shipping_address` field: Confirm it is a valid JSON object adhering to the specified schema.
Ensure the number of rows in the `orders` table matches the row count in the `order_details` table.
Check that the `inventory_count` column contains values within the range of `0` to `5000`.
For the `product_launch_date`: Ensure all entries follow the format `%d-%m-%Y` and can be parsed correctly.
Ensure the `supplier_id` column exists and all values are present in the `suppliers` table.
Verify that the `price` column contains only values from the set of valid prices, excluding any negative values.
For the `sales_data` JSON field: Confirm it adheres to the specified JSON schema and contains required keys.
For the `restock_date`, ensure all entries are in the format `%Y-%m-%d` and can be parsed using dateutil.
Ensure the `warehouse_location` column contains values from the specified set `['North', 'South', 'East', 'West']`.
Check that the `quantity_on_hand` column contains values within the range of `0` to `1000`.
For the `product_id` field: Ensure it exists and corresponds to valid entries in the `products` table.
Verify that the `file_inventory.csv` exists, is less than `5MB`, and contains valid headers.
For the `transaction_date` field across all domains: Ensure it adheres to the format `%Y-%m-%d` and can be parsed properly.
Check that the `customer_id` column exists and all entries are present in the `customers` table.
Ensure the `item_status` column contains only values from the set `['Available', 'Sold', 'Pending']`.
For the `review_score` column: Ensure values are within the range of `1` to `5` and are in increasing order.
Verify that the `data_file.json` is properly formatted as JSON and contains no more than `1000` lines.
Ensure the `policy_number` column contains only unique values across all records.
Verify that the `premium_amount` column values are greater than or equal to 100 and less than or equal to 5000.
Ensure the `coverage_start_date` column contains dates that are earlier than the `coverage_end_date` column for all records.
Check that the total count of `claims` in the `claims_history` table is equal to the number of records in the `policy_holders` table.
Ensure the `age` column values in the `policy_holders` table are arranged in increasing order.
Verify that the distinct values in the `state` column match the set `['CA', 'TX', 'NY', 'FL']`.
Ensure the mean value of the `claim_amount` column is between 500 and 2000.
Check that the `policy_type` column contains only values from the set `['Auto', 'Home', 'Health', 'Life']`.
Ensure that the sum of the `total_claims` column does not exceed the `total_premium` column for each policy.
Verify that the `policy_status` column values are not in the set `['Cancelled', 'Expired']`.
Ensure the `meter_reading_date` column contains no duplicate entries for a given `meter_id`.
Check that the `energy_consumed` column values are within the range of 0 to 10000 kWh.
Ensure the average value in the `monthly_cost` column falls between 50 and 300.
Verify that the `contract_start_date` is always earlier than the `contract_end_date` across all entries.
Ensure the `customer_id` column contains only unique values in the `billing_records` table.
Check that the sum of the `energy_consumed` column matches the expected value of 500000 kWh for the reporting period.
Ensure the `service_type` column contains only values from the set `['Electric', 'Gas', 'Water']`.
Verify that the `billing_cycle` column values are in increasing order for each `customer_id`.
Ensure that the maximum value in the `peak_demand` column does not exceed 500 kW.
Check that no entries in the `payment_status` column are in the set `['Overdue', 'Pending']` for customers with active services.
Ensure that the `case_number` column contains only unique values across all cases.
Verify that the `filing_date` is always earlier than the `resolution_date` for each case.
Check that the `case_type` column contains only values from the set `['Civil', 'Criminal', 'Family', 'Corporate']`.
Ensure the `amount_awarded` column values are within the range of 0 to 1,000,000.
Verify that the total count of unique `plaintiffs` matches the number of records in the `case_files` table.
Ensure the `publication_date` column contains dates formatted as 'YYYY-MM-DD' and that all entries are within the last 10 years.
Verify that the `research_id` column contains only unique values and matches the regex pattern `R^[A-Z]{2}-[0-9]{4}$`.
Check that the `sample_size` column contains integer values greater than 0 and less than or equal to 5000.
Ensure the `abstract` column has a length between 100 and 1000 characters for all entries.
For the `data_points` table, confirm that the number of rows is equal to the number of unique `research_id` values in the `research` table.
Ensure the `policy_number` column matches the regex `R^[A-Z]{3}-[0-9]{6}$` and that it contains no duplicates.
Verify that the `claim_date` column contains dates formatted as 'MM/DD/YYYY' and that all dates are not in the future.
Check that the `premium_amount` column contains values between 100 and 10000.
Ensure the `customer_email` column follows the standard email format and does not contain any duplicates.
For the `claims` table, ensure the count of `policy_number` matches the count of entries in the `policies` table.
Verify that the `product_category` column only contains values from the predefined list `['Electronics', 'Apparel', 'Home']`.
Ensure the `price` column contains numeric values that are greater than or equal to 0.
Check that the `product_description` column has a maximum length of 2000 characters and does not contain any HTML tags.
Ensure the `launch_date` column is formatted as 'YYYY-MM-DD' and all dates are in the past.
For the `orders` table, confirm that the total number of rows is between 100 and 1000.
Ensure the `email_subject` column has a length between 5 and 100 characters and does not contain any special characters.
Verify that the `sent_time` column is formatted as 'YYYY-MM-DD HH:MM:SS' and all entries are valid datetime entries.
Check that the `recipient_email` column contains valid email addresses that do not match any entries in the `blacklist` table.
Ensure the `attachment_size` column contains values in bytes and is less than or equal to 10485760 (10 MB).
For the `messages` table, ensure the number of unique `sender_id` values matches the total row count.
Verify that the `release_year` column contains integer values between 1900 and the current year.
Ensure the `genre` column values match any of the patterns defined in the list `['Action', 'Drama', 'Comedy']`.
Check that the `rating` column contains decimal values between 0.0 and 10.0.
Ensure the `viewing_time` column is formatted correctly as 'HH:MM:SS' and does not exceed 24 hours.
For the `subscriptions` table, verify that the total number of active subscribers matches the count of unique `user_id` values.
Ensure the `research_id` column exists and contains unique values for each record.
For the `data_collection_date` field: Validate that the dates fall within the range of '2020-01-01' to '2023-12-31'.
Ensure the `participant_age` column has a mean value between 18 and 65, and contains no null values.
For the `study_type` column: Ensure values match the regex pattern `^(Qualitative|Quantitative|Mixed)$`.
Check that the count of unique values in the `treatment_group` column equals the number of distinct `participant_id` values.
Ensure the `employee_id` column exists and contains no duplicates across the dataset.
For the `hire_date` field: Validate that all dates are in the format 'YYYY-MM-DD' and fall before the current date.
Verify that the average `salary` in the `employees` table is greater than $30,000 and less than $150,000.
For the `email` field: Ensure all values match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.
Check that `department` values in the `employees` table must exist in the predefined list: ['HR', 'Finance', 'Engineering', 'Sales'].
Ensure the `post_id` column exists and the count of rows does not exceed 10,000.
For the `username` field: Validate that all usernames are between 3 and 15 characters long and contain no special characters.
Check that the `likes` column has a maximum value that does not exceed 1,000,000.
For the `comment` field: Ensure values do not match the regex pattern `.*(spam|advertisement).*`.
Verify that the combined values of `followers_count` and `following_count` for each user are consistent with the uniqueness of `user_id`.
Ensure the `meter_id` column exists and contains unique identifiers for each utility meter.
For the `energy_consumption` field: Validate that all values are non-negative and fall within the range of 0 to 10,000 kWh.
Check that the average `billing_amount` within the `monthly_bills` table is between $50 and $500.
For the `service_start_date` field: Validate that all dates are in the format 'YYYY-MM-DD' and are prior to the current date.
Ensure that the distinct values in the `utility_type` column match the allowed types: ['Electricity', 'Water', 'Gas'].
Ensure the `project_id` column exists in both the `research_projects` and `task_assignments` tables, and matches the same set of values.
For the `status` column in the `utility_requests` table: Ensure values match the regex pattern `^(Pending|Completed|Cancelled)$`.
Verify that the sum of `hours_worked` and `overtime_hours` in the `employee_timesheets` table matches the total `billing_hours` for each employee.
Ensure the `location` field in the `energy_consumption` table contains no null values and matches the pattern `^[A-Za-z0-9\s,]+$`.
Check that the total count of `active_users` in the `social_media_stats` table does not exceed the total `user_id` count in the `users` table.
For field 'sensor_id': Ensure this field exists. Validate that the length of string values falls within the range of 5 to 10 characters.
For field 'timestamp': Ensure this field exists. Validate that all values conform to the ISO 8601 date format.
For field 'temperature': Ensure the values are within the range of -50 to 150 degrees Celsius. Validate the data type as 'float'.
For field 'device_status': Ensure the field exists and matches the type 'text'. Ensure values are from the predefined list: ['active', 'inactive', 'malfunctioning'].
For field 'battery_level': Ensure the values are integers between 0 and 100. Validate that the average battery level does not exceed 80%.
For field 'voter_id': Ensure this field exists and matches the type 'text'. Validate the length of string values is exactly 10 characters.
For field 'vote_timestamp': Ensure this field exists and follows the format 'YYYY-MM-DD HH:MM:SS'. Validate that no duplicate timestamps exist in the dataset.
For field 'candidate_id': Ensure this field exists. Validate that all values match a predefined set of candidate IDs.
For field 'ballot_status': Ensure the field exists. Validate that values match the pattern '^(valid|invalid|pending)$'.
For field 'election_id': Ensure this field exists. Validate that the count of unique election IDs is greater than or equal to 1.
For field 'transaction_id': Ensure this field exists and matches the type 'text'. Validate that the length of string values is exactly 12 characters.
For field 'amount': Ensure the values are numeric and fall within the range of $0 to $10,000. Validate that the sum of all amounts does not exceed $1 million.
For field 'transaction_date': Ensure this field exists. Validate that all values conform to the 'YYYY-MM-DD' format.
For field 'status_code': Ensure this field exists. Validate that values do not match any patterns from the list: ['failed', 'reversed'].
For field 'user_id': Ensure the field exists and matches the type 'text'. Validate that all user IDs are unique.
For field 'booking_id': Ensure this field exists and matches the type 'text'. Validate that the length of booking IDs is exactly 8 characters.
For field 'check_in_date': Ensure this field exists. Validate that all values conform to the format 'YYYY-MM-DD' and are in the future.
For field 'room_type': Ensure this field exists. Validate that values match at least one pattern from the list: ['single', 'double', 'suite'].
For field 'guest_count': Ensure this field exists. Validate that the values are integers between 1 and 5.
For field 'total_amount': Ensure the values are numeric and validate that the average total amount per booking does not exceed $500.
For field 'employee_id': Ensure this field exists and matches the type 'text'. Validate that the length of employee IDs is exactly 6 characters.
For field 'hire_date': Ensure this field exists. Validate that all values conform to the 'YYYY-MM-DD' format and are not in the future.
For field 'salary': Ensure the values are numeric and fall within the range of $30,000 to $200,000. Validate that the median salary does not exceed $100,000.
For field 'department': Ensure this field exists. Validate that values match the predefined list of departments: ['HR', 'Finance', 'IT', 'Sales'].
For field 'email': Ensure this field exists. Validate that the format matches the standard email pattern and that no email addresses are duplicated.
Ensure the `product_id` column contains only distinct values that are 10 characters long and conform to the pattern `^[A-Z0-9]{10}$`.
Verify that the `order_date` column contains only dates that fall within the range of '2020-01-01' to '2023-12-31'.
For the `supplier_info` table: Ensure it has exactly 50 rows and the `supplier_id` column contains unique values.
Validate that the `quantity` values in the `inventory` table are greater than zero and do not exceed 1000.
Ensure that the `delivery_date` column contains values that match the format 'YYYY-MM-DD' and are later than the `order_date` values.
Ensure the `transaction_id` column contains only distinct values and matches the regex pattern `^[0-9a-f]{64}$`.
Validate that the `amount` column in the `transactions` table has values that are non-negative and do not exceed 1,000,000.
For the `wallets` table: Ensure the number of rows is between 10 and 500 and the `wallet_address` column matches the Ethereum address format.
Check that the `timestamp` column values in the `block_data` table are formatted as 'YYYY-MM-DD HH:MM:SS' and are in chronological order.
Ensure that the `block_number` in the `blocks` table is an integer and follows a sequential order without any gaps.
Verify that the `research_id` column in the `studies` table contains distinct values and matches the format `^R[0-9]{5}$`.
Ensure that the `publication_year` column contains integers between 2000 and 2023, inclusive.
For the `survey_responses` table: Validate that the `response_id` column is unique and the number of responses does not exceed 1000.
Check that the `age` column in the `participants` table contains values that are integers greater than 18 and less than 100.
Ensure that the `email` column in the `researchers` table matches a valid email regex pattern and does not contain any duplicates.
For both `orders` and `deliveries` tables: Ensure that the `order_id` columns match in row counts and contain only unique values.
Validate that total `sales` in the `monthly_summary` table equals the sum of `sales_amount` across the `transactions` table.
Ensure that the `start_date` in the `projects` table is earlier than the `end_date`, and both dates are valid.
Check that the `product_id` in the `sales` table exists in the `products` table and that the `sales_quantity` does not exceed `inventory_quantity`.
Ensure that the `status` column in the `transactions` table only contains values from the set `['pending', 'completed', 'failed']`.
Verify that the `revenue` column in the `financials` table passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `customer_age` column demonstrates a normal distribution with a mean between 30 and 45, with a standard deviation not exceeding 10.
Check that the KL divergence between the `sales` distributions across different regions is below 0.1.
Validate that the `response_time` column in the `service_requests` table has a median value less than or equal to 5 minutes.
Ensure that the `product_ratings` column has a distribution where 80% of values fall within the range of 4 to 5.
Ensure the `case_id` column contains unique values and adheres to the specified format of 'CASE-XXXX'.
Ensure the `filing_date` column values are valid datetime strings that match the format '%Y-%m-%d'.
Ensure the number of rows in the `legal_cases` table is between 50 and 500.
For the `outcome` column, ensure values fall within the set ['Won', 'Lost', 'Settled'] and that none are missing.
For the `plaintiff_id` and `defendant_id` columns, ensure that each pair is unique across records.
Ensure the `policy_number` column contains only distinct values and adheres to the format 'POL-YYYY-NNNN'.
Verify that the `premium_amount` column values are greater than 0 and less than 10000.
Ensure the `claim_date` column contains valid datetime entries that can be parsed using dateutil.
Check that the sum of `coverage_amount` and `deductible_amount` equals the `total_policy_value` in each record.
Ensure the `claim_status` column only contains values in the set ['Pending', 'Approved', 'Rejected'].
Ensure the `customer_id` column has unique entries and matches the specified format of 'CUST-XXXX' for each record.
For the `last_contacted` column, ensure all datetime entries are in the format '%Y-%m-%d %H:%M:%S'.
Verify that the `customer_type` column contains values only in the set ['Individual', 'Business'].
Ensure the number of rows in the `customers` table equals the number of entries in the `orders` table.
For the `purchase_amount`, ensure the standard deviation is below 500 and mean is above 100.
Ensure the `property_id` column contains distinct values and follows the format 'PROP-YYYY-NNNN'.
Verify that the `listing_date` column contains valid datetime strings that can be parsed correctly.
Check that the `price` column values are between 50000 and 2000000.
Ensure the `bedrooms` column contains only integers greater than or equal to 1.
For the `location` and `property_type` columns, ensure that the combination is unique across all records.
Verify the distribution of `claim_amount` passes the KS test with a p-value greater than 0.05.
Ensure that the `response_time` in `customer_interactions` is less than the `issue_resolution_time` in `support_tickets`.
Confirm that the Kullback-Leibler divergence between `purchase_amounts` across different customer types is below 0.1.
For the `case_status` and `next_hearing_date`, ensure that `next_hearing_date` is always greater than the current date if the status is 'Open'.
Ensure values in the `property_age` column are integers and that they fall within the range of [0, 100].
Ensure the `product_id` column exists and contains unique identifiers for all products.
Ensure the `price` column contains values that are greater than or equal to 0.
Verify that the `inventory_count` column has a total row count that is equal to 1000.
Ensure the `date_added` column contains only datetime values formatted as '%Y-%m-%d %H:%M:%S'.
Check that the `category` column matches the specified set of values: `['Electronics', 'Apparel', 'Home Goods']`.
Ensure the mean of the `discount_percentage` column is between 5% and 50%.
Verify that the `supplier_info` column contains valid JSON objects that conform to the specified schema.
Ensure the `shipment_date` column values can be parsed using dateutil and are not in the future.
Check that the `sales_region` column has at least 5 distinct values.
Verify that the standard deviation of the `sales` column is less than 20.
Ensure the `post_id` column exists and contains unique identifiers for all posts.
Check that the `publish_date` column contains only datetime values formatted as '%Y-%m-%d'.
Verify that the `author_id` column has a total row count equal to the `users` table's row count.
Ensure the `tags` column contains valid JSON arrays with at least one tag.
Check that the `content_length` column values do not exceed 5000 characters.
Verify that the mean of the `view_count` column is greater than or equal to 100.
Ensure the `meta_description` column does not exceed 160 characters.
Check that the `comments` column contains valid JSON objects that conform to the specified schema.
Verify that the `last_updated` column contains datetime values that are not older than 6 months.
Ensure that the `likes_count` column follows a normal distribution with p-values greater than 0.05.
Ensure the `account_number` column exists and contains unique identifiers for all accounts.
Verify that the `transaction_date` column contains only datetime values formatted as '%Y-%m-%d %H:%M:%S'.
Check that the `balance` column contains values that are greater than or equal to 0.
Ensure the `transaction_details` column contains valid JSON objects that conform to the specified schema.
Verify that the standard deviation of the `transaction_amount` column is below the defined limit of 1000.
For field 'experiment_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. All values in 'experiment_id' must be unique.
For field 'data_points': Ensure the field matches the type 'array'. Validate that all elements in 'data_points' are numeric and within the range [0, 100].
For field 'research_date': Ensure the field matches the type 'datetime'. Validate that all dates conform to 'YYYY-MM-DD' format.
For field 'hypothesis': Ensure the field matches the type 'text'. Validate that the length of 'hypothesis' is between 10 and 500 characters.
For field 'result_json': Ensure all entries in 'result_json' are valid JSON objects and conform to the specified JSON schema for results.
For field 'booking_reference': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that 'booking_reference' values are unique.
For field 'check_in_date': Ensure the field matches the type 'datetime'. Validate that 'check_in_date' occurs on or after today's date.
For field 'room_type': Ensure values in 'room_type' must exist in the set ['Single', 'Double', 'Suite']. Ensure this field exists.
For field 'guest_email': Ensure the field matches the type 'text'. Validate that all email addresses conform to the standard email format.
For field 'price': Ensure the field matches the type 'decimal'. Validate that 'price' values are greater than 0 and less than 10000.
For field 'post_slug': Ensure the field is required (not null). Validate that 'post_slug' matches the regex pattern '^[a-z0-9]+(-[a-z0-9]+)*$' to ensure it contains only lowercase alphanumeric characters and hyphens.
For field 'publish_date': Ensure the field matches the type 'datetime'. Validate that all 'publish_date' values are in the 'YYYY-MM-DD HH:MM:SS' format.
For field 'author_id': Ensure the field matches the type 'integer'. Validate that 'author_id' values must exist in the 'users' table.
For field 'category': Ensure values in 'category' must exist in the set ['News', 'Blog', 'Tutorial']. Ensure this field exists.
For field 'meta_description': Ensure the length of 'meta_description' is between 50 and 160 characters.
For field 'student_id': Ensure the field is required (not null). Ensure 'student_id' values are unique and match the type 'integer'.
For field 'course_start_date': Ensure the field matches the type 'datetime'. Validate that 'course_start_date' occurs on or after the current date.
For field 'grade': Ensure the field matches the type 'decimal'. Validate that grades are within the range [0, 100].
For field 'enrollment_status': Ensure values in 'enrollment_status' must exist in the set ['Active', 'Inactive', 'Graduated']. Ensure this field exists.
For field 'assignment_due_date': Ensure the field matches the type 'datetime'. Validate that 'assignment_due_date' is before 'course_end_date'.
For field 'meter_id': Ensure the field is required (not null). Validate that 'meter_id' values are unique and match the type 'text'.
For field 'consumption_value': Ensure the field matches the type 'decimal'. Validate that 'consumption_value' values are greater than or equal to 0.
For field 'report_date': Ensure the field matches the type 'datetime'. Validate that 'report_date' is formatted as 'YYYY-MM-DD'.
For field 'utility_type': Ensure values in 'utility_type' must exist in the set ['Electricity', 'Water', 'Gas']. Ensure this field exists.
For field 'json_data': Ensure all entries in 'json_data' are valid JSON objects, and validate that they conform to the specified JSON schema for utility reports.
For field 'order_id': Ensure the field is required (not null). Ensure the field contains unique values of type 'integer'.
For field 'supplier_rating': Ensure values in this field are within the range of 1 to 5. Ensure this field exists and is not null.
For field 'delivery_date': Ensure the field contains dates in the format 'YYYY-MM-DD' and that values are not null.
For field 'product_id': Ensure all values in this field are distinct and match the type 'string'. Ensure this field exists.
For field 'quantity': Ensure values in this column are integers and fall within the range of 1 to 1000.
For field 'transaction_amount': Ensure values are greater than zero and within the range of 0.01 to 10,000.
For field 'user_id': Ensure the field contains unique values of type 'UUID'. Ensure this field is not null.
For field 'transaction_time': Ensure values are in a valid timestamp format 'YYYY-MM-DD HH:MM:SS' and are not null.
For field 'payment_method': Ensure values are from the set ['Credit Card', 'Debit Card', 'PayPal'] and are not null.
For field 'ip_address': Ensure values match the pattern of a valid IPv4 address and are not null.
For field 'customer_email': Ensure the field matches the email format pattern and contains no duplicates.
For field 'booking_date': Ensure this field is required (not null) and contains dates in the format 'YYYY-MM-DD'.
For field 'room_type': Ensure values are from the set ['Single', 'Double', 'Suite'] and this field is not null.
For field 'check_in_date': Ensure values are earlier than 'check_out_date' and are in the correct date format.
For field 'customer_id': Ensure values are unique and of type 'integer'. Ensure this field is required.
For field 'username': Ensure values are unique, contain no special characters, and are between 3 to 15 characters in length.
For field 'post_content': Ensure this field can contain up to 280 characters and does not contain inappropriate language.
For field 'followers_count': Ensure values are non-negative integers and fall within the range of 0 to 1,000,000.
For field 'account_status': Ensure values are from the set ['Active', 'Inactive', 'Suspended'] and this field is required.
For field 'profile_picture_url': Ensure the field matches a valid URL pattern and is not null.
For field 'email_subject': Ensure the field is required (not null) and does not exceed 255 characters in length.
For field 'recipient_email': Ensure values match the standard email format and are unique across the dataset.
For field 'sent_date': Ensure this field contains valid timestamps and is not null.
For field 'attachment_file_size': Ensure values are integers and fall within the range of 0 to 25,000,000 bytes.
For field 'message_content': Ensure this field can contain up to 10,000 characters and does not contain spammy keywords.
Ensure the `player_id` column contains only unique values and matches the type 'integer'. Ensure this field is required (not null).
For the `team_score` column: Verify that all values fall within the range of 0 to 200. Ensure no missing values exist.
For the `match_date` field: Ensure the field matches the type 'date'. Validate that all dates are unique and not null.
Ensure the `player_position` column only contains values from the set ['Forward', 'Midfielder', 'Defender', 'Goalkeeper'].
For the `player_age` column: Ensure values are greater than or equal to 18. Check for non-null values.
Ensure the `patient_id` column is unique and matches the type 'integer'. Ensure this field is required (not null).
For the `diagnosis_code` field: Ensure values conform to the ICD-10 format. Validate that no code is missing.
For the `treatment_start_date` column: Ensure all dates are in the past and not null. Verify unique date entries.
Ensure the `blood_pressure` values fall within the range of 60 to 180 for systolic and 40 to 120 for diastolic.
For the `medication_name` column: Validate that all entries are of type 'string' and match the pattern of a drug name (e.g., starting with an uppercase letter).
Ensure the `transaction_id` column contains only unique values and matches the type 'string'. Ensure this field is required (not null).
For the `transaction_amount` column: Validate that values are greater than 0 and do not exceed 10,000. Check for non-null values.
Ensure the `user_email` column matches the email format and contains no duplicates. Validate that this field is not null.
For the `transaction_date` column: Ensure all dates are in the past and are unique.
Ensure the `transaction_status` column only contains values from the set ['Pending', 'Completed', 'Failed'].
Ensure the `user_id` column is unique and matches the type 'integer'. Ensure this field is required (not null).
For the `subject` field: Validate that the length of string values is less than 255 characters and not null.
For the `message_body` column: Ensure no entries contain SQL-like injections or forbidden patterns.
Ensure the `sent_date` column contains only unique values and matches the type 'datetime'. Validate that all dates are in the past.
For the `recipient_email` column: Ensure values conform to the email format and that no duplicates exist.
Ensure the `product_id` column contains only unique values and matches the type 'integer'. Ensure this field is required (not null).
For the `price` column: Validate that values are greater than or equal to 0 and do not exceed 10,000. Ensure there are no missing values.
Ensure the `category` field only contains values from the set ['Electronics', 'Clothing', 'Home', 'Beauty']. Validate that this field is not null.
For the `stock_quantity` column: Ensure values are non-negative integers and check for non-null entries.
Ensure the `product_name` column matches the type 'string' and that no entries exceed 100 characters in length.
For field `patient_id`: Ensure the field is of type 'integer'. Ensure all values are unique and not null.
For field `appointment_date`: Ensure the field matches the datetime format 'YYYY-MM-DD'. Ensure no missing values exist.
For field `prescription_amount`: Ensure values are within the range of 0 to 1000. Ensure this field does not contain negative values.
For field `insurance_provider`: Ensure the field contains only distinct values from the set `['Aetna', 'Blue Cross', 'Cigna']`.
For fields `start_time` and `end_time`: Ensure that `end_time` is always greater than `start_time` for all records.
For field `product_id`: Ensure values are unique and of type 'string'. Ensure this field cannot contain null values.
For field `price`: Ensure all values are greater than 0 and less than 5000. Ensure no missing values exist.
For field `discount_percentage`: Ensure values are within the range of 0 to 100. Ensure this field does not contain null values.
For field `category`: Ensure the field matches the type 'text'. Values must exist in the predefined set of categories.
For fields `order_date` and `delivery_date`: Ensure `delivery_date` is greater than or equal to `order_date` for all records.
For field `email_address`: Ensure values are of type 'text' and match the format of a valid email address. Ensure uniqueness.
For field `last_login`: Ensure all values are in the format 'YYYY-MM-DD HH:MM:SS' and correctly parsed as datetime.
For field `message_length`: Ensure all values are within the range of 0 to 1000 characters. Ensure no null values exist.
For field `user_role`: Ensure values conform to the set `['admin', 'user', 'guest']`. Ensure no invalid roles are present.
For fields `sent_time` and `received_time`: Ensure `received_time` is greater than `sent_time` across all records.
For field `device_id`: Ensure values are unique and of type 'string'. Ensure this field cannot contain null values.
For field `battery_level`: Ensure values are within the range of 0 to 100. Ensure there are no missing values.
For field `temperature_reading`: Ensure values are within the range of -50 to 100 degrees Celsius. Ensure no invalid temperatures are recorded.
For field `status`: Ensure the field contains only distinct values from the set `['active', 'inactive', 'error']`.
For fields `timestamp` and `sensor_id`: Ensure that for every `sensor_id`, the `timestamp` values are in increasing order.
For fields `start_time`, `end_time`, and `duration`: Ensure that `duration` equals the difference between `end_time` and `start_time`.
For fields `user_id` and `session_id`: Ensure each combination of `user_id` and `session_id` is unique across all records.
For fields `total_amount` and `tax`: Ensure that `total_amount` equals the sum of `item_total` and `tax` for each order.
For fields `temperature` and `humidity`: Ensure that `temperature` readings are consistent with corresponding `humidity` values based on the defined relationship.
For fields `order_date` and `payment_date`: Ensure that `payment_date` is greater than or equal to `order_date` for all transactions.
Verify that the `experiment_id` column contains unique values and does not allow null entries.
Ensure the `sample_size` column has values within the range [30, 1000] and does not contain any missing values.
For the `data_collection_date` field: Ensure it is in the format 'YYYY-MM-DD' and that all entries are valid dates.
Confirm that the `participant_age` column contains only integers and that all values are within the range [18, 100].
Check that the `research_topic` column contains only distinct values from the predefined set `['Health', 'Education', 'Environment']`.
Ensure that the `p-value` column contains float values and does not exceed 1.0 or go below 0.0.
For the `feedback_score` column: Ensure it is of type integer and that scores fall within the range [1, 5].
Validate that all entries in the `article_reference` column are valid JSON objects conforming to the specified schema.
Ensure that the `publication_date` field adheres to the format 'YYYY-MM-DD' and is not in the future.
Confirm that the `author_email` column contains valid email formats and does not have duplicate entries.
Ensure the `temperature` column contains values within the range [-50, 50] degrees Celsius and has no missing values.
Verify that the `humidity` column contains unique integer values representing percentages in the range [0, 100].
For the `forecast_date` field: Verify that all entries match the 'YYYY-MM-DD' format and exist in the past or present.
Check that the `wind_speed` column only contains numeric values and that they are arranged in increasing order.
Ensure the `precipitation_type` column has values from the set `['Rain', 'Snow', 'None']` and contains no nulls.
Confirm that the `location_coordinates` field contains valid JSON objects with correct latitude and longitude values.
Validate that the `pressure` column contains float values greater than zero and does not have any duplicates.
Ensure the `weather_condition` column is of type string and contains only values from the set `['Sunny', 'Cloudy', 'Rainy']`.
For the `sunrise_time` field: Ensure it is in the format 'HH:MM AM/PM' and is accurate relative to the `forecast_date`.
Check that the `data_source` column contains valid entries from the set `['Satellite', 'Radar', 'Ground']`.
Verify that the `user_id` column contains unique values and does not allow null entries.
Ensure the `sent_time` field contains valid datetime strings matching the format 'YYYY-MM-DD HH:MM:SS' and is not in the future.
For the `email_subject` column: Confirm that it contains no missing values and is of type string with a maximum length of 255 characters.
Check that the `attachment_size` column contains values within the range [0, 25] MB and does not include negative numbers.
Ensure the `recipient_email` column contains valid email formats and that there are no duplicate entries.
Ensure the `product_id` column contains only unique values and does not accept null entries.
For the `price` field: Ensure all values are within the range of 0 to 10000, and no null values are present.
Verify that the `category` column includes only values from the specified set: `['Electronics', 'Apparel', 'Home']`.
For the `stock_quantity` field: Ensure the values are non-negative integers and do not exceed 1000.
Check that the `order_total` column has a mean value greater than $20 and less than $500.
Ensure that the combination of `user_id` and `order_id` remains unique across all records.
For the `discount` column: Ensure values fall within the range of 0% to 50% and are not null.
Verify that the `shipping_method` field contains only values from the set: `['Standard', 'Express', 'Next-Day']`.
Ensure the `product_name` field is of type 'text' and does not contain null values.
For the `review_score` column: Ensure all values are within the range of 1 to 5 and the median score is at least 4.
Ensure the `account_number` column contains only unique values and adheres to the specified format.
For the `transaction_amount` field: Ensure all values are greater than 0 and less than $100,000.
Verify that the `transaction_date` column contains no null values and that all dates are in the past.
Ensure the `customer_id` has distinct values and is not null across all records.
Check that the `interest_rate` column has mean values ranging between 0% and 10%.
For the `loan_amount` field: Ensure values are within the range of $1,000 to $1,000,000 and there are no missing values.
Ensure combinations of `account_id` and `transaction_id` are unique across all records.
For the `currency` column: Validate that all entries match the set: `['USD', 'EUR', 'GBP']`.
Verify that the `balance` column contains only non-negative values and has a maximum value of $1,000,000.
Check that the `customer_since` field is of type 'date' and contains only valid past dates.
Ensure the `contact_email` field contains only unique values and matches the valid email format.
For the `lead_score` column: Ensure all values are integers and fall within the range of 1 to 100.
Verify that the `status` column contains only values from the specified set: `['New', 'Contacted', 'Qualified', 'Converted']`.
Ensure the `first_contact_date` column does not have null values and all dates are in the past.
For the combination of `customer_id` and `campaign_id`: Ensure that all combinations are unique across all records.
For the `device_id` field: Ensure the field contains only unique values. Each `device_id` must be a non-null string.
In the `sensor_reading` column: Verify that values fall within the range of [0, 100] and occur in increasing order.
For the `timestamp` field: Ensure all entries are formatted as valid ISO 8601 strings. No null values are allowed.
For the `location` field: Ensure values are of type 'text' and are not null. Each `location` must match predefined locations in the set ['Warehouse', 'Field', 'Office'].
In the `battery_level` column: Check that values are integers and fall within the range of [0, 100]. No duplicate battery levels should exist.
For the `firmware_version` field: Ensure non-null values are unique and match the regex pattern '^\\d+\\.\\d+\\.\\d+$' for versioning.
In the `device_status` column: Verify that the values are from the set ['Active', 'Inactive', 'Maintenance']. Ensure there are no null entries.
For the `network_latency` field: Verify that mean values do not exceed 50ms, and ensure the standard deviation is below 10ms.
In the `data_frequency` column: Ensure all entries are integers and match the set [1, 5, 10, 30] representing seconds.
For the `error_logs` file: Verify the file exists, contains fewer than 1000 lines, and follows proper JSON formatting.
In the `transaction_id` field: Ensure all entries are unique and match the hash format '^[a-fA-F0-9]{64}$'.
For the `amount` column: Ensure values are non-negative floats and fall within the range [0.01, 10000.00].
In the `block_timestamp` field: Verify all timestamps are formatted correctly as UNIX epoch time and contain no null entries.
For the `user_id` field: Ensure all entries are unique and of type 'text'. Each `user_id` must exist in the `registered_users` table.
In the `gas_price` column: Check for values that are non-negative integers and verify that the average gas price does not exceed 200 Gwei.
For the `transaction_status` field: Ensure values are from the set ['Pending', 'Confirmed', 'Failed'] with no null entries.
In the `wallet_balance` column: Verify that the sum of all balances does not exceed the maximum supply of the cryptocurrency.
For the `smart_contract` file: Ensure the file exists, matches a specific hash value, and adheres to a maximum size of 2MB.
In the `block_number` field: Ensure values are integers and fall within the range [0, 9999999], ensuring no duplicates.
For the `token_symbol` field: Ensure all values are unique and match the regex pattern '^[A-Z]{1,5}$' representing token symbols.
For the `property_id` field: Ensure that all entries are unique and formatted as 'PROP-XXXX' where 'XXXX' is a four-digit number.
In the `listing_price` column: Check that values are positive floats and fall within the range [10000.00, 5000000.00].
For the `listing_date` field: Ensure all entries are formatted as valid dates and contain no null values.
In the `property_type` column: Verify that values are from the set ['Residential', 'Commercial', 'Industrial'] and ensure no duplicates.
For the `image_data` file: Ensure the file exists, matches the required hash, and contains no more than 50 images in valid formats (JPEG, PNG).
For the `product_id` column: Ensure all values are unique and non-null. Validate that the field matches the type 'integer'.
In the `price` column: Confirm that all values are non-null and of type 'decimal'. Ensure the minimum value is greater than zero.
For the `sku` field: Validate that the string length is between 8 and 12 characters. Ensure the values match the pattern '^[A-Z0-9]{8,12}$'.
In the `stock_quantity` field: Ensure all values are non-null integers and that the maximum value does not exceed 1000.
For the `category` column: Ensure it contains only distinct values from the predefined set `['Electronics', 'Clothing', 'Home']`.
In the `shipment_date` column: Validate that all entries follow the format 'YYYY-MM-DD'. Ensure there are no null values.
For the `supplier_id` field: Check that it is of type 'integer' and that all values are unique and non-null.
In the `tracking_number` field: Ensure that it matches the pattern '^[A-Z0-9]{10}$'. Validate that all values are non-null.
For the `delivery_status` column: Ensure it contains values from the set `['Pending', 'Shipped', 'Delivered']` and that there are no null entries.
In the `order_value` column: Confirm that the sum of all values is greater than $10,000 and that all values are non-null decimals.
For the `student_id` column: Ensure all values are unique and of type 'integer'. Validate that this field cannot be null.
In the `enrollment_date` column: Validate that all entries are in the format 'MM/DD/YYYY' and that no null values exist.
For the `course_code` field: Check that values are of type 'string' and match the pattern '^[A-Z]{3}-[0-9]{3}$'.
In the `final_grade` column: Ensure that values are between 0 and 100, and that there are no missing values.
For the `feedback` column: Validate that all entries are not null and contain at least 50 characters.
In the `username` field: Ensure all values are unique and match the pattern '^[a-zA-Z0-9_]{3,15}$'.
For the `post_date` column: Validate that all entries follow the format 'YYYY-MM-DD HH:MM:SS' and that there are no null values.
In the `bio` field: Ensure that no entry exceeds 160 characters and that all entries are non-null.
For the `hashtag` column: Confirm that all values do not match any SQL-like patterns from the list `['%20', '%23']`.
In the `likes` column: Ensure all values are non-null integers and that the average number of likes is greater than 100.
For the `wallet_address` field: Ensure that all values match the regex pattern '^(0x)?[0-9a-fA-F]{40}$' and are unique.
In the `transaction_date` column: Validate that all entries are in the format 'YYYY-MM-DDTHH:MM:SSZ' and are non-null.
For the `amount` column: Confirm that all values are non-null decimals and that the total sum does not exceed 1,000,000.
In the `block_number` field: Ensure all values are unique integers and that there are no null entries.
For the `transaction_hash` column: Validate that all entries match the pattern '^[0-9a-fA-F]{64}$' and are non-null.
For the `ip_address` field: Ensure the field matches the type 'text'. Validate that all entries conform to the IPv4 pattern and are unique.
For the `timestamp` field: Ensure all values are in ISO 8601 format. Validate that there are no missing values and that each entry is unique.
For the `threat_level` field: Ensure the field is required (not null). Ensure values are constrained to the set `['low', 'medium', 'high']`.
For the `alert_id` field: Validate that this field contains unique identifiers and no missing values. Ensure this field is of type 'integer'.
For the `source_url` field: Validate that all entries match the regex pattern for URLs. Ensure there are no duplicates and no missing values.
For the `experiment_id` field: Ensure all values are unique and of type 'integer'. Validate that this field cannot contain null values.
For the `publication_date` field: Ensure all entries conform to the YYYY-MM-DD format. Validate there are no missing values and that the date is in the past.
For the `researcher_email` field: Ensure all emails match the standard email regex pattern. Validate that there are no duplicates and no missing values.
For the `sample_size` field: Ensure this field is of type 'integer' and contains only positive values. Validate there are no missing entries.
For the `abstract` field: Ensure that all entries are required (not null) and that the string length does not exceed 500 characters.
For the `wallet_address` field: Validate that all entries match the regex pattern for cryptocurrency wallet addresses. Ensure there are no duplicates.
For the `transaction_timestamp` field: Ensure all values follow the UNIX timestamp format. Validate that there are no null values and that all entries are unique.
For the `block_number` field: Ensure this field is of type 'integer' and that all values are positive and unique. Validate that there are no missing values.
For the `asset_type` field: Validate that all entries are constrained to the set `['token', 'coin']`. Ensure there are no duplicates.
For the `json_metadata` field: Validate that all entries are valid JSON objects conforming to the specified schema. Ensure there are no null values.
For the `username` field: Ensure all entries are unique and of type 'text'. Validate that usernames adhere to the defined length constraints (4-15 characters).
For the `post_date` field: Ensure all values are in the format 'YYYY-MM-DD HH:MM:SS'. Validate that there are no missing values and all dates are in the past.
For the `post_content` field: Validate that all entries are required (not null) and do not exceed 280 characters in length.
For the `profile_picture_url` field: Ensure all entries match the regex pattern for valid image URLs. Validate that there are no duplicates and no missing values.
For the `likes_count` field: Ensure this field is of type 'integer' and contains only non-negative values. Validate there are no missing entries.
For the `video_id` field: Ensure all values are unique and of type 'text'. Validate that this field cannot contain null values.
For the `release_date` field: Ensure all entries match the format 'YYYY-MM-DD'. Validate that there are no missing values and all dates are in the past.
For the `duration` field: Ensure this field is of type 'integer' and contains values representing duration in seconds, validating that all entries are positive integers.
For the `genre` field: Validate that all entries fall within the set `['action', 'drama', 'comedy', 'documentary']`. Ensure there are no duplicates.
For the `json_subtitles` field: Validate that all entries are valid JSON objects conforming to the specified schema. Ensure there are no null values.
For field 'student_id': Ensure this field is required (not null). Ensure that all values are unique and match the type 'integer'.
For field 'course_code': Ensure the field matches the type 'text'. Confirm that values conform to the pattern '^[A-Z]{3}-[0-9]{3}$'.
For field 'enrollment_date': Ensure that this date field contains no missing values and that all dates are in the format 'YYYY-MM-DD'.
For field 'final_grade': Ensure this field matches the type 'float'. Validate that grades are within the range of 0.0 to 100.0.
For field 'email_address': Ensure all email values match the regular expression pattern '^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$'.
For field 'research_id': Ensure this field is required (not null). Validate that all values are unique and match the type 'string'.
For field 'publication_year': Ensure that no values are missing and that all values fall within the range of 1900 to the current year.
For field 'data_value': Ensure the field matches the type 'float'. Validate that the mean of the values is greater than 0.
For field 'author_name': Ensure this field's string length is between 5 and 50 characters and that it does not contain any numeric values.
For field 'citation_count': Ensure this field matches the type 'integer'. Confirm that values are non-negative and validate that the standard deviation is below 10.
For field 'vehicle_id': Ensure this field is required (not null). Confirm that all values are unique and match the type 'string'.
For field 'delivery_date': Ensure this date field contains valid dates in the format 'YYYY-MM-DD' and has no missing values.
For field 'route_code': Ensure the field matches the type 'text'. Validate that values do not match the pattern '^[0-9]{4}$'.
For field 'cargo_weight': Ensure this field matches the type 'float'. Validate that all weights are positive and below 10000kg.
For field 'driver_license': Ensure that values match the pattern '^[A-Z]{1,2}-[0-9]{6}-[A-Z]{1}$' and that there are no duplicates.
For field 'attack_id': Ensure this field is required (not null). Validate that all values are unique and match the type 'string'.
For field 'timestamp': Ensure this date field contains no missing values and that all timestamps are in ISO 8601 format.
For field 'threat_level': Ensure this field matches the type 'text'. Confirm that values are limited to the set ['Low', 'Medium', 'High'].
For field 'ip_address': Ensure all addresses match the regular expression pattern '^((25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])\\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]{0,1}[0-9])))$'.
For field 'incident_report_count': Ensure this field matches the type 'integer'. Validate that the median report count is greater than or equal to 1.
For field 'customer_id': Ensure this field is required (not null). Validate that all values are unique and match the type 'string'.
For field 'contact_email': Ensure all email values conform to the pattern '^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$' and have no missing values.
For field 'purchase_amount': Ensure this field matches the type 'float'. Validate that the sum of purchase amounts is greater than $1000.
For field 'signup_date': Ensure this date field contains no missing values and that all dates are in the format 'YYYY-MM-DD'.
For field 'customer_feedback': Ensure the field's string length is between 10 and 500 characters and does not contain any profanity based on the specified list.
Ensure the `vehicle_id` column contains only unique values and does not allow null entries.
For field `departure_time`: Validate that values are of type 'datetime' and must not be null.
For the `shipment_status` column: Ensure it matches one of the predefined statuses in `['Pending', 'In Transit', 'Delivered', 'Cancelled']`.
Check that the `tracking_number` field conforms to the regex pattern '^[A-Z0-9]{10,15}$' and does not contain null values.
Ensure the `delivery_date` is greater than the `shipment_date` for all records.
For the `policy_number` field: Validate that it contains unique values and is of type 'text'. Ensure this field is required.
Check that the `premium_amount` column contains only numeric values and ensure that it is greater than zero.
Ensure that the `claim_date` is not null and falls within the range of `policy_start_date` and `policy_end_date`.
For the `insured_item` column: Ensure it matches one of the allowed categories in `['Home', 'Auto', 'Health']`.
Validate that the `customer_email` column matches the regex pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$' and does not contain duplicates.
Ensure the `user_id` column contains only unique values and is of type 'text'. Ensure this field cannot be null.
For the `subscription_start_date`: Ensure it is of type 'date' and does not allow null values.
Check that the `video_length` field is a positive integer and does not go beyond 300 minutes.
Validate that the `genre` column contains values only from the list `['Drama', 'Comedy', 'Action', 'Documentary']`.
Ensure that the average rating in the `ratings` column falls within the range of 1 to 5.
For the `player_id` column: Validate that it contains unique values and is of type 'text'. Ensure this field is required.
Check that the `score` column contains only numeric values and ensure that it is non-negative.
Ensure that the `match_date` is not null and occurs before the current date.
For the `team_name` column: Validate that it matches at least one value from `['Team A', 'Team B', 'Team C']`.
Ensure that the sum of `goals_scored` and `goals_conceded` equals `total_goals` for each record.
Ensure the `student_id` column contains only distinct values and is of type 'text'. This field must not be null.
For the `enrollment_date`: Ensure it is of type 'date' and does not allow null values.
Check that the `course_code` field matches the regex pattern '^[A-Z]{3}[0-9]{3}$' to ensure proper formatting.
Validate that the `final_grade` column contains values between 0 and 100 for all records.
For the `attendance` column: Ensure that the counts of unique values match the defined set of `['Present', 'Absent', 'Late']`.
Verify that the `employee_id` column contains only unique values and does not allow null entries.
Ensure the `date_of_hire` column contains valid date entries and does not include future dates.
For the field `email`: Validate that all entries match the regular expression pattern for email addresses and are not null.
Check that the `salary` column contains values greater than zero and is of type 'numeric'.
Ensure that the `department` column contains values only from the predefined list `['HR', 'Finance', 'IT', 'Marketing']`.
Confirm that the `phone_number` field has a length of exactly 10 digits and does not contain any letters or special characters.
Validate that the distribution of employee `ages` follows a normal distribution with a mean age of 35 and a standard deviation of 5.
Ensure that the `termination_date` is always greater than the `date_of_hire` for all records.
For the `job_title` column: Ensure that values do not exceed 50 characters in length and are not null.
Check that combinations of `employee_id` and `project_id` are unique within the records.
Ensure the `case_number` column contains only unique values and is of type 'text'.
Validate that the `case_status` field only contains values from the set `['Open', 'Closed', 'Pending']`.
For the `filing_date` column: Confirm that all entries are valid dates and do not include future dates.
Check that the `client_email` column matches the regular expression for valid email formats and does not contain any null values.
Verify that the `case_value` field is of type 'numeric' and contains values greater than or equal to zero.
Ensure that the distribution of `case_types` adheres to expected proportions, with no type exceeding 30% of total cases.
For the `opposing_party` column: Ensure that all entries have a maximum length of 100 characters and contain no special characters.
Validate that the `court_date` is always later than the `filing_date` for each case.
Confirm that the combination of `lawyer_id` and `case_number` is unique across all records.
Check that the `case_summary` column does not exceed 1000 characters in length and is not null.
Ensure the `citizen_id` column contains only unique values and must not allow null entries.
Validate that the `application_date` field contains valid date formats and does not include future dates.
For the `service_request` column: Ensure that values match at least one pattern from the regular expression list defined for service types.
Check that the `zipcode` column entries consist of exactly 5 digits and do not contain any letters.
Validate that the sum of `income` and `expenses` columns matches the expected `net_income` value for each record.
Ensure the `employee_id` column contains unique values and does not contain any null entries.
For the `salary` field: Confirm that all values are of type 'numeric' and fall within the range of $30,000 to $200,000.
Verify that the `hire_date` column adheres to the format 'YYYY-MM-DD' and contains no null values.
Ensure the `department_id` is a valid reference to `department` table. Confirm all values exist in the corresponding table.
For the `invoice_date` column: Check that all entries can be parsed into valid datetime objects and match the strftime format '%Y-%m-%d'.
Ensure the `product_sku` column has all distinct values and no missing entries.
For the `quantity_shipped` field: Validate that the mean value is above 0 and that no entries are negative.
Check that the `shipment_date` follows the format 'MM/DD/YYYY' and confirm that all entries can be interpreted as valid dates.
Ensure that the `supplier_id` references a valid entry in the `suppliers` table, and all values are not null.
For the `delivery_date`: Confirm that values are greater than or equal to the `order_date` across all records.
Ensure the `ip_address` field contains unique entries and adheres to the correct IP address formats (IPv4).
For the `alert_timestamp` field: Validate that all values are of type 'datetime' and conform to the specified format 'ISO 8601'.
Check that the `threat_level` column contains only the values in the set ['Low', 'Medium', 'High', 'Critical'] and has no missing entries.
Verify that the `user_id` is unique across records and exists in the `users` table without null values.
For columns `login_time` and `logout_time`: Ensure the difference is positive and falls within the expected range of 0 to 24 hours.
Ensure the `username` column has unique values and does not contain any null entries.
For the `post_date` field: Confirm that all entries can be parsed as valid datetime objects and match the format 'YYYY-MM-DD HH:MM:SS'.
Check that the `likes_count` field is of type 'integer' and contains no negative values.
Ensure the `user_id` column references valid user entries in the `users` table and contains no duplicates.
For the `comments` column: Validate that any JSON structures conform to the specified schema for comment objects.
Ensure that the combination of `order_id` and `product_id` is unique across all records in the ERP dataset.
For the columns `start_date` and `end_date`: Validate that `end_date` is always greater than `start_date` in the Supply Chain dataset.
Confirm that the sum of `item_price` and `shipping_fee` equals the `total_amount` in each record of the ERP dataset.
For cybersecurity logs, ensure that `last_login_time` is always greater than `first_login_time` for each user.
In social media interactions, ensure that the `follower_count` for a user is consistently greater than or equal to the `following_count` across all records.
For field 'temperature': Ensure values are of type 'float'. Ensure there are no missing values. Temperature values should fall within the range of -50 to 50 degrees Celsius.
For field 'forecast_date': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and conforms to the format '%Y-%m-%d'.
For field 'humidity': Ensure all values are unique. Ensure there are no missing values. Humidity values should be between 0 and 100 percent.
For field 'weather_condition': Ensure the field matches the type 'text'. Ensure values are from the predefined set ['Clear', 'Cloudy', 'Rain', 'Snow']. Ensure there are no duplicates.
For field 'wind_speed': Ensure values are of type 'float'. Ensure there are no missing values. Verify that the mean wind speed is less than 30 m/s.
For field 'user_id': Ensure the field is required (not null). Ensure all values are unique and match the type 'text'.
For field 'subscription_start_date': Ensure the field matches the type 'datetime'. Verify that all values can be parsed using dateutil.
For field 'view_count': Ensure values are of type 'integer'. Ensure there are no missing values. The sum of view counts should not exceed 1,000,000.
For field 'content_rating': Ensure the field matches the type 'text'. Ensure values exist in the set ['G', 'PG', 'PG-13', 'R']. Ensure there are no duplicates.
For field 'payment_info': Ensure the field is a valid JSON object. Validate that it conforms to the specified JSON schema for payment details.
For field 'case_id': Ensure all values are unique. Ensure the field matches the type 'text'. Ensure there are no missing values.
For field 'date_reported': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and adheres to the format '%Y-%m-%d %H:%M:%S'.
For field 'incident_type': Ensure values are from the predefined set ['Theft', 'Assault', 'Fraud', 'Vandalism']. Ensure there are no duplicates.
For field 'response_time': Ensure values are of type 'integer'. Verify that the mean response time does not exceed 120 minutes.
For field 'resolution_status': Ensure the field matches the type 'text'. Ensure values are from the set ['Resolved', 'Pending', 'Escalated']. Ensure there are no missing values.
For field 'experiment_id': Ensure all values are unique. Ensure the field matches the type 'text'. Ensure there are no missing values.
For field 'date_collected': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and follows the format '%Y-%m-%d'.
For field 'measurement_value': Ensure values are of type 'float'. Ensure there are no missing values. The standard deviation of the measurement values should not exceed 5.
For field 'researcher_id': Ensure the field matches the type 'text'. Ensure all values are unique and exist in the predefined set of researcher IDs.
For field 'data_format': Ensure the field is a valid JSON object. Validate that it conforms to the specified JSON schema for experiment data.
For field 'email': Ensure the field matches the type 'text'. Ensure all email addresses follow a valid email format and there are no duplicates.
For field 'phone_number': Ensure the field matches the type 'text'. Validate that all entries conform to the standard phone number pattern and there are no missing values.
For field 'user_profile': Ensure the field is a valid JSON object. Validate that it contains required fields as specified in the JSON schema.
For field 'file_upload': Ensure that files exist and match the specified hash value. Validate that the file size is within the range of 1KB to 5MB.
For field 'location_data': Ensure the field is a valid JSON object. Validate that it conforms to the required structure and contains latitude and longitude keys.
For field 'game_title': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'game_title' are unique across the dataset.
For field 'release_date': Ensure all entries follow the format 'YYYY-MM-DD'. Ensure the field is required (not null).
For field 'platform': Ensure the field matches the type 'text'. Ensure values in 'platform' must exist in the predefined list ['PC', 'Xbox', 'PlayStation', 'Switch'].
For field 'user_rating': Ensure the field matches the type 'float'. Verify that ratings are between 0.0 and 10.0, inclusive.
Ensure the 'genre' column contains only distinct values that match the list ['Action', 'Adventure', 'RPG', 'Strategy', 'Simulation'].
For field 'citizen_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure values in 'citizen_id' are unique.
For field 'date_of_birth': Ensure all entries follow the format 'YYYY-MM-DD'. Ensure the field is required (not null). Verify that 'date_of_birth' values represent dates before the current date.
For field 'address': Ensure the field matches the type 'text'. Ensure that the address data conforms to a valid structure (street, city, zip).
For field 'income': Ensure the field matches the type 'float'. Verify that incomes are non-negative values.
Ensure that the 'registration_date' column adheres to the specified strftime format 'YYYY-MM-DD HH:MM:SS'.
For field 'video_title': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'video_title' are unique.
For field 'duration': Ensure the field matches the type 'integer'. Verify that durations are represented in seconds and are greater than zero.
For field 'release_date': Ensure all entries follow the format 'YYYY-MM-DD'. Ensure the field is required (not null).
For field 'genre': Ensure the 'genre' column contains only distinct values that match the list ['Drama', 'Comedy', 'Documentary', 'Action', 'Thriller'].
For field 'view_count': Ensure the field matches the type 'integer'. Verify that view counts are non-negative.
For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'transaction_id' are unique.
For field 'transaction_date': Ensure all entries follow the format 'YYYY-MM-DD HH:MM:SS'. Verify that 'transaction_date' values are within a reasonable range (e.g., last 5 years).
For field 'amount': Ensure the field matches the type 'float'. Verify that amounts are greater than zero.
For field 'user_ip': Ensure the field matches the type 'text'. Ensure values in 'user_ip' conform to valid IP address formatting.
For field 'status': Ensure the field matches the type 'text'. Ensure values in 'status' must exist in the list ['Completed', 'Pending', 'Failed', 'Refunded'].
For field 'booking_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'booking_id' are unique.
For field 'check_in_date': Ensure all entries follow the format 'YYYY-MM-DD'. Ensure the field is required (not null). Verify that 'check_in_date' is no earlier than the current date.
For field 'room_type': Ensure the field matches the type 'text'. Ensure values in 'room_type' must exist in the predefined list ['Single', 'Double', 'Suite'].
For field 'guest_count': Ensure the field matches the type 'integer'. Verify that guest counts are greater than zero.
For field 'payment_info': Ensure the field is a valid JSON object conforming to the specified schema, including keys like 'card_number', 'expiry_date', and 'cvv'.
For field 'case_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field contains only unique values.
For field 'filing_date': Ensure the field matches the type 'datetime'. Verify that all values conform to the format 'YYYY-MM-DD'.
For field 'status': Ensure the field contains only distinct values from the set ['Open', 'Closed', 'Pending']. Ensure this field is not null.
For fields 'plaintiff_id' and 'defendant_id': Ensure the combination of these fields is unique within each record, and both fields are required (not null).
For field 'case_details': Ensure this field matches the type 'text' and does not exceed 500 characters in length.
For field 'case_notes': Ensure values are valid JSON objects and conform to the specified JSON schema for case notes.
For field 'hearing_date': Ensure the field matches the type 'datetime' and that all dates are greater than the 'filing_date'.
For field 'jurisdiction': Ensure the field is required (not null) and its values must exist in the predefined list of jurisdictions.
For field 'court_id': Ensure this field is numeric. Verify that all values exist in the related 'courts' table.
For field 'settlement_amount': Ensure this field is numeric and that values are greater than or equal to zero.
For field 'post_id': Ensure the field matches the type 'text'. Verify that all values are unique and not null.
For field 'publish_date': Ensure all entries conform to the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.
For field 'author_id': Ensure this field is required (not null). Its values must exist in the 'authors' table.
For fields 'title' and 'slug': Ensure the combination of these fields is unique within each record.
For field 'tags': Ensure values are valid JSON arrays and conform to the specified JSON schema for tags.
For field 'content_length': Ensure this field is numeric and that it accurately reflects the character count of the 'content' field.
For field 'status': Ensure the field contains only distinct values from the set ['Draft', 'Published', 'Archived'].
For field 'featured_image': Ensure this field matches the type 'text' and that it contains valid image URLs.
For field 'last_updated': Ensure this field matches the type 'datetime' and that its value is later than 'publish_date'.
For field 'category_ids': Ensure values are valid JSON objects and reference existing categories in the 'categories' table.
For field 'study_id': Ensure the field is required (not null) and contains only unique values.
For field 'data_collection_date': Ensure all entries conform to the format 'YYYY-MM-DD' and can be parsed using dateutil.
For field 'sample_size': Ensure this field is numeric and that values are greater than zero.
For fields 'variable_1' and 'variable_2': Ensure the combination of these fields is unique within each record.
For field 'results': Ensure values are valid JSON objects and conform to the specified JSON schema for research results.
For field 'forecast_id': Ensure the field matches the type 'text'. Verify that all values are unique and not null.
For field 'forecast_date': Ensure the field matches the type 'datetime' and all entries conform to the format 'YYYY-MM-DD HH:MM:SS'.
For field 'temperature': Ensure this field is numeric and that values fall within a realistic range (-50 to 60 degrees Celsius).
For fields 'location_id' and 'forecast_date': Ensure the combination of these fields is unique within each record.
For field 'weather_conditions': Ensure this field matches the type 'text' and contains only values from the set ['Sunny', 'Rainy', 'Cloudy', 'Snowy'].
Ensure the `customer_id` column contains only unique values and does not allow null entries.
Verify that the `email` column contains valid email formats and no duplicate entries exist.
For the `signup_date` field, ensure that all dates are in the correct format and none are null.
Check that the average `customer_score` is between 1 and 10, with a minimum value of 1.
Ensure the `last_contact_date` does not exceed the current date and is not null.
For the `product_id` column, confirm that all entries are unique and of type `integer`.
Verify that the sum of the `order_total` column matches the calculated total from individual item prices.
Check that the `category` column contains only distinct values from the predefined set: ['Electronics', 'Apparel', 'Home'].
Ensure the `stock_quantity` for each product is greater than or equal to zero and does not contain null values.
Confirm that the distribution of `price` values passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `voter_id` column contains unique identifiers and does not permit null entries.
For the `registration_date` column, validate that all dates are in the correct format and within the election year.
Check that the `votes_cast` column has a mean value that does not exceed the total number of registered voters.
Verify that the `party_affiliation` field only includes values from the set: ['Democrat', 'Republican', 'Independent'].
Ensure the `age` column contains only integer values with a minimum value of 18.
For the `reservation_id` column, ensure all entries are unique and of type `string`.
Check that the `check_in_date` is earlier than the `check_out_date` for all records.
Verify that the average `room_rate` falls within the range of $50 to $500 and has no missing values.
Confirm that the `payment_status` column contains only distinct values from the set: ['Paid', 'Pending', 'Cancelled'].
Ensure the `number_of_guests` is a positive integer and does not exceed the room capacity.
Ensure the `article_id` column has unique values and does not allow null entries.
Verify that the `publish_date` is not in the future and is formatted correctly.
Check that the `category` column contains only values from the predefined set: ['News', 'Blog', 'Tutorial'].
Confirm that the average `word_count` for articles falls within the range of 300 to 5000.
Ensure the combination of `author_id` and `article_id` is unique across all records in the dataset.
For field `student_id`: Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values in `student_id` are unique.
For field `course_completion_date`: Ensure the field matches the type 'date'. Ensure values in `course_completion_date` are not null and are chronologically after `course_start_date`.
For field `enrollment_status`: Ensure the field contains only distinct values matching `['enrolled', 'completed', 'dropped']`. Ensure the field is required (not null).
For fields `quiz_score` and `assignment_score`: Ensure the sum of `quiz_score` and `assignment_score` equals `final_grade`. Ensure all fields are of type 'integer' and not null.
For field `email`: Ensure the field is required (not null). Ensure all values in `email` are unique and match valid email formatting.
For field `employee_id`: Ensure the field matches the type 'string'. Ensure all values in `employee_id` are unique and not null.
For fields `purchase_amount` and `tax_amount`: Ensure the `purchase_amount` is greater than `tax_amount`. Ensure both fields are of type 'decimal' and not null.
For field `department_id`: Ensure the field matches the type 'integer'. Verify that values in `department_id` exist in the `departments` table.
For field `salary`: Ensure the field matches the type 'decimal'. Verify that the `salary` distribution conforms to a normal distribution with a mean of $70,000 and a standard deviation of $15,000.
For field `project_code`: Ensure the field is required (not null). Verify that `project_code` values are unique across all records.
For field `player_id`: Ensure the field matches the type 'integer'. Ensure all values in `player_id` are unique and not null.
For fields `goals_scored` and `assists`: Ensure that the value of `goals_scored` is greater than or equal to `assists`. Ensure both fields are of type 'integer' and not null.
For field `match_date`: Ensure the field matches the type 'date'. Ensure values in `match_date` are chronologically ordered.
For field `player_age`: Ensure that the distribution of `player_age` values conforms to expected age ranges, verifying that the mean is between 25 and 30 years.
For field `team_id`: Ensure the field is required (not null). Verify that values in `team_id` exist in the `teams` table.
For field `username`: Ensure the field is required (not null). Ensure all values in `username` are unique and match the valid username format.
For field `post_date`: Ensure the field matches the type 'timestamp'. Ensure that no two `post_date` entries are identical across all records.
For fields `likes` and `shares`: Ensure the sum of `likes` and `shares` does not exceed `engagement_score`. Ensure all fields are of type 'integer' and not null.
For field `user_id`: Ensure the field matches the type 'string'. Ensure all values in `user_id` are unique and not null.
For field `content_length`: Ensure that the `content_length` is less than or equal to 280 characters. Ensure the field is of type 'integer' and not null.
For fields `data_file` and `checksum`: Ensure `data_file` exists, matches the specified checksum, and falls within the defined size range of 1MB to 10MB.
For file `user_data.csv`: Ensure the file contains valid headers: `user_id`, `username`, `email`, `signup_date`. Validate that the number of lines does not exceed 10,000.
For field `transaction_id`: Ensure the field matches the type 'string'. Verify that all `transaction_id` values are unique and not null.
For fields `start_time` and `end_time`: Ensure that `end_time` is greater than `start_time`. Ensure both fields are of type 'timestamp' and not null.
For field `category`: Ensure the field contains only distinct values within the predefined list `['news', 'sports', 'entertainment', 'education']`. Ensure the field is required (not null).
Ensure the `shipment_status` column contains only distinct values from the set `['Pending', 'In Transit', 'Delivered', 'Cancelled']`.
For the `delivery_date` field: Validate that all entries conform to the datetime format 'YYYY-MM-DD' and are not in the future.
Ensure the `vehicle_id` field contains string values that are exactly 10 characters long and do not match the pattern `^[0-9]*$`.
For the `weight` column: Ensure all values are within the range of 1 to 5000 kilograms and are arranged in increasing order.
Verify that the `origin` and `destination` fields contain only valid city names from the predefined list of cities.
Ensure that the `tracking_number` column values match the regex pattern `^[A-Z]{2}[0-9]{9}[A-Z]{2}$` and are unique across records.
For the `load_time` and `unload_time` columns: Validate that `unload_time` is always greater than `load_time` for the same shipment.
Ensure the `cargo_description` field contains string lengths between 5 and 255 characters and does not include any SQL-like patterns.
For the `driver_id` column: Ensure values must exist in the `drivers` table and are formatted as `D-XXXX` where `X` is a digit.
Ensure that the `delivery_fee` column values are all greater than or equal to 0 and match the specified currency format (e.g., '$123.45').
Ensure the `player_position` column contains only values from the set `['Forward', 'Midfielder', 'Defender', 'Goalkeeper']`.
For the `match_date` field: Validate that all entries conform to the datetime format 'YYYY-MM-DD HH:MM' and are not in the past.
Verify that the `team_name` field values are strings that do not exceed 50 characters and match the regex pattern `^[A-Za-z\s]+$`.
Ensure the `points_scored` column values are within the range of 0 to 100 and are arranged in decreasing order for team performance metrics.
For the `player_id` column: Ensure that values must exist in the `players` table and conform to the pattern `P-XXXX`.
Ensure that the `attendance` column values are integers greater than or equal to 0 and do not match the pattern `^\d{3,}$`.
For the `fouls_committed` and `fouls_received` columns: Validate that the sum of these two columns does not exceed the number of players on the field (11).
Ensure the `game_duration` column contains values formatted as 'MM:SS' and all entries are less than or equal to '90:00'.
For the `match_id` column: Ensure all entries are unique and formatted as `M-YYYYMMDD-XX`.
Verify that the `player_rating` column values are within the range of 1 to 10 and do not contain any decimal points.
Ensure the `post_type` column contains only distinct values from the set `['Text', 'Image', 'Video', 'Link']`.
For the `timestamp` field: Validate that all entries match the ISO 8601 format 'YYYY-MM-DDTHH:MM:SSZ' and are in the past.
Ensure the `username` field values are strings that are 3 to 15 characters long and match the regex pattern `^[a-zA-Z0-9_]+$`.
For the `likes` and `shares` columns: Validate that `likes` is always greater than or equal to `shares` for each post.
Ensure that the `comment` column contains string lengths between 1 and 500 characters and does not contain any inappropriate content as defined by the moderation guidelines.
Ensure the `transaction_type` column contains only distinct values matching `['Transfer', 'Mint', 'Burn']`.
For field `block_number`: Verify that all values are within the range of 0 to 9999999 and are arranged in increasing order.
Verify that the `wallet_address` column only contains strings matching the pattern `^[0-9a-fA-F]{40}$`.
For field `transaction_value`: Ensure the mean transaction value is greater than 0 and less than 1000000.
Ensure the `currency` column does not contain values outside the set `['BTC', 'ETH', 'LTC']`.
For field `timestamp`: Validate that all timestamps are in the format `YYYY-MM-DD HH:MM:SS` and fall within the last 5 years.
Ensure that the `fee` column values are greater than or equal to 0 and that the maximum fee does not exceed 0.05 ETH.
For field `status`: Confirm that values only match the set `['Pending', 'Confirmed', 'Failed']` and are not null.
Validate that the unique value count in the `transaction_id` column is equal to the total number of transactions recorded.
For field `network`: Ensure that the values match one of the following patterns: `['Mainnet', 'Testnet']`.
Ensure the `game_genre` column contains only distinct values matching `['Action', 'Adventure', 'Role-Playing']`.
For field `release_date`: Validate that all dates are in the format `YYYY-MM-DD` and are not in the future.
Ensure that the `user_rating` column values are within the range of 1 to 10 and that the average rating is calculated properly.
For field `platform`: Confirm that column values match at least one pattern from the list `['PC', 'Console', 'Mobile']`.
Check that the `game_title` column does not contain any entries longer than 100 characters.
For field `download_count`: Ensure that the sum of download counts is greater than 100000 and no individual count exceeds 50000.
Validate that the `age_rating` column contains only values matching `['E', 'T', 'M']`.
For field `in_game_currency`: Ensure that values are non-negative and the total does not exceed 1 million.
Ensure that the `developer` column contains no values exceeding a length of 50 characters and does not contain null entries.
For field `user_feedback`: Confirm that feedback strings do not contain any offensive language as per the defined list.
Ensure the `post_type` column contains only distinct values matching `['Text', 'Image', 'Video']`.
For field `username`: Validate that all usernames conform to the pattern `^[a-zA-Z0-9._]{3,15}$` and are unique.
Check that the `likes_count` column values are non-negative and that the average number of likes does not exceed 1000.
For field `comment_length`: Ensure values are within the range of 1 to 300 characters.
Validate that the `follower_count` column matches the expected distribution parameters with a median greater than 1000 and a maximum less than 1 million.
Ensure the `product_price` column contains values within the range of `$0.01` to `$10,000`. Any value outside this range should be flagged as invalid.
For the `stock_quantity` column, validate that all entries are non-negative integers. Any negative value should be considered an error.
Ensure the `sku` column values are unique and follow the format `SKU-XXXX` where `X` is a digit from `0-9`.
For the `category` column, verify that only values from the set `['Electronics', 'Clothing', 'Home']` are present. Any other value should raise a warning.
Check that the `restock_date` column contains dates that are at least 30 days in the future from today to ensure timely inventory management.
Validate that the `supplier_email` column matches the email format pattern and contains no entries from the set of banned domains `['spam.com', 'invalid.com']`.
Ensure the `product_name` column has a length of at least 3 characters and no more than 50 characters to maintain consistency.
For the `discount_percentage` column, confirm that all values fall within the range of `0%` to `100%`, with negative or excessive values flagged as errors.
Check that the `order_date` column contains dates arranged in increasing order for proper chronological processing.
Validate that the `shipping_cost` column does not exceed `$500` and is always a non-negative number.
Ensure the `property_type` column only contains values from the set `['Apartment', 'House', 'Condo']`. Invalid entries should be reported.
For the `listing_price` column, confirm that all entries are valid decimal numbers and fall within the range of `$50,000` to `$5,000,000`.
Validate that the `listing_date` column contains dates that are not in the future to ensure validity.
Check that the `zip_code` column matches the pattern of five-digit numbers and does not contain any invalid entries.
Ensure that the `bedrooms` column contains integers within the range of `1` to `10`, with values outside this range flagged.
For the `property_description` column, verify that all entries are between `50` and `500` characters long to maintain description quality.
Validate that the `agent_email` column matches a standard email format and does not include any entries from the banned list `['test.com', 'example.com']`.
Check that the `square_footage` column contains values that are greater than `100` and less than `10,000`.
Ensure the `threat_level` column contains only the values from the set `['Low', 'Medium', 'High']`. Any other value should be flagged as invalid.
For the `ip_address` column, validate that all entries match the standard IPv4 format and do not include any private IPs from the set `['192.168.x.x', '10.x.x.x']`.
Check that the `alert_date` column contains dates that are in decreasing order to confirm alerts are resolved in a timely manner.
Ensure the `incident_type` column only contains valid entries from the list `['Malware', 'Phishing', 'DDoS']`.
For the `username` column, validate that all entries have a length between `5` and `15` characters and do not contain special characters.
Validate that the `subscription_price` column contains values within the range of `$0` to `$50`. Any value outside this range should be flagged.
Ensure the `video_title` column contains strings with a length between `1` and `100` characters, with any title falling outside this range marked for review.
For field 'case_number': Ensure the field matches the type 'text'. Ensure the length of 'case_number' is exactly 10 characters. Ensure this field exists.
For field 'filing_date': Ensure the field matches the type 'date'. Ensure values in 'filing_date' are within the range of '2020-01-01' and '2023-12-31'.
For field 'court': Ensure the field matches the type 'text'. Ensure values in 'court' must exist in the set ['District Court', 'Supreme Court', 'Appellate Court']. Ensure this field exists.
For field 'case_status': Ensure the field matches the type 'text'. Ensure values in 'case_status' must not match the set ['Closed', 'Dismissed']. Ensure this field exists.
For field 'case_type': Ensure the field matches the type 'text'. Ensure the values in 'case_type' conform to the pattern '^[A-Z]{3}-[0-9]{3}$'. Ensure this field exists.
For field 'policy_number': Ensure the field matches the type 'text'. Ensure the length of 'policy_number' is between 8 and 15 characters. Ensure this field exists.
For field 'premium_amount': Ensure the field matches the type 'numeric'. Ensure the values in 'premium_amount' are greater than 0 and less than 10000.
For field 'coverage_type': Ensure the field matches the type 'text'. Ensure values in 'coverage_type' must exist in the set ['Full Coverage', 'Liability', 'Collision']. Ensure this field exists.
For field 'claim_date': Ensure the field matches the type 'date'. Ensure values in 'claim_date' are within the range of '2022-01-01' and '2023-01-01'.
For field 'claim_status': Ensure the field matches the type 'text'. Ensure values in 'claim_status' do not match the pattern 'Resolved|Rejected'. Ensure this field exists.
For field 'order_id': Ensure the field matches the type 'text'. Ensure the length of 'order_id' is exactly 12 characters. Ensure this field exists.
For field 'quantity': Ensure the field matches the type 'numeric'. Ensure values in 'quantity' are within the range of 1 to 5000.
For field 'supplier_name': Ensure the field matches the type 'text'. Ensure values in 'supplier_name' do not match any SQL-like pattern from the list ['SELECT', 'DROP', 'DELETE']. Ensure this field exists.
For field 'delivery_date': Ensure the field matches the type 'date'. Ensure values in 'delivery_date' are greater than '2023-01-01'.
For field 'item_category': Ensure the field matches the type 'text'. Ensure the values in 'item_category' must exist in the set ['Electronics', 'Furniture', 'Clothing']. Ensure this field exists.
For field 'transaction_id': Ensure the field matches the type 'text'. Ensure the length of 'transaction_id' is between 16 and 32 characters. Ensure this field exists.
For field 'transaction_amount': Ensure the field matches the type 'numeric'. Ensure values in 'transaction_amount' are greater than or equal to 0 and less than 100000.
For field 'user_id': Ensure the field matches the type 'text'. Ensure values in 'user_id' must exist in the set of valid user IDs from the user database.
For field 'transaction_date': Ensure the field matches the type 'date'. Ensure values in 'transaction_date' are within the range of '2021-01-01' and '2023-12-31'.
For field 'fraud_flag': Ensure the field matches the type 'boolean'. Ensure values in 'fraud_flag' must not match the set [true]. Ensure this field exists.
For field 'research_id': Ensure the field matches the type 'text'. Ensure the length of 'research_id' is exactly 10 characters. Ensure this field exists.
For field 'sample_size': Ensure the field matches the type 'numeric'. Ensure values in 'sample_size' are greater than or equal to 30 and less than or equal to 1000.
For field 'data_source': Ensure the field matches the type 'text'. Ensure values in 'data_source' must exist in the set ['Survey', 'Experiment', 'Observational Study']. Ensure this field exists.
For field 'publication_year': Ensure the field matches the type 'numeric'. Ensure values in 'publication_year' are within the range of 2000 and 2023.
For field 'data_format': Ensure the field matches the type 'text'. Ensure values in 'data_format' match the pattern '^(CSV|JSON|XML)$'. Ensure this field exists.
Ensure that the `student_id` column contains only unique values and adheres to the format of a 10-digit numeric string.
For the `course_duration` field, validate that all values are within the range of 1 to 52 weeks and are presented in numeric format.
Ensure the `grade` column values are from the set `['A', 'B', 'C', 'D', 'F']` and do not include any other characters or grades.
Validate that the `enrollment_date` column contains dates in the format 'YYYY-MM-DD' and that all dates are before the current date.
For `final_score`: Ensure the values are non-negative integers not exceeding 100 and that they follow a descending order across student records.
Ensure that the `email` field matches a valid email format and does not contain any SQL-like patterns such as `'%` or `';`.
Validate that `course_code` values are in the format 'XYZ123' where 'XYZ' are uppercase letters and '123' are digits, and that they are unique.
For the `attendance_percentage` column, ensure values are within the range of 0 to 100 and verify that they are not duplicates across records.
Ensure that the `student_name` field contains only alphabetic characters and has a length between 3 and 50 characters.
For `assignment_due_date`, confirm that all dates are in the future relative to the current date and follow the 'YYYY-MM-DD' format.
Validate the `course_level` column to ensure it contains only values from the set `['Beginner', 'Intermediate', 'Advanced']`.
Ensure that `total_credits` are positive integers and their sum across all courses does not exceed 180.
For the `feedback` column, ensure that each entry does not exceed 500 characters and contains no special characters other than periods, commas, or spaces.
Validate that `student_age` values are integers within the range of 18 to 100 and that they follow a consistent ascending order.
Ensure the `textbook_isbn` column matches the format of a 13-digit numeric string and is unique across all records.
Ensure the `post_status` column contains only values from the set `['Draft', 'Published', 'Archived']`.
For `publish_date`, validate that all entries are in the 'YYYY-MM-DD' format and occur before the current date.
Ensure that the `author_email` field matches a valid email pattern and does not contain any SQL-like patterns such as `'%` or `';`.
Validate that the `tags` column contains unique values that only consist of alphabetic characters and are separated by commas.
For the `word_count` column, ensure that values are positive integers not exceeding 5000 and that they are in ascending order across posts.
Ensure the `category` field contains values that match the predefined list `['Technology', 'Health', 'Lifestyle']`.
For `image_url`, confirm that all entries match a valid URL pattern and do not contain any spaces.
Validate that the `content` column does not exceed 2000 characters and does not contain any HTML tags.
For the `publication_year` column, ensure that values are integers within the range of 2000 to the current year.
Ensure the `comment_count` column contains only non-negative integers and that the total across all posts is unique.
Ensure the `study_id` column contains only distinct values within the range of [1000, 9999].
For the `publication_year` field: validate that all entries fall within the range of [2000, 2023].
Verify that the `author_email` column contains valid email formats as per regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.
Ensure the `sample_size` field is greater than 30 and within the range of [31, 1000].
For the `data_collection_method` field: confirm that values match one of the following patterns `['Survey', 'Experiment', 'Observation']`.
Validate that the `results` column contains strings with a minimum length of 50 characters and a maximum length of 2000 characters.
Ensure that the `confidence_interval` values are greater than 0 and less than or equal to 1.
For the `p_value` field: validate that all entries are less than 0.05.
Verify that the `keywords` column does not contain any SQL-like injection patterns such as `'; DROP TABLE`.
Ensure the `supplier_id` column contains unique values matching the set of [‘S001’, ‘S002’, ‘S003’].
For the `delivery_date` field: ensure all entries are within the range of [2023-01-01, 2023-12-31].
Validate that the `order_quantity` values are greater than 0 and do not exceed 5000.
Ensure the `product_code` column matches the predefined pattern of `^[A-Z]{3}-[0-9]{4}$`.
For the `order_status` field: confirm that values are limited to the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.
Verify that the `unit_price` values are within the range of [10.00, 1000.00].
Ensure that the `delivery_time` field follows the pattern `^[0-9]+ (days|hours)$`.
Validate that the `inventory_count` is sorted in decreasing order.
Ensure the `vehicle_id` column contains only distinct values and matches the pattern `^V[0-9]{4}$`.
For the `route_length` field: validate that all entries are greater than 0 and less than 1000 kilometers.
Verify that the `departure_time` column contains valid time formats and falls within the range of [00:00, 23:59].
Ensure the `cargo_weight` values are within the range of [1, 20000] kilograms.
For the `driver_license_number` field: confirm that values match the regex pattern `^[A-Z0-9]{6,12}$`.
Validate that the `vehicle_type` column only contains values from the specified set `['Truck', 'Van', 'Bicycle']`.
Ensure that the `shipment_date` is not greater than the current date.
Verify that the `tracking_number` field matches the specific pattern `^[0-9]{10}$` and does not contain any letters.
For field 'patient_id': Ensure the field matches the type 'integer'. Ensure values in (patient_id) are unique and do not exceed 10 digits.
For field 'date_of_birth': Ensure the field matches the type 'date'. Validate that all dates in (date_of_birth) are before the current date.
For field 'medication_code': Ensure the field matches the type 'text'. Validate that values in (medication_code) exist in the predefined set of valid medication codes.
For field 'visit_date': Ensure that values in (visit_date) are in ascending order and do not exceed today's date.
For field 'insurance_policy_number': Ensure the field matches the type 'text'. Validate that all values in (insurance_policy_number) conform to the format 'INS-XXXX-YYYY'.
For field 'article_status': Ensure the field matches the type 'text'. Validate that values in (article_status) are within the set ['draft', 'published', 'archived'].
For field 'author_email': Ensure the field matches the type 'text'. Validate that all values in (author_email) adhere to the standard email format using a regular expression.
For field 'publish_date': Ensure that values in (publish_date) are not later than the current date and are in chronological order.
For field 'category_slug': Ensure the field matches the type 'text'. Validate that values in (category_slug) do not contain special characters and are URL-friendly.
For field 'tags': Ensure that the values in (tags) do not exceed 15 characters in length and are unique within each record.
For field 'order_quantity': Ensure the field matches the type 'integer'. Validate that all values in (order_quantity) are greater than 0 and less than or equal to 1000.
For fields 'shipping_date' and 'delivery_date': Ensure that (delivery_date) is later than (shipping_date) for all records.
For field 'supplier_code': Ensure the field matches the type 'text'. Validate that values in (supplier_code) exist in the set of registered supplier codes.
For field 'product_price': Ensure that values in (product_price) fall within the range of $1 to $10,000. Ensure no negative values are present.
For field 'warehouse_location': Ensure the field matches the type 'text'. Validate that (warehouse_location) does not contain any SQL-like patterns from a predefined disallowed list.
For field 'claim_amount': Ensure the field matches the type 'decimal'. Validate that values in (claim_amount) are within the range of $0 to $100,000.
For field 'policy_start_date': Ensure that values in (policy_start_date) are before (policy_end_date) for all records.
For field ' insured_name': Ensure the field matches the type 'text'. Validate that all values in (insured_name) do not exceed 50 characters and contain only letters and spaces.
For field 'policy_type': Ensure the field matches the type 'text'. Validate that values in (policy_type) are within the set ['life', 'health', 'auto', 'home'].
For fields 'premium_amount' and 'deductible_amount': Ensure that the sum of (premium_amount + deductible_amount) equals the expected value of $1,500 for each record.
Ensure that the file 'patient_data.csv' exists and matches the SHA256 hash 'abc123...' to verify integrity.
For the file 'inventory.json': Ensure the file contains valid JSON formatting and includes the required headers: ['product_id', 'product_name', 'quantity'].
For the file 'claims_data.xlsx': Ensure that it does not exceed 10,000 rows and that all rows contain the required columns.
Ensure that the file 'shipping_records.txt' contains at least 50 lines, with each line matching the regex pattern for valid shipping labels.
Ensure that the file 'supplier_list.xml' adheres to the specified schema and contains no duplicate supplier entries.
Ensure the `temperature` column values are within the range of -30 to 50 degrees Celsius.
Verify that the `date` column entries conform to the format 'YYYY-MM-DD'.
Ensure the `precipitation` column contains only values from the set `[0, 1, 2, 3, 4, 5]` representing millimeters of rain.
Check that the `humidity` column has a mean value between 20% and 100%.
Ensure the `wind_speed` column values are arranged in increasing order.
Ensure the `transaction_amount` column values are greater than zero and less than or equal to 1,000,000.
Verify that the `timestamp` column adheres to the ISO 8601 datetime format.
Ensure the `currency_type` column contains only distinct values from the set `['BTC', 'ETH', 'LTC']`.
Check that the `block_size` column has a standard deviation of less than 500 KB.
Ensure the `gas_price` column values follow a normal distribution with a mean between 20 and 100 Gwei.
Ensure the `check_in_date` and `check_out_date` columns follow the format 'YYYY-MM-DD' and that the `check_out_date` is after the `check_in_date`.
Verify that the `room_price` column values are within the range of 50 to 500 USD.
Ensure the `guest_count` column only contains integer values greater than zero.
Check that the `review_score` column has a median value of at least 4.0.
Ensure the `amenities` column entries are valid JSON objects conforming to the specified schema.
Ensure the `enrollment_date` column is formatted as 'YYYY-MM-DD' and that all dates are prior to the current date.
Verify that the `student_score` column values are between 0 and 100.
Ensure the `course_category` column contains distinct values from the set `['Math', 'Science', 'Arts']`.
Check that the `attendance_rate` column has a mean value of at least 75%.
Ensure the `feedback` column consists of valid JSON strings that match the specified schema.
Ensure the `service_request_date` column adheres to the format 'YYYY-MM-DD' and that all requests are logged within the last year.
Verify that the `response_time` column values are within the range of 0 to 48 hours.
Ensure the `case_status` column only contains values from the set `['Open', 'Closed', 'In Progress']`.
Check that the `budget` column has a sum value that does not exceed 1,000,000 USD.
Ensure the `demographic_data` column values are valid JSON objects that conform to the specified schema.
Ensure the `order_status` column contains only values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.
For the `delivery_date` field: Verify that all values are in the format 'YYYY-MM-DD' and can be parsed using dateutil.
Check that the `quantity` column values are within the range of 1 to 1000 and are arranged in increasing order.
Ensure the `supplier_id` column contains unique values that match existing entries in the `supplier` table.
For the `shipping_cost`: Validate that the mean value is less than $50 and the maximum does not exceed $100.
Verify that the `item_code` column contains valid JSON objects conforming to the specified schema.
For the `inventory_level`: Ensure the values do not exceed the set range of 0 to 5000 and check for distinct values.
Ensure the `expected_delivery_date` column contains dates that are not earlier than the current date.
Check that the `purchase_order_number` follows the specified format 'PO-XXXXXX' and that all values are unique.
For the `property_type` field: Ensure the values belong to the set `['Residential', 'Commercial', 'Industrial']`.
Verify that the `listing_date` column has all entries in the 'MM/DD/YYYY' format and are parsed correctly.
Ensure that the `price` column has values falling within the range of $100,000 to $2,000,000.
Check that the `square_footage` values have a mean above 800 and do not exceed 10,000.
For the `agent_id`: Ensure there are no duplicates and that all values exist in the `agents` table.
Validate that the `property_address` field contains valid JSON objects and adheres to the specified JSON schema.
Ensure the `last_sold_date` entries are not earlier than '01/01/2000' and are in the correct format.
Check that the `bedrooms` column has only integer values in the set {1, 2, 3, 4, 5}.
For the `service_plan` column: Ensure the values match the defined set `['Basic', 'Premium', 'Family', 'Business']`.
Verify that the `activation_date` field uses the format 'YYYY-MM-DD' and is parsed correctly.
Ensure that the `monthly_fee` column has values with a mean between $30 and $100.
Check that the `customer_id` column has unique entries and matches IDs from the `customers` table.
For the `data_usage` field: Ensure values are within the range of 0 to 1000 GB and check for increasing order.
Validate that the `contract_length` entries are integers and fall within the range of 12 to 36 months.
Ensure the `device_type` column contains valid JSON objects and conforms to the specified schema.
Check that the `last_payment_date` entries are not in the future and are formatted correctly as 'MM-DD-YYYY'.
Ensure the `booking_date` column contains valid datetime entries that conform to the format `'%Y-%m-%d'`.
Ensure the values in the `room_type` column are within the set `['Single', 'Double', 'Suite']`.
Ensure the `guest_count` column values are greater than zero and less than or equal to 10.
For the `checkout_date`: Ensure it is always later than the `checkin_date`.
Ensure that the `price` column values follow a normal distribution with a mean of 100 and a standard deviation of 20.
Ensure the `employee_id` column contains unique values that are integers greater than zero.
Verify that the `hire_date` column contains valid datetime entries and is not later than the current date.
Ensure the `salary` column entries are within the range of $30,000 to $150,000.
For the `performance_rating`: Ensure the values are either `['Excellent', 'Good', 'Average', 'Poor']`.
Ensure that the sum of `base_salary` and `bonus` columns matches the `total_compensation` column.
Ensure the `timestamp` column follows the ISO 8601 format: `'%Y-%m-%dT%H:%M:%S'`.
Ensure the `threat_level` column contains only distinct values from the set `['Low', 'Medium', 'High']`.
Verify the `alert_count` column values are non-negative integers.
Ensure that the `response_time` column entries are less than or equal to 60 minutes.
For the `incident_type`: Ensure that the values are not in the set `['Phishing', 'Malware', 'Insider Threat']`.
Ensure the `delivery_date` column contains valid datetime entries that are not in the past.
Ensure the `vehicle_type` column entries are from the set `['Truck', 'Van', 'Motorcycle']`.
Verify that the `distance_travelled` column values are positive and do not exceed 1,000 kilometers.
Ensure that the sum of the `weight` and `volume` columns does not exceed the `capacity` column.
For the `shipment_status`: Ensure it follows the format of `['Pending', 'In Transit', 'Delivered']`.
Ensure the `order_date` column follows the format `'%Y-%m-%d'` and is not older than one year from the current date.
Verify that the `product_id` column contains unique values that are integers.
Ensure the `inventory_level` column values are within the range of 0 to 5000.
Ensure that the `supplier_rating` column contains values from the defined set `['A', 'B', 'C']`.
For the `lead_time`: Ensure that it is greater than or equal to the `preparation_time` column.
Ensure the `product_category` column contains only distinct values from the set `['Electronics', 'Clothing', 'Home Goods']`.
Ensure the `price` column values are within the range of $5 to $500.
Verify that the `stock_quantity` column is in increasing order across all entries.
Check that the `last_restocked` column contains datetime strings formatted as `'%Y-%m-%d %H:%M:%S'`.
Ensure that the `discount` column values are not negative and do not exceed 100%.
Validate that the `supplier_info` column contains valid JSON objects conforming to the specified schema.
Check that the `sales` column passes the Chi-Square test with a p-value greater than 0.05.
Ensure that the total number of entries in the `products` file does not exceed 1000 lines.
Verify that the `product_id` column contains unique values and does not include any null entries.
Ensure the `shipment_status` column contains only values from the set `['Pending', 'Shipped', 'Delivered', 'Returned']`.
Validate that the `delivery_date` column values follow the datetime format `'%Y-%m-%d'`.
Check if the `distance_km` column values are within the range of 1 to 5000 km.
Ensure that the `cargo_weight` column values are in decreasing order across all entries.
Verify that the `tracking_info` column contains valid JSON objects according to the defined schema.
Check that the average `delivery_time` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure that the `carrier` column contains values only from the set `['FedEx', 'UPS', 'DHL']`.
Validate that the `manifest` file exists, matches the specified hash value, and contains no more than 500 lines.
Ensure the `room_type` column has distinct values from the set `['Single', 'Double', 'Suite']`.
Check that the `booking_date` column follows the datetime string format `'%d-%m-%Y %H:%M'`.
Verify that the `guest_count` column values are within the range of 1 to 10.
Ensure the `price_per_night` column values are in increasing order for all entries.
Validate that the `amenities` column contains valid JSON arrays conforming to the specified schema.
Check that the `cancellation_policy` column contains values not from the set `['No Refund', 'Partial Refund']`.
Ensure that the standard deviation of the `customer_ratings` column is below 1.5.
Validate that the `reservations` file exists, matches the specified hash value, and has valid JSON formatting.
Ensure the `customer_status` column contains only distinct values matching `['Active', 'Inactive', 'Pending']`.
For field `signup_date`: Ensure the datetime values are in the format 'YYYY-MM-DD' and fall within the range of '2020-01-01' to '2023-12-31'.
Verify that the `customer_age` column values are integers and fall within the range of 18 to 99.
Ensure that the `contact_email` column contains valid email formats and that no two entries are identical.
For field `last_purchase_date`: Ensure the field matches the type 'datetime'. Verify that it is less than or equal to today's date.
Ensure the `transaction_amount` values are positive and within a range of 0.01 to 10,000.00.
For field `account_creation_date`: Ensure the field is in the correct datetime format 'MM/DD/YYYY' and is not a future date.
Verify that the `interest_rate` column values are greater than 0 and less than or equal to 0.25.
Ensure that the `account_number` column is unique across all records.
For fields `balance` and `overdraft_limit`: Ensure that `balance` is greater than or equal to `overdraft_limit`.
Ensure the `course_code` column contains only values from the predefined set `['CS101', 'MATH201', 'BIO301']`.
For field `enrollment_date`: Ensure the field matches the type 'datetime' and that it is not earlier than the course start date.
Verify that the `student_grade` values are integers between 0 and 100.
Ensure that the `final_exam_score` is unique within each student record.
For fields `course_start_date` and `course_end_date`: Ensure that `course_end_date` is greater than `course_start_date`.
Ensure the `product_category` values are from the set `['Electronics', 'Clothing', 'Home']`.
For field `launch_date`: Ensure the datetime format is 'YYYY-MM-DD' and that it is not a future date.
Verify that the `product_price` values are non-negative and fall within the range of 0.00 to 5000.00.
Ensure that the `sku` column contains unique values for each product.
For fields `discounted_price` and `original_price`: Ensure that `discounted_price` is less than `original_price`.
Ensure the `room_type` column contains only values from the set `['Single', 'Double', 'Suite']`.
For field `check_in_date`: Ensure the datetime format is 'YYYY-MM-DD' and that it is not earlier than today's date.
Verify that the `guest_count` column values are integers and fall within the range of 1 to 10.
Ensure that the `booking_reference` column has unique values across all records.
For fields `amount_paid` and `total_cost`: Ensure that `amount_paid` is greater than or equal to `total_cost`.
Ensure the `property_type` column contains only distinct values matching `['Apartment', 'House', 'Commercial']`.
Verify that the `price` column values are within the range of $50,000 to $5,000,000.
Ensure the `square_feet` column has a mean value greater than 1,000 and less than 5,000.
Check that the `listing_date` column values are in chronological order.
Ensure the `bedrooms` column contains only integers between 1 and 10.
Ensure the `course_code` column contains only distinct values that exist in the `courses` table.
Verify that the average `student_grade` in the `grades` column is within the range of 60 to 100.
Check that the `enrollment_date` column values pass the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `completion_status` column contains values from the set `['Completed', 'In Progress', 'Not Started']`.
Validate that the `final_exam_score` sums up to match the expected total for each course.
Ensure the `sensor_type` column values are from the set `['Temperature', 'Humidity', 'Pressure']`.
Verify that the `battery_level` column maintains a standard deviation less than 10%.
Check that the `data_timestamp` column values are in ascending order.
Ensure the `temperature_reading` column values are within the range of -30 to 50 degrees Celsius.
Confirm that the `device_id` and `location_id` combination is unique across records.
Ensure the `plan_type` column contains only distinct values matching `['Prepaid', 'Postpaid', 'Family']`.
Verify that the `monthly_bill` column has a mean value between $20 and $150.
Check that the `data_usage` column values pass the Chi-Square test with a p-value greater than 0.05.
Ensure the `contract_start_date` is earlier than `contract_end_date` for all records.
Validate that the `customer_feedback_score` column contains values between 1 and 10.
Ensure the `post_type` column values are from the set `['Text', 'Image', 'Video']`.
Verify that the `likes_count` column has a median value greater than 100.
Check that the `registration_date` column values are in chronological order.
Ensure the `user_age` column values fall within the range of 13 to 100.
Confirm that the sum of `shares_count` and `likes_count` equals the `engagement_score` for each post.
Ensure the `policy_type` column contains only distinct values matching `['Health', 'Auto', 'Home']`.
Verify that the `premium_amount` column values are between $100 and $5000.
Confirm that the `claim_date` column is arranged in increasing order.
Ensure the `customer_age` values have a mean of at least 30 years and a maximum of 70 years.
Verify that the `coverage_limit` column has a standard deviation below $2000.
Ensure that the `policy_start_date` is earlier than the `policy_end_date` for all records.
Confirm that the sum of the `claim_amount` column does not exceed $1,000,000.
Check that the `deductible` values in the `deductible_type` column are within the set `['Low', 'Medium', 'High']`.
Ensure that the `insurance_score` column values are greater than or equal to the `risk_factor` column values.
Verify that the `customer_id` and `policy_id` combinations are unique across all records.
Ensure the `post_category` column contains only distinct values matching `['News', 'Entertainment', 'Education']`.
Verify that the `likes_count` column values are between 0 and 10,000.
Confirm that the `follower_count` column is arranged in decreasing order.
Ensure that the `average_engagement_rate` column has a mean above 0.05.
Check that the `post_length` column values have a minimum of 50 characters and a maximum of 2000 characters.
Ensure that the `share_count` column values are not greater than the `like_count` column values.
Confirm that the sum of the `comments_count` across all records does not exceed 500,000.
Verify that the `user_status` column values are within the set `['Active', 'Inactive', 'Banned']`.
Ensure that the `creation_date` is earlier than the `last_update_date` for each post.
Check that the `username` and `email` combinations are unique across all user records.
Verify that the uploaded file matches the hash value `abc123xyz` and is less than 5MB in size.
Ensure that the CSV file contains valid headers: `['user_id', 'post_id', 'timestamp']`.
Confirm that the JSON data file has proper formatting with no missing brackets or commas.
Check that the number of lines in the uploaded log file does not exceed 10,000.
Ensure that the `user_data` column in the file contains valid entries matching the regular expression `^[A-Za-z0-9_]{3,15}$`.
Ensure the `release_date` column contains dates formatted as 'YYYY-MM-DD' and are valid dates.
Validate that the `game_rating` column only contains values matching the regex pattern `^(E|T|M)$`.
For the `platform` field, ensure all entries match the set of allowed values: `['PC', 'Xbox', 'PlayStation', 'Switch']`.
Ensure that the `price` column has a mean value greater than or equal to 20. Validate that no entries exceed the maximum of 100.
Verify that `user_reviews` contain strings between 10 and 500 characters long. Ensure no entry has invalid characters.
Check that the `genre` column adheres to a predefined list of genres: `['Action', 'Adventure', 'RPG']` and has no duplicates.
Ensure the `release_date` is not in the future and matches the datetime format 'YYYY-MM-DD'.
For the `download_count` column, confirm that the sum of values does not exceed 1 million and validate against the expected distribution using KS test.
Ensure the `student_id` column only contains alphanumeric strings of length 8.
Validate that the `submission_date` column contains dates that can be parsed according to ISO 8601 standards.
Check that the `course_category` field matches one of the predefined categories: `['Math', 'Science', 'Arts']`.
For the `grades` column, ensure that the mean is between 70 and 100 and standard deviation does not exceed 15.
Ensure that the `module_completion_status` column contains only values from the set: `['Completed', 'In Progress', 'Not Started']`.
Validate the `enrollment_date` column for valid datetime entries and ensure they do not precede the course start date.
Ensure that the `feedback` column contains strings that do not exceed 200 characters and match the regex pattern `^[A-Za-z0-9 .,?!-]+$`.
Ensure the `booking_date` column is formatted as 'YYYY-MM-DD' and is a past date.
Validate that the `room_type` column matches one of the expected values: `['Single', 'Double', 'Suite']`.
For the `guest_email` field, ensure it matches the regex pattern for valid emails and is not duplicated.
Verify that the `price_per_night` column has a median value between 50 and 300, with no outliers present.
Ensure the `check_in` and `check_out` dates are valid datetime entries and that `check_out` is later than `check_in`.
For the `amenities` field, ensure that the JSON structure is valid and conforms to the specified JSON schema.
Ensure the `review_score` column contains only integer values between 1 and 10, and validate against the expected distribution parameters.
Ensure that the `property_type` column matches the allowed types: `['Apartment', 'House', 'Condo']` and has no duplicates.
For the `listing_date`, confirm that all entries follow the 'YYYY-MM-DD' format and are not future dates.
Validate that the `price` column has at least 10 unique values and that the average price is within the range of 100,000 to 1,000,000.
Ensure the `vehicle_id` column contains only string values that match the regex pattern `^V[0-9]{5}$` for consistent vehicle identification.
Validate that the `departure_time` field follows the `'%Y-%m-%d %H:%M:%S'` format and contains no null values.
For the `delivery_status` field, ensure it contains only values from the set `['Pending', 'In Transit', 'Delivered']`.
Ensure that the `weight` column has a mean value greater than 0 and less than 5000, and validate that the standard deviation does not exceed 1000.
Verify that the `pickup_location` field is a valid JSON object conforming to the specified schema for location data.
Ensure the `tracking_number` column contains only distinct values matching the regex pattern `^[A-Z]{2}[0-9]{9}[A-Z]{2}$`.
Validate that the `estimated_arrival` date falls within 30 days of the `departure_time` and is formatted correctly.
For the `cargo_type` field, ensure that values do not match any SQL-like pattern from the list `['SELECT', 'DROP', 'INSERT']`.
Check that the sum of `item_value` and `shipping_cost` equals the `total_cost` for all records.
Ensure that the `driver_license` column contains only string values of length 15 that match the regex pattern `^[A-Z0-9]*$`.
Ensure the `username` column values match the regex pattern `^[a-zA-Z0-9_]{3,15}$` to maintain valid username formats.
Validate that the `post_date` field matches the `'%Y-%m-%dT%H:%M:%S'` ISO 8601 format and contains no empty strings.
For the `post_category` field, ensure it contains only values from the predefined list `['News', 'Entertainment', 'Sports']`.
Ensure the average `likes` count per post is greater than 10 and less than 1000, with a unique value count of at least 50.
Verify that the `comments` field is a valid JSON array of strings and conforms to the specified schema.
Ensure that the `email` column values do not match any patterns from the list `['example.com', 'test.com']`.
Confirm that the `created_at` field is within 6 months of the current date and is formatted correctly.
For the `follower_count` field, ensure that values are greater than or equal to `following_count` for all records.
Check that the combination of `user_id` and `post_id` is unique across the dataset.
Validate that the `bio` column has a maximum length of 160 characters and contains no special characters.
Ensure the `email_address` column contains valid email formats using the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.
Validate that the `sent_time` field adheres to the `'%Y-%m-%d %H:%M:%S'` format and is not null.
For the `message_type` field, ensure it contains only string values from the set `['Text', 'Image', 'Video']`.
Ensure that the `attachments` field is a valid JSON object that meets the specified schema for file types.
Check that the `read_receipt` field is true only if the `status` is marked as 'Read', ensuring logical consistency between columns.
Validate that the `game_title` column contains string values with a length between 3 and 100 characters, ensuring no titles exceed this limit.
For the `release_date` column, ensure all dates are formatted as `YYYY-MM-DD` and do not contain any future dates.
Check that the `genre` column only includes values from the predefined list `['Action', 'Adventure', 'RPG', 'Simulation']`.
Ensure that the `platform` field does not match any SQL-like patterns such as '%Windows%' or '%Mac%'.
Validate that the `user_rating` column has values between 0 and 10, ensuring the mean rating is above 5.
For the `voter_id` column, confirm that all entries are exactly 10 characters long and match the regex pattern `^[A-Z0-9]{10}$`.
Validate that the `vote_cast_date` column contains dates formatted as `MM/DD/YYYY` and that they are all from the current election cycle.
Ensure the `state_code` column has distinct values matching the set `['CA', 'TX', 'NY', 'FL']` and does not include any invalid entries.
Check that the `voter_age` field has a minimum value of 18 and a maximum value of 120, with an average age above 30.
For the `ballot_status` column, validate that it contains only the values `['Received', 'Counted', 'Rejected']` and that none are null.
Ensure the `case_number` column matches the regex pattern `^CASE-\d{5}$` and contains unique identifiers.
Validate that the `filing_date` column contains dates formatted as `YYYY-MM-DD` and that no entries are older than 10 years.
Check that the `court_name` field does not match any patterns from the list `['Invalid Court', 'Unknown Court']`.
Ensure the `case_status` column has values counted accurately, with unique statuses matching the list `['Open', 'Closed', 'Pending']`.
For the `plaintiff_name` column, confirm that all names are at least 2 characters long and do not exceed 50 characters.
Validate that the `product_id` column contains unique identifiers that follow the pattern `^[A-Z]{3}-[0-9]{4}$`.
Ensure the `price` column has values greater than zero, and that the average price is within the range of $20 to $200.
Check that the `category` column only includes distinct values from the specified list `['Electronics', 'Clothing', 'Home']`.
For the `sku` field, ensure that all entries are exactly 8 characters long and do not contain any special characters.
Validate that the `customer_email` column matches the regex pattern for valid emails and does not contain any duplicates.
Ensure that the `shipping_cost` is always less than `total_price` for all records in the e-commerce dataset.
Validate that the `order_date` is always earlier than the `delivery_date` for all entries in the orders table.
Check that the sum of `item_subtotal` equals `total_price` across all items in each order in the e-commerce dataset.
For the voting system, confirm that the `voter_age` is greater than or equal to 18 years when compared to the `vote_cast_date`.
Validate that the `status` of each legal case in `case_status` is not 'Closed' if the `resolution_date` is null.
For field 'case_number': Ensure the field matches the type 'text'. Validate that the string length of (case_number) is exactly 10 characters. Ensure this field exists.
For field 'client_email': Ensure the field matches the type 'text'. Validate that (client_email) conforms to a standard email format using the regex pattern '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'. Ensure this field exists.
For field 'case_status': Ensure the field matches the type 'text'. Validate that all values in (case_status) must match one of the predefined statuses: (Open, Closed, Pending, Archived). Ensure this field exists.
For field 'lead_source': Ensure the field matches the type 'text'. Validate that (lead_source) does not match any patterns from the list: (Spam, Invalid, Unqualified). Ensure this field exists.
For field 'created_at': Ensure the field matches the type 'date'. Validate that all dates in (created_at) are not in the future. Ensure this field exists.
For field 'case_filing_date': Ensure the field matches the type 'date'. Validate that the average filing date in (case_filing_date) falls within the last 5 years. Ensure this field exists.
For field 'client_phone': Ensure the field matches the type 'text'. Validate that (client_phone) matches the regex pattern '^\\+?[0-9]{1,3}?[-.\\s]?([0-9]{1,4}[-.\\s]?){1,3}[0-9]{1,4}$'. Ensure this field exists.
For field 'case_priority': Ensure the field matches the type 'text'. Validate that the unique values in (case_priority) must be one of the following: (Low, Medium, High). Ensure this field exists.
For field 'total_hours_billed': Ensure the field matches the type 'numeric'. Validate that the sum of (total_hours_billed) does not exceed 1000 hours for any case. Ensure this field exists.
For field 'client_feedback_score': Ensure the field matches the type 'numeric'. Validate that the mean of (client_feedback_score) falls within the range of 1 to 5. Ensure this field exists.
For field 'document_file_size': Ensure the field matches the type 'numeric'. Validate that (document_file_size) falls within the range of 1 KB to 5 MB. Ensure this field exists.
For field 'case_notes': Ensure the field matches the type 'text'. Validate that the length of (case_notes) does not exceed 2000 characters. Ensure this field exists.
For field 'contact_email': Ensure the field matches the type 'text'. Validate that (contact_email) does not match any SQL-like patterns from the list: (SELECT, DROP, INSERT). Ensure this field exists.
For field 'case_outcome': Ensure the field matches the type 'text'. Validate that the distribution of outcomes in (case_outcome) aligns with expected proportions: (Win: 60%, Lose: 30%, Settlement: 10%). Ensure this field exists.
For field 'crm_leads': Ensure the field matches the type 'numeric'. Validate that the distinct count of (crm_leads) is equal to or greater than 100. Ensure this field exists.
For field 'file_hash': Ensure the field matches the type 'text'. Validate that (file_hash) matches the SHA256 hash of the uploaded document. Ensure this field exists.
For field 'lead_status': Ensure the field matches the type 'text'. Validate that (lead_status) does not match any patterns from the list: (Inactive, Blacklisted). Ensure this field exists.
For field 'contact_phone': Ensure the field matches the type 'text'. Validate that the string length of (contact_phone) is exactly 10 digits. Ensure this field exists.
For field 'document_header': Ensure the field matches the type 'text'. Validate that (document_header) contains valid headers: (Name, Date, Status). Ensure this field exists.
For field 'service_fee': Ensure the field matches the type 'numeric'. Validate that the median of (service_fee) falls within the range of $100 to $500. Ensure this field exists.
For field 'client_zip_code': Ensure the field matches the type 'text'. Validate that (client_zip_code) matches the regex pattern '^[0-9]{5}(-[0-9]{4})?$'. Ensure this field exists.
For field 'meeting_notes_file': Ensure the field matches the type 'file'. Validate that (meeting_notes_file) exists and is in a valid format (DOCX, PDF). Ensure this field exists.
For field 'communication_log': Ensure the field matches the type 'text'. Validate that (communication_log) does not exceed 500 entries. Ensure this field exists.
For field 'assigned_attorney': Ensure the field matches the type 'text'. Validate that all values in (assigned_attorney) must match a list of active attorney names. Ensure this field exists.
For field 'client_address': Ensure the field matches the type 'text'. Validate that (client_address) contains at least one numeric value (e.g., street number). Ensure this field exists.
For field 'email': Ensure the field matches the type 'text'. Validate that the values in (email) conform to the standard email format (e.g., username@domain.com).
For field 'customer_id': Ensure the field is required (not null). Validate that the length of 'customer_id' is exactly 10 characters.
For fields 'first_name' and 'last_name': Ensure both fields are of type 'text'. Validate that the lengths of values in (first_name) and (last_name) do not exceed 50 characters.
For field 'date_of_birth': Ensure the field matches the type 'date'. Validate that the dates are not in the future.
For field 'phone_number': Ensure the values in (phone_number) match the pattern '^\+?[1-9]\d{1,14}$', indicating a valid international phone number format.
For field 'article_title': Ensure the field matches the type 'text'. Validate that the lengths of values in (article_title) are between 10 and 100 characters.
For field 'published_date': Ensure the field matches the type 'date'. Validate that the published dates are unique and not null.
For field 'content_type': Ensure values in (content_type) must exist in the set ['blog', 'tutorial', 'news']. Validate that it is not null.
For field 'tags': Ensure that the values in (tags) do not match any SQL-like patterns from the list ['SELECT', 'DROP', 'DELETE'].
For field 'summary': Ensure the field matches the type 'text'. Validate that the values do not exceed 200 characters.
For field 'player_id': Ensure the field is required (not null). Validate that the values in (player_id) match a specified pattern, ensuring they are alphanumeric and 8 characters long.
For field 'match_date': Ensure the values in (match_date) are in the format 'YYYY-MM-DD' and do not exceed today's date.
For fields 'goals_scored' and 'assists': Ensure that the sum of (goals_scored) and (assists) equals the total contributions for each player.
For field 'team_name': Ensure values in (team_name) must exist in the predefined set of teams from the league.
For field 'player_age': Validate that the mean age of players in the dataset is between 20 and 35 years.
For field 'zip_code': Ensure values in (zip_code) match the pattern '^\d{5}$' and are valid US zip codes.
For field 'resident_since': Ensure the field matches the type 'date'. Validate that the values in (resident_since) do not exceed the current date.
For field 'service_request_id': Validate that the length of 'service_request_id' is exactly 12 characters and is unique across the dataset.
For field 'incident_type': Ensure values in (incident_type) must exist in the list ['theft', 'vandalism', 'accident']. Validate that it is not null.
For field 'reporting_officer': Ensure the field matches the type 'text'. Validate that the lengths of values in (reporting_officer) do not exceed 50 characters.
For field 'product_sku': Ensure values in (product_sku) match the pattern '^[A-Z0-9]{8}$' to confirm a valid SKU format.
For field 'price': Validate that the average price of products in (price) falls within the range of $10 to $500.
For fields 'quantity_sold' and 'returns': Ensure that the sum of (quantity_sold) minus (returns) equals the total net sales for each product.
For field 'category': Ensure values in (category) must exist in the predefined set ['electronics', 'clothing', 'home']. Validate that it is not null.
For field 'review_score': Validate that the maximum value of (review_score) does not exceed 5 and all values are within the range of 1 to 5.
Ensure the `transaction_date` column contains datetime values formatted as '%Y-%m-%d' and can be parsed using dateutil.
Verify that the `account_balance` column has a mean value within the range of 1000 to 50000.
Ensure the `transaction_amount` column's standard deviation does not exceed 1000 and the maximum value is less than 10000.
Confirm that the `account_type` column contains only distinct values matching `['Savings', 'Checking', 'Loan']`.
Ensure the `last_updated` column contains datetime values that are not older than 30 days from the current date.
Verify that the sum of the `monthly_income` column falls between 20000 and 500000.
Check that the `transaction_id` column consists of valid JSON objects and adheres to the specified JSON schema.
Ensure the `interest_rate` column values are within the range of 0.01 to 0.20, inclusive.
Verify that the unique value count in the `customer_id` column is equal to the total number of transactions.
Ensure that the `credit_score` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `fraud_detection_date` column contains datetime values that match the format '%d-%b-%Y'.
Verify that the `alert_score` column's maximum value does not exceed 100 and the mean is above 50.
Confirm that the `transaction_time` column values adhere to the specified strftime format '%H:%M:%S'.
Check that the `fraudulent` column contains only valid JSON objects indicating whether each transaction is fraud (true/false).
Ensure the `alert_type` column has a distinct set of values matching `['High Risk', 'Medium Risk', 'Low Risk']`.
Verify the Kullback-Leibler divergence between distributions of `alert_scores` is below 0.1.
Ensure the `transaction_value` column has a minimum value of 0 and does not exceed 5000.
Confirm that the `user_id` column's unique values are less than or equal to the total number of alerts.
Ensure the `alert_timestamp` column contains values not older than 60 days from the current date.
Verify that the number of lines in the `fraud_alerts.csv` file does not exceed 5000, and it has valid table headers.
Ensure the `forecast_date` column contains datetime values formatted as '%Y-%m-%d' and can be parsed using dateutil.
Verify that the `temperature` column's mean is between 10 and 40 degrees Celsius.
Ensure that the `precipitation` column's values fall within the range of 0 to 300 millimeters.
Check that the `weather_conditions` column contains valid JSON objects representing weather statuses.
Confirm that the `wind_speed` column passes the Chi-Square test with a p-value greater than 0.05.
Ensure the `game_date` column adheres to the format 'YYYY-MM-DD' and all values can be parsed using dateutil.
For the `player_statistics` column, validate that all entries conform to a predefined JSON schema representing player metrics.
Ensure the `score` column values are non-negative integers and do not exceed 300.
For the `team_rank` and `previous_rank` columns, confirm that `team_rank` is less than `previous_rank` for all records.
Verify that the `attendance` column passes a KS test with a p-value greater than 0.05, confirming a normal distribution of attendance figures.
Ensure that the `transaction_date` column matches the strftime format '%Y-%m-%d %H:%M:%S' and is consistently formatted.
Check that the `account_balance` column contains valid numeric values and that no balance is negative.
For the columns `credit_limit` and `current_balance`, ensure that `current_balance` is always less than or equal to `credit_limit`.
Verify that the `interest_rate` column has values that fall within a specified range of 0.01 to 0.20 and passes a Chi-Square test with a p-value greater than 0.05.
Ensure the `transaction_data` column contains valid JSON objects representing transaction details as per the defined schema.
Ensure the `shipment_date` column values are in ISO 8601 format and can be parsed using dateutil.
Verify that the `delivery_time` column values are greater than the `pickup_time` column for all records.
For the `weight` and `volume` columns, confirm that the sum of `weight` across shipments equals the expected total weight for the date.
Check that the `route_id` and `vehicle_id` combinations in the dataset are unique, ensuring no duplicate records exist.
Ensure the `delivery_status` column contains only valid values from the set ['Pending', 'In Transit', 'Delivered', 'Cancelled'].
Ensure the `post_date` column adheres to the format 'YYYY-MM-DD HH:MM:SS' and can be parsed accordingly.
For the `user_engagement` column, verify that all values are percentages between 0 and 100, and check for any anomalies.
Verify that the `likes` and `shares` columns are non-negative integers and that the total interactions (likes + shares) exceed a specified threshold.
Ensure that the `user_profile` column contains valid JSON objects structured according to the defined user schema.
Check that the `follower_count` column passes a KS test for a normal distribution with a p-value greater than 0.05.
Ensure the `data_file` exists and matches the specified hash value, confirming file integrity.
For the `timestamp` column, ensure that all entries are within the past year and can be parsed correctly.
Verify that the `transaction_amount` and `service_fee` columns sum to an expected total for each record.
Ensure the `user_id` and `session_id` combinations are unique within the dataset to prevent duplication.
Confirm that the `metadata` column contains JSON objects that adhere to the specified schema for all records in the dataset.
For field 'meter_reading_date': Ensure the field is required (not null). Validate that all values conform to the datetime format 'YYYY-MM-DD'.
For field 'energy_consumption': Ensure values are within the range of 0 to 10000 kWh. Ensure this field exists.
Ensure the 'customer_id' column contains only distinct values. Validate that the field is of type 'integer'.
For field 'billing_cycle': Ensure values fall within the set ['Monthly', 'Quarterly', 'Annually']. Ensure this field exists.
For field 'utility_type': Ensure the field matches the type 'text'. Ensure values in (utility_type) must exist in categories (['Electricity', 'Water', 'Gas']).
For field 'reservation_date': Ensure that all dates match the strftime format '%Y-%m-%d'. Ensure this field exists.
For field 'room_number': Ensure the field is required (not null). Ensure values are unique and of type 'integer'.
Ensure the 'guest_email' column matches the regular expression pattern for valid email addresses. Ensure this field exists.
For field 'check_in_time': Validate that values conform to the time format 'HH:MM AM/PM'. Ensure all values are valid.
For field 'booking_status': Ensure the field matches the type 'text'. Ensure values in (booking_status) must exist in statuses (['Confirmed', 'Pending', 'Cancelled']).
For field 'device_id': Ensure the field is required (not null). Ensure the field contains only distinct values and is of type 'text'.
For field 'temperature_reading': Ensure values are within the range of -40 to 125 degrees Celsius. Ensure this field exists.
For field 'last_update': Ensure all timestamps match the ISO 8601 format. Ensure this field exists.
For field 'battery_level': Validate that values are within the range of 0 to 100%. Ensure this field exists.
For field 'sensor_type': Ensure the field matches the type 'text'. Ensure values in (sensor_type) must exist in types (['Temperature', 'Humidity', 'Pressure']).
For field 'property_id': Ensure the field is required (not null). Ensure values are unique and of type 'integer'.
For field 'listing_price': Ensure values are within the range of 0 to 10,000,000. Ensure this field exists.
For field 'property_type': Ensure the field matches the type 'text'. Ensure values in (property_type) must exist in types (['Residential', 'Commercial', 'Land']).
For field 'listing_date': Ensure all values conform to the datetime format 'YYYY-MM-DD'. Ensure this field exists.
For field 'address': Ensure the field is required (not null). Validate that the string length is between 5 and 255 characters.
For field 'forecast_date': Ensure that all dates match the strftime format 'YYYY-MM-DD'. Ensure this field exists.
For field 'temperature_min': Ensure values are within the range of -50 to 50 degrees Celsius. Ensure this field exists.
For field 'precipitation': Ensure the field is required (not null). Ensure values are of type 'float' and within the range of 0.0 to 500.0 mm.
For field 'weather_condition': Ensure the field matches the type 'text'. Ensure values in (weather_condition) must exist in conditions (['Sunny', 'Rainy', 'Cloudy']).
For field 'wind_speed': Ensure values are within the range of 0 to 150 km/h. Ensure this field exists.
For field 'study_id': Ensure the field exists and matches the type 'integer'. Ensure all values in (study_id) are unique.
For field 'sample_size': Ensure the field exists and matches the type 'integer'. Ensure values in (sample_size) are greater than 0 and less than or equal to 1000.
For field 'publication_date': Ensure the field exists and matches the type 'date'. Ensure all dates in (publication_date) are in the past.
For field 'data_quality_score': Ensure the field exists. Validate that values in (data_quality_score) fall within the range of 1 to 10.
For field 'researcher_email': Ensure the field exists and matches the type 'text'. Confirm that all values in (researcher_email) conform to the email format pattern.
For field 'username': Ensure the field exists and matches the type 'text'. Validate that all usernames in (username) have a length between 3 and 15 characters.
For field 'post_content': Ensure the field exists and matches the type 'text'. Ensure that (post_content) does not contain any prohibited words from the defined list.
For field 'likes_count': Ensure the field exists and matches the type 'integer'. Validate the values in (likes_count) are greater than or equal to 0.
For field 'hashtags': Ensure the field exists and matches the type 'text'. Ensure values in (hashtags) follow the pattern '#[a-zA-Z0-9_]+'.
For field 'user_id': Ensure the field exists and matches the type 'integer'. Ensure that all values in (user_id) are unique across the dataset.
For field 'call_duration': Ensure the field exists and matches the type 'integer'. Validate that values in (call_duration) are non-negative and less than or equal to 3600 seconds.
For field 'phone_number': Ensure the field exists and matches the type 'text'. Validate that all values in (phone_number) conform to the pattern '^[0-9]{10}$'.
For field 'service_plan': Ensure the field exists. Ensure values in (service_plan) must be from the set ['Basic', 'Standard', 'Premium'].
For field 'account_creation_date': Ensure the field exists and matches the type 'date'. Validate that all dates in (account_creation_date) are within the last 5 years.
For field 'data_usage': Ensure the field exists and matches the type 'integer'. Validate that the average data usage in (data_usage) is not greater than 5000 MB.
For field 'incident_type': Ensure the field exists and matches the type 'text'. Validate that all values in (incident_type) must exist in the defined set ['Malware', 'Phishing', 'DDoS'].
For field 'timestamp': Ensure the field exists and matches the type 'timestamp'. Ensure that all timestamps in (timestamp) are in UTC format.
For field 'user_id': Ensure the field exists. Ensure the values in (user_id) are unique and not null.
For field 'threat_level': Ensure the field exists and matches the type 'text'. Validate that values in (threat_level) are from the set ['Low', 'Medium', 'High'].
For field 'response_time': Ensure the field exists and matches the type 'integer'. Validate that the mean of (response_time) is less than or equal to 60 minutes.
For field 'student_id': Ensure the field exists and matches the type 'integer'. Confirm that all values in (student_id) are unique and not null.
For field 'course_name': Ensure the field exists and matches the type 'text'. Validate that all (course_name) values are at least 5 characters long.
For field 'enrollment_date': Ensure the field exists and matches the type 'date'. Ensure all enrollment dates in (enrollment_date) are in the past.
For field 'grade': Ensure the field exists and matches the type 'float'. Validate that values in (grade) fall within the range of 0.0 to 4.0.
For field 'feedback': Ensure the field exists and matches the type 'text'. Ensure that the length of values in (feedback) does not exceed 500 characters.
For field 'booking_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values in (booking_id) are unique.
For field 'check_in_date': Ensure the field exists. Ensure the field matches the type 'date'. Ensure the values in (check_in_date) are arranged in increasing order.
For field 'customer_email': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in (customer_email) conform to the pattern of a valid email address.
For field 'room_type': Ensure the field exists. Ensure values in (room_type) must exist in the set ('Standard', 'Deluxe', 'Suite').
For field 'number_of_guests': Ensure the field matches the type 'integer'. Ensure values in (number_of_guests) are within the range of 1 to 10.
For field 'property_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure all values in (property_id) are unique.
For field 'listing_price': Ensure the field exists. Ensure the field matches the type 'decimal'. Ensure values in (listing_price) are within the range of 10000 to 5000000.
For field 'property_type': Ensure the field exists. Ensure values in (property_type) must not include 'Commercial'.
For field 'square_footage': Ensure the field matches the type 'integer'. Ensure values in (square_footage) are greater than 500.
For field 'listing_date': Ensure the field exists. Ensure the field matches the type 'date'. Ensure values in (listing_date) are arranged in decreasing order.
For field 'product_code': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all values in (product_code) are unique.
For field 'inventory_count': Ensure the field matches the type 'integer'. Ensure values in (inventory_count) are within the range of 0 to 10000.
For field 'supplier_email': Ensure the field exists. Ensure values in (supplier_email) conform to the pattern of a valid email address.
For field 'order_status': Ensure the field exists. Ensure values in (order_status) must exist in the set ('Pending', 'Shipped', 'Delivered').
For field 'purchase_date': Ensure the field matches the type 'date'. Ensure values in (purchase_date) are not null.
For field 'case_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all values in (case_id) are unique.
For field 'client_name': Ensure the field exists. Ensure the field matches the type 'text'. Ensure string lengths in (client_name) are between 3 and 50 characters.
For field 'filing_date': Ensure the field exists. Ensure the field matches the type 'date'. Ensure values in (filing_date) are arranged in increasing order.
For field 'case_status': Ensure the field exists. Ensure values in (case_status) must not include 'Closed'.
For field 'court_location': Ensure the field matches the type 'text'. Ensure values in (court_location) do not exceed 100 characters.
For field 'document_path': Ensure the field exists. Ensure the field matches the type 'text'. Ensure the file at (document_path) exists and is not empty.
For field 'file_size': Ensure the value is within the range of 1KB to 5MB for files in (document_path).
For field 'record_count': Ensure the number of rows in the specified table matches the expected count of 100.
For field 'hash_value': Ensure the hash value of the file at (document_path) matches the expected hash.
For field 'json_data': Ensure the content at (document_path) is valid JSON format and contains the required fields.
Ensure the `policy_number` column contains only unique values and does not allow null entries.
For the `premium_amount` column: Ensure values are greater than 0 and do not exceed 10000.
Ensure the `start_date` column adheres to the format 'YYYY-MM-DD' and can be parsed correctly.
Ensure the `coverage_type` column contains values exclusively from the set `['Full', 'Partial', 'No Coverage']`.
Verify that the total number of rows in the `claims` table equals the total number of rows in the `policies` table.
Ensure the `policyholder_age` column contains only integer values between 18 and 99.
For the `claim_status` column: Ensure it only contains values from the set `['Pending', 'Approved', 'Denied']`.
Ensure the combination of `policy_number` and `claim_id` is unique across the `claims` table.
Ensure the `end_date` column is always greater than the `start_date` column for each record.
Ensure the `patient_id` column contains unique identifiers without any null values.
Verify that the `admission_date` column matches the format 'MM/DD/YYYY' and is a valid date.
Ensure the `diagnosis_code` column contains values from the specified set of valid codes.
Check that the `blood_pressure` column values are within the range of `0 to 300`.
Ensure `prescription_id` values are unique and not null in the `prescriptions` table.
Verify that the `date_of_birth` column contains only valid dates and that the age calculated from it is at least 0.
Ensure the `treatment_cost` column has values that are non-negative and less than 50000.
For the `diagnosis_date` column, ensure it is not later than the `admission_date`.
Ensure the `phone_number` column contains only unique values formatted as '(XXX) XXX-XXXX'.
Check that the `data_usage` column values are within the range of `0 to 100000` megabytes.
Ensure the `service_start_date` column adheres to the format 'DD/MM/YYYY' and is a valid date.
Ensure that entries in the `plan_type` column are either `['Prepaid', 'Postpaid']`.
Verify that the number of rows in the `subscriptions` table matches the number of rows in the `customers` table.
Ensure the combination of `customer_id` and `subscription_id` is unique within the `subscriptions` table.
For the `contract_end_date`, ensure it is always greater than the `contract_start_date` for each record.
Ensure the `billing_amount` column cannot have null values and must be of type float.
For field 'subscriber_id': Ensure this field exists and matches the type 'integer'. Verify that all values in 'subscriber_id' are unique and do not contain nulls.
For table 'call_records': Ensure that the number of rows is greater than or equal to 1000. Verify that the columns ['call_duration', 'call_type', 'timestamp'] exist and are in the correct order.
For field 'call_duration': Ensure values in this column are within the range of 0 to 3600 seconds. Confirm that all entries are of type 'integer'.
For field 'network_type': Ensure that values in 'network_type' are from the set ['2G', '3G', '4G', '5G']. Validate that this column does not contain any null values.
For field 'data_usage': Ensure the mean value of 'data_usage' is between 0 and 5000 MB. Additionally, check that the standard deviation does not exceed 1000 MB.
For field 'product_id': Ensure this field exists, matches the type 'text', and contains only unique values. Confirm that no values are null.
For table 'inventory': Verify that the number of rows is equal to the number of unique 'product_id' entries. Ensure columns ['product_id', 'stock_quantity', 'price'] exist.
For field 'price': Ensure that all values in 'price' are greater than 0 and less than 1000. Confirm that this field is of type 'decimal'.
For field 'category': Ensure that values in 'category' are from the specified set ['Electronics', 'Clothing', 'Home']. Confirm this field does not contain nulls.
For field 'stock_quantity': Verify the sum of 'stock_quantity' is greater than 500. Ensure that the unique value count aligns with the expected number of products.
For field 'student_id': Ensure this field exists, is of type 'integer', and contains only unique values. Verify that no null values are present.
For table 'course_enrollments': Ensure that the number of rows is between 100 and 500. Validate the presence of columns ['student_id', 'course_id', 'enrollment_date'].
For field 'grade': Ensure that values in 'grade' are within the range of 0 to 100. Confirm that this field is of type 'integer'.
For field 'course_id': Ensure that values in 'course_id' are from the set ['math101', 'eng202', 'cs303']. Confirm that this field contains no null values.
For field 'enrollment_date': Verify that the unique values in 'enrollment_date' reflect a range from the last semester. Ensure the mean enrollment date is not older than one year.
For field 'shipment_id': Ensure this field exists, is of type 'text', and contains unique values. Validate that no entries are null.
For table 'deliveries': Ensure that the number of rows is equal to the total number of unique 'shipment_id' entries. Confirm that the columns ['shipment_id', 'delivery_date', 'status'] exist.
For field 'delivery_time': Verify that values in 'delivery_time' are within the range of 0 to 72 hours. Ensure this field is of type 'integer'.
For field 'status': Ensure that values in 'status' are from the set ['Pending', 'Shipped', 'Delivered', 'Returned']. Confirm that this field does not contain null values.
For field 'delivery_cost': Ensure the sum of 'delivery_cost' across all entries is less than $10,000. Validate that the unique value count aligns with expected delivery types.
For file 'telecom_data.csv': Ensure the file exists and contains valid headers ['subscriber_id', 'call_duration', 'network_type']. Confirm that the file size is within the range of 1 KB to 5 MB.
For file 'inventory_data.json': Verify that the content is properly formatted JSON. Ensure the file contains less than 1000 lines of data.
For file 'enrollment_data.xlsx': Confirm that the file matches the specified hash value. Ensure that it includes a valid header row.
For file 'delivery_log.txt': Validate that the file exists and contains no more than 500 lines. Check that all entries match the required format for delivery records.
For file 'course_data.csv': Ensure the file contains the headers ['course_id', 'course_name', 'credits']. Confirm that the total file size is between 500 KB and 2 MB.
For the `temperature` column: Ensure it contains only numeric values within the range of -50 to 50 degrees Celsius.
Verify that the `date` column exists and contains unique dates in the format 'YYYY-MM-DD'.
Ensure the `humidity` column has no missing values and that all entries are percentages (0-100).
Check that the `wind_speed` column has values arranged in increasing order across the dataset.
For the `precipitation` column: Ensure all values are greater than or equal to 0, and verify that there are no missing entries.
For the `account_balance` column: Ensure all values are numeric and non-negative. Ensure this field exists and contains no missing values.
Verify that the `transaction_id` column contains unique values and matches the type 'text'.
Ensure the `transaction_date` column exists and that all dates fall within the last two years.
For the `interest_rate` column: Verify that all values are within the range of 0% to 20%.
Check that the `customer_id` column has no missing values and all entries are unique.
Ensure the `post_content` column exists and contains only text entries with a maximum length of 280 characters.
For the `likes_count` column: Ensure all values are non-negative integers and no missing values are present.
Verify that the `user_id` column contains unique values and matches the type 'text'.
Check that the `created_at` column has values in the correct timestamp format and contains no null entries.
Ensure the `hashtag` column contains values only from the specified set of predefined hashtags.
For the `employee_id` column: Ensure it contains unique values and matches the type 'text'.
Check that the `salary` column has no missing values and all entries are numeric and greater than 0.
Ensure the `hire_date` column exists and that all dates are in the past.
For the `department` column: Verify that all values exist within the set ['Sales', 'Marketing', 'Engineering', 'HR'].
Verify that the `performance_rating` column contains values arranged in increasing order from 1 to 5.
Ensure the `case_number` column contains unique values and matches the type 'text'.
Check that the `filing_date` column exists and all entries are valid dates within the last five years.
For the `case_status` column: Ensure all entries are from the specified set ['Open', 'Closed', 'Pending'].
Verify that the `client_id` column has no missing values and that all entries are unique.
Ensure the `case_notes` column contains text entries with a maximum length of 1000 characters and has no null values.
Ensure the `research_id` column exists and contains unique values that are non-null.
For the column `publication_year`: Confirm that all values are integers within the range of 1900 to the current year and that there are no missing entries.
Validate that the `author_email` column contains valid email formats and does not allow duplicate values.
Ensure the dataset includes exactly 100 rows, and that the `experiment_date` column has no missing values.
For the `funding_source` field: Verify that it contains only distinct values from the set `['Government', 'Private', 'Non-profit']`.
Check that the `sample_size` column consists of positive integers and is consistently greater than 0.
Ensure that the sum of values in the `results_score` column is equal to the expected total score of 500.
Confirm that the `keywords` column contains a maximum of 5 unique keywords per entry and no more than 30 characters each.
For the `data_collected` field: Ensure it is of type 'boolean' and contains no null values.
Verify that the `collaborators` column is a list type and contains at least one entry per record.
Ensure the `booking_id` column exists and contains unique values, with no null entries.
For the `check_in_date` and `check_out_date`: Validate that check-in is always before check-out and both dates are in valid date format.
Confirm that the `customer_rating` column contains values only from the set `[1, 2, 3, 4, 5]` and has no missing entries.
Ensure the total number of rows in the `hotel_bookings` table matches the row count in the `customer_feedback` table.
Check that the `room_price` column contains only positive float values and conforms to the specified range of $50 to $500.
Validate that each `hotel_name` in the dataset is unique and not null.
For the `amenities` column: Ensure it contains at least one entry from the set `['WiFi', 'Pool', 'Gym', 'Breakfast']`.
Verify that the `customer_email` field adheres to valid email format and is unique across the dataset.
Confirm that the `reservation_status` column contains only the values from the set `['Confirmed', 'Cancelled', 'Pending']`.
Ensure that the `nights_stayed` column is of type 'integer' and contains no negative values.
Ensure the `case_id` column exists and contains unique identifiers for each case without any null values.
For the `filing_date` column: Validate that all entries are formatted as dates and fall between the years 2000 and the current year.
Check that the `client_id` in the `clients` table is referenced correctly in the `cases` table without any missing references.
Verify that the `case_status` column contains only the values from the set `['Open', 'Closed', 'Pending']`.
Ensure that the combinations of `lawyer_id` and `case_id` are unique within the records to avoid duplicate assignments.
Ensure the `case_id` column contains unique values and does not allow null entries.
For the `filing_date` field: Ensure all values conform to the format 'YYYY-MM-DD' and are valid dates.
Verify that the `client_email` column matches the regex pattern for valid email addresses and contains no duplicates.
Ensure the `court_location` column is not null and contains only values from the predefined list: ['District Court', 'Supreme Court', 'Family Court'].
For the `case_status` field: Ensure it only includes values from ['Open', 'Closed', 'Pending'] and that there are no missing entries.
Ensure the `meter_reading_date` column contains dates that do not exceed the current date and follow the format 'YYYY-MM-DD'.
Verify that the `utility_account_number` column contains distinct values and does not allow null entries.
For the `usage_kwh` field: Ensure all values are non-negative integers and fall within the range of 0 to 10,000.
Check that the `customer_zipcode` matches a valid US ZIP code format and contains no duplicates.
Ensure that the sum of `usage_kwh` for each customer ID in the `customer_usage` table does not exceed 100,000 for any given year.
Ensure the `policy_number` column contains unique values and does not allow null entries.
For the `policy_start_date` field: Ensure all values conform to the format 'YYYY-MM-DD' and are valid dates.
Verify that the `insurance_type` column contains only values from the list: ['Health', 'Auto', 'Home'] and has no missing values.
Ensure the `premium_amount` field contains only numeric values greater than zero.
For the `claim_date` column: Ensure all dates are earlier than or equal to the current date and conform to 'YYYY-MM-DD'.
Ensure the `property_id` column has unique values and does not allow null entries.
For the `listing_price` field: Ensure all values are positive numbers and fall within the range of $1,000 to $10,000,000.
Verify that the `property_type` column contains values only from ['Residential', 'Commercial', 'Industrial'] and is not empty.
Ensure the `listing_date` column adheres to the 'YYYY-MM-DD' format and all entries are valid dates.
For the `square_footage` field: Ensure values are integers greater than zero and verify that the sum of square footage for all properties in a given area matches the expected total.
For the `contact_number` column in the `lawyers` table: Ensure values match the regex pattern for valid phone numbers and are unique.
Check that the `contract_end_date` in the `contracts` table is always greater than the `contract_start_date`.
Verify that the `service_type` in the `utilities` table matches the values in the predefined list: ['Electric', 'Water', 'Gas'] and contains no nulls.
Ensure the `real_estate_agent_id` in the `properties` table exists in the `agents` table and is not null.
For the `claim_amount` in the `claims` table: Ensure it is less than or equal to the `policy_limit` in the corresponding `policies` table.
Verify that the `supplier_id` column contains only unique values. Ensure this column is required (not null).
For the `delivery_date` field, ensure it is of type 'date'. Validate that all dates are in the future.
Check that the `product_code` column matches the regular expression pattern `^[A-Z]{3}-[0-9]{4}$` for format conformity.
Ensure the total quantity in the `quantity_ordered` column is greater than zero while validating that no values are null.
Confirm that the `order_id` column has a one-to-many relationship with the `product_code`. Each `order_id` must relate to multiple `product_code` entries.
Ensure that the `case_number` field is required (not null) and contains unique values.
Validate that the `filing_date` column is of type 'date' and all entries are from the current year.
For the `jurisdiction` field, confirm it matches one of the values in the list `['Federal', 'State', 'Local']`.
Check that the `status` column contains only the values `['Open', 'Closed', 'Pending']` and ensure this field cannot be null.
Validate that the `case_priority` column, when compared with `filing_date`, has values where `case_priority` must be 'High' if `filing_date` is within the last 30 days.
Ensure the `employee_id` column has unique values and that it is not nullable.
For the `salary` column, confirm that all values are numeric and greater than or equal to the minimum wage specified.
Validate that the `department_code` field matches the format `^[A-Z]{2}-[0-9]{3}$`.
Check that the `hire_date` column contains only dates that are earlier than the current date.
For the `project_budget` and `actual_spent` columns, ensure that `actual_spent` does not exceed `project_budget`.
Verify that the `temperature` column contains values within the range of -50 and 60 degrees Celsius.
Ensure the `humidity` column is of type 'numeric' and that no entries are null.
Validate that the `forecast_date` field contains unique dates and is in the future.
Check that the `weather_condition` column only includes values from the list `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.
Ensure that the `wind_speed` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `phone_number` column matches the regular expression pattern `^\\+?[1-9]\\d{1,14}$` for valid international formats.
Check that the `service_plan` column contains only distinct values from the list `['Basic', 'Standard', 'Premium']`.
Validate that the `activation_date` field is of type 'date' and that all dates are not in the future.
For the `data_usage` and `voice_usage` columns, confirm that the sum of both does not exceed the `plan_limit`.
Ensure the `customer_id` column has no missing values and is linked to valid entries in the `customers` table.
Ensure the `customer_email` column contains only valid email formats and no null values.
Ensure the `customer_id` column has unique values and is not null for all records.
For the `signup_date` column: Ensure values conform to the format '%Y-%m-%d' and are valid datetime entries.
Ensure the number of records in the `customers` table is equal to the number of records in the `orders` table.
Verify that the `customer_type` column contains only distinct values from the set `['New', 'Returning', 'VIP']`.
Ensure the `patient_id` column is unique and does not contain null values across the dataset.
For the `date_of_birth` column: Ensure all entries are valid dates and are formatted as '%Y-%m-%d'.
Ensure that the `test_results` column contains valid JSON objects conforming to the specified schema.
Verify that the average `blood_pressure` readings fall within the range of 90 to 140 for systolic and 60 to 90 for diastolic.
Ensure the `diagnosis_code` is not null and matches a predefined set of valid codes.
Ensure the `account_balance` column contains only numeric values and no null entries.
Verify that the `transaction_date` column matches the datetime format '%Y-%m-%d %H:%M:%S' and contains no invalid dates.
Ensure that the `transaction_id` column has unique values and no duplicates exist.
For the `loan_amount` column, ensure the mean value is above 5000 and below 50000.
Ensure the sum of the `deposits` and `withdrawals` columns equals the `account_balance` for all records.
Ensure the `player_id` column is unique and does not contain null values in the dataset.
Verify that the `match_date` column adheres to the datetime format '%d-%m-%Y' and contains valid dates.
Ensure the `performance_metrics` column contains valid JSON objects that match the expected schema.
For the `goals_scored` column, ensure the maximum value does not exceed 50 and the mean is greater than 5.
Ensure that the combination of `team_id` and `player_id` is unique across records.
Verify that the `contact_number` column contains unique values and matches the format '(XXX) XXX-XXXX'.
Ensure the `event_date` column contains valid datetime entries that align with the format '%Y/%m/%d'.
For the `json_data` column: Ensure all entries are valid JSON objects and contain a 'status' field.
Ensure the standard deviation of the `performance_score` column is below 15.
Verify that values in the `salary` column are greater than the corresponding values in the `previous_salary` column.
Ensure the `meter_id` column contains distinct values representing unique meter identifiers. Confirm that this column does not allow null values.
For the `reading_date` field, ensure it adheres to the datetime format `'%Y-%m-%d'`. Validate that all entries are valid dates and not null.
Verify that the `consumption_kwh` column has values that are numeric and greater than or equal to zero. Ensure there are no missing values in this field.
Ensure that the `utility_provider` field contains only values from the set `['ProviderA', 'ProviderB', 'ProviderC']` and that it is not null.
For the `billing_amount` column, confirm that the average billing amount is between 50 and 200, and the maximum value does not exceed 500.
Ensure the `post_id` field consists of unique identifiers. Validate that it does not contain null values.
For the `published_date` column, ensure values are in the format `'%Y-%m-%d %H:%M:%S'` and can be parsed correctly. Confirm that all values are valid.
Verify that the `author_id` field exists and that all values match existing authors in the `users` table.
For the `tags` column, ensure that each entry is a valid JSON object conforming to the specified schema. Check for missing or malformed entries.
Ensure the `content_length` column has a mean value of at least 100 characters and does not contain any negative values.
Check that the `employee_id` column contains unique values corresponding to each employee. Ensure this column does not allow null values.
For the `hire_date` field, ensure values are in the format `'%Y-%m-%d'` and are valid dates. Confirm that there are no missing values.
Verify that the `salary` column contains only numeric values greater than zero and that the total sum of salaries does not exceed 1,000,000.
Ensure the `department_name` field only includes values from the set `['HR', 'Finance', 'IT', 'Sales']` and is required.
For the `project_id` column, ensure that all values are distinct and exist in the `projects` table.
Ensure the `product_sku` column has unique values representing each product. Confirm that this column does not allow null entries.
For the `release_date` field, ensure it matches the datetime format `'%Y-%m-%d'` and that all entries are valid and present.
Verify that the `price` column contains numeric values greater than zero. Ensure there are no null values in this field.
Ensure the `categories` field contains valid JSON arrays that adhere to the defined schema and do not have missing values.
For the `inventory_count` column, ensure the total sum of inventory does not exceed 10,000 and that individual counts are non-negative.
Ensure the `study_id` field consists of unique identifiers for each study. Confirm that this column does not allow null values.
For the `collection_date` column, ensure all values are in the format `'%Y-%m-%d'` and can be parsed correctly. Confirm there are no missing entries.
Verify that the `sample_size` column contains only positive integers and that the mean sample size is greater than 30.
Ensure the `results` field is a valid JSON object conforming to the specified schema. Check for any missing or malformed entries.
For the `publication_year` column, ensure that all values are integers between 2000 and the current year and that no entries are null.
Ensure the `delivery_date` column contains valid datetime values matching the format '%Y-%m-%d'.
Ensure the `vehicle_id` column contains unique values and is of type 'integer'.
Ensure the number of rows in the `shipments` table is equal to the number of rows in the `invoices` table.
For the `weight` column: Ensure all values are greater than 0 and that no missing values exist.
Ensure the `status` column only includes values from the set `['Pending', 'Shipped', 'Delivered', 'Returned']`.
Ensure the `timestamp` column adheres to the ISO 8601 format and can be parsed using dateutil.
Ensure the `threat_level` column only contains non-null values that match the type 'text'.
For the `alert_type` column: Ensure it contains distinct values and is not null.
Check that the distribution of `response_time` follows a normal distribution with a mean between 0 and 5 seconds.
Ensure the `source_ip` and `destination_ip` columns contain valid IP addresses and are of type 'string'.
Ensure the `consumption_date` column contains datetime values formatted as '%Y-%m-%d %H:%M:%S'.
Ensure the `meter_reading` column values are within the range of 0 to 10000 and contain no missing values.
For the `customer_id` column: Ensure values are unique and of type 'integer'.
Verify that the sum of `peak_demand` and `off_peak_demand` columns equals the total `energy_consumed` for each record.
Check that the `region` column only contains values from the predefined set of valid regions.
Ensure the `post_time` column values are in valid datetime format and correspond to UTC timezone.
Ensure the `user_id` column contains unique values and all entries are of type 'string'.
Check if the number of rows in the `comments` table is less than or equal to the number of rows in the `posts` table.
For the `likes` column: Ensure all values are non-negative integers and no missing values are present.
Ensure the `hashtags` column contains valid JSON objects conforming to the specified JSON schema.
Ensure the `order_date` column follows the format '%Y-%m-%d' and is parsable by dateutil.
Ensure the `product_id` column contains unique values and all entries are of type 'integer'.
Verify that the `quantity_ordered` and `quantity_shipped` columns sum to a value equal to the `total_quantity` for each order.
Check that the distribution of `delivery_times` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
For the `supplier_id` column: Ensure values are unique and exist in the `suppliers` table.
Ensure the `sensor_id` column contains only unique values and is not null.
Validate that the `timestamp` column entries follow the ISO 8601 format.
Check that the `temperature` column values are within the range of -50 to 150 degrees Celsius.
Ensure the `device_status` column includes only the values `['active', 'inactive', 'malfunctioning']`.
For the `location` field: Ensure the field exists and is of type 'text', and that it does not allow null values.
Verify that the number of rows in the `device_data` table is equal to the number of entries in the `registered_devices` table.
Ensure that the `battery_level` column entries do not exceed 100% and are not less than 0%.
Check that the `data_payload` column contains valid JSON objects conforming to the specified schema.
Ensure the `transaction_id` column contains only distinct values and cannot be null.
Validate that the `block_timestamp` values conform to the Unix time format.
Check that the `transaction_value` entries are greater than 0 and are of type 'float'.
For the `sender_address` field: Verify that the address format matches the specified pattern and the field is not null.
Ensure the `gas_price` column values are within the range of 0 to 100 Gwei.
Verify that the `block_number` column values are sequential and do not contain gaps.
Check that the `transaction_fee` column values pass the Chi-Square test with a p-value greater than 0.05.
Ensure the `employee_id` column contains unique values and does not allow null entries.
Validate that the `hire_date` column matches the format 'YYYY-MM-DD' and is a valid date.
Check that the `salary` column values are greater than or equal to the minimum wage defined in the company policy.
For the `department` field: Ensure it exists and matches the list of valid departments `['Sales', 'HR', 'Engineering']`.
Ensure the `email` column entries conform to a valid email format and are unique.
Verify that the `performance_score` entries pass the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Check that the `resume` file size for each candidate does not exceed 2MB and contains valid content.
Ensure the `user_data` file exists and matches the specified SHA-256 hash value.
Verify that the `log_file` contains no more than 1000 lines and matches the required header format.
Check that the `configuration` JSON object adheres to the defined JSON schema and does not contain any null values.
Ensure the `game_id` column is unique and does not contain any null values.
Verify that the `release_date` column contains valid datetime entries formatted as 'YYYY-MM-DD'.
For the `platform` field, ensure it matches the type 'text' and contains values from the set ['PC', 'Xbox', 'PlayStation', 'Switch'].
Check that the `user_ratings` column has values ranging from 0 to 10 and does not include any null entries.
Ensure the `developer` column exists and that all entries are unique within the dataset.
For the `genre` column, ensure each entry is a valid JSON object conforming to the schema: {'name': string, 'type': string}.
Ensure the count of rows in the `games` table is between 50 and 500.
Check that the values in the `release_year` column are greater than or equal to 2000.
Ensure that the combination of `game_id` and `platform` is unique across all records.
Verify that the `download_size` column contains values in megabytes and that entries are not null.
Ensure the `shipment_id` column is unique and does not contain null values.
Verify that the `delivery_date` column adheres to the datetime format 'YYYY-MM-DD HH:MM:SS'.
For the `supplier_id` field, ensure it matches the type 'integer' and that values exist in the `suppliers` table.
Check that the `quantity` column values are greater than 0 and that no entries are null.
Ensure the `status` column contains only distinct values from the set ['Pending', 'Shipped', 'Delivered', 'Cancelled'].
For the `item_details` column, ensure each entry is a valid JSON object conforming to the schema: {'item_name': string, 'item_code': string}.
Ensure the total number of records in the `shipments` table equals the number of records in the `orders` table.
Check that the values in the `order_date` column are prior to the `delivery_date` values.
Ensure that the combination of `shipment_id` and `destination` is unique across all records.
Verify that the `package_weight` column contains values in kilograms and does not allow null entries.
Ensure the `video_id` column is unique and does not contain any null values.
Verify that the `upload_date` column contains valid datetime entries formatted as 'YYYY-MM-DDTHH:MM:SSZ'.
For the `category` field, ensure it matches the type 'text' and contains values from the set ['Movies', 'Series', 'Documentaries'].
Check that the `view_count` column has values greater than or equal to 0 and does not include any null entries.
Ensure the `tags` column contains only distinct values and is formatted as a valid JSON array.
Ensure the `customer_id` column contains only unique values and does not include any null entries.
For the `email` field: Confirm that all entries are of type 'text' and follow the standard email format. Ensure this field has no missing values.
Validate that the `signup_date` column contains dates within the range of `2020-01-01` to `2023-12-31`.
Ensure the `purchase_amount` column has values that sum up to a minimum of $1000 across all records.
For the `customer_status` column: Ensure it contains only the distinct values `['active', 'inactive', 'pending']`.
Confirm that the `student_id` column has no duplicate values and contains only non-null entries.
For the `course_completion_date`: Ensure all entries are of type 'date' and none are null. Validate that dates are not in the future.
Check that the `grade` column has a mean value greater than or equal to 75 and all values are within the range of 0 to 100.
Ensure the `enrollment_count` column contains values that are greater than or equal to the `minimum_enrollment` column for each course.
For the `course_code` field: Validate that it matches the format 'COURSE-XXX' and contains no null values.
Ensure the `citizen_id` column contains unique values and no entries are missing.
For the `service_request_date` column: Validate that all values are of type 'date' and fall within the last two years.
Confirm that the `response_time` column has a standard deviation of less than 15 days across all service requests.
Ensure the `request_type` column only includes the distinct values `['inquiry', 'complaint', 'suggestion']`.
Check that the sum of `resolved_requests` across all departments matches the total number of `service_requests`.
For the `user_id` column: Ensure it contains unique values and no null entries are present.
Validate that the `watch_duration` column has values between 0 and 300 minutes, with a mean value of at least 60 minutes.
Ensure the `subscription_start_date` column contains valid dates before the current date and no null entries.
For the `genre` column: Confirm that it includes only distinct values from the specified set `['Action', 'Drama', 'Comedy', 'Documentary']`.
Check that the combined values of `likes` and `dislikes` in the `feedback` table equal the total number of `views`.
Ensure the `email_address` column contains unique values and that no entries are null.
For the `message_length` column: Validate that all entries are integers and fall within the range of 1 to 5000 characters.
Confirm that the `sent_time` column contains dates and times that are not in the future, and all entries are of type 'timestamp'.
Ensure the `attachment_size` column values do not exceed 25 MB and validate that the average size is below 10 MB.
For the `recipient_list` field: Verify that it contains only valid email addresses and that the total count of unique recipients is greater than 50.
Ensure the `property_price` column values are greater than or equal to 0 and do not exceed 10,000,000.
For the `listing_date` field: Verify that all values conform to the format 'YYYY-MM-DD' and are valid dates.
Ensure the `bedrooms` column contains only integer values within the range of 1 to 10.
For the `property_type` column: Ensure all entries match one of the specified categories: ['Apartment', 'House', 'Condo'].
Verify that the `zip_code` column values are exactly 5 digits long and do not contain any letters.
Ensure the `shipment_date` values are formatted as 'YYYY-MM-DD' and that no future dates are present.
For the `quantity` column: Ensure that all values are integers and fall within the range of 1 to 1,000.
Ensure the `supplier_id` column contains distinct values that match the set of existing supplier IDs in the `suppliers` table.
For the `delivery_status` column: Validate that all values match the predefined set of statuses: ['Pending', 'Shipped', 'Delivered', 'Canceled'].
Confirm that the `order_value` column values are greater than or equal to 0 and compute the average to ensure it does not exceed 50,000.
For the `transaction_hash` column: Ensure all entries are unique and match the regular expression pattern for a SHA-256 hash.
Verify that the `block_timestamp` field values conform to the format 'YYYY-MM-DD HH:MM:SS' and are valid datetime entries.
Ensure the `amount` column values are within the range of 0.0001 to 10000 and are positive.
For the `currency_type` column: Ensure that all values fall within the allowed set: ['BTC', 'ETH', 'LTC', 'USDT'].
Confirm that the `user_id` column contains only values that exist in the `users` table.
Verify that the `email` column matches the regular expression pattern for valid email addresses and does not contain duplicates.
Ensure the `customer_since` column values are formatted as 'YYYY-MM-DD' and no future dates are present.
For the `customer_score` column: Ensure that values fall within the range of 0 to 100 and the average score is above 70.
Confirm the `last_name` column values are not empty and have a length between 1 and 50 characters.
For the `contact_number` field: Ensure all values match the pattern of a 10-digit phone number.
Ensure the `post_date` column adheres to the format 'YYYY-MM-DD' and all entries are valid dates.
For the `tags` column: Validate that each entry is a comma-separated list and not empty, with each tag length between 1 and 30 characters.
Ensure the `status` column contains only values from the predefined set: ['Draft', 'Published', 'Archived'].
Confirm that the `content_length` column values are integers and fall between 50 and 5000 characters.
For the `author_id` field: Ensure that all values correspond to existing author IDs in the `authors` table and are unique.
Ensure the `patient_id` column contains only unique values and matches the specified format of 10 alphanumeric characters.
Verify that the `date_of_birth` column has date entries formatted as 'YYYY-MM-DD' and that all dates are in the past.
Confirm that the `blood_pressure` column values are within the range of 70 to 180 for systolic and 40 to 120 for diastolic.
Ensure the `diagnosis_code` column only includes values from the set of valid ICD-10 codes.
Check that the `medication_name` column contains strings that do not exceed 50 characters in length.
Validate that the `appointment_date` column contains date values that can be parsed using dateutil and are not in the future.
Ensure that the `weight` column values are in the range of 30 to 300 kilograms.
Confirm that the `insurance_provider` column only includes distinct values from the set of approved providers: `['Provider A', 'Provider B', 'Provider C']`.
Verify that the `allergy_info` column contains JSON objects that conform to the specified schema defining `allergy_type` and `reaction`.
Ensure that the `treatment_start_date` and `treatment_end_date` columns contain dates where the start date is earlier than the end date.
Ensure the `user_role` column only includes distinct values from the set `['Admin', 'Editor', 'Viewer']`.
Check that the `content_length` column values are within the range of 100 to 5000 characters.
Validate that the `post_title` column strings have a length between 5 and 100 characters.
Ensure that the `created_at` column contains datetime strings matching the format 'YYYY-MM-DD HH:MM:SS' and are not in the future.
Confirm that the `status` column only contains values from the set `['Draft', 'Published', 'Archived']`.
Verify that the `tags` column contains unique tags that do not exceed 30 characters and match the regex pattern for alphanumeric characters and underscores.
Ensure that the `content_type` column contains values that match the specified list: `['Article', 'Video', 'Image']`.
Check that the `publish_date` column values are valid date entries formatted as 'MM/DD/YYYY' and that they are not in the future.
Validate that the `author_id` column values correspond to existing users in the `users` table.
Ensure the `view_count` column values are integers greater than or equal to zero.
Verify that the `category` and `subcategory` columns have a unique combination within each record.
Ensure that the sum of the `likes` and `shares` columns is greater than or equal to the value in the `engagement_score` column.
Check that the `end_date` column is greater than the `start_date` column across all records.
Validate that the `discount` column values are less than the `original_price` column values.
Ensure that if the `status` column is 'Published', then the `publish_date` must not be null.
Ensure the `research_id` column exists and contains only distinct alphanumeric values matching the pattern `^[A-Z0-9]+$`.
Verify that the number of entries in the `dataset` table is equal to 1000.
Ensure the values in the `age` column are within the range of 18 to 99.
For the `results` column, confirm that the mean value is greater than or equal to 70.
Ensure that the entries in the `data_quality` column match the set `['High', 'Medium', 'Low']`.
Check that the `meter_reading` column contains only numeric values and is within the range of 0 to 5000.
Ensure the `service_type` column matches the specific set `['Residential', 'Commercial']`.
For the `consumption` column, validate that the maximum value does not exceed 10000.
Verify that the `billing_date` column contains dates in the format `YYYY-MM-DD`.
Ensure the standard deviation of the `usage` column is below 150.
Ensure the `subscriber_count` column has values that are all integers and within the range of 1 to 1,000,000.
Validate that the `genre` column contains only values from the set `['Action', 'Drama', 'Comedy', 'Documentary']`.
For the `view_time` column, confirm that the median value is greater than or equal to 30 minutes.
Ensure the `email` column matches the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.
Check that there are no duplicate entries in the `show_id` column.
Ensure the `policy_number` column exists and matches the pattern `^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$`.
Verify that the `premium_amount` column contains values within the range of $100 to $10,000.
Ensure the `claim_status` column only contains distinct values from the set `['Pending', 'Approved', 'Denied']`.
For the `age` column of policyholders, validate that the minimum value is 18 and the maximum value is 65.
Ensure that the `claim_amount` column has a mean value greater than $500.
Check that the `customer_id` column exists and contains only unique values.
Ensure the `contact_number` column matches the pattern `^\+?[1-9]\d{1,14}$`.
For the `customer_feedback` column, validate that string lengths fall between 10 and 500 characters.
Verify that the `purchase_date` column contains dates in the correct format `MM/DD/YYYY`.
Ensure the `loyalty_points` column has values that are all integers and fall within the range of 0 to 1000.
Ensure the `citizen_id` column contains unique values that match the pattern `^[A-Z0-9]{8}$`.
Ensure the `age` column values are between 18 and 120.
For the `service_request` table: Verify that the number of rows is equal to the expected number of `1000`.
Ensure the `request_date` column contains dates formatted as `YYYY-MM-DD` and falls within the last two years.
For the `department` column: Ensure values exist in the set `['Health', 'Education', 'Transportation']`.
Ensure the `product_id` column contains distinct values that match the regex pattern `^PROD[0-9]{4}$`.
Ensure the `quantity` column values are within the range of `1` to `1000`.
For the `delivery_dates` column: Ensure all dates are in increasing order.
Verify that the sum of the `cost` and `shipping_fee` columns equals the `total_amount` for each record.
Ensure the `supplier_rating` column values pass the Chi-Square test with a p-value greater than `0.05`.
Ensure the `vehicle_id` column contains only unique entries matching the pattern `^VEH[0-9]{6}$`.
Validate that the `mileage` values are within the range of `0` to `300000`.
Ensure the `departure_time` and `arrival_time` columns contain valid timestamps and that `arrival_time` is greater than `departure_time`.
For the `route_id` column: Ensure values exist in the specified set `['R1', 'R2', 'R3', 'R4']`.
Ensure the `fuel_consumption` follows a normal distribution with a mean between `5` and `15`.
Ensure the `meter_number` column contains distinct values that match the regex pattern `^[A-Z]{2}[0-9]{6}$`.
Validate that the `consumption` values are within the range of `0` to `5000` kilowatt-hours.
For the `billing_period` column: Ensure it consists of months formatted as `MMM YYYY` and contains no duplicates.
Ensure the values in the `tariff_rate` column are arranged in decreasing order.
Verify that the sum of `fixed_charge` and `variable_charge` columns equals the `total_bill` for each entry.
Ensure the `id_number` column across both the `clients` and `suppliers` tables contains no duplicates.
Ensure all entries in the `email` column across the `users` table match the regex `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.
Ensure the `status` column in the `orders` table contains only values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.
Ensure that the average `response_time` for service requests passes the Kolmogorov-Smirnov test with a p-value greater than `0.05`.
For the `transaction` table: Verify that the `amount` column values are always greater than the `discount` column values.
For the `sensor_readings` table: Ensure the number of rows is equal to 24, representing hourly data for a full day.
Ensure the `temperature` column contains only values within the range of -30 to 50 degrees Celsius.
For the `device_status` column: Ensure that the values are restricted to the set `['active', 'inactive', 'malfunction']`.
Verify that the `timestamp` column values are in the correct ISO 8601 format (YYYY-MM-DDTHH:MM:SS).
Ensure the `battery_level` column has a mean value greater than or equal to 20%.
For the `properties` table: Ensure the column `price` only contains values greater than 0.
Check that the `listing_date` column values conform to the format '%Y-%m-%d'.
Ensure the `property_type` column contains only distinct values matching `['Apartment', 'House', 'Commercial']`.
Verify that the `square_footage` values are within the range of 500 to 10000.
For the `open_house` table: Ensure the number of rows is at least 10, corresponding to scheduled events.
Ensure the `patient_id` column contains unique values and adheres to the specified format (UUID).
For the `appointment_date` column: Verify that all values are in the format 'MM/DD/YYYY'.
Check that the `blood_pressure` readings fall within the range of 60/40 to 180/120.
Ensure the `medications` column contains valid JSON objects that conform to the specified schema.
For the `test_results` table: Verify that the mean value of `cholesterol_level` is less than 200 mg/dL.
For the `employees` table: Ensure the `hire_date` values can be parsed using dateutil.
Ensure the `salary` column values fall within a defined range of $30,000 to $200,000.
Check that the `job_title` column contains only distinct values from the set `['Manager', 'Developer', 'HR', 'Analyst']`.
Verify that the `performance_score` column has a median value greater than or equal to 3.
Ensure the `employee_documents` file exists and matches the specified hash value.
For the `shipments` table: Ensure the total number of rows is equal to the number of orders processed this month.
Ensure the `delivery_date` column values conform to the format '%d-%b-%Y'.
Check that the `weight` column contains values within the range of 1 kg to 5000 kg.
For the `vehicle_status` column: Ensure values are restricted to the set `['in_service', 'out_of_service', 'maintenance']`.
Verify that the `shipping_cost` column has a standard deviation that does not exceed $150.
Ensure the `transaction_id` column contains only distinct values and exists in the specified format of UUID.
Verify the `block_number` column has values that are strictly increasing and within the range of 0 to 1000000.
Ensure the `timestamp` column values adhere to the ISO 8601 datetime format.
For the `amount` column, ensure all values are greater than zero and do not exceed the maximum allowable limit of 21 million.
Ensure the `status` column contains values only from the set `['pending', 'confirmed', 'failed']`.
Ensure the `policy_number` column is unique across all records and follows the specified alphanumeric pattern.
Verify that the `premium_amount` column values are within the range of $100 to $10,000.
Ensure the `expiry_date` column adheres to the datetime format 'YYYY-MM-DD' and is greater than the `start_date`.
For the `claims` column: Ensure that the count of claims does not exceed the maximum of 5 per policy.
Ensure the `customer_age` column contains values in the range of 18 to 100 years.
Ensure the `student_id` column is unique and follows the specified numeric format.
Verify that the `enrollment_date` column is formatted as 'MM/DD/YYYY' and is not a future date.
Ensure the `grades` column contains only values from the set `[A, B, C, D, F]`.
For the `course_duration` column, ensure that all values are greater than zero and less than 52 weeks.
Ensure that the `final_score` column values are in a normal distribution with a mean of 75 and standard deviation of 10.
Verify that the `product_code` column contains unique values and matches the specified alphanumeric format.
Ensure the `budget` column entries are within the range of $1,000 to $1,000,000.
Ensure the `invoice_date` column is in the format 'YYYY-MM-DD' and does not precede the `order_date`.
For the `employee_salary` column: Ensure that the average salary across all entries matches the expected average of $50,000.
Ensure the `department_id` column has values that exist in the predefined set of valid department IDs.
Ensure that the `transaction_amount` in the cryptocurrency dataset is greater than the `premium_amount` in the insurance dataset for corresponding IDs.
For the `course_id` in the education system, ensure that it exists in the `product_code` column of the ERP dataset.
Verify that the sum of the `claims` in the insurance dataset matches the total `transaction_amount` in the blockchain dataset for the same customer.
Ensure that the `student_age` in the learning management system does not exceed the `employee_age` in the ERP data by more than 10 years.
For the `status` column in the insurance dataset, ensure that it corresponds to the `confirmation_status` in the blockchain dataset for claims above $500.
Ensure the `player_id` column contains only distinct values and matches the specified set of player identifiers.
Ensure the `game_date` column values follow the format 'YYYY-MM-DD' and can be parsed using dateutil.
Ensure the number of rows in the `match_stats` table is equal to the number of entries in the `players` table.
Ensure the `points` column contains values within the range of 0 to 50 for all games.
Ensure the `team_id` column values are not from the excluded set `['Team A', 'Team B']`.
Ensure the `invoice_number` column exists and contains only unique values.
Ensure the `order_date` column values match the strftime format '%Y-%m-%d' and are valid datetime objects.
Ensure the number of rows in the `inventory` table is between 100 and 1000.
Ensure the `total_amount` column values are in an increasing order across the dataset.
Ensure the `status` column only contains values from the set `['Pending', 'Completed', 'Cancelled']`.
Ensure the `shipment_id` column exists and contains only distinct values matching the specified format.
Ensure the `departure_time` column values are valid datetime strings and can be parsed according to the specified format.
Ensure the number of rows in the `routes` table is equal to the number of entries in the `trucks` table.
Ensure the `weight` column values are within the range of 1 to 5000 kilograms.
Ensure the `status` column does not contain any values outside the set `['In Transit', 'Delivered', 'Delayed']`.
Ensure the `email_id` column contains only unique email addresses and matches a valid email format.
Ensure the `sent_time` column values follow the format 'YYYY-MM-DD HH:MM:SS' and are valid datetime objects.
Ensure the number of rows in the `messages` table is between 50 and 1000.
Ensure the `message_length` column values are in an increasing order across the dataset.
Ensure the `priority` column only contains values from the specified set `['Low', 'Medium', 'High']`.
Ensure the `file_path` for the `transactions` data asset exists and matches the expected hash value.
Ensure the number of lines in the `user_data.csv` file is within the range of 100 to 10000.
Ensure the `response_time` column adheres to statistical distribution, passing the Chi-Square test with a p-value greater than 0.05.
Ensure the `json_data` column values conform to the specified JSON schema and are valid JSON objects.
Ensure the `file_size` for the `logs.txt` file falls within the defined range of 1KB to 10MB, and the content matches the specified header format.
Ensure the `citizen_id` column exists and all values are unique integers.
Ensure the `registration_date` column values are in the format `YYYY-MM-DD` and are valid dates.
Ensure the `age` column values are within the range of 18 to 120.
For the `service_request` table, ensure the number of rows is equal to the number of unique `request_ids`.
Ensure the `status` column contains only values from the set: `['Open', 'In Progress', 'Closed']`.
For the `shipment` table, ensure the `destination_zip` column matches valid postal code formats.
Ensure the `delivery_date` column values are parsed correctly as dates and are not in the past.
Ensure the `weight` column values are in the range of 0 to 5000 kilograms.
For the `vehicle` table, ensure the `vehicle_id` column exists and all values are unique.
Ensure that the sum of the `cost` and `insurance` columns equals the `total_cost` column for each record.
Ensure the `sensor_readings` column contains JSON objects that conform to the specified schema.
Ensure the `timestamp` column values are in the format `YYYY-MM-DD HH:MM:SS` and represent valid datetime values.
Ensure the `battery_level` column values are within the range of 0 to 100 percent.
For the `device_status` table, ensure the `status` column contains only values from the set: `['Active', 'Inactive', 'Faulty']`.
Ensure the `temperature_reading` column values are in increasing order across the dataset.
Ensure the `forecast_date` column values are valid dates and not in the future.
For the `weather_data` table, ensure the `humidity` column values are within the range of 0 to 100 percent.
Ensure the `temperature` column contains values only from the set: `['Cold', 'Mild', 'Hot']`.
Ensure that the sum of the `precipitation` and `evaporation` columns equals the `water_balance` column for each record.
Ensure the `wind_speed` column values are not negative and follow the specified range of 0 to 150 km/h.
Ensure the `threat_level` column values are within the set: `['Low', 'Medium', 'High']`.
Ensure the `event_time` column values are in the format `YYYY-MM-DDTHH:MM:SSZ` and represent valid UTC datetime values.
For the `incident_report` table, ensure the `report_id` column exists and all values are unique.
Ensure the `source_ip` and `destination_ip` columns contain valid IPv4 addresses.
Ensure the count of unique `user_ids` in the `login_attempts` table matches the total number of rows in the table.
Ensure the `transaction_id` column contains unique string values that match the regex pattern `^[0-9a-f]{64}$`.
For the `block_timestamp` field: Verify that all values match the ISO 8601 datetime format and fall within the range of `2021-01-01T00:00:00Z` to `2023-12-31T23:59:59Z`.
Confirm that the `wallet_address` column consists only of valid Ethereum addresses, matching the regex pattern `^0x[a-fA-F0-9]{40}$`.
Ensure the `amount` column contains numeric values where the sum does not exceed `10^6` and the minimum value is `0`.
Verify that the `transaction_fee` field has values that are numeric and fall within the range of `0.001` to `0.1`.
For the `block_number` column: Ensure the values are integers, and the column contains at least `1000` rows.
Ensure the `currency` column contains only distinct values from the predefined set `['BTC', 'ETH', 'LTC']`.
For the `sender`, `recipient` columns: Ensure each entry is a valid wallet address and does not contain any SQL-like patterns from the list `['%','_']`.
Validate that the `transaction_type` field contains values that match one of the following patterns: `['transfer', 'stake', 'vote']`.
Check that the `block_hash` column contains string values matching the regex pattern `^[0-9a-f]{64}$` and exists in the `block` table.
For the `customer_id` column: Ensure it contains unique alphanumeric values that match the regex pattern `^[A-Z0-9]{8}$`.
Verify that the `signup_date` column contains valid datetime entries in the format `YYYY-MM-DD` and are all before the current date.
Ensure the `email` column contains valid email addresses that match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.
Confirm that the `status` column contains values that only match the set `['active', 'inactive', 'suspended']`.
For the `purchase_amount` column: Validate that the average value is greater than `50` and less than `5000`.
Ensure that the `last_contact` column contains datetime values that fall within the last `30 days`.
Check that the `customer_feedback` column does not contain any entries matching the regex pattern `.*(spam|unwanted).*`.
For the `loyalty_points` column: Ensure that values are integers and the maximum point value does not exceed `10000`.
Ensure the `phone_number` column contains valid entries that match the regex pattern `^\+?[1-9]\d{1,14}$`.
Verify that the `country` field contains values from the predefined list `['USA', 'Canada', 'UK']` only.
Ensure the `subscriber_id` column contains unique values that match the regex pattern `^[0-9A-Z]{10}$`.
For the `activation_date` field: Validate that all entries are in the format `MM/DD/YYYY` and are earlier than the current date.
Confirm that the `data_plan` column contains distinct values matching the list `['Basic', 'Standard', 'Premium']`.
Check that the `monthly_fee` column contains numeric values where the mean is between `25` and `100`.
For the `contract_end_date` column: Ensure all entries are valid datetime strings and are after the corresponding `activation_date`.
For field 'temperature': Validate that the values are within the range of -50 to 50 degrees Celsius. Ensure this field exists.
For column 'forecast_date': Ensure all datetime entries conform to the format 'YYYY-MM-DD'. Verify that this column exists in the dataset.
For column 'humidity': Confirm that the values fall between 0 and 100 percent. Ensure this field exists.
For column 'weather_condition': Validate that string values match one of the predefined conditions (e.g., 'Sunny', 'Rainy', 'Cloudy'). Ensure this column exists.
For the 'weather_forecast' table: Check that the number of rows is equal to 7. Ensure this table is present in the dataset.
For field 'wind_speed': Ensure that values match the regex pattern '^[0-9]+(.[0-9]{1,2})?$' indicating a non-negative decimal number. Ensure this field exists.
For column 'precipitation': Validate that all values are greater than or equal to 0. Ensure this field exists.
For field 'visibility': Ensure values are represented in kilometers and are greater than 0. Ensure this field exists.
For column 'uv_index': Validate that the values are integers between 0 and 11. Ensure this column exists.
For the 'hourly_forecast' table: Ensure the columns ['time', 'temperature', 'precipitation'] exist in the specified order.
For field 'policy_start_date': Validate that all entries conform to the format 'YYYY-MM-DD'. Ensure this field exists.
For column 'policy_number': Ensure the length of each policy number is exactly 10 characters. Confirm this column exists.
For field 'premium_amount': Validate that values are positive decimals using the regex '^[0-9]+(.[0-9]{1,2})?$'. Ensure this field exists.
For column 'claim_status': Validate that values must match one of the specified statuses (e.g., 'Pending', 'Approved', 'Denied'). Ensure this column exists.
For the 'claims' table: Check that the number of rows is between 1 and 1000. Ensure this table exists.
For field 'insured_value': Validate that values are within the range of 1000 to 1000000. Ensure this field exists.
For column 'expiration_date': Ensure all datetime values are greater than the 'policy_start_date'. Ensure this column exists.
For field 'customer_email': Validate that all values match the regex for valid email addresses. Ensure this field exists.
For column 'deductible_amount': Validate that all values are integers greater than or equal to 0. Ensure this field exists.
For the 'policy_details' table: Ensure the columns ['policy_number', 'customer_id', 'premium_amount'] exist and are in the specified order.
For column 'device_id': Validate that all entries match the regex pattern '^[A-F0-9]{16}$' for valid hexadecimal identifiers. Ensure this column exists.
For field 'sensor_reading': Validate that values fall within the expected operational range of -100 to 1000. Ensure this field exists.
For column 'timestamp': Ensure that all datetime entries adhere to the format 'YYYY-MM-DD HH:MM:SS'. Verify that this column exists.
For field 'battery_level': Validate that values are integers ranging from 0 to 100. Ensure this field exists.
For the 'device_data' table: Check that the number of rows is equal to the number of active devices tracked. Ensure this table exists.
Ensure the `transaction_id` column contains only distinct values and that it matches the specified pattern 'TX-\\d{6}'.
For the `amount` column, validate that the values are greater than 0 and less than 10,000.
Ensure that the `timestamp` column exists and that its values are formatted as 'YYYY-MM-DD HH:MM:SS'.
Validate the mean of `transaction_amount` is between 50 and 500, and the standard deviation does not exceed 100.
For the `user_id` and `transaction_id` columns, ensure that each combination is unique across records.
Ensure that the `case_number` column matches the pattern 'CASE-\\d{4}-[A-Z]{3}' and contains no duplicates.
For the `filing_date`, verify that all entries are within the last five years and formatted as 'YYYY-MM-DD'.
Ensure the `case_status` column only contains values from the set ['Open', 'Closed', 'Pending'].
Validate that the sum of the `legal_fees` column does not exceed the budgeted amount specified in the `budget` column.
Ensure that the unique count of `plaintiff_id` in the `case_plaintiffs` table matches the total number of cases in the `cases` table.
Verify that the `patient_id` column contains only distinct values and matches the format 'PAT-\\d{5}'.
Ensure that the `date_of_birth` column contains dates that are at least 18 years prior to the current date.
Check that the `diagnosis_code` column matches the standard ICD-10 format and does not contain any null values.
Validate that the mean of the `hospital_visits` column is between 1 and 5, with a maximum value of 10.
For the `age` and `date_of_birth` columns, ensure that the `age` is calculated correctly based on the `date_of_birth`.
Ensure that the `product_id` column contains distinct values and matches the pattern 'PROD-\\d{6}'.
For the `price` column, validate that all values are greater than 0 and less than 1,000.
Ensure the `category` column only contains values from the predefined list ['Electronics', 'Clothing', 'Home'].
Validate that the median of the `customer_rating` column is at least 4 out of 5.
For the `order_date` and `delivery_date` columns, ensure that `delivery_date` is always greater than `order_date`.
Verify that the `employee_id` column contains only distinct values and matches the pattern 'EMP-\\d{4}'.
Ensure the `hire_date` column contains valid dates and is within the last 20 years.
Check that the `department` column only contains values from the set ['Sales', 'Marketing', 'Engineering'].
Validate that the average salary in the `employee_salaries` column does not exceed $100,000.
For the `performance_score` and `salary` columns, ensure that the `performance_score` is positively correlated with the `salary` values.
Ensure the `player_id` column exists and contains unique identifiers for all players. Validate that the number of rows in the `player_stats` table is equal to the number of entries in the `players` table.
For the `match_date` column, ensure all entries are in the format 'YYYY-MM-DD' and that dates do not exceed today's date. Validate that the column contains no null values.
Validate that the `score` column values are within the range of 0 to 300. Ensure the `team_id` column exists and matches against a predefined list of team identifiers.
Check that the `game_type` column contains only the values 'regular', 'playoff', or 'final'. Ensure that all entries pass the string length validation of being between 3 to 10 characters.
For the `player_age` column, ensure all values fall within a specified range of 18 to 40. Verify that the distribution of ages conforms to a normal distribution with a mean of 25 and standard deviation of 5.
Ensure that the `assists` column is always greater than or equal to the `rebounds` column for each player. Check that the sum of `points`, `assists`, and `rebounds` equals the `total_stats` column across all records.
Ensure the `product_id` column exists and contains unique values for all products. Validate that the `price` column only contains positive numeric values.
For the `review_score` column, confirm that all values are between 1 and 5. Ensure that no entries in the column match the string 'N/A' or any null values.
Validate that the `order_date` column entries are in the format 'YYYY-MM-DD' and do not exceed today's date. Ensure that there are no duplicate entries in the `order_id` field.
Check that the `shipping_address` column contains valid string entries that follow the specified regex pattern for addresses. Ensure all entries maintain a minimum length of 10 characters.
For the `category` column, ensure that all entries match one of the predefined categories in the `categories` table. Validate that the number of unique categories matches the expected count.
Ensure that the `quantity_sold` column only contains integer values greater than 0. Validate that the total quantity sold does not exceed the `inventory_count` across all products.
Ensure the `event_time` column exists and is in the format 'YYYY-MM-DD HH:MM:SS'. Validate that all entries are within the last 30 days.
For the `ip_address` column, ensure all entries match the valid IPv4 format using a specific regex pattern. Confirm that there are no duplicate IP addresses in the dataset.
Validate that the `threat_level` column contains only the values 'low', 'medium', or 'high'. Ensure the `threat_description` column contains no entries exceeding 200 characters.
Check that the `response_time` column values are within the range of 0 to 5000 milliseconds. Validate that the distribution follows a uniform distribution across all recorded events.
For the `alert_type` column, ensure values are either 'malware', 'phishing', or 'ransomware'. Confirm that the occurrences of each type maintain a proportional distribution not exceeding 40% for any category.
Ensure the `user_id` column exists and matches a specified list of valid user identifiers. Confirm that the `incident_id` column contains unique values for all records.
For the `action_taken` column, validate that all entries match the predefined set: 'blocked', 'allowed', or 'quarantined'. Ensure no entries are null.
Verify that the `data_exfiltration` flag column contains boolean values (0 or 1). Ensure that when `data_exfiltration` equals 1, there is a corresponding entry in the `exfiltrated_data` column.
Check that the `file_hash` column values match a specific hash algorithm pattern. Ensure there are no duplicate file hashes in the dataset.
For the `alert_timestamp` column, ensure that all entries are in chronological order and no dates are missing in the sequence.
Validate that the `source_port` column only contains integer values between 1024 and 65535. Confirm that the `destination_ip` column matches valid IP address patterns.
Ensure that the `incident_severity` column values are categorized as 'low', 'medium', 'high', or 'critical'. Validate that the distribution of severities does not exceed a 30% threshold for any individual category.
For the `device_id` column, confirm that all entries exist in the `devices` reference table. Validate that the `last_seen` timestamp is always more recent than the `first_seen` timestamp.
Ensure the `enrollment_date` column values are formatted as YYYY-MM-DD and can be parsed using dateutil.
Ensure the `student_id` column contains only unique values and is not null.
Verify that the `final_grade` column has a mean value that falls between 70 and 100.
Confirm that the `course_code` column contains only distinct values matching the set `['CS101', 'CS102', 'MATH201']`.
Check that the number of rows in the `students` table is equal to the number of rows in the `enrollments` table.
Ensure the `game_date` column contains datetime values that match the strftime format '%Y-%m-%d'.
Verify that the `player_id` column values are present in the `players` table without duplicates.
Confirm that the sum of the `points_scored` column matches the expected total of 500 for the season.
Ensure that the `player_age` column has a standard deviation of less than 3 years.
Check that the distribution of `player_scores` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `transaction_date` column values are in the format 'MM/DD/YYYY' and valid according to dateutil.
Check that the `account_balance` column contains values greater than or equal to 0.
Verify that the unique value count in the `transaction_type` column includes the values `['Deposit', 'Withdrawal', 'Transfer']`.
Confirm that the average `loan_amount` in the `loans` table falls between $1,000 and $10,000.
Ensure that the sum of the `interest_rate` column in the `financial_products` table is equal to 5% of the total loan amount.
Ensure the `admission_date` column contains datetime values that can be parsed and match the format '%Y-%m-%d %H:%M:%S'.
Verify that the `patient_id` column has no null values and contains only unique identifiers.
Check that the `age` column has values that conform to the statistical range of 0 to 120 years.
Confirm that the `diagnosis_code` column contains only distinct values matching the specified set of ICD-10 codes.
Ensure that the `blood_pressure` reading has a median value that falls within the range of 90 to 140 mmHg.
Ensure that the `email` column in the `users` table contains valid JSON objects and conforms to the specified JSON schema.
Check that the `score` column in the `exams` table has a maximum value of 100 and a minimum value of 0.
Confirm that the proportion of unique `product_ids` in the `orders` table aligns with expectations, not exceeding 80%.
Ensure that all entries in the `transaction_amount` column in the `transactions` table are positive and have a cumulative sum matching the expected total.
Verify that the combination of `doctor_id` and `patient_id` in the `appointments` table is unique across all records.
Ensure the `enrollment_date` column contains dates formatted as `'%Y-%m-%d'` and can be parsed using dateutil.
Ensure the `student_id` column contains unique values and matches the expected format of alphanumeric strings.
Verify that the `final_grade` column values are between 0 and 100, indicating valid grading.
Ensure the `course_id` column exists and contains values that match the set of defined course identifiers.
For the columns `start_date` and `end_date`, ensure that all `end_date` values are greater than their corresponding `start_date` values.
Ensure the `release_date` column contains valid datetime strings formatted as `'%Y-%m-%d'`.
Verify that the `game_rating` column adheres to the expected distribution with a p-value greater than 0.05 when tested against the Chi-Square test.
Check that the `platform` column contains only distinct values from the set `['PC', 'Console', 'Mobile']`.
For the `player_scores` column, ensure that values are above the average score for the respective game title.
Ensure the JSON objects in the `game_details` column conform to the specified JSON schema for game attributes.
Verify that the `call_duration` column contains values greater than zero and is represented in seconds.
Ensure the `timestamp` column values are compatible with the `'%Y-%m-%d %H:%M:%S'` format.
For the `billing_amount` and `discount` columns, check that the sum of these columns equals the `total_amount` column.
Ensure the `customer_id` column contains unique entries, and all entries exist in the master customer database.
Check that the `data_usage` column's distribution passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
Ensure the `transaction_date` column contains valid datetime entries that match the `'%Y-%m-%d %H:%M:%S'` format.
Verify that the `transaction_amount` column values are strictly positive and within the expected range.
For the columns `user_id` and `transaction_id`, ensure that their combination is unique across all records.
Check that the `location_data` column contains valid JSON objects adhering to the specified schema for geolocation.
Ensure that the statistical distribution of `transaction_amount` conforms to expected behavior with KL divergence below 0.1.
Ensure the `sensor_reading_time` column contains valid datetime values formatted as `'%Y-%m-%dT%H:%M:%SZ'`.
Verify that the `device_id` column has unique entries and matches the predefined set of registered device identifiers.
Check that the `battery_level` column values are between 0 and 100, representing valid battery percentages.
For the `temperature` and `humidity` columns, ensure the average temperature is correlated with the humidity levels, with a Cramér's Phi value below 0.3.
Ensure that the `file_data` for firmware updates exists, matches the expected hash value, and the file size is within the defined limits.
Ensure the `phone_number` field is unique and follows the format `+CountryCode-XXX-XXX-XXXX`. Ensure no null values are present.
For the `subscription_start_date`, ensure it adheres to the format `YYYY-MM-DD` and is not a future date.
Validate that the `data_limit_gb` field contains values within the range of 1 to 1000 GB and does not include negative values.
Ensure the `service_type` column contains only distinct values from the set `['Prepaid', 'Postpaid', 'Hybrid']`.
Check that the `customer_email` field matches the regex pattern for email validation and has no missing values.
For the `employee_id` field, ensure it is unique and contains only numeric values. Ensure this field cannot be null.
Validate that the `hire_date` field is in format `YYYY-MM-DD` and cannot be a future date.
Ensure the `salary` column contains only values greater than or equal to 30000 and less than or equal to 200000.
For the `department_code`, ensure the values match the defined set `['HR', 'IT', 'Finance', 'Sales']`.
Check that the `phone_extension` field has a string length of exactly 3 digits and contains only numeric values.
Ensure the `timestamp` field adheres to the format `YYYY-MM-DD HH:MM:SS` and contains no future dates.
Validate that the `threat_level` column contains unique values from the set `['Low', 'Medium', 'High', 'Critical']`.
For the `ip_address` field, ensure it matches the regex pattern for valid IPv4 addresses and has no null values.
Check that the `incident_report` field is not null and contains a minimum of 50 characters.
Ensure the `detection_time` column values are in increasing order and do not contain any missing values.
For the `temperature` field, ensure values fall within the acceptable range of -50 to 50 degrees Celsius.
Validate that the `precipitation` field contains values that are non-negative and do not exceed 500 mm.
Check that the `weather_condition` column contains only distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.
Ensure the `forecast_date` field is in the format `YYYY-MM-DD` and does not include past dates.
For the `humidity` column, ensure that the mean value is between 30% and 90% and contains no null values.
Ensure the `user_id` in the Cybersecurity domain is unique and matches the format `USR-XXXXX`, where X is a digit.
For the `job_title` in HRMS, ensure string lengths are between 1 and 50 characters and contain no special characters.
Validate that the `network_bandwidth` in Telecommunications is not null and falls within the set range of 1 Mbps to 10 Gbps.
Check that the `weather_alert` field contains valid JSON objects conforming to the specified schema.
Ensure the `last_updated` field in Threat Analysis is in the format `YYYY-MM-DDTHH:MM:SSZ` and is not null.
For the `email_address` field: Ensure the field matches the type 'text'. Validate that all entries conform to the standard email format using a regular expression pattern.
In the `message_body` column: Ensure that string lengths do not exceed 2000 characters. Validate that this field is required (not null).
For the `sent_time` column: Ensure all datetime values adhere to the format 'YYYY-MM-DD HH:MM:SS'. Validate that this field contains no missing values.
In the `user_id` field: Ensure values are unique and of type 'integer'. Validate that this field cannot be null.
For the `attachment_type` field: Ensure values match the specified set of allowed types: `['image/jpeg', 'application/pdf', 'text/plain']`.
For the `employee_id` field: Ensure all values are unique and match the type 'integer'. Validate that this field is required (not null).
In the `hire_date` column: Ensure all datetime values are formatted as 'YYYY-MM-DD'. Validate that there are no missing values.
For the `salary` field: Ensure values fall within the range of 30000 to 200000. Validate that this field cannot be null.
In the `email` column: Ensure all entries conform to the standard email format using a regular expression pattern. Validate that this field is required (not null).
For the `department` field: Ensure values belong to the specified set: `['HR', 'Finance', 'IT', 'Sales']`. Validate that this field cannot be null.
For the `account_number` field: Ensure values are unique and match the type 'string'. Validate that this field is required (not null).
In the `transaction_date` column: Ensure all datetime values are formatted as 'YYYY-MM-DD' and contain no missing values.
For the `transaction_amount` field: Ensure values are within the range of 0.01 to 1000000. Validate that this field cannot be null.
In the `transaction_type` field: Ensure values match the set `['Deposit', 'Withdrawal', 'Transfer']`. Validate that this field is required (not null).
For the `currency_code` field: Ensure values match the regular expression pattern for ISO 4217 currency codes. Validate that this field cannot be null.
For the `property_id` field: Ensure all values are unique and of type 'integer'. Validate that this field cannot be null.
In the `listing_date` column: Ensure all datetime values adhere to the format 'YYYY-MM-DD'. Validate that there are no missing values.
For the `price` field: Ensure values fall within the range of 50000 to 5000000. Validate that this field cannot be null.
In the `property_type` field: Ensure values belong to the specified set: `['Apartment', 'House', 'Commercial']`. Validate that this field is required (not null).
For the `zip_code` field: Ensure values match the regular expression for five-digit US zip codes. Validate that this field cannot be null.
For the `game_id` field: Ensure all values are unique and match the type 'integer'. Validate that this field cannot be null.
In the `release_date` column: Ensure all datetime values are formatted as 'YYYY-MM-DD' and contain no missing values.
For the `rating` field: Ensure values fall within the range of 1 to 10. Validate that this field is required (not null).
In the `platform` field: Ensure values match the set `['PC', 'Console', 'Mobile']`. Validate that this field cannot be null.
For the `description` column: Ensure string lengths do not exceed 500 characters. Validate that this field is nullable (may contain null values).
Ensure the `student_id` column contains only unique values and does not include any null entries.
For the `enrollment_date` field: Validate that all entries are in the format YYYY-MM-DD and are not future dates.
Verify that the `course_code` values match the specified set of known course codes: ['CS101', 'MATH202', 'ENG303'].
Ensure that the `email` column adheres to a valid email format and does not exceed 255 characters in length.
For the `final_grade` field: Confirm that all values are within the range of 0 to 100.
Validate that the `student_name` column has a maximum length of 50 characters and does not contain any numeric characters.
Check that the `attendance` column contains only boolean values (True/False) and does not include null entries.
Ensure that the `submission_timestamp` field follows the strftime format '%Y-%m-%d %H:%M:%S' and is not in the future.
For the `course_start_date` and `course_end_date`: Ensure that `course_end_date` is always greater than `course_start_date`.
Confirm that the `student_id` and `course_code` combination is unique across all records.
Verify that the `feedback` column does not exceed 300 characters and does not contain any inappropriate language.
Check that the `grade_level` values are restricted to the set of integers: {9, 10, 11, 12}.
Ensure the `date_of_birth` field is formatted as YYYY-MM-DD and that all entries are at least 13 years old.
For the `major` column: Validate that it contains only distinct values from the predefined list: ['Computer Science', 'Mathematics', 'English']. Ensure this field exists.
Check that the `course_capacity` is a positive integer and does not exceed 50.
Ensure that the `voter_id` column contains unique identifiers and does not include any null entries.
For the `voting_date` field: Validate that all entries are in the format YYYY-MM-DD and are not future dates.
Verify that the `district_code` values match the specified set of known district codes: ['D01', 'D02', 'D03'].
Ensure that the `email` column adheres to a valid email format and does not exceed 255 characters in length.
For the `age` field: Confirm that all values are within the range of 18 to 120.
Validate that the `candidate_name` column has a maximum length of 50 characters and does not contain any numeric characters.
Check that the `is_registered` column contains only boolean values (True/False) and does not include null entries.
Ensure that the `registration_timestamp` field follows the strftime format '%Y-%m-%d %H:%M:%S' and is not in the future.
For the `voting_method` and `voter_id`: Ensure that the `voting_method` is one of the specified set: ['In-Person', 'Mail-In', 'Early Voting'].
Confirm that the combination of `voter_id` and `election_id` is unique across all records.
For field 'product_id': Ensure the field matches the type 'integer'. Ensure values in (product_id) are unique and not null. Ensure this field exists.
For field 'stock_quantity': Ensure the field matches the type 'integer'. Ensure values in (stock_quantity) are within the range of 0 to 1000. Ensure this field exists.
For field 'product_name': Ensure the field matches the type 'text'. Ensure string lengths in (product_name) are between 1 and 255 characters. Ensure this field exists.
For field 'price': Ensure the field matches the type 'decimal'. Ensure values in (price) are greater than 0. Ensure this field exists.
For field 'category': Ensure the field matches the type 'text'. Ensure values in (category) must exist in predefined categories (electronics, clothing, home). Ensure this field exists.
For field 'expiration_date': Ensure the field can be parsed as a valid date. Ensure values in (expiration_date) are in the future. Ensure this field exists.
For field 'discount_code': Ensure the field matches the type 'text'. Ensure string values in (discount_code) do not exceed 10 characters in length. Ensure this field exists.
For field 'supplier_id': Ensure the field matches the type 'integer'. Ensure values in (supplier_id) are unique and not null. Ensure this field exists.
For field 'last_restock_date': Ensure values in (last_restock_date) match the format 'YYYY-MM-DD'. Ensure this field exists.
For field 'product_tags': Ensure the field matches the type 'text array'. Ensure all values in (product_tags) are unique and do not exceed 30 characters in length. Ensure this field exists.
For field 'case_id': Ensure the field matches the type 'integer'. Ensure values in (case_id) are unique and not null. Ensure this field exists.
For field 'client_email': Ensure the field matches the type 'text'. Ensure values in (client_email) match a valid email format. Ensure this field exists.
For field 'case_status': Ensure the field matches the type 'text'. Ensure values in (case_status) must exist in the set (open, closed, pending). Ensure this field exists.
For field 'filing_date': Ensure values in (filing_date) can be parsed as a valid date. Ensure this field exists.
For field 'case_description': Ensure the field matches the type 'text'. Ensure string lengths in (case_description) are between 1 and 1000 characters. Ensure this field exists.
For field 'court_date': Ensure values in (court_date) match the format 'YYYY-MM-DD'. Ensure the date is in the future. Ensure this field exists.
For field 'assigned_attorney_id': Ensure the field matches the type 'integer'. Ensure values in (assigned_attorney_id) are unique and not null. Ensure this field exists.
For field 'evidence_files': Ensure the field matches the type 'file'. Ensure files in (evidence_files) exist and do not exceed 10MB in size. Ensure this field exists.
For field 'notes': Ensure the field matches the type 'text'. Ensure string lengths in (notes) do not exceed 500 characters. Ensure this field exists.
For field 'client_phone': Ensure the field matches the type 'text'. Ensure values in (client_phone) match a valid phone number format. Ensure this field exists.
For field 'username': Ensure the field matches the type 'text'. Ensure values in (username) are unique and consist of 3 to 15 alphanumeric characters. Ensure this field exists.
For field 'post_date': Ensure values in (post_date) match the format 'YYYY-MM-DD HH:MM:SS'. Ensure this field exists.
For field 'bio': Ensure the field matches the type 'text'. Ensure string lengths in (bio) do not exceed 160 characters. Ensure this field exists.
For field 'followers_count': Ensure the field matches the type 'integer'. Ensure values in (followers_count) are greater than or equal to 0. Ensure this field exists.
For field 'image_url': Ensure the field matches the type 'text'. Ensure values in (image_url) match a valid URL format. Ensure this field exists.
For the `citizen_id` field: Ensure the field matches the type 'integer'. Ensure values are unique and cannot be null.
In the `service_request` table: Validate that the `status` column contains only values from the set `['Open', 'In Progress', 'Closed']`.
In the `elections` dataset: Ensure the `election_date` field is of type 'date' and falls within the range of `['2020-01-01', '2023-12-31']`.
For the `community_feedback` table: Verify that the `comments` column contains strings with a length between 10 and 500 characters.
In the `public_services` table: Ensure that the `service_type` field matches at least one pattern from the list `['Health', 'Education', 'Transportation']`.
For the `post_id` field: Ensure values are unique and of type 'integer'. Ensure this field cannot be null.
In the `articles` dataset: Validate that the `tags` column contains only distinct values and matches the pattern `^[a-zA-Z0-9]+(,[a-zA-Z0-9]+)*$`.
In the `users` table: Ensure the `email` field matches the predefined pattern of a valid email format and is required (not null).
For the `content_length` column: Ensure values fall within the range of 300 to 5000 characters.
In the `media_files` dataset: Ensure all filenames in the `file_name` column do not contain any SQL-like patterns from the list `['DROP', 'SELECT', 'INSERT']`.
For the `account_number` field: Ensure values are unique and match the type 'string'. Ensure this field cannot be null.
In the `transactions` table: Validate that the `transaction_amount` is within the range of 0 to 1000000.
For the `customer_email` column: Ensure it matches a valid email format and is required (not null).
In the `loan_applications` dataset: Ensure the `application_date` field is of type 'date' and must be earlier than or equal to today's date.
In the `account_balances` table: Verify that the `balance` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.
For the `customer_id` field: Ensure values are unique and of type 'integer'. Ensure this field cannot be null.
In the `contacts` table: Validate that the `phone_number` column matches the pattern `^\+\d{1,3}[- ]?\d{1,4}[- ]?\d{4,10}$`.
For the `customer_status` column: Ensure it contains only values from the set `['Active', 'Inactive', 'Prospect']`.
In the `interactions` dataset: Ensure the `interaction_date` field is of type 'date' and falls within the range of `['2020-01-01', '2023-12-31']`.
In the `feedback` table: Ensure the `ratings` column contains values between 1 and 5, inclusive.
For the `user_id` field: Ensure values are unique and of type 'integer'. Ensure this field cannot be null.
In the `content` table: Validate that the `genre` column contains only distinct values from the set `['Action', 'Drama', 'Comedy', 'Documentary']`.
In the `subscriptions` dataset: Ensure the `subscription_start_date` field is of type 'date' and cannot be a future date.
For the `video_title` column: Ensure string lengths are between 5 and 100 characters, and do not contain special characters.
In the `watch_history` table: Ensure the `watch_time` column passes the Chi-Square test with a p-value greater than 0.05.
Ensure the `device_id` column contains only unique values and is of type 'string'. Ensure this field is required (not null).
For the `temperature` column: Validate that all values are within the range of -50 to 150 degrees Celsius and ensure no missing values are present.
For the `status` column: Ensure it contains values from the set `['active', 'inactive', 'maintenance']` and does not contain null entries.
Validate that the `last_updated` column adheres to the ISO 8601 datetime format and does not contain any missing values.
Ensure the `battery_level` is a numeric type and that all values fall within the range of 0 to 100, inclusive.
Ensure that the `email` column contains unique values and adheres to the format of a valid email address, and no null values are present.
For the `price` column: Verify that all values are greater than 0 and check that there are no missing entries.
Validate the `category_id` field to ensure it corresponds to existing categories in the `categories` table and no null values are present.
Check that the `order_date` field is formatted as 'YYYY-MM-DD' and all entries can be parsed into valid datetime objects.
For the `discount_percentage` column: Ensure that values are between 0 and 100 and that the mean discount does not exceed 30%.
Ensure the `case_number` column has unique values and matches the regex pattern for valid case numbers. Ensure this field is not null.
For the `filing_date` column: Validate that all entries are within the date range from '2000-01-01' to the current date and adhere to the datetime format.
Ensure the `status` column contains values from the set `['open', 'closed', 'pending']` and has no missing values.
Verify that the `court_date` is greater than the `filing_date` for all records and both columns are of type 'datetime'.
For the `plaintiff_id` and `defendant_id` columns: Ensure that each value corresponds to existing entries in the `users` table and both columns are not null.
Ensure the `voter_id` column contains unique values and matches the valid voter ID format. No null values should be present.
For the `registration_date` column: Validate that all dates comply with the format 'MM/DD/YYYY' and fall within the range of the last five years.
Check that the `vote_cast` column has values from the set `['yes', 'no', 'abstain']`, ensuring no missing values are present.
Validate that the `election_date` is not in the future and is formatted as 'YYYY-MM-DD'. Ensure there are no null values in this column.
For the `district` column: Ensure that values derive from a predefined set of district identifiers and verify that it cannot be null.
Ensure the `student_id` column contains unique values and is of type 'integer'. This field must not be null.
For the `enrollment_date` column: Validate that all entries follow the 'YYYY-MM-DD' format and are not missing.
Check that the `grade` column contains values within the range of 0 to 100 and verify that there are no null entries.
For the `course_id` and `student_id` columns: Ensure that the combination of these two fields is unique across records.
Validate the `completion_status` column to ensure it contains values from the set `['completed', 'in-progress', 'failed']` and has no missing values.
Ensure the `patient_id` column contains only unique values and does not allow null entries.
For the `date_of_birth` field: Verify that values are in the format 'YYYY-MM-DD' and are valid dates.
Ensure the `diagnosis_code` values are within the allowed set defined by ['A00', 'B01', 'C02'].
For the `prescription_amount`: Ensure that the values fall within the range of 1 to 30 and are integers.
Verify that the `email` column adheres to a valid email format and does not contain duplicates.
Check that the `appointment_date` field contains dates only in the future and matches the format 'YYYY-MM-DD'.
Ensure the `medication_name` column contains distinct values and matches the type 'text'.
For `blood_pressure` readings: Ensure values are within the range of 60 to 180 for systolic and 40 to 120 for diastolic.
Verify that the `insurance_policy_number` is not null and consists of exactly 10 alphanumeric characters.
Ensure the `patient_age` is a positive integer and falls within the range of 0 to 120.
Ensure the `student_id` column contains only unique entries and does not allow null values.
For the `enrollment_date` field: Verify that all values are in the format 'YYYY-MM-DD' and are not future dates.
Ensure the `course_code` values are included in the set ['CS101', 'MATH202', 'BIO303'].
For the `grade` column, ensure that values fall within the range of 0 to 100 and are numeric.
Check that the `email` field contains valid email formats and does not have any duplicates.
Verify that the `attendance_percentage` is a decimal number between 0.0 and 100.0.
Ensure the `student_name` column consists of distinct values and matches the type 'text'.
For `assignment_due_date`: Ensure all dates are in the past and conform to the format 'YYYY-MM-DD'.
Ensure the `major` field matches one of the values in the predefined set ['Engineering', 'Arts', 'Science'].
For the `test_scores` column, verify that the mean score falls within the range of 50 to 90.
Ensure the `course_id` column contains unique identifiers and does not allow null values.
For the `last_accessed` field: Verify all dates are in 'YYYY-MM-DD HH:MM:SS' format and are valid.
Ensure the `user_role` values are restricted to the set ['student', 'instructor', 'admin'].
For the `completion_percentage`: Ensure values are between 0 and 100 and are represented as decimals.
Verify that the `resource_file` exists, matches the specified hash value, and does not exceed 10MB in size.
Ensure the `user_id` column contains only unique values and does not have any missing entries.
For the `subscription_start_date` field: Ensure the values are in the format 'YYYY-MM-DD' and can be parsed using dateutil.
Validate that the `genre` column only contains values from the set `['Action', 'Drama', 'Comedy', 'Horror']`.
Ensure the `watch_time` column contains only numeric values greater than or equal to 0.
For the `rating` column: Verify that values are between 1 and 5 and that there are no missing values.
Ensure the `employee_id` field contains distinct values and is not null.
For the `hire_date` field: Ensure all dates are in the correct format 'MM/DD/YYYY' and can be parsed correctly.
Check that the `position` column contains values from the predefined set `['Manager', 'Developer', 'Designer']`.
Ensure the `salary` values are within the range of 30000 to 200000.
Validate that the combination of `first_name` and `last_name` columns is unique across all records.
Ensure the `transaction_id` column contains only unique values and is not null.
For the `transaction_date` field: Validate that the values match the format 'YYYY-MM-DDTHH:MM:SSZ' and can be parsed using dateutil.
Check that the `currency` column contains only values from the set `['BTC', 'ETH', 'LTC']`.
Ensure the `amount` column contains numeric values greater than 0.
For the `gas_fee` column, validate that values are within the range of 0.01 to 100 and are not null.
Ensure the `device_id` column has unique values and does not contain any null entries.
For the `timestamp` field: Validate that all entries follow the format 'YYYY-MM-DD HH:MM:SS' and can be parsed correctly.
Check that the `status` column contains values from the set `['active', 'inactive', 'maintenance']`.
Ensure the `temperature` readings are within the range of -50 to 150 degrees Celsius.
Validate the sum of `battery_level` and `signal_strength` columns equals 100 for each record.
Ensure the `alert_id` column contains only unique values and has no missing entries.
For the `timestamp` field: Validate that datetime strings match the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.
Check that the `threat_level` column contains values from the defined set `['low', 'medium', 'high']`.
Ensure the `response_time` column values are greater than or equal to 0 and less than or equal to 3600 seconds.
Validate that the combination of `ip_address` and `alert_type` columns is unique across all records.
Ensure the `experiment_id` column contains unique values that are non-null and of type 'integer'.
For the `result_score` field: Validate that all scores are between 0 and 100, and no missing values are allowed.
Check that the `date_collected` field adheres to the format 'YYYY-MM-DD' and contains valid datetime entries.
In the `sample_size` column, ensure values are distinct and not less than 30, indicating a minimum sample requirement.
Verify that the `hypothesis` field is not null and contains text data, ensuring all entries provide a valid hypothesis statement.
Ensure that the `data_source` field contains only values from the set `['Survey', 'Experiment', 'Observation']`.
For the `publication_date` column, confirm that all entries are in 'YYYY-MM-DD' format and are not future dates.
In the `research_team` field, validate that the field is of type 'text' and does not contain any null values.
Check that the combination of `experiment_id` and `subject_id` fields are unique across records to maintain data integrity.
Ensure that the `test_results` JSON field conforms to the specified schema and contains no missing keys.
Validate that the `ip_address` column contains unique values and matches the standard IPv4 format.
Ensure the `attack_type` field only includes values from the set `['Phishing', 'Malware', 'Ransomware']`.
In the `timestamp` column, verify that all entries can be parsed using dateutil and are in a valid datetime format.
Check that the `incident_report` field is of type 'text', is not null, and contains a detailed description of the incident.
For the `threat_level` column, ensure all values are within the range 1 to 5, indicating severity levels.
Verify that the combination of `user_id` and `incident_id` fields are unique to prevent duplicate incident reports.
Ensure the `json_payload` field contains valid JSON objects and adheres to the defined JSON schema.
Check that the `alert_time` field has no missing values and is in the format 'YYYY-MM-DD HH:MM:SS'.
Ensure that the `response_time` field is not null and that values indicate the response occurred within 24 hours of the incident.
Validate that the `data_breach` column contains values of type 'boolean' to indicate the occurrence of a data breach.
Ensure the `employee_id` column contains unique, non-null values of type 'integer' for all records.
In the `hire_date` field, confirm that all entries are valid dates in the format 'YYYY-MM-DD' and are not in the future.
Check that the `department` field only includes values from the set `['HR', 'IT', 'Finance', 'Sales']`.
For the `salary` column, ensure no missing values exist and that all entries fall within the range of $30,000 to $200,000.
Validate that the combination of `first_name`, `last_name`, and `email` fields is unique across all employee records to prevent duplicates.
Ensure the `device_id` column contains only unique values representing different IoT devices. Verify that this field is non-null and of type 'text'.
For the `energy_consumption` field: Ensure values fall within the range of 0 to 1000 kWh. Verify that this column does not contain any missing values.
Check that the `sensor_type` column exclusively contains values from the set `['Temperature', 'Humidity', 'Pressure']`. Ensure there are no duplicates in this column.
For the `timestamp` field: Ensure that all values are of type 'datetime' and do not contain any null entries. Validate that timestamps are in increasing order.
Verify that the `utility_meter_id` column has unique identifiers for each utility meter. Ensure this field is non-null and formatted correctly.
For `battery_level`: Ensure values are within the range of 0 to 100%. Validate that there are no missing values in this column.
Ensure the `location_id` field contains distinct values that correspond to valid entries in the `locations` dataset. Confirm this field is non-null.
For the `energy_cost_per_kWh` field: Validate that the mean value is within the range of $0.05 to $0.20. Check for any outliers in the dataset.
Check that the combination of `device_id` and `timestamp` columns is unique across records. Ensure this combination does not contain any duplicates.
For the `temperature_reading` field: Ensure values are within the range of -20 to 50 degrees Celsius. Confirm that this column does not have any null values.
Ensure the `alerts` column contains only valid entries from the set `['High Consumption', 'Low Battery', 'Malfunction']`. Validate that there are no duplicate alerts.
For the `last_maintenance_date`: Ensure values are of type 'date' and that they are not null. Verify that all dates are in the past.
Check that the `status` column exclusively contains values from the set `['Active', 'Inactive', 'Maintenance']`. Validate that this column does not contain duplicates.
For the `water_usage` field: Ensure the sum of this column for each month does not exceed the expected limit of 5000 liters.
Verify that the `data_file` asset exists and matches the specified hash value. Ensure the file size is within the range of 1MB to 10MB.
For the `network_latency` column: Ensure that values are within the range of 10 to 500 milliseconds. Confirm that this column does not contain any null values.
Check that the combination of `meter_id`, `timestamp`, and `reading_type` is unique across records. Ensure that there are no duplicates in this combination.
For the `energy_efficiency_rating` field: Ensure that the values are from the set `['A', 'B', 'C', 'D', 'E']`. Confirm that no null values are present.
Ensure the `usage_category` column contains only distinct values matching `['Residential', 'Commercial', 'Industrial']`. Validate that this column is non-null.
For the `operational_status` field: Ensure values are of type 'text' and match the set `['Online', 'Offline', 'Error']`. Confirm that this column does not have missing values.
Check that the `total_cost` column has a mean value that falls within the range of $100 to $5000. Validate that no records contain null values.
For the `sensor_reading` field: Ensure values are within the expected range of 0 to 1000 units. Confirm this column is free from missing values.
Ensure that the `file_data` asset contains valid JSON formatting and that it has a minimum of 100 lines. Confirm the presence of valid headers.
For the `fuel_type` column: Ensure it contains values from the set `['Natural Gas', 'Electric', 'Solar']`. Validate that there are no duplicate entries.
Verify that the `data_quality_score` column has values ranging from 0 to 100. Ensure there are no missing values and that the average score aligns with expected quality standards.
Ensure the `student_id` column contains unique values and does not allow null entries.
Verify that the `email` field has a valid format matching the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`.
For the `enrollment_date` column, ensure all entries conform to the ISO 8601 format (YYYY-MM-DD).
Check that the `course_name` field contains only distinct values with a length between 5 and 100 characters.
Ensure the `final_grade` column contains numerical values between 0 and 100, with no null values allowed.
Validate that the `submission_date` entries are not older than the `enrollment_date` for each student.
For the `course_id` field, ensure it matches the type 'integer' and contains no duplicate values.
Ensure the `ip_address` column adheres to the standard IPv4 format and contains unique entries.
Validate that the `timestamp` field is formatted as `YYYY-MM-DD HH:MM:SS` and contains no null values.
Check that the `threat_level` field matches one of the predefined categories: ['Low', 'Medium', 'High'].
Verify that the `alert_description` field does not exceed 255 characters and does not contain any SQL-like patterns.
For the `incident_report` column, ensure it is a valid JSON object conforming to the specified schema.
Ensure the `duration` field contains positive integer values representing time in minutes and that there are no null values.
Check that the `source_ip` field does not match any patterns from the list of known malicious IP addresses.
Ensure the `product_id` field contains unique values and is of type 'string', with no null entries.
Validate that the `price` column contains numerical values greater than zero and no missing entries.
For the `stock_level` field, ensure that it contains integer values only and does not allow negative numbers.
Check that the `product_name` field matches the regex pattern `^[A-Za-z0-9 ]{3,50}$` to ensure valid product naming.
Verify that the `category` column includes only distinct values from the predefined list: ['Electronics', 'Clothing', 'Home Goods'].
Ensure the `last_restocked` column adheres to the format `YYYY-MM-DD` and contains valid dates only.
For the `discount_percentage` field, ensure values fall within the range of 0 to 100 and are of type 'float'.
Ensure the `transaction_id` field is unique and adheres to the hexadecimal format with a length of 64 characters.
Validate that the `block_timestamp` is formatted as `YYYY-MM-DDTHH:MM:SSZ` and contains no invalid entries.
Check that the `wallet_address` field matches the regex pattern `^0x[a-fA-F0-9]{40}$` for Ethereum addresses.
Ensure the `transaction_value` column contains floating-point numbers that are non-negative and have no missing values.
Ensure the `transaction_id` column contains only unique values and is not null.
For the `user_email` field: Validate that it matches the standard email format and does not exceed 255 characters.
Ensure the `transaction_amount` is a positive numeric value and falls within the range of 0.01 to 10000.00.
For the `transaction_date`: Validate that all entries follow the format 'YYYY-MM-DD' and are not in the future.
Ensure the `ip_address` column matches valid IPv4 address patterns and does not contain null values.
For the `fraud_score`: Confirm that values are numeric and within the expected range of 0 to 100.
Validate that the `user_country` field contains only distinct values from the predefined list of countries.
For the `device_id`: Ensure the string values match the regex pattern of '^[a-f0-9]{32}$' and are unique.
Ensure that the `transaction_type` column contains only values from the list ['purchase', 'refund', 'transfer'].
For the `created_at` field: Ensure all datetime values are in UTC and conform to the 'YYYY-MM-DD HH:MM:SS' format.
Ensure the `product_id` column contains unique values and is not null for all records.
For the `supplier_email`: Validate that it matches the standard email format and does not exceed 100 characters.
Ensure the `quantity_ordered` is a non-negative integer and must be greater than zero.
For the `order_date`: Ensure all entries follow the format 'YYYY-MM-DD' and are not in the future.
Validate that the `shipment_tracking_number` matches the regex pattern '^[A-Z0-9]{10,20}$' and is unique.
Ensure the `warehouse_location` column contains only distinct values matching the predefined list of warehouse names.
For the `unit_price`: Confirm that all values are numeric and within the range of 0.00 to 5000.00.
Ensure that the `order_status` column contains only values from the list ['pending', 'shipped', 'delivered', 'canceled'].
For the `shipment_date`: Validate that all dates are valid and occur after the corresponding `order_date`.
Ensure the `order_items` field is a valid JSON object conforming to the specified schema and contains no null values.
Ensure the `booking_id` column contains only unique values and is not null.
For the `customer_email`: Validate that it matches the standard email format and does not exceed 255 characters.
Ensure the `check_in_date` is a valid date in the future and follows the format 'YYYY-MM-DD'.
For the `room_type`: Validate that the field contains only values from the list ['single', 'double', 'suite'].
Ensure the `payment_amount` is a positive numeric value and falls within the range of 0.01 to 10000.00.
For field 'supplier_id': Ensure this field matches the type 'integer'. Validate that all values in 'supplier_id' are unique and not null. Ensure this field exists.
For field 'order_date': Validate that all values conform to the datetime format 'YYYY-MM-DD'. Ensure there are no missing values in this field.
For field 'product_code': Ensure the field matches the type 'text'. Validate that each 'product_code' adheres to the pattern '^[A-Z]{3}-\d{3}$'. Ensure values are unique.
For field 'inventory_count': Ensure this field matches the type 'integer'. Validate that all values are non-negative and not null. Ensure this field exists.
For field 'shipment_status': Ensure the field matches the type 'text'. Validate that 'shipment_status' values must be one of the predefined statuses: 'Pending', 'Shipped', 'Delivered'.
For field 'delivery_date': Validate that all values conform to the datetime format 'YYYY-MM-DD'. Ensure that 'delivery_date' is always greater than 'order_date' and there are no missing values.
For field 'customer_email': Ensure the field matches the type 'text'. Validate that all email addresses conform to the standard email format and are unique.
For field 'payment_amount': Ensure this field matches the type 'decimal'. Validate that all values are greater than zero and not null.
For field 'json_data': Validate that all values are valid JSON objects and conform to the specified JSON schema. Ensure this field exists.
For field 'warehouse_location': Ensure the field matches the type 'text'. Validate that the length of values in 'warehouse_location' does not exceed 50 characters.
For field 'order_quantity': Ensure this field matches the type 'integer'. Validate that all values are greater than zero and validate that there are no missing values.
For field 'product_description': Ensure the field matches the type 'text'. Validate that all values do not exceed 255 characters and do not contain special characters.
For field 'order_id': Ensure this field matches the type 'text'. Validate that 'order_id' values must match the pattern 'ORD-\d{6}' and are unique.
For field 'transaction_date': Validate that all values conform to the datetime format 'YYYY-MM-DD HH:MM:SS'. Ensure there are no missing values.
For field 'shipping_cost': Ensure this field matches the type 'decimal'. Validate that all values are non-negative and not null.
For field 'vendor_rating': Ensure this field matches the type 'integer'. Validate that all values fall within the range of 1 to 5 and there are no missing values.
For field 'currency_code': Ensure the field matches the type 'text'. Validate that values must be one of the valid currency codes: 'USD', 'EUR', 'GBP'.
For field 'json_payload': Validate that all values are valid JSON objects. Ensure the content adheres to the defined schema and there are no missing values.
For field 'item_weight': Ensure this field matches the type 'decimal'. Validate that all values are greater than zero and not null.
For field 'supplier_contact': Ensure the field matches the type 'text'. Validate that all values conform to the phone number format '(XXX) XXX-XXXX'.
For field 'purchasing_date': Validate that all values conform to the datetime format 'YYYY-MM-DD'. Ensure there are no missing values and that 'purchasing_date' is less than or equal to today's date.
For field 'product_category': Ensure the field matches the type 'text'. Validate that values in 'product_category' must exist in the predefined list of categories (e.g., 'Electronics', 'Furniture').
For field 'supplier_rating': Ensure this field matches the type 'integer'. Validate that all values fall within the range of 1 to 10 and are unique.
For field 'file_size': Validate that the file exists, matches the specified hash value, and falls within a defined size range of 1KB to 5MB.
For field 'shipment_tracking': Ensure the field matches the type 'text'. Validate that all values match the regex pattern '^[A-Z0-9]{10,20}$' and are unique.
For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'string' and conforms to the regex pattern '[0-9a-fA-F]{64}'.
For field 'block_number': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Validate that all values are positive integers.
For field 'crypto_address': Ensure the field is required (not null). Ensure the field matches the type 'string' and conforms to the regex pattern '^0x[a-fA-F0-9]{40}$'.
For field 'transaction_amount': Ensure the field is required (not null). Validate that the sum of 'transaction_amount' is greater than zero across all records.
For field 'timestamp': Ensure the field is required (not null). Ensure the field matches the type 'datetime'. Validate that all timestamps are in the past.
For field 'status': Ensure the field is required (not null). Validate that all values in 'status' are from the defined set ('pending', 'completed', 'failed').
For field 'fee': Ensure the field can be null. If present, validate that the field matches the type 'float' and is greater than or equal to zero.
For field 'sender_address': Ensure the field is required (not null). Validate that values in 'sender_address' are unique across all records.
For field 'receiver_address': Ensure the field is required (not null). Validate that values in 'receiver_address' do not match any values in 'sender_address'.
For field 'transaction_type': Ensure the field is required (not null). Validate that values in 'transaction_type' must be either 'send' or 'receive'.
For field 'gas_limit': Ensure the field can be null. If present, ensure the field matches the type 'integer' and is a positive value.
For field 'network_fee': Ensure this field exists. Validate that the average 'network_fee' across all transactions does not exceed a defined threshold.
For field 'signature': Ensure the field is required (not null). Ensure the field matches the type 'string' and conforms to the regex pattern '^[0-9a-fA-F]{130}$'.
For field 'nonce': Ensure the field is required (not null). Validate that the 'nonce' is unique for each 'sender_address' in the dataset.
For field 'transaction_hash': Ensure the field is required (not null). Validate that all 'transaction_hash' values are unique and conform to the regex pattern '^[0-9a-fA-F]{64}$'.
For field 'case_id': Ensure the field is required (not null). Ensure the field matches the type 'string' and is unique across all records.
For field 'case_status': Ensure the field is required (not null). Validate that values in 'case_status' are from the defined set ('open', 'closed', 'pending').
For field 'filing_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Validate that all 'filing_date' values are within the last five years.
For field 'lawyer_id': Ensure this field exists. Validate that 'lawyer_id' corresponds to valid entries in the 'lawyers' table.
For field 'client_email': Ensure the field can be null. If present, validate that it matches the regex pattern '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$'.
For field 'case_notes': Ensure this field exists. Validate that the length of 'case_notes' does not exceed 1000 characters.
For field 'hearing_date': Ensure the field is required (not null). Validate that 'hearing_date' is later than 'filing_date'.
For field 'case_type': Ensure the field is required (not null). Validate that values in 'case_type' match at least one from the predefined list ('criminal', 'civil', 'family').
For field 'evidence_list': Ensure the field can be null. If present, validate that each item in 'evidence_list' is unique.
For field 'settlement_amount': Ensure this field exists. Validate that the average 'settlement_amount' across cases is above a specified minimum value.
For field `user_id`: Ensure values are unique and not null. Ensure the field matches the type 'integer'.
For field `subscription_start_date`: Ensure the field is required (not null) and matches the datetime format 'YYYY-MM-DD'.
For field `genre`: Ensure the column values are distinct and only include values from the set ['Action', 'Drama', 'Comedy', 'Documentary'].
For field `watch_time`: Verify that the average watch time is greater than 0 and less than 500 minutes.
For fields `user_id` and `movie_id`: Ensure their combination is unique across all records.
For field `employee_id`: Ensure the values are unique and not null. Ensure the field matches the type 'string'.
For field `hire_date`: Ensure the field is required (not null) and can be parsed using dateutil.
For field `department`: Ensure the field contains only values from the set ['HR', 'IT', 'Finance', 'Marketing'].
For field `salary`: Verify that the median salary falls within the range of $30,000 to $150,000.
For fields `employee_id` and `email`: Ensure that the combination is unique across all records.
For field `observation_time`: Ensure values match the datetime format 'YYYY-MM-DD HH:MM:SS' and are not null.
For field `temperature`: Ensure the minimum temperature is above -50°C and the maximum temperature is below 60°C.
For field `weather_condition`: Ensure the column contains unique values from the set ['Sunny', 'Rainy', 'Cloudy', 'Snowy'].
For field `humidity`: Validate that the values follow a normal distribution with a mean of 50% and standard deviation of 10%.
For fields `city` and `date`: Ensure the combination is unique across all records.
For field `transaction_id`: Ensure values are unique and not null. Ensure the field matches the type 'string'.
For field `timestamp`: Ensure the field is required (not null) and matches the datetime format 'YYYY-MM-DDTHH:MM:SSZ'.
For field `currency`: Ensure the column values are distinct and only include currencies from the set ['BTC', 'ETH', 'LTC'].
For field `amount`: Verify that the sum of all transactions is greater than $1,000,000.
For fields `sender_address` and `receiver_address`: Ensure their combination is unique across all records.
For field `policy_number`: Ensure values are unique and not null. Ensure the field matches the type 'string'.
For field `effective_date`: Ensure the field is required (not null) and can be parsed using dateutil.
For field `coverage_type`: Ensure the column values are distinct and include only values from the set ['Health', 'Auto', 'Home'].
For field `premium_amount`: Verify that the average premium amount is between $100 and $1,000.
For fields `policy_number` and `claim_number`: Ensure that the combination is unique across all records.
Ensure the `student_id` field contains only unique values. This field must be required (not null). Ensure this field exists.
For field `enrollment_date`: Ensure the field matches the datetime format 'YYYY-MM-DD'. Ensure this field is required (not null).
For field `course_id`: Ensure values in `course_id` are distinct and must exist in the `courses` table. Ensure this field is required (not null).
Verify that the `final_grade` field contains values greater than or equal to 0 and less than or equal to 100. Ensure this field exists.
For the `attendance` JSON field: Validate that it conforms to the specified JSON schema for attendance records. Ensure the field is not null.
Ensure the `email` field contains unique values and matches the email format. Ensure this field is required (not null).
For field `assignment_score`: Verify that the mean score is above 60 and that no values exceed 100. Ensure this field exists.
For columns `start_date` and `end_date`: Ensure that `end_date` is greater than `start_date`. Ensure both fields exist.
Validate that the `student_feedback` field contains valid JSON objects, ensuring all required keys are present as per the defined schema.
Ensure the `course_type` column contains only distinct values matching `['Online', 'In-Person', 'Hybrid']`. Ensure this field exists.
For field `property_id`: Ensure this field is required (not null). Verify that it contains unique values across the dataset.
For field `listing_date`: Ensure values conform to the datetime format 'YYYY-MM-DD'. Ensure this field exists.
Verify that the `price` field contains numeric values greater than zero and that the mean price does not exceed $1,000,000. Ensure this field exists.
Ensure the `property_type` column contains values that must exist in the predefined set `['Apartment', 'House', 'Commercial']`. Ensure this field is required (not null).
For the `amenities` JSON field: Validate that it adheres to the specified JSON schema, ensuring all necessary amenities are listed.
For fields `bedrooms` and `bathrooms`: Ensure that `bedrooms` is less than or equal to `bathrooms` in all records. Ensure both fields exist.
Verify that the `agent_id` field contains unique values and must exist in the `agents` table. Ensure this field is required (not null).
For field `square_footage`: Ensure values are greater than zero and that the maximum square footage does not exceed 10,000. Ensure this field exists.
Ensure that the `status` field only contains values from the set `['Available', 'Pending', 'Sold']`. Ensure this field exists.
For the `inspection_date` field: Ensure values adhere to the datetime format and that they do not precede the `listing_date`. Ensure this field exists.
Ensure the `case_number` field contains unique values and must be required (not null). Ensure this field exists.
For field `filing_date`: Ensure the field matches the datetime format 'YYYY-MM-DD'. This field must be required (not null).
Validate that the `case_status` field contains only distinct values from the set `['Open', 'Closed', 'In Review']`. Ensure this field exists.
For the `plaintiff` JSON field: Ensure it conforms to the specified JSON schema, ensuring all required fields are present and valid.
For fields `case_opened` and `case_closed`: Verify that `case_closed` is later than `case_opened` for all records. Ensure both fields exist.
Ensure the `vehicle_type` column contains only distinct values from the set `['Truck', 'Van', 'Bus']`.
Check that the `delivery_date` column contains dates that are not in the past and are formatted as 'YYYY-MM-DD'.
For the `distance` column, validate that all values are positive integers and do not exceed 1000 kilometers.
Ensure the `status` column contains only values from the set `['Pending', 'In Transit', 'Delivered']`.
Verify that the `tracking_number` column matches the regex pattern `^[A-Z0-9]{10}$` for all entries.
Verify that the `user_id` column contains unique string values that match the regex pattern `^[A-Z0-9]{8}$`.
Ensure the `subscription_start_date` column contains dates formatted as 'MM/DD/YYYY' and are not in the future.
For the `watch_time` column, confirm that the mean value falls within the range of 30 to 120 minutes.
Ensure the `content_type` column consists solely of values from the set `['Movie', 'Series', 'Documentary']`.
Check that the `rating` column has values ranging from 1 to 5, with no duplicates present.
Validate that the `price` column contains values greater than zero and formatted to two decimal places.
Ensure the `product_id` column consists of unique alphanumeric identifiers that match the pattern `^[A-Z]{3}-[0-9]{4}$`.
For the `stock_quantity` column, ensure that all values are integers within the range of 0 to 1000.
Check that the `category` column values are from the set `['Electronics', 'Clothing', 'Home']`.
Ensure the `discount_code` column matches the regex pattern `^[A-Z]{5}-[0-9]{4}$`.
Ensure the `application_date` column contains valid date entries formatted as 'YYYY-MM-DD' and are not older than one year.
Validate that the `status` column has values that match the set `['Approved', 'Pending', 'Rejected']`.
For the `zip_code` column, confirm that all entries match the regex pattern `^\d{5}(-\d{4})?$`.
Check that the `service_type` column consists solely of values from the set `['Healthcare', 'Education', 'Transportation']`.
Ensure the `feedback_score` column contains integer values between 1 and 10, with no missing entries.
Ensure the `voter_id` column consists of unique identifiers matching the regex pattern `^\d{4}-[A-Z]{2}-\d{4}$`.
Validate that the `vote_cast_date` column contains dates formatted as 'DD-MM-YYYY' and are prior to the election date.
For the `candidate_id` column, verify that all values are present in the set of known candidate identifiers.
Check that the `ballot_status` column contains only values from the set `['Received', 'Counted', 'Rejected']`.
Ensure the `region` column matches the regex pattern `^[A-Z][a-z]+(?: [A-Z][a-z]+)*$` and contains no duplicates.
Validate that the `transaction_amount` column contains values within the range of `$0.01` to `$10,000`.
Ensure the `account_type` column contains only values from the set `['Savings', 'Checking', 'Loan']`.
For the `transaction_date` column, verify that all entries conform to the format `YYYY-MM-DD`.
Check that the `account_number` column matches the regular expression pattern `^\d{10}$`.
Ensure that the `interest_rate` column contains values between `0.01` and `0.25`.
Verify that the `customer_id` column has unique values across the dataset.
Confirm that the `transaction_status` column only includes values from the set `['Pending', 'Completed', 'Failed']`.
For the `loan_amount` column, ensure all values are greater than or equal to `$1,000`.
Validate that the `email` column does not match any patterns from the list `['%example.com%', '%test.com%']`.
Check that the `credit_score` column is within the range `300` to `850`.
Ensure that the `patient_id` column contains only distinct values matching the format `^P\d{5}$`.
Verify that the `date_of_birth` column has values that conform to the format `YYYY-MM-DD` and are in the past.
Confirm that the `prescription_date` column contains valid JSON objects that include keys `medication` and `dosage`.
Check that the `insurance_provider` column contains values from the set `['Medicare', 'Medicaid', 'Private']`.
For the `visit_date` column, validate that all entries are within the last 12 months.
Ensure the `symptoms` column has string lengths that do not exceed `255` characters.
Verify that the `blood_pressure` column contains values in the format `systolic/diastolic` and conforms to the pattern `^\d{2,3}/\d{2,3}$`.
Check that the `diagnosis_code` column follows the ICD-10 format and consists of 3 to 7 characters.
Ensure that the `treatment_cost` column contains values that sum to a total expected amount of `$50,000`.
Validate that the `allergy_list` column is a valid JSON array containing strings.
For columns `account_balance` and `transaction_amount`, ensure that `account_balance` is always greater than or equal to `transaction_amount`.
Confirm that the `admission_date` and `discharge_date` columns in the healthcare dataset maintain a consistent order where `admission_date` is earlier than `discharge_date`.
Ensure that the `transaction_type` in the banking dataset matches any of the types defined in the `allowed_transaction_types` JSON array.
Validate that the `prescribed_medications` and `patient_id` columns have unique combinations across records.
For the `payment_due_date` column, check that all dates are greater than or equal to the current date to avoid overdue entries.
Ensure the `employee_id` column contains only distinct integers within the range of 1000 to 9999.
For the `email` field: Validate that all entries conform to the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.
Verify that the `date_of_birth` column contains valid datetime values formatted as `YYYY-MM-DD` and are not greater than the current date.
Ensure the `job_title` column contains only values from the allowed set `['Manager', 'Developer', 'Designer', 'Analyst']`.
For the `salary` column: Confirm that values are within the range of 30000 to 150000 and arranged in increasing order.
Check that the `phone_number` field matches the regex pattern `^\+?\d{10,15}$` and does not contain any spaces.
Ensure the `hire_date` column contains valid datetime entries that are not older than 10 years from the current date.
Validate that the `department` field contains non-empty strings and matches at least one value from the list `['Sales', 'HR', 'IT', 'Finance']`.
For the `employment_status` column: Ensure values are from the set `['Active', 'Inactive', 'Terminated']` and do not include duplicates.
Check that the `performance_rating` column contains values in the range of 1 to 5 and that the average rating is computed accurately.
Ensure the `wallet_address` column contains valid strings matching the regex pattern `^0x[a-fA-F0-9]{40}$`.
For the `transaction_amount` column: Validate that all entries are positive numeric values and do not exceed 10000.
Check that the `timestamp` field contains valid datetime values adhering to the ISO 8601 format and are not in the future.
Verify that the `transaction_type` column contains only values from the set `['Deposit', 'Withdrawal', 'Transfer']`.
Ensure the `block_number` field contains only distinct integers, and all values are greater than 0.
For the `fee` column: Confirm that values are within the range of 0.001 to 0.1 and are arranged in decreasing order.
Check that the `json_data` column contains valid JSON objects that conform to the specified schema.
Validate that the `user_id` field matches the regex pattern `^[0-9]{1,10}$` and does not contain any special characters.
Ensure the `currency` column contains non-empty strings and matches at least one value from the list `['BTC', 'ETH', 'USDT']`.
For the `transaction_id` field: Ensure it matches the regex pattern `^[A-F0-9]{64}$` and is unique across records.
Ensure the `subscriber_id` column contains only distinct integers within the range of 10000 to 99999.
For the `service_plan` field: Validate that all entries conform to the regex pattern `^(Basic|Standard|Premium)$`.
Check that the `activation_date` column contains valid datetime values formatted as `YYYY-MM-DD` and are not in the future.
Ensure the `data_usage` field contains numeric values within the range of 0 to 1000 MB and are arranged in increasing order.
Verify that the `billing_address` field contains non-empty strings that do not exceed 255 characters and follow the required format.
Ensure the `employee_id` column contains unique values that are non-null and formatted as numeric.
For the `salary` field, validate that all values are within the range of $30,000 to $200,000.
Verify that the `hire_date` column contains dates that precede the current date and are formatted as 'YYYY-MM-DD'.
Ensure the `department` column values are from the specified set: `['HR', 'Finance', 'IT', 'Sales']`.
For the `email` field, confirm that all entries match the format specified by the regular expression: `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`.
Ensure the `patient_id` column contains unique values and does not include any null entries.
For the `age` field, validate that all values are integers between 0 and 120.
Verify that the `admission_date` entries are all prior to the `discharge_date` and are formatted as 'YYYY-MM-DD'.
Ensure the `diagnosis_code` column matches values from the set defined in the ICD-10 code list for valid diagnoses.
For the `prescription` field, ensure that the length of string values does not exceed 255 characters.
Ensure the `username` column contains unique values and that no entries are null.
For the `post_length` field, validate that the character counts fall within the range of 0 to 280.
Verify that the `signup_date` is in the past and follows the format 'YYYY-MM-DD'.
Ensure the `country` column values are from the predefined set: `['USA', 'Canada', 'UK', 'Australia']`.
For the `bio` field, ensure that all entries match the specified regular expression pattern: `^.{0,160}$`.
Ensure the `transaction_id` column contains unique identifiers that are non-null and formatted as alphanumeric.
For the `transaction_amount` field, validate that all values are greater than $0 and less than $10,000.
Verify that the `transaction_date` entries are all in the past and follow the 'YYYY-MM-DD' format.
Ensure the `merchant_category` column values are from the specified set: `['Electronics', 'Groceries', 'Clothing', 'Travel']`.
For the `device_id` field, confirm that it matches the format defined by the regular expression: `^[A-F0-9]{16}$`.
Ensure the `device_id` column contains unique values that are non-null and formatted as alphanumeric.
For the `temperature_reading` field, validate that all values fall within the range of -50 to 150 degrees Celsius.
Verify that the `last_active` timestamps are all in the past and are formatted as 'YYYY-MM-DD HH:MM:SS'.
Ensure the `location` column values are from the predefined set: `['Warehouse', 'Factory', 'Office']`.
For the `sensor_status` field, confirm that all entries match the required set: `['active', 'inactive', 'malfunction']`.
Ensure the `product_id` column contains only values present in the `inventory` dataset. Validate that no missing or null values exist.
For the `price` column: Confirm that all values fall within the range of `$1.00` to `$10,000.00`. Flag any outliers.
Validate that the `sku` column contains unique values and matches the regex pattern `^[A-Z0-9]{8}$`.
Ensure the `quantity` column is in decreasing order across the dataset for proper inventory tracking.
For the `category` field: Ensure values are from the predefined set `['Electronics', 'Clothing', 'Home Goods']` and are case-sensitive.
Check that the `discount_percentage` column values fall within the range of `0%` to `100%` and are expressed as integers.
For the `supplier_id` column, ensure all values exist in the `suppliers` dataset and are formatted as integers.
Validate that the `product_name` column does not contain any values matching the regex `.*[0-9].*`, ensuring it only contains letters.
Ensure the `citizen_id` column contains unique values and matches the format `^[0-9]{12}$`.
For the `date_of_birth` column: Validate that all dates are in the format `YYYY-MM-DD` and are before the current date.
Check that the `service_request_status` column only contains values from the set `['Open', 'In Progress', 'Closed']`.
Ensure the `zipcode` column adheres to the regex pattern `^\d{5}(-\d{4})?$`, confirming valid US zip codes.
Validate that the `submission_date` column values are in increasing order, indicating timely processing of requests.
For the `priority_level` column, ensure values are integers within the range of `1` to `5`.
Confirm that the `case_notes` column does not exceed `500` characters in length for brevity and clarity.
Ensure the `property_id` column contains unique values and matches the regex pattern `^[A-Z]{3}-[0-9]{4}$`.
For the `listing_price` column: Validate that all values are within the range of `$50,000` to `$20,000,000`.
Check that the `bedrooms` column contains integer values that are greater than or equal to `1`.
Validate that the `property_type` column only includes values from the set `['Apartment', 'Single Family', 'Commercial']`.
Ensure the `listing_date` column contains dates in the format `MM/DD/YYYY` and are not in the future.
For the `square_footage` column, confirm that values fall within the range of `300` to `50,000` square feet.
Validate that the `address` column does not contain any values matching the regex `.*[^A-Za-z0-9\s,.-].*`, ensuring valid characters.
Ensure the `agent_id` column values exist in the `agents` dataset and are formatted as integers.
For the `start_date` and `end_date` columns, ensure that all `end_date` values are greater than their corresponding `start_date` values.
Validate that the combined values of `property_type` and `listing_price` are unique within the dataset to prevent duplicate listings.
Ensure the `voter_id` column contains only unique values and matches the format 'VOTER-XXXX' where 'XXXX' is a four-digit number.
Verify that the `vote_timestamp` column adheres to the format '%Y-%m-%d %H:%M:%S' and all timestamps are before the election date.
Ensure the `candidate_id` column contains only values from the set `['CAND1', 'CAND2', 'CAND3']`.
Confirm that the `age` of voters is within the range of 18 to 120 years and all entries are integers.
For the `district_code` column, ensure it consists only of distinct values that match the predefined set of district codes.
Verify that the `subscription_start_date` column contains dates in the format '%Y-%m-%d' and is not in the future.
Ensure that the `user_rating` column values fall within the range of 1 to 5, representing the rating scale.
For the `genre` column, ensure values are from the set `['Drama', 'Comedy', 'Documentary']` and are unique.
Check that the average `view_duration` in the `duration` column is above 30 minutes and the standard deviation is below 15 minutes.
Ensure that the `content_id` column contains valid JSON objects that conform to the specified schema for content metadata.
Ensure the `transaction_amount` column values are greater than 0 and do not exceed $10,000.
Verify that the `account_opened_date` column contains dates in the format '%d-%m-%Y' and all entries are before the current date.
Confirm that the `account_type` column contains values only from the set `['Savings', 'Checking', 'Credit']`.
Check that the sum of the `transaction_amount` column is equal to the expected value of $50,000 for the reporting period.
Ensure that the `interest_rate` column values are within the range of 0% to 5% and represent percentages.
Ensure that the `booking_date` column matches the format '%Y-%m-%d' and all dates are in the past.
Verify that the `room_type` column contains only values from the set `['Single', 'Double', 'Suite']`.
For the `guest_count` column, ensure all values are integers and within the range of 1 to 10.
Check the standard deviation of the `price_per_night` column to be below $50, ensuring price consistency.
Ensure the `amenities` column contains valid JSON objects and conforms to the specified schema for hotel amenities.
Ensure the `post_status` column contains only values from the set `['Draft', 'Published', 'Archived']`.
Verify that the `published_date` column adheres to the format '%Y-%m-%d' and is not a future date.
For the `tags` column, ensure it contains unique tags that are in the predefined set of valid tags.
Confirm that the average `read_time` in the `content_length` column does not exceed 15 minutes.
Check that the `author_id` column values are unique and correlate with existing entries in the `authors` table, ensuring validity across records.
Ensure the `status` column contains only distinct values matching `['Active', 'Inactive', 'Pending']`.
Verify that the `submission_date` column values adhere to the format `'%Y-%m-%d'` and can be parsed correctly using dateutil.
Ensure the `age` column values are between 18 and 120 and are arranged in increasing order.
For the `budget` column: Verify that the mean value falls within the range of $100,000 to $1,000,000 and that the standard deviation does not exceed $50,000.
Ensure that the `zip_code` column contains valid postal codes that match the regex pattern `^\d{5}(-\d{4})?$`.
Verify that the `project_start_date` and `project_end_date` columns contain dates where `project_end_date` is always after `project_start_date`.
Ensure the `funding_source` column contains only values from the set `['Federal', 'State', 'Local', 'Private']`.
Check the `citizen_feedback` JSON column to confirm it adheres to the specified schema, including fields `['rating', 'comments']`.
Ensure the `employee_status` column contains only distinct values matching `['Active', 'Terminated', 'On Leave']`.
Verify that the `hire_date` column values are in the correct datetime format `'%Y-%m-%d %H:%M:%S'` and can be parsed using dateutil.
Ensure the `salary` column values are within the range of $30,000 to $250,000 and are arranged in descending order.
For the `performance_score` column: Verify that the median score is above 3.5 and that the maximum does not exceed 5.
Ensure the `department_id` column contains values that exist in the set of valid department IDs from the `departments` table.
Check that the `last_performance_review` column values are dates in the past and follow the format `'%Y-%m-%d'`.
Verify that the `benefits` JSON column contains valid entries, including fields `['health', 'dental', 'vision']`.
Ensure the `threat_level` column contains only distinct values matching `['Low', 'Medium', 'High']`.
Verify that the `incident_date` column values adhere to the format `'%Y-%m-%d %H:%M:%S'` and can be parsed correctly using dateutil.
Ensure the `response_time` column values are within the range of 0 to 120 minutes and are arranged in increasing order.
For the `alert_severity` column: Verify that the unique value count is consistent with the expected severity levels of `['Critical', 'High', 'Medium', 'Low']`.
Ensure the `ip_address` column contains valid IP addresses that match the regex pattern `^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`.
Verify that the `vulnerability_score` column's mean is below 7, ensuring alignment with organizational risk thresholds.
Ensure the `incident_report` JSON column follows the specified schema, including fields `['description', 'timestamp', 'affected_systems']`.
Ensure the data file exists and matches the specified hash value `abc1234567890`.
Verify that the line count in the file does not exceed 1,000 and that it contains valid table headers.
Ensure that the JSON file is properly formatted and validates against the defined schema, with no missing required fields.
Ensure the `student_id` column contains string values matching the pattern `^[A-Z]{3}-[0-9]{4}$` and that all values are unique.
For the `enrollment_date` field, validate that all dates conform to the format `YYYY-MM-DD` and that they fall within the range of `2010-01-01` to `2023-12-31`.
For the `course_code` field, ensure it follows the regex pattern `^C[0-9]{3}$` and that no values are null.
Ensure the `final_grade` column contains numeric values within the range of `0` to `100`. Verify that the mean grade is greater than `60`.
In the `feedback` column, ensure that the string length is between `10` and `500` characters and that no feedback contains the word `fail`.
For the `release_date` column, validate that all dates are in the `MM/DD/YYYY` format and check that no future dates are present.
Ensure the `game_title` field contains string values with lengths between `1` and `100` characters and does not contain special characters.
For the `rating` column, confirm that values are either `E`, `T`, or `M` and that the distinct count of ratings matches the expected set.
In the `platform` field, ensure all entries are from the allowed set `['PC', 'Xbox', 'PlayStation']` and that there are no null values.
For the `user_reviews` column, ensure that JSON objects conform to the specified schema, including keys `reviewer` and `comment`.
Validate that the `consumption_date` column contains dates in the `YYYY-MM-DD` format and that all dates are within the last `12` months.
For the `meter_reading` column, ensure that all values are positive integers and that the sum of readings matches the expected total for the billing period.
Ensure the `customer_id` field has a unique 8-character alphanumeric pattern matching `^[A-Z0-9]{8}$`.
In the `usage_type` column, check that the values are limited to `['Residential', 'Commercial', 'Industrial']` and that no invalid entries exist.
For the `billing_amount` column, validate that the average value is within the range of `$50` to `$500`.
For the `product_sku` column, ensure all values match the regex pattern `^[A-Z]{2}-[0-9]{5}$` and that each SKU is unique.
Check the `stock_quantity` field to confirm that all values are non-negative integers and that the maximum value does not exceed `1000`.
Validate that the `expiration_date` field contains valid dates in the format `YYYY-MM-DD` and that all dates are greater than today’s date.
In the `category` column, ensure that values belong to the predefined list `['Electronics', 'Clothing', 'Home']` and that there are no duplicates.
For the `supplier_info` field, ensure it contains valid JSON and that the required fields `name` and `contact` are present.
Ensure the `username` field contains only alphanumeric characters and is between `3` and `15` characters in length.
For the `post_date` column, validate that all dates conform to the `DD/MM/YYYY` format and that they are not in the future.
In the `likes_count` column, check that all values are non-negative integers and that the average number of likes exceeds `100`.
For the `comment` field, ensure string lengths are between `1` and `250` characters and that comments do not contain any offensive language.
Validate that the `user_id` column contains unique values matching the pattern `^[0-9]{10}$` and that no null entries are present.
For field 'consumption_date': Ensure the field matches the datetime format 'YYYY-MM-DD'. Validate that all datetime values can be parsed using dateutil.
For field 'meter_id': Ensure the field matches the type 'text'. Validate that all meter IDs are alphanumeric and do not exceed 10 characters in length.
For field 'energy_type': Ensure that the column values match at least one pattern from the list ['Electricity', 'Gas', 'Water']. Ensure this field exists.
For field 'usage_amount': Validate that the mean usage amount falls within the range of 0 to 10000 and that the standard deviation does not exceed 2000.
For field 'billing_period': Ensure the field matches the JSON schema defining 'start_date' and 'end_date' as required fields with correct datetime formats.
For field 'user_email': Ensure the field matches the type 'text'. Validate that all email addresses conform to the standard email regex pattern.
For field 'subscription_start': Ensure the field matches the datetime format 'YYYY-MM-DD'. Validate that all dates represent past or current dates.
For field 'content_id': Ensure values in (content_id) must exist in the dataset of available content IDs. Ensure this field exists.
For field 'watch_time': Validate that the total watch time for each user is a non-negative integer and that the average watch time does not exceed 300 minutes.
For field 'genre': Ensure that the column values do not match any pattern from the list ['Adult', 'Horror']. Validate that all genres are within the predefined set of valid genres.
For field 'player_id': Ensure the field matches the type 'text'. Validate that player IDs are unique and conform to the pattern 'P[0-9]{5}'.
For field 'match_date': Ensure the field matches the datetime format 'YYYY-MM-DD HH:MM:SS'. Validate that all match dates are in the future.
For field 'score': Validate that the maximum score in the dataset does not exceed 200 and that the mean score is above 50.
For field 'team_name': Ensure values in (team_name) must exist in the dataset of registered teams. Confirm that no team names are null.
For field 'player_statistics': Ensure the field is a valid JSON object conforming to the schema defining 'goals', 'assists', and 'minutes_played' as required fields.
For field 'device_id': Ensure the field matches the type 'text'. Validate that device IDs are alphanumeric and do not exceed 15 characters.
For field 'last_active': Ensure the field matches the datetime format 'YYYY-MM-DDTHH:MM:SSZ'. Validate that all datetime values can be parsed using dateutil.
For field 'sensor_reading': Validate that the median sensor reading falls within the range of 0 to 100 and that the unique value count is appropriate.
For field 'device_type': Ensure column values match at least one pattern from the list ['Temperature', 'Humidity', 'Pressure'].
For field 'configuration': Ensure the field is a valid JSON object conforming to the schema defining 'firmware_version' and 'settings' as required fields.
For field 'customer_id': Ensure the field matches the type 'text'. Validate that customer IDs are unique and match the regex pattern 'CUST[0-9]{6}'.
For field 'contact_date': Ensure the field matches the datetime format 'YYYY-MM-DD'. Validate that all contact dates are within the last 5 years.
For field 'customer_feedback': Ensure the field matches the type 'text'. Validate that the length of feedback does not exceed 500 characters.
For field 'purchase_amount': Validate that the sum of purchase amounts for each customer is a positive value and that the average does not exceed $1000.
For field 'customer_segment': Ensure that column values do not match any pattern from the list ['Inactive', 'Fraudulent']. Validate that all segments are within the predefined set of valid segments.
For field 'policy_number': Ensure the field matches the type 'text'. Validate that all values conform to the pattern of a 10-digit numeric string.
For field 'claim_date': Ensure this field is not null. Validate that all date entries conform to the format 'YYYY-MM-DD' and are in the past.
Ensure the 'premium_amount' column values are greater than zero and match the type 'float'.
For field 'insured_person_age': Validate that all values are integers between 18 and 100.
For field 'policy_type': Ensure the field matches the type 'text'. Validate that values belong to the set ['Life', 'Health', 'Auto', 'Home'].
For field 'service_request_date': Ensure all entries conform to the datetime format 'MM/DD/YYYY HH:MM' and are not in the future.
Ensure the 'citizen_id' column contains distinct values and matches the pattern '^[A-Z]{2}\d{6}$' for state and unique identifier.
For field 'feedback_score': Validate that all values are integers between 1 and 5.
For field 'department_code': Ensure values match the pattern '^[A-Z]{3}-\d{2}$' and that they exist in the predefined department list.
Validate that the 'address' field does not match any pattern from the list ['PO Box', 'Temporary Address'].
For field 'case_number': Ensure the field matches the type 'text'. Validate that all case numbers follow the format 'YYYY-XXX-0001'.
Ensure the 'filing_date' entries conform to the format 'YYYY-MM-DD' and are not later than the current date.
For field 'case_status': Ensure values are from the predefined list ['Open', 'Closed', 'Pending', 'Dismissed'].
For field 'court_location': Validate that strings do not exceed 50 characters and match the pattern '^[A-Za-z\s]+$'.
For fields 'plaintiff_id' and 'defendant_id': Ensure these columns contain unique values and validate that they exist in the 'participants' table.
For field 'transaction_id': Ensure this field is required (not null). Validate that all IDs are unique and match the pattern 'TXN-\d{7}$'.
Ensure the 'transaction_amount' values are greater than zero and pass the Kolmogorov-Smirnov test with a p-value above 0.05.
For field 'ip_address': Validate that all entries conform to the standard IPv4 format and do not match any entries from the blacklist.
For the 'transaction_date' field: Ensure all dates match the format 'YYYY-MM-DD' and fall within the last 24 months.
Ensure the combined values of 'transaction_amount' and 'transaction_fee' equal the 'total_amount' for each record.
For field 'temperature': Validate that all temperature values are within the range of -50 to 50 degrees Celsius and match the type 'float'.
For field 'forecast_date': Ensure all entries conform to the datetime format 'YYYY-MM-DD' and are not in the future.
For field 'humidity_level': Validate that all percentage values are integers between 0 and 100.
For multi-column validation of 'city_name' and 'forecast_value': Ensure that combinations of these columns are unique across records.
Ensure that the 'json_weather_data' field contains valid JSON objects and conforms to the specified JSON schema for weather reports.