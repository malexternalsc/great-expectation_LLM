{"user_prompt":"Check that the `threat_level` column has values that are either 'Low', 'Medium', or 'High', ensuring uniqueness.","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_level\", value_set=[\"Low\", \"Medium\", \"High\"]),expect_column_values_to_be_unique(column=\"threat_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'appointment_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure this field does not accept future dates.","generated_expectations":"expect_column_values_to_not_be_null(column=\"appointment_date\"),expect_column_values_to_be_of_type(column=\"appointment_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"appointment_date\", min_value=\"1900-01-01\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'group_id': Ensure the field can be null. Ensure the field matches the type 'numeric'. Validate that all group IDs, if present, are unique and range from 1 to 10,000.","generated_expectations":"expect_column_values_to_be_null(column=\"group_id\"),expect_column_values_to_be_of_type(column=\"group_id\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"group_id\", min_value=1, max_value=10000),expect_column_values_to_be_unique(column=\"group_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the table has at least 30 rows, representing daily weather forecasts for a month. Each row must have a corresponding `location`.","generated_expectations":"expect_table_row_count_to_be_between(min_value=30, max_value=None),expect_column_to_exist(column=\"location\"),expect_column_values_to_not_be_null(column=\"location\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the distribution of `attendance` percentages passes the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"attendance\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `product_sku` column, ensure all values match the regex pattern `^[A-Z]{2}-[0-9]{5}$` and that each SKU is unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"product_sku\", regex=r\"^[A-Z]{2}-[0-9]{5}$\"),expect_column_values_to_be_unique(column=\"product_sku\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `length_of_stay` column contains integer values that are greater than or equal to 1.","generated_expectations":"expect_column_values_to_be_of_type(column=\"length_of_stay\", type_=\"int\"),expect_column_values_to_be_between(column=\"length_of_stay\", min_value=1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `engagement_rate` column values are between 0 and 1 and calculated as the ratio of interactions to impressions.","generated_expectations":"expect_column_values_to_be_between(column=\"engagement_rate\", min_value=0, max_value=1),expect_multicolumn_sum_to_equal(column_A=\"interactions\", column_B=\"impressions\", sum_value=1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `match_date` column, check that all dates are formatted as 'MM-DD-YYYY' and can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"match_date\", strftime_format=\"%m-%d-%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"match_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the mean of the `claims_per_policy` column is less than or equal to 3, indicating a reasonable claims ratio.","generated_expectations":"expect_column_mean_to_be_between(column=\"claims_per_policy\", min_value=None, max_value=3)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_type` field: Ensure the values belong to the set `['Residential', 'Commercial', 'Industrial']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"property_type\", value_set=['Residential', 'Commercial', 'Industrial'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `report_date`, ensure the values are not in the future and are formatted as 'MM-DD-YYYY'.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"report_date\"),expect_column_values_to_match_strftime_format(column=\"report_date\", strftime_format=\"%m-%d-%Y\"),expect_column_values_to_be_in_set(column=\"report_date\", value_set=[date for date in pd.date_range(start='1900-01-01', end=pd.Timestamp.now())])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_collection_method': Ensure the field is required (not null). Ensure values in 'data_collection_method' must exist in the set ('survey', 'experiment', 'observation').","generated_expectations":"expect_column_values_to_not_be_null(column=\"data_collection_method\"),expect_column_values_to_be_in_set(column=\"data_collection_method\", value_set=[\"survey\", \"experiment\", \"observation\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'last_active': Ensure the field matches the type 'datetime'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"last_active\", type_=\"datetime\"),expect_column_values_to_not_be_null(column=\"last_active\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For file 'sales_data.csv': Ensure the file exists. Ensure the file size is within the range of 1KB to 10MB. Ensure the first line contains valid CSV headers.","generated_expectations":"expect_file_to_exist(file_path=\"sales_data.csv\"),expect_file_size_to_be_between(file_path=\"sales_data.csv\", min_size=1024, max_size=10485760),expect_file_to_have_valid_table_header(file_path=\"sales_data.csv\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'forecast_id': Ensure the field matches the type 'text'. Verify that all values are unique and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"forecast_id\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"forecast_id\"),expect_column_values_to_be_unique(column=\"forecast_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'result_json': Ensure all entries in 'result_json' are valid JSON objects and conform to the specified JSON schema for results.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"result_json\"),expect_column_values_to_match_json_schema(column=\"result_json\", schema=\"specified_json_schema\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'warehouse_location': Ensure the field matches the type 'text'. Validate that (warehouse_location) does not contain any SQL-like patterns from a predefined disallowed list.","generated_expectations":"expect_column_values_to_be_of_type(column=\"warehouse_location\", type_=\"text\"),expect_column_values_to_not_match_regex_list(column=\"warehouse_location\", regex_list=[\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"--\", \";\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'job_title': Ensure values in (job_title) must exist in the list ['Manager', 'Developer', 'Designer']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"job_title\"),expect_column_values_to_be_in_set(column=\"job_title\", value_set=['Manager', 'Developer', 'Designer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `last_updated` column: Confirm that all entries are in the correct datetime format and represent timestamps in the last 30 days.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"last_updated\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"last_updated\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'description': Ensure the field matches the type 'text'. Validate that the length does not exceed 1000 characters and does not contain any SQL-like patterns. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"description\"),expect_column_values_to_be_of_type(column=\"description\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"description\", min_value=0, max_value=1000),expect_column_values_to_not_match_regex(column=\"description\", regex=r\".*(SELECT|INSERT|UPDATE|DELETE|DROP|WHERE|;).*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `measurement_value` field: Validate that values are within the range of -100 to 100 and are of type 'float'.","generated_expectations":"expect_column_values_to_be_between(column=\"measurement_value\", min_value=-100, max_value=100),expect_column_values_to_be_of_type(column=\"measurement_value\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `sku` column values conform to the regular expression pattern `^[A-Z0-9]{8}$` to ensure proper SKU formatting.","generated_expectations":"expect_column_values_to_match_regex(column=\"sku\", regex=r\"^[A-Z0-9]{8}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `special_requests` column contains valid JSON objects and conforms to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"special_requests\"),expect_column_values_to_match_json_schema(column=\"special_requests\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `grade` column values are between 0 and 100 and that no null values are present.","generated_expectations":"expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"grade\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'inventory': Ensure the columns match the specified order ('product_id', 'product_name', 'stock_quantity', 'price').","generated_expectations":"expect_table_columns_to_match_ordered_list(column_list=[\"product_id\", \"product_name\", \"stock_quantity\", \"price\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sensor_status` field, validate that values must be either 'active' or 'inactive'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"sensor_status\"),expect_column_values_to_be_in_set(column=\"sensor_status\", value_set=[\"active\", \"inactive\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `listing_date` values are formatted as 'YYYY-MM-DD' and are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"listing_date\")  # This ensures they are valid dates,# Additional check for future dates would require a custom implementation as it is not covered by the listed expectations.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `user_id`: Ensure the field matches the type 'string'. Ensure all values in `user_id` are unique and not null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"user_id\", type_=\"string\"),expect_column_values_to_not_be_null(column=\"user_id\"),expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `view_count` column contains non-negative integers and is sorted in descending order.","generated_expectations":"expect_column_values_to_be_between(column=\"view_count\", min_value=0),expect_column_values_to_be_decreasing(column=\"view_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `application_date` and `approval_date`, confirm that `approval_date` must be later than `application_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"approval_date\", column_B=\"application_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `transaction_date` column: Ensure all entries are in 'YYYY-MM-DD' format and that there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"transaction_date\"),expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `filing_date` column: Ensure all datetime entries match the format `%Y-%m-%d` and are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"filing_date\")  # To ensure valid datetime entries,# Additionally, you would need a custom expectation to check for future dates since it's not in the accepted expectations.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `court_date` is greater than the `filing_date` for all records and both columns are of type 'datetime'.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"court_date\", column_B=\"filing_date\"),expect_column_values_to_be_of_type(column=\"court_date\", type_=\"datetime\"),expect_column_values_to_be_of_type(column=\"filing_date\", type_=\"datetime\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `amount` column values are within the range of 0.0001 to 10000 and are positive.","generated_expectations":"expect_column_values_to_be_between(column=\"amount\", min_value=0.0001, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `employee_id` field: Ensure that all values are unique and fall within the specified set of valid employee IDs.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\"),expect_column_values_to_be_in_set(column=\"employee_id\", value_set=valid_employee_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the total count of emails in the `emails` table equals the count of unique addresses in the `recipients` column.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"emails\", column_B=\"recipients\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sender_id` and `receiver_id` columns: Ensure that each ID in `sender_id` exists in the `users` table and is unique across records.","generated_expectations":"expect_column_values_to_be_unique(column=\"sender_id\"),expect_select_column_values_to_be_unique_within_record(column=\"sender_id\"),expect_column_values_to_be_in_set(column=\"sender_id\", value_set=users_table_ids),expect_column_values_to_be_unique(column=\"receiver_id\"),expect_select_column_values_to_be_unique_within_record(column=\"receiver_id\"),expect_column_values_to_be_in_set(column=\"receiver_id\", value_set=users_table_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `likes` and `shares`: Ensure the sum of `likes` and `shares` does not exceed `engagement_score`. Ensure all fields are of type 'integer' and not null.","generated_expectations":"expect_column_pair_values_A_to_be_less_than_B(column_A=\"likes\", column_B=\"engagement_score\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"shares\", column_B=\"engagement_score\"),expect_column_values_to_be_of_type(column=\"likes\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"likes\"),expect_column_values_to_be_of_type(column=\"shares\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"shares\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `employee_id` column has distinct values and all fall within the range of 1 to 5000.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\"),expect_column_values_to_be_between(column=\"employee_id\", min_value=1, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `metadata` column contains valid JSON objects that adhere to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"metadata\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `email` field: Ensure it follows a valid email format and contains unique values. Confirm the field is required.","generated_expectations":"expect_column_to_exist(column=\"email\"),expect_column_values_to_not_be_null(column=\"email\"),expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_be_unique(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_type` column contains only distinct values matching `['Residential', 'Commercial', 'Industrial']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"property_type\", value_set=['Residential', 'Commercial', 'Industrial'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `billing_amount` column: Ensure the sum is less than or equal to 5000 and the average is between 50 and 200.","generated_expectations":"expect_column_sum_to_be_between(column=\"billing_amount\", min_value=None, max_value=5000),expect_column_mean_to_be_between(column=\"billing_amount\", min_value=50, max_value=200)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `policy_number` field: Ensure all entries are unique and formatted as 'INS-XXXXXX'. Validate that this field does not contain any null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_not_be_null(column=\"policy_number\"),expect_column_values_to_match_regex(column=\"policy_number\", regex=r\"^INS-\\d{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'metadata': Ensure the field contains valid JSON objects and that parsing does not raise exceptions.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"metadata\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `score` column contains integer values only and that they are greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"score\", type_=\"int\"),expect_column_values_to_be_between(column=\"score\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_date` column values are monotonically increasing.","generated_expectations":"expect_column_values_to_be_increasing(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `consumption` values are within the range of `0` to `5000` kilowatt-hours.","generated_expectations":"expect_column_values_to_be_between(column=\"consumption\", min_value=0, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'registration_date': Ensure the expect column to exist; Ensure this field matches the type 'date' and contains values less than or equal to the current date.","generated_expectations":"expect_column_to_exist(column=\"registration_date\"),expect_column_values_to_be_of_type(column=\"registration_date\", type_=\"date\"),expect_column_values_to_be_less_than_or_equal_to(column=\"registration_date\", value=current_date)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email': Validate that all email addresses conform to the pattern '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'price': Ensure the field matches the type 'decimal'. Ensure values in (price) are greater than 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"price\"),expect_column_values_to_be_of_type(column=\"price\", type_=\"decimal\"),expect_column_values_to_be_greater_than(column=\"price\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `view_count`: Ensure the field matches the type 'integer'. Validate that all values are non-negative and adhere to the expected distribution parameters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"view_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"view_count\", min_value=0),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"view_count\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'location': Ensure the field contains no missing values. Ensure it matches the type 'text' and includes valid location identifiers.","generated_expectations":"expect_column_values_to_not_be_null(column=\"location\"),expect_column_values_to_be_of_type(column=\"location\", type_=\"text\"),expect_column_values_to_match_regex(column=\"location\", regex=r\"^[A-Za-z\\s]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `quantity_sold` column has a minimum value of 1 and a maximum value of 1000.","generated_expectations":"expect_column_min_to_be_between(column=\"quantity_sold\", min_value=1),expect_column_max_to_be_between(column=\"quantity_sold\", max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_email` field: Ensure all entries conform to the valid email format and do not match entries in the `blacklist` table.","generated_expectations":"expect_column_values_to_match_regex(column=\"user_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\"),expect_column_values_to_not_match_regex(column=\"user_email\", regex=r\"blacklist_regex_pattern\") ","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'team_name': Ensure the field is required (not null). Ensure values in 'team_name' must exist in the predefined set of team names.","generated_expectations":"expect_column_values_to_not_be_null(column=\"team_name\"),expect_column_values_to_be_in_set(column=\"team_name\", value_set=predefined_team_names)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the 'transaction_date' column adheres to the datetime format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_role` column contains only the values `['Admin', 'User']` with no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=[\"Admin\", \"User\"]),expect_column_values_to_be_unique(column=\"user_role\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'voter_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"voter_id\"),expect_column_values_to_not_be_null(column=\"voter_id\"),expect_column_values_to_be_of_type(column=\"voter_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the column combination of `election_id` and `voter_id`: Ensure the values are unique across records.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"election_id\", column_B=\"voter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'registration_date': Ensure the expect column values to be unique; Ensure this field matches the type 'date' and contains values less than or equal to the current date.","generated_expectations":"expect_column_values_to_be_unique(column=\"registration_date\"),expect_column_values_to_be_of_type(column=\"registration_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"registration_date\", min_value=None, max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `team_score` column values are consistently greater than the `opponent_score` column for winning games.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"team_score\", column_B=\"opponent_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'contact_email': Ensure all email values conform to the pattern '^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$' and have no missing values.","generated_expectations":"expect_column_values_to_match_regex(column=\"contact_email\", regex=r\"^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$\"),expect_column_values_to_not_be_null(column=\"contact_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'game_details': Ensure the column 'release_date' exists. Ensure the values in 'release_date' are in the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_to_exist(column=\"release_date\"),expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email` column contains only unique values and adheres to the format of a valid email address.","generated_expectations":"expect_column_values_to_be_unique(column=\"email\"),expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `course_feedback` column has unique values that match the set `['Excellent', 'Good', 'Average', 'Poor']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"course_feedback\", value_set=['Excellent', 'Good', 'Average', 'Poor']),expect_column_values_to_be_unique(column=\"course_feedback\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `order_id` column consists of unique values and is of type 'string'. No null values should be allowed.","generated_expectations":"expect_column_values_to_be_unique(column=\"order_id\"),expect_column_values_to_be_of_type(column=\"order_id\", type_=\"string\"),expect_column_values_to_not_be_null(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `tracking_number` column contains unique values formatted as valid JSON strings.","generated_expectations":"expect_column_values_to_be_unique(column=\"tracking_number\"),expect_column_values_to_be_json_parseable(column=\"tracking_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sample_size': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure 'sample_size' is within the range of 30 to 1000.","generated_expectations":"expect_column_values_to_not_be_null(column=\"sample_size\"),expect_column_values_to_be_of_type(column=\"sample_size\", type_=\"int\"),expect_column_values_to_be_between(column=\"sample_size\", min_value=30, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'file_size': Ensure this field is required (not null). Ensure the 'file_size' falls within the defined range [1KB, 10MB]. Ensure this field matches the type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"file_size\"),expect_column_values_to_be_between(column=\"file_size\", min_value=1024, max_value=10485760),expect_column_values_to_be_of_type(column=\"file_size\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `student_feedback` column contains valid JSON objects that conform to the schema: {'course_id': 'string', 'comments': 'string'}.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"student_feedback\", schema={'course_id': 'string', 'comments': 'string'})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `weather_condition` column only contains values from the predefined list `['Sunny', 'Cloudy', 'Rain', 'Snow']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"weather_condition\", value_set=['Sunny', 'Cloudy', 'Rain', 'Snow'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_id` column contains unique values across all records in the dataset.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `temperature` column values are within the range of `-50` to `50` degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `location` column does not contain any missing values and is of type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"location\"),expect_column_values_to_be_of_type(column=\"location\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'enrollment_date': Ensure that this date field contains no missing values and that all dates are in the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"enrollment_date\"),expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `release_date` column contains dates that are in the past and arranged in chronological order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"release_date\"),expect_column_values_to_be_between(column=\"release_date\", min_value=\"1900-01-01\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `call_type` column contains only values from the specified set `['Incoming', 'Outgoing']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"call_type\", value_set=['Incoming', 'Outgoing'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'warehouse_location': Ensure the field matches the type 'text'. Ensure the field does not exceed 100 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"warehouse_location\"),expect_column_value_lengths_to_be_between(column=\"warehouse_location\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"warehouse_location\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `product_ids` column contains valid JSON arrays adhering to the specified JSON schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"product_ids\", schema=your_json_schema_here)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'player_age': Validate that the mean age of players in the dataset is between 20 and 35 years.","generated_expectations":"expect_column_mean_to_be_between(column=\"player_age\", min_value=20, max_value=35)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `attendance_rate` column values are between 0 and 100, ensuring valid percentage representation.","generated_expectations":"expect_column_values_to_be_between(column=\"attendance_rate\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `product_category` field: Ensure all entries match the set `['Electronics', 'Furniture', 'Clothing']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"product_category\", value_set=['Electronics', 'Furniture', 'Clothing'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'special_requests': Ensure the field matches the type 'text'. Validate that the length of 'special_requests' is not more than 250 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"special_requests\"),expect_column_values_to_be_of_type(column=\"special_requests\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"special_requests\", min_value=0, max_value=250)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `policy_type` column only contains values from the set `['Life', 'Health', 'Auto', 'Home']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"policy_type\", value_set=['Life', 'Health', 'Auto', 'Home'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_type` column matches the defined set `['House', 'Condo', 'Apartment']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"property_type\", value_set=['House', 'Condo', 'Apartment'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `reservations` table is equal to the number of rows in the `guests` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"reservations\", other_table=\"guests\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `carrier` column contains values only from the set `['FedEx', 'UPS', 'DHL']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"carrier\", value_set=['FedEx', 'UPS', 'DHL'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `alert_level` column contains valid values within the set `['Low', 'Medium', 'High']` and is not null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"alert_level\", value_set=['Low', 'Medium', 'High']),expect_column_values_to_not_be_null(column=\"alert_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `temperature_reading` column: Ensure values are within the range of -50 to 150 degrees Celsius. Validate that there are no missing values.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature_reading\", min_value=-50, max_value=150),expect_column_values_to_not_be_null(column=\"temperature_reading\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `description` field does not exceed 255 characters and contains no HTML tags.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"description\", min_value=0, max_value=255),expect_column_values_to_not_match_regex(column=\"description\", regex=r\"<[^>]*>\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `comment` field: Ensure values do not match the regex pattern `.*(spam|advertisement).*`.","generated_expectations":"expect_column_values_to_not_match_regex(column=\"comment\", regex=r\".*(spam|advertisement).*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `subscription_type` column can only contain the values 'Free', 'Basic', 'Premium' and has no missing values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"subscription_type\", value_set=[\"Free\", \"Basic\", \"Premium\"]),expect_column_values_to_not_be_null(column=\"subscription_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'temperature_reading': Ensure this field exists. Ensure the field matches the type 'decimal'. Ensure values in 'temperature_reading' are within the range of -50 to 150.","generated_expectations":"expect_column_to_exist(column=\"temperature_reading\"),expect_column_values_to_be_of_type(column=\"temperature_reading\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"temperature_reading\", min_value=-50, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `price` column values are within the range of $50,000 to $5,000,000.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=50000, max_value=5000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the sum of the `battery_level` column does not fall below 20% across all devices.","generated_expectations":"expect_column_sum_to_be_between(column=\"battery_level\", min_value=20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `stock_level` field, ensure that it contains integer values only and does not allow negative numbers.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_level\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_level\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_type` column contains only distinct values matching `['Deposit', 'Withdrawal', 'Transfer']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=['Deposit', 'Withdrawal', 'Transfer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ip_address` field contains only unique values and adheres to the valid IPv4 format.","generated_expectations":"expect_column_values_to_be_unique(column=\"ip_address\"),expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `release_date` field: Ensure values conform to the format '%Y-%m-%d'. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `filing_date` column contains dates in the format 'MM\/DD\/YYYY' and are not future dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_in_set(column=\"filing_date\", value_set=[date for date in range(datetime.now().year)])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'court_name': Ensure values match the regex for valid court names. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_not_be_null(column=\"court_name\"),expect_column_values_to_match_regex(column=\"court_name\", regex=r\"^[\\w\\s]+ Court$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `timestamp` column matches the 'YYYY-MM-DDTHH:MM:SSZ' format and can be parsed into valid datetime objects.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%SZ\"),expect_column_values_to_be_dateutil_parseable(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'booking_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field contains unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"booking_id\"),expect_column_values_to_be_of_type(column=\"booking_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"booking_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'battery_level': Ensure that values in 'battery_level' are within the range of 0 to 100. Ensure that this field exists and is not null.","generated_expectations":"expect_column_to_exist(column=\"battery_level\"),expect_column_values_to_not_be_null(column=\"battery_level\"),expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `status` column values are from the set `['Open', 'Closed', 'In Progress']` and do not contain any other values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Open', 'Closed', 'In Progress']),expect_column_values_to_not_be_in_set(column=\"status\", value_set=['Open', 'Closed', 'In Progress'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_name` column has a length of at least 3 characters and no more than 50 characters to maintain consistency.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"product_name\", min_value=3, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'doctor_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure all doctor IDs are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"doctor_id\"),expect_column_values_to_be_of_type(column=\"doctor_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"doctor_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_date` column contains dates formatted as `MM\/DD\/YYYY`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%m\/%d\/%Y\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'json_data': Ensure values in (json_data) are valid JSON objects and conform to the specified JSON schema. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"json_data\"),expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `patient_id` column contains unique values and matches the set of existing patient identifiers.","generated_expectations":"expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_be_in_set(column=\"patient_id\", value_set=existing_patient_identifiers)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `temperature` column values are within the range of -50 to 50 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `check_in_date` is earlier than the `check_out_date` for all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"check_in_date\", column_B=\"check_out_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields 'incident_date' and 'resolution_date': Ensure resolution_date is greater than incident_date.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"resolution_date\", column_B=\"incident_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `view_count` column has values greater than or equal to 0 and does not include any null entries.","generated_expectations":"expect_column_values_to_be_between(column=\"view_count\", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=\"view_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'amount': Ensure the field is required (not null). Validate that the field matches the type 'decimal' and that values fall within the range [0.001, 1000000].","generated_expectations":"expect_column_values_to_not_be_null(column=\"amount\"),expect_column_values_to_be_of_type(column=\"amount\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"amount\", min_value=0.001, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category': Ensure the field contains only distinct values from the list ['News', 'Blog', 'Tutorial']. Validate there are no missing values.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"category\", value_set=[\"News\", \"Blog\", \"Tutorial\"]),expect_column_values_to_not_be_null(column=\"category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `course_start_date` is always earlier than the `course_end_date` for all entries in the `courses` table.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"course_start_date\", column_B=\"course_end_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `sample_size` column contains integer values that are greater than `30` and that the average sample size does not exceed `500`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"sample_size\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"sample_size\", value=30),expect_column_mean_to_be_between(column=\"sample_size\", min_value=None, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_plan` column contains only distinct values matching ['Basic', 'Standard', 'Premium'].","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"service_plan\", value_set=[\"Basic\", \"Standard\", \"Premium\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'property_id': Ensure the field is required (not null). Ensure the field contains only unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_unique(column=\"property_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `square_footage` field is of type integer and does not contain any missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"square_footage\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"square_footage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'research_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field is unique for each research study.","generated_expectations":"expect_column_values_to_not_be_null(column=\"research_id\"),expect_column_values_to_be_of_type(column=\"research_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"research_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `signup_date` field contains only valid datetime entries formatted as 'YYYY-MM-DD'. Ensure there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"signup_date\"),expect_column_values_to_match_strftime_format(column=\"signup_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"signup_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `service_request` table: Validate that the `status` column contains only values from the set `['Open', 'In Progress', 'Closed']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Open', 'In Progress', 'Closed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `hire_date` column values are formatted as `'YYYY-MM-DD'` and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `game_title` column contains unique values with a maximum length of 100 characters. It should not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"game_title\"),expect_column_value_lengths_to_be_between(column=\"game_title\", min_value=1, max_value=100),expect_column_values_to_not_be_null(column=\"game_title\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that all email addresses conform to a valid format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_address\"),expect_column_values_to_be_of_type(column=\"email_address\", type_=\"text\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `admission_date` column contains dates formatted as 'YYYY-MM-DD' and that there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"admission_date\"),expect_column_values_to_match_strftime_format(column=\"admission_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"admission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'reports' JSON file: Validate that the content is properly formatted JSON and that it contains all required fields as per the schema.","generated_expectations":"expect_file_to_exist(file_path=\"reports.json\"),expect_file_to_be_valid_json(file_path=\"reports.json\"),expect_column_values_to_match_json_schema(column=\"reports\", schema={\"required_fields\": [...]})  # Replace [...] with actual required fields in the schema.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `username` column: Ensure all values are unique and match the regex pattern '^[a-zA-Z0-9_]{3,15}$'.","generated_expectations":"expect_column_values_to_be_unique(column=\"username\"),expect_column_values_to_match_regex(column=\"username\", regex=\"^[a-zA-Z0-9_]{3,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_id` field: Ensure the values are unique and of type 'string'. The field must not contain null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_of_type(column=\"property_id\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that `payment_status` contains only distinct values from `['paid', 'pending', 'refunded']` and is related to the `order_id`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"payment_status\", value_set=['paid', 'pending', 'refunded']),expect_select_column_values_to_be_unique_within_record(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `project_allocation` column contains JSON objects conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"project_allocation\", schema={\"type\": \"object\", \"properties\": {}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_id` column contains only unique values and is of type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `timestamp` column is formatted as 'YYYY-MM-DD HH:MM:SS' and does not include any null entries.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `team_id` column contains values that exist in the `teams` table.","generated_expectations":"expect_column_values_to_be_in_set(column=\"team_id\", value_set=<values_from_teams_table>)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `tracking_info` column contains valid JSON objects according to the defined schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"tracking_info\", schema={...})  # Replace {...} with the actual schema definition.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'comments' table: Confirm that the number of rows is between 0 and 1000. Ensure columns exist: 'comment_id', 'post_id', and 'author_name'.","generated_expectations":"expect_table_row_count_to_be_between(min_value=0, max_value=1000),expect_column_to_exist(column=\"comment_id\"),expect_column_to_exist(column=\"post_id\"),expect_column_to_exist(column=\"author_name\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_number` column contains unique identifiers and has no null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"account_number\"),expect_column_values_to_not_be_null(column=\"account_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `transaction_amount` is greater than zero and falls within the expected range of transaction values.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"transaction_amount\", value=0),expect_column_values_to_be_between(column=\"transaction_amount\", min_value=<min_value>, max_value=<max_value>)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the number of rows in the `course_enrollment` table is between 100 and 500.","generated_expectations":"expect_table_row_count_to_be_between(min_value=100, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `email_subject` column: Confirm that it contains no missing values and is of type string with a maximum length of 255 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_subject\"),expect_column_values_to_be_of_type(column=\"email_subject\", type_=\"str\"),expect_column_value_lengths_to_be_between(column=\"email_subject\", min_value=0, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `temperature` column contains only numeric values within the range of -50 to 50 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50),expect_column_values_to_be_of_type(column=\"temperature\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `data_payload` column contains valid JSON objects conforming to the schema `{ 'data': 'string', 'timestamp': 'string' }`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"data_payload\", schema={\"type\": \"object\", \"properties\": {\"data\": {\"type\": \"string\"}, \"timestamp\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `city_id` column has unique values across the dataset to prevent duplicate entries for cities.","generated_expectations":"expect_column_values_to_be_unique(column=\"city_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `grade` column in the `exam_results` table only contains values within the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'temperature': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Ensure temperature values are within the range of -50 to 50 degrees Celsius.","generated_expectations":"expect_column_values_to_not_be_null(column=\"temperature\"),expect_column_values_to_be_of_type(column=\"temperature\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `sales` column in CRM data has a standard deviation between 0 and 1000.","generated_expectations":"expect_column_stdev_to_be_between(column=\"sales\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `expense_amount` column values are greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_between(column=\"expense_amount\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the sum of the `usage_kwh` column matches the expected total for each `billing_period`.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"billing_period\", \"usage_kwh\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `hire_date`: Ensure all entries adhere to the datetime format 'YYYY-MM-DD'. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `supplier_name`: Validate that the length of each entry does not exceed 100 characters and matches the regex pattern for valid supplier names.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"supplier_name\", min_value=0, max_value=100),expect_column_values_to_match_regex(column=\"supplier_name\", regex=r\"^[a-zA-Z0-9\\s&.,'-]*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For a CSV file upload: Ensure that the first line contains valid headers and that the total number of lines does not exceed 1000.","generated_expectations":"expect_file_to_have_valid_table_header(),expect_file_line_regex_match_count_to_be_between(min_value=1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `listing_price` column values conform to a normal distribution with a mean between 200,000 and 1,000,000.","generated_expectations":"expect_column_mean_to_be_between(column=\"listing_price\", min_value=200000, max_value=1000000),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"listing_price\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `start_date` is less than the `end_date` for all `projects` records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"start_date\", column_B=\"end_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `pressure` column contains only numeric values and that all values fall within the range of 950 to 1050 hPa.","generated_expectations":"expect_column_values_to_be_of_type(column=\"pressure\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"pressure\", min_value=950, max_value=1050)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that all `account_numbers` in the `customer_accounts` column are exactly 10 digits long.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"customer_accounts\", length=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `player_scores` column: Validate that all scores are within the range of 0 to 100, ensuring no negative values exist.","generated_expectations":"expect_column_values_to_be_between(column=\"player_scores\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'final_grade': Ensure the field matches the type 'float'. Validate that the average of all values in (final_grade) is within the range of 0.0 to 4.0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"final_grade\"),expect_column_values_to_be_of_type(column=\"final_grade\", type_=\"float\"),expect_column_mean_to_be_between(column=\"final_grade\", min_value=0.0, max_value=4.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `water_usage` field: Ensure the sum of this column for each month does not exceed the expected limit of 5000 liters.","generated_expectations":"expect_column_sum_to_be_between(column=\"water_usage\", min_value=0, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'room_type': Ensure the field matches the type 'text'. Ensure values in 'room_type' must exist in the predefined list ['Single', 'Double', 'Suite'].","generated_expectations":"expect_column_values_to_be_of_type(column=\"room_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"room_type\", value_set=[\"Single\", \"Double\", \"Suite\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `alert_time` column contains datetime entries formatted as `'%Y-%m-%d %H:%M:%S'`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"alert_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sensor_id': Ensure the field exists. Ensure that each value in 'sensor_id' is unique and matches the type 'text'.","generated_expectations":"expect_column_to_exist(column=\"sensor_id\"),expect_column_values_to_be_unique(column=\"sensor_id\"),expect_column_values_to_be_of_type(column=\"sensor_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `medications` column, ensure that all entries are valid JSON objects conforming to the specified schema for medication details.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"medications\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `location_id` column has unique values and is of type 'integer'. There should be no null values present.","generated_expectations":"expect_column_values_to_be_unique(column=\"location_id\"),expect_column_values_to_be_of_type(column=\"location_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"location_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the values in the `methodology` column are from the set `['Qualitative', 'Quantitative', 'Mixed Methods']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"methodology\", value_set=['Qualitative', 'Quantitative', 'Mixed Methods'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `order_id` field: Ensure the field is unique and not null. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"order_id\"),expect_column_values_to_not_be_null(column=\"order_id\"),expect_column_values_to_be_unique(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `comments` column: Check that it contains valid JSON objects conforming to the specified schema for user comments.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"comments\", schema={\"type\": \"object\", \"properties\": {\"user\": {\"type\": \"string\"}, \"message\": {\"type\": \"string\"}, \"timestamp\": {\"type\": \"string\", \"format\": \"date-time\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_email` column contains only valid email formats and no null values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_email\"),expect_column_values_to_match_regex(column=\"customer_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `json_data` field, ensure all entries are valid JSON objects that conform to the provided schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", schema=provided_schema)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `premium_amount` is greater than zero and less than or equal to the maximum defined limit.","generated_expectations":"expect_column_values_to_be_between(column=\"premium_amount\", min_value=0, max_value=maximum_defined_limit)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `payment_status` column contains distinct values from the set `['Paid', 'Pending', 'Failed']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"payment_status\", value_set=['Paid', 'Pending', 'Failed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'court_date': Ensure the field is required (not null). Ensure the field matches the type 'date'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"court_date\"),expect_column_values_to_not_be_null(column=\"court_date\"),expect_column_values_to_be_of_type(column=\"court_date\", type_=\"date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_description` column does not exceed 500 characters and does not contain any HTML tags.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"product_description\", min_value=0, max_value=500),expect_column_values_to_not_match_regex(column=\"product_description\", regex=r\"<[^>]+>\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `category` column: Ensure values are from the set ['Electronics', 'Apparel', 'Home', 'Sports']. Confirm that there are no null entries.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Apparel', 'Home', 'Sports']),expect_column_values_to_not_be_null(column=\"category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'classroom_number': Ensure the expect column values to be in set;","generated_expectations":"expect_column_values_to_be_in_set(column=\"classroom_number\", value_set=...)  # Specify the value_set as needed.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'author_id': Ensure this field is required (not null). Its values must exist in the 'authors' table.","generated_expectations":"expect_column_values_to_not_be_null(column=\"author_id\"),expect_column_values_to_be_in_set(column=\"author_id\", value_set=authors_table_values)  # authors_table_values should be defined as a set of valid author IDs from the 'authors' table.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'account_number': Ensure the field exists. Validate that 'account_number' is exactly 12 digits long, matching the pattern '^\\d{12}$'.","generated_expectations":"expect_column_to_exist(column=\"account_number\"),expect_column_values_to_match_regex(column=\"account_number\", regex=r\"^\\d{12}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'content_length': Ensure this field is numeric and that it accurately reflects the character count of the 'content' field.","generated_expectations":"expect_column_values_to_be_of_type(column=\"content_length\", type_=\"numeric\"),expect_column_pair_values_to_be_equal(column_A=\"content_length\", column_B=\"content\", ignore_index=True)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'meter_reading_date': Ensure the field matches the type 'date'. Validate that values in (meter_reading_date) are unique and occur within the last 30 days.","generated_expectations":"expect_column_values_to_be_of_type(column=\"meter_reading_date\", type_=\"date\"),expect_column_values_to_be_unique(column=\"meter_reading_date\"),expect_column_values_to_be_between(column=\"meter_reading_date\", min_value=(current_date - timedelta(days=30)), max_value=current_date)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure this field contains unique values. Ensure this field matches the type 'integer'. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `employee_id` is unique across the dataset.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `feedback_score` column contains integer values between 1 and 10, with no missing entries.","generated_expectations":"expect_column_values_to_be_between(column=\"feedback_score\", min_value=1, max_value=10),expect_column_values_to_not_be_null(column=\"feedback_score\"),expect_column_values_to_be_of_type(column=\"feedback_score\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `status` column: Ensure values are from the set ['active', 'inactive', 'malfunctioning'] and do not contain null entries.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['active', 'inactive', 'malfunctioning']),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `genre` column contains at least one value from the list `['Action', 'Adventure', 'RPG']`.","generated_expectations":"expect_column_values_to_contain_set(column=\"genre\", value_set=['Action', 'Adventure', 'RPG'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'stock_quantity': Ensure the field is required (not null). Ensure the field matches the type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"stock_quantity\"),expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `purchase_amount` column values are between $10 and $5000, with a median value above $100.","generated_expectations":"expect_column_values_to_be_between(column=\"purchase_amount\", min_value=10, max_value=5000),expect_column_median_to_be_between(column=\"purchase_amount\", min_value=100, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `temperature` field, verify that all values fall within the range of -50 to 150 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-50, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_id': Ensure this field is required (not null). Ensure that values in 'email_id' are unique and match the type 'string' with a valid email format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_id\"),expect_column_values_to_be_unique(column=\"email_id\"),expect_column_values_to_be_of_type(column=\"email_id\", type_=\"string\"),expect_column_values_to_match_regex(column=\"email_id\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `booking_status` column only includes values from the set `['Confirmed', 'Pending', 'Cancelled']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"booking_status\", value_set=['Confirmed', 'Pending', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ballot_status` column only contains distinct values from the set `['Submitted', 'Rejected', 'In Progress']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"ballot_status\", value_set=['Submitted', 'Rejected', 'In Progress'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `phone_number` column: Ensure values do not match the pattern `^\\D*1?\\D*\\d{3}\\D*\\d{3}\\D*\\d{4}\\D*$` (e.g., North American format).","generated_expectations":"expect_column_values_to_not_match_regex(column=\"phone_number\", regex=r\"^\\D*1?\\D*\\d{3}\\D*\\d{3}\\D*\\d{4}\\D*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `participant_age` field contains only integers between 18 and 100. Validate that this field exists.","generated_expectations":"expect_column_to_exist(column=\"participant_age\"),expect_column_values_to_be_between(column=\"participant_age\", min_value=18, max_value=100),expect_column_values_to_be_of_type(column=\"participant_age\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_id` column has unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_not_be_null(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure the field is required (not null). Validate that the length of 'customer_id' is exactly 10 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_value_lengths_to_equal(column=\"customer_id\", value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `json_transaction_details` column contains valid JSON objects with required fields such as `amount`, `currency`, and `timestamp`.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_transaction_details\"),expect_column_values_to_match_json_schema(column=\"json_transaction_details\", schema={\"type\": \"object\", \"required\": [\"amount\", \"currency\", \"timestamp\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `transaction_value` entries are greater than 0 and are of type 'float'.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"transaction_value\", threshold=0),expect_column_values_to_be_of_type(column=\"transaction_value\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `ballot_status` field, ensure values match one of the following: ['cast', 'pending', 'invalid']. Validate that all entries are non-null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"ballot_status\", value_set=['cast', 'pending', 'invalid']),expect_column_values_to_not_be_null(column=\"ballot_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `id_number` column across both the `clients` and `suppliers` tables contains no duplicates.","generated_expectations":"expect_compound_columns_to_be_unique(column_list=[\"clients.id_number\", \"suppliers.id_number\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `timestamp` field: Validate that all entries match the ISO 8601 format 'YYYY-MM-DDTHH:MM:SSZ' and are in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%SZ\"),expect_column_values_to_be_dateutil_parseable(column=\"timestamp\") ","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `claim_date` field matches the strftime format '%Y-%m-%d' and is correctly parsed without null values.","generated_expectations":"expect_column_to_exist(column=\"claim_date\"),expect_column_values_to_match_strftime_format(column=\"claim_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"claim_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'order_quantity': Ensure the field matches the type 'integer'. Ensure there are no negative values present.","generated_expectations":"expect_column_values_to_be_of_type(column=\"order_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"order_quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `product_id` column: Ensure that all entries are unique and conform to the `UUID` format.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_match_regex(column=\"product_id\", regex=r\"^[{(]?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}[)}]?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `bedrooms` and `bathrooms` columns have values such that `bathrooms` is not greater than `bedrooms`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"bathrooms\", column_B=\"bedrooms\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'likes_count': Ensure values are within the range of 0 to 1,000,000. Ensure this field matches the type 'integer'.","generated_expectations":"expect_column_values_to_be_between(column=\"likes_count\", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=\"likes_count\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column in both `payments` and `invoices` tables matches and that both have the same row count.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"payments.transaction_id\", column_B=\"invoices.transaction_id\"),expect_table_row_count_to_equal_other_table(table_A=\"payments\", table_B=\"invoices\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_id` column contains unique values that match a defined UUID format.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'last_modified': Ensure all datetime values are accurate and comply with the format '%Y-%m-%d %H:%M:%S'. Ensure this field is required.","generated_expectations":"expect_column_to_exist(column=\"last_modified\"),expect_column_values_to_match_strftime_format(column=\"last_modified\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"last_modified\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `content_rating` column matches the regular expression pattern '^(G|PG|PG-13|R|NC-17)$'.","generated_expectations":"expect_column_values_to_match_regex(column=\"content_rating\", regex=r\"^(G|PG|PG-13|R|NC-17)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `delivery_status` column contains only valid values from the set ['Pending', 'In Transit', 'Delivered', 'Returned'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"delivery_status\", value_set=['Pending', 'In Transit', 'Delivered', 'Returned'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'token_amount': Ensure the field matches the type 'decimal'. Validate that values are non-negative and do not exceed 1,000,000. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"token_amount\"),expect_column_values_to_be_of_type(column=\"token_amount\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"token_amount\", min_value=0, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `contact_number` field: Ensure all values match the pattern of a 10-digit phone number.","generated_expectations":"expect_column_values_to_match_regex(column=\"contact_number\", regex=r\"^\\d{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `username` field: Ensure this field contains unique values and does not allow null entries. Validate that it matches the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"username\"),expect_column_values_to_not_be_null(column=\"username\"),expect_column_values_to_be_of_type(column=\"username\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `appointment_date`: Ensure the date format adheres to 'YYYY-MM-DD'. Ensure there are no missing values in this column.","generated_expectations":"expect_column_to_exist(column=\"appointment_date\"),expect_column_values_to_match_strftime_format(column=\"appointment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"appointment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'phone_number': Ensure the field matches the format 'XXX-XXX-XXXX'. Ensure values in (phone_number) are unique. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"phone_number\"),expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\d{3}-\\d{3}-\\d{4}$\"),expect_column_values_to_be_unique(column=\"phone_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `ip_address` column adheres to the correct IP address format and contains no duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"),expect_column_values_to_be_unique(column=\"ip_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `wallet_address` column contains valid addresses matching the regex pattern `^0x[a-fA-F0-9]{40}$` and that there are no duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"wallet_address\", regex=r\"^0x[a-fA-F0-9]{40}$\"),expect_column_values_to_be_unique(column=\"wallet_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For JSON object 'data_sources': Confirm the presence of 'source_name' and 'source_url', and validate their formatting against the required schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"data_sources\", schema={\"type\": \"object\", \"properties\": {\"source_name\": {\"type\": \"string\"}, \"source_url\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `precipitation` column contains only values from the set `[0, 1, 2, 3, 4, 5]` representing millimeters of rain.","generated_expectations":"expect_column_values_to_be_in_set(column=\"precipitation\", value_set=[0, 1, 2, 3, 4, 5])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `last_interaction_date` column contains dates that are not older than `2022-01-01`.","generated_expectations":"expect_column_values_to_be_between(column=\"last_interaction_date\", min_value=\"2022-01-01\", max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `citizen_id` column, ensure that all values are unique and consist of exactly `10` digits. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"citizen_id\"),expect_column_values_to_be_unique(column=\"citizen_id\"),expect_column_value_lengths_to_equal(column=\"citizen_id\", length=10),expect_column_values_to_match_regex(column=\"citizen_id\", regex=r\"^\\d{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `order_date`: Ensure this field is of type 'date'. Ensure the field is required (not null).","generated_expectations":"expect_column_values_to_be_of_type(column=\"order_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'account_balance': Ensure the expect column value lengths to be between;","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"account_balance\", min_value=1, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'employees' table: Ensure the row count equals the 'departments' table row count. Ensure this field exists.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"employees\", other_table_name=\"departments\"),expect_table_columns_to_match_set(column_set=[\"employees\"], exact_match=False)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` column in the `transactions` table: Ensure values are restricted to ['Pending', 'Completed', 'Failed'] and are unique.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Pending\", \"Completed\", \"Failed\"]),expect_column_values_to_be_unique(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `location`: Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure each `location` value is unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"location\"),expect_column_values_to_be_of_type(column=\"location\", type_=\"text\"),expect_column_values_to_be_unique(column=\"location\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `patient_id` field: Ensure it contains unique values. No duplicates or null entries should be allowed.","generated_expectations":"expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_not_be_null(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm the number of rows in the `billing` table is equal to the number of rows in the `usage` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"billing\", other_table_name=\"usage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `impact_score` field: Ensure the field matches the type 'integer'. Ensure all values are within the range of 1 to 10 and non-negative.","generated_expectations":"expect_column_values_to_be_of_type(column=\"impact_score\", type_=\"int\"),expect_column_values_to_be_between(column=\"impact_score\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `jurisdiction` field, confirm it matches one of the values in the list `['Federal', 'State', 'Local']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"jurisdiction\", value_set=['Federal', 'State', 'Local'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `created_at` and `updated_at` columns across all domains maintain valid timestamps, with `updated_at` being greater than `created_at`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"created_at\"),expect_column_values_to_be_dateutil_parseable(column=\"updated_at\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"updated_at\", column_B=\"created_at\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'penalty_kicks': Ensure the field matches the type 'integer'. Ensure values in 'penalty_kicks' are non-negative. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"penalty_kicks\"),expect_column_values_to_be_of_type(column=\"penalty_kicks\", type_=\"int\"),expect_column_values_to_be_between(column=\"penalty_kicks\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `release_date` and `update_date` columns maintain a logical relationship, where `release_date` is always earlier than `update_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"release_date\", column_B=\"update_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `timestamp` column, confirm that all entries are in the ISO 8601 format and that they are sequentially increasing.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_be_increasing(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `discount` column values are less than the `original_price` column values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"original_price\", column_B=\"discount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `interest_rate` field: Ensure this field is required (not null). Ensure it contains values between `0` and `1`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"interest_rate\"),expect_column_values_to_be_between(column=\"interest_rate\", min_value=0, max_value=1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_subject': Ensure the field is required (not null) and does not exceed 255 characters in length.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_subject\"),expect_column_value_lengths_to_be_between(column=\"email_subject\", min_value=1, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'humidity': Ensure the field matches the type 'integer'. Validate that values in (humidity) are within the range of 0 to 100 percent.","generated_expectations":"expect_column_values_to_be_of_type(column=\"humidity\", type_=\"int\"),expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_id` column exists and contains unique identifiers for each order.","generated_expectations":"expect_column_to_exist(column=\"order_id\"),expect_column_values_to_be_unique(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the standard deviation of the `room_price` column falls between $50 and $200 to maintain pricing consistency.","generated_expectations":"expect_column_stdev_to_be_between(column=\"room_price\", min_value=50, max_value=200)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `transaction_type`: Ensure only distinct values exist from the defined set `['purchase', 'refund', 'transfer']`. Ensure this field exists and does not contain null values.","generated_expectations":"expect_column_to_exist(column=\"transaction_type\"),expect_column_values_to_not_be_null(column=\"transaction_type\"),expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=['purchase', 'refund', 'transfer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `customer_email` column matches the regex pattern for valid emails and does not contain any duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"customer_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_be_unique(column=\"customer_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `weather_condition` field contains distinct values from the set `['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"weather_condition\", value_set=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `result_score` field: Validate that all scores are between 0 and 100, and no missing values are allowed.","generated_expectations":"expect_column_values_to_be_between(column=\"result_score\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"result_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_balance` column's minimum value is not less than $0 and the mean balance is above $1000.","generated_expectations":"expect_column_min_to_be_between(column=\"account_balance\", min_value=0),expect_column_mean_to_be_between(column=\"account_balance\", min_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `monthly_fee` column values are within the range of 10 to 1000.","generated_expectations":"expect_column_values_to_be_between(column=\"monthly_fee\", min_value=10, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status_code': Validate that the field is an integer type. Ensure values in (status_code) must exist in the predefined set (['200', '400', '500']). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"status_code\"),expect_column_values_to_be_of_type(column=\"status_code\", type_=\"int\"),expect_column_values_to_be_in_set(column=\"status_code\", value_set=['200', '400', '500'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the file 'inventory.json': Ensure the file contains valid JSON formatting and includes the required headers: ['product_id', 'product_name', 'quantity'].","generated_expectations":"expect_file_to_exist(filepath=\"inventory.json\"),expect_file_to_be_valid_json(filepath=\"inventory.json\"),expect_file_to_have_valid_table_header(filepath=\"inventory.json\", expected_header_list=['product_id', 'product_name', 'quantity'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `travel_dates` column contains dates that are in chronological order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"travel_dates\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `title` field: Validate that string lengths are between 1 and 100 characters and do not contain any special characters except for hyphens and apostrophes.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"title\", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=\"title\", regex=r\"[^a-zA-Z0-9\\s'-]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_type': Ensure the field is required (not null). Ensure values in 'case_type' must exist in the set ('civil', 'criminal', 'family', 'business').","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_type\"),expect_column_values_to_be_in_set(column=\"case_type\", value_set=['civil', 'criminal', 'family', 'business'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'medications': Ensure this field contains unique values that match the set ['Aspirin', 'Metformin', 'Lisinopril']. Ensure the field is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"medications\"),expect_column_values_to_not_be_null(column=\"medications\"),expect_column_values_to_be_in_set(column=\"medications\", value_set=['Aspirin', 'Metformin', 'Lisinopril'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_number': Ensure the field matches the type 'text'. Validate that all values conform to the pattern '^[A-Z]{2}-[0-9]{4}-[0-9]{3}$', ensuring consistency in case identification.","generated_expectations":"expect_column_values_to_be_of_type(column=\"case_number\", type_=\"text\"),expect_column_values_to_match_regex(column=\"case_number\", regex=r\"^[A-Z]{2}-[0-9]{4}-[0-9]{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field contains unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_usage': Ensure the field matches the type 'integer'. Validate that values are within the range '0' to '2000' megabytes.","generated_expectations":"expect_column_values_to_be_of_type(column=\"data_usage\", type_=\"int\"),expect_column_values_to_be_between(column=\"data_usage\", min_value=0, max_value=2000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_rating`, ensure that values fall within the range of `1` to `5`.","generated_expectations":"expect_column_values_to_be_between(column=\"user_rating\", min_value=1, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `student_id` column contains only distinct values and is of type 'text'. This field must not be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_be_of_type(column=\"student_id\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"student_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'device_status': Ensure the field matches the type 'text'. Validate that values must match one of the predefined statuses (Online, Offline, Maintenance). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"device_status\"),expect_column_values_to_be_of_type(column=\"device_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"device_status\", value_set=[\"Online\", \"Offline\", \"Maintenance\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `status` column only contains values from the set `['Open', 'Closed', 'Pending']`. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=['Open', 'Closed', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'video_title': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'video_title' are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"video_title\"),expect_column_values_to_be_of_type(column=\"video_title\", type_=\"text\"),expect_column_values_to_be_unique(column=\"video_title\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_feedback` field: Ensure there are no missing values. Ensure entries are of type 'text' and do not exceed 300 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_feedback\"),expect_column_values_to_be_of_type(column=\"customer_feedback\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=0, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `start_date` field is of type 'date'. Ensure `start_date` is not null and is less than `end_date`. Ensure both fields exist.","generated_expectations":"expect_column_to_exist(column=\"start_date\"),expect_column_to_exist(column=\"end_date\"),expect_column_values_to_be_of_type(column=\"start_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"start_date\"),expect_column_pair_values_A_to_be_less_than_B(column_A=\"start_date\", column_B=\"end_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_start_date` column values follow the format 'MM\/DD\/YYYY' and are all valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"service_start_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"service_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `user_rating` column has values between 0 and 10, ensuring the mean rating is above 5.","generated_expectations":"expect_column_values_to_be_between(column=\"user_rating\", min_value=0, max_value=10),expect_column_mean_to_be_between(column=\"user_rating\", min_value=5, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `signup_date` field contains valid datetime entries formatted as `YYYY-MM-DDTHH:MM:SS`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"signup_date\", strftime_format=\"%Y-%m-%dT%H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `item_id` across ERP and CRM tables, ensure that the values are unique when combined with `customer_id`.","generated_expectations":"expect_compound_columns_to_be_unique(column_names=[\"item_id\", \"customer_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `claim_amount` column has no missing values and that its distribution fits a log-normal distribution with a p-value > 0.05.","generated_expectations":"expect_column_values_to_not_be_null(column=\"claim_amount\"),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"claim_amount\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'battery_level': Ensure this field exists. Ensure the field matches the type 'integer'. Ensure values in 'battery_level' are between 0 and 100.","generated_expectations":"expect_column_to_exist(column=\"battery_level\"),expect_column_values_to_be_of_type(column=\"battery_level\", type_=\"int\"),expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the file 'supplier_list.xml' adheres to the specified schema and contains no duplicate supplier entries.","generated_expectations":"expect_file_to_exist(file_path=\"supplier_list.xml\"),expect_file_to_have_valid_table_header(file_path=\"supplier_list.xml\"),expect_column_values_to_be_unique(column=\"supplier_name\")  # Assuming 'supplier_name' is the column with supplier entries.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_id` column contains only unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"order_id\"),expect_column_values_to_not_be_null(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `voter_status` column contains only values from the set `['active', 'inactive', 'pending']` and does not include any duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"voter_status\", value_set=['active', 'inactive', 'pending']),expect_column_values_to_be_unique(column=\"voter_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `hashtag` column contains distinct values and that each entry is of type 'string', with no null values allowed.","generated_expectations":"expect_column_values_to_be_unique(column=\"hashtag\"),expect_column_values_to_be_of_type(column=\"hashtag\", type_=\"string\"),expect_column_values_to_not_be_null(column=\"hashtag\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `attack_vector` column in the Cybersecurity dataset only contains unique values from the predefined list `['Phishing', 'Malware', 'DDoS']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"attack_vector\", value_set=['Phishing', 'Malware', 'DDoS'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `zip_code` field, validate that it consists of exactly 5 digits and no null values are present.","generated_expectations":"expect_column_values_to_not_be_null(column=\"zip_code\"),expect_column_values_to_match_regex(column=\"zip_code\", regex=r\"^\\d{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `peak_demand` values follow a normal distribution with a p-value greater than 0.05 in the KS test.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"peak_demand\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `likes` and `shares` columns: Ensure that the sum of these two columns matches the expected total engagement for each post. Validate that both fields exist.","generated_expectations":"expect_column_to_exist(column=\"likes\"),expect_column_to_exist(column=\"shares\"),expect_multicolumn_sum_to_equal(column_list=[\"likes\", \"shares\"], sum=expected_total_engagement)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `temperature` column's values are within the range of -40 to 125 degrees Celsius.","generated_expectations":"expect_column_values_to_be_between(column=\"temperature\", min_value=-40, max_value=125)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `ballot_status` column: Ensure values fall within the set `['received', 'counted', 'rejected']` and that no entries are null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"ballot_status\", value_set=['received', 'counted', 'rejected']),expect_column_values_to_not_be_null(column=\"ballot_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `status` column contains only values from the set `['sent', 'delivered', 'failed']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['sent', 'delivered', 'failed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `response_time` column values are within the range of 0 to 120 minutes and are arranged in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"response_time\", min_value=0, max_value=120),expect_column_values_to_be_increasing(column=\"response_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure values in 'transaction_id' are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"transaction_id\"),expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that all entries in the `game_data` field are valid JSON objects according to the specified schema, ensuring proper structure.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"game_data\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'meter_id': Ensure the field contains unique values. Ensure this field matches the type 'integer'. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"meter_id\"),expect_column_values_to_be_of_type(column=\"meter_id\", type_=\"integer\"),expect_column_values_to_not_be_null(column=\"meter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `lab_results` column consists of valid JSON objects conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"lab_results\", schema=\"specified_schema\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `listing_date` column contains dates in the format 'MM\/DD\/YYYY' and all dates are in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_increasing(column=\"listing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_amount` values are within the range of 0.01 to 1000.00 BTC, and no values are negative.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0.01, max_value=1000.00),expect_column_values_to_be_greater_than(column=\"transaction_amount\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `alert_type` column contains no more than 10 unique values and aligns with the expected categories.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"alert_type\", min_value=0, max_value=10),expect_column_values_to_be_in_set(column=\"alert_type\", value_set=[\"category1\", \"category2\", \"category3\", \"category4\", \"category5\", \"category6\", \"category7\", \"category8\", \"category9\", \"category10\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `battery_level` field contains only values within the range of 0 to 100 percent. This field must have no missing values.","generated_expectations":"expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"battery_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'genre': Ensure this field exists and matches the type 'text'. Validate that values must be one of ['Action', 'Adventure', 'Puzzle', 'Strategy'].","generated_expectations":"expect_column_to_exist(column=\"genre\"),expect_column_values_to_be_of_type(column=\"genre\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"genre\", value_set=['Action', 'Adventure', 'Puzzle', 'Strategy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'candidate_id': Ensure the field matches the type 'integer'. Ensure values must exist in the list of valid candidates.","generated_expectations":"expect_column_values_to_be_of_type(column=\"candidate_id\", type_=\"int\"),expect_column_values_to_be_in_set(column=\"candidate_id\", value_set=valid_candidates_list)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_id` column is present and contains unique identifiers that match the format 'PXXXX' where X is a digit.","generated_expectations":"expect_column_to_exist(column=\"patient_id\"),expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_match_regex(column=\"patient_id\", regex=r\"^P\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `user_rating` column: Ensure values are between 0 and 10 and that no duplicates exist.","generated_expectations":"expect_column_values_to_be_between(column=\"user_rating\", min_value=0, max_value=10),expect_column_values_to_be_unique(column=\"user_rating\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `tariff_plan` column only includes values from the set `['Standard', 'Discounted']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"tariff_plan\", value_set=['Standard', 'Discounted'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `brand` field contains only distinct values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"brand\"),expect_column_values_to_not_be_null(column=\"brand\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the file containing `hotel_reviews` has no more than 500 lines and that it includes valid table headers.","generated_expectations":"expect_file_line_regex_match_count_to_be_between(file_path=\"hotel_reviews\", min_value=0, max_value=500),expect_file_to_have_valid_table_header(file_path=\"hotel_reviews\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure the field is required (not null). Ensure the field matches the type 'text'. Validate that the values conform to the email format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_address\"),expect_column_values_to_be_of_type(column=\"email_address\", type_=\"text\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'network_fee': Ensure this field exists. Validate that the average 'network_fee' across all transactions does not exceed a defined threshold.","generated_expectations":"expect_column_to_exist(column=\"network_fee\"),expect_column_mean_to_be_between(column=\"network_fee\", min_value=None, max_value=threshold)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `json_data` field: Ensure that the content is properly formatted JSON and contains no missing keys in the predefined schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", schema={\"type\": \"object\", \"properties\": {}})  # Replace {} with your predefined schema.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `alert_threshold`: Ensure values in this column are greater than the respective `sensor_reading` values. Ensure this field is required (not null).","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"alert_threshold\", column_B=\"sensor_reading\"),expect_column_values_to_not_be_null(column=\"alert_threshold\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'rating': Ensure this field is required (not null). Ensure this field matches the type 'decimal'. Ensure values are between 0.0 and 10.0.","generated_expectations":"expect_column_values_to_not_be_null(column=\"rating\"),expect_column_values_to_be_of_type(column=\"rating\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"rating\", min_value=0.0, max_value=10.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `status` column contains values from the set `['open', 'closed', 'pending']` and has no missing values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['open', 'closed', 'pending']),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `price` column values in the `products` table are within a specified range of $10 to $500.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=10, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `wind_speed` column does not contain any null values and is within the range of `0` to `150` km\/h.","generated_expectations":"expect_column_values_to_not_be_null(column=\"wind_speed\"),expect_column_values_to_be_between(column=\"wind_speed\", min_value=0, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'plaintiff_name': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure the length of 'plaintiff_name' is between 5 and 50 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"plaintiff_name\"),expect_column_values_to_be_of_type(column=\"plaintiff_name\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"plaintiff_name\", min_value=5, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_id` column contains only unique alphanumeric strings of exactly 8 characters.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_value_lengths_to_equal(column=\"property_id\", length=8),expect_column_values_to_match_regex(column=\"property_id\", regex=r\"^[a-zA-Z0-9]{8}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_description` field does not contain any SQL injection patterns such as '--', ';', or '\/*'.","generated_expectations":"expect_column_values_to_not_match_regex(column=\"transaction_description\", regex=r\"(--|;|\/\\*)\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `application_date` column, verify all datetime entries match the format '%d-%m-%Y' and can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"application_date\", strftime_format=\"%d-%m-%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"application_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `policy_number` column contains only distinct values and does not allow nulls.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_not_be_null(column=\"policy_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `balance` column: Ensure values fall within the range of `0.00` to `10,000,000.00` and are of type 'decimal'.","generated_expectations":"expect_column_values_to_be_between(column=\"balance\", min_value=0.00, max_value=10000000.00),expect_column_values_to_be_of_type(column=\"balance\", type_=\"decimal\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column values are consistent with the `email_id` for related communications, confirming uniqueness across both fields.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"user_id\", column_B=\"email_id\"),expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_be_unique(column=\"email_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `view_count` column contains values that are greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_between(column=\"view_count\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sensor_data': Ensure the field matches the type 'numeric'. Ensure values in (sensor_data) are within the range of 0 to 100. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"sensor_data\"),expect_column_values_to_be_of_type(column=\"sensor_data\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"sensor_data\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `country` column contains only non-null values and values are specified within the set ['US', 'UK', 'CA'].","generated_expectations":"expect_column_values_to_not_be_null(column=\"country\"),expect_column_values_to_be_in_set(column=\"country\", value_set=['US', 'UK', 'CA'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `contact_email` column contains valid email formats and that no two entries are identical.","generated_expectations":"expect_column_values_to_match_regex(column=\"contact_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_be_unique(column=\"contact_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'keywords': Ensure that values in (keywords) are comma-separated and do not contain special characters or exceed 150 characters in total length.","generated_expectations":"expect_column_values_to_match_regex(column=\"keywords\", regex=r\"^[a-zA-Z0-9, ]*$\"),expect_column_value_lengths_to_be_between(column=\"keywords\", min_value=0, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `supplier_id` column contains unique identifiers that exist in the `suppliers` table.","generated_expectations":"expect_column_values_to_be_unique(column=\"supplier_id\"),expect_column_values_to_be_in_set(column=\"supplier_id\", value_set=suppliers_table_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'loyalty_points': Ensure this field matches the type 'integer' and contains values greater than or equal to 0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"loyalty_points\", type_=\"int\"),expect_column_values_to_be_between(column=\"loyalty_points\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the table 'orders': Validate that the combination of 'order_id' and 'customer_id' is unique across records.","generated_expectations":"expect_compound_columns_to_be_unique(columns=[\"order_id\", \"customer_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'check_in_date': Ensure this field exists. Validate that all values conform to the format 'YYYY-MM-DD' and are in the future.","generated_expectations":"expect_column_to_exist(column=\"check_in_date\"),expect_column_values_to_match_strftime_format(column=\"check_in_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_in_set(column=\"check_in_date\", value_set=[date for date in range(datetime.now().date(), datetime.max.date())])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `booking_date` is not greater than the `check_in_date` and both are valid `YYYY-MM-DD` formats.","generated_expectations":"expect_column_pair_values_A_to_be_less_than_B(column_A=\"booking_date\", column_B=\"check_in_date\"),expect_column_values_to_match_strftime_format(column=\"booking_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_match_strftime_format(column=\"check_in_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `release_date` column: Ensure all datetime values are formatted as 'YYYY-MM-DD' and contain no missing values.","generated_expectations":"expect_column_to_exist(column=\"release_date\"),expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'wind_speed': Ensure the field matches the type 'float'. Validate that all values in 'wind_speed' represent realistic wind speeds (0 to 150 km\/h).","generated_expectations":"expect_column_values_to_be_of_type(column=\"wind_speed\", type_=\"float\"),expect_column_values_to_be_between(column=\"wind_speed\", min_value=0, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `final_grade` column contains numeric values within the range of `0` to `100`. Verify that the mean grade is greater than `60`.","generated_expectations":"expect_column_values_to_be_between(column=\"final_grade\", min_value=0, max_value=100),expect_column_mean_to_be_between(column=\"final_grade\", min_value=60, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_hash` column: Ensure all entries are unique and match the regular expression pattern for a SHA-256 hash.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_hash\"),expect_column_values_to_match_regex(column=\"transaction_hash\", regex=r\"^[a-f0-9]{64}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'claims_json': Validate that every entry adheres to the specified JSON schema for claims, ensuring all keys are present and correctly typed.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"claims_json\", json_schema=\"your_json_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `student_id` column contains only values that exist in the `registered_students` table.","generated_expectations":"expect_column_values_to_be_in_set(column=\"student_id\", value_set=registered_students)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column contains only distinct values that are numeric and match a predefined set of valid IDs.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_be_of_type(column=\"product_id\", type_=\"int\"),expect_column_values_to_be_in_set(column=\"product_id\", value_set=[\/* predefined set of valid IDs *\/])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'device_status': Validate that each entry is a valid JSON object, ensuring all required fields like 'device_id' and 'status' are present.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"device_status\"),expect_column_values_to_match_json_schema(column=\"device_status\", schema={\"type\": \"object\", \"required\": [\"device_id\", \"status\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_feedback': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 1000. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_feedback\")\r,expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=0, max_value=1000)\r,expect_column_values_to_be_of_type(column=\"customer_feedback\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `sensor_type` column contains only values from the set `['Temperature', 'Humidity', 'Pressure']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"sensor_type\", value_set=['Temperature', 'Humidity', 'Pressure'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `phone_number` column matches the pattern `^\\+?[0-9]{10,15}$` and does not contain null values.","generated_expectations":"expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\+?[0-9]{10,15}$\"),expect_column_values_to_not_be_null(column=\"phone_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_age` column, confirm that values fall within the range of 18 to 120.","generated_expectations":"expect_column_values_to_be_between(column=\"customer_age\", min_value=18, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `customer_id` column has exactly 500 unique values, confirming distinct customer entries.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"customer_id\", min_value=500, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `stock_quantity` column, verify that all values are integers greater than or equal to `0`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that `course_code` values are in the format 'XYZ123' where 'XYZ' are uppercase letters and '123' are digits, and that they are unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^[A-Z]{3}\\d{3}$\"),expect_column_values_to_be_unique(column=\"course_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For column 'customer_segment': Ensure values are within the set ['VIP', 'Regular', 'New']. Confirm that this field is not null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"customer_segment\", value_set=['VIP', 'Regular', 'New']),expect_column_values_to_not_be_null(column=\"customer_segment\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `wallet_address` column adheres to the specified format and contains unique values.","generated_expectations":"expect_column_values_to_match_regex(column=\"wallet_address\", regex=r\"^0x[a-fA-F0-9]{40}$\"),expect_column_values_to_be_unique(column=\"wallet_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure the field is required (not null). Validate that all values in 'email_address' match the regex pattern for valid email formats.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email_address\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the table contains exactly 100 rows for active employees. Verify that this matches the total in the `active_employees` reference table.","generated_expectations":"expect_table_row_count_to_equal(row_count=100),expect_table_row_count_to_equal_other_table(other_table=\"active_employees\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `diagnosis_codes` column contains valid JSON objects and adheres to the specified schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"diagnosis_codes\"),expect_column_values_to_match_json_schema(column=\"diagnosis_codes\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_frequency': Ensure that the values in 'data_frequency' match the pattern of integers representing seconds (e.g., 10, 30, 60). Confirm that this field exists.","generated_expectations":"expect_column_to_exist(column=\"data_frequency\"),expect_column_values_to_match_regex(column=\"data_frequency\", regex=r\"^\\d+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `property_type` column: Validate that values are from the set `['Apartment', 'House', 'Condo']` and the field is required (not null).","generated_expectations":"expect_column_to_exist(column=\"property_type\"),expect_column_values_to_not_be_null(column=\"property_type\"),expect_column_values_to_be_in_set(column=\"property_type\", value_set=['Apartment', 'House', 'Condo'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `publish_date` column: Ensure it matches the type 'date'. Ensure all values are in the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"publish_date\", type_=\"date\"),expect_column_values_to_match_strftime_format(column=\"publish_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `ip_address` field adheres to the standard IPv4 format and does not match any known blacklisted IP addresses.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"),expect_column_values_to_not_match_regex_list(column=\"ip_address\", regex_list=[\"192\\.168\\.1\\.1\", \"10\\.0\\.0\\.1\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email_address` column contains unique values and matches the standard email regex pattern.","generated_expectations":"expect_column_values_to_be_unique(column=\"email_address\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `multiplayer_mode` column contains values only from the set `['Co-op', 'Competitive', 'Singleplayer']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"multiplayer_mode\", value_set=['Co-op', 'Competitive', 'Singleplayer'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'monthly_bill': Ensure the field is required (not null). Ensure the field matches the type 'decimal'. Check that the average monthly bill does not exceed $150.","generated_expectations":"expect_column_values_to_not_be_null(column=\"monthly_bill\"),expect_column_values_to_be_of_type(column=\"monthly_bill\", type_=\"decimal\"),expect_column_mean_to_be_between(column=\"monthly_bill\", min_value=None, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `developer_id` in the `games` table exists in the `developers` table to maintain data integrity.","generated_expectations":"expect_column_pair_values_to_be_in_set(column_A=\"games.developer_id\", column_B=\"developers.developer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `release_date` field follows the format '%Y-%m-%d' and contains only valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `discount_code` column matches the regex pattern `^[A-Z]{5}-[0-9]{4}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"discount_code\", regex=r\"^[A-Z]{5}-[0-9]{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `loyalty_points` column contains only non-negative integers. Ensure uniqueness and non-null entries.","generated_expectations":"expect_column_values_to_be_of_type(column=\"loyalty_points\", type_=\"int\"),expect_column_values_to_be_between(column=\"loyalty_points\", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=\"loyalty_points\"),expect_column_values_to_be_unique(column=\"loyalty_points\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `order_date` column contains datetime strings matching the format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` field (across all domains): Ensure values are distinct and match a predefined set of statuses. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"status\"),expect_column_values_to_not_be_null(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=[\"status1\", \"status2\", \"status3\", ...])  # Replace with actual statuses","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_date` column exists and that all dates fall within the last two years.","generated_expectations":"expect_column_to_exist(column=\"transaction_date\"),expect_column_values_to_be_between(column=\"transaction_date\", min_value=\"2021-10-01\", max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `timestamp` field: Validate that all entries match the ISO 8601 format and can be parsed as valid datetime objects.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_be_dateutil_parseable(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'community_events': Ensure the 'event_location' column exists. Ensure that all values in 'event_location' are non-empty strings.","generated_expectations":"expect_column_to_exist(column=\"event_location\"),expect_column_values_to_not_be_null(column=\"event_location\"),expect_column_values_to_match_regex(column=\"event_location\", regex=r\"^.+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'number_of_guests': Ensure the field matches the type 'integer'. Ensure values in (number_of_guests) are within the range of 1 to 10.","generated_expectations":"expect_column_values_to_be_of_type(column=\"number_of_guests\", type_=\"int\"),expect_column_values_to_be_between(column=\"number_of_guests\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_date` column values can be parsed using dateutil and are within the current fiscal year.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\"),expect_column_values_to_be_between(column=\"transaction_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `room_price` column, ensure values are arranged in ascending order for the `hotel_id`.","generated_expectations":"expect_column_values_to_be_increasing(column=\"room_price\", order_by=\"hotel_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `premium_amount` column values are within the range of $100 to $1,000, and that there are no negative values.","generated_expectations":"expect_column_values_to_be_between(column=\"premium_amount\", min_value=100, max_value=1000),expect_column_values_to_be_greater_than(column=\"premium_amount\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `inventory_count` is non-negative and does not exceed `max_inventory` for corresponding product entries.","generated_expectations":"expect_column_pair_values_A_to_be_less_than_B(column_A=\"inventory_count\", column_B=\"max_inventory\"),expect_column_values_to_be_between(column=\"inventory_count\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'service_request_date': Ensure all dates are valid and within the last two years. Validate the format as 'YYYY-MM-DD' and ensure no future dates.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"service_request_date\"),expect_column_values_to_match_strftime_format(column=\"service_request_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"service_request_date\", min_value=\"2021-10-01\", max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `discount` column, ensure values are not greater than `100%`.","generated_expectations":"expect_column_values_to_be_between(column=\"discount\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `orders` table is equal to the number of entries in the `invoices` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"invoices\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `hire_date` column contains dates formatted as `YYYY-MM-DD` and that all dates are before the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\"),expect_column_values_to_be_between(column=\"hire_date\", min_value=\"1900-01-01\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `experiment_id` column contains unique values and does not include any null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"experiment_id\"),expect_column_values_to_not_be_null(column=\"experiment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `game_data.json` file exists, contains valid JSON formatting, and matches the specified hash value.","generated_expectations":"expect_file_to_exist(file_path=\"game_data.json\"),expect_file_to_be_valid_json(file_path=\"game_data.json\"),expect_file_hash_to_equal(file_path=\"game_data.json\", hash_value=\"SPECIFIED_HASH_VALUE\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sent_date': Ensure this field exists. Ensure the field matches the type 'datetime'. Ensure values in 'sent_date' are not null.","generated_expectations":"expect_column_to_exist(column=\"sent_date\"),expect_column_values_to_be_of_type(column=\"sent_date\", type_=\"datetime\"),expect_column_values_to_not_be_null(column=\"sent_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_fee` field has values that are numeric and fall within the range of `0.001` to `0.1`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"transaction_fee\", type_=\"float\"),expect_column_values_to_be_between(column=\"transaction_fee\", min_value=0.001, max_value=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_date` field: Verify that all entries match the 'YYYY-MM-DD' format and exist in the past or present.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'stock_quantity': Ensure this field exists. Validate that all entries are integers greater than or equal to zero.","generated_expectations":"expect_column_to_exist(column=\"stock_quantity\"),expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `incident_date` field: Ensure all dates are valid and are of type 'date'. Validate that no future dates are recorded.","generated_expectations":"expect_column_to_exist(column=\"incident_date\"),expect_column_values_to_be_dateutil_parseable(column=\"incident_date\"),expect_column_values_to_be_of_type(column=\"incident_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"incident_date\", min_value=\"1900-01-01\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_date` column: Ensure all values are formatted as 'YYYY-MM-DD' and can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'zip_code': Ensure this field exists and that all entries match the US ZIP code pattern '^[0-9]{5}(?:-[0-9]{4})?$'.","generated_expectations":"expect_column_to_exist(column=\"zip_code\"),expect_column_values_to_match_regex(column=\"zip_code\", regex=r\"^[0-9]{5}(?:-[0-9]{4})?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'associated_lawyers': Ensure the field matches the type 'text'. Ensure values in 'associated_lawyers' must not match any SQL-like patterns indicating injection attacks.","generated_expectations":"expect_column_values_to_be_of_type(column=\"associated_lawyers\", type_=\"text\"),expect_column_values_to_not_match_regex(column=\"associated_lawyers\", regex=r\".*(--|;|\\\/\\*|\\*\\\/|\\'|\\\"|=|<|>).*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields 'first_name' and 'last_name': Ensure both fields are of type 'text'. Validate that the lengths of values in (first_name) and (last_name) do not exceed 50 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"first_name\", type_=\"text\"),expect_column_values_to_be_of_type(column=\"last_name\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"first_name\", min_value=0, max_value=50),expect_column_value_lengths_to_be_between(column=\"last_name\", min_value=0, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'subscription_start_date': Ensure the field matches the type 'datetime'. Verify that all values can be parsed using dateutil.","generated_expectations":"expect_column_values_to_be_of_type(column=\"subscription_start_date\", type_=\"datetime\"),expect_column_values_to_be_dateutil_parseable(column=\"subscription_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `polling_station_id` is present for all records and does not contain duplicates.","generated_expectations":"expect_column_values_to_not_be_null(column=\"polling_station_id\"),expect_column_values_to_be_unique(column=\"polling_station_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `premium_amount` field has a minimum value of 100 and a maximum of 10,000, with no null entries.","generated_expectations":"expect_column_min_to_be_between(column=\"premium_amount\", min_value=100),expect_column_max_to_be_between(column=\"premium_amount\", max_value=10000),expect_column_values_to_not_be_null(column=\"premium_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the standard deviation of the `patient_wait_time` column does not exceed 20 minutes.","generated_expectations":"expect_column_stdev_to_be_between(column=\"patient_wait_time\", min_value=0, max_value=20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `timestamp` field: Ensure the field cannot be null. Validate that all entries follow the ISO 8601 format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"timestamp\"),expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_amount` column contains values greater than or equal to 0 and has a standard deviation under 50.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0),expect_column_stdev_to_be_between(column=\"transaction_amount\", max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'customers' table: Confirm that the 'customer_id' column exists and contains unique values, and ensure the row count is equal to the number of active customers.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_be_unique(column=\"customer_id\"),expect_table_row_count_to_equal(other_table=\"active_customers\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the values in the `cost` column are greater than zero and less than the corresponding values in the `price` column.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"cost\", column_B=\"price\"),expect_column_values_to_be_between(column=\"cost\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'assignment_due_date': Ensure the field matches the type 'datetime'. Ensure values in (assignment_due_date) are in increasing order compared to (submission_date). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"assignment_due_date\"),expect_column_values_to_be_of_type(column=\"assignment_due_date\", type_=\"datetime\"),expect_column_values_to_be_increasing(column=\"assignment_due_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `contract_length` column only contains integer values, with a range of 1 to 36 months.","generated_expectations":"expect_column_values_to_be_of_type(column=\"contract_length\", type_=\"int\"),expect_column_values_to_be_between(column=\"contract_length\", min_value=1, max_value=36)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `check_in_date` field contains valid dates and that all dates are in the future.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"check_in_date\"),expect_column_values_to_be_greater_than(column=\"check_in_date\", value=datetime.datetime.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `blood_pressure` column, verify that the mean systolic value is below 140 and the diastolic value is below 90.","generated_expectations":"expect_column_mean_to_be_between(column=\"blood_pressure_systolic\", min_value=None, max_value=140),expect_column_mean_to_be_between(column=\"blood_pressure_diastolic\", min_value=None, max_value=90)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `insured_age` values are within the range of `18` to `65` years old and are presented in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"insured_age\", min_value=18, max_value=65),expect_column_values_to_be_increasing(column=\"insured_age\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_id` column contains unique values and does not allow nulls.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `check_in_date` and `check_out_date` are formatted correctly and that the `check_out_date` is always later than the `check_in_date`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"check_in_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_match_strftime_format(column=\"check_out_date\", strftime_format=\"%Y-%m-%d\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"check_out_date\", column_B=\"check_in_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `delivery_date` column: Ensure all dates are in the future and formatted as `%Y-%m-%d`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"delivery_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `threat_level` column contains only the values from the set `['Low', 'Medium', 'High']`. Any other value should be flagged as invalid.","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_level\", value_set=['Low', 'Medium', 'High'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_id` column contains only unique values representing different IoT devices. Verify that this field is non-null and of type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_not_be_null(column=\"device_id\"),expect_column_values_to_be_of_type(column=\"device_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the total row count in the `user_activity` table equals the total in the `subscription_data` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"user_activity\", other_table_name=\"subscription_data\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `user_rating` column contains numeric values between 1 and 10, ensuring no outliers exceed this range.","generated_expectations":"expect_column_values_to_be_between(column=\"user_rating\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `category`: Ensure the field contains only distinct values matching `['Electronics', 'Apparel', 'Home']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"category\", value_set=['Electronics', 'Apparel', 'Home'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `player_rating` column has a mean value between `0` and `10` and each rating is a float within that range.","generated_expectations":"expect_column_mean_to_be_between(column=\"player_rating\", min_value=0, max_value=10),expect_column_values_to_be_between(column=\"player_rating\", min_value=0.0, max_value=10.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` column: Confirm that the maximum salary recorded does not exceed $200,000 and the average salary is greater than $50,000.","generated_expectations":"expect_column_max_to_be_between(column=\"salary\", min_value=None, max_value=200000),expect_column_mean_to_be_between(column=\"salary\", min_value=50000, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `age_of_policyholder` column has values ranging from 18 to 100, with a standard deviation below 15.","generated_expectations":"expect_column_values_to_be_between(column=\"age_of_policyholder\", min_value=18, max_value=100),expect_column_stdev_to_be_between(column=\"age_of_policyholder\", min_value=0, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `order_status` column: Ensure it contains only values from the predefined set `['Pending', 'Shipped', 'Cancelled']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"order_status\", value_set=[\"Pending\", \"Shipped\", \"Cancelled\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `trailer_url` column matches the regular expression for valid URLs: `^(http|https):\/\/.*$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"trailer_url\", regex=r\"^(http|https):\/\/.*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `response_time` column is numeric and greater than or equal to zero, and does not allow null entries.","generated_expectations":"expect_column_values_to_be_of_type(column=\"response_time\", type_=\"float\"),  # Assuming numeric includes float,expect_column_values_to_be_between(column=\"response_time\", min_value=0, max_value=None),expect_column_values_to_not_be_null(column=\"response_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'inventory': Ensure the columns 'warehouse_id', 'product_sku', and 'quantity' exist in that order. Validate that the total number of rows is between 50 and 1000.","generated_expectations":"expect_table_columns_to_match_ordered_list(column_list=[\"warehouse_id\", \"product_sku\", \"quantity\"]),expect_table_row_count_to_be_between(min_value=50, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_id` field across domains, ensure that it matches the regex pattern `^TX[0-9]{8}$` and that all entries are unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^TX[0-9]{8}$\"),expect_column_values_to_be_unique(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For column 'humidity': Confirm that the values fall between 0 and 100 percent. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"humidity\"),expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `billing_details` column contains valid JSON objects conforming to the schema `{ 'amount': 'number', 'due_date': 'string' }`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"billing_details\", schema={\"type\": \"object\", \"properties\": {\"amount\": {\"type\": \"number\"}, \"due_date\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `player_count` column values are integers within the range of 1 to 10000.","generated_expectations":"expect_column_values_to_be_between(column=\"player_count\", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=\"player_count\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `publish_date` column values adhere to the format 'YYYY-MM-DD HH:MM:SS' and are valid datetime entries.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"publish_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"publish_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `game_date` field: Validate that all values are in the format `YYYY-MM-DD` and fall within the current season dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"game_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"game_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `check_in` and `check_out` dates in the `reservation` table maintain logical sequencing (check-out must be after check-in).","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"check_out\", column_B=\"check_in\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_id` column exists and contains unique identifiers matching the format 'DEV-XXXX', where 'XXXX' is a numeric value.","generated_expectations":"expect_column_to_exist(column=\"device_id\"),expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_match_regex(column=\"device_id\", regex=r\"^DEV-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'phone_number': Ensure the expect column to exist; Ensure this field matches the format 'phone number' and is required (not null).","generated_expectations":"expect_column_to_exist(column=\"phone_number\"),expect_column_values_to_not_be_null(column=\"phone_number\"),expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\+?[1-9]\\d{1,14}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'developer' field: Ensure the field exists and matches the type 'text'. Validate that its length is between 3 and 50 characters and does not contain numeric values.","generated_expectations":"expect_column_to_exist(column=\"developer\"),expect_column_values_to_be_of_type(column=\"developer\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"developer\", min_value=3, max_value=50),expect_column_values_to_not_match_regex(column=\"developer\", regex=r\"\\d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `customer_feedback` table is equal to the number of unique entries in the `customer_id` column.","generated_expectations":"expect_table_row_count_to_equal(column=\"customer_feedback\", value=expect_column_unique_value_count_to_be_equal(column=\"customer_id\"))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `shipping_cost` column: Ensure the values are non-negative and of type 'float'. No missing values allowed.","generated_expectations":"expect_column_values_to_be_between(column=\"shipping_cost\", min_value=0),expect_column_values_to_be_of_type(column=\"shipping_cost\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"shipping_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the average days on market for properties in the `listings` table does not exceed 90 days.","generated_expectations":"expect_column_mean_to_be_between(column=\"days_on_market\", min_value=None, max_value=90)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `check_in_date`: Ensure the datetime format is 'YYYY-MM-DD' and that it is not earlier than today's date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"check_in_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"check_in_date\")  # This checks for valid datetime parsing, though not specifically for today's date. ,# A separate expectation would be needed to check that dates are not earlier than today.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `precipitation_type` column only includes values from the set `['Rain', 'Snow', 'None']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"precipitation_type\", value_set=['Rain', 'Snow', 'None'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the column `publication_year`: Confirm that all values are integers within the range of 1900 to the current year and that there are no missing entries.","generated_expectations":"expect_column_values_to_be_between(column=\"publication_year\", min_value=1900, max_value=2023),expect_column_values_to_not_be_null(column=\"publication_year\"),expect_column_values_to_be_of_type(column=\"publication_year\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `district_number`: Ensure values are integers and within the range of 1 to 100.","generated_expectations":"expect_column_values_to_be_of_type(column=\"district_number\", type_=\"int\"),expect_column_values_to_be_between(column=\"district_number\", min_value=1, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `booking_date` column contains dates that are not in the past.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"booking_date\", value=\"2023-10-19\")  # Use current date as an example, replace with appropriate date as needed.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `json_data` column: Ensure all entries are valid JSON objects and contain a 'status' field.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", schema={\"type\": \"object\", \"properties\": {\"status\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `humidity` values are consistently below the `dew_point` values across all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"dew_point\", column_B=\"humidity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `quantity` column values are within the range of 1 to 1000.","generated_expectations":"expect_column_values_to_be_between(column=\"quantity\", min_value=1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `email` column matches the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_tracking_number': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"shipment_tracking_number\")\r,expect_column_values_to_not_be_null(column=\"shipment_tracking_number\")\r,expect_column_values_to_be_of_type(column=\"shipment_tracking_number\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `last_payment_date` column contains dates that can be parsed using dateutil.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"last_payment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `course_completion_date` values have a median that falls within the current academic year and does not include null entries.","generated_expectations":"expect_column_median_to_be_between(column=\"course_completion_date\", min_value=\"2023-08-01\", max_value=\"2024-05-31\"),expect_column_values_to_not_be_null(column=\"course_completion_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `status` column only contains distinct values from the set ['Open', 'Closed', 'Pending'] and that 'Closed' cases have a valid `case_closed_date`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Open\", \"Closed\", \"Pending\"]),expect_column_values_to_not_be_null(column=\"case_closed_date\")  # This assumes that 'case_closed_date' should be checked for non-null only when 'status' is 'Closed'","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `weather_condition` column includes only distinct values from the set `['Sunny', 'Rainy', 'Cloudy', 'Snowy']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"weather_condition\", value_set=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `guest_email` field matches the format of a valid email address and does not exceed 255 characters in length.","generated_expectations":"expect_column_values_to_match_regex(column=\"guest_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_value_lengths_to_be_between(column=\"guest_email\", min_value=1, max_value=255)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'child_count': Ensure the field matches the type 'integer'. Ensure the field contains values greater than or equal to 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"child_count\")\r,expect_column_values_to_be_of_type(column=\"child_count\", type_=\"int\")\r,expect_column_values_to_be_between(column=\"child_count\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the column `status`: Ensure values are from the set `['Open', 'Closed', 'Pending']`. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Open\", \"Closed\", \"Pending\"]),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'account_balance': Ensure the field matches the type 'decimal'. Validate that all values in (account_balance) are within the range of $0.00 to $1,000,000.00.","generated_expectations":"expect_column_values_to_be_of_type(column=\"account_balance\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"account_balance\", min_value=0.00, max_value=1000000.00)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `platform`: Ensure values are valid JSON objects that match the specified schema for gaming platforms.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"platform\", schema={\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}, \"type\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'subscription_start_date': Ensure the field matches the type 'datetime'. All values must adhere to the format 'YYYY-MM-DD' and not be in the past.","generated_expectations":"expect_column_to_exist(column=\"subscription_start_date\"),expect_column_values_to_be_of_type(column=\"subscription_start_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"subscription_start_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"subscription_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_date` column has no missing values and is formatted as 'MM\/DD\/YYYY'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"order_date\"),expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%m\/%d\/%Y\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'employee_id': Ensure the field matches the type 'integer'. Ensure values in (employee_id) are unique across records within the dataset.","generated_expectations":"expect_column_values_to_be_of_type(column=\"employee_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `date_of_birth` field is formatted as YYYY-MM-DD and that all entries are at least 13 years old.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"date_of_birth\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"date_of_birth\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `content_metadata` table: Ensure that the `author_id` column values exist in the `users` table.","generated_expectations":"expect_column_values_to_be_in_set(column=\"author_id\", value_set=users_table_author_id_values)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `candidate_name` column matches a predefined regex pattern for valid names and contains no empty strings.","generated_expectations":"expect_column_values_to_match_regex(column=\"candidate_name\", regex=r\"^[A-Za-z\\s'-]+$\"),expect_column_values_to_not_match_regex(column=\"candidate_name\", regex=r\"^$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `status`: Ensure the field contains only distinct values matching `['In Transit', 'Delivered', 'Cancelled']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"status\", value_set=[\"In Transit\", \"Delivered\", \"Cancelled\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `reservations` table equals the number of rows in the `customers` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"reservations\", other_table_name=\"customers\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'call_records': Ensure that the number of rows is greater than or equal to 1000. Verify that the columns ['call_duration', 'call_type', 'timestamp'] exist and are in the correct order.","generated_expectations":"expect_table_row_count_to_be_between(min_value=1000),expect_table_columns_to_match_ordered_list(column_list=[\"call_duration\", \"call_type\", \"timestamp\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'post_slug': Ensure it matches the regular expression `^[a-z0-9-]+$` and is unique across the dataset. Validate that the length is between 5 and 100 characters.","generated_expectations":"expect_column_values_to_match_regex(column=\"post_slug\", regex=r\"^[a-z0-9-]+$\"),expect_column_values_to_be_unique(column=\"post_slug\"),expect_column_value_lengths_to_be_between(column=\"post_slug\", min_value=5, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `humidity` percentage values are unique and fall within the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_unique(column=\"humidity\"),expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `player_id` column contains only unique identifiers and matches the specified set of player IDs.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_id\"),expect_column_values_to_be_in_set(column=\"player_id\", value_set=specified_set_of_player_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure the field matches the type 'text'. Validate that all values in (email_address) conform to the regex pattern for valid email formats. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"email_address\"),expect_column_values_to_be_of_type(column=\"email_address\", type_=\"text\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category_id': Ensure all values in 'category_id' are present in the predefined set ['electronics', 'clothing', 'home']. Validate no missing values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category_id\", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=\"category_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_rating` column: Ensure that the standard deviation is less than `1.5`, and the values fall within the range of `1 to 5`.","generated_expectations":"expect_column_stdev_to_be_between(column=\"user_rating\", min_value=0, max_value=1.5),expect_column_values_to_be_between(column=\"user_rating\", min_value=1, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `incident_report` column, ensure it is a valid JSON object conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"incident_report\", schema={\/* specify your JSON schema here *\/})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combined `points` and `assists` columns for each player in a game do not exceed the maximum value of 200.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"points\", \"assists\"], value=200)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `fiscal_year` values are sequential and fall within the range of 2000 to the current year.","generated_expectations":"expect_column_values_to_be_increasing(column=\"fiscal_year\"),expect_column_values_to_be_between(column=\"fiscal_year\", min_value=2000, max_value=current_year)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the distribution of `in-game purchases` follows a normal distribution with a mean close to 50.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"in-game purchases\", threshold=0.05),expect_column_mean_to_be_between(column=\"in-game purchases\", min_value=45, max_value=55)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `submission_date` column values adhere to the format `'%Y-%m-%d'` and can be parsed correctly using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"submission_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"submission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `check_in_date` field: Validate that all dates are within the range of '2023-01-01' to '2023-12-31' and are of type 'date'.","generated_expectations":"expect_column_values_to_be_between(column=\"check_in_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\"),expect_column_values_to_be_of_type(column=\"check_in_date\", type_=\"date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `balance` column contains only numeric values. Ensure no entry in this column is null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"balance\", type_=\"numeric\"),expect_column_values_to_not_be_null(column=\"balance\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_rating` column has a standard deviation below 1.5 to reflect consistent customer feedback.","generated_expectations":"expect_column_stdev_to_be_between(column=\"customer_rating\", max_value=1.5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'content_id': Ensure the field matches the type 'uuid'. Ensure values in (content_id) are unique and follow the UUID format.","generated_expectations":"expect_column_values_to_be_of_type(column=\"content_id\", type_=\"uuid\"),expect_column_values_to_be_unique(column=\"content_id\"),expect_column_values_to_match_regex(column=\"content_id\", regex=r\"^[{(]?[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}[)}]?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_start_date': Ensure this field exists. Validate that all dates are within the range of '2020-01-01' to '2023-12-31'.","generated_expectations":"expect_column_to_exist(column=\"service_start_date\"),expect_column_values_to_be_between(column=\"service_start_date\", min_value=\"2020-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `email_body` column contains no invalid JSON structures and is less than 10,000 characters.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"email_body\"),expect_column_value_lengths_to_be_between(column=\"email_body\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `status` column contains only distinct values from the set `['Pending', 'Approved', 'Rejected']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Pending', 'Approved', 'Rejected'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `check_in_date` column contains no missing values. Validate that all entries are of type 'date' and in the future.","generated_expectations":"expect_column_values_to_not_be_null(column=\"check_in_date\"),expect_column_values_to_be_of_type(column=\"check_in_date\", type_=\"date\"),expect_column_values_to_be_in_set(column=\"check_in_date\", value_set=[date for date in pd.date_range(start=datetime.now(), end=pd.Timestamp.max)])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `orders` table is equal to the number of rows in the `customers` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"customers\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'vehicle_registration': Ensure this field exists. Validate that (vehicle_registration) matches the regex pattern '^[A-Z]{1,3}-\\d{1,6}$' and does not contain any invalid characters.","generated_expectations":"expect_column_to_exist(column=\"vehicle_registration\"),expect_column_values_to_match_regex(column=\"vehicle_registration\", regex=r\"^[A-Z]{1,3}-\\d{1,6}$\"),expect_column_values_to_not_match_regex(column=\"vehicle_registration\", regex=r\"[^A-Z0-9-]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'player_statistics': Ensure the field is a valid JSON object conforming to the schema defining 'goals', 'assists', and 'minutes_played' as required fields.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"player_statistics\", schema={\"type\": \"object\", \"properties\": {\"goals\": {\"type\": \"integer\"}, \"assists\": {\"type\": \"integer\"}, \"minutes_played\": {\"type\": \"integer\"}}, \"required\": [\"goals\", \"assists\", \"minutes_played\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `last_active` column contains datetime entries that can be parsed using dateutil and are no older than 24 hours.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"last_active\"),expect_column_values_to_be_between(column=\"last_active\", min_value=datetime.now() - timedelta(hours=24), max_value=datetime.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `phone_number` column contains only strings that match the pattern `^\\(\\d{3}\\) \\d{3}-\\d{4}$` for valid US phone formats.","generated_expectations":"expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\(\\d{3}\\) \\d{3}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'meter_reading_date': Ensure it is in the format 'YYYY-MM-DD' and verify that all dates are unique within the dataset.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"meter_reading_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_unique(column=\"meter_reading_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'subscriber_id': Ensure this field exists and matches the type 'integer'. Verify that all values in 'subscriber_id' are unique and do not contain nulls.","generated_expectations":"expect_column_to_exist(column=\"subscriber_id\"),expect_column_values_to_be_of_type(column=\"subscriber_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"subscriber_id\"),expect_column_values_to_not_be_null(column=\"subscriber_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `employee_id` column contains values from the set of active employee IDs and there are no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"employee_id\", value_set=active_employee_ids),expect_column_values_to_be_unique(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `package_weight` column: Ensure that it contains only positive float values and has no missing entries.","generated_expectations":"expect_column_values_to_not_be_null(column=\"package_weight\"),expect_column_values_to_be_between(column=\"package_weight\", min_value=0.0, max_value=None),expect_column_values_to_be_of_type(column=\"package_weight\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `battery_level` field: Ensure it is required (not null) and contains only integer values between 0 and 100.","generated_expectations":"expect_column_values_to_not_be_null(column=\"battery_level\"),expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"battery_level\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For column 'deductible_amount': Validate that all values are integers greater than or equal to 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"deductible_amount\"),expect_column_values_to_be_of_type(column=\"deductible_amount\", type_=\"int\"),expect_column_values_to_be_between(column=\"deductible_amount\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate the `shipment_weight` column to ensure all entries are numeric and fall within the range of 0.1 to 500 pounds.","generated_expectations":"expect_column_values_to_be_of_type(column=\"shipment_weight\", type_=\"float\"),expect_column_values_to_be_between(column=\"shipment_weight\", min_value=0.1, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `attachment_size`: Ensure the field matches the type 'integer'. Ensure values in `attachment_size` must be greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"attachment_size\", type_=\"int\"),expect_column_values_to_be_between(column=\"attachment_size\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_timestamp` field: Ensure all values follow the UNIX timestamp format. Validate that there are no null values and that all entries are unique.","generated_expectations":"expect_column_to_exist(column=\"transaction_timestamp\"),expect_column_values_to_not_be_null(column=\"transaction_timestamp\"),expect_column_values_to_be_unique(column=\"transaction_timestamp\"),expect_column_values_to_match_regex(column=\"transaction_timestamp\", regex=r\"^\\d{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_usage': Ensure the field exists and matches the type 'integer'. Validate that the average data usage in (data_usage) is not greater than 5000 MB.","generated_expectations":"expect_column_to_exist(column=\"data_usage\"),expect_column_values_to_be_of_type(column=\"data_usage\", type_=\"int\"),expect_column_mean_to_be_between(column=\"data_usage\", min_value=None, max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of `transaction_amount` and `fees` equals the `total_amount` for each record.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"transaction_amount\", column_B=\"total_amount\"),expect_column_pair_values_to_be_equal(column_A=\"fees\", column_B=\"total_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `precipitation`: Ensure this field matches the type 'decimal'. Confirm no negative values are present in this column.","generated_expectations":"expect_column_values_to_be_of_type(column=\"precipitation\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"precipitation\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column contains only unique values and must not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_not_be_null(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` column: Verify that all values are greater than `0` and less than or equal to `10,000,000`.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=10000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `number_of_bedrooms`: Ensure the values are integers between 1 and 10, inclusive.","generated_expectations":"expect_column_values_to_be_between(column=\"number_of_bedrooms\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'comment_id': Ensure this field contains unique values. Ensure this field matches the type 'integer'. Ensure the field is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"comment_id\"),expect_column_values_to_be_of_type(column=\"comment_id\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"comment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `discount` column values are between 0 and 50% and confirm that there are no null entries.","generated_expectations":"expect_column_values_to_be_between(column=\"discount\", min_value=0, max_value=50),expect_column_values_to_not_be_null(column=\"discount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `block_number`: Verify that all values are within the range of 0 to 9999999 and are arranged in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"block_number\", min_value=0, max_value=9999999),expect_column_values_to_be_increasing(column=\"block_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `response_time` column has a standard deviation less than 15 seconds, indicating consistency in participant responses.","generated_expectations":"expect_column_stdev_to_be_between(column=\"response_time\", max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_number` column contains unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"account_number\"),expect_column_values_to_not_be_null(column=\"account_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_email': Ensure the field matches the type 'text'. Validate that the email follows standard formatting rules and does not exceed 256 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_email\"),expect_column_values_to_be_of_type(column=\"customer_email\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"customer_email\", min_value=1, max_value=256),expect_column_values_to_match_regex(column=\"customer_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the combination of `author_id` and `publication_year`: Ensure that these fields uniquely identify each record.","generated_expectations":"expect_compound_columns_to_be_unique(columns=[\"author_id\", \"publication_year\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `cancellation_policy` field only contains values from the set `['Flexible', 'Moderate', 'Strict']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"cancellation_policy\", value_set=['Flexible', 'Moderate', 'Strict'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `enrollment_date` column to confirm all entries are in the correct date format (YYYY-MM-DD) and fall within the current academic year.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"2023-08-01\", max_value=\"2024-05-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_description': Ensure the field matches the type 'text'. Validate that the length of string values falls within a range of 10 to 500 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"product_description\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"product_description\", min_value=10, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `insurance_policy_number` column: Ensure all entries match the pattern of a valid insurance policy number and are of type 'string'.","generated_expectations":"expect_column_values_to_match_regex(column=\"insurance_policy_number\", regex=r\"^[A-Z0-9-]+$\"),expect_column_values_to_be_of_type(column=\"insurance_policy_number\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `patient_id` column contains unique identifiers for each patient.","generated_expectations":"expect_column_values_to_be_unique(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `age` column values are between 18 and 120 and are arranged in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"age\", min_value=18, max_value=120),expect_column_values_to_be_increasing(column=\"age\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `stock_quantity` column only contains integer values that do not fall below `0`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `balance` column: Ensure all values are numeric. Validate that the minimum balance is greater than or equal to 0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"balance\", type_=\"numeric\"),expect_column_min_to_be_between(column=\"balance\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'rating': Ensure the average rating is between 1 and 5. Ensure there are no null values in this column.","generated_expectations":"expect_column_mean_to_be_between(column=\"rating\", min_value=1, max_value=5),expect_column_values_to_not_be_null(column=\"rating\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` field: Confirm that all values are of type 'numeric' and fall within the range of $30,000 to $200,000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"salary\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"salary\", min_value=30000, max_value=200000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `fraud_alert_date` column: Ensure all entries are formatted as 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"fraud_alert_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"fraud_alert_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'subscription_plans': Ensure the columns 'plan_id', 'plan_name', and 'price' exist in that order. Ensure the number of rows is equal to 5.","generated_expectations":"expect_table_columns_to_match_ordered_list(column_list=[\"plan_id\", \"plan_name\", \"price\"]),expect_table_row_count_to_equal(value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the Kullback-Leibler divergence between `purchase_amounts` across different customer types is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"purchase_amounts\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'genre': Ensure the field exists. Validate that all values in 'genre' match at least one of the predefined categories: (Drama, Comedy, Action, Documentary).","generated_expectations":"expect_column_to_exist(column=\"genre\"),expect_column_values_to_be_in_set(column=\"genre\", value_set=[\"Drama\", \"Comedy\", \"Action\", \"Documentary\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_age` column values are within the range of 0 to 120 years.","generated_expectations":"expect_column_values_to_be_between(column=\"patient_age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'hire_date': Ensure this field is required (not null). Confirm that all dates in (hire_date) are in 'YYYY-MM-DD' format and are prior to the current date.","generated_expectations":"expect_column_values_to_not_be_null(column=\"hire_date\"),expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\")  # This ensures the dates can be parsed,# Additional check for dates being prior to the current date would typically require a custom expectation, which is not listed in the provided expectations.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `voter_id` column contains unique values and matches the format 'VOTER-\\d{8}'.","generated_expectations":"expect_column_values_to_be_unique(column=\"voter_id\"),expect_column_values_to_match_regex(column=\"voter_id\", regex=r\"^VOTER-\\d{8}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_fee': Ensure the field matches the type 'decimal'. Ensure the field contains values greater than or equal to 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"transaction_fee\")\r,expect_column_values_to_be_of_type(column=\"transaction_fee\", type_=\"decimal\")\r,expect_column_values_to_be_between(column=\"transaction_fee\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `reviews` field: Ensure it contains valid JSON objects that conform to the defined JSON schema. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"reviews\"),expect_column_values_to_match_json_schema(column=\"reviews\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'manager_id': Ensure the field matches the type 'text'. Ensure values in (manager_id) must exist in employees (employee_id). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"manager_id\")\r,expect_column_values_to_be_of_type(column=\"manager_id\", type_=\"text\")\r,expect_column_values_to_be_in_set(column=\"manager_id\", value_set=employees[\"employee_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `hire_date` column values are greater than or equal to `1980-01-01` and less than the current date.","generated_expectations":"expect_column_values_to_be_between(column=\"hire_date\", min_value=\"1980-01-01\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `editor_notes` column: Validate that string lengths are less than 250 characters. Confirm the existence of this column.","generated_expectations":"expect_column_to_exist(column=\"editor_notes\"),expect_column_value_lengths_to_be_between(column=\"editor_notes\", min_value=0, max_value=250)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'job_applications' table: Ensure the number of rows is equal to the number of entries in the 'candidates' table. Ensure this field exists.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"job_applications\", other_table_name=\"candidates\"),expect_table_columns_to_match_set(column_set=[\"job_applications\"], exact_match=False)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `resource_access` records for each user reflect a non-empty list of accessed materials in the `learning_resources` table.","generated_expectations":"expect_column_values_to_not_be_null(column=\"learning_resources\"),expect_column_values_to_be_increasing(column=\"resource_access\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of the `total_deliveries` matches the expected total of 1000 for all shipments. Validate that this field exists.","generated_expectations":"expect_column_to_exist(column=\"total_deliveries\"),expect_column_sum_to_be_between(column=\"total_deliveries\", min_value=1000, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_status': Ensure the field is required (not null). Validate that the values conform to the expected categories ['Active', 'Inactive', 'Prospect'].","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_status\"),expect_column_values_to_be_in_set(column=\"customer_status\", value_set=[\"Active\", \"Inactive\", \"Prospect\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `guest_count` column: Ensure the mean value is between 1 and 10.","generated_expectations":"expect_column_mean_to_be_between(column=\"guest_count\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `age` field: Ensure this field exists and contains values within the range of 18 to 65.","generated_expectations":"expect_column_to_exist(column=\"age\"),expect_column_values_to_be_between(column=\"age\", min_value=18, max_value=65)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `json_forecast` entries to ensure they are valid JSON objects and follow the designated schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_forecast\"),expect_column_values_to_match_json_schema(column=\"json_forecast\", schema={})  # Replace {} with the actual schema if available.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `year_built` column contains integer values and that all entries are within the range of 1900 to the current year.","generated_expectations":"expect_column_values_to_be_of_type(column=\"year_built\", type_=\"int\"),expect_column_values_to_be_between(column=\"year_built\", min_value=1900, max_value=current_year)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_status` column contains only distinct values in the set `['open', 'closed', 'in_progress']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"case_status\", value_set=['open', 'closed', 'in_progress'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'court_date': Ensure the field adheres to the datetime format 'YYYY-MM-DD'. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"court_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"court_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_sku` column has unique values representing each product. Confirm that this column does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_sku\"),expect_column_values_to_not_be_null(column=\"product_sku\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `platform`: Validate that values adhere to a specified JSON schema, ensuring structural correctness and compliance with defined types.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"platform\", schema={\"type\": \"object\", \"properties\": {}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'amount': Validate that all values are non-negative numbers. Ensure no null values.","generated_expectations":"expect_column_values_to_be_between(column=\"amount\", min_value=0),expect_column_values_to_not_be_null(column=\"amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `experiment_date` column contains datetime strings that can be parsed using dateutil in the format 'MM\/DD\/YYYY'.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"experiment_date\"),expect_column_values_to_match_strftime_format(column=\"experiment_date\", strftime_format=\"%m\/%d\/%Y\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `article_id` column has unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"article_id\"),expect_column_values_to_not_be_null(column=\"article_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `score` column contains integer values greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"score\", type_=\"int\"),expect_column_values_to_be_between(column=\"score\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `funding_source` column contains only values from the set `['Federal', 'State', 'Local', 'Private']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"funding_source\", value_set=['Federal', 'State', 'Local', 'Private'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'client_email': Ensure the field exists. Validate that all values in (client_email) do not match any SQL-like patterns from the list ['SELECT', 'DROP', 'INSERT'].","generated_expectations":"expect_column_to_exist(column=\"client_email\"),expect_column_values_to_not_match_regex_list(column=\"client_email\", regex_list=[r\".*SELECT.*\", r\".*DROP.*\", r\".*INSERT.*\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `block_height` column values are distinct and sorted in ascending order.","generated_expectations":"expect_column_values_to_be_unique(column=\"block_height\"),expect_column_values_to_be_increasing(column=\"block_height\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `enrollment_date` column values pass the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"enrollment_date\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `square_footage` column values are within the range of 300 to 20,000 square feet.","generated_expectations":"expect_column_values_to_be_between(column=\"square_footage\", min_value=300, max_value=20000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'departure_time': Ensure the field is required (not null). Validate that the datetime format matches 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_not_be_null(column=\"departure_time\"),expect_column_values_to_match_strftime_format(column=\"departure_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"departure_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the average `data_usage` in the `monthly_usage` column is between 1 and 100 GB.","generated_expectations":"expect_column_mean_to_be_between(column=\"monthly_usage\", min_value=1, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `attack_vector`: Ensure that all entries are valid JSON objects and adhere to the defined JSON schema for attack vectors.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"attack_vector\"),expect_column_values_to_match_json_schema(column=\"attack_vector\", json_schema=\"defined_schema_for_attack_vectors\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains only distinct values and that it matches the specified pattern 'TX-\\\\d{6}'.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^TX-\\d{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_type` field: Ensure it matches the type `text` and contains values from the list `['House', 'Apartment', 'Condo']`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"property_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"property_type\", value_set=['House', 'Apartment', 'Condo'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `json_response` column contains valid JSON objects and conforms to the expected schema for API responses.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_response\"),expect_column_values_to_match_json_schema(column=\"json_response\", schema={\/* schema definition here *\/})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_date` column adheres to the datetime format of `'YYYY-MM-DD'` and is not a future date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"order_date\"),expect_column_values_to_be_less_than(column=\"order_date\", value=\"now\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column has unique values and is of type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\"),expect_column_values_to_be_of_type(column=\"product_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `employee_count`: Ensure that the mean value of this column falls between 1 and 500, and check for any entries that are out of this range.","generated_expectations":"expect_column_mean_to_be_between(column=\"employee_count\", min_value=1, max_value=500),expect_column_values_to_be_between(column=\"employee_count\", min_value=1, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `number_of_attacks` column has a minimum value of 0 and a maximum value of 500.","generated_expectations":"expect_column_min_to_be_between(column=\"number_of_attacks\", min_value=0),expect_column_max_to_be_between(column=\"number_of_attacks\", max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `published_date` column adheres to the format '%Y-%m-%d' and is not a future date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"published_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"published_date\")  # This is to ensure the date is parseable,# To verify that the date is not a future date, you would typically use a custom validator, which is not part of the standard expectations. However, we can express this conceptually as:,# expect_column_values_to_be_less_than(column=\"published_date\", value=current_date)  # This line is illustrative and would require the current date as a parameter.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `status` column does not include any values outside the set `['Active', 'Inactive']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Active', 'Inactive'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `communication_type`: Ensure the values must match either `['Email', 'Chat', 'Video']` and do not include any other types.","generated_expectations":"expect_column_values_to_be_in_set(column=\"communication_type\", value_set=['Email', 'Chat', 'Video']),expect_column_values_to_not_be_in_set(column=\"communication_type\", value_set=['Email', 'Chat', 'Video'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify the distribution of `salary` values adheres to the expected parameters, with KL divergence below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"salary\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `grade` column: Ensure the values are within the set `['A', 'B', 'C', 'D', 'F']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"grade\", value_set=['A', 'B', 'C', 'D', 'F'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column contains unique identifiers, with no duplicates present.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `temperature` column contains no null values and is of type 'float'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"temperature\"),expect_column_values_to_be_of_type(column=\"temperature\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `visit_type` field contains values only from the set `['Routine', 'Emergency', 'Follow-up']` and no duplicates exist.","generated_expectations":"expect_column_values_to_be_in_set(column=\"visit_type\", value_set=['Routine', 'Emergency', 'Follow-up']),expect_column_values_to_be_unique(column=\"visit_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'device_status': Ensure the field exists. Validate that values do not match the pattern 'inactive|unknown'.","generated_expectations":"expect_column_to_exist(column=\"device_status\"),expect_column_values_to_not_match_regex(column=\"device_status\", regex=r\"inactive|unknown\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `confidence_interval` column has values formatted as `0.XX` and fall within the range of 0.0 to 1.0.","generated_expectations":"expect_column_values_to_match_regex(column=\"confidence_interval\", regex=r\"^0\\.\\d{2}$\"),expect_column_values_to_be_between(column=\"confidence_interval\", min_value=0.0, max_value=1.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `content_rating` column: Ensure values match the set `['G', 'PG', 'PG-13', 'R']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"content_rating\", value_set=['G', 'PG', 'PG-13', 'R'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `shipment_weight` field, ensure that all values are of type `float`, non-null, and fall within the range of 0.1 to 1000.0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"shipment_weight\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"shipment_weight\"),expect_column_values_to_be_between(column=\"shipment_weight\", min_value=0.1, max_value=1000.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'num_bedrooms': Ensure the field exists. Validate that the values in (num_bedrooms) are integers ranging from 1 to 10, inclusive.","generated_expectations":"expect_column_to_exist(column=\"num_bedrooms\"),expect_column_values_to_be_between(column=\"num_bedrooms\", min_value=1, max_value=10),expect_column_values_to_be_of_type(column=\"num_bedrooms\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `departure_time` field follows the `'%Y-%m-%d %H:%M:%S'` format and contains no null values.","generated_expectations":"expect_column_to_exist(column=\"departure_time\"),expect_column_values_to_match_strftime_format(column=\"departure_time\", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_not_be_null(column=\"departure_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `communication_timestamp` field: Ensure the values are in the ISO 8601 format and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"communication_timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\"),expect_column_values_to_be_dateutil_parseable(column=\"communication_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `polling_station` column contains distinct values from the predefined list of valid polling locations.","generated_expectations":"expect_column_values_to_be_in_set(column=\"polling_station\", value_set=valid_polling_locations)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the values in the `job_title` column are unique combinations when paired with the `department` column.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"job_title\", column_B=\"department\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_profiles`: Ensure that `email` follows a valid email format. Verify that `username` is unique across records.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_be_unique(column=\"username\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `vehicle_identification_number` (VIN) field matches the pattern for VINs and has a length of exactly `17` characters.","generated_expectations":"expect_column_values_to_match_regex(column=\"vehicle_identification_number\", regex=r\"^[A-HJ-NPR-Z0-9]{17}$\"),expect_column_value_lengths_to_equal(column=\"vehicle_identification_number\", length=17)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `balance` column: Verify that all values are of type 'float' and are greater than or equal to zero. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"balance\", type_=\"float\"),expect_column_values_to_be_between(column=\"balance\", min_value=0),expect_column_values_to_not_be_null(column=\"balance\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_date` column values are in a valid date format and fall within the range of the current fiscal year.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"order_date\"),expect_column_values_to_be_between(column=\"order_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `wind_speed` column does not exceed 150 and is consistently recorded as a float.","generated_expectations":"expect_column_max_to_be_between(column=\"wind_speed\", min_value=None, max_value=150),expect_column_values_to_be_of_type(column=\"wind_speed\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email` column contains only valid email addresses that match the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `author_id` column: Ensure that all values are integers greater than `0` and exist in the `user_id` list.","generated_expectations":"expect_column_values_to_be_of_type(column=\"author_id\", type_=\"int\"),expect_column_values_to_be_between(column=\"author_id\", min_value=1, max_value=None),expect_column_values_to_be_in_set(column=\"author_id\", value_set=user_id_list)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'coverage_type': Ensure the field matches the type 'text'. Ensure values in 'coverage_type' must exist in the set ['Full Coverage', 'Liability', 'Collision']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"coverage_type\"),expect_column_values_to_be_of_type(column=\"coverage_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"coverage_type\", value_set=['Full Coverage', 'Liability', 'Collision'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_plan` column: Ensure it contains only values from the allowed set `['Basic', 'Standard', 'Premium']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"service_plan\", value_set=['Basic', 'Standard', 'Premium'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `json_response` column contains valid JSON objects that conform to the specified schema in all tables.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_response\"),expect_column_values_to_match_json_schema(column=\"json_response\", schema=specified_schema)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `submission_date` is arranged in increasing order according to `assignment_id`.","generated_expectations":"expect_column_values_to_be_increasing(column=\"submission_date\", order_by_column=\"assignment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the count of unique `lawyer_id` values in the `cases` table matches the count of entries in the `lawyers` table.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"lawyer_id\", column_B=\"lawyers.lawyer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `delivery_time` column's values are within the range of 1 to 30 days from the order date.","generated_expectations":"expect_column_values_to_be_between(column=\"delivery_time\", min_value=1, max_value=30)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `weight` column has values within the range of `0.1` to `1000` kilograms.","generated_expectations":"expect_column_values_to_be_between(column=\"weight\", min_value=0.1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `total_price` is the sum of `item_price` and `shipping_cost` for each order record.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"total_price\", column_B=\"item_price + shipping_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `ballot_data` field: Validate that it is a valid JSON object and conforms to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"ballot_data\"),expect_column_values_to_match_json_schema(column=\"ballot_data\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure the field matches the type 'text'. Validate that all values in (email_address) conform to the regex pattern for valid email formats. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"email_address\"),expect_column_values_to_be_of_type(column=\"email_address\", type_=\"text\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `item_code` column contains valid JSON objects conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"item_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `order_date` is always earlier than the `delivery_date` for all entries in the orders table.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"delivery_date\", column_B=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_request_id': Validate that the length of 'service_request_id' is exactly 12 characters and is unique across the dataset.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"service_request_id\", length=12),expect_column_values_to_be_unique(column=\"service_request_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `matches_played`: Ensure the mean is greater than 10, and values are of type 'integer' with no missing entries.","generated_expectations":"expect_column_mean_to_be_between(column=\"matches_played\", min_value=10),expect_column_values_to_be_of_type(column=\"matches_played\", type_=\"integer\"),expect_column_values_to_not_be_null(column=\"matches_played\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'usage_data': Ensure the field contains valid JSON objects conforming to the specified JSON schema for energy consumption.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"usage_data\", schema=\"specified JSON schema for energy consumption\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `threat_reports.pdf` file exists and is greater than `1KB` but less than `10MB`.","generated_expectations":"expect_file_to_exist(file_path=\"threat_reports.pdf\"),expect_file_size_to_be_between(file_path=\"threat_reports.pdf\", min_value=1024, max_value=10485760)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of the `budget` and `expenses` columns equals the `total_cost` column for each record.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"budget\", \"expenses\"], target_column=\"total_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `hearing_date` is always later than the `filing_date` for each case.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"hearing_date\", column_B=\"filing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_date` entries are all in the past and follow the 'YYYY-MM-DD' format.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\"),expect_column_values_to_be_between(column=\"transaction_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that combinations of `user_id` and `content_id` are unique within the `user_interactions` dataset.","generated_expectations":"expect_compound_columns_to_be_unique(column_a=\"user_id\", column_b=\"content_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combination of `voter_id` and `election_id` is unique across records.","generated_expectations":"expect_compound_columns_to_be_unique(columns=[\"voter_id\", \"election_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_balance` column contains values within the range of $0 to $1,000,000.","generated_expectations":"expect_column_values_to_be_between(column=\"account_balance\", min_value=0, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'data_usage': Ensure values in (data_usage) are within the range of 0 to 500 GB. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"data_usage\"),expect_column_values_to_be_between(column=\"data_usage\", min_value=0, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'upload_timestamp': Ensure the field matches the type 'datetime'. Validate that the values are formatted as 'YYYY-MM-DD HH:MM:SS' and are not null. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"upload_timestamp\"),expect_column_values_to_be_of_type(column=\"upload_timestamp\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"upload_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"upload_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `fraud_score` values fall within the defined range of [0, 100] and are of type 'integer'.","generated_expectations":"expect_column_values_to_be_between(column=\"fraud_score\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"fraud_score\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_date': Ensure the field is required (not null). Validate that 'transaction_date' follows the format YYYY-MM-DD and is not a future date. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"transaction_date\"),expect_column_values_to_not_be_null(column=\"transaction_date\"),expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\"),expect_column_values_to_be_in_set(column=\"transaction_date\", value_set=[date for date in range(datetime.now().year)])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_request': Ensure this field is required (not null). Validate that values are of type 'text' and conform to expected formats.","generated_expectations":"expect_column_values_to_not_be_null(column=\"service_request\"),expect_column_values_to_be_of_type(column=\"service_request\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `call_logs` file exists, is under 10MB in size, and follows the required format with valid headers.","generated_expectations":"expect_file_to_exist(file_path=\"call_logs\"),expect_file_size_to_be_between(file_path=\"call_logs\", min_value=0, max_value=10_000_000),expect_file_to_have_valid_table_header(file_path=\"call_logs\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `supplier_id` column contains only distinct values and matches entries in the `suppliers` table.","generated_expectations":"expect_column_values_to_be_unique(column=\"supplier_id\"),expect_column_values_to_be_in_set(column=\"supplier_id\", value_set=suppliers_table_entries)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_id` column contains only unique values. Ensure this field exists and is of type 'integer'.","generated_expectations":"expect_column_to_exist(column=\"patient_id\"),expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_be_of_type(column=\"patient_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `status` column values are from the set `['Pending', 'Shipped', 'Delivered']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Pending', 'Shipped', 'Delivered'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'department_code': Ensure the field matches the type 'text'. Validate that all entries in (department_code) match the regex pattern for valid department codes. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"department_code\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"department_code\"),expect_column_values_to_match_regex(column=\"department_code\", regex=r\"^[A-Z]{2,5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the sum of `votes` in each `district_number` matches the total `eligible_voters` for that district.","generated_expectations":"expect_multicolumn_sum_to_equal(column_A=\"votes\", column_B=\"eligible_voters\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `billing_amount` column, confirm that the average billing amount is between 50 and 200, and the maximum value does not exceed 500.","generated_expectations":"expect_column_mean_to_be_between(column=\"billing_amount\", min_value=50, max_value=200),expect_column_max_to_be_between(column=\"billing_amount\", max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `unit_price` column has a mean value greater than or equal to 10 and less than or equal to 1000.","generated_expectations":"expect_column_mean_to_be_between(column=\"unit_price\", min_value=10, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_amount': Ensure no missing values. Ensure all values are greater than 0 and of type 'float'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"transaction_amount\"),expect_column_values_to_be_greater_than(column=\"transaction_amount\", value=0),expect_column_values_to_be_of_type(column=\"transaction_amount\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains only unique values. Ensure this field is required (not null) and matches the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_not_be_null(column=\"transaction_id\"),expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `timestamp`: Ensure the field is required (not null) and matches the datetime format 'YYYY-MM-DDTHH:MM:SSZ'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"timestamp\"),expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%SZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check `price`: Ensure the field exists. Validate that prices are greater than 0 and are formatted correctly as decimal values.","generated_expectations":"expect_column_to_exist(column=\"price\"),expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=None),expect_column_values_to_be_of_type(column=\"price\", type_=\"decimal\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the dataset has at least 50 rows and includes columns `device_id`, `timestamp`, and `status` in that order.","generated_expectations":"expect_table_row_count_to_be_between(min_value=50),expect_table_columns_to_match_ordered_list(column_list=[\"device_id\", \"timestamp\", \"status\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `agent_id` column exists and that all values correspond to valid entries in the `agents` table.","generated_expectations":"expect_column_to_exist(column=\"agent_id\"),expect_column_values_to_be_in_set(column=\"agent_id\", value_set=agents_table_values)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `game_level` field: Ensure values are distinct and match the type 'integer'. Validate that levels are within the range of 1 to 100.","generated_expectations":"expect_column_values_to_be_unique(column=\"game_level\"),expect_column_values_to_be_of_type(column=\"game_level\", type_=\"int\"),expect_column_values_to_be_between(column=\"game_level\", min_value=1, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_number': Ensure this field is required (not null). Ensure values in (case_number) are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_number\"),expect_column_values_to_be_unique(column=\"case_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `region` column only contains values from the predefined set of valid regions.","generated_expectations":"expect_column_values_to_be_in_set(column=\"region\", value_set=valid_regions)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'ip_address': Validate that all entries conform to the standard IPv4 format and do not match any entries from the blacklist.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"),expect_column_values_to_not_match_regex(column=\"ip_address\", regex=r\"blacklisted_ip_pattern\")  # Replace 'blacklisted_ip_pattern' with actual regex for blacklist.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that for each record, the `incident_type` and `incident_status` columns have unique combinations.","generated_expectations":"expect_compound_columns_to_be_unique(column_a=\"incident_type\", column_b=\"incident_status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `supplier_id` field contains only values from the predefined set of active suppliers.","generated_expectations":"expect_column_values_to_be_in_set(column=\"supplier_id\", value_set=active_suppliers_set)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'plan_start_date': Ensure the field is required (not null). Verify that the values in this column are valid datetime strings in the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"plan_start_date\"),expect_column_values_to_match_strftime_format(column=\"plan_start_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_number` column has a unique value for each entry and is of type 'text'. Ensure there are no null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_number\"),expect_column_values_to_be_of_type(column=\"case_number\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"case_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `content_length`: Ensure that the `content_length` is less than or equal to 280 characters. Ensure the field is of type 'integer' and not null.","generated_expectations":"expect_column_values_to_be_between(column=\"content_length\", min_value=0, max_value=280),expect_column_values_to_be_of_type(column=\"content_length\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"content_length\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `lead_time` column has values within the range of 1 to 30 days and is sorted in ascending order.","generated_expectations":"expect_column_values_to_be_between(column=\"lead_time\", min_value=1, max_value=30),expect_column_values_to_be_increasing(column=\"lead_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'phone_number': Ensure the field matches the type 'text'. Validate that all values conform to the standard phone number format using regex.","generated_expectations":"expect_column_values_to_be_of_type(column=\"phone_number\", type_=\"text\"),expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\+?[1-9]\\d{1,14}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'voter_status': Ensure the field is required (not null). Validate that the column values match one of the predefined categories: ['Active', 'Inactive', 'Pending'].","generated_expectations":"expect_column_values_to_not_be_null(column=\"voter_status\"),expect_column_values_to_be_in_set(column=\"voter_status\", value_set=['Active', 'Inactive', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_rating` column: Ensure the mean rating is above 4.0 and the maximum rating equals 5.0.","generated_expectations":"expect_column_mean_to_be_between(column=\"customer_rating\", min_value=4.0, max_value=None),expect_column_max_to_be_between(column=\"customer_rating\", max_value=5.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `settlement_amount` column contains values greater than or equal to `0` and matches the type 'decimal'.","generated_expectations":"expect_column_values_to_be_between(column=\"settlement_amount\", min_value=0),expect_column_values_to_be_of_type(column=\"settlement_amount\", type_=\"decimal\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `follower_count` field, ensure that values are greater than or equal to `following_count` for all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"follower_count\", column_B=\"following_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `transaction_amount` column values follow a Poisson distribution with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"transaction_amount\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `course_category` column contains only distinct values matching `['Science', 'Arts', 'Commerce']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"course_category\", value_set=[\"Science\", \"Arts\", \"Commerce\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `event_time` field, ensure the field matches the format 'YYYY-MM-DD HH:MM:SS' and can be parsed using dateutil across all domains.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"event_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"event_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the lengths of string values in the `player_position` column fall within a range of 2 to 15 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"player_position\", min_value=2, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'ip_address': Ensure the field matches the type 'text'. Ensure the field matches the format 'IPv4'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"ip_address\")\r,expect_column_values_to_be_of_type(column=\"ip_address\", type_=\"text\")\r,expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the CSV files in the `exports` directory have a valid header row and do not exceed `1000` lines.","generated_expectations":"expect_file_to_have_valid_table_header(file_path=\"exports\"),expect_file_line_regex_match_count_to_be_between(file_path=\"exports\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `event_date` field in the Government dataset is formatted as 'MM\/DD\/YYYY' and does not contain future dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"event_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_between(column=\"event_date\", min_value=\"01\/01\/1900\", max_value=\"current_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure this field exists. Ensure the field matches the type 'integer'. Ensure values in 'customer_id' are unique.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `course_code` field matches the predefined format `^[A-Z]{3}-[0-9]{3}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^[A-Z]{3}-[0-9]{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `severity_level` column values are within the range of 1 to 5, where 1 indicates low severity and 5 indicates high severity.","generated_expectations":"expect_column_values_to_be_between(column=\"severity_level\", min_value=1, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'order_id': Ensure the field is required (not null). Ensure the field contains unique values of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"order_id\"),expect_column_values_to_be_unique(column=\"order_id\"),expect_column_values_to_be_of_type(column=\"order_id\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `branch_code` field contains exactly 5 digits and does not include any letters or symbols.","generated_expectations":"expect_column_values_to_match_regex(column=\"branch_code\", regex=r\"^\\d{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `username` column contains unique usernames that match the regex pattern `^[a-zA-Z0-9_]{3,15}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"username\"),expect_column_values_to_match_regex(column=\"username\", regex=r\"^[a-zA-Z0-9_]{3,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `email_content` JSON field: Validate that it contains valid JSON with at least 'subject' and 'body' keys.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"email_content\"),expect_column_values_to_match_json_schema(column=\"email_content\", schema={\"type\": \"object\", \"properties\": {\"subject\": {\"type\": \"string\"}, \"body\": {\"type\": \"string\"}}, \"required\": [\"subject\", \"body\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `policy_type` field values are restricted to the set `['Life', 'Health', 'Auto']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"policy_type\", value_set=['Life', 'Health', 'Auto'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `research_id` column contains only unique values and matches the regex pattern `R^[A-Z]{2}-[0-9]{4}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"research_id\"),expect_column_values_to_match_regex(column=\"research_id\", regex=r\"^[A-Z]{2}-[0-9]{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `category_id` column values are unique across records.","generated_expectations":"expect_column_values_to_be_unique(column=\"category_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'order_quantity': Ensure this field is required (not null). Ensure all values are integers greater than or equal to 1.","generated_expectations":"expect_column_values_to_not_be_null(column=\"order_quantity\"),expect_column_values_to_be_between(column=\"order_quantity\", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=\"order_quantity\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` field: Validate that all values are of type 'float'. Ensure no missing values are present.","generated_expectations":"expect_column_values_to_be_of_type(column=\"price\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `agent_id` column exists and that all values correspond to valid agent records.","generated_expectations":"expect_column_to_exist(column=\"agent_id\"),expect_column_values_to_be_in_set(column=\"agent_id\", value_set=valid_agent_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `subscription_start_date`, ensure it adheres to the format `YYYY-MM-DD` and is not a future date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"subscription_start_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_less_than(column=\"subscription_start_date\", value=\"now\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'enrollment_date': Ensure this field is required (not null). Ensure the field matches the type 'date'. Ensure no duplicate dates exist for the same student.","generated_expectations":"expect_column_to_exist(column=\"enrollment_date\"),expect_column_values_to_not_be_null(column=\"enrollment_date\"),expect_column_values_to_be_of_type(column=\"enrollment_date\", type_=\"date\"),expect_select_column_values_to_be_unique_within_record(column=\"enrollment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `post_id` column contains unique values with the format 'PST-YYYY-MM-DD-XXXX' where X is a digit.","generated_expectations":"expect_column_values_to_be_unique(column=\"post_id\"),expect_column_values_to_match_regex(column=\"post_id\", regex=r\"^PST-\\d{4}-\\d{2}-\\d{2}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'energy_type': Ensure the field matches the type 'text'. Validate that values in (energy_type) match at least one pattern from the list: 'electricity', 'gas', 'water'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"energy_type\", type_=\"text\"),expect_column_values_to_match_regex_list(column=\"energy_type\", regex_list=[r\"^electricity$\", r\"^gas$\", r\"^water$\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'voter_id': Ensure this field is required (not null) and matches the format of a unique identifier. Ensure values in (voter_id) are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"voter_id\"),expect_column_values_to_be_unique(column=\"voter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'watch_time': Validate that the total watch time for each user is a non-negative integer and that the average watch time does not exceed 300 minutes.","generated_expectations":"expect_column_mean_to_be_between(column=\"watch_time\", min_value=0, max_value=300),expect_column_sum_to_be_between(column=\"watch_time\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `employee_id` column contains unique values corresponding to each employee. Ensure this column does not allow null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\"),expect_column_values_to_not_be_null(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'election_date': Ensure the field is required (not null). Ensure all values in 'election_date' match the type 'date'. Ensure the date is not in the past.","generated_expectations":"expect_column_values_to_not_be_null(column=\"election_date\"),expect_column_values_to_be_dateutil_parseable(column=\"election_date\"),expect_column_values_to_be_between(column=\"election_date\", min_value=str(datetime.date.today()))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure the field matches the type 'text'. Ensure the field has a maximum length of 20. Ensure the field has a minimum length of 10. Ensue this field exist","generated_expectations":"expect_column_to_exist(column=\"customer_id\")\r,expect_column_value_lengths_to_be_between(column=\"customer_id\", min_value=10, max_value=20)\r,expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the entries in the `data_quality` column match the set `['High', 'Medium', 'Low']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"data_quality\", value_set=['High', 'Medium', 'Low'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the values in the `property_type` column are restricted to `['Residential', 'Commercial', 'Industrial']` to maintain consistency.","generated_expectations":"expect_column_values_to_be_in_set(column=\"property_type\", value_set=['Residential', 'Commercial', 'Industrial'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'delivery_date': Ensure this field is not null. Ensure values in 'delivery_date' are in the date format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"delivery_date\"),expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `complaint_description` field: Validate that string lengths do not exceed 500 characters and do not contain any offensive language as defined by the regex `(?:badword1|badword2|badword3)`.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"complaint_description\", min_value=0, max_value=500),expect_column_values_to_not_match_regex(column=\"complaint_description\", regex=r\"(?:badword1|badword2|badword3)\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_id` and `transaction_id` combination, ensure that it is unique across all records.","generated_expectations":"expect_compound_columns_to_be_unique(columns=[\"user_id\", \"transaction_id\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_ip': Ensure the field matches a valid IP address pattern. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_ip\"),expect_column_values_to_match_regex(column=\"user_ip\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `order_amount` column has a mean value greater than or equal to `50`.","generated_expectations":"expect_column_mean_to_be_between(column=\"order_amount\", min_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `customer_feedback` column strings are between 10 and 500 characters in length, providing sufficient detail.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=10, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `listing_date` field conforms to the format 'DD-MM-YYYY' and that all dates are in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%d-%m-%Y\"),expect_column_values_to_be_increasing(column=\"listing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'report_date': Ensure the field is required (not null). Ensure all values in 'report_date' match the type 'date'. Validate that the date falls within the current fiscal year.","generated_expectations":"expect_column_values_to_not_be_null(column=\"report_date\"),expect_column_values_to_be_dateutil_parseable(column=\"report_date\"),expect_column_values_to_be_between(column=\"report_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field `blood_pressure`: Ensure values are in the format `systolic\/diastolic` and fall within the normal range.","generated_expectations":"expect_column_values_to_match_regex(column=\"blood_pressure\", regex=r\"^\\d{1,3}\/\\d{1,3}$\"),expect_column_values_to_be_between(column=\"blood_pressure\", min_value=\"90\/60\", max_value=\"120\/80\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `customer_id` column: Ensure that all values are unique and of type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `total_order_value` column contains values that are the sum of the `quantity_ordered` multiplied by the `cost_per_item`.","generated_expectations":"expect_multicolumn_sum_to_equal(column_A=\"total_order_value\", column_B=\"quantity_ordered\", column_C=\"cost_per_item\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_date` field: Ensure it exists and is in the format YYYY-MM-DD. Confirm that the row count matches the expected number of forecast entries for the month.","generated_expectations":"expect_column_to_exist(column=\"forecast_date\"),expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\"),expect_table_row_count_to_equal(expected_value)  # Replace 'expected_value' with the actual expected number of forecast entries for the month.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'review_comments': Ensure this field can accept null values, but when present, the length of the string must be between 5 and 300 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"review_comments\", min_value=5, max_value=300),expect_column_values_to_be_null(column=\"review_comments\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `diagnosis_code` column contains only valid codes from the specified set `['A00', 'B99', 'C00']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"diagnosis_code\", value_set=['A00', 'B99', 'C00'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `hire_date` field is formatted correctly as `YYYY-MM-DD` and that all entries can be parsed into valid datetime objects.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `observation_time` column values are recorded in intervals not exceeding 30 minutes apart for accuracy.","generated_expectations":"expect_column_values_to_be_increasing(column=\"observation_time\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"observation_time\", column_B=\"observation_time\", max_difference=1800)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the average `response_time` for service requests passes the Kolmogorov-Smirnov test with a p-value greater than `0.05`.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"response_time\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `player_id` column, ensure all values are unique and consist of exactly `8` alphanumeric characters.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_id\"),expect_column_values_to_match_regex(column=\"player_id\", regex=r\"^[a-zA-Z0-9]{8}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `user_data` column in the file contains valid entries matching the regular expression `^[A-Za-z0-9_]{3,15}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"user_data\", regex=\"^[A-Za-z0-9_]{3,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'attachment_size': Ensure the field matches the type 'integer'. Ensure values in (attachment_size) are within the range of 0 to 10485760 bytes (10 MB). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"attachment_size\"),expect_column_values_to_be_of_type(column=\"attachment_size\", type_=\"int\"),expect_column_values_to_be_between(column=\"attachment_size\", min_value=0, max_value=10485760)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'trailer_link' field: Ensure the field exists and matches the type 'text'. Validate that values conform to the regex pattern '^(https?:\/\/)?(www\\\\.)?youtube\\\\.com\/watch\\\\?v=[A-Za-z0-9_-]+$'.","generated_expectations":"expect_column_to_exist(column=\"trailer_link\"),expect_column_values_to_be_of_type(column=\"trailer_link\", type_=\"text\"),expect_column_values_to_match_regex(column=\"trailer_link\", regex=r\"^(https?:\/\/)?(www\\\\.)?youtube\\\\.com\/watch\\\\?v=[A-Za-z0-9_-]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `abstract` column has a length between 100 and 1000 characters for all entries.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"abstract\", min_value=100, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `credit_score` column is within the range `300` to `850`.","generated_expectations":"expect_column_values_to_be_between(column=\"credit_score\", min_value=300, max_value=850)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `player_id` field is unique across all records. Verify that it contains no missing values and is of the type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_id\"),expect_column_values_to_not_be_null(column=\"player_id\"),expect_column_values_to_be_of_type(column=\"player_id\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure the field exists and matches the type 'text'. Validate that all user IDs are unique.","generated_expectations":"expect_column_to_exist(column=\"user_id\"),expect_column_values_to_be_of_type(column=\"user_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `location_id` field contains distinct values that correspond to valid entries in the `locations` dataset. Confirm this field is non-null.","generated_expectations":"expect_column_values_to_be_unique(column=\"location_id\"),expect_column_values_to_not_be_null(column=\"location_id\"),expect_column_values_to_be_in_set(column=\"location_id\", value_set=locations_dataset_distinct_values)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_ip': Ensure the field matches the type 'text'. Ensure values in 'user_ip' conform to valid IP address formatting.","generated_expectations":"expect_column_values_to_be_of_type(column=\"user_ip\", type_=\"text\"),expect_column_values_to_match_regex(column=\"user_ip\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^::([0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,7}:$|^([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$|^([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}$|^([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}$|^([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}$|^([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}$|^[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6}|:)$|^:((:[0-9a-fA-F]{1,4}){1,7}|:)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `hire_date` field: Ensure all dates are in the correct format 'MM\/DD\/YYYY' and can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'in_game_transactions' table: Confirm that the 'transaction_amount' column is numeric and that it passes the Chi-Square test for expected distribution.","generated_expectations":"expect_column_values_to_be_of_type(column=\"transaction_amount\", type_=\"numeric\"),expect_column_chisquare_test_p_value_to_be_greater_than(column=\"transaction_amount\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `check_out_date` field: Confirm that all dates are after the respective `check_in_date` values and adhere to the `YYYY-MM-DD` format.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"check_out_date\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"check_out_date\", column_B=\"check_in_date\"),expect_column_values_to_match_strftime_format(column=\"check_out_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_details` field: Validate that it is a valid JSON object that conforms to the specified schema and is required (not null).","generated_expectations":"expect_column_to_exist(column=\"transaction_details\"),expect_column_values_to_be_json_parseable(column=\"transaction_details\"),expect_column_values_to_not_be_null(column=\"transaction_details\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column exists and contains only values present in the `users` table.","generated_expectations":"expect_column_to_exist(column=\"user_id\"),expect_column_values_to_be_in_set(column=\"user_id\", value_set=users_table_values)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `data_record` JSON field: Validate that the content matches the required structure with keys 'data_id' (string) and 'data_value' (float).","generated_expectations":"expect_column_values_to_match_json_schema(column=\"data_record\", schema={,    \"type\": \"object\",    \"properties\": {,  \"data_id\": {\"type\": \"string\"},  \"data_value\": {\"type\": \"number\"},    },    \"required\": [\"data_id\", \"data_value\"],})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'vote_timestamp': Ensure the field is required (not null). Ensure the field matches the type 'datetime' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_not_be_null(column=\"vote_timestamp\"),expect_column_values_to_be_dateutil_parseable(column=\"vote_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the count of `sent_emails` in the `user_activity` table is between 50 and 200 for active users.","generated_expectations":"expect_column_sum_to_be_between(column=\"sent_emails\", min_value=50, max_value=200)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `game_date` field: Ensure all datetime entries match the format `YYYY-MM-DD` and are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"game_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"game_date\"),expect_column_values_to_be_between(column=\"game_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `feedback_rating` in the `CRM` system falls within the set `['1', '2', '3', '4', '5']` and contains no null values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"feedback_rating\", value_set=['1', '2', '3', '4', '5']),expect_column_values_to_not_be_null(column=\"feedback_rating\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_price` column has a Kullback-Leibler divergence of less than 0.1 when compared to historical price distributions.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"product_price\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `checkout_date`: Ensure it is always later than the `checkin_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"checkout_date\", column_B=\"checkin_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'citizen_id': Ensure the field is required (not null) and contains unique values. Validate the type as 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"citizen_id\"),expect_column_values_to_be_unique(column=\"citizen_id\"),expect_column_values_to_be_of_type(column=\"citizen_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `discount` column must be between 0% and 100%, and confirm that no values are negative.","generated_expectations":"expect_column_values_to_be_between(column=\"discount\", min_value=0, max_value=100),expect_column_values_to_be_greater_than(column=\"discount\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `conversation_id` field, ensure that values are unique across records.","generated_expectations":"expect_column_values_to_be_unique(column=\"conversation_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `account_number` column has a unique value for each record in the `accounts` table.","generated_expectations":"expect_column_values_to_be_unique(column=\"account_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure all values in the `shipping_method` column exist in the predefined set `['Air', 'Sea', 'Land']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"shipping_method\", value_set=['Air', 'Sea', 'Land'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_email': Ensure it is required (not null) and matches the type 'text'. Validate that all values are in correct email format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_email\"),expect_column_values_to_be_of_type(column=\"customer_email\", type_=\"text\"),expect_column_values_to_match_regex(column=\"customer_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_age': Ensure the field has a type of 'integer'. Validate that all values are within the range of 13 to 120 years, and check for any missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"user_age\", type_=\"int\"),expect_column_values_to_be_between(column=\"user_age\", min_value=13, max_value=120),expect_column_values_to_not_be_null(column=\"user_age\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `player_performance` data, ensure that the average points scored by players follows a normal distribution with a mean greater than 10.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"points_scored\", threshold=0.05),expect_column_mean_to_be_between(column=\"points_scored\", min_value=10, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `price` column values are within the range of $0.01 to $10,000.00 and are sorted in ascending order.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0.01, max_value=10000.00),expect_column_values_to_be_increasing(column=\"price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `user_age` column has a median value of 35 and that the sum of all values is between 1000 and 5000.","generated_expectations":"expect_column_median_to_be_between(column=\"user_age\", lower_bound=35, upper_bound=35),expect_column_sum_to_be_between(column=\"user_age\", lower_bound=1000, upper_bound=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_status` column only contains values from the set `['completed', 'pending', 'failed']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_status\", value_set=['completed', 'pending', 'failed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `temperature` column contains only numeric values and does not include any missing entries.","generated_expectations":"expect_column_values_to_not_be_null(column=\"temperature\"),expect_column_values_to_be_of_type(column=\"temperature\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `patient_email` column entries match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$` and are unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"patient_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_be_unique(column=\"patient_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status': Ensure the field exists. Validate that 'status' matches one of the values: (Pending, Shipped, Delivered, Canceled).","generated_expectations":"expect_column_to_exist(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Pending\", \"Shipped\", \"Delivered\", \"Canceled\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_id` column contains only unique values and no null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"patient_id\"),expect_column_values_to_not_be_null(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_code` field, validate that all entries are formatted as `^COURSE-[A-Z]{3}-[0-9]{3}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^COURSE-[A-Z]{3}-[0-9]{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `category` column does not have null values and only contains entries from the list of valid categories.","generated_expectations":"expect_column_values_to_not_be_null(column=\"category\"),expect_column_values_to_be_in_set(column=\"category\", value_set=[\/* list of valid categories *\/])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `measurement_date` column has values formatted as `YYYY-MM-DD` and contains no missing values.","generated_expectations":"expect_column_to_exist(column=\"measurement_date\"),expect_column_values_to_match_strftime_format(column=\"measurement_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"measurement_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'numeric'. Validate that customer IDs are distinct and fall within the range of 1 to 100,000.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"numeric\"),expect_column_unique_value_count_to_be_between(column=\"customer_id\", min_value=1, max_value=100000),expect_column_values_to_be_between(column=\"customer_id\", min_value=1, max_value=100000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `threat_level` column values are within the range of 1 to 5.","generated_expectations":"expect_column_values_to_be_between(column=\"threat_level\", min_value=1, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `supplier_id`: Ensure values in `supplier_id` must exist in the `suppliers` table. Validate that the field matches the type 'integer'.","generated_expectations":"expect_column_values_to_be_in_set(column=\"supplier_id\", value_set=suppliers_table_ids),expect_column_values_to_be_of_type(column=\"supplier_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `quantity_ordered` column contains only positive integers.","generated_expectations":"expect_column_values_to_be_between(column=\"quantity_ordered\", min_value=1, max_value=None),expect_column_values_to_be_of_type(column=\"quantity_ordered\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `consumption` field: Ensure that values are greater than zero and exist for all entries in the `household_id` column.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"consumption\", value=0),expect_column_values_to_not_be_null(column=\"consumption\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'release_date': Ensure the field matches the type 'datetime'. Validate that all values in (release_date) conform to the format 'YYYY-MM-DD'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"release_date\"),expect_column_values_to_be_of_type(column=\"release_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For columns 'origin_location' and 'destination_location': Ensure that 'origin_location' values must exist in the predefined list of valid locations. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"origin_location\"),expect_column_values_to_be_in_set(column=\"origin_location\", value_set=valid_locations)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `course_category` column includes only values from the set `['Science', 'Arts', 'Commerce']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"course_category\", value_set=['Science', 'Arts', 'Commerce'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `origin` and `destination` columns do not contain any values matching the SQL-like pattern `'%NULL%'`.","generated_expectations":"expect_column_values_to_not_match_like_pattern(column=\"origin\", pattern=\"%NULL%\"),expect_column_values_to_not_match_like_pattern(column=\"destination\", pattern=\"%NULL%\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the average `student_scores` across all courses conforms to a normal distribution with a significance level of 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"student_scores\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'device_id': Ensure the field contains only distinct values. Ensure the field is of type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_be_of_type(column=\"device_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields 'salary' and 'bonus': Ensure both fields match the type 'decimal'. Validate that the sum of (salary) and (bonus) should not exceed the maximum allowable compensation limit of $200,000. Ensure these fields exist.","generated_expectations":"expect_column_to_exist(column=\"salary\"),expect_column_to_exist(column=\"bonus\"),expect_column_values_to_be_of_type(column=\"salary\", type_=\"decimal\"),expect_column_values_to_be_of_type(column=\"bonus\", type_=\"decimal\"),expect_multicolumn_sum_to_equal(column_list=[\"salary\", \"bonus\"], value=200000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `post_timestamp` column, ensure all entries are valid datetime strings that can be parsed and match the format `'%Y-%m-%dT%H:%M:%S'`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"post_timestamp\"),expect_column_values_to_match_strftime_format(column=\"post_timestamp\", strftime_format='%Y-%m-%dT%H:%M:%S')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'genre': Ensure the field exists. Ensure values in (genre) must exist in the set ['action', 'comedy', 'drama', 'horror']. Ensure this field is not null.","generated_expectations":"expect_column_to_exist(column=\"genre\"),expect_column_values_to_be_in_set(column=\"genre\", value_set=['action', 'comedy', 'drama', 'horror']),expect_column_values_to_not_be_null(column=\"genre\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column contains only unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_not_be_null(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the JSON objects in the `email_content` column are valid and contain the keys `subject`, `body`, and `recipient` with appropriate value types.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"email_content\"),expect_column_values_to_match_json_schema(column=\"email_content\", schema={,    \"type\": \"object\",    \"properties\": {,  \"subject\": {\"type\": \"string\"},  \"body\": {\"type\": \"string\"},  \"recipient\": {\"type\": \"string\"},    },    \"required\": [\"subject\", \"body\", \"recipient\"],})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `humidity` values to ensure they are presented as integers in the range of `0` to `100`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"humidity\", type_=\"int\"),expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `order_value` column values are greater than or equal to 0 and compute the average to ensure it does not exceed 50,000.","generated_expectations":"expect_column_values_to_be_between(column=\"order_value\", min_value=0),expect_column_mean_to_be_between(column=\"order_value\", min_value=None, max_value=50000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combination of `product_id` and `warehouse_id` is unique across records.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"product_id\", column_B=\"warehouse_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the mean `delivery_time` does not exceed 48 hours and the standard deviation is below 12 hours.","generated_expectations":"expect_column_mean_to_be_between(column=\"delivery_time\", min_value=0, max_value=48),expect_column_stdev_to_be_between(column=\"delivery_time\", min_value=0, max_value=12)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `vehicle_type` column entries are from the set `['Truck', 'Van', 'Motorcycle']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"vehicle_type\", value_set=['Truck', 'Van', 'Motorcycle'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `tags` column contains only distinct values and is formatted as a valid JSON array.","generated_expectations":"expect_column_values_to_be_unique(column=\"tags\"),expect_column_values_to_match_json_schema(column=\"tags\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `token_symbol` field: Ensure all values are unique and match the regex pattern '^[A-Z]{1,5}$' representing token symbols.","generated_expectations":"expect_column_values_to_be_unique(column=\"token_symbol\"),expect_column_values_to_match_regex(column=\"token_symbol\", regex=r\"^[A-Z]{1,5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `candidate_name`: Ensure the field is required (not null). Validate that all values are distinct and match the type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"candidate_name\"),expect_column_values_to_be_unique(column=\"candidate_name\"),expect_column_values_to_be_of_type(column=\"candidate_name\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `timestamp` column in the `logs` table matches the `YYYY-MM-DD HH:MM:SS` format.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `restock_date` column: Ensure all entries are valid datetime strings formatted as `%Y-%m-%d` and are in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"restock_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"restock_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'district_code': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure 'district_code' conforms to the pattern of three uppercase letters followed by three digits.","generated_expectations":"expect_column_values_to_not_be_null(column=\"district_code\"),expect_column_values_to_be_of_type(column=\"district_code\", type_=\"text\"),expect_column_values_to_match_regex(column=\"district_code\", regex=r\"^[A-Z]{3}\\d{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `engagement_rate` column: Ensure values are within the range of 0 to 1, formatted as decimals.","generated_expectations":"expect_column_values_to_be_between(column=\"engagement_rate\", min_value=0, max_value=1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `data_usage` column contains values that are non-negative integers and do not exceed 100 GB.","generated_expectations":"expect_column_values_to_be_between(column=\"data_usage\", min_value=0, max_value=100000), ,expect_column_values_to_be_of_type(column=\"data_usage\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `order_total` column is the sum of the individual item prices multiplied by their respective quantities and check for any discrepancies.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"order_total\", column_B=\"item_price * quantity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'json_data': Ensure that all values in (json_data) are valid JSON objects and conform to the specified JSON schema, ensuring it's properly structured.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_data\"),expect_column_values_to_match_json_schema(column=\"json_data\", schema=\"your_json_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `department_name` field only includes values from the set `['HR', 'Finance', 'IT', 'Sales']` and is required.","generated_expectations":"expect_column_to_exist(column=\"department_name\"),expect_column_values_to_not_be_null(column=\"department_name\"),expect_column_values_to_be_in_set(column=\"department_name\", value_set=['HR', 'Finance', 'IT', 'Sales'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'team_name': Ensure this field is of type 'text'. Ensure values in 'team_name' are distinct.","generated_expectations":"expect_column_values_to_be_of_type(column=\"team_name\", type_=\"text\"),expect_column_values_to_be_unique(column=\"team_name\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `plaintiff_id` field is of type integer. Ensure there are no duplicate values in this column.","generated_expectations":"expect_column_values_to_be_of_type(column=\"plaintiff_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"plaintiff_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_id` column, ensure it is of type 'integer' and that all entries are greater than zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"customer_id\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'vendor_rating': Ensure the field matches the type 'decimal'. Ensure the field contains values between 0.0 and 5.0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"vendor_rating\")\r,expect_column_values_to_be_of_type(column=\"vendor_rating\", type_=\"decimal\")\r,expect_column_values_to_be_between(column=\"vendor_rating\", min_value=0.0, +B83max_value=5.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `category` column, verify that only values from the set `['Electronics', 'Clothing', 'Home']` are present. Any other value should raise a warning.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Clothing', 'Home'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the average `square_feet` value is between 800 and 10,000.","generated_expectations":"expect_column_mean_to_be_between(column=\"square_feet\", min_value=800, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'voter_id': Ensure the field is required (not null). Ensure the field matches the type 'string'. Ensure all values are unique within this column.","generated_expectations":"expect_column_values_to_not_be_null(column=\"voter_id\"),expect_column_values_to_be_of_type(column=\"voter_id\", type_=\"string\"),expect_column_values_to_be_unique(column=\"voter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'room_number': Ensure the field matches the type 'integer'. Ensure values in (room_number) are unique and cannot be null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"room_number\", type_=\"int\"),expect_column_values_to_be_unique(column=\"room_number\"),expect_column_values_to_not_be_null(column=\"room_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `response_time` column contains numeric values and the average response time is less than 30 minutes.","generated_expectations":"expect_column_values_to_be_of_type(column=\"response_time\", type_=\"float\"),expect_column_mean_to_be_between(column=\"response_time\", min_value=0, max_value=30)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `category_id` and `product_price`: Ensure that the prices are arranged in increasing order by category.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"product_price\", column_B=\"category_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `device_model` column only includes distinct values matching `['iPhone', 'Samsung', 'Google']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"device_model\", value_set=['iPhone', 'Samsung', 'Google'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `enrollment_count` column contains values that are greater than or equal to the `minimum_enrollment` column for each course.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"enrollment_count\", column_B=\"minimum_enrollment\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `measurement_date` column conforms to the date format 'YYYY-MM-DD' and contains no missing values.","generated_expectations":"expect_column_to_exist(column=\"measurement_date\"),expect_column_values_to_match_strftime_format(column=\"measurement_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"measurement_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the distribution of `delivery_times` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"delivery_times\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `balance` column contains values that are non-negative and that all entries are formatted to two decimal places.","generated_expectations":"expect_column_values_to_be_between(column=\"balance\", min_value=0),expect_column_values_to_match_regex(column=\"balance\", regex=r\"^\\d+(\\.\\d{2})?$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `subscription_type` column contains valid types limited to `['Free', 'Basic', 'Premium']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"subscription_type\", value_set=['Free', 'Basic', 'Premium'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `booking_reference` is a combination of 6 alphanumeric characters and unique across records.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"booking_reference\", length=6),expect_column_values_to_be_unique(column=\"booking_reference\"),expect_column_values_to_match_regex(column=\"booking_reference\", regex=r\"^[a-zA-Z0-9]{6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `cargo_description` field contains string lengths between 5 and 255 characters and does not include any SQL-like patterns.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"cargo_description\", min_value=5, max_value=255),expect_column_values_to_not_match_regex(column=\"cargo_description\", regex=r\".*(SELECT|INSERT|UPDATE|DELETE|DROP|;|--|#).*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `plaintiff_count` column has values that are integers and fall within the range of `1` to `5`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"plaintiff_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"plaintiff_count\", min_value=1, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'sales_date': Ensure the expect column to exist; Ensure this field matches the type 'date' and contains values in chronological order.","generated_expectations":"expect_column_to_exist(column=\"sales_date\"),expect_column_values_to_be_of_type(column=\"sales_date\", type_=\"date\"),expect_column_values_to_be_increasing(column=\"sales_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `premium_amount` field contains only numeric values greater than zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"premium_amount\", type_=\"float\"),expect_column_values_to_be_between(column=\"premium_amount\", min_value=0.01, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `public_service_feedback` column: Ensure that all entries are valid JSON objects with required fields `['service_id', 'feedback_text', 'timestamp']`.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"public_service_feedback\"),expect_column_values_to_match_json_schema(column=\"public_service_feedback\", schema={\"type\": \"object\", \"required\": [\"service_id\", \"feedback_text\", \"timestamp\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `attendance_percentage` values are within the range of 0% to 100%.","generated_expectations":"expect_column_values_to_be_between(column=\"attendance_percentage\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'threat_level': Ensure the field matches the type 'text'. Ensure values in (threat_level) are one of `['Low', 'Medium', 'High']`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"threat_level\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"threat_level\", value_set=['Low', 'Medium', 'High'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `json_payload` field: Validate that it is a properly formatted JSON object and check that it conforms to the defined JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"json_payload\"),expect_column_values_to_match_json_schema(column=\"json_payload\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `discharge_date` is greater than the `admission_date` for all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"discharge_date\", column_B=\"admission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'reply_count': Ensure this field must be of type 'integer'. Validate that values in 'reply_count' are non-negative and can pass KS test for uniform distribution.","generated_expectations":"expect_column_values_to_be_of_type(column=\"reply_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"reply_count\", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"reply_count\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `subject` column is required (not null). Validate the field matches the type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"subject\"),expect_column_values_to_be_of_type(column=\"subject\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `subscription_plan` field: Verify that all entries match one of the allowed values in `['Free', 'Basic', 'Premium']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"subscription_plan\", value_set=['Free', 'Basic', 'Premium'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'delivery_date': Validate that all entries adhere to the datetime format '%Y-%m-%d'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"delivery_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'patient_id': Ensure the field is required (not null). Ensure the field contains only unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"patient_id\"),expect_column_values_to_be_unique(column=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `hashtag` column: Verify that it contains valid hashtags, ensuring no entries exceed the defined character limit of `30`.","generated_expectations":"expect_column_values_to_match_regex(column=\"hashtag\", regex=r\"^#[A-Za-z0-9_]{1,30}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_number` field contains only unique values. It must not have any missing values and should conform to the type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_number\"),expect_column_values_to_not_be_null(column=\"case_number\"),expect_column_values_to_be_of_type(column=\"case_number\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the sum of the `claims_paid` column does not exceed $500,000, indicating financial prudence.","generated_expectations":"expect_column_sum_to_be_between(column=\"claims_paid\", min_value=None, max_value=500000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `citizen_id` column: Ensure values match the pattern `^[0-9]{12}$`. Validate that no entries are null and all are unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"citizen_id\", regex=r\"^[0-9]{12}$\"),expect_column_values_to_not_be_null(column=\"citizen_id\"),expect_column_values_to_be_unique(column=\"citizen_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `phone_number` field in HRMS and E-commerce datasets matches the regex pattern `^\\+?[1-9]\\d{1,14}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\+?[1-9]\\d{1,14}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `call_duration` column values are within the range of 0 to 3600 seconds.","generated_expectations":"expect_column_values_to_be_between(column=\"call_duration\", min_value=0, max_value=3600)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `transaction_amount` column follows a normal distribution with a mean greater than 0.","generated_expectations":"expect_column_mean_to_be_between(column=\"transaction_amount\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `attendance` column, ensure the mean value is greater than 1000 and the standard deviation is less than 500.","generated_expectations":"expect_column_mean_to_be_between(column=\"attendance\", min_value=1000),expect_column_stdev_to_be_between(column=\"attendance\", max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `transaction_date` column: Ensure all entries match the datetime format '%Y-%m-%d %H:%M:%S' and check for any missing values.","generated_expectations":"expect_column_to_exist(column=\"transaction_date\"),expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_not_be_null(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the mean of the `cost` column is between $100 and $500, with no outliers beyond $1000.","generated_expectations":"expect_column_mean_to_be_between(column=\"cost\", min_value=100, max_value=500),expect_column_max_to_be_between(column=\"cost\", max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `call_duration` column, verify that all values are within the range of `0` to `3600` seconds and follow a normal distribution.","generated_expectations":"expect_column_values_to_be_between(column=\"call_duration\", min_value=0, max_value=3600),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"call_duration\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'shows': Ensure the table contains the columns: 'show_id', 'title', 'genre', and 'release_year' in that order. Verify that the row count is between 1 and 500.","generated_expectations":"expect_table_columns_to_match_ordered_list(column_list=[\"show_id\", \"title\", \"genre\", \"release_year\"]),expect_table_row_count_to_be_between(min_value=1, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `wallet_address` field: Ensure values are valid JSON objects representing wallet data and conform to the specified schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"wallet_address\"),expect_column_values_to_match_json_schema(column=\"wallet_address\", schema=\"your_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains unique values and adheres to the format `^[A-F0-9]{64}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^[A-F0-9]{64}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `listing_date` column has all entries in the 'MM\/DD\/YYYY' format and are parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%m\/%d\/%Y\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `username` column values match the regex pattern `^[a-zA-Z0-9_]{3,15}$` to maintain valid username formats.","generated_expectations":"expect_column_values_to_match_regex(column=\"username\", regex=r\"^[a-zA-Z0-9_]{3,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the mean value of the `claim_amount` column is between 500 and 2000.","generated_expectations":"expect_column_mean_to_be_between(column=\"claim_amount\", min_value=500, max_value=2000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'temperature_control': Ensure the field matches the type 'decimal'. Validate that values fall within the range of -20.0 to 25.0 degrees Celsius, ensuring compliance with product handling requirements.","generated_expectations":"expect_column_values_to_be_of_type(column=\"temperature_control\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"temperature_control\", min_value=-20.0, max_value=25.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `post_type` column values are from the set `['text', 'image', 'video', 'link']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"post_type\", value_set=['text', 'image', 'video', 'link'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify the `transaction_amount` field is of type 'decimal' and does not contain any null values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"transaction_amount\", type_=\"decimal\"),expect_column_values_to_not_be_null(column=\"transaction_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'release_date': Ensure the field matches the type 'datetime'. Verify that all values conform to the format '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"release_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `case_id` column is present and contains unique identifiers matching the format 'CXXXX' where X is a digit.","generated_expectations":"expect_column_to_exist(column=\"case_id\"),expect_column_values_to_be_unique(column=\"case_id\"),expect_column_values_to_match_regex(column=\"case_id\", regex=r\"^C\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `stock_quantity` column has a minimum value of 0 and maximum of 1000.","generated_expectations":"expect_column_min_to_be_between(column=\"stock_quantity\", min_value=0),expect_column_max_to_be_between(column=\"stock_quantity\", max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'delivery_date': Ensure values are valid dates and that they are in the future. Ensure this field is not null.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"delivery_date\"),expect_column_values_to_be_increasing(column=\"delivery_date\"),expect_column_values_to_not_be_null(column=\"delivery_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `admission_date` column matches the format 'MM\/DD\/YYYY' and is a valid date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"admission_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"admission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `test_scores` in the `Assessments` table have a Kullback-Leibler divergence of less than 0.1 when compared to the `previous_year_scores`.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column_a=\"test_scores\", column_b=\"previous_year_scores\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_summary': Ensure the field can be null. Ensure the length of 'case_summary' does not exceed 500 characters.","generated_expectations":"expect_column_values_to_be_null(column=\"case_summary\"),expect_column_value_lengths_to_be_between(column=\"case_summary\", min_value=0, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `supplier_contact` field, ensure all string values match the pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"supplier_contact\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `carrier_id` column: Ensure values are unique and not null. Verify that this ID exists in the `carriers` table.","generated_expectations":"expect_column_values_to_be_unique(column=\"carrier_id\"),expect_column_values_to_not_be_null(column=\"carrier_id\"),expect_column_values_to_be_in_set(column=\"carrier_id\", value_set=carriers_table_ids)  # Note: You would need to replace `carriers_table_ids` with the actual set of carrier IDs from the carriers table.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category': Ensure values in (category) must exist in the predefined set ['electronics', 'clothing', 'home']. Validate that it is not null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['electronics', 'clothing', 'home']),expect_column_values_to_not_be_null(column=\"category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'subscriber_id': Ensure the field is required (not null). Validate that the length of (subscriber_id) is exactly 12 characters.","generated_expectations":"expect_column_values_to_not_be_null(column=\"subscriber_id\"),expect_column_value_lengths_to_equal(column=\"subscriber_id\", length=12)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the total number of claims in the `claims_count` column does not exceed `10` for any active policy.","generated_expectations":"expect_column_max_to_be_between(column=\"claims_count\", max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `attachment_size` column contains values that do not exceed 10MB and that all files exist.","generated_expectations":"expect_column_values_to_be_between(column=\"attachment_size\", min_value=0, max_value=10 * 1024 * 1024),expect_file_to_exist(column=\"attachment_size\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `block_reward` column values are non-negative and consistent with historical block reward data.","generated_expectations":"expect_column_values_to_be_between(column=\"block_reward\", min_value=0, max_value=None),expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"block_reward\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_date` column contains values formatted as 'YYYY-MM-DD' and can be parsed by dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_request_date`, ensure all entries are in the format `MM\/DD\/YYYY` and are not older than one year.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"service_request_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"service_request_date\")  # This will check for valid date formats,# Note: There is no direct expectation for checking if dates are not older than one year; this would typically require a custom check or a separate validation step.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_feedback` field: Ensure it is a text type and does not exceed 500 characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"customer_feedback\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=0, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `case_id` field: Ensure the field is required (not null). Ensure values in `case_id` are unique and match the type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_id\"),expect_column_values_to_be_unique(column=\"case_id\"),expect_column_values_to_be_of_type(column=\"case_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipment_id` column contains unique values across all records, and no duplicates exist.","generated_expectations":"expect_column_values_to_be_unique(column=\"shipment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `article_id` column contains only distinct values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"article_id\"),expect_column_values_to_not_be_null(column=\"article_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `order_date` field is formatted as 'YYYY-MM-DD' and all entries can be parsed into valid datetime objects.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `appointment_date` column is of type 'date' and does not contain dates beyond the current month.","generated_expectations":"expect_column_values_to_be_of_type(column=\"appointment_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"appointment_date\", min_value=\"1900-01-01\", max_value=\"2023-10-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_id` field: Ensure each entry matches the regex pattern `^[0-9]{10}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^[0-9]{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `employee_id` column is unique and matches the format `EMP-XXXX`.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\"),expect_column_values_to_match_regex(column=\"employee_id\", regex=r\"^EMP-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_fee` column contains values within the range of 0.0001 to 1.0 BTC.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_fee\", min_value=0.0001, max_value=1.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `listing_price` column: Ensure values are within the range of $10,000 to $10,000,000. Confirm that no entries are negative.","generated_expectations":"expect_column_values_to_be_between(column=\"listing_price\", min_value=10000, max_value=10000000),expect_column_values_to_be_greater_than(column=\"listing_price\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `allergy_info` field, check that it does not contain any values matching the regex pattern `^[0-9]*$`.","generated_expectations":"expect_column_values_to_not_match_regex(column=\"allergy_info\", regex=r\"^[0-9]*$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'file_upload': Ensure the file exists and matches the specified hash value. Validate that the file does not exceed 5MB in size and contains valid CSV headers.","generated_expectations":"expect_file_to_exist(file_path=\"file_upload\"),expect_file_hash_to_equal(file_path=\"file_upload\", hash_value=\"specified_hash_value\"),expect_file_size_to_be_between(file_path=\"file_upload\", min_value=0, max_value=5 * 1024 * 1024),expect_file_to_have_valid_table_header(file_path=\"file_upload\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure values are unique and of type 'integer'. Ensure this field is required.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `election_results` field: Ensure all results are valid JSON objects that adhere to the defined schema for election outcomes.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"election_results\"),expect_column_values_to_match_json_schema(column=\"election_results\", schema={\"type\": \"object\", \"properties\": { ... }})  # Replace ... with the actual schema definition.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `product_name` field: Ensure string lengths fall between 1 and 100 characters, with no special characters allowed.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"product_name\", min_value=1, max_value=100),expect_column_values_to_not_match_regex(column=\"product_name\", regex=r\"[^a-zA-Z0-9 ]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `user_data.csv` file exists and has a size between 1KB and 5MB.","generated_expectations":"expect_file_to_exist(file_path=\"user_data.csv\"),expect_file_size_to_be_between(min_value=1024, max_value=5242880)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `shipping_cost` column values are non-negative numbers and do not exceed 10% of the total order value.","generated_expectations":"expect_column_values_to_be_between(column=\"shipping_cost\", min_value=0, max_value=0.1), ,expect_column_pair_values_A_to_be_less_than_B(column_A=\"shipping_cost\", column_B=\"total_order_value\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_id` column contains distinct values that match the pattern `^[0-9]{10}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"product_id\", regex=r\"^[0-9]{10}$\"),expect_column_values_to_be_unique(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `sample_size` column has a minimum of 30 and a maximum of 1000, ensuring appropriate statistical power.","generated_expectations":"expect_column_min_to_be_between(column=\"sample_size\", min_value=30),expect_column_max_to_be_between(column=\"sample_size\", max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `email_recipient_list` column contains valid JSON arrays with a minimum of one and a maximum of 50 unique email addresses.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"email_recipient_list\"),expect_column_unique_value_count_to_be_between(column=\"email_recipient_list\", min_value=1, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `zipcode` column conforms to the regex pattern `^\\d{5}$` and does not include any invalid zip codes from the list `['00000', '12345']`.","generated_expectations":"expect_column_values_to_match_regex(column=\"zipcode\", regex=r\"^\\d{5}$\"),expect_column_values_to_not_be_in_set(column=\"zipcode\", value_set=['00000', '12345'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `watch_time` column has a maximum value not exceeding 24 hours and an average watch time greater than 2 hours.","generated_expectations":"expect_column_max_to_be_between(column=\"watch_time\", max_value=24),expect_column_mean_to_be_between(column=\"watch_time\", min_value=2, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `incident_date` column contains dates that fall within the last five years and that no incident is recorded with a future date.","generated_expectations":"expect_column_values_to_be_between(column=\"incident_date\", min_value=\"2018-10-01\", max_value=\"2023-10-01\"),expect_column_values_to_be_decreasing(column=\"incident_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'settlement_amount': Ensure this field is numeric and that values are greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_of_type(column=\"settlement_amount\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"settlement_amount\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `service_termination_date` column contains dates that are later than the `service_start_date`. Ensure there are no null values.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"service_termination_date\", column_B=\"service_start_date\"),expect_column_values_to_not_be_null(column=\"service_termination_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `data_limit_gb` and `monthly_charge` columns: Confirm that the sum of `monthly_charge` is correctly calculated based on `data_limit_gb` values.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"monthly_charge\"], sum_value=calculate_sum_based_on_data_limit(data_limit_gb))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `enrollment_date` column contains dates that are not null and fall within the current academic year.","generated_expectations":"expect_column_values_to_not_be_null(column=\"enrollment_date\"),expect_column_values_to_be_dateutil_parseable(column=\"enrollment_date\"),expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"2023-08-01\", max_value=\"2024-05-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that files in the `patient_records` directory exist, are less than 5MB in size, and match the specified hash value.","generated_expectations":"expect_file_to_exist(file_path=\"patient_records\/*\"),expect_file_size_to_be_between(file_path=\"patient_records\/*\", min_value=0, max_value=5 * 1024 * 1024),expect_file_hash_to_equal(file_path=\"patient_records\/*\", hash_value=\"SPECIFIED_HASH_VALUE\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'device_status': Ensure the table has the columns 'device_id', 'status', and 'last_update'. Validate that 'last_update' follows the format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_table_columns_to_match_set(column_set=[\"device_id\", \"status\", \"last_update\"]),expect_column_values_to_match_strftime_format(column=\"last_update\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `date_created` field is of type 'datetime' and is populated for all records.","generated_expectations":"expect_column_values_to_be_of_type(column=\"date_created\", type_=\"datetime\"),expect_column_values_to_not_be_null(column=\"date_created\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_age` column contains values within the age range of 0 to 120 years.","generated_expectations":"expect_column_values_to_be_between(column=\"patient_age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the total `shipment_weight` across all records does not exceed the maximum limit of 10,000 kg.","generated_expectations":"expect_column_sum_to_be_between(column=\"shipment_weight\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `transaction_id` and `user_id` columns together form unique pairs across all records.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"transaction_id\", column_B=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'booking_source': Ensure the field matches the type 'text'. Ensure values in (booking_source) must exist in the set (Website, Mobile App, Call Center).","generated_expectations":"expect_column_values_to_be_of_type(column=\"booking_source\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"booking_source\", value_set=[\"Website\", \"Mobile App\", \"Call Center\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the average `rating` in the `content_reviews` column is between 3.0 and 5.0.","generated_expectations":"expect_column_mean_to_be_between(column=\"content_reviews\", min_value=3.0, max_value=5.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `postal_code` column contains valid postal codes and does not exceed 10 characters in length.","generated_expectations":"expect_column_values_to_match_regex(column=\"postal_code\", regex=r\"^\\d{5}(-\\d{4})?$\"),expect_column_value_lengths_to_be_between(column=\"postal_code\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `quantity_in_stock` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"quantity_in_stock\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ip_address` column adheres to the standard IPv4 format and contains unique entries.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"),expect_column_values_to_be_unique(column=\"ip_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `feedback` column, ensure that the string length is between `10` and `500` characters and that no feedback contains the word `fail`.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"feedback\", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=\"feedback\", regex=r\"\\bfail\\b\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_age': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure the field contains values greater than 18. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"user_age\")\r,expect_column_values_to_not_be_null(column=\"user_age\")\r,expect_column_values_to_be_of_type(column=\"user_age\", type_=\"int\")\r,expect_column_values_to_be_between(column=\"user_age\", min_value=18, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_code` column: Validate that all entries match the specific pattern `^[A-Z]{4}-[0-9]{3}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^[A-Z]{4}-[0-9]{3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'is_active': Ensure the field matches the type 'boolean'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"is_active\")\r,expect_column_values_to_be_of_type(column=\"is_active\", type_=\"boolean\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `appointment_date` column values match the format '%Y-%m-%d' and are valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"appointment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"appointment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `last_contact_date` column, confirm that it is of type 'date' and not null, and that it is always greater than the `signup_date`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"last_contact_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"last_contact_date\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"last_contact_date\", column_B=\"signup_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'recipient_email': Ensure the field matches the type 'text'. Ensure values in (recipient_email) must exist in the user accounts table.","generated_expectations":"expect_column_values_to_be_of_type(column=\"recipient_email\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"recipient_email\", value_set=user_accounts_table)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `attachment_size` column contains values in KB and does not exceed 25 MB (25,000 KB) for each record.","generated_expectations":"expect_column_values_to_be_between(column=\"attachment_size\", min_value=0, max_value=25000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` column: Confirm that all values are non-negative and do not exceed $10,000.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate the `json_response_code` column contains values that match the set of expected response codes: `[200, 400, 404, 500]`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"json_response_code\", value_set=[200, 400, 404, 500])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `bio` column entries do not exceed 160 characters and do not contain any disallowed special characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"bio\", min_value=0, max_value=160),expect_column_values_to_not_match_regex(column=\"bio\", regex=r\"[!@#$%^&*()_+={}\\[\\]:;\\\"'<>,?\\\\|`]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `likes` column values are non-negative integers that do not exceed 1000000.","generated_expectations":"expect_column_values_to_be_between(column=\"likes\", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=\"likes\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `hire_date`: Ensure the date format follows 'YYYY-MM-DD'. Validate that all entries can be parsed correctly using dateutil.","generated_expectations":"expect_column_to_exist(column=\"hire_date\"),expect_column_values_to_match_strftime_format(column=\"hire_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `status` column contains only values from the specified set ['active', 'inactive', 'error']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=['active', 'inactive', 'error'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column contains only unique values, with no null entries allowed.","generated_expectations":"expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_not_be_null(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For column `result_value`: Ensure that its mean falls between 10 and 100 and that it contains at least 30 unique values.","generated_expectations":"expect_column_mean_to_be_between(column=\"result_value\", min_value=10, max_value=100),expect_column_unique_value_count_to_be_between(column=\"result_value\", min_value=30, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'grade': Ensure the field matches the type 'numeric'. Ensure values in (grade) are within the range of 0 to 100. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"grade\"),expect_column_values_to_be_of_type(column=\"grade\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `game_title` column contains no special characters and matches the regex pattern `^[A-Za-z0-9 ]+$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"game_title\", regex=r\"^[A-Za-z0-9 ]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `employee_id` column contains unique values across all records in the dataset.","generated_expectations":"expect_column_values_to_be_unique(column=\"employee_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of rows in the `properties` table is equal to 150, ensuring all listings are accounted for.","generated_expectations":"expect_table_row_count_to_equal(table=\"properties\", value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'candidate_name': Ensure the field matches the type 'text'. Validate that all values in (candidate_name) have a length between 5 and 50 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"candidate_name\"),expect_column_value_lengths_to_be_between(column=\"candidate_name\", min_value=5, max_value=50),expect_column_values_to_be_of_type(column=\"candidate_name\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_email` field, validate that all entries conform to standard email formats and are unique across the dataset.","generated_expectations":"expect_column_values_to_match_regex(column=\"customer_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_be_unique(column=\"customer_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that for any given `customer_id`, the `total_spent` is consistent with the sum of all `transaction_amounts`.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"transaction_amount\"], column_sum=\"total_spent\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure the field matches the type 'text'. Ensure this field is required (not null). Ensure the values in 'email_address' are unique and valid email formats.","generated_expectations":"expect_column_values_to_be_of_type(column=\"email_address\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"email_address\"),expect_column_values_to_be_unique(column=\"email_address\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `delivery_date` is of type 'date'. Ensure `delivery_date` is greater than `order_date`. Ensure both fields exist and have no null values.","generated_expectations":"expect_column_to_exist(column=\"delivery_date\"),expect_column_to_exist(column=\"order_date\"),expect_column_values_to_not_be_null(column=\"delivery_date\"),expect_column_values_to_not_be_null(column=\"order_date\"),expect_column_values_to_be_of_type(column=\"delivery_date\", type_=\"date\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"delivery_date\", column_B=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Conduct a Chi-Square test on the `product_id` column to ensure it conforms to expected distribution patterns.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"product_id\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'weather_condition': Ensure the field is required (not null). Validate that all values in 'weather_condition' match one of the allowed values: 'sunny', 'cloudy', 'rainy', 'stormy', 'snowy'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"weather_condition\"),expect_column_values_to_be_in_set(column=\"weather_condition\", value_set=[\"sunny\", \"cloudy\", \"rainy\", \"stormy\", \"snowy\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `player_count` field: Ensure the sum of all entries is greater than 1000 and the maximum player count does not exceed 500.","generated_expectations":"expect_column_sum_to_be_between(column=\"player_count\", min_value=1000),expect_column_max_to_be_between(column=\"player_count\", max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `quantity` column in the `orders` table is an integer greater than zero and does not exceed the `stock_level` in the `inventory` table.","generated_expectations":"expect_column_values_to_be_of_type(column=\"quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"quantity\", min_value=1, max_value=None),expect_column_pair_values_A_to_be_less_than_B(column_A=\"quantity\", column_B=\"stock_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_amount': Ensure the field is required (not null). Check that the mean transaction amount falls within the expected range of $10 to $10,000.","generated_expectations":"expect_column_values_to_not_be_null(column=\"transaction_amount\"),expect_column_mean_to_be_between(column=\"transaction_amount\", min_value=10, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `publication_date` field adheres to the format 'YYYY-MM-DD' and is not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"publication_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_in_set(column=\"publication_date\", set_=[\"date <= CURRENT_DATE\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `image_url` field contains valid URLs and that there are no entries exceeding a size of `2MB`.","generated_expectations":"expect_column_values_to_match_regex(column=\"image_url\", regex=r\"^(https?:\/\/[^\\s]+)$\"),expect_column_values_to_be_between(column=\"image_url_size\", min_value=0, max_value=2 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `distance` field: Ensure the field matches the type 'numeric'. Ensure all values are greater than zero and within the range of 1 to 10000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"distance\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"distance\", min_value=1, max_value=10000),expect_column_values_to_be_greater_than(column=\"distance\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `article_id` column contains only unique values and is of type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"article_id\"),expect_column_values_to_be_of_type(column=\"article_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `user_ratings` column has values ranging from 0 to 10 and does not include any null entries.","generated_expectations":"expect_column_values_to_be_between(column=\"user_ratings\", min_value=0, max_value=10),expect_column_values_to_not_be_null(column=\"user_ratings\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'email_address': Ensure the expect column to exist; Ensure this field matches the format 'email' and is required (not null).","generated_expectations":"expect_column_to_exist(column=\"email_address\"),expect_column_values_to_not_be_null(column=\"email_address\"),expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'listing_date': Ensure the field exists. Ensure the field matches the type 'date'. Ensure values in (listing_date) are arranged in decreasing order.","generated_expectations":"expect_column_to_exist(column=\"listing_date\"),expect_column_values_to_be_of_type(column=\"listing_date\", type_=\"date\"),expect_column_values_to_be_decreasing(column=\"listing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `diagnosis_code` column contains only valid codes from the ICD-10 classification system.","generated_expectations":"expect_column_values_to_be_in_set(column=\"diagnosis_code\", value_set=icd_10_codes)  # icd_10_codes should be a predefined list of valid ICD-10 codes.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `transaction_date` column contains datetime strings formatted as `'%Y-%m-%d %H:%M:%S'` and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'player_id': Ensure the field is required (not null). Ensure it matches the type 'text'. Ensure values in this field are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"player_id\"),expect_column_values_to_be_of_type(column=\"player_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"player_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `age` column contains numeric values, and the average age of individuals is greater than 18.","generated_expectations":"expect_column_values_to_be_of_type(column=\"age\", type_=\"int\"),expect_column_mean_to_be_between(column=\"age\", min_value=18.01)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_amount` field, validate that all values are greater than $0 and less than $10,000.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `employee_status` column only contains values from the set ['Active', 'Inactive', 'On Leave'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"employee_status\", value_set=['Active', 'Inactive', 'On Leave'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `shipment_date` column, confirm that all dates are valid and follow the 'YYYY-MM-DD' format. Ensure no shipments are scheduled for future dates.","generated_expectations":"expect_column_to_exist(column=\"shipment_date\"),expect_column_values_to_be_dateutil_parseable(column=\"shipment_date\"),expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"shipment_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the 'assigned_lawyer' column values are unique. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"assigned_lawyer\"),expect_column_values_to_be_unique(column=\"assigned_lawyer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `amount_paid` and `total_cost`: Ensure that `amount_paid` is greater than or equal to `total_cost`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"amount_paid\", column_B=\"total_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'social_security_number': Ensure the field matches the type 'text'. Validate that all entries in (social_security_number) match the regex pattern for SSNs. Ensure this field must exist.","generated_expectations":"expect_column_to_exist(column=\"social_security_number\"),expect_column_values_to_be_of_type(column=\"social_security_number\", type_=\"text\"),expect_column_values_to_match_regex(column=\"social_security_number\", regex=r\"^\\d{3}-\\d{2}-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `service_start_date` must be a valid date and that all entries are not greater than today's date.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"service_start_date\"),expect_column_values_to_be_between(column=\"service_start_date\", min_value=None, max_value=datetime.today())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `cast_date` column values are within the range of election dates specified.","generated_expectations":"expect_column_values_to_be_between(column=\"cast_date\", min_value=\"YYYY-MM-DD\", max_value=\"YYYY-MM-DD\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `customer_id`: Ensure this field contains distinct values and matches the type 'integer'. Ensure it is required and not null.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `location` JSON column adheres to the defined schema, containing fields: `city`, `country`, and `latitude`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"location\", schema={\"type\": \"object\", \"properties\": {\"city\": {\"type\": \"string\"}, \"country\": {\"type\": \"string\"}, \"latitude\": {\"type\": \"number\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_amount': Ensure the field is required (not null). Validate that the sum of 'transaction_amount' is greater than zero across all records.","generated_expectations":"expect_column_values_to_not_be_null(column=\"transaction_amount\"),expect_column_sum_to_be_between(column=\"transaction_amount\", min_value=0.01)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the values in the `delivery_date` column are greater than the values in the `order_date` column.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"delivery_date\", column_B=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `price` column has a median value of at least $20 and does not exceed $500.","generated_expectations":"expect_column_median_to_be_between(column=\"price\", min_value=20, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `shipment_details`: Validate that it is a valid JSON object containing keys ['tracking_number', 'carrier', 'status']. Ensure values are not null.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"shipment_details\"),expect_column_values_to_not_be_null(column=\"shipment_details\"),expect_column_values_to_match_json_schema(column=\"shipment_details\", schema={\"type\": \"object\", \"properties\": {\"tracking_number\": {\"type\": \"string\"}, \"carrier\": {\"type\": \"string\"}, \"status\": {\"type\": \"string\"}}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains only unique values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_not_be_null(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `special_requests`: Ensure the string length does not exceed 250 characters and does not contain any SQL-like patterns.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"special_requests\", min_value=0, max_value=250),expect_column_values_to_not_match_regex(column=\"special_requests\", regex=r\".*(SELECT|INSERT|UPDATE|DELETE|WHERE|;|--).*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `square_footage` column: Ensure all values are positive integers and fall within the range of 100 to 50,000.","generated_expectations":"expect_column_values_to_be_between(column=\"square_footage\", min_value=100, max_value=50000),expect_column_values_to_be_of_type(column=\"square_footage\", type_=\"int\"), ,expect_column_values_to_be_increasing(column=\"square_footage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `activity_log` table: Ensure that the `event_time` values are unique across all records and consistently ordered.","generated_expectations":"expect_column_values_to_be_unique(column=\"event_time\"),expect_column_values_to_be_increasing(column=\"event_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `registration_date` column, validate that all dates are in the correct format and within the election year.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"registration_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"registration_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the JSON structure of the `video_metadata` field is valid and contains the required keys: `title`, `duration`, and `genre`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"video_metadata\", schema={\"type\": \"object\", \"required\": [\"title\", \"duration\", \"genre\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'zipcode': Ensure the field matches the type 'text'. Validate that all values in (zipcode) are numeric and exactly 5 digits. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"zipcode\"),expect_column_values_to_be_of_type(column=\"zipcode\", type_=\"text\"),expect_column_values_to_match_regex(column=\"zipcode\", regex=r\"^\\d{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `property_type` column: Verify that values are from the set ['Residential', 'Commercial', 'Industrial'] and ensure no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"property_type\", value_set=['Residential', 'Commercial', 'Industrial']),expect_column_values_to_be_unique(column=\"property_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `prescription_id` and `patient_id`: Ensure the combination of these columns is unique across the dataset.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"prescription_id\", column_B=\"patient_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'position': Ensure values in this column must exist in the predefined set of valid positions. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"position\"),expect_column_values_to_be_in_set(column=\"position\", value_set=[\"valid_position_1\", \"valid_position_2\", \"valid_position_3\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `energy_consumption` column: Ensure the values are of type `float` and that the maximum value does not exceed 5000 kWh.","generated_expectations":"expect_column_values_to_be_of_type(column=\"energy_consumption\", type_=\"float\"),expect_column_max_to_be_between(column=\"energy_consumption\", max_value=5000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the columns in the `users` table match the specified order: `['user_id', 'email', 'status', 'created_at']`.","generated_expectations":"expect_table_columns_to_match_ordered_list(column_list=['user_id', 'email', 'status', 'created_at'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `payment_status` field is of type 'text' and contains values from the set ['paid', 'pending', 'cancelled']. No other statuses should be present.","generated_expectations":"expect_column_values_to_be_of_type(column=\"payment_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"payment_status\", value_set=['paid', 'pending', 'cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `points` column contains values within the range of 0 to 50 for all games.","generated_expectations":"expect_column_values_to_be_between(column=\"points\", min_value=0, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `game_name` field does not contain any special characters and that all values are at least 3 characters long.","generated_expectations":"expect_column_values_to_not_match_regex(column=\"game_name\", regex=r\"[^a-zA-Z0-9 ]\"),expect_column_value_lengths_to_be_between(column=\"game_name\", min_value=3, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `player_id` column: Ensure values are unique and exist in the `player` database.","generated_expectations":"expect_column_values_to_be_unique(column=\"player_id\"),expect_column_values_to_be_in_set(column=\"player_id\", value_set=player_database_values)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that `created_at` entries in both Fraud Detection and Real Estate datasets are of type 'datetime' and are in chronological order.","generated_expectations":"expect_column_values_to_be_of_type(column=\"created_at\", type_=\"datetime\"),expect_column_values_to_be_increasing(column=\"created_at\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_id` column contains unique values and that all entries are of type 'text'.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_be_of_type(column=\"device_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check for missing values in the `destination` column; ensure all entries are populated and of type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"destination\"),expect_column_values_to_be_of_type(column=\"destination\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `student_age` values are within the range of 18 to 65.","generated_expectations":"expect_column_values_to_be_between(column=\"student_age\", min_value=18, max_value=65)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `department` column: Confirm all entries belong to the set ['Health', 'Education', 'Transportation']. Validate against this list.","generated_expectations":"expect_column_values_to_be_in_set(column=\"department\", value_set=['Health', 'Education', 'Transportation'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `property_type` and `listing_price` relationship holds true, where `Apartment` prices are less than `House` prices.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"listing_price\", column_B=\"listing_price\", condition=\"property_type = 'Apartment'\", condition_B=\"property_type = 'House'\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `last_name` column contains no entries exceeding 20 characters in length and matches the pattern for alphabetic characters only.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"last_name\", min_value=0, max_value=20),expect_column_values_to_match_regex(column=\"last_name\", regex=\"^[A-Za-z]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `account_status` field, ensure it contains only distinct values from the set `['Active', 'Inactive', 'Closed']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"account_status\", value_set=['Active', 'Inactive', 'Closed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field `case_id`: Ensure this field is required (not null). Ensure it contains unique values for each record.","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_id\"),expect_column_values_to_be_unique(column=\"case_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `price` column: Ensure all values are within the range of 0.01 to 10,000, and check for any missing values.","generated_expectations":"expect_column_values_to_be_between(column=\"price\", min_value=0.01, max_value=10000),expect_column_values_to_not_be_null(column=\"price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category': Ensure the field matches the type 'text'. Ensure values in (category) must exist in predefined categories (electronics, clothing, home). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"category\"),expect_column_values_to_be_of_type(column=\"category\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"category\", value_set=[\"electronics\", \"clothing\", \"home\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `forecast_date` column contains dates formatted as 'YYYY-MM-DD' and validates against the current date for future predictions.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"forecast_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `cases` table is equal to the number of entries in the `clients` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"cases\", other_table=\"clients\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'username' field: Ensure the field exists and matches the type 'text'. Validate that values must have a length between 3 and 20 characters and do not contain special characters.","generated_expectations":"expect_column_to_exist(column=\"username\"),expect_column_values_to_be_of_type(column=\"username\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"username\", min_value=3, max_value=20),expect_column_values_to_not_match_regex(column=\"username\", regex=r\"[^a-zA-Z0-9]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that all entries in the `transaction_amount` column in the `transactions` table are positive and have a cumulative sum matching the expected total.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0),expect_column_sum_to_be_between(column=\"transaction_amount\", min_value=expected_total, max_value=expected_total)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `transaction_history` table, ensure that the `transaction_amount` field contains only positive decimal values and is within the range of 0.01 to 10,000. Confirm no missing entries.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0.01, max_value=10000),expect_column_values_to_not_be_null(column=\"transaction_amount\"),expect_column_values_to_be_in_set(column=\"transaction_amount\", value_set=[value for value in range(1, 10001)])  # This sets positive values, but does not ensure decimal values. Adjust as necessary.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'public_services': Ensure the column 'service_type' exists. Ensure the values in 'service_type' match one of the predefined categories.","generated_expectations":"expect_column_to_exist(column=\"service_type\"),expect_column_values_to_be_in_set(column=\"service_type\", value_set=[\"category1\", \"category2\", \"category3\", ...]) ","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `listing_price` column: Ensure all entries are numeric and fall within the range of $50,000 to $5,000,000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"listing_price\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"listing_price\", min_value=50000, max_value=5000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'experiment_id': Ensure the field exists. Ensure the field matches the type 'integer'. Ensure values in (experiment_id) are unique across the dataset.","generated_expectations":"expect_column_to_exist(column=\"experiment_id\"),expect_column_values_to_be_of_type(column=\"experiment_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"experiment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `follower_count` column matches the expected distribution parameters with a median greater than 1000 and a maximum less than 1 million.","generated_expectations":"expect_column_median_to_be_between(column=\"follower_count\", min_value=1000, max_value=None),expect_column_max_to_be_between(column=\"follower_count\", min_value=None, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `status` column only contains distinct values matching `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `expiry_date` column contains dates that are later than the current date for all perishable goods.","generated_expectations":"expect_column_values_to_be_increasing(column=\"expiry_date\"),expect_column_values_to_be_dateutil_parseable(column=\"expiry_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `payment_amount` is a positive numeric value and falls within the range of 0.01 to 10000.00.","generated_expectations":"expect_column_values_to_be_between(column=\"payment_amount\", min_value=0.01, max_value=10000.00),expect_column_values_to_be_of_type(column=\"payment_amount\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `ratings` column has a mean value between 1 and 10 and that the maximum value does not exceed 10.","generated_expectations":"expect_column_mean_to_be_between(column=\"ratings\", min_value=1, max_value=10),expect_column_max_to_be_between(column=\"ratings\", max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `student_id` column contains only unique entries and does not allow null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_not_be_null(column=\"student_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `order_date` column follows the format `'%Y-%m-%d'` and is not older than one year from the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'diagnosis_code': Ensure this field matches a predefined set of valid codes. Ensure the field is of type 'text'.","generated_expectations":"expect_column_values_to_be_in_set(column=\"diagnosis_code\", value_set=[\/* predefined set of valid codes *\/]),expect_column_values_to_be_of_type(column=\"diagnosis_code\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'post_timestamp': Ensure the field matches the type 'datetime' and can be parsed using dateutil.","generated_expectations":"expect_column_values_to_be_of_type(column=\"post_timestamp\", type_=\"datetime\"),expect_column_values_to_be_dateutil_parseable(column=\"post_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `loan_applications` dataset: Ensure the `application_date` field is of type 'date' and must be earlier than or equal to today's date.","generated_expectations":"expect_column_values_to_be_of_type(column=\"application_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"application_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that `product_category` values are strictly from the set ['Electronics', 'Furniture', 'Clothing'] and ensure no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"product_category\", value_set=['Electronics', 'Furniture', 'Clothing']),expect_column_values_to_be_unique(column=\"product_category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `game_id` column is unique and does not contain any null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"game_id\"),expect_column_values_to_not_be_null(column=\"game_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'enrollment_date': Ensure the field matches the type 'date'. Ensure values in (enrollment_date) are within the last year and follow the format 'YYYY-MM-DD'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"enrollment_date\"),expect_column_values_to_be_of_type(column=\"enrollment_date\", type_=\"date\"),expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"2022-10-01\", max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'interest_rate': Ensure this field matches the type 'decimal'. Ensure it falls within the range of 0% to 20%.","generated_expectations":"expect_column_values_to_be_of_type(column=\"interest_rate\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"interest_rate\", min_value=0.0, max_value=0.20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `username` column contains unique string values, each with a length between 3 and 15 characters, and conforms to the regex pattern `[a-zA-Z0-9_]+`.","generated_expectations":"expect_column_values_to_be_unique(column=\"username\"),expect_column_value_lengths_to_be_between(column=\"username\", min_value=3, max_value=15),expect_column_values_to_match_regex(column=\"username\", regex=r\"^[a-zA-Z0-9_]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the Kullback-Leibler (KL) divergence between the `temperature` and `humidity` distributions is below 0.1, indicating similar data behavior.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column_a=\"temperature\", column_b=\"humidity\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `transactions` table is equal to the number of entries in the `accounts` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"transactions\", other_table_name=\"accounts\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `department` column contains only values from the set `['HR', 'Finance', 'IT', 'Marketing']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"department\", value_set=['HR', 'Finance', 'IT', 'Marketing'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'follow_up_date': Ensure that all dates are in the future and follow the format 'YYYY-MM-DD'. Confirm no null values.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"follow_up_date\"),expect_column_values_to_match_strftime_format(column=\"follow_up_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"follow_up_date\"),expect_column_values_to_be_increasing(column=\"follow_up_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `age` column, ensure values are within the range [18, 100] and in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"age\", min_value=18, max_value=100),expect_column_values_to_be_increasing(column=\"age\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `attachment` column only contains JSON objects with keys matching `['file_name', 'file_type', 'file_size']`.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"attachment\", schema={\"type\": \"object\", \"properties\": {\"file_name\": {\"type\": \"string\"}, \"file_type\": {\"type\": \"string\"}, \"file_size\": {\"type\": \"number\"}}, \"required\": [\"file_name\", \"file_type\", \"file_size\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `room_type` column contains only distinct values from the list: `['Single', 'Double', 'Suite']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `amount` column: Validate that all entries are positive numbers and the mean value exceeds $100.","generated_expectations":"expect_column_values_to_be_between(column=\"amount\", min_value=0),expect_column_mean_to_be_between(column=\"amount\", lower_bound=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `policy_holder_email` column: Ensure all email addresses match the regex pattern `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$` and that there are no duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"policy_holder_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_be_unique(column=\"policy_holder_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `meter_id` field is unique and matches the type 'string'. Confirm that this field does not contain null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"meter_id\"),expect_column_values_to_be_of_type(column=\"meter_id\", type_=\"string\"),expect_column_values_to_not_be_null(column=\"meter_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `blood_pressure` column contains values in the format `systolic\/diastolic` and conforms to the pattern `^\\d{2,3}\/\\d{2,3}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"blood_pressure\", regex=r\"^\\d{2,3}\/\\d{2,3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `event_time` column exists and is in the format 'YYYY-MM-DD HH:MM:SS'. Validate that all entries are within the last 30 days.","generated_expectations":"expect_column_to_exist(column=\"event_time\"),expect_column_values_to_match_strftime_format(column=\"event_time\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"event_time\")  # This checks if the values can be parsed as dates,# Note: The validation for entries within the last 30 days would typically require a custom expectation, which is not listed in the accepted expectations.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'game_title': Ensure values in (game_title) are unique across records and match the length constraint of 1 to 100 characters.","generated_expectations":"expect_column_values_to_be_unique(column=\"game_title\"),expect_column_value_lengths_to_be_between(column=\"game_title\", min_value=1, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `response_time` column values are within the range of 1 to 60 minutes.","generated_expectations":"expect_column_values_to_be_between(column=\"response_time\", min_value=1, max_value=60)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"transaction_id\")\r,expect_column_values_to_not_be_null(column=\"transaction_id\")\r,expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `team_score` column: Verify that all values fall within the range of 0 to 200. Ensure no missing values exist.","generated_expectations":"expect_column_values_to_be_between(column=\"team_score\", min_value=0, max_value=200),expect_column_values_to_not_be_null(column=\"team_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `order_status` field: confirm that values are limited to the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"order_status\", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `course_duration` field contains only positive integers representing weeks.","generated_expectations":"expect_column_values_to_be_of_type(column=\"course_duration\", type_=\"int\"),expect_column_values_to_be_between(column=\"course_duration\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check the `data_entry_date` column to ensure all entries are in the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"data_entry_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sent_time` field: Ensure the field matches the type 'datetime'. Validate that all timestamps are in chronological order.","generated_expectations":"expect_column_values_to_be_of_type(column=\"sent_time\", type_=\"datetime\"),expect_column_values_to_be_increasing(column=\"sent_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'call_duration': Ensure the field matches the type 'integer'. Ensure this field is within the range of 0 to 36000 (in seconds). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"call_duration\"),expect_column_values_to_be_of_type(column=\"call_duration\", type_=\"int\"),expect_column_values_to_be_between(column=\"call_duration\", min_value=0, max_value=36000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `user_id` in the `transactions` table exists in the `users` table and confirm the data type is 'integer'.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_id\", value_set=users_table_user_ids),expect_column_values_to_be_of_type(column=\"user_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `attack_type` column has a unique count greater than 5 but less than 50.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"attack_type\", min_value=6, max_value=49)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ip_address` column contains valid IP addresses that match the regex pattern `^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\. (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-5][0-9]|[01]?[0-9][0-9]?)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the 'experiment_id' column contains only unique values. Ensure it matches the type 'string'.","generated_expectations":"expect_column_values_to_be_unique(column=\"experiment_id\"),expect_column_values_to_be_of_type(column=\"experiment_id\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `purchase_date` column contains dates formatted as 'YYYY-MM-DD' and all values can be parsed using dateutil.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"purchase_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"purchase_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `created_at` field has entries only in the last 2 years.","generated_expectations":"expect_column_values_to_be_between(column=\"created_at\", min_value=\"2021-01-01\", max_value=\"2023-01-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `email_body` field: Verify that it contains valid JSON objects and conforms to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"email_body\"),expect_column_values_to_match_json_schema(column=\"email_body\", schema=your_json_schema_here)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `wallet_address` column exists and that all values match the regex pattern '^0x[a-fA-F0-9]{40}$'.","generated_expectations":"expect_column_to_exist(column=\"wallet_address\"),expect_column_values_to_match_regex(column=\"wallet_address\", regex=r\"^0x[a-fA-F0-9]{40}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_request_date` column: Ensure it matches the type 'date'. Check for missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"service_request_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"service_request_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'humidity': Ensure the field matches the type 'integer'. Validate that all values in (humidity) are within the range of 0 to 100 percent.","generated_expectations":"expect_column_values_to_be_of_type(column=\"humidity\", type_=\"int\"),expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `transaction_date`: Ensure the field matches the type 'date' and contains values within the last five years.","generated_expectations":"expect_column_values_to_be_of_type(column=\"transaction_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"transaction_date\", min_value=\"2018-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'insurance_status': Ensure the field contains no missing values. Ensure it matches the type 'text' with values in ['insured', 'uninsured', 'underinsured'].","generated_expectations":"expect_column_values_to_not_be_null(column=\"insurance_status\"),expect_column_values_to_be_of_type(column=\"insurance_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"insurance_status\", value_set=[\"insured\", \"uninsured\", \"underinsured\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `ratings` column exhibits a uniform distribution across the range of 1 to 5 stars.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"ratings\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `file_size` of each document in the `uploads` folder is within the range of `1KB` to `10MB`.","generated_expectations":"expect_file_size_to_be_between(file_size_range=(1024, 10485760))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'department_code': Ensure the field matches the type 'text'. Ensure values in (department_code) exist in the predefined set ['HR', 'Finance', 'IT'].","generated_expectations":"expect_column_values_to_be_of_type(column=\"department_code\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"department_code\", value_set=['HR', 'Finance', 'IT'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `freight_cost` column has unique values that fall within the defined range of $100 to $1,000.","generated_expectations":"expect_column_values_to_be_unique(column=\"freight_cost\"),expect_column_values_to_be_between(column=\"freight_cost\", min_value=100, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `user_preferences` column contains valid JSON objects conforming to the schema: {'genres': ['string'], 'languages': ['string']}.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"user_preferences\", schema={'genres': ['string'], 'languages': ['string']})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'currency_code': Ensure the field matches the type 'text'. Ensure values in (currency_code) exist in the predefined list ['USD', 'EUR', 'GBP'] and are not null.","generated_expectations":"expect_column_to_exist(column=\"currency_code\"),expect_column_values_to_be_of_type(column=\"currency_code\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"currency_code\", value_set=['USD', 'EUR', 'GBP']),expect_column_values_to_not_be_null(column=\"currency_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that values in the `block_number` column are strictly increasing.","generated_expectations":"expect_column_values_to_be_increasing(column=\"block_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'country_code': Ensure all values match the format of a valid ISO 3166-1 alpha-2 code. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"country_code\"),expect_column_values_to_match_regex(column=\"country_code\", regex=r\"^[A-Z]{2}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `forecast_date` column contains unique dates and matches the `YYYY-MM-DD` format.","generated_expectations":"expect_column_values_to_be_unique(column=\"forecast_date\"),expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure this field is required (not null). Verify that all user IDs are unique and match the type 'string'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_id\"),expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_be_of_type(column=\"user_id\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `post_timestamp` column contains valid datetime entries in the format 'YYYY-MM-DD HH:MM:SS' and check if all timestamps are in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"post_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_increasing(column=\"post_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `order_status` column contains only the values from the set `['Pending', 'Shipped', 'Delivered', 'Cancelled']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"order_status\", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_id` field: Ensure it is of type `integer` and contains only unique values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"property_id\", type_=\"integer\"),expect_column_values_to_be_unique(column=\"property_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the distribution of `player_scores` passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"player_scores\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that `quantity` values are integers and are greater than zero, and there are no negative values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"quantity\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"quantity\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'date_of_birth': Ensure the field matches the type 'date'. Verify that all values are in the format 'YYYY-MM-DD' and are valid dates.","generated_expectations":"expect_column_values_to_be_of_type(column=\"date_of_birth\", type_=\"date\"),expect_column_values_to_match_strftime_format(column=\"date_of_birth\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"date_of_birth\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `order_date` column follows the `YYYY-MM-DD` format and all date entries are valid.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"order_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `status` field: Ensure it contains only values from the specified set `['Open', 'Closed', 'Pending']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Open', 'Closed', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `contact_date` field: Validate that all entries conform to the format '%Y-%m-%d'. Ensure this field is required (not null).","generated_expectations":"expect_column_to_exist(column=\"contact_date\"),expect_column_values_to_match_strftime_format(column=\"contact_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"contact_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column values are from the specified set of valid user IDs.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_id\", value_set=valid_user_id_set)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'tracking_number': Ensure the field matches the type 'text'. Validate that the length of values in (tracking_number) is exactly 12 characters and does not contain any special characters.","generated_expectations":"expect_column_values_to_be_of_type(column=\"tracking_number\", type_=\"text\"),expect_column_value_lengths_to_equal(column=\"tracking_number\", length=12),expect_column_values_to_not_match_regex(column=\"tracking_number\", regex=r\"[^a-zA-Z0-9]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_id` column contains only unique values and is not null.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_not_be_null(column=\"device_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_age` column values fall within the range of `18` to `65`.","generated_expectations":"expect_column_values_to_be_between(column=\"customer_age\", min_value=18, max_value=65)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `release_date` column is in the format 'YYYY-MM-DD' and all release dates are in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_decreasing(column=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `stock_quantity` column: Ensure values are non-negative integers and check for non-null entries.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"stock_quantity\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sku` column: Ensure all entries match the regex pattern '^[A-Z0-9]{8}$' and are unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"sku\", regex=r\"^[A-Z0-9]{8}$\"),expect_column_values_to_be_unique(column=\"sku\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `property_id` field contains only distinct values and is of type 'integer'. This field must not contain null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_of_type(column=\"property_id\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `player_performance` metric, ensure the standard deviation is between 5 and 15, confirming consistency in player scoring.","generated_expectations":"expect_column_stdev_to_be_between(column=\"player_performance\", min_value=5, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'premium_amount': Ensure the field matches the type 'numeric'. Ensure the values in 'premium_amount' are greater than 0 and less than 10000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"premium_amount\", type_=\"numeric\"),expect_column_values_to_be_between(column=\"premium_amount\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `account_status` column contains only the values `['Active', 'Inactive', 'Pending']` and that it exists in the dataset.","generated_expectations":"expect_column_to_exist(column=\"account_status\"),expect_column_values_to_be_in_set(column=\"account_status\", value_set=['Active', 'Inactive', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'likes_count': Ensure this field matches the type 'integer'. Ensure values are within the range of 0 to 10000. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"likes_count\"),expect_column_values_to_be_of_type(column=\"likes_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"likes_count\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'department_name': Ensure the field matches the type 'text'. Validate that values match the predefined list ['HR', 'IT', 'Finance', 'Marketing'].","generated_expectations":"expect_column_values_to_be_of_type(column=\"department_name\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"department_name\", value_set=['HR', 'IT', 'Finance', 'Marketing'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'timestamp': Ensure the field matches the type 'datetime'. Validate that all entries in (timestamp) conform to the format '%Y-%m-%d %H:%M:%S'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"timestamp\"),expect_column_values_to_be_of_type(column=\"timestamp\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format='%Y-%m-%d %H:%M:%S')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `performance_score`: Verify that the distribution of performance scores passes the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"performance_score\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `course_completion`: Ensure that the average `course_completion` percentage is above 75%.","generated_expectations":"expect_column_mean_to_be_between(column=\"course_completion\", min_value=75)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `completion_percentage` values are between 0% and 100% and check for any duplicates.","generated_expectations":"expect_column_values_to_be_between(column=\"completion_percentage\", min_value=0, max_value=100),expect_column_values_to_be_unique(column=\"completion_percentage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the number of lines in the uploaded log file does not exceed 10,000.","generated_expectations":"expect_file_line_regex_match_count_to_be_between(file_path=\"path\/to\/log\/file\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `service_type` in Utilities matches the `utility_type` across the datasets, confirming both are distinct.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"service_type\", column_B=\"utility_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `filing_date` column contains dates formatted as `YYYY-MM-DD` and that no entries are older than 10 years.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"filing_date\", min_value=\"2013-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `humidity` column: Verify that the mean value is between 20% and 100%.","generated_expectations":"expect_column_mean_to_be_between(column=\"humidity\", min_value=20, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_id` field: Ensure values are unique and of type 'integer'. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `quantity_ordered` values are within the range of `1` to `1000`, ensuring no zero or negative values.","generated_expectations":"expect_column_values_to_be_between(column=\"quantity_ordered\", min_value=1, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check if the `location` column has no missing values and that all entries match the specified set of regions.","generated_expectations":"expect_column_values_to_not_be_null(column=\"location\"),expect_column_values_to_be_in_set(column=\"location\", value_set=[\"region1\", \"region2\", \"region3\", ...])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `billing_date` column contains values that fall within the range of the last 12 months.","generated_expectations":"expect_column_values_to_be_between(column=\"billing_date\", min_value=\"2022-10-01\", max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `post_created_at` column adheres to the ISO 8601 datetime format 'YYYY-MM-DDTHH:MM:SSZ'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"post_created_at\", strftime_format=\"%Y-%m-%dT%H:%M:%SZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `release_date` values are in increasing order and fall within the last 5 years.","generated_expectations":"expect_column_values_to_be_increasing(column=\"release_date\"),expect_column_values_to_be_between(column=\"release_date\", min_value=\"2018-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'claim_amount': Ensure the field is required (not null). Ensure the field matches the type 'decimal'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"claim_amount\"),expect_column_values_to_not_be_null(column=\"claim_amount\"),expect_column_values_to_be_of_type(column=\"claim_amount\", type_=\"decimal\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `category` column, ensure that values belong to the predefined list `['Electronics', 'Clothing', 'Home']` and that there are no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_be_unique(column=\"category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `timestamp` column entries are in ISO 8601 format and exist for all records.","generated_expectations":"expect_column_to_exist(column=\"timestamp\"),expect_column_values_to_match_strftime_format(column=\"timestamp\", strftime_format=\"%Y-%m-%dT%H:%M:%S.%fZ\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sale_date` field, confirm that all entries are in the format 'YYYY-MM-DD' and are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"sale_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"sale_date\"),expect_column_values_to_be_between(column=\"sale_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_data` field, ensure it conforms to the specified JSON schema, including all mandatory fields.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"customer_data\", schema=\"your_json_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `attendance_percentage` column values fall within the range of 0 to 100, with no null entries.","generated_expectations":"expect_column_values_to_be_between(column=\"attendance_percentage\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"attendance_percentage\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `registration_date` column values are in the format `YYYY-MM-DD` and are valid dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"registration_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"registration_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_type': Ensure the field matches the type 'text'. Validate that 'transaction_type' is either 'Transfer' or 'Exchange'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"transaction_type\"),expect_column_values_to_be_of_type(column=\"transaction_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=[\"Transfer\", \"Exchange\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'case_id': Ensure the field is unique and of type 'text'. Validate that it does not contain null values and matches the pattern 'CASE-\\\\d{3,6}'.","generated_expectations":"expect_column_values_to_be_unique(column=\"case_id\"),expect_column_values_to_be_of_type(column=\"case_id\", type_=\"text\"),expect_column_values_to_not_be_null(column=\"case_id\"),expect_column_values_to_match_regex(column=\"case_id\", regex=r\"^CASE-\\d{3,6}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_type` field: Ensure the field contains only distinct values matching `['Electricity', 'Water', 'Gas']`. Validate that no values are null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"service_type\", value_set=['Electricity', 'Water', 'Gas']),expect_column_values_to_not_be_null(column=\"service_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'order_date': Ensure this field is required (not null). Ensure this field matches the type 'date'. Ensure all order dates are not in the future.","generated_expectations":"expect_column_values_to_not_be_null(column=\"order_date\"),expect_column_values_to_be_of_type(column=\"order_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"order_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'interest_rate': Ensure the field exists. Validate that values in 'interest_rate' are numeric and fall within the range of 0.01 to 0.20. Ensure no interest rate is negative.","generated_expectations":"expect_column_to_exist(column=\"interest_rate\"),expect_column_values_to_be_of_type(column=\"interest_rate\", type_=\"float\"),expect_column_values_to_be_between(column=\"interest_rate\", min_value=0.01, max_value=0.20)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `medication_list` column contains valid JSON objects conforming to the specified schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"medication_list\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `delivery_date` column contains future dates and is formatted correctly as 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_be_increasing(column=\"delivery_date\"),expect_column_values_to_match_strftime_format(column=\"delivery_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `rating` column contains values within the range of 1 to 10.","generated_expectations":"expect_column_values_to_be_between(column=\"rating\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_feedback': Ensure the field matches the type 'text'. Validate that the length of values in (customer_feedback) falls within the range of 10 to 500 characters. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_feedback\"),expect_column_values_to_be_of_type(column=\"customer_feedback\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=10, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `room_type` column contains only the values `['Single', 'Double', 'Suite']` and that all entries are non-null.","generated_expectations":"expect_column_values_to_be_in_set(column=\"room_type\", value_set=[\"Single\", \"Double\", \"Suite\"]),expect_column_values_to_not_be_null(column=\"room_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'block_height': Ensure this field contains only integer values. Validate that values are in increasing order without gaps.","generated_expectations":"expect_column_values_to_be_of_type(column=\"block_height\", type_=\"int\"),expect_column_values_to_be_increasing(column=\"block_height\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `date_of_birth` column: Ensure all entries are valid dates and are formatted as '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"date_of_birth\"),expect_column_values_to_match_strftime_format(column=\"date_of_birth\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For file 'weather_data.json': Ensure the file exists. Ensure the file matches the specified hash value. Ensure the JSON structure is valid and contains the required fields.","generated_expectations":"expect_file_to_exist(file_path=\"weather_data.json\"),expect_file_hash_to_equal(file_path=\"weather_data.json\", hash_value=\"specified_hash_value\"),expect_file_to_be_valid_json(file_path=\"weather_data.json\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status': Ensure the field is required (not null). Ensure values in (status) must exist in the set ('Pending', 'In Transit', 'Delivered', 'Returned').","generated_expectations":"expect_column_values_to_not_be_null(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Pending\", \"In Transit\", \"Delivered\", \"Returned\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'block_number': Ensure this field exists. Validate that (block_number) is an integer and matches the condition that it must be greater than or equal to zero.","generated_expectations":"expect_column_to_exist(column=\"block_number\"),expect_column_values_to_be_of_type(column=\"block_number\", type_=\"int\"),expect_column_values_to_be_between(column=\"block_number\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `invoice_date` column adheres to the datetime format '%d\/%m\/%Y' and contains no missing values.","generated_expectations":"expect_column_to_exist(column=\"invoice_date\"),expect_column_values_to_match_strftime_format(column=\"invoice_date\", strftime_format=\"%d\/%m\/%Y\"),expect_column_values_to_not_be_null(column=\"invoice_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'total_cases': Ensure this field exists. Validate that the values are integers and are within the range '0' to '10000'.","generated_expectations":"expect_column_to_exist(column=\"total_cases\"),expect_column_values_to_be_of_type(column=\"total_cases\", type_=\"int\"),expect_column_values_to_be_between(column=\"total_cases\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `timestamp` column contains values that are in increasing order without duplicates.","generated_expectations":"expect_column_values_to_be_increasing(column=\"timestamp\"),expect_column_values_to_be_unique(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_id` column: Ensure all values are unique and of type 'string'. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"string\"),expect_column_values_to_not_be_null(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'review_rating': Ensure the field matches the type 'decimal'. Ensure the field contains values between 1.0 and 5.0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"review_rating\")\r,expect_column_values_to_be_of_type(column=\"review_rating\", type_=\"decimal\")\r,expect_column_values_to_be_between(column=\"review_rating\", min_value=1.0, max_value=5.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `release_date` column: Ensure all dates are within the range of '2000-01-01' to '2024-12-31'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"release_date\"),expect_column_values_to_be_between(column=\"release_date\", min_value=\"2000-01-01\", max_value=\"2024-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `email` column conforms to a valid email format and does not have any duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_be_unique(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `usage_kwh`: Confirm that values are non-negative and that the average usage does not exceed 1000 kWh per month.","generated_expectations":"expect_column_values_to_be_between(column=\"usage_kwh\", min_value=0, max_value=None),expect_column_mean_to_be_between(column=\"usage_kwh\", min_value=None, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `date_of_birth` column values are valid dates formatted as 'MM\/DD\/YYYY' and are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"date_of_birth\", format=\"%m\/%d\/%Y\"),expect_column_values_to_be_dateutil_parseable(column=\"date_of_birth\"),expect_column_values_to_be_between(column=\"date_of_birth\", min_value=\"01\/01\/1900\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `bedrooms` and `bathrooms` columns are both integers and that `bathrooms` is less than or equal to `bedrooms`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"bedrooms\", type_=\"int\"),expect_column_values_to_be_of_type(column=\"bathrooms\", type_=\"int\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"bedrooms\", column_B=\"bathrooms\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'supplier_email': Ensure this field exists. Validate that all email addresses in 'supplier_email' match the regular expression pattern for valid emails. Ensure there are no missing values in this field.","generated_expectations":"expect_column_to_exist(column=\"supplier_email\"),expect_column_values_to_match_regex(column=\"supplier_email\", regex=r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"),expect_column_values_to_not_be_null(column=\"supplier_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `researcher_email` field: Ensure all emails match the standard email regex pattern. Validate that there are no duplicates and no missing values.","generated_expectations":"expect_column_values_to_match_regex(column=\"researcher_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_be_unique(column=\"researcher_email\"),expect_column_values_to_not_be_null(column=\"researcher_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the combination of `case_id` and `lawyer_id` is unique across all records in the `case_assignments` table.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"case_id\", column_B=\"lawyer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `country` column values are from the predefined set: `['USA', 'Canada', 'UK', 'Australia']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"country\", value_set=['USA', 'Canada', 'UK', 'Australia'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `user_role` column contains only unique values for `admin`, `editor`, and `viewer`, and that the `last_login` timestamp is within the last year for every active user.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=[\"admin\", \"editor\", \"viewer\"]),expect_column_values_to_be_dateutil_parseable(column=\"last_login\"),expect_column_values_to_be_between(column=\"last_login\", min_value=\"2022-10-12\", max_value=\"2023-10-12\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `product_sku` column has all distinct values and no missing entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"product_sku\"),expect_column_values_to_not_be_null(column=\"product_sku\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `ip_address` column contains unique values and matches the standard IPv4 format.","generated_expectations":"expect_column_values_to_be_unique(column=\"ip_address\"),expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email_address` column matches the regex pattern for valid email addresses and contains no null values.","generated_expectations":"expect_column_values_to_match_regex(column=\"email_address\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_not_be_null(column=\"email_address\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `profile_description`, ensure that string lengths do not exceed 160 characters and contain no offensive words from the specified list.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"profile_description\", min_value=0, max_value=160),expect_column_values_to_not_match_regex_list(column=\"profile_description\", regex_list=[r\"offensive_word1\", r\"offensive_word2\", r\"offensive_word3\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `created_at` timestamps are in 'YYYY-MM-DD HH:MM:SS' format and do not contain null values.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"created_at\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"created_at\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `session_duration` column passes the KS test with p-values greater than 0.05, indicating a consistent user session duration.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"session_duration\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `bedrooms` and `bathrooms` columns: Ensure that the number of bedrooms is greater than or equal to the number of bathrooms for all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"bedrooms\", column_B=\"bathrooms\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'activation_date': Ensure the field is required (not null). Ensure the field matches the format 'YYYY-MM-DD'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"activation_date\"),expect_column_values_to_not_be_null(column=\"activation_date\"),expect_column_values_to_match_strftime_format(column=\"activation_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `request_date` field exists and is formatted as YYYY-MM-DD. Confirm that all dates are within the current calendar year.","generated_expectations":"expect_column_to_exist(column=\"request_date\"),expect_column_values_to_match_strftime_format(column=\"request_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_between(column=\"request_date\", min_value=\"2023-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `response_time` column's variance does not exceed the predefined threshold of 10 seconds.","generated_expectations":"expect_column_stdev_to_be_between(column=\"response_time\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `status` column contains distinct values from the set `['Active', 'Inactive', 'Pending']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"status\", value_set=['Active', 'Inactive', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `coverage_type` column: Ensure values match the set `['Comprehensive', 'Third Party', 'Collision']` with no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"coverage_type\", value_set=['Comprehensive', 'Third Party', 'Collision']),expect_column_values_to_be_unique(column=\"coverage_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the total `amount` in the `orders` table sums to no less than 10000.","generated_expectations":"expect_column_sum_to_be_between(column=\"amount\", min_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `age`: Ensure the mean age of patients falls within the range [0, 120]. Validate that the standard deviation does not exceed 25.","generated_expectations":"expect_column_mean_to_be_between(column=\"age\", min_value=0, max_value=120),expect_column_stdev_to_be_between(column=\"age\", min_value=0, max_value=25)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `legal_fees` column has a sum not exceeding $100,000 and that the standard deviation is below $15,000.","generated_expectations":"expect_column_sum_to_be_between(column=\"legal_fees\", min_value=0, max_value=100000),expect_column_stdev_to_be_between(column=\"legal_fees\", max_value=15000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'stock_quantity': Ensure the field has integer type values. Validate that all values are greater than or equal to 0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"stock_quantity\", type_=\"int\"),expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'date_of_birth': Ensure the field matches the type 'date'. Validate that all entries in (date_of_birth) are not in the future. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"date_of_birth\", type_=\"date\"),expect_column_values_to_be_dateutil_parseable(column=\"date_of_birth\"),expect_column_values_to_not_be_null(column=\"date_of_birth\"),expect_column_values_to_be_between(column=\"date_of_birth\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `date_of_hire` column contains dates that are at least one year before the current date.","generated_expectations":"expect_column_values_to_be_between(column=\"date_of_hire\", min_value=\"2019-10-20\", max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `case_number` field is required (not null) and contains unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"case_number\"),expect_column_values_to_be_unique(column=\"case_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `invoice_date` column values adhere to the format 'YYYY-MM-DD' and are all in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"invoice_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"invoice_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `likes` column: Ensure all values are non-negative integers. Ensure the total likes for each post is within the range of 0 to 100,000.","generated_expectations":"expect_column_values_to_be_of_type(column=\"likes\", type_=\"int\"),expect_column_values_to_be_between(column=\"likes\", min_value=0, max_value=100000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `check_in_date` and `check_out_date`: Ensure check-out dates are always later than check-in dates.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"check_out_date\", column_B=\"check_in_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'crm_leads': Ensure the field matches the type 'numeric'. Validate that the distinct count of (crm_leads) is equal to or greater than 100. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"crm_leads\"),expect_column_values_to_be_of_type(column=\"crm_leads\", type_=\"numeric\"),expect_column_unique_value_count_to_be_between(column=\"crm_leads\", min_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'properties' table: Ensure the 'zip_code' column values match the pattern of a valid US zip code (#####) and that the column exists.","generated_expectations":"expect_column_to_exist(column=\"zip_code\"),expect_column_values_to_match_regex(column=\"zip_code\", regex=r\"^\\d{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'room_type': Ensure values in 'room_type' must exist in the set ['Single', 'Double', 'Suite']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"room_type\"),expect_column_values_to_be_in_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the Kullback-Leibler (KL) divergence between the `user_engagement` distributions of two campaigns is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column_a=\"user_engagement_campaign_1\", column_b=\"user_engagement_campaign_2\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `forecast_date` column adheres to the datetime format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `course_name` field contains only distinct values with a length between 5 and 100 characters.","generated_expectations":"expect_column_values_to_be_unique(column=\"course_name\"),expect_column_value_lengths_to_be_between(column=\"course_name\", min_value=5, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `pressure` column values fall within the range of [950, 1050] hPa and maintain a decreasing trend.","generated_expectations":"expect_column_values_to_be_between(column=\"pressure\", min_value=950, max_value=1050),expect_column_values_to_be_decreasing(column=\"pressure\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `age` column contains values of type `integer`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"age\", type_=\"integer\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `filing_date`: Ensure values adhere to the datetime format '%Y-%m-%d'. Ensure there are no missing values.","generated_expectations":"expect_column_to_exist(column=\"filing_date\"),expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format='%Y-%m-%d'),expect_column_values_to_not_be_null(column=\"filing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate the JSON structure of the `order_details` column against the defined schema. Ensure that all values are present and correctly formatted.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"order_details\", schema={\"type\": \"object\", \"properties\": {...}})  # Replace {...} with the actual schema definition.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `score` column contains only integer values within the range of `0` to `300`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"score\", type_=\"int\"),expect_column_values_to_be_between(column=\"score\", min_value=0, max_value=300)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `account_balance` column: Ensure values are not null and fall within the range of -500 to 1,000,000.","generated_expectations":"expect_column_values_to_not_be_null(column=\"account_balance\"),expect_column_values_to_be_between(column=\"account_balance\", min_value=-500, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'order_id': Ensure that this field exists and contains unique values. Validate that the total number of rows is equal to the number of unique 'order_id' values.","generated_expectations":"expect_column_to_exist(column=\"order_id\"),expect_column_values_to_be_unique(column=\"order_id\"),expect_table_row_count_to_equal(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_amount` column: Ensure all values are non-negative and within the specified range of 0 to 10,000.","generated_expectations":"expect_column_values_to_be_between(column=\"transaction_amount\", min_value=0, max_value=10000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `department` column exists and only contains values from the set ['Health', 'Education', 'Transportation'].","generated_expectations":"expect_column_to_exist(column=\"department\"),expect_column_values_to_be_in_set(column=\"department\", value_set=['Health', 'Education', 'Transportation'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `course_code` values are included in the set ['CS101', 'MATH202', 'BIO303'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"course_code\", value_set=['CS101', 'MATH202', 'BIO303'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'creation_date': Ensure this field matches the type 'date'. Ensure the field is required (not null). Ensure all dates are in the past or present.","generated_expectations":"expect_column_values_to_be_of_type(column=\"creation_date\", type_=\"date\"),expect_column_values_to_not_be_null(column=\"creation_date\"),expect_column_values_to_be_between(column=\"creation_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'lab_results': Ensure this field validates JSON formatting rules. Validate that it contains valid JSON formatted lab results and matches the specified schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"lab_results\"),expect_column_values_to_match_json_schema(column=\"lab_results\", schema={\"type\": \"object\", \"properties\": {\/* specify your schema here *\/}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `usage_pattern` data, check that the distribution conforms to expected patterns using the Chi-Square test with a p-value greater than 0.05.","generated_expectations":"expect_column_chisquare_test_p_value_to_be_greater_than(column=\"usage_pattern\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'humidity_percentage': Ensure the field is required (not null). Ensure the field matches the type 'integer'. Ensure values are between 0 and 100.","generated_expectations":"expect_column_values_to_not_be_null(column=\"humidity_percentage\"),expect_column_values_to_be_of_type(column=\"humidity_percentage\", type_=\"int\"),expect_column_values_to_be_between(column=\"humidity_percentage\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'phone_number': Ensure this field matches the type 'text'. Ensure the field can accept null values if no phone number is provided.","generated_expectations":"expect_column_values_to_be_of_type(column=\"phone_number\", type_=\"text\"),expect_column_values_to_be_null(column=\"phone_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `expiration_date` field is not null and is always later than the corresponding `manufacture_date`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"expiration_date\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"expiration_date\", column_B=\"manufacture_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `judgment_date`, ensure it is greater than the `hearing_date` for each case.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"judgment_date\", column_B=\"hearing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'verification_status': Ensure this field exists. Ensure values in 'verification_status' must not exist in the set of invalid statuses (invalid_status_list).","generated_expectations":"expect_column_to_exist(column=\"verification_status\"),expect_column_values_to_not_be_in_set(column=\"verification_status\", value_set=invalid_status_list)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `insurance_policy_number`, ensure it matches the regex pattern `^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$` and is unique.","generated_expectations":"expect_column_values_to_match_regex(column=\"insurance_policy_number\", regex=r\"^[A-Z]{3}-[0-9]{4}-[A-Z]{2}$\"),expect_column_values_to_be_unique(column=\"insurance_policy_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `research_topic` field only contains values from the set `['health', 'technology', 'environment', 'education']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"research_topic\", value_set=['health', 'technology', 'environment', 'education'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `article_title` column, ensure that string lengths are between 10 and 150 characters, and entries do not contain any special characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"article_title\", min_value=10, max_value=150),expect_column_values_to_not_match_regex(column=\"article_title\", regex=r\"[!@#$%^&*(),.?\\\":{}|<>]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `enrollment_status` column contains only values from the set `['Active', 'Inactive', 'Completed']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"enrollment_status\", value_set=['Active', 'Inactive', 'Completed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `release_date` timestamps follow the 'YYYY-MM-DD' format and are not null.","generated_expectations":"expect_column_to_exist(column=\"release_date\"),expect_column_values_to_match_strftime_format(column=\"release_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"release_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `phone_number` column conforms to the format of '(XXX) XXX-XXXX' and does not contain null values.","generated_expectations":"expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\(\\d{3}\\) \\d{3}-\\d{4}$\"),expect_column_values_to_not_be_null(column=\"phone_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the combined values of `quantity_sold` and `quantity_in_stock` equal the total `inventory_count` for each record.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"quantity_sold\", \"quantity_in_stock\"], target_column=\"inventory_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'parent_category': Ensure the field matches the type 'text'. Ensure values in (parent_category) must exist in categories (categories = {a,b,c,d,e}). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"parent_category\"),expect_column_values_to_be_of_type(column=\"parent_category\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"parent_category\", value_set={a,b,c,d,e})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `threat_description` column does not contain any null values and all entries are of type 'text'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"threat_description\"),expect_column_values_to_be_of_type(column=\"threat_description\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"transaction_id\"),expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_be_of_type(column=\"transaction_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `post_date` column adheres to the format 'YYYY-MM-DD HH:MM:SS' and can be parsed accordingly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"post_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_dateutil_parseable(column=\"post_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipping_info': Ensure the column contains valid JSON objects, with required fields 'address', 'city', and 'postal_code' as per the specified JSON schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"shipping_info\", schema={\"type\": \"object\", \"properties\": {\"address\": {\"type\": \"string\"}, \"city\": {\"type\": \"string\"}, \"postal_code\": {\"type\": \"string\"}}, \"required\": [\"address\", \"city\", \"postal_code\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `last_contacted` column, ensure all datetime entries are in the format '%Y-%m-%d %H:%M:%S'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"last_contacted\", strftime_format=\"%Y-%m-%d %H:%M:%S\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that 'filing_date' adheres to the format '%Y-%m-%d'. Ensure all values are valid datetime entries.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"filing_date\", strftime_format='%Y-%m-%d'),expect_column_values_to_be_dateutil_parseable(column=\"filing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `owner_email` column matches the regex pattern for valid email addresses and does not allow duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"owner_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\"),expect_column_values_to_be_unique(column=\"owner_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `listing_date` field: Verify that all entries are valid dates in the format 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"listing_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `phone_number` column contains valid entries that match the regex pattern `^\\+?[1-9]\\d{1,14}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\+?[1-9]\\d{1,14}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `review_score` column, confirm that all values are between 1 and 5. Ensure that no entries in the column match the string 'N\/A' or any null values.","generated_expectations":"expect_column_values_to_be_between(column=\"review_score\", min_value=1, max_value=5),expect_column_values_to_not_match_regex(column=\"review_score\", regex=r\"N\/A\"),expect_column_values_to_not_be_null(column=\"review_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `affected_systems` column contains valid JSON arrays that can include strings representing system names, with no null values allowed.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"affected_systems\"),expect_column_values_to_not_be_null(column=\"affected_systems\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `service_request_id` is unique across all records to maintain data integrity.","generated_expectations":"expect_column_values_to_be_unique(column=\"service_request_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `incident_id` column is unique and does not contain any missing values in both domains.","generated_expectations":"expect_column_values_to_be_unique(column=\"incident_id\"),expect_column_values_to_not_be_null(column=\"incident_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'rating': Ensure all values are between 0 and 10. Confirm that the field exists in the 'reviews' table.","generated_expectations":"expect_column_to_exist(column=\"rating\"),expect_column_values_to_be_between(column=\"rating\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `username` field: ensure that it matches the pattern `^[a-zA-Z0-9_]{3,15}$` to confirm valid usernames.","generated_expectations":"expect_column_values_to_match_regex(column=\"username\", regex=r\"^[a-zA-Z0-9_]{3,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `complaint_type` column, ensure it is one of the predefined categories listed in `complaint_categories`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"complaint_type\", value_set=complaint_categories)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `weight` column values are within the range of 30 to 300 kg, ensuring no negative values are present.","generated_expectations":"expect_column_values_to_be_between(column=\"weight\", min_value=30, max_value=300),expect_column_values_to_not_be_in_set(column=\"weight\", value_set=[-float('inf')])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `subscriber_id` column contains unique values that match the regex pattern `^[0-9A-Z]{10}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"subscriber_id\"),expect_column_values_to_match_regex(column=\"subscriber_id\", regex=r\"^[0-9A-Z]{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `submission_date` in the Legal Case Management Systems is earlier than the `hearing_date` to maintain chronological order.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"submission_date\", column_B=\"hearing_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `rating` field: Ensure that the minimum rating is `0` and the maximum does not exceed `10`. Verify the mean rating falls between `5 and 8`.","generated_expectations":"expect_column_min_to_be_between(column=\"rating\", min_value=0),expect_column_max_to_be_between(column=\"rating\", max_value=10),expect_column_mean_to_be_between(column=\"rating\", min_value=5, max_value=8)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `likes` column values are non-negative integers, and that they are sorted in descending order.","generated_expectations":"expect_column_values_to_be_between(column=\"likes\", min_value=0, max_value=None),expect_column_values_to_be_decreasing(column=\"likes\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure the field is required (not null). Ensure there are no duplicate values in this column.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_id\"),expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `status` field has no missing values and only contains values from the list `['Open', 'Closed', 'Pending']`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=['Open', 'Closed', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `email` column contains valid email formats and has no duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[^@]+@[^@]+\\.[^@]+$\"),expect_column_values_to_be_unique(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `service_request_date`: Validate that all entries are in the 'YYYY-MM-DD' format and no entries are older than five years.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"service_request_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"service_request_date\")  # Ensure the dates are parseable,# Additional validation for no entries older than five years would require a custom implementation or additional context.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `game_id` field: Ensure the field is required (not null). Ensure each value is unique and matches the type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"game_id\"),expect_column_values_to_be_unique(column=\"game_id\"),expect_column_values_to_be_of_type(column=\"game_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"checks for line_items values in (order_id) must exist in orders (order_id)","generated_expectations":"expect_column_pair_values_to_be_in_set(column_A=\"line_items.order_id\", column_B=\"orders.order_id\", value_set=orders.order_id)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `service_request` column: Ensure that values match at least one pattern from the regular expression list defined for service types.","generated_expectations":"expect_column_values_to_match_regex_list(column=\"service_request\", regex_list=[])  # Please replace the empty list with the actual regex patterns for service types.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'square_footage': Ensure the field matches the type 'integer'. Ensure values in (square_footage) are greater than zero. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"square_footage\"),expect_column_values_to_be_of_type(column=\"square_footage\", type_=\"int\"),expect_column_values_to_be_greater_than(column=\"square_footage\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `shipment_id` field: Ensure the field contains only unique values and is of type 'integer'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_unique(column=\"shipment_id\"),expect_column_values_to_be_of_type(column=\"shipment_id\", type_=\"integer\"),expect_column_values_to_not_be_null(column=\"shipment_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `sensor_reading` column contains only numeric values and does not have any missing entries.","generated_expectations":"expect_column_values_to_not_be_null(column=\"sensor_reading\"),expect_column_values_to_be_of_type(column=\"sensor_reading\", type_=\"float\")  # or type_=\"int\" depending on the expected numeric type","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `tariff_type` column values are within the set `['Residential', 'Commercial', 'Industrial']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"tariff_type\", value_set=['Residential', 'Commercial', 'Industrial'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'file_size': In the file dataset, ensure this field exists. Validate that file sizes are numeric and fall within the range of 1MB to 5GB.","generated_expectations":"expect_file_to_exist(),expect_file_size_to_be_between(min_value=1 * 1024 * 1024, max_value=5 * 1024 * 1024 * 1024)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'customer_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"customer_id\"),expect_column_values_to_not_be_null(column=\"customer_id\"),expect_column_values_to_be_of_type(column=\"customer_id\", type_=\"text\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `wind_speed` column has values arranged in increasing order across the dataset.","generated_expectations":"expect_column_values_to_be_increasing(column=\"wind_speed\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `policy_type` column contains only values from the set `['Auto', 'Home', 'Health', 'Life']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"policy_type\", value_set=['Auto', 'Home', 'Health', 'Life'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `patient_age` column values are integers between 0 and 120.","generated_expectations":"expect_column_values_to_be_between(column=\"patient_age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the values in the `room_type` column are within the set `['Single', 'Double', 'Suite']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'post_id': Ensure the field matches the type 'integer'. Ensure values in (post_id) are unique and fall within the range of 1 to 100000. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"post_id\"),expect_column_values_to_be_of_type(column=\"post_id\", type_=\"int\"),expect_column_values_to_be_unique(column=\"post_id\"),expect_column_values_to_be_between(column=\"post_id\", min_value=1, max_value=100000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `researcher_id` is unique across records and that it adheres to the format 'R-XXXX'.","generated_expectations":"expect_column_values_to_be_unique(column=\"researcher_id\"),expect_column_values_to_match_regex(column=\"researcher_id\", regex=r\"^R-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'plan_start_date': Ensure the field matches the format 'YYYY-MM-DD'. Ensure this field is required (not null). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"plan_start_date\"),expect_column_values_to_not_be_null(column=\"plan_start_date\"),expect_column_values_to_match_strftime_format(column=\"plan_start_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `genre` column: Ensure values match at least one pattern from the list `['Action', 'Adventure', 'RPG', 'Simulation']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"genre\", value_set=['Action', 'Adventure', 'RPG', 'Simulation'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of `temperature_reading` and `humidity_reading` does not exceed the `environmental_threshold` for each entry in the `environment_data` table.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"temperature_reading\", column_B=\"environmental_threshold\"),expect_column_pair_values_to_be_equal(column_A=\"humidity_reading\", column_B=\"environmental_threshold\"),expect_multicolumn_sum_to_equal(column_list=[\"temperature_reading\", \"humidity_reading\"], sum_value=\"environmental_threshold\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'device_id': Ensure the field matches the type 'text'. Ensure values in (device_id) are unique across records. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"device_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_not_be_null(column=\"device_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `property_id` field: Ensure the field is required (not null). Ensure the values are unique and of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"property_id\"),expect_column_values_to_be_unique(column=\"property_id\"),expect_column_values_to_be_of_type(column=\"property_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'citizen_id': Ensure the field contains only unique values. Ensure this field is not null and matches the type 'integer'.","generated_expectations":"expect_column_values_to_be_unique(column=\"citizen_id\"),expect_column_values_to_not_be_null(column=\"citizen_id\"),expect_column_values_to_be_of_type(column=\"citizen_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `created_at` column contains datetime strings matching the format `%Y-%m-%d`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"created_at\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `category` field: Ensure the values match the predefined set `['Electronics', 'Clothing', 'Home Goods']`. No other values should exist.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Clothing', 'Home Goods']),expect_column_values_to_not_be_in_set(column=\"category\", value_set=[value for value in all_values if value not in ['Electronics', 'Clothing', 'Home Goods']])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `last_visit_date` values are in the past and match the format '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"last_visit_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_in_set(column=\"last_visit_date\", value_set=[date for date in pd.date_range(start='1900-01-01', end=pd.Timestamp.now().date())])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'notification_json': Ensure the field exists. Validate that (notification_json) conforms to the specified JSON schema for alert notifications.","generated_expectations":"expect_column_to_exist(column=\"notification_json\"),expect_column_values_to_match_json_schema(column=\"notification_json\", json_schema=\"your_json_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `likes` column values are greater than or equal to `0`.","generated_expectations":"expect_column_values_to_be_greater_than(column=\"likes\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `work_hours` column has an average value between 35 and 45 hours per week.","generated_expectations":"expect_column_mean_to_be_between(column=\"work_hours\", min_value=35, max_value=45)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `dataset_id` column contains unique identifiers, free from any SQL-like patterns such as '%DROP%' or '%SELECT%'.","generated_expectations":"expect_column_values_to_be_unique(column=\"dataset_id\"),expect_column_values_to_not_match_regex(column=\"dataset_id\", regex=r\".*DROP.*|.*SELECT.*\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `rating` column in Education systems contains values that are equal to or exceed the average rating found in the Real Estate Management dataset.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"rating\", column_B=\"average_rating\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `alert_type` column contains only distinct values from the set `['Malware', 'Phishing', 'Intrusion']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"alert_type\", value_set=['Malware', 'Phishing', 'Intrusion'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `student_id` column contains unique values and matches the regex pattern `^S[0-9]{5}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"student_id\"),expect_column_values_to_match_regex(column=\"student_id\", regex=r\"^S[0-9]{5}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `department` column contains only distinct values matching `['Sales', 'Finance', 'HR', 'IT']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"department\", value_set=['Sales', 'Finance', 'HR', 'IT'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'guest_details': Ensure this field is a valid JSON object. Ensure it contains the keys 'name', 'contact', and 'special_requests' with appropriate types.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"guest_details\"),expect_column_values_to_match_json_schema(column=\"guest_details\", schema={\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}, \"contact\": {\"type\": \"string\"}, \"special_requests\": {\"type\": \"string\"}}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `loan_amount` is a positive value and does not exceed the maximum limit of 500,000.","generated_expectations":"expect_column_values_to_be_between(column=\"loan_amount\", min_value=0, max_value=500000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'signal_strength': Validate that all values in 'signal_strength' are integers within the range of -100 to 0. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"signal_strength\"),expect_column_values_to_be_between(column=\"signal_strength\", min_value=-100, max_value=0),expect_column_values_to_be_of_type(column=\"signal_strength\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm the `inventory_count` follows a uniform distribution with a Kullback-Leibler divergence below 0.05.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"inventory_count\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'vote_timestamp': Ensure this field exists and follows the format 'YYYY-MM-DD HH:MM:SS'. Validate that no duplicate timestamps exist in the dataset.","generated_expectations":"expect_column_to_exist(column=\"vote_timestamp\"),expect_column_values_to_match_strftime_format(column=\"vote_timestamp\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_unique(column=\"vote_timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of values in the `results_score` column is equal to the expected total score of 500.","generated_expectations":"expect_column_sum_to_be_between(column=\"results_score\", min_value=500, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `timestamp` column contains valid timestamps that are not in the future.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"timestamp\"),expect_column_values_to_be_between(column=\"timestamp\", min_value=\"1970-01-01T00:00:00Z\", max_value=\"now\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `game_id` column is unique and does not contain any null values.","generated_expectations":"expect_column_values_to_be_unique(column=\"game_id\"),expect_column_values_to_not_be_null(column=\"game_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `attendance_percentage` values are in the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"attendance_percentage\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `grade` column contains values between 0 and 100, with a standard deviation not exceeding 15.","generated_expectations":"expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100),expect_column_stdev_to_be_between(column=\"grade\", min_value=0, max_value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `status` column only contains values from the set `['In Transit', 'Delivered', 'Pending']`. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set=['In Transit', 'Delivered', 'Pending'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'meter_id': Ensure the field matches the type 'text'. Validate that all meter IDs are alphanumeric and do not exceed 10 characters in length.","generated_expectations":"expect_column_values_to_be_of_type(column=\"meter_id\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"meter_id\", min_value=1, max_value=10),expect_column_values_to_match_regex(column=\"meter_id\", regex=r\"^[a-zA-Z0-9]+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `order_total`: Ensure the sum of `item_price` and `shipping_fee` equals `order_total`. Validate that the `order_id` is unique across records.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"item_price\", \"shipping_fee\"], sum_column=\"order_total\"),expect_column_values_to_be_unique(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `suspicion_level` column contains values only from the set ['Low', 'Medium', 'High'] and that 'High' level alerts have a valid `alert_timestamp`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"suspicion_level\", value_set=[\"Low\", \"Medium\", \"High\"]),expect_column_values_to_not_be_null(column=\"alert_timestamp\")  # This assumes that valid alerts must have a timestamp. ","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `affected_systems` column contains valid JSON arrays with at least one entry.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"affected_systems\"),expect_column_values_to_not_be_null(column=\"affected_systems\"),expect_column_values_to_match_json_schema(column=\"affected_systems\", schema={\"type\": \"array\", \"minItems\": 1})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `customer_id` column contains only distinct values matching the predefined list of valid customer IDs.","generated_expectations":"expect_column_values_to_be_in_set(column=\"customer_id\", value_set=valid_customer_id_list),expect_column_values_to_be_unique(column=\"customer_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `p-value` column contains float values and does not exceed 1.0 or go below 0.0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"p-value\", type_=\"float\"),expect_column_values_to_be_between(column=\"p-value\", min_value=0.0, max_value=1.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `engagement_rate` column has a standard deviation of less than 0.15 across all entries.","generated_expectations":"expect_column_stdev_to_be_between(column=\"engagement_rate\", min_value=0, max_value=0.15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `content_rating`: Ensure the field contains only distinct values matching `['G', 'PG', 'PG-13', 'R']`. Ensure this field cannot be null.","generated_expectations":"expect_column_values_to_not_be_null(column=\"content_rating\"),expect_column_distinct_values_to_equal_set(column=\"content_rating\", value_set=['G', 'PG', 'PG-13', 'R'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` column, validate that all entries are numeric and greater than or equal to the minimum wage set at $15\/hour.","generated_expectations":"expect_column_values_to_be_of_type(column=\"salary\", type_=\"numeric\"),expect_column_values_to_be_greater_than(column=\"salary\", value=15)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'contact_number': Ensure this field exists. Ensure values in 'contact_number' must match the regex pattern '^\\\\+?[0-9]{10,15}$'.","generated_expectations":"expect_column_to_exist(column=\"contact_number\"),expect_column_values_to_match_regex(column=\"contact_number\", regex=r\"^\\+?[0-9]{10,15}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'lease_start_date': Ensure the field matches the type 'datetime'. Validate that the lease start date must be in the format 'YYYY-MM-DD' and cannot be in the past. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"lease_start_date\"),expect_column_values_to_be_of_type(column=\"lease_start_date\", type_=\"datetime\"),expect_column_values_to_match_strftime_format(column=\"lease_start_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"lease_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For column 'claim_status': Validate that values must match one of the specified statuses (e.g., 'Pending', 'Approved', 'Denied'). Ensure this column exists.","generated_expectations":"expect_column_to_exist(column=\"claim_status\"),expect_column_values_to_be_in_set(column=\"claim_status\", value_set=[\"Pending\", \"Approved\", \"Denied\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `user_id` column exists and matches a specified list of valid user identifiers. Confirm that the `incident_id` column contains unique values for all records.","generated_expectations":"expect_column_to_exist(column=\"user_id\"),expect_column_values_to_be_in_set(column=\"user_id\", value_set=valid_user_identifiers),expect_column_values_to_be_unique(column=\"incident_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `premium_amount` column contains values within the range of $100 to $10,000 and does not include any negative values.","generated_expectations":"expect_column_values_to_be_between(column=\"premium_amount\", min_value=100, max_value=10000),expect_column_values_to_be_greater_than(column=\"premium_amount\", value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `status` column, confirm that values are restricted to the set `['Sent', 'Received', 'Draft', 'Failed']` and that this field does not contain null entries.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Sent', 'Received', 'Draft', 'Failed']),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'weather_alerts': Ensure the number of rows equals the number of alerts active today. Ensure each alert has a 'severity' column that matches the set: ['Low', 'Moderate', 'High', 'Severe'].","generated_expectations":"expect_table_row_count_to_equal(other_table=\"weather_alerts_active_today\"),expect_column_values_to_be_in_set(column=\"severity\", value_set=[\"Low\", \"Moderate\", \"High\", \"Severe\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `request_status` field: Ensure it only contains values from the set `['open', 'in progress', 'closed']`. Confirm that this field exists.","generated_expectations":"expect_column_to_exist(column=\"request_status\"),expect_column_values_to_be_in_set(column=\"request_status\", value_set=['open', 'in progress', 'closed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `delivery_time` field follows the pattern `^[0-9]+ (days|hours)$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"delivery_time\", regex=r\"^[0-9]+ (days|hours)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `customer_status` column includes only the values `['Active', 'Inactive']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"customer_status\", value_set=[\"Active\", \"Inactive\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `performance_score` in HRMS is linked to the `loan_approval` status, where high scores correlate with approved loans.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"performance_score\", column_B=\"loan_approval\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `quantity_ordered` column values are positive integers within the range of 1 to 10,000.","generated_expectations":"expect_column_values_to_be_between(column=\"quantity_ordered\", min_value=1, max_value=10000),expect_column_values_to_be_of_type(column=\"quantity_ordered\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `booking_date` field: Ensure all datetime strings are formatted as `%Y-%m-%d` and represent a valid date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"booking_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"booking_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `alert_id` column contains unique values for each record in the dataset.","generated_expectations":"expect_column_values_to_be_unique(column=\"alert_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `employment_status` column only contains values from the set `['Active', 'Inactive', 'On Leave']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"employment_status\", value_set=['Active', 'Inactive', 'On Leave'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `submission_date` field: Ensure all entries can be parsed as valid datetime objects and follow the format '%Y-%m-%d'.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"submission_date\"),expect_column_values_to_match_strftime_format(column=\"submission_date\", strftime_format='%Y-%m-%d')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'call_duration': Ensure this field is not null and matches the type 'integer'. Validate that values are between 0 and 3600 seconds.","generated_expectations":"expect_column_values_to_not_be_null(column=\"call_duration\"),expect_column_values_to_be_of_type(column=\"call_duration\", type_=\"int\"),expect_column_values_to_be_between(column=\"call_duration\", min_value=0, max_value=3600)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `gas_price` column: Check for values that are non-negative integers and verify that the average gas price does not exceed 200 Gwei.","generated_expectations":"expect_column_values_to_be_between(column=\"gas_price\", min_value=0, max_value=None),expect_column_mean_to_be_between(column=\"gas_price\", min_value=None, max_value=200)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_code` column, ensure all values match the pattern `^[A-Z]{3}-[0-9]{3}$` and that no duplicates are present.","generated_expectations":"expect_column_values_to_match_regex(column=\"course_code\", regex=r\"^[A-Z]{3}-[0-9]{3}$\"),expect_column_values_to_be_unique(column=\"course_code\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `jurisdiction` column contains only values from the specified set `['State', 'Federal', 'International']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"jurisdiction\", value_set=['State', 'Federal', 'International'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the count of rows in the `transactions` table equals the count of rows in the `confirmed_transactions` table. Validate the existence of both tables.","generated_expectations":"expect_table_row_count_to_equal_other_table(table_name=\"transactions\", other_table_name=\"confirmed_transactions\"),expect_table_to_exist(table_name=\"transactions\"),expect_table_to_exist(table_name=\"confirmed_transactions\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `post_likes`: Ensure that the maximum value does not exceed 1,000,000. Validate the average number of likes is above 100.","generated_expectations":"expect_column_max_to_be_between(column=\"post_likes\", max_value=1000000),expect_column_mean_to_be_between(column=\"post_likes\", min_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `view_count` column contains no negative values, indicating accurate tracking of user engagement.","generated_expectations":"expect_column_values_to_be_between(column=\"view_count\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `check_in_time` field adheres to the `HH:MM` 24-hour format and is within the operational hours of the hotel, e.g., `14:00` to `23:00`.","generated_expectations":"expect_column_values_to_match_regex(column=\"check_in_time\", regex=r\"^(?:[01]\\d|2[0-3]):[0-5]\\d$\"),expect_column_values_to_be_between(column=\"check_in_time\", min_value=\"14:00\", max_value=\"23:00\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `recipient_count` column contains integer values greater than or equal to 1.","generated_expectations":"expect_column_values_to_be_of_type(column=\"recipient_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"recipient_count\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of `returned_items` across all records does not exceed `10%` of total `sold_items`.","generated_expectations":"expect_column_sum_to_be_between(column=\"returned_items\", min_value=0, max_value=0.1 * expect_column_sum(column=\"sold_items\"))","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'course_id': Ensure this field exists and contains unique string values. Validate that all values conform to the pattern 'COURSE-XXXX'.","generated_expectations":"expect_column_to_exist(column=\"course_id\"),expect_column_values_to_be_unique(column=\"course_id\"),expect_column_values_to_match_regex(column=\"course_id\", regex=r\"^COURSE-\\d{4}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `credit_score` column passes the Kolmogorov-Smirnov test with a p-value greater than 0.05.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"credit_score\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `warehouse_location` field contains only distinct values matching the predefined list of locations.","generated_expectations":"expect_column_values_to_be_in_set(column=\"warehouse_location\", value_set=predefined_list_of_locations),expect_column_values_to_be_unique(column=\"warehouse_location\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `course_enrollment` table, ensure the `enrollment_date` field contains dates within the range of '2020-01-01' to '2023-12-31'.","generated_expectations":"expect_column_values_to_be_between(column=\"enrollment_date\", min_value=\"2020-01-01\", max_value=\"2023-12-31\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `hotel_bookings` table, ensure the `booking_id` field has unique values and matches the type 'string'. No null values are allowed.","generated_expectations":"expect_column_to_exist(column=\"booking_id\"),expect_column_values_to_be_unique(column=\"booking_id\"),expect_column_values_to_not_be_null(column=\"booking_id\"),expect_column_values_to_be_of_type(column=\"booking_id\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `comment_count` column: Ensure that the mean is within the range of 0 to 100, with no missing values.","generated_expectations":"expect_column_mean_to_be_between(column=\"comment_count\", min_value=0, max_value=100),expect_column_values_to_not_be_null(column=\"comment_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `user_rating` column values are within the range of 1 to 10.","generated_expectations":"expect_column_values_to_be_between(column=\"user_rating\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of `price` and `tax` columns equals the `total_cost` column for each record.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"price\", column_B=\"total_cost\"),expect_column_pair_values_to_be_equal(column_A=\"tax\", column_B=\"total_cost\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `grade_level` values are restricted to the set of integers: {9, 10, 11, 12}.","generated_expectations":"expect_column_values_to_be_in_set(column=\"grade_level\", value_set={9, 10, 11, 12})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `email` column values conform to a valid email format and are unique across all records.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"),expect_column_values_to_be_unique(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'category_id': Ensure the field matches the type 'text'. Validate that values in (category_id) must exist in the list of valid categories. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"category_id\"),expect_column_values_to_be_of_type(column=\"category_id\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"category_id\", value_set=valid_categories)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `signup_date` field, ensure that all dates are in the correct format and none are null.","generated_expectations":"expect_column_to_exist(column=\"signup_date\"),expect_column_values_to_not_be_null(column=\"signup_date\"),expect_column_values_to_match_strftime_format(column=\"signup_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `inventory_level`: Ensure the values do not exceed the set range of 0 to 5000 and check for distinct values.","generated_expectations":"expect_column_values_to_be_between(column=\"inventory_level\", min_value=0, max_value=5000),expect_column_proportion_of_unique_values_to_be_between(column=\"inventory_level\", min_value=0.9, max_value=1.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `feedback_score` column has a minimum value of 1 and a maximum value of 5, with a mean above 4.","generated_expectations":"expect_column_min_to_be_between(column=\"feedback_score\", min_value=1),expect_column_max_to_be_between(column=\"feedback_score\", max_value=5),expect_column_mean_to_be_between(column=\"feedback_score\", min_value=4, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `category` field: Ensure values are from the predefined set `['Electronics', 'Clothing', 'Home Goods']` and are case-sensitive.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Clothing', 'Home Goods'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `room_type`: Ensure values in `room_type` must exist in the set ['Single', 'Double', 'Suite']. Ensure this field is required (not null).","generated_expectations":"expect_column_values_to_be_in_set(column=\"room_type\", value_set=['Single', 'Double', 'Suite']),expect_column_values_to_not_be_null(column=\"room_type\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `end_date` column is greater than the `start_date` column across all records.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"end_date\", column_B=\"start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `active_status` column contains only the values `['Active', 'Inactive']` and no other entries.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"active_status\", value_set=[\"Active\", \"Inactive\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `research_topic` column contains only distinct values from the predefined set `['Health', 'Education', 'Environment']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"research_topic\", value_set=['Health', 'Education', 'Environment'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `post_length` column values have a minimum of 50 characters and a maximum of 2000 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"post_length\", min_value=50, max_value=2000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the uploaded files do not contain any entries or lines that exceed the specified regular expression pattern for valid email addresses.","generated_expectations":"expect_file_line_regex_match_count_to_equal(file_path=\"uploaded_files\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}$\", count=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains unique string values that match the regex pattern `^[0-9a-f]{64}$`.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_match_regex(column=\"transaction_id\", regex=r\"^[0-9a-f]{64}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `reorder_level` column values are sorted in ascending order.","generated_expectations":"expect_column_values_to_be_increasing(column=\"reorder_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `subscription_price`: Ensure that 95% of the values fall within the range of $5 to $20.","generated_expectations":"expect_column_proportion_of_unique_values_to_be_between(column=\"subscription_price\", min_value=0.95, max_value=1.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `feedback` field: Ensure that string lengths are between 10 and 500 characters and do not contain offensive words.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"feedback\", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=\"feedback\", regex=r\"\\b(offensive_word1|offensive_word2|offensive_word3)\\b\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that `property_id` in Real Estate Management corresponds to a unique entry in the `transactions` dataset, ensuring data integrity.","generated_expectations":"expect_column_values_to_be_unique(column=\"property_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the number of rows in the `orders` table matches the row count in the `order_details` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"orders\", other_table=\"order_details\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `phone_number` column matches the format `+(country_code) (number)` and contains no duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\+\\(\\d{1,3}\\) \\d{7,15}$\"),expect_column_values_to_be_unique(column=\"phone_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `threat_details` field: Ensure it is a valid JSON object and contains properties such as 'severity' and 'description'. Validate that both properties exist.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"threat_details\"),expect_column_values_to_match_json_schema(column=\"threat_details\", schema={\"type\": \"object\", \"properties\": {\"severity\": {\"type\": \"string\"}, \"description\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_status': Ensure the field is required (not null). Validate that the values conform to the expected categories ['Pending', 'Shipped', 'Delivered', 'Cancelled'].","generated_expectations":"expect_column_values_to_not_be_null(column=\"shipment_status\"),expect_column_values_to_be_in_set(column=\"shipment_status\", value_set=['Pending', 'Shipped', 'Delivered', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'discount_code': Ensure the field matches the type 'text'. Validate that values do not contain spaces and conform to the regex pattern '^[A-Z0-9]{5,10}$'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"discount_code\", type_=\"text\"),expect_column_values_to_not_match_regex(column=\"discount_code\", regex=r\"\\s\"),expect_column_values_to_match_regex(column=\"discount_code\", regex=r\"^[A-Z0-9]{5,10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `course_duration` field: Validate that values are within the range of 1 to 52 weeks and are of type 'integer'.","generated_expectations":"expect_column_values_to_be_between(column=\"course_duration\", min_value=1, max_value=52),expect_column_values_to_be_of_type(column=\"course_duration\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `video_title` column contains strings with a length between 5 and 100 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"video_title\", min_value=5, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that for each `order_id`, the `shipping_cost` is non-negative and does not exceed a threshold of $50.","generated_expectations":"expect_column_values_to_be_between(column=\"shipping_cost\", min_value=0, max_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_id` column contains only unique values and does not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"transaction_id\"),expect_column_values_to_not_be_null(column=\"transaction_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `alert_score` column's maximum value does not exceed 100 and the mean is above 50.","generated_expectations":"expect_column_max_to_be_between(column=\"alert_score\", max_value=100),expect_column_mean_to_be_between(column=\"alert_score\", min_value=50)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `customer_segment` column: Ensure the values belong to the defined list: ['New', 'Returning', 'VIP'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"customer_segment\", value_set=['New', 'Returning', 'VIP'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `battery_level` column, ensure that values are of type 'float' and range between 0.0 and 100.0.","generated_expectations":"expect_column_values_to_be_of_type(column=\"battery_level\", type_=\"float\"),expect_column_values_to_be_between(column=\"battery_level\", min_value=0.0, max_value=100.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `claim_date` column contains dates formatted as 'MM\/DD\/YYYY' and that all dates are not in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"claim_date\", strftime_format=\"%m\/%d\/%Y\"),expect_column_values_to_be_less_than(column=\"claim_date\", value=pd.Timestamp.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the combination of `customer_id` and `policy_number` is unique across all records.","generated_expectations":"expect_compound_columns_to_be_unique(column_A=\"customer_id\", column_B=\"policy_number\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `price_change` column is required (not null) and that all values are numeric reflecting percentage changes.","generated_expectations":"expect_column_values_to_not_be_null(column=\"price_change\"),expect_column_values_to_be_of_type(column=\"price_change\", type_=\"float\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `insurance_expiry_date` is in the format `YYYY-MM-DD` and does not precede the current date.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"insurance_expiry_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"insurance_expiry_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'activation_date': Ensure this field matches the type 'date'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"activation_date\"),expect_column_values_to_be_of_type(column=\"activation_date\", type_=\"date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `category` field only contains values from the set `['Electronics', 'Clothing', 'Home']`. No missing values should be present.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Clothing', 'Home']),expect_column_values_to_not_be_null(column=\"category\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `admission_date` field: Ensure all dates are in the past and match the format 'YYYY-MM-DD'. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"admission_date\"),expect_column_values_to_match_strftime_format(column=\"admission_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_not_be_null(column=\"admission_date\"),expect_column_values_to_be_between(column=\"admission_date\", min_value=\"1900-01-01\", max_value=\"2023-10-01\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `sensor_reading` column's values are within the operational range of 0 to 1000.","generated_expectations":"expect_column_values_to_be_between(column=\"sensor_reading\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the count of distinct values in the `status` column of the `users` table matches the set `['active', 'inactive', 'banned']`.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"status\", value_set=['active', 'inactive', 'banned'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `hire_date` column, ensure that all dates are in increasing order with no duplicates.","generated_expectations":"expect_column_values_to_be_increasing(column=\"hire_date\"),expect_column_values_to_be_unique(column=\"hire_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'route_status': Ensure the field matches the type 'text'. Validate that values in (route_status) must exist in the predefined list ['In Transit', 'Delivered', 'Delayed', 'Cancelled']. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"route_status\"),expect_column_values_to_be_of_type(column=\"route_status\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"route_status\", value_set=['In Transit', 'Delivered', 'Delayed', 'Cancelled'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `voting_date` field: Validate that all entries are in the format YYYY-MM-DD and are not future dates.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"voting_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"voting_date\")  # This checks if they're valid dates,# Additional custom logic would be needed to check for future dates, as there is no direct expectation for that in the given reference.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `visit_reason` field does not contain null values and is of type 'text'. Verify that all entries are meaningful.","generated_expectations":"expect_column_values_to_not_be_null(column=\"visit_reason\"),expect_column_values_to_be_of_type(column=\"visit_reason\", type_=\"text\"),expect_column_values_to_be_unique(column=\"visit_reason\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `ip_address` column matches the regular expression pattern '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'.","generated_expectations":"expect_column_values_to_match_regex(column=\"ip_address\", regex=r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `humidity` column is of type 'numeric' and that no entries are null.","generated_expectations":"expect_column_values_to_be_of_type(column=\"humidity\", type_=\"numeric\"),expect_column_values_to_not_be_null(column=\"humidity\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `state` column values match the set `['California', 'Texas', 'Florida', 'New York']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"state\", value_set=['California', 'Texas', 'Florida', 'New York'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'file_size': Ensure the field matches the type 'integer'. Validate that (file_size) falls within the range of 1KB to 100MB.","generated_expectations":"expect_column_values_to_be_of_type(column=\"file_size\", type_=\"int\"),expect_column_values_to_be_between(column=\"file_size\", min_value=1024, max_value=104857600)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `genre` column does not match any of the following patterns: `['Horror', 'Adult', 'Violent']`.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"genre\", regex_list=[r\"Horror\", r\"Adult\", r\"Violent\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `category`: Ensure the field matches the type 'text'. Values must exist in the predefined set of categories.","generated_expectations":"expect_column_values_to_be_of_type(column=\"category\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"category\", value_set=[\"category1\", \"category2\", \"category3\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `wallets` table: Ensure the number of rows is between 10 and 500 and the `wallet_address` column matches the Ethereum address format.","generated_expectations":"expect_table_row_count_to_be_between(min_value=10, max_value=500),expect_column_values_to_match_regex(column=\"wallet_address\", regex=r\"^0x[a-fA-F0-9]{40}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `device_id` column contains unique values and that no entries are null.","generated_expectations":"expect_column_values_to_be_unique(column=\"device_id\"),expect_column_values_to_not_be_null(column=\"device_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `forecast_date`, ensure the field matches the type 'date' and is formatted as 'YYYY-MM-DD'.","generated_expectations":"expect_column_values_to_be_of_type(column=\"forecast_date\", type_=\"date\"),expect_column_values_to_match_strftime_format(column=\"forecast_date\", strftime_format=\"%Y-%m-%d\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `post_creation_date` column must not contain future dates. Ensure all values are of type 'date'.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"post_creation_date\"),expect_column_values_to_be_between(column=\"post_creation_date\", min_value=\"1900-01-01\", max_value=\"today\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `humidity` field: Validate that values are percentages within the range of 0 to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"humidity\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `distance_travelled` column values are positive and do not exceed 1,000 kilometers.","generated_expectations":"expect_column_values_to_be_between(column=\"distance_travelled\", min_value=0, max_value=1000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `interest_rate` column: Ensure that all values are of type 'float' and fall between 0.0 and 0.2. Check for unique values and no missing entries.","generated_expectations":"expect_column_values_to_be_of_type(column=\"interest_rate\", type_=\"float\"),expect_column_values_to_be_between(column=\"interest_rate\", min_value=0.0, max_value=0.2),expect_column_values_to_be_unique(column=\"interest_rate\"),expect_column_values_to_not_be_null(column=\"interest_rate\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'fee': Ensure the field can be null. If present, validate that the field matches the type 'float' and is greater than or equal to zero.","generated_expectations":"expect_column_values_to_be_null(column=\"fee\"),expect_column_values_to_be_of_type(column=\"fee\", type_=\"float\"),expect_column_values_to_be_between(column=\"fee\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'measurement_value': Ensure values are of type 'float'. Ensure there are no missing values. The standard deviation of the measurement values should not exceed 5.","generated_expectations":"expect_column_values_to_be_of_type(column=\"measurement_value\", type_=\"float\"),expect_column_values_to_not_be_null(column=\"measurement_value\"),expect_column_stdev_to_be_between(column=\"measurement_value\", min_value=0, max_value=5)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `likes_count` column contains integer values greater than or equal to zero, with no missing values.","generated_expectations":"expect_column_values_to_be_of_type(column=\"likes_count\", type_=\"int\"),expect_column_values_to_not_be_null(column=\"likes_count\"),expect_column_values_to_be_between(column=\"likes_count\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_hash': Ensure the field matches the type 'string'. Ensure all values in (transaction_hash) match the regex pattern '^[0-9a-fA-F]{64}$'. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"transaction_hash\"),expect_column_values_to_be_of_type(column=\"transaction_hash\", type_=\"string\"),expect_column_values_to_match_regex(column=\"transaction_hash\", regex=r\"^[0-9a-fA-F]{64}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the standard deviation of the `data_accuracy` column does not exceed 5%, indicating reliability in Research and Data Analysis.","generated_expectations":"expect_column_stdev_to_be_between(column=\"data_accuracy\", min_value=0, max_value=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `elections` dataset: Ensure the `election_date` field is of type 'date' and falls within the range of `['2020-01-01', '2023-12-31']`.","generated_expectations":"expect_column_values_to_be_of_type(column=\"election_date\", type_=\"date\"),expect_column_values_to_be_between(column=\"election_date\", min_value='2020-01-01', max_value='2023-12-31')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_status` column has no null values and only contains values from the set `['Active', 'Inactive']`.","generated_expectations":"expect_column_values_to_not_be_null(column=\"customer_status\"),expect_column_values_to_be_in_set(column=\"customer_status\", value_set=['Active', 'Inactive'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `patient_email` and `author_email` fields do not contain any duplicated email addresses across both domains.","generated_expectations":"expect_column_pair_values_to_be_unique(column_a=\"patient_email\", column_b=\"author_email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'customer_feedback': Ensure the column 'feedback_score' exists. Ensure values in 'feedback_score' are within the range of 1 to 10.","generated_expectations":"expect_column_to_exist(column=\"feedback_score\"),expect_column_values_to_be_between(column=\"feedback_score\", min_value=1, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'product_id': Ensure this field exists. Ensure the field matches the type 'integer'. Validate that all values in 'product_id' are unique and cannot be null.","generated_expectations":"expect_column_to_exist(column=\"product_id\"),expect_column_values_to_be_of_type(column=\"product_id\", type_=\"integer\"),expect_column_values_to_not_be_null(column=\"product_id\"),expect_column_values_to_be_unique(column=\"product_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `client_id` field: Ensure this column exists and contains integer values that are unique across the dataset.","generated_expectations":"expect_column_to_exist(column=\"client_id\"),expect_column_values_to_be_unique(column=\"client_id\"),expect_column_values_to_be_of_type(column=\"client_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'weather_forecast' table: Check that the number of rows is equal to 7. Ensure this table is present in the dataset.","generated_expectations":"expect_table_row_count_to_equal(table=\"weather_forecast\", value=7),expect_table_columns_to_match_set(table=\"weather_forecast\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `threat_level` column contains values from the defined set `['low', 'medium', 'high']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_level\", value_set=['low', 'medium', 'high'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the values in the `research_category` column belong to the approved set: `['Biology', 'Chemistry', 'Physics', 'Social Sciences']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"research_category\", value_set=['Biology', 'Chemistry', 'Physics', 'Social Sciences'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `participant_age` column has a mean value between 18 and 65, and contains no null values.","generated_expectations":"expect_column_mean_to_be_between(column=\"participant_age\", min_value=18, max_value=65),expect_column_values_to_not_be_null(column=\"participant_age\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the Kullback-Leibler divergence between the `transaction_fee` distribution and the expected fee distribution is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"transaction_fee\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `order_id` column exists and contains unique values.","generated_expectations":"expect_column_to_exist(column=\"order_id\"),expect_column_values_to_be_unique(column=\"order_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `genre` column adheres to a predefined list of genres: `['Action', 'Adventure', 'RPG']` and has no duplicates.","generated_expectations":"expect_column_values_to_be_in_set(column=\"genre\", value_set=['Action', 'Adventure', 'RPG']),expect_column_values_to_be_unique(column=\"genre\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` column, ensure no missing values exist and that all entries fall within the range of $30,000 to $200,000.","generated_expectations":"expect_column_values_to_not_be_null(column=\"salary\"),expect_column_values_to_be_between(column=\"salary\", min_value=30000, max_value=200000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `election_results` table, verify that the `votes_cast` field contains only non-negative integers and that total votes are within a valid range based on the registered voter count.","generated_expectations":"expect_column_values_to_be_of_type(column=\"votes_cast\", type_=\"int\"),expect_column_values_to_be_between(column=\"votes_cast\", min_value=0, max_value=None),expect_column_sum_to_be_between(column=\"votes_cast\", min_value=0, max_value=registered_voter_count)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `match_date` column, ensure that all dates are in increasing order without any duplicates.","generated_expectations":"expect_column_values_to_be_increasing(column=\"match_date\"),expect_column_values_to_be_unique(column=\"match_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `admission_date` and `discharge_date` columns are formatted as `YYYY-MM-DD` and that `discharge_date` is after `admission_date`.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"admission_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_match_strftime_format(column=\"discharge_date\", strftime_format=\"%Y-%m-%d\"),expect_column_pair_values_A_to_be_greater_than_B(column_A=\"discharge_date\", column_B=\"admission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_rating': Ensure the field is required (not null). Ensure the field matches the type 'float'. Ensure values are between 0.0 and 10.0.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_rating\"),expect_column_values_to_be_of_type(column=\"user_rating\", type_=\"float\"),expect_column_values_to_be_between(column=\"user_rating\", min_value=0.0, max_value=10.0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `status` column in the `orders` table contains only values from the set `['Pending', 'Shipped', 'Delivered']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['Pending', 'Shipped', 'Delivered'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `assigned_attorney` column has unique values and matches the list of valid attorneys in the `attorney_list`.","generated_expectations":"expect_column_values_to_be_unique(column=\"assigned_attorney\"),expect_column_values_to_be_in_set(column=\"assigned_attorney\", value_set=attorney_list)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `response_time` column, validate that all entries are positive integers representing milliseconds.","generated_expectations":"expect_column_values_to_be_of_type(column=\"response_time\", type_=\"int\"),expect_column_values_to_be_between(column=\"response_time\", min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `vehicle_logs`: Ensure that `mileage` is greater than or equal to zero. Validate that `vehicle_id` and `driver_id` combinations are unique.","generated_expectations":"expect_column_values_to_be_between(column=\"mileage\", min_value=0),expect_column_pair_values_to_be_unique(column_A=\"vehicle_id\", column_B=\"driver_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `policy_start_date` and `policy_end_date` columns are in chronological order, with `policy_end_date` always after `policy_start_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"policy_end_date\", column_B=\"policy_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `position` column: Ensure values match at least one pattern from the list `['Forward', 'Midfielder', 'Defender', 'Goalkeeper']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"position\", value_set=['Forward', 'Midfielder', 'Defender', 'Goalkeeper'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `performance_rating`: Ensure values are from the set `['Excellent', 'Good', 'Average', 'Poor']` and no missing values exist.","generated_expectations":"expect_column_values_to_be_in_set(column=\"performance_rating\", value_set=['Excellent', 'Good', 'Average', 'Poor']),expect_column_values_to_not_be_null(column=\"performance_rating\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `game_platform`: Validate that entries belong to the set `['PC', 'Console', 'Mobile']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"game_platform\", value_set=['PC', 'Console', 'Mobile'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `stock_quantity` column values are greater than or equal to 0.","generated_expectations":"expect_column_values_to_be_between(column=\"stock_quantity\", min_value=0, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `customer_feedback` column does not exceed 500 characters and is not null.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"customer_feedback\", min_value=0, max_value=500),expect_column_values_to_not_be_null(column=\"customer_feedback\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `email` field contains valid email formats and does not have any duplicates.","generated_expectations":"expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\"),expect_column_values_to_be_unique(column=\"email\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the field 'feedback_comments': Ensure this field can accept null values, but when present, the length of the string must be between 10 and 500 characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"feedback_comments\", min_value=10, max_value=500),expect_column_values_to_be_null(column=\"feedback_comments\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'election_date': Ensure this field cannot be null. Ensure the type is 'date'. Validate that all election dates are in the future or today.","generated_expectations":"expect_column_values_to_not_be_null(column=\"election_date\"),expect_column_values_to_be_of_type(column=\"election_date\", type_=\"date\"),expect_column_values_to_be_in_set(column=\"election_date\", value_set=[date.today()])  # This is a placeholder; you would need to implement the logic to validate future dates.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `citizen_id`: Ensure the field is required (not null). Ensure values in `citizen_id` are unique across the dataset.","generated_expectations":"expect_column_values_to_not_be_null(column=\"citizen_id\"),expect_column_values_to_be_unique(column=\"citizen_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'game_id': Ensure the field is required (not null). Ensure all game IDs are unique and of type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"game_id\"),expect_column_values_to_be_unique(column=\"game_id\"),expect_column_values_to_be_of_type(column=\"game_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `category` field: Validate that all entries match one of the predefined categories: `['Electronics', 'Clothing', 'Home']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"category\", value_set=['Electronics', 'Clothing', 'Home'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `shipment_date` is not later than the `order_date` to maintain logical consistency.","generated_expectations":"expect_column_pair_values_A_to_be_less_than_B(column_A=\"shipment_date\", column_B=\"order_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For fields `city` and `date`: Ensure the combination is unique across all records.","generated_expectations":"expect_compound_columns_to_be_unique(column_list=[\"city\", \"date\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the distribution of `view_count` follows a normal distribution with a p-value greater than 0.05 in the KS test.","generated_expectations":"expect_column_parameterized_distribution_ks_test_p_value_to_be_greater_than(column=\"view_count\", threshold=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'firmware_version': Ensure the field matches the type 'text'. Ensure the firmware version follows the semantic versioning format (MAJOR.MINOR.PATCH).","generated_expectations":"expect_column_values_to_be_of_type(column=\"firmware_version\", type_=\"text\"),expect_column_values_to_match_regex(column=\"firmware_version\", regex=r\"^\\d+\\.\\d+\\.\\d+$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `points_scored` column: Ensure the sum of values is greater than 1000 and that no value is negative.","generated_expectations":"expect_column_sum_to_be_between(column=\"points_scored\", min_value=1000),expect_column_values_to_be_between(column=\"points_scored\", min_value=0)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_id': Ensure this field is required (not null) and matches the format of a unique identifier. Ensure values in (user_id) are unique.","generated_expectations":"expect_column_values_to_not_be_null(column=\"user_id\"),expect_column_values_to_be_unique(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'discount_code': Ensure the field matches the type 'text'. Ensure string values in (discount_code) do not exceed 10 characters in length. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"discount_code\"),expect_column_values_to_be_of_type(column=\"discount_code\", type_=\"text\"),expect_column_value_lengths_to_be_between(column=\"discount_code\", min_value=0, max_value=10)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'grade': Ensure the field matches the type 'decimal'. Validate that grades are within the range [0, 100].","generated_expectations":"expect_column_values_to_be_of_type(column=\"grade\", type_=\"decimal\"),expect_column_values_to_be_between(column=\"grade\", min_value=0, max_value=100)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `precipitation` column values are not null and fall within the range of 0 to 500 mm.","generated_expectations":"expect_column_values_to_not_be_null(column=\"precipitation\"),expect_column_values_to_be_between(column=\"precipitation\", min_value=0, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'followers_count': Ensure the field exists and matches the type 'integer'. Validate that the values in (followers_count) are greater than or equal to 0 and do not exceed 1,000,000.","generated_expectations":"expect_column_to_exist(column=\"followers_count\"),expect_column_values_to_be_of_type(column=\"followers_count\", type_=\"int\"),expect_column_values_to_be_between(column=\"followers_count\", min_value=0, max_value=1000000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `policy_number`: Ensure values are unique and not null. Ensure the field matches the type 'string'.","generated_expectations":"expect_column_values_to_be_unique(column=\"policy_number\"),expect_column_values_to_not_be_null(column=\"policy_number\"),expect_column_values_to_be_of_type(column=\"policy_number\", type_=\"string\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sensor_data` JSON column, verify that it contains valid JSON objects that include required fields: `temperature`, `humidity`, and `status`.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"sensor_data\"),expect_column_values_to_match_json_schema(column=\"sensor_data\", schema={\"type\": \"object\", \"properties\": {\"temperature\": {\"type\": \"number\"}, \"humidity\": {\"type\": \"number\"}, \"status\": {\"type\": \"string\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `department` column contains only distinct values from the predefined set `['Health', 'Education', 'Transportation']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"department\", value_set=['Health', 'Education', 'Transportation'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `sent_time` column, ensure all datetime strings match the format '%Y-%m-%d %H:%M:%S' and can be parsed correctly.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"sent_time\", strftime_format='%Y-%m-%d %H:%M:%S'),expect_column_values_to_be_dateutil_parseable(column=\"sent_time\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'weather_conditions' JSON object: Validate that it contains 'description' and 'icon' keys, ensuring they comply with the defined schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"weather_conditions\", schema={\"type\": \"object\", \"properties\": {\"description\": {\"type\": \"string\"}, \"icon\": {\"type\": \"string\"}}, \"required\": [\"description\", \"icon\"]})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `categories` field contains valid JSON arrays that adhere to the defined schema and do not have missing values.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"categories\"),expect_column_values_to_match_json_schema(column=\"categories\", schema=\"defined_schema\"),expect_column_values_to_not_be_null(column=\"categories\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the 'supplier_info' JSON object contains 'supplier_id' and 'contact_details', ensuring adherence to the defined schema.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"supplier_info\", schema={\"type\": \"object\", \"properties\": {\"supplier_id\": {\"type\": \"string\"}, \"contact_details\": {\"type\": \"object\"}}})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `project_completion_date`, confirm that it is always later than the `project_start_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"project_completion_date\", column_B=\"project_start_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'user_metadata': Ensure that values in this column are valid JSON objects and conform to the specified JSON schema.","generated_expectations":"expect_column_values_to_be_json_parseable(column=\"user_metadata\"),expect_column_values_to_match_json_schema(column=\"user_metadata\", schema={\"type\": \"object\"})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `battery_level` field contains non-negative integers and is less than or equal to 100.","generated_expectations":"expect_column_values_to_be_between(column=\"battery_level\", min_value=0, max_value=100),expect_column_values_to_be_of_type(column=\"battery_level\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the table has exactly 1,000 rows and that the `category` column exists and contains only distinct values from the set ['Electronics', 'Home', 'Fashion'].","generated_expectations":"expect_table_row_count_to_equal(row_count=1000),expect_column_to_exist(column=\"category\"),expect_column_distinct_values_to_equal_set(column=\"category\", value_set=['Electronics', 'Home', 'Fashion'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `wallet_address` column consists only of valid Ethereum addresses, matching the regex pattern `^0x[a-fA-F0-9]{40}$`.","generated_expectations":"expect_column_values_to_match_regex(column=\"wallet_address\", regex=r\"^0x[a-fA-F0-9]{40}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `delivery_date` column values are parsed correctly as dates and are not in the past.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"delivery_date\"),expect_column_values_to_be_between(column=\"delivery_date\", min_value=datetime.datetime.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'subscriptions': Ensure the row count is equal to the row count in table 'active_users'.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"active_users\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `status` column only contains values from the set `['Draft', 'Published', 'Archived']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=[\"Draft\", \"Published\", \"Archived\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'watch_time': Ensure the field matches the type 'integer'. Ensure this field is between 0 and 86400 (in seconds). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"watch_time\"),expect_column_values_to_be_of_type(column=\"watch_time\", type_=\"int\"),expect_column_values_to_be_between(column=\"watch_time\", min_value=0, max_value=86400)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `call_duration` column contains only positive integers and that the average duration does not exceed 1800 seconds.","generated_expectations":"expect_column_values_to_be_between(column=\"call_duration\", min_value=1, max_value=None),expect_column_mean_to_be_between(column=\"call_duration\", min_value=None, max_value=1800)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the number of rows in the `alerts` table is equal to the number of rows in the `resolved_alerts` table.","generated_expectations":"expect_table_row_count_to_equal_other_table(table=\"alerts\", other_table=\"resolved_alerts\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_role` column: Ensure values are from the specified set `['admin', 'editor', 'viewer']`. Ensure there are no missing values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"user_role\", value_set=['admin', 'editor', 'viewer']),expect_column_values_to_not_be_null(column=\"user_role\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field `email`: Ensure the field is required (not null). Verify that all values are in valid email format.","generated_expectations":"expect_column_values_to_not_be_null(column=\"email\"),expect_column_values_to_match_regex(column=\"email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'project_budget': Ensure the field matches the type 'float'. Ensure values in (project_budget) are greater than or equal to 1000. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"project_budget\"),expect_column_values_to_be_of_type(column=\"project_budget\", type_=\"float\"),expect_column_values_to_be_between(column=\"project_budget\", min_value=1000, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `player_stats` column contains valid JSON objects that conform to the specified schema for player performance metrics.","generated_expectations":"expect_column_values_to_match_json_schema(column=\"player_stats\", schema=\"your_schema_here\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `location` field, ensure the string length is between 5 and 100 characters and does not contain any special characters.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"location\", min_value=5, max_value=100),expect_column_values_to_not_match_regex(column=\"location\", regex=r\"[!@#$%^&*(),.?\\\":{}|<>]\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `consumption` column, ensure all values are within the range of [0, 100000] kWh and are arranged in increasing order.","generated_expectations":"expect_column_values_to_be_between(column=\"consumption\", min_value=0, max_value=100000),expect_column_values_to_be_increasing(column=\"consumption\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'energy_usage_reports': Ensure the number of rows is between 30 and 365. Ensure all required fields ('meter_id', 'usage', 'timestamp') exist.","generated_expectations":"expect_table_row_count_to_be_between(min_value=30, max_value=365),expect_column_to_exist(column=\"meter_id\"),expect_column_to_exist(column=\"usage\"),expect_column_to_exist(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `transaction_date` column, ensure all values are valid datetime strings that can be parsed and match the format `'%m\/%d\/%Y'`.","generated_expectations":"expect_column_values_to_be_dateutil_parseable(column=\"transaction_date\"),expect_column_values_to_match_strftime_format(column=\"transaction_date\", strftime_format='%m\/%d\/%Y')","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `monthly_bill` column: Ensure that the mean value is greater than or equal to $50 and less than or equal to $500.","generated_expectations":"expect_column_mean_to_be_between(column=\"monthly_bill\", min_value=50, max_value=500)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'transaction_amounts': Ensure that the Kullback-Leibler (KL) divergence between transaction distributions is below 0.1.","generated_expectations":"expect_column_kl_divergence_to_be_less_than(column=\"transaction_amounts\", threshold=0.1)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the total of `cost_price` and `shipping_cost` columns matches the `total_price` column for each product entry.","generated_expectations":"expect_column_pair_values_to_be_equal(column_A=\"cost_price\", column_B=\"total_price\"),expect_column_pair_values_to_be_equal(column_A=\"shipping_cost\", column_B=\"total_price\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_type': Ensure the field matches the type 'text'. Validate that all values in 'service_type' are among the defined set: {electricity, water, gas}.","generated_expectations":"expect_column_values_to_be_of_type(column=\"service_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"service_type\", value_set=[\"electricity\", \"water\", \"gas\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `incident_severity` column values are categorized as 'low', 'medium', 'high', or 'critical'. Validate that the distribution of severities does not exceed a 30% threshold for any individual category.","generated_expectations":"expect_column_values_to_be_in_set(column=\"incident_severity\", value_set=[\"low\", \"medium\", \"high\", \"critical\"]),expect_column_proportion_of_unique_values_to_be_between(column=\"incident_severity\", min_value=0.0, max_value=0.3)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `attack_vector` column: Ensure values are limited to the set `['Phishing', 'Malware', 'DDoS']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"attack_vector\", value_set=['Phishing', 'Malware', 'DDoS'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `delivery_time_days` values are between 1 and 30.","generated_expectations":"expect_column_values_to_be_between(column=\"delivery_time_days\", min_value=1, max_value=30)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `unique_course_ids` column matches the distinct set of course IDs offered in the current semester.","generated_expectations":"expect_column_distinct_values_to_equal_set(column=\"unique_course_ids\", value_set=current_semester_course_ids)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'feedback': Validate that all feedback entries have a length between 10 and 500 characters and do not contain any profanity.","generated_expectations":"expect_column_value_lengths_to_be_between(column=\"feedback\", min_value=10, max_value=500),expect_column_values_to_not_match_regex(column=\"feedback\", regex=r\"\\b(profanity1|profanity2|profanity3)\\b\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `transaction_status` column only contains values from the set ['Pending', 'Completed', 'Failed'].","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_status\", value_set=['Pending', 'Completed', 'Failed'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `salary` field: Validate that all values are of type 'decimal', and ensure no missing values are present.","generated_expectations":"expect_column_values_to_be_of_type(column=\"salary\", type_=\"decimal\"),expect_column_values_to_not_be_null(column=\"salary\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `post_id` field: Ensure the field is required (not null). Ensure each value is unique and matches the type 'integer'.","generated_expectations":"expect_column_values_to_not_be_null(column=\"post_id\"),expect_column_values_to_be_unique(column=\"post_id\"),expect_column_values_to_be_of_type(column=\"post_id\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Confirm that the `phone_number` field has a length of exactly 10 digits and does not contain any letters or special characters.","generated_expectations":"expect_column_value_lengths_to_equal(column=\"phone_number\", length=10),expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\d{10}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the 'case_status' field: Ensure all values are distinct and match the allowed set ['Open', 'Closed', 'Pending', 'On Appeal'].","generated_expectations":"expect_column_values_to_be_unique(column=\"case_status\"),expect_column_values_to_be_in_set(column=\"case_status\", value_set=['Open', 'Closed', 'Pending', 'On Appeal'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `billing_cycle` column has exactly 12 rows representing each month of the year.","generated_expectations":"expect_column_unique_value_count_to_be_between(column=\"billing_cycle\", min_value=12, max_value=12)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `credit_limit` is always greater than or equal to the highest `transaction_amount` for the respective account.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"credit_limit\", column_B=\"transaction_amount\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `likes` field, confirm that all entries are non-negative integers that do not exceed `1000000`.","generated_expectations":"expect_column_values_to_be_between(column=\"likes\", min_value=0, max_value=1000000),expect_column_values_to_be_of_type(column=\"likes\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `location` field does not match any entries in the list of restricted areas.","generated_expectations":"expect_column_values_to_not_match_regex_list(column=\"location\", regex_list=[\"restricted_area_1\", \"restricted_area_2\", \"restricted_area_3\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `created_at` and `updated_at` timestamps in both health and CMS records are in the correct `datetime` format and have no missing values.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"created_at\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"created_at\"),expect_column_values_to_match_strftime_format(column=\"updated_at\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_not_be_null(column=\"updated_at\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `customer_age` values have a mean of at least 30 years and a maximum of 70 years.","generated_expectations":"expect_column_mean_to_be_between(column=\"customer_age\", min_value=30, max_value=70)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `interest_rate` column's standard deviation is below 0.05, indicating minimal variation among rates.","generated_expectations":"expect_column_stdev_to_be_between(column=\"interest_rate\", min_value=0, max_value=0.05)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the sum of the `amount_sent` and `amount_received` columns equals the value in the `total_balance` column.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"amount_sent\", \"amount_received\"], sum_value=\"total_balance\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For table 'blocks': Ensure the columns match the specified order ('block_id', 'miner', 'timestamp'). Ensure the number of rows is greater than or equal to 1.","generated_expectations":"expect_table_columns_to_match_ordered_list(ordered_list=[\"block_id\", \"miner\", \"timestamp\"]),expect_table_row_count_to_be_between(min_value=1, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the sum of `adults` and `children` columns equals the value in the `guest_count` column.","generated_expectations":"expect_multicolumn_sum_to_equal(column_list=[\"adults\", \"children\"], target_column=\"guest_count\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'evidence_list': Ensure the field can be null. If present, validate that each item in 'evidence_list' is unique.","generated_expectations":"expect_column_values_to_be_null(column=\"evidence_list\"),expect_column_values_to_be_unique(column=\"evidence_list\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `platform` field: Ensure that values match one of the defined categories: `['PC', 'Xbox', 'PlayStation', 'Switch']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"platform\", value_set=['PC', 'Xbox', 'PlayStation', 'Switch'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'shipment_date': Ensure this field exists. Validate that all entries in 'shipment_date' are not older than the current date and are in 'YYYY-MM-DD' format.","generated_expectations":"expect_column_to_exist(column=\"shipment_date\"),expect_column_values_to_match_strftime_format(column=\"shipment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_dateutil_parseable(column=\"shipment_date\")  # This helps in ensuring the date is valid and can be parsed.","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'status': Ensure values in (status) must exist in the set {'active', 'inactive', 'pending', 'completed'}. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"status\"),expect_column_values_to_be_in_set(column=\"status\", value_set={'active', 'inactive', 'pending', 'completed'})","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the `admission_date` and `discharge_date` columns have dates where `discharge_date` is greater than `admission_date`.","generated_expectations":"expect_column_pair_values_A_to_be_greater_than_B(column_A=\"discharge_date\", column_B=\"admission_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'attachment_type': Ensure the field matches the type 'text'. Validate that values in (attachment_type) conform to a list of acceptable file extensions using regex.","generated_expectations":"expect_column_values_to_be_of_type(column=\"attachment_type\", type_=\"text\"),expect_column_values_to_match_regex(column=\"attachment_type\", regex=r\"^(pdf|doc|docx|xls|xlsx|jpg|jpeg|png|gif)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `citizen_id` column contains only unique values and must not allow null entries.","generated_expectations":"expect_column_values_to_be_unique(column=\"citizen_id\"),expect_column_values_to_not_be_null(column=\"citizen_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'experiment_type': Ensure the field matches the type 'text'. Ensure values in (experiment_type) must exist in the set (['In Vitro', 'In Vivo', 'Computational']). Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"experiment_type\"),expect_column_values_to_be_of_type(column=\"experiment_type\", type_=\"text\"),expect_column_values_to_be_in_set(column=\"experiment_type\", value_set=['In Vitro', 'In Vivo', 'Computational'])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'publish_date': Ensure all datetime entries conform to the format '%Y-%m-%d %H:%M:%S'. Validate that the date is not set in the future.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"publish_date\", strftime_format=\"%Y-%m-%d %H:%M:%S\"),expect_column_values_to_be_less_than(column=\"publish_date\", value=datetime.datetime.now())","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `enrollment_date` column contains dates formatted as `YYYY-MM-DD` and that all dates are in the past.","generated_expectations":"expect_column_values_to_match_strftime_format(column=\"enrollment_date\", strftime_format=\"%Y-%m-%d\"),expect_column_values_to_be_increasing(column=\"enrollment_date\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `user_id` column: Ensure values are unique and belong to the specified set of valid user IDs. Ensure the field is required (not null).","generated_expectations":"expect_column_values_to_be_unique(column=\"user_id\"),expect_column_values_to_be_in_set(column=\"user_id\", value_set=valid_user_ids),expect_column_values_to_not_be_null(column=\"user_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Validate that the `status` column in the `transactions` table contains only the values `['pending', 'completed', 'failed']` and does not allow null values.","generated_expectations":"expect_column_values_to_be_in_set(column=\"status\", value_set=['pending', 'completed', 'failed']),expect_column_values_to_not_be_null(column=\"status\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For `final_score`: Ensure the values are non-negative integers not exceeding 100 and that they follow a descending order across student records.","generated_expectations":"expect_column_values_to_be_between(column=\"final_score\", min_value=0, max_value=100),expect_column_values_to_be_decreasing(column=\"final_score\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the total `funding_amount` for each project does not exceed the allocated budget and that it is a positive integer.","generated_expectations":"expect_column_sum_to_be_between(column=\"funding_amount\", min_value=0),expect_column_values_to_be_between(column=\"funding_amount\", min_value=1),expect_column_values_to_be_of_type(column=\"funding_amount\", type_=\"int\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the `age` column values are between 0 and 120.","generated_expectations":"expect_column_values_to_be_between(column=\"age\", min_value=0, max_value=120)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'timestamp': Ensure the field is formatted as a valid UNIX timestamp. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"timestamp\"),expect_column_values_to_be_dateutil_parseable(column=\"timestamp\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `loan_amount` column, ensure the mean value is above 5000 and below 50000.","generated_expectations":"expect_column_mean_to_be_between(column=\"loan_amount\", min_value=5000, max_value=50000)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For the `ip_address` field: Ensure it adheres to the correct format and does not contain any null values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"ip_address\"),expect_column_values_to_match_regex(column=\"ip_address\", regex=r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){2}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure the `points_scored` column values are between 0 and 150, as points scored in a game cannot exceed this range.","generated_expectations":"expect_column_values_to_be_between(column=\"points_scored\", min_value=0, max_value=150)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Verify that the number of rows in the `daily_weather` table is equal to 365.","generated_expectations":"expect_table_row_count_to_equal(table=\"daily_weather\", value=365)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'service_request_id': Ensure the field is required (not null). Ensure the field matches the type 'text'. Ensure this field contains unique values.","generated_expectations":"expect_column_values_to_not_be_null(column=\"service_request_id\"),expect_column_values_to_be_of_type(column=\"service_request_id\", type_=\"text\"),expect_column_values_to_be_unique(column=\"service_request_id\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `phone_number` column across all datasets matches the pattern `^\\(\\d{3}\\) \\d{3}-\\d{4}$` and contains valid area codes.","generated_expectations":"expect_column_values_to_match_regex(column=\"phone_number\", regex=r\"^\\(\\d{3}\\) \\d{3}-\\d{4}$\"),expect_column_values_to_be_in_set(column=\"phone_number\", value_set=[f\"({area_code})\" for area_code in valid_area_codes])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'diagnosis_code': Ensure the column contains unique entries. Verify that all values conform to the ICD-10 code format.","generated_expectations":"expect_column_values_to_be_unique(column=\"diagnosis_code\"),expect_column_values_to_match_regex(column=\"diagnosis_code\", regex=r\"^[A-TV-Z][0-9]{1,7}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Check that the median watch time in the `watch_time` column is greater than 30 minutes.","generated_expectations":"expect_column_median_to_be_between(column=\"watch_time\", min_value=30, max_value=None)","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"For field 'client_email': Ensure the field matches the type 'text'. Ensure values in (client_email) match a valid email format. Ensure this field exists.","generated_expectations":"expect_column_to_exist(column=\"client_email\"),expect_column_values_to_be_of_type(column=\"client_email\", type_=\"text\"),expect_column_values_to_match_regex(column=\"client_email\", regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"Ensure that the `transaction_type` column contains only the values `['Deposit', 'Withdrawal', 'Transfer']`.","generated_expectations":"expect_column_values_to_be_in_set(column=\"transaction_type\", value_set=[\"Deposit\", \"Withdrawal\", \"Transfer\"])","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
{"user_prompt":"In the `threat_level` column: Ensure values fall within the set `['low', 'medium', 'high']` and that there are no duplicate entries.","generated_expectations":"expect_column_values_to_be_in_set(column=\"threat_level\", value_set=['low', 'medium', 'high']),expect_column_values_to_be_unique(column=\"threat_level\")","instruction":"Convert the data quality prompts to great_expectations in the form expectation_type(columnName, params...).\nDo not hallucinate"}
